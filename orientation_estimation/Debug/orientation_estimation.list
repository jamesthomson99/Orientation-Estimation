
orientation_estimation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b84  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08012d38  08012d38  00022d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013318  08013318  000300a0  2**0
                  CONTENTS
  4 .ARM          00000008  08013318  08013318  00023318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013320  08013320  000300a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013320  08013320  00023320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013324  08013324  00023324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08013328  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a0  2**0
                  CONTENTS
 10 .bss          00008b2c  200000a0  200000a0  000300a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008bcc  20008bcc  000300a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003359a  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000628c  00000000  00000000  0006366a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002338  00000000  00000000  000698f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002108  00000000  00000000  0006bc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cff2  00000000  00000000  0006dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b5f2  00000000  00000000  0009ad2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6338  00000000  00000000  000c631c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001bc654  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000aa84  00000000  00000000  001bc6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012d1c 	.word	0x08012d1c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	08012d1c 	.word	0x08012d1c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	0000      	movs	r0, r0
	...

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f8c:	ed2d 8b02 	vpush	{d8}
 8000f90:	b0e5      	sub	sp, #404	; 0x194
 8000f92:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f001 fdf4 	bl	8002b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 fd58 	bl	8001a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f000 ffc6 	bl	8001f2c <MX_GPIO_Init>
  MX_CRC_Init();
 8000fa0:	f000 fdbe 	bl	8001b20 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000fa4:	f000 fdd0 	bl	8001b48 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000fa8:	f000 ff70 	bl	8001e8c <MX_FMC_Init>
  MX_I2C3_Init();
 8000fac:	f000 fdfe 	bl	8001bac <MX_I2C3_Init>
  MX_LTDC_Init();
 8000fb0:	f000 fe3c 	bl	8001c2c <MX_LTDC_Init>
  MX_SPI5_Init();
 8000fb4:	f000 feba 	bl	8001d2c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000fb8:	f000 feee 	bl	8001d98 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000fbc:	f000 ff3c 	bl	8001e38 <MX_USART1_UART_Init>

  ///////////////////////////
  //change
  ///////////////////////////

  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc4:	48ba      	ldr	r0, [pc, #744]	; (80012b0 <main+0x328>)
 8000fc6:	f002 faf0 	bl	80035aa <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000fca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fce:	48b8      	ldr	r0, [pc, #736]	; (80012b0 <main+0x328>)
 8000fd0:	f002 faeb 	bl	80035aa <HAL_GPIO_TogglePin>

  // Register holds configuration bit setup for registers
  uint8_t reg[1];

  // Gyroscope
  reg[0]=0xC0;
 8000fd4:	23c0      	movs	r3, #192	; 0xc0
 8000fd6:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG1_G, 1, reg, 1, 0x100);
 8000fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	2210      	movs	r2, #16
 8000fee:	21d6      	movs	r1, #214	; 0xd6
 8000ff0:	48b0      	ldr	r0, [pc, #704]	; (80012b4 <main+0x32c>)
 8000ff2:	f004 f9a9 	bl	8005348 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG2_G, 1, reg, 1, 0x100);
 8000ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2301      	movs	r3, #1
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	2211      	movs	r2, #17
 8001010:	21d6      	movs	r1, #214	; 0xd6
 8001012:	48a8      	ldr	r0, [pc, #672]	; (80012b4 <main+0x32c>)
 8001014:	f004 f998 	bl	8005348 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8001018:	2300      	movs	r3, #0
 800101a:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG3_G, 1, reg, 1, 0x100);
 800101e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2301      	movs	r3, #1
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2301      	movs	r3, #1
 8001030:	2212      	movs	r2, #18
 8001032:	21d6      	movs	r1, #214	; 0xd6
 8001034:	489f      	ldr	r0, [pc, #636]	; (80012b4 <main+0x32c>)
 8001036:	f004 f987 	bl	8005348 <HAL_I2C_Mem_Write>
  reg[0]=0x38;
 800103a:	2338      	movs	r3, #56	; 0x38
 800103c:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG4, 1, reg, 1, 0x100);
 8001040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2301      	movs	r3, #1
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	221e      	movs	r2, #30
 8001054:	21d6      	movs	r1, #214	; 0xd6
 8001056:	4897      	ldr	r0, [pc, #604]	; (80012b4 <main+0x32c>)
 8001058:	f004 f976 	bl	8005348 <HAL_I2C_Mem_Write>


  // Accelerometer
  reg[0]=0x38;
 800105c:	2338      	movs	r3, #56	; 0x38
 800105e:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG5_XL, 1, reg, 1, 0x100);
 8001062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	2301      	movs	r3, #1
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	221f      	movs	r2, #31
 8001076:	21d6      	movs	r1, #214	; 0xd6
 8001078:	488e      	ldr	r0, [pc, #568]	; (80012b4 <main+0x32c>)
 800107a:	f004 f965 	bl	8005348 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG6_XL, 1, reg, 1, 0x100);
 8001084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2301      	movs	r3, #1
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	2220      	movs	r2, #32
 8001098:	21d6      	movs	r1, #214	; 0xd6
 800109a:	4886      	ldr	r0, [pc, #536]	; (80012b4 <main+0x32c>)
 800109c:	f004 f954 	bl	8005348 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG7_XL, 1, reg, 1, 0x100);
 80010a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010aa:	9302      	str	r3, [sp, #8]
 80010ac:	2301      	movs	r3, #1
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	2221      	movs	r2, #33	; 0x21
 80010ba:	21d6      	movs	r1, #214	; 0xd6
 80010bc:	487d      	ldr	r0, [pc, #500]	; (80012b4 <main+0x32c>)
 80010be:	f004 f943 	bl	8005348 <HAL_I2C_Mem_Write>


  // Magnetometer
  reg[0]=0x1C;
 80010c2:	231c      	movs	r3, #28
 80010c4:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG1_M, 1, reg, 1, 0x100);
 80010c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	2301      	movs	r3, #1
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	2220      	movs	r2, #32
 80010dc:	213c      	movs	r1, #60	; 0x3c
 80010de:	4875      	ldr	r0, [pc, #468]	; (80012b4 <main+0x32c>)
 80010e0:	f004 f932 	bl	8005348 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG2_M, 1, reg, 1, 0x100);
 80010ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2301      	movs	r3, #1
 80010fc:	2221      	movs	r2, #33	; 0x21
 80010fe:	213c      	movs	r1, #60	; 0x3c
 8001100:	486c      	ldr	r0, [pc, #432]	; (80012b4 <main+0x32c>)
 8001102:	f004 f921 	bl	8005348 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8001106:	2300      	movs	r3, #0
 8001108:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG3_M, 1, reg, 1, 0x100);
 800110c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	2301      	movs	r3, #1
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2301      	movs	r3, #1
 800111e:	2222      	movs	r2, #34	; 0x22
 8001120:	213c      	movs	r1, #60	; 0x3c
 8001122:	4864      	ldr	r0, [pc, #400]	; (80012b4 <main+0x32c>)
 8001124:	f004 f910 	bl	8005348 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8001128:	2300      	movs	r3, #0
 800112a:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG4_M, 1, reg, 1, 0x100);
 800112e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	2223      	movs	r2, #35	; 0x23
 8001142:	213c      	movs	r1, #60	; 0x3c
 8001144:	485b      	ldr	r0, [pc, #364]	; (80012b4 <main+0x32c>)
 8001146:	f004 f8ff 	bl	8005348 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG5_M, 1, reg, 1, 0x100);
 8001150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001154:	9302      	str	r3, [sp, #8]
 8001156:	2301      	movs	r3, #1
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2301      	movs	r3, #1
 8001162:	2224      	movs	r2, #36	; 0x24
 8001164:	213c      	movs	r1, #60	; 0x3c
 8001166:	4853      	ldr	r0, [pc, #332]	; (80012b4 <main+0x32c>)
 8001168:	f004 f8ee 	bl	8005348 <HAL_I2C_Mem_Write>

  double a[3], g[3], m[3];
  uint8_t recieve[6];
  uint8_t buf[50];
  int16_t i = 0, g_data[3],a_data[3], m_data[3];
 800116c:	2300      	movs	r3, #0
 800116e:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001172:	4b51      	ldr	r3, [pc, #324]	; (80012b8 <main+0x330>)
 8001174:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001178:	461d      	mov	r5, r3
 800117a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001182:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001186:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f00a fc17 	bl	800b9c0 <osThreadCreate>
 8001192:	4603      	mov	r3, r0
 8001194:	4a49      	ldr	r2, [pc, #292]	; (80012bc <main+0x334>)
 8001196:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  char st[50]="";
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	3304      	adds	r3, #4
 80011a0:	222e      	movs	r2, #46	; 0x2e
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00d f833 	bl	800e210 <memset>
	  char st1[50]="";
 80011aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	3304      	adds	r3, #4
 80011b4:	222e      	movs	r2, #46	; 0x2e
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00d f829 	bl	800e210 <memset>
	  char st2[50]="";
 80011be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	3304      	adds	r3, #4
 80011c8:	222e      	movs	r2, #46	; 0x2e
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00d f81f 	bl	800e210 <memset>

	  // Receive gyroscope data

	  	  HAL_I2C_Mem_Read(&hi2c3, IMU_GYRO_ACC, 0x18, 1, recieve, 6, 0x100);
 80011d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2306      	movs	r3, #6
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	2218      	movs	r2, #24
 80011e6:	21d6      	movs	r1, #214	; 0xd6
 80011e8:	4832      	ldr	r0, [pc, #200]	; (80012b4 <main+0x32c>)
 80011ea:	f004 f9a7 	bl	800553c <HAL_I2C_Mem_Read>
	  	  for(i = 0;i<3;i++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 80011f4:	e03f      	b.n	8001276 <main+0x2ee>
	  	  {
	  		  g_data[i]=(recieve[2*i+1]<<8)|recieve[2*i];
 80011f6:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	3301      	adds	r3, #1
 80011fe:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001202:	4413      	add	r3, r2
 8001204:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b219      	sxth	r1, r3
 800120c:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001216:	4413      	add	r3, r2
 8001218:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800121c:	b21a      	sxth	r2, r3
 800121e:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001222:	430a      	orrs	r2, r1
 8001224:	b212      	sxth	r2, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 800122c:	440b      	add	r3, r1
 800122e:	f823 2c94 	strh.w	r2, [r3, #-148]
	  		  g[i] = (double)g_data[i]*0.007477;//(245/32768)
 8001232:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800123c:	4413      	add	r3, r2
 800123e:	f933 3c94 	ldrsh.w	r3, [r3, #-148]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f97e 	bl	8000544 <__aeabi_i2d>
 8001248:	f9b7 417e 	ldrsh.w	r4, [r7, #382]	; 0x17e
 800124c:	a316      	add	r3, pc, #88	; (adr r3, 80012a8 <main+0x320>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff f9e1 	bl	8000618 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	00e1      	lsls	r1, r4, #3
 800125c:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8001260:	4401      	add	r1, r0
 8001262:	3938      	subs	r1, #56	; 0x38
 8001264:	e9c1 2300 	strd	r2, r3, [r1]
	  	  for(i = 0;i<3;i++)
 8001268:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800126c:	b29b      	uxth	r3, r3
 800126e:	3301      	adds	r3, #1
 8001270:	b29b      	uxth	r3, r3
 8001272:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 8001276:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800127a:	2b02      	cmp	r3, #2
 800127c:	ddbb      	ble.n	80011f6 <main+0x26e>
	  	  }

	  	  // Receive accelerometer data

	  	  HAL_I2C_Mem_Read(&hi2c3, IMU_GYRO_ACC, 0x28, 1, recieve, 6, 0x100);
 800127e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	2306      	movs	r3, #6
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	2228      	movs	r2, #40	; 0x28
 8001292:	21d6      	movs	r1, #214	; 0xd6
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <main+0x32c>)
 8001296:	f004 f951 	bl	800553c <HAL_I2C_Mem_Read>
	  	  for(i = 0;i<3;i++)
 800129a:	2300      	movs	r3, #0
 800129c:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 80012a0:	e04e      	b.n	8001340 <main+0x3b8>
 80012a2:	bf00      	nop
 80012a4:	f3af 8000 	nop.w
 80012a8:	e78e1933 	.word	0xe78e1933
 80012ac:	3f7ea033 	.word	0x3f7ea033
 80012b0:	40021800 	.word	0x40021800
 80012b4:	2000822c 	.word	0x2000822c
 80012b8:	08012d54 	.word	0x08012d54
 80012bc:	20008228 	.word	0x20008228
	  	  {
	  		  a_data[i]=(recieve[2*i+1]<<8)|recieve[2*i];
 80012c0:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	3301      	adds	r3, #1
 80012c8:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80012cc:	4413      	add	r3, r2
 80012ce:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b219      	sxth	r1, r3
 80012d6:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80012e0:	4413      	add	r3, r2
 80012e2:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80012ec:	430a      	orrs	r2, r1
 80012ee:	b212      	sxth	r2, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80012f6:	440b      	add	r3, r1
 80012f8:	f823 2c9c 	strh.w	r2, [r3, #-156]
	  	  	  a[i] = (double)a_data[i]/16384;//(2/32768)
 80012fc:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001306:	4413      	add	r3, r2
 8001308:	f933 3c9c 	ldrsh.w	r3, [r3, #-156]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f919 	bl	8000544 <__aeabi_i2d>
 8001312:	f9b7 417e 	ldrsh.w	r4, [r7, #382]	; 0x17e
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4bad      	ldr	r3, [pc, #692]	; (80015d0 <main+0x648>)
 800131c:	f7ff faa6 	bl	800086c <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	00e1      	lsls	r1, r4, #3
 8001326:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 800132a:	4401      	add	r1, r0
 800132c:	3920      	subs	r1, #32
 800132e:	e9c1 2300 	strd	r2, r3, [r1]
	  	  for(i = 0;i<3;i++)
 8001332:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001336:	b29b      	uxth	r3, r3
 8001338:	3301      	adds	r3, #1
 800133a:	b29b      	uxth	r3, r3
 800133c:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 8001340:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001344:	2b02      	cmp	r3, #2
 8001346:	ddbb      	ble.n	80012c0 <main+0x338>
	  	  }

	  	  // Receive magnetometer data

	  	  HAL_I2C_Mem_Read(&hi2c3, IMU_MAG, 0x28, 1, recieve, 6, 0x100);
 8001348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800134c:	9302      	str	r3, [sp, #8]
 800134e:	2306      	movs	r3, #6
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2301      	movs	r3, #1
 800135a:	2228      	movs	r2, #40	; 0x28
 800135c:	213c      	movs	r1, #60	; 0x3c
 800135e:	489d      	ldr	r0, [pc, #628]	; (80015d4 <main+0x64c>)
 8001360:	f004 f8ec 	bl	800553c <HAL_I2C_Mem_Read>
	  	  for(i = 0;i<3;i++)
 8001364:	2300      	movs	r3, #0
 8001366:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 800136a:	e03f      	b.n	80013ec <main+0x464>
	  	  {
	  		  m_data[i]=(recieve[2*i+1]<<8)|recieve[2*i];
 800136c:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	3301      	adds	r3, #1
 8001374:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001378:	4413      	add	r3, r2
 800137a:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	b219      	sxth	r1, r3
 8001382:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800138c:	4413      	add	r3, r2
 800138e:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001392:	b21a      	sxth	r2, r3
 8001394:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001398:	430a      	orrs	r2, r1
 800139a:	b212      	sxth	r2, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80013a2:	440b      	add	r3, r1
 80013a4:	f823 2ca4 	strh.w	r2, [r3, #-164]
	  		  m[i] = (double)m_data[i]*0.0001221;//(4/32768)
 80013a8:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80013b2:	4413      	add	r3, r2
 80013b4:	f933 3ca4 	ldrsh.w	r3, [r3, #-164]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f8c3 	bl	8000544 <__aeabi_i2d>
 80013be:	f9b7 417e 	ldrsh.w	r4, [r7, #382]	; 0x17e
 80013c2:	a381      	add	r3, pc, #516	; (adr r3, 80015c8 <main+0x640>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7ff f926 	bl	8000618 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	00e1      	lsls	r1, r4, #3
 80013d2:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 80013d6:	4401      	add	r1, r0
 80013d8:	3950      	subs	r1, #80	; 0x50
 80013da:	e9c1 2300 	strd	r2, r3, [r1]
	  	  for(i = 0;i<3;i++)
 80013de:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3301      	adds	r3, #1
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 80013ec:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	ddbb      	ble.n	800136c <main+0x3e4>
//
//	  strcpy((char*)buf, st2);
//	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);

	  // Call CF
	  CF(g[0], g[1], g[2], a[0], a[1], a[2], m[0], m[1], m[2]);
 80013f4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fbe4 	bl	8000bc8 <__aeabi_d2f>
 8001400:	4604      	mov	r4, r0
 8001402:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fbdd 	bl	8000bc8 <__aeabi_d2f>
 800140e:	4605      	mov	r5, r0
 8001410:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fbd6 	bl	8000bc8 <__aeabi_d2f>
 800141c:	4606      	mov	r6, r0
 800141e:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fbcf 	bl	8000bc8 <__aeabi_d2f>
 800142a:	4680      	mov	r8, r0
 800142c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fbc8 	bl	8000bc8 <__aeabi_d2f>
 8001438:	4681      	mov	r9, r0
 800143a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fbc1 	bl	8000bc8 <__aeabi_d2f>
 8001446:	4682      	mov	sl, r0
 8001448:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	f7ff fbba 	bl	8000bc8 <__aeabi_d2f>
 8001454:	4683      	mov	fp, r0
 8001456:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fbb3 	bl	8000bc8 <__aeabi_d2f>
 8001462:	ee08 0a10 	vmov	s16, r0
 8001466:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fbab 	bl	8000bc8 <__aeabi_d2f>
 8001472:	4603      	mov	r3, r0
 8001474:	ee04 3a10 	vmov	s8, r3
 8001478:	eef0 3a48 	vmov.f32	s7, s16
 800147c:	ee03 ba10 	vmov	s6, fp
 8001480:	ee02 aa90 	vmov	s5, sl
 8001484:	ee02 9a10 	vmov	s4, r9
 8001488:	ee01 8a90 	vmov	s3, r8
 800148c:	ee01 6a10 	vmov	s2, r6
 8001490:	ee00 5a90 	vmov	s1, r5
 8001494:	ee00 4a10 	vmov	s0, r4
 8001498:	f000 f8de 	bl	8001658 <CF>

	  // Send CF pitch, roll, yaw via UART to PC
	  strcat(st1, "pi=");
 800149c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7fe fea5 	bl	80001f0 <strlen>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014ae:	4413      	add	r3, r2
 80014b0:	4a49      	ldr	r2, [pc, #292]	; (80015d8 <main+0x650>)
 80014b2:	6810      	ldr	r0, [r2, #0]
 80014b4:	6018      	str	r0, [r3, #0]
	  double_to_char(pitch_cf,buffer);
 80014b6:	4b49      	ldr	r3, [pc, #292]	; (80015dc <main+0x654>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f854 	bl	8000568 <__aeabi_f2d>
 80014c0:	4604      	mov	r4, r0
 80014c2:	460d      	mov	r5, r1
 80014c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014c8:	4618      	mov	r0, r3
 80014ca:	ec45 4b10 	vmov	d0, r4, r5
 80014ce:	f000 f893 	bl	80015f8 <double_to_char>
	  strcat(st1, buffer);
 80014d2:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80014d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f00c ff59 	bl	800e394 <strcat>
	  strcat(st1, "ro=");
 80014e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe fe82 	bl	80001f0 <strlen>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014f4:	4413      	add	r3, r2
 80014f6:	4a3a      	ldr	r2, [pc, #232]	; (80015e0 <main+0x658>)
 80014f8:	6810      	ldr	r0, [r2, #0]
 80014fa:	6018      	str	r0, [r3, #0]
	  double_to_char(roll_cf,buffer);
 80014fc:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <main+0x65c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f831 	bl	8000568 <__aeabi_f2d>
 8001506:	4604      	mov	r4, r0
 8001508:	460d      	mov	r5, r1
 800150a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800150e:	4618      	mov	r0, r3
 8001510:	ec45 4b10 	vmov	d0, r4, r5
 8001514:	f000 f870 	bl	80015f8 <double_to_char>
	  strcat(st1, buffer);
 8001518:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800151c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001520:	4611      	mov	r1, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f00c ff36 	bl	800e394 <strcat>
	  strcat(st1, "ya=");
 8001528:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe fe5f 	bl	80001f0 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800153a:	4413      	add	r3, r2
 800153c:	4a2a      	ldr	r2, [pc, #168]	; (80015e8 <main+0x660>)
 800153e:	6810      	ldr	r0, [r2, #0]
 8001540:	6018      	str	r0, [r3, #0]
	  double_to_char(yaw_cf,buffer);
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <main+0x664>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f80e 	bl	8000568 <__aeabi_f2d>
 800154c:	4604      	mov	r4, r0
 800154e:	460d      	mov	r5, r1
 8001550:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001554:	4618      	mov	r0, r3
 8001556:	ec45 4b10 	vmov	d0, r4, r5
 800155a:	f000 f84d 	bl	80015f8 <double_to_char>
	  strcat(st1, buffer);
 800155e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001562:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f00c ff13 	bl	800e394 <strcat>
	  strcat(st1, "\r\n");
 800156e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe fe3c 	bl	80001f0 <strlen>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001580:	4413      	add	r3, r2
 8001582:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <main+0x668>)
 8001584:	8811      	ldrh	r1, [r2, #0]
 8001586:	7892      	ldrb	r2, [r2, #2]
 8001588:	8019      	strh	r1, [r3, #0]
 800158a:	709a      	strb	r2, [r3, #2]
	  strcpy((char*)buf, st1);
 800158c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001590:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f00c ff0b 	bl	800e3b2 <strcpy>
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800159c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe fe25 	bl	80001f0 <strlen>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	4810      	ldr	r0, [pc, #64]	; (80015f4 <main+0x66c>)
 80015b4:	f006 fd15 	bl	8007fe2 <HAL_UART_Transmit>

	  // Sample period
	  HAL_Delay(delay_ms);
 80015b8:	23c8      	movs	r3, #200	; 0xc8
 80015ba:	4618      	mov	r0, r3
 80015bc:	f001 fb22 	bl	8002c04 <HAL_Delay>
  {
 80015c0:	e5ea      	b.n	8001198 <main+0x210>
 80015c2:	bf00      	nop
 80015c4:	f3af 8000 	nop.w
 80015c8:	0380be01 	.word	0x0380be01
 80015cc:	3f2000ff 	.word	0x3f2000ff
 80015d0:	40d00000 	.word	0x40d00000
 80015d4:	2000822c 	.word	0x2000822c
 80015d8:	08012d44 	.word	0x08012d44
 80015dc:	200000bc 	.word	0x200000bc
 80015e0:	08012d48 	.word	0x08012d48
 80015e4:	200000c0 	.word	0x200000c0
 80015e8:	08012d4c 	.word	0x08012d4c
 80015ec:	200000c4 	.word	0x200000c4
 80015f0:	08012d50 	.word	0x08012d50
 80015f4:	20008388 	.word	0x20008388

080015f8 <double_to_char>:
  }
  /* USER CODE END 3 */
}

// Function to convert double variables to a char
void double_to_char(double f,char * buffer){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	ed87 0b02 	vstr	d0, [r7, #8]
 8001602:	6078      	str	r0, [r7, #4]
    gcvt(f,10,buffer);
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	200a      	movs	r0, #10
 8001608:	ed97 0b02 	vldr	d0, [r7, #8]
 800160c:	f00c fd94 	bl	800e138 <gcvt>
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <RAD_TO_DEG>:

// Receives radian angle and returns degree angle
float RAD_TO_DEG(float RAD){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (180/3.14159265359) * RAD;
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7fe ffa0 	bl	8000568 <__aeabi_f2d>
 8001628:	a309      	add	r3, pc, #36	; (adr r3, 8001650 <RAD_TO_DEG+0x38>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7fe fff3 	bl	8000618 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff fac5 	bl	8000bc8 <__aeabi_d2f>
 800163e:	4603      	mov	r3, r0
 8001640:	ee07 3a90 	vmov	s15, r3
}
 8001644:	eeb0 0a67 	vmov.f32	s0, s15
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	1a63bfe5 	.word	0x1a63bfe5
 8001654:	404ca5dc 	.word	0x404ca5dc

08001658 <CF>:
float DEG_TO_RAD(float DEG){
    return (3.14159265359/180) * DEG;
}

// Complementary filter implementation
void CF(float wx, float wy, float wz, float ax, float ay, float az, float mx, float my, float mz){
 8001658:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800165c:	b092      	sub	sp, #72	; 0x48
 800165e:	af00      	add	r7, sp, #0
 8001660:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001664:	edc7 0a08 	vstr	s1, [r7, #32]
 8001668:	ed87 1a07 	vstr	s2, [r7, #28]
 800166c:	edc7 1a06 	vstr	s3, [r7, #24]
 8001670:	ed87 2a05 	vstr	s4, [r7, #20]
 8001674:	edc7 2a04 	vstr	s5, [r7, #16]
 8001678:	ed87 3a03 	vstr	s6, [r7, #12]
 800167c:	edc7 3a02 	vstr	s7, [r7, #8]
 8001680:	ed87 4a01 	vstr	s8, [r7, #4]

    // Calculate pitch and roll measured by accelerometer
    float a_pitch_cf = RAD_TO_DEG(atan2(-ax, sqrt(pow(ay, 2) + pow(az, 2))));
 8001684:	edd7 7a06 	vldr	s15, [r7, #24]
 8001688:	eef1 7a67 	vneg.f32	s15, s15
 800168c:	ee17 3a90 	vmov	r3, s15
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff69 	bl	8000568 <__aeabi_f2d>
 8001696:	4604      	mov	r4, r0
 8001698:	460d      	mov	r5, r1
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7fe ff64 	bl	8000568 <__aeabi_f2d>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	ed9f 1be2 	vldr	d1, [pc, #904]	; 8001a30 <CF+0x3d8>
 80016a8:	ec43 2b10 	vmov	d0, r2, r3
 80016ac:	f00f f98e 	bl	80109cc <pow>
 80016b0:	ec59 8b10 	vmov	r8, r9, d0
 80016b4:	6938      	ldr	r0, [r7, #16]
 80016b6:	f7fe ff57 	bl	8000568 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	ed9f 1bdc 	vldr	d1, [pc, #880]	; 8001a30 <CF+0x3d8>
 80016c2:	ec43 2b10 	vmov	d0, r2, r3
 80016c6:	f00f f981 	bl	80109cc <pow>
 80016ca:	ec53 2b10 	vmov	r2, r3, d0
 80016ce:	4640      	mov	r0, r8
 80016d0:	4649      	mov	r1, r9
 80016d2:	f7fe fdeb 	bl	80002ac <__adddf3>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	ec43 2b17 	vmov	d7, r2, r3
 80016de:	eeb0 0a47 	vmov.f32	s0, s14
 80016e2:	eef0 0a67 	vmov.f32	s1, s15
 80016e6:	f00f fa1f 	bl	8010b28 <sqrt>
 80016ea:	eeb0 7a40 	vmov.f32	s14, s0
 80016ee:	eef0 7a60 	vmov.f32	s15, s1
 80016f2:	eeb0 1a47 	vmov.f32	s2, s14
 80016f6:	eef0 1a67 	vmov.f32	s3, s15
 80016fa:	ec45 4b10 	vmov	d0, r4, r5
 80016fe:	f00f f963 	bl	80109c8 <atan2>
 8001702:	ec53 2b10 	vmov	r2, r3, d0
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff fa5d 	bl	8000bc8 <__aeabi_d2f>
 800170e:	4603      	mov	r3, r0
 8001710:	ee00 3a10 	vmov	s0, r3
 8001714:	f7ff ff80 	bl	8001618 <RAD_TO_DEG>
 8001718:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
    float a_roll_cf = RAD_TO_DEG(atan2(ay, az));
 800171c:	6978      	ldr	r0, [r7, #20]
 800171e:	f7fe ff23 	bl	8000568 <__aeabi_f2d>
 8001722:	4604      	mov	r4, r0
 8001724:	460d      	mov	r5, r1
 8001726:	6938      	ldr	r0, [r7, #16]
 8001728:	f7fe ff1e 	bl	8000568 <__aeabi_f2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	ec43 2b11 	vmov	d1, r2, r3
 8001734:	ec45 4b10 	vmov	d0, r4, r5
 8001738:	f00f f946 	bl	80109c8 <atan2>
 800173c:	ec53 2b10 	vmov	r2, r3, d0
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa40 	bl	8000bc8 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	ee00 3a10 	vmov	s0, r3
 800174e:	f7ff ff63 	bl	8001618 <RAD_TO_DEG>
 8001752:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40

    // Calculate yaw measured by magnetometer
    float Mx_cf = mx * cos(a_pitch_cf) + mz * sin(a_pitch_cf);
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f7fe ff06 	bl	8000568 <__aeabi_f2d>
 800175c:	4604      	mov	r4, r0
 800175e:	460d      	mov	r5, r1
 8001760:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001762:	f7fe ff01 	bl	8000568 <__aeabi_f2d>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	ec43 2b10 	vmov	d0, r2, r3
 800176e:	f00f f887 	bl	8010880 <cos>
 8001772:	ec53 2b10 	vmov	r2, r3, d0
 8001776:	4620      	mov	r0, r4
 8001778:	4629      	mov	r1, r5
 800177a:	f7fe ff4d 	bl	8000618 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4690      	mov	r8, r2
 8001784:	4699      	mov	r9, r3
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7fe feee 	bl	8000568 <__aeabi_f2d>
 800178c:	4604      	mov	r4, r0
 800178e:	460d      	mov	r5, r1
 8001790:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001792:	f7fe fee9 	bl	8000568 <__aeabi_f2d>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	ec43 2b10 	vmov	d0, r2, r3
 800179e:	f00f f8bf 	bl	8010920 <sin>
 80017a2:	ec53 2b10 	vmov	r2, r3, d0
 80017a6:	4620      	mov	r0, r4
 80017a8:	4629      	mov	r1, r5
 80017aa:	f7fe ff35 	bl	8000618 <__aeabi_dmul>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4640      	mov	r0, r8
 80017b4:	4649      	mov	r1, r9
 80017b6:	f7fe fd79 	bl	80002ac <__adddf3>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f7ff fa01 	bl	8000bc8 <__aeabi_d2f>
 80017c6:	4603      	mov	r3, r0
 80017c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    float My_cf = mx * sin(a_roll_cf) * sin(a_pitch_cf) + my * cos(a_roll_cf) - mz * sin(a_roll_cf) * cos(a_pitch_cf);
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7fe fecc 	bl	8000568 <__aeabi_f2d>
 80017d0:	4604      	mov	r4, r0
 80017d2:	460d      	mov	r5, r1
 80017d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80017d6:	f7fe fec7 	bl	8000568 <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	ec43 2b10 	vmov	d0, r2, r3
 80017e2:	f00f f89d 	bl	8010920 <sin>
 80017e6:	ec53 2b10 	vmov	r2, r3, d0
 80017ea:	4620      	mov	r0, r4
 80017ec:	4629      	mov	r1, r5
 80017ee:	f7fe ff13 	bl	8000618 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4614      	mov	r4, r2
 80017f8:	461d      	mov	r5, r3
 80017fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80017fc:	f7fe feb4 	bl	8000568 <__aeabi_f2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	ec43 2b10 	vmov	d0, r2, r3
 8001808:	f00f f88a 	bl	8010920 <sin>
 800180c:	ec53 2b10 	vmov	r2, r3, d0
 8001810:	4620      	mov	r0, r4
 8001812:	4629      	mov	r1, r5
 8001814:	f7fe ff00 	bl	8000618 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4690      	mov	r8, r2
 800181e:	4699      	mov	r9, r3
 8001820:	68b8      	ldr	r0, [r7, #8]
 8001822:	f7fe fea1 	bl	8000568 <__aeabi_f2d>
 8001826:	4604      	mov	r4, r0
 8001828:	460d      	mov	r5, r1
 800182a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800182c:	f7fe fe9c 	bl	8000568 <__aeabi_f2d>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	ec43 2b10 	vmov	d0, r2, r3
 8001838:	f00f f822 	bl	8010880 <cos>
 800183c:	ec53 2b10 	vmov	r2, r3, d0
 8001840:	4620      	mov	r0, r4
 8001842:	4629      	mov	r1, r5
 8001844:	f7fe fee8 	bl	8000618 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4640      	mov	r0, r8
 800184e:	4649      	mov	r1, r9
 8001850:	f7fe fd2c 	bl	80002ac <__adddf3>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4690      	mov	r8, r2
 800185a:	4699      	mov	r9, r3
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7fe fe83 	bl	8000568 <__aeabi_f2d>
 8001862:	4604      	mov	r4, r0
 8001864:	460d      	mov	r5, r1
 8001866:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001868:	f7fe fe7e 	bl	8000568 <__aeabi_f2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	ec43 2b10 	vmov	d0, r2, r3
 8001874:	f00f f854 	bl	8010920 <sin>
 8001878:	ec53 2b10 	vmov	r2, r3, d0
 800187c:	4620      	mov	r0, r4
 800187e:	4629      	mov	r1, r5
 8001880:	f7fe feca 	bl	8000618 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4614      	mov	r4, r2
 800188a:	461d      	mov	r5, r3
 800188c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800188e:	f7fe fe6b 	bl	8000568 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	ec43 2b10 	vmov	d0, r2, r3
 800189a:	f00e fff1 	bl	8010880 <cos>
 800189e:	ec53 2b10 	vmov	r2, r3, d0
 80018a2:	4620      	mov	r0, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	f7fe feb7 	bl	8000618 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4640      	mov	r0, r8
 80018b0:	4649      	mov	r1, r9
 80018b2:	f7fe fcf9 	bl	80002a8 <__aeabi_dsub>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f983 	bl	8000bc8 <__aeabi_d2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
    float m_yaw_cf = RAD_TO_DEG(atan2(-My_cf, Mx_cf));
 80018c6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018ca:	eef1 7a67 	vneg.f32	s15, s15
 80018ce:	ee17 3a90 	vmov	r3, s15
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe48 	bl	8000568 <__aeabi_f2d>
 80018d8:	4604      	mov	r4, r0
 80018da:	460d      	mov	r5, r1
 80018dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018de:	f7fe fe43 	bl	8000568 <__aeabi_f2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	ec43 2b11 	vmov	d1, r2, r3
 80018ea:	ec45 4b10 	vmov	d0, r4, r5
 80018ee:	f00f f86b 	bl	80109c8 <atan2>
 80018f2:	ec53 2b10 	vmov	r2, r3, d0
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f965 	bl	8000bc8 <__aeabi_d2f>
 80018fe:	4603      	mov	r3, r0
 8001900:	ee00 3a10 	vmov	s0, r3
 8001904:	f7ff fe88 	bl	8001618 <RAD_TO_DEG>
 8001908:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34

    // Calculate pitch, roll and yaw measured by gyroscope
    float g_pitch_cf = RAD_TO_DEG(wy * DT_cf);
 800190c:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <CF+0x3e0>)
 800190e:	ed93 7a00 	vldr	s14, [r3]
 8001912:	edd7 7a08 	vldr	s15, [r7, #32]
 8001916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191a:	eeb0 0a67 	vmov.f32	s0, s15
 800191e:	f7ff fe7b 	bl	8001618 <RAD_TO_DEG>
 8001922:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    float g_roll_cf = RAD_TO_DEG(wx * DT_cf);
 8001926:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <CF+0x3e0>)
 8001928:	ed93 7a00 	vldr	s14, [r3]
 800192c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001934:	eeb0 0a67 	vmov.f32	s0, s15
 8001938:	f7ff fe6e 	bl	8001618 <RAD_TO_DEG>
 800193c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    float g_yaw_cf = RAD_TO_DEG(wz * DT_cf);
 8001940:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <CF+0x3e0>)
 8001942:	ed93 7a00 	vldr	s14, [r3]
 8001946:	edd7 7a07 	vldr	s15, [r7, #28]
 800194a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194e:	eeb0 0a67 	vmov.f32	s0, s15
 8001952:	f7ff fe61 	bl	8001618 <RAD_TO_DEG>
 8001956:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28

    // Update CF pitch, roll and yaw using previous pitch, roll and yaw and values above
    pitch_cf = weight_cf * (pitch_cf + g_pitch_cf * DT_cf) + (1 - weight_cf) * a_pitch_cf;
 800195a:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <CF+0x3e0>)
 800195c:	ed93 7a00 	vldr	s14, [r3]
 8001960:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001964:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001968:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <CF+0x3e4>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001972:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <CF+0x3e8>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197c:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <CF+0x3e8>)
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001986:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800198a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800198e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <CF+0x3e4>)
 8001998:	edc3 7a00 	vstr	s15, [r3]
    roll_cf = weight_cf * (roll_cf + g_roll_cf * DT_cf) + (1 - weight_cf) * a_roll_cf;
 800199c:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <CF+0x3e0>)
 800199e:	ed93 7a00 	vldr	s14, [r3]
 80019a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <CF+0x3ec>)
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019b4:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <CF+0x3e8>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <CF+0x3e8>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019cc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80019d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <CF+0x3ec>)
 80019da:	edc3 7a00 	vstr	s15, [r3]
    yaw_cf = weight_cf * (yaw_cf + g_yaw_cf * DT_cf) + (1 - weight_cf) * m_yaw_cf;
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <CF+0x3e0>)
 80019e0:	ed93 7a00 	vldr	s14, [r3]
 80019e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <CF+0x3f0>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <CF+0x3e8>)
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <CF+0x3e8>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a0e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <CF+0x3f0>)
 8001a1c:	edc3 7a00 	vstr	s15, [r3]
}
 8001a20:	bf00      	nop
 8001a22:	3748      	adds	r7, #72	; 0x48
 8001a24:	46bd      	mov	sp, r7
 8001a26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a2a:	bf00      	nop
 8001a2c:	f3af 8000 	nop.w
 8001a30:	00000000 	.word	0x00000000
 8001a34:	40000000 	.word	0x40000000
 8001a38:	20000004 	.word	0x20000004
 8001a3c:	200000bc 	.word	0x200000bc
 8001a40:	20000000 	.word	0x20000000
 8001a44:	200000c0 	.word	0x200000c0
 8001a48:	200000c4 	.word	0x200000c4

08001a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b094      	sub	sp, #80	; 0x50
 8001a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a52:	f107 0320 	add.w	r3, r7, #32
 8001a56:	2230      	movs	r2, #48	; 0x30
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f00c fbd8 	bl	800e210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	4b28      	ldr	r3, [pc, #160]	; (8001b18 <SystemClock_Config+0xcc>)
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	4a27      	ldr	r2, [pc, #156]	; (8001b18 <SystemClock_Config+0xcc>)
 8001a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <SystemClock_Config+0xcc>)
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <SystemClock_Config+0xd0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a98:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <SystemClock_Config+0xd0>)
 8001a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <SystemClock_Config+0xd0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aac:	2301      	movs	r3, #1
 8001aae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ab0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001ac4:	2348      	movs	r3, #72	; 0x48
 8001ac6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001acc:	2303      	movs	r3, #3
 8001ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad0:	f107 0320 	add.w	r3, r7, #32
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f004 fe95 	bl	8006804 <HAL_RCC_OscConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ae0:	f000 fb50 	bl	8002184 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001afa:	f107 030c 	add.w	r3, r7, #12
 8001afe:	2102      	movs	r1, #2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f005 f8f7 	bl	8006cf4 <HAL_RCC_ClockConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b0c:	f000 fb3a 	bl	8002184 <Error_Handler>
  }
}
 8001b10:	bf00      	nop
 8001b12:	3750      	adds	r7, #80	; 0x50
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40007000 	.word	0x40007000

08001b20 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_CRC_Init+0x20>)
 8001b26:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <MX_CRC_Init+0x24>)
 8001b28:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_CRC_Init+0x20>)
 8001b2c:	f001 f970 	bl	8002e10 <HAL_CRC_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001b36:	f000 fb25 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200082d8 	.word	0x200082d8
 8001b44:	40023000 	.word	0x40023000

08001b48 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <MX_DMA2D_Init+0x5c>)
 8001b4e:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <MX_DMA2D_Init+0x60>)
 8001b50:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001b52:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <MX_DMA2D_Init+0x5c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MX_DMA2D_Init+0x5c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_DMA2D_Init+0x5c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_DMA2D_Init+0x5c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_DMA2D_Init+0x5c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_DMA2D_Init+0x5c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_DMA2D_Init+0x5c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001b7c:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <MX_DMA2D_Init+0x5c>)
 8001b7e:	f001 f963 	bl	8002e48 <HAL_DMA2D_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001b88:	f000 fafc 	bl	8002184 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_DMA2D_Init+0x5c>)
 8001b90:	f001 fab4 	bl	80030fc <HAL_DMA2D_ConfigLayer>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001b9a:	f000 faf3 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20008414 	.word	0x20008414
 8001ba8:	4002b000 	.word	0x4002b000

08001bac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <MX_I2C3_Init+0x74>)
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <MX_I2C3_Init+0x78>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <MX_I2C3_Init+0x74>)
 8001bb8:	4a1b      	ldr	r2, [pc, #108]	; (8001c28 <MX_I2C3_Init+0x7c>)
 8001bba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_I2C3_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <MX_I2C3_Init+0x74>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_I2C3_Init+0x74>)
 8001bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_I2C3_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <MX_I2C3_Init+0x74>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_I2C3_Init+0x74>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <MX_I2C3_Init+0x74>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001be8:	480d      	ldr	r0, [pc, #52]	; (8001c20 <MX_I2C3_Init+0x74>)
 8001bea:	f003 fa69 	bl	80050c0 <HAL_I2C_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001bf4:	f000 fac6 	bl	8002184 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4809      	ldr	r0, [pc, #36]	; (8001c20 <MX_I2C3_Init+0x74>)
 8001bfc:	f004 fa1f 	bl	800603e <HAL_I2CEx_ConfigAnalogFilter>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c06:	f000 fabd 	bl	8002184 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4804      	ldr	r0, [pc, #16]	; (8001c20 <MX_I2C3_Init+0x74>)
 8001c0e:	f004 fa52 	bl	80060b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c18:	f000 fab4 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	2000822c 	.word	0x2000822c
 8001c24:	40005c00 	.word	0x40005c00
 8001c28:	000186a0 	.word	0x000186a0

08001c2c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08e      	sub	sp, #56	; 0x38
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2234      	movs	r2, #52	; 0x34
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f00c fae9 	bl	800e210 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001c3e:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c40:	4a39      	ldr	r2, [pc, #228]	; (8001d28 <MX_LTDC_Init+0xfc>)
 8001c42:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001c44:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001c4a:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001c50:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001c56:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001c5c:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c5e:	2209      	movs	r2, #9
 8001c60:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001c62:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001c68:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c6a:	221d      	movs	r2, #29
 8001c6c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c70:	2203      	movs	r2, #3
 8001c72:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001c74:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c76:	f240 120d 	movw	r2, #269	; 0x10d
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001c7c:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c7e:	f240 1243 	movw	r2, #323	; 0x143
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c86:	f240 1217 	movw	r2, #279	; 0x117
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001c8c:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c8e:	f240 1247 	movw	r2, #327	; 0x147
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001c94:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001cac:	481d      	ldr	r0, [pc, #116]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001cae:	f004 fa41 	bl	8006134 <HAL_LTDC_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001cb8:	f000 fa64 	bl	8002184 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001cc0:	23f0      	movs	r3, #240	; 0xf0
 8001cc2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001cc8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001ccc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001cd2:	23ff      	movs	r3, #255	; 0xff
 8001cd4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001cda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cde:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001ce0:	2307      	movs	r3, #7
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001ce4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001cea:	23f0      	movs	r3, #240	; 0xf0
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001cee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <MX_LTDC_Init+0xf8>)
 8001d0e:	f004 fba3 	bl	8006458 <HAL_LTDC_ConfigLayer>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001d18:	f000 fa34 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001d1c:	bf00      	nop
 8001d1e:	3738      	adds	r7, #56	; 0x38
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200082e0 	.word	0x200082e0
 8001d28:	40016800 	.word	0x40016800

08001d2c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <MX_SPI5_Init+0x64>)
 8001d32:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <MX_SPI5_Init+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <MX_SPI5_Init+0x64>)
 8001d38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d3c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_SPI5_Init+0x64>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <MX_SPI5_Init+0x64>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_SPI5_Init+0x64>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <MX_SPI5_Init+0x64>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_SPI5_Init+0x64>)
 8001d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d5c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_SPI5_Init+0x64>)
 8001d60:	2218      	movs	r2, #24
 8001d62:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <MX_SPI5_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_SPI5_Init+0x64>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <MX_SPI5_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_SPI5_Init+0x64>)
 8001d78:	220a      	movs	r2, #10
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_SPI5_Init+0x64>)
 8001d7e:	f005 fbd9 	bl	8007534 <HAL_SPI_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001d88:	f000 f9fc 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20008280 	.word	0x20008280
 8001d94:	40015000 	.word	0x40015000

08001d98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9e:	f107 0308 	add.w	r3, r7, #8
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dac:	463b      	mov	r3, r7
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001db4:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <MX_TIM1_Init+0x98>)
 8001db6:	4a1f      	ldr	r2, [pc, #124]	; (8001e34 <MX_TIM1_Init+0x9c>)
 8001db8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dba:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <MX_TIM1_Init+0x98>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <MX_TIM1_Init+0x98>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <MX_TIM1_Init+0x98>)
 8001dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dcc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <MX_TIM1_Init+0x98>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dd4:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <MX_TIM1_Init+0x98>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <MX_TIM1_Init+0x98>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001de0:	4813      	ldr	r0, [pc, #76]	; (8001e30 <MX_TIM1_Init+0x98>)
 8001de2:	f005 fc30 	bl	8007646 <HAL_TIM_Base_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001dec:	f000 f9ca 	bl	8002184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001df6:	f107 0308 	add.w	r3, r7, #8
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480c      	ldr	r0, [pc, #48]	; (8001e30 <MX_TIM1_Init+0x98>)
 8001dfe:	f005 fde9 	bl	80079d4 <HAL_TIM_ConfigClockSource>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e08:	f000 f9bc 	bl	8002184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e14:	463b      	mov	r3, r7
 8001e16:	4619      	mov	r1, r3
 8001e18:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_TIM1_Init+0x98>)
 8001e1a:	f006 f805 	bl	8007e28 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e24:	f000 f9ae 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e28:	bf00      	nop
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200083cc 	.word	0x200083cc
 8001e34:	40010000 	.word	0x40010000

08001e38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_USART1_UART_Init+0x4c>)
 8001e3e:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <MX_USART1_UART_Init+0x50>)
 8001e40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <MX_USART1_UART_Init+0x4c>)
 8001e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <MX_USART1_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <MX_USART1_UART_Init+0x4c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <MX_USART1_UART_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <MX_USART1_UART_Init+0x4c>)
 8001e5e:	220c      	movs	r2, #12
 8001e60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <MX_USART1_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MX_USART1_UART_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_USART1_UART_Init+0x4c>)
 8001e70:	f006 f86a 	bl	8007f48 <HAL_UART_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e7a:	f000 f983 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20008388 	.word	0x20008388
 8001e88:	40011000 	.word	0x40011000

08001e8c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
 8001ea0:	615a      	str	r2, [r3, #20]
 8001ea2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <MX_FMC_Init+0x98>)
 8001ea6:	4a20      	ldr	r2, [pc, #128]	; (8001f28 <MX_FMC_Init+0x9c>)
 8001ea8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <MX_FMC_Init+0x98>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <MX_FMC_Init+0x98>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <MX_FMC_Init+0x98>)
 8001eb8:	2204      	movs	r2, #4
 8001eba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <MX_FMC_Init+0x98>)
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001ec2:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <MX_FMC_Init+0x98>)
 8001ec4:	2240      	movs	r2, #64	; 0x40
 8001ec6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <MX_FMC_Init+0x98>)
 8001eca:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001ece:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <MX_FMC_Init+0x98>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <MX_FMC_Init+0x98>)
 8001ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001edc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <MX_FMC_Init+0x98>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <MX_FMC_Init+0x98>)
 8001ee6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001eec:	2302      	movs	r3, #2
 8001eee:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001ef0:	2307      	movs	r3, #7
 8001ef2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001ef8:	2307      	movs	r3, #7
 8001efa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001efc:	2303      	movs	r3, #3
 8001efe:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001f00:	2302      	movs	r3, #2
 8001f02:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001f04:	2302      	movs	r3, #2
 8001f06:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4805      	ldr	r0, [pc, #20]	; (8001f24 <MX_FMC_Init+0x98>)
 8001f0e:	f005 fadd 	bl	80074cc <HAL_SDRAM_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001f18:	f000 f934 	bl	8002184 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001f1c:	bf00      	nop
 8001f1e:	3720      	adds	r7, #32
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20008454 	.word	0x20008454
 8001f28:	a0000140 	.word	0xa0000140

08001f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08e      	sub	sp, #56	; 0x38
 8001f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
 8001f46:	4b7b      	ldr	r3, [pc, #492]	; (8002134 <MX_GPIO_Init+0x208>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a7a      	ldr	r2, [pc, #488]	; (8002134 <MX_GPIO_Init+0x208>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b78      	ldr	r3, [pc, #480]	; (8002134 <MX_GPIO_Init+0x208>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	4b74      	ldr	r3, [pc, #464]	; (8002134 <MX_GPIO_Init+0x208>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a73      	ldr	r2, [pc, #460]	; (8002134 <MX_GPIO_Init+0x208>)
 8001f68:	f043 0320 	orr.w	r3, r3, #32
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b71      	ldr	r3, [pc, #452]	; (8002134 <MX_GPIO_Init+0x208>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	4b6d      	ldr	r3, [pc, #436]	; (8002134 <MX_GPIO_Init+0x208>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a6c      	ldr	r2, [pc, #432]	; (8002134 <MX_GPIO_Init+0x208>)
 8001f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b6a      	ldr	r3, [pc, #424]	; (8002134 <MX_GPIO_Init+0x208>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	61bb      	str	r3, [r7, #24]
 8001f94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	4b66      	ldr	r3, [pc, #408]	; (8002134 <MX_GPIO_Init+0x208>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a65      	ldr	r2, [pc, #404]	; (8002134 <MX_GPIO_Init+0x208>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b63      	ldr	r3, [pc, #396]	; (8002134 <MX_GPIO_Init+0x208>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	4b5f      	ldr	r3, [pc, #380]	; (8002134 <MX_GPIO_Init+0x208>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a5e      	ldr	r2, [pc, #376]	; (8002134 <MX_GPIO_Init+0x208>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b5c      	ldr	r3, [pc, #368]	; (8002134 <MX_GPIO_Init+0x208>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b58      	ldr	r3, [pc, #352]	; (8002134 <MX_GPIO_Init+0x208>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a57      	ldr	r2, [pc, #348]	; (8002134 <MX_GPIO_Init+0x208>)
 8001fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b55      	ldr	r3, [pc, #340]	; (8002134 <MX_GPIO_Init+0x208>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	4b51      	ldr	r3, [pc, #324]	; (8002134 <MX_GPIO_Init+0x208>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a50      	ldr	r2, [pc, #320]	; (8002134 <MX_GPIO_Init+0x208>)
 8001ff4:	f043 0310 	orr.w	r3, r3, #16
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b4e      	ldr	r3, [pc, #312]	; (8002134 <MX_GPIO_Init+0x208>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <MX_GPIO_Init+0x208>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a49      	ldr	r2, [pc, #292]	; (8002134 <MX_GPIO_Init+0x208>)
 8002010:	f043 0308 	orr.w	r3, r3, #8
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <MX_GPIO_Init+0x208>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	2116      	movs	r1, #22
 8002026:	4844      	ldr	r0, [pc, #272]	; (8002138 <MX_GPIO_Init+0x20c>)
 8002028:	f001 faa6 	bl	8003578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	4842      	ldr	r0, [pc, #264]	; (800213c <MX_GPIO_Init+0x210>)
 8002032:	f001 faa1 	bl	8003578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002036:	2200      	movs	r2, #0
 8002038:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800203c:	4840      	ldr	r0, [pc, #256]	; (8002140 <MX_GPIO_Init+0x214>)
 800203e:	f001 fa9b 	bl	8003578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002048:	483e      	ldr	r0, [pc, #248]	; (8002144 <MX_GPIO_Init+0x218>)
 800204a:	f001 fa95 	bl	8003578 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800204e:	2316      	movs	r3, #22
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002052:	2301      	movs	r3, #1
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002062:	4619      	mov	r1, r3
 8002064:	4834      	ldr	r0, [pc, #208]	; (8002138 <MX_GPIO_Init+0x20c>)
 8002066:	f001 f8db 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800206a:	f248 0307 	movw	r3, #32775	; 0x8007
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002070:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207e:	4619      	mov	r1, r3
 8002080:	482e      	ldr	r0, [pc, #184]	; (800213c <MX_GPIO_Init+0x210>)
 8002082:	f001 f8cd 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208a:	2301      	movs	r3, #1
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209a:	4619      	mov	r1, r3
 800209c:	4827      	ldr	r0, [pc, #156]	; (800213c <MX_GPIO_Init+0x210>)
 800209e:	f001 f8bf 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80020a2:	2320      	movs	r3, #32
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80020b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b4:	4619      	mov	r1, r3
 80020b6:	4820      	ldr	r0, [pc, #128]	; (8002138 <MX_GPIO_Init+0x20c>)
 80020b8:	f001 f8b2 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80020bc:	2304      	movs	r3, #4
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020cc:	4619      	mov	r1, r3
 80020ce:	481e      	ldr	r0, [pc, #120]	; (8002148 <MX_GPIO_Init+0x21c>)
 80020d0:	f001 f8a6 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80020d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80020e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e6:	4619      	mov	r1, r3
 80020e8:	4815      	ldr	r0, [pc, #84]	; (8002140 <MX_GPIO_Init+0x214>)
 80020ea:	f001 f899 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80020ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f4:	2301      	movs	r3, #1
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	4619      	mov	r1, r3
 8002106:	480e      	ldr	r0, [pc, #56]	; (8002140 <MX_GPIO_Init+0x214>)
 8002108:	f001 f88a 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800210c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002112:	2301      	movs	r3, #1
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800211e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002122:	4619      	mov	r1, r3
 8002124:	4807      	ldr	r0, [pc, #28]	; (8002144 <MX_GPIO_Init+0x218>)
 8002126:	f001 f87b 	bl	8003220 <HAL_GPIO_Init>

}
 800212a:	bf00      	nop
 800212c:	3738      	adds	r7, #56	; 0x38
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	40020800 	.word	0x40020800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020c00 	.word	0x40020c00
 8002144:	40021800 	.word	0x40021800
 8002148:	40020400 	.word	0x40020400

0800214c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002154:	f00b fce8 	bl	800db28 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002158:	2001      	movs	r0, #1
 800215a:	f009 fc7d 	bl	800ba58 <osDelay>
 800215e:	e7fb      	b.n	8002158 <StartDefaultTask+0xc>

08002160 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d101      	bne.n	8002176 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002172:	f000 fd27 	bl	8002bc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40001000 	.word	0x40001000

08002184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002188:	b672      	cpsid	i
}
 800218a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800218c:	e7fe      	b.n	800218c <Error_Handler+0x8>
	...

08002190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_MspInit+0x54>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_MspInit+0x54>)
 80021a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_MspInit+0x54>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_MspInit+0x54>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_MspInit+0x54>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_MspInit+0x54>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	210f      	movs	r1, #15
 80021d2:	f06f 0001 	mvn.w	r0, #1
 80021d6:	f000 fdf1 	bl	8002dbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800

080021e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <HAL_CRC_MspInit+0x3c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d10d      	bne.n	8002216 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_CRC_MspInit+0x40>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <HAL_CRC_MspInit+0x40>)
 8002204:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <HAL_CRC_MspInit+0x40>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40023000 	.word	0x40023000
 8002228:	40023800 	.word	0x40023800

0800222c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_DMA2D_MspInit+0x48>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d115      	bne.n	800226a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_DMA2D_MspInit+0x4c>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a0c      	ldr	r2, [pc, #48]	; (8002278 <HAL_DMA2D_MspInit+0x4c>)
 8002248:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_DMA2D_MspInit+0x4c>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2105      	movs	r1, #5
 800225e:	205a      	movs	r0, #90	; 0x5a
 8002260:	f000 fdac 	bl	8002dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002264:	205a      	movs	r0, #90	; 0x5a
 8002266:	f000 fdc5 	bl	8002df4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	4002b000 	.word	0x4002b000
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a29      	ldr	r2, [pc, #164]	; (8002340 <HAL_I2C_MspInit+0xc4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d14b      	bne.n	8002336 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b28      	ldr	r3, [pc, #160]	; (8002344 <HAL_I2C_MspInit+0xc8>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a27      	ldr	r2, [pc, #156]	; (8002344 <HAL_I2C_MspInit+0xc8>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b25      	ldr	r3, [pc, #148]	; (8002344 <HAL_I2C_MspInit+0xc8>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <HAL_I2C_MspInit+0xc8>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a20      	ldr	r2, [pc, #128]	; (8002344 <HAL_I2C_MspInit+0xc8>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <HAL_I2C_MspInit+0xc8>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80022d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022dc:	2312      	movs	r3, #18
 80022de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022e0:	2301      	movs	r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022e8:	2304      	movs	r3, #4
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	4619      	mov	r1, r3
 80022f2:	4815      	ldr	r0, [pc, #84]	; (8002348 <HAL_I2C_MspInit+0xcc>)
 80022f4:	f000 ff94 	bl	8003220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80022f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022fe:	2312      	movs	r3, #18
 8002300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002302:	2301      	movs	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800230a:	2304      	movs	r3, #4
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	480d      	ldr	r0, [pc, #52]	; (800234c <HAL_I2C_MspInit+0xd0>)
 8002316:	f000 ff83 	bl	8003220 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_I2C_MspInit+0xc8>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a08      	ldr	r2, [pc, #32]	; (8002344 <HAL_I2C_MspInit+0xc8>)
 8002324:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_I2C_MspInit+0xc8>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40005c00 	.word	0x40005c00
 8002344:	40023800 	.word	0x40023800
 8002348:	40020800 	.word	0x40020800
 800234c:	40020000 	.word	0x40020000

08002350 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b09a      	sub	sp, #104	; 0x68
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236c:	2230      	movs	r2, #48	; 0x30
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f00b ff4d 	bl	800e210 <memset>
  if(hltdc->Instance==LTDC)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a85      	ldr	r2, [pc, #532]	; (8002590 <HAL_LTDC_MspInit+0x240>)
 800237c:	4293      	cmp	r3, r2
 800237e:	f040 8102 	bne.w	8002586 <HAL_LTDC_MspInit+0x236>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002382:	2308      	movs	r3, #8
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002386:	2332      	movs	r3, #50	; 0x32
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800238a:	2302      	movs	r3, #2
 800238c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800238e:	2300      	movs	r3, #0
 8002390:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002396:	4618      	mov	r0, r3
 8002398:	f004 feda 	bl	8007150 <HAL_RCCEx_PeriphCLKConfig>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80023a2:	f7ff feef 	bl	8002184 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
 80023aa:	4b7a      	ldr	r3, [pc, #488]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a79      	ldr	r2, [pc, #484]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 80023b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b77      	ldr	r3, [pc, #476]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023be:	623b      	str	r3, [r7, #32]
 80023c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	4b73      	ldr	r3, [pc, #460]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a72      	ldr	r2, [pc, #456]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 80023cc:	f043 0320 	orr.w	r3, r3, #32
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b70      	ldr	r3, [pc, #448]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	61fb      	str	r3, [r7, #28]
 80023dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a6b      	ldr	r2, [pc, #428]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b69      	ldr	r3, [pc, #420]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a64      	ldr	r2, [pc, #400]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b62      	ldr	r3, [pc, #392]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	4b5e      	ldr	r3, [pc, #376]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a5d      	ldr	r2, [pc, #372]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 8002420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	4b57      	ldr	r3, [pc, #348]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a56      	ldr	r2, [pc, #344]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b54      	ldr	r3, [pc, #336]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	4b50      	ldr	r3, [pc, #320]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a4f      	ldr	r2, [pc, #316]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b4d      	ldr	r3, [pc, #308]	; (8002594 <HAL_LTDC_MspInit+0x244>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800246a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800246e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800247c:	230e      	movs	r3, #14
 800247e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002480:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002484:	4619      	mov	r1, r3
 8002486:	4844      	ldr	r0, [pc, #272]	; (8002598 <HAL_LTDC_MspInit+0x248>)
 8002488:	f000 feca 	bl	8003220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800248c:	f641 0358 	movw	r3, #6232	; 0x1858
 8002490:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800249e:	230e      	movs	r3, #14
 80024a0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024a6:	4619      	mov	r1, r3
 80024a8:	483c      	ldr	r0, [pc, #240]	; (800259c <HAL_LTDC_MspInit+0x24c>)
 80024aa:	f000 feb9 	bl	8003220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80024ae:	2303      	movs	r3, #3
 80024b0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80024be:	2309      	movs	r3, #9
 80024c0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024c6:	4619      	mov	r1, r3
 80024c8:	4835      	ldr	r0, [pc, #212]	; (80025a0 <HAL_LTDC_MspInit+0x250>)
 80024ca:	f000 fea9 	bl	8003220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80024ce:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80024d2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024e0:	230e      	movs	r3, #14
 80024e2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024e8:	4619      	mov	r1, r3
 80024ea:	482d      	ldr	r0, [pc, #180]	; (80025a0 <HAL_LTDC_MspInit+0x250>)
 80024ec:	f000 fe98 	bl	8003220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80024f0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80024f4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002502:	230e      	movs	r3, #14
 8002504:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002506:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800250a:	4619      	mov	r1, r3
 800250c:	4825      	ldr	r0, [pc, #148]	; (80025a4 <HAL_LTDC_MspInit+0x254>)
 800250e:	f000 fe87 	bl	8003220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002512:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002516:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	2300      	movs	r3, #0
 8002522:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002524:	230e      	movs	r3, #14
 8002526:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002528:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800252c:	4619      	mov	r1, r3
 800252e:	481e      	ldr	r0, [pc, #120]	; (80025a8 <HAL_LTDC_MspInit+0x258>)
 8002530:	f000 fe76 	bl	8003220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002534:	2348      	movs	r3, #72	; 0x48
 8002536:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002544:	230e      	movs	r3, #14
 8002546:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002548:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800254c:	4619      	mov	r1, r3
 800254e:	4817      	ldr	r0, [pc, #92]	; (80025ac <HAL_LTDC_MspInit+0x25c>)
 8002550:	f000 fe66 	bl	8003220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002554:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002558:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002566:	2309      	movs	r3, #9
 8002568:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800256a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800256e:	4619      	mov	r1, r3
 8002570:	480c      	ldr	r0, [pc, #48]	; (80025a4 <HAL_LTDC_MspInit+0x254>)
 8002572:	f000 fe55 	bl	8003220 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2105      	movs	r1, #5
 800257a:	2058      	movs	r0, #88	; 0x58
 800257c:	f000 fc1e 	bl	8002dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002580:	2058      	movs	r0, #88	; 0x58
 8002582:	f000 fc37 	bl	8002df4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002586:	bf00      	nop
 8002588:	3768      	adds	r7, #104	; 0x68
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40016800 	.word	0x40016800
 8002594:	40023800 	.word	0x40023800
 8002598:	40021400 	.word	0x40021400
 800259c:	40020000 	.word	0x40020000
 80025a0:	40020400 	.word	0x40020400
 80025a4:	40021800 	.word	0x40021800
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40020c00 	.word	0x40020c00

080025b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a19      	ldr	r2, [pc, #100]	; (8002634 <HAL_SPI_MspInit+0x84>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d12c      	bne.n	800262c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_SPI_MspInit+0x88>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a17      	ldr	r2, [pc, #92]	; (8002638 <HAL_SPI_MspInit+0x88>)
 80025dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_SPI_MspInit+0x88>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_SPI_MspInit+0x88>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <HAL_SPI_MspInit+0x88>)
 80025f8:	f043 0320 	orr.w	r3, r3, #32
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <HAL_SPI_MspInit+0x88>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800260a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800260e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800261c:	2305      	movs	r3, #5
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <HAL_SPI_MspInit+0x8c>)
 8002628:	f000 fdfa 	bl	8003220 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800262c:	bf00      	nop
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40015000 	.word	0x40015000
 8002638:	40023800 	.word	0x40023800
 800263c:	40021400 	.word	0x40021400

08002640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0b      	ldr	r2, [pc, #44]	; (800267c <HAL_TIM_Base_MspInit+0x3c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10d      	bne.n	800266e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_TIM_Base_MspInit+0x40>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_TIM_Base_MspInit+0x40>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b07      	ldr	r3, [pc, #28]	; (8002680 <HAL_TIM_Base_MspInit+0x40>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40010000 	.word	0x40010000
 8002680:	40023800 	.word	0x40023800

08002684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a19      	ldr	r2, [pc, #100]	; (8002708 <HAL_UART_MspInit+0x84>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d12c      	bne.n	8002700 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_UART_MspInit+0x88>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4a17      	ldr	r2, [pc, #92]	; (800270c <HAL_UART_MspInit+0x88>)
 80026b0:	f043 0310 	orr.w	r3, r3, #16
 80026b4:	6453      	str	r3, [r2, #68]	; 0x44
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_UART_MspInit+0x88>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_UART_MspInit+0x88>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a10      	ldr	r2, [pc, #64]	; (800270c <HAL_UART_MspInit+0x88>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <HAL_UART_MspInit+0x88>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80026de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ec:	2303      	movs	r3, #3
 80026ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026f0:	2307      	movs	r3, #7
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	4619      	mov	r1, r3
 80026fa:	4805      	ldr	r0, [pc, #20]	; (8002710 <HAL_UART_MspInit+0x8c>)
 80026fc:	f000 fd90 	bl	8003220 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002700:	bf00      	nop
 8002702:	3728      	adds	r7, #40	; 0x28
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40011000 	.word	0x40011000
 800270c:	40023800 	.word	0x40023800
 8002710:	40020000 	.word	0x40020000

08002714 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002728:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_FMC_MspInit+0x104>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d16f      	bne.n	8002810 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002730:	4b39      	ldr	r3, [pc, #228]	; (8002818 <HAL_FMC_MspInit+0x104>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	4b38      	ldr	r3, [pc, #224]	; (800281c <HAL_FMC_MspInit+0x108>)
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	4a37      	ldr	r2, [pc, #220]	; (800281c <HAL_FMC_MspInit+0x108>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6393      	str	r3, [r2, #56]	; 0x38
 8002746:	4b35      	ldr	r3, [pc, #212]	; (800281c <HAL_FMC_MspInit+0x108>)
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002752:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002756:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002760:	2303      	movs	r3, #3
 8002762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002764:	230c      	movs	r3, #12
 8002766:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	4619      	mov	r1, r3
 800276c:	482c      	ldr	r0, [pc, #176]	; (8002820 <HAL_FMC_MspInit+0x10c>)
 800276e:	f000 fd57 	bl	8003220 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002772:	2301      	movs	r3, #1
 8002774:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277e:	2303      	movs	r3, #3
 8002780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002782:	230c      	movs	r3, #12
 8002784:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	4619      	mov	r1, r3
 800278a:	4826      	ldr	r0, [pc, #152]	; (8002824 <HAL_FMC_MspInit+0x110>)
 800278c:	f000 fd48 	bl	8003220 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002790:	f248 1333 	movw	r3, #33075	; 0x8133
 8002794:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027a2:	230c      	movs	r3, #12
 80027a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	481f      	ldr	r0, [pc, #124]	; (8002828 <HAL_FMC_MspInit+0x114>)
 80027ac:	f000 fd38 	bl	8003220 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80027b0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80027b4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027c2:	230c      	movs	r3, #12
 80027c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	4619      	mov	r1, r3
 80027ca:	4818      	ldr	r0, [pc, #96]	; (800282c <HAL_FMC_MspInit+0x118>)
 80027cc:	f000 fd28 	bl	8003220 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80027d0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80027d4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027e2:	230c      	movs	r3, #12
 80027e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	4811      	ldr	r0, [pc, #68]	; (8002830 <HAL_FMC_MspInit+0x11c>)
 80027ec:	f000 fd18 	bl	8003220 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80027f0:	2360      	movs	r3, #96	; 0x60
 80027f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fc:	2303      	movs	r3, #3
 80027fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002800:	230c      	movs	r3, #12
 8002802:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	4619      	mov	r1, r3
 8002808:	480a      	ldr	r0, [pc, #40]	; (8002834 <HAL_FMC_MspInit+0x120>)
 800280a:	f000 fd09 	bl	8003220 <HAL_GPIO_Init>
 800280e:	e000      	b.n	8002812 <HAL_FMC_MspInit+0xfe>
    return;
 8002810:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200000c8 	.word	0x200000c8
 800281c:	40023800 	.word	0x40023800
 8002820:	40021400 	.word	0x40021400
 8002824:	40020800 	.word	0x40020800
 8002828:	40021800 	.word	0x40021800
 800282c:	40021000 	.word	0x40021000
 8002830:	40020c00 	.word	0x40020c00
 8002834:	40020400 	.word	0x40020400

08002838 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002840:	f7ff ff68 	bl	8002714 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08c      	sub	sp, #48	; 0x30
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800285c:	2200      	movs	r2, #0
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	2036      	movs	r0, #54	; 0x36
 8002862:	f000 faab 	bl	8002dbc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002866:	2036      	movs	r0, #54	; 0x36
 8002868:	f000 fac4 	bl	8002df4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	4b1f      	ldr	r3, [pc, #124]	; (80028f0 <HAL_InitTick+0xa4>)
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	4a1e      	ldr	r2, [pc, #120]	; (80028f0 <HAL_InitTick+0xa4>)
 8002876:	f043 0310 	orr.w	r3, r3, #16
 800287a:	6413      	str	r3, [r2, #64]	; 0x40
 800287c:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_InitTick+0xa4>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002888:	f107 0210 	add.w	r2, r7, #16
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f004 fc2a 	bl	80070ec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002898:	f004 fc00 	bl	800709c <HAL_RCC_GetPCLK1Freq>
 800289c:	4603      	mov	r3, r0
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a4:	4a13      	ldr	r2, [pc, #76]	; (80028f4 <HAL_InitTick+0xa8>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0c9b      	lsrs	r3, r3, #18
 80028ac:	3b01      	subs	r3, #1
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_InitTick+0xac>)
 80028b2:	4a12      	ldr	r2, [pc, #72]	; (80028fc <HAL_InitTick+0xb0>)
 80028b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_InitTick+0xac>)
 80028b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80028be:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <HAL_InitTick+0xac>)
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <HAL_InitTick+0xac>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_InitTick+0xac>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80028d0:	4809      	ldr	r0, [pc, #36]	; (80028f8 <HAL_InitTick+0xac>)
 80028d2:	f004 feb8 	bl	8007646 <HAL_TIM_Base_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d104      	bne.n	80028e6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80028dc:	4806      	ldr	r0, [pc, #24]	; (80028f8 <HAL_InitTick+0xac>)
 80028de:	f004 ff01 	bl	80076e4 <HAL_TIM_Base_Start_IT>
 80028e2:	4603      	mov	r3, r0
 80028e4:	e000      	b.n	80028e8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3730      	adds	r7, #48	; 0x30
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40023800 	.word	0x40023800
 80028f4:	431bde83 	.word	0x431bde83
 80028f8:	20008488 	.word	0x20008488
 80028fc:	40001000 	.word	0x40001000

08002900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002904:	e7fe      	b.n	8002904 <NMI_Handler+0x4>

08002906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290a:	e7fe      	b.n	800290a <HardFault_Handler+0x4>

0800290c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <MemManage_Handler+0x4>

08002912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002916:	e7fe      	b.n	8002916 <BusFault_Handler+0x4>

08002918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800291c:	e7fe      	b.n	800291c <UsageFault_Handler+0x4>

0800291e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <TIM6_DAC_IRQHandler+0x10>)
 8002932:	f004 ff47 	bl	80077c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20008488 	.word	0x20008488

08002940 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <OTG_HS_IRQHandler+0x10>)
 8002946:	f001 f8b5 	bl	8003ab4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200088b8 	.word	0x200088b8

08002954 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002958:	4802      	ldr	r0, [pc, #8]	; (8002964 <LTDC_IRQHandler+0x10>)
 800295a:	f003 fcbb 	bl	80062d4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200082e0 	.word	0x200082e0

08002968 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <DMA2D_IRQHandler+0x10>)
 800296e:	f000 fab4 	bl	8002eda <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20008414 	.word	0x20008414

0800297c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
	return 1;
 8002980:	2301      	movs	r3, #1
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <_kill>:

int _kill(int pid, int sig)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002996:	f00b fbf3 	bl	800e180 <__errno>
 800299a:	4603      	mov	r3, r0
 800299c:	2216      	movs	r2, #22
 800299e:	601a      	str	r2, [r3, #0]
	return -1;
 80029a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <_exit>:

void _exit (int status)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ffe7 	bl	800298c <_kill>
	while (1) {}		/* Make sure we hang here */
 80029be:	e7fe      	b.n	80029be <_exit+0x12>

080029c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	e00a      	b.n	80029e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029d2:	f3af 8000 	nop.w
 80029d6:	4601      	mov	r1, r0
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	60ba      	str	r2, [r7, #8]
 80029de:	b2ca      	uxtb	r2, r1
 80029e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	3301      	adds	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	dbf0      	blt.n	80029d2 <_read+0x12>
	}

return len;
 80029f0:	687b      	ldr	r3, [r7, #4]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	e009      	b.n	8002a20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	60ba      	str	r2, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	dbf1      	blt.n	8002a0c <_write+0x12>
	}
	return len;
 8002a28:	687b      	ldr	r3, [r7, #4]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <_close>:

int _close(int file)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
	return -1;
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5a:	605a      	str	r2, [r3, #4]
	return 0;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <_isatty>:

int _isatty(int file)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
	return 1;
 8002a72:	2301      	movs	r3, #1
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
	return 0;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <_sbrk+0x5c>)
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <_sbrk+0x60>)
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab0:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <_sbrk+0x64>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab8:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <_sbrk+0x64>)
 8002aba:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <_sbrk+0x68>)
 8002abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <_sbrk+0x64>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d207      	bcs.n	8002adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002acc:	f00b fb58 	bl	800e180 <__errno>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	e009      	b.n	8002af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <_sbrk+0x64>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <_sbrk+0x64>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <_sbrk+0x64>)
 8002aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aee:	68fb      	ldr	r3, [r7, #12]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20030000 	.word	0x20030000
 8002afc:	00000400 	.word	0x00000400
 8002b00:	200000cc 	.word	0x200000cc
 8002b04:	20008bd0 	.word	0x20008bd0

08002b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <SystemInit+0x20>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	4a05      	ldr	r2, [pc, #20]	; (8002b28 <SystemInit+0x20>)
 8002b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b64 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b30:	480d      	ldr	r0, [pc, #52]	; (8002b68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b32:	490e      	ldr	r1, [pc, #56]	; (8002b6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b34:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b38:	e002      	b.n	8002b40 <LoopCopyDataInit>

08002b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b3e:	3304      	adds	r3, #4

08002b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b44:	d3f9      	bcc.n	8002b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b46:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b48:	4c0b      	ldr	r4, [pc, #44]	; (8002b78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b4c:	e001      	b.n	8002b52 <LoopFillZerobss>

08002b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b50:	3204      	adds	r2, #4

08002b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b54:	d3fb      	bcc.n	8002b4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b56:	f7ff ffd7 	bl	8002b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b5a:	f00b fb17 	bl	800e18c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b5e:	f7fe fa13 	bl	8000f88 <main>
  bx  lr    
 8002b62:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b64:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b6c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002b70:	08013328 	.word	0x08013328
  ldr r2, =_sbss
 8002b74:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002b78:	20008bcc 	.word	0x20008bcc

08002b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b7c:	e7fe      	b.n	8002b7c <ADC_IRQHandler>
	...

08002b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_Init+0x40>)
 8002b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_Init+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_Init+0x40>)
 8002b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_Init+0x40>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_Init+0x40>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba8:	2003      	movs	r0, #3
 8002baa:	f000 f8fc 	bl	8002da6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7ff fe4c 	bl	800284c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb4:	f7ff faec 	bl	8002190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023c00 	.word	0x40023c00

08002bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_IncTick+0x20>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_IncTick+0x24>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_IncTick+0x24>)
 8002bd6:	6013      	str	r3, [r2, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000010 	.word	0x20000010
 8002be8:	200084d0 	.word	0x200084d0

08002bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <HAL_GetTick+0x14>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	200084d0 	.word	0x200084d0

08002c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c0c:	f7ff ffee 	bl	8002bec <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d005      	beq.n	8002c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_Delay+0x44>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c2a:	bf00      	nop
 8002c2c:	f7ff ffde 	bl	8002bec <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d8f7      	bhi.n	8002c2c <HAL_Delay+0x28>
  {
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000010 	.word	0x20000010

08002c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c7e:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	60d3      	str	r3, [r2, #12]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <__NVIC_GetPriorityGrouping+0x18>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	db0b      	blt.n	8002cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	f003 021f 	and.w	r2, r3, #31
 8002cc8:	4907      	ldr	r1, [pc, #28]	; (8002ce8 <__NVIC_EnableIRQ+0x38>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000e100 	.word	0xe000e100

08002cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	6039      	str	r1, [r7, #0]
 8002cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	db0a      	blt.n	8002d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	490c      	ldr	r1, [pc, #48]	; (8002d38 <__NVIC_SetPriority+0x4c>)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	0112      	lsls	r2, r2, #4
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d14:	e00a      	b.n	8002d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	4908      	ldr	r1, [pc, #32]	; (8002d3c <__NVIC_SetPriority+0x50>)
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	3b04      	subs	r3, #4
 8002d24:	0112      	lsls	r2, r2, #4
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	440b      	add	r3, r1
 8002d2a:	761a      	strb	r2, [r3, #24]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000e100 	.word	0xe000e100
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f1c3 0307 	rsb	r3, r3, #7
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	bf28      	it	cs
 8002d5e:	2304      	movcs	r3, #4
 8002d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d902      	bls.n	8002d70 <NVIC_EncodePriority+0x30>
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3b03      	subs	r3, #3
 8002d6e:	e000      	b.n	8002d72 <NVIC_EncodePriority+0x32>
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	f04f 32ff 	mov.w	r2, #4294967295
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43da      	mvns	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	401a      	ands	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d88:	f04f 31ff 	mov.w	r1, #4294967295
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	43d9      	mvns	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	4313      	orrs	r3, r2
         );
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3724      	adds	r7, #36	; 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ff4c 	bl	8002c4c <__NVIC_SetPriorityGrouping>
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dce:	f7ff ff61 	bl	8002c94 <__NVIC_GetPriorityGrouping>
 8002dd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	6978      	ldr	r0, [r7, #20]
 8002dda:	f7ff ffb1 	bl	8002d40 <NVIC_EncodePriority>
 8002dde:	4602      	mov	r2, r0
 8002de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff80 	bl	8002cec <__NVIC_SetPriority>
}
 8002dec:	bf00      	nop
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff ff54 	bl	8002cb0 <__NVIC_EnableIRQ>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00e      	b.n	8002e40 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	795b      	ldrb	r3, [r3, #5]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff f9d8 	bl	80021e8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e03b      	b.n	8002ed2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff f9dc 	bl	800222c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e98:	f023 0107 	bic.w	r1, r3, #7
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002eb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68d1      	ldr	r1, [r2, #12]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d026      	beq.n	8002f4a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d021      	beq.n	8002f4a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f14:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2201      	movs	r2, #1
 8002f28:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d026      	beq.n	8002fa2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d021      	beq.n	8002fa2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f6c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2220      	movs	r2, #32
 8002f74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	f043 0202 	orr.w	r2, r3, #2
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2204      	movs	r2, #4
 8002f86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d026      	beq.n	8002ffa <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d021      	beq.n	8002ffa <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2208      	movs	r2, #8
 8002fcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd2:	f043 0204 	orr.w	r2, r3, #4
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2204      	movs	r2, #4
 8002fde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d013      	beq.n	800302c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00e      	beq.n	800302c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800301c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2204      	movs	r2, #4
 8003024:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f853 	bl	80030d2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d024      	beq.n	8003080 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01f      	beq.n	8003080 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800304e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2202      	movs	r2, #2
 8003056:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	d01f      	beq.n	80030ca <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01a      	beq.n	80030ca <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030a2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2210      	movs	r2, #16
 80030aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f80e 	bl	80030e6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_DMA2D_ConfigLayer+0x20>
 8003118:	2302      	movs	r3, #2
 800311a:	e079      	b.n	8003210 <HAL_DMA2D_ConfigLayer+0x114>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	3318      	adds	r3, #24
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	041b      	lsls	r3, r3, #16
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003146:	4b35      	ldr	r3, [pc, #212]	; (800321c <HAL_DMA2D_ConfigLayer+0x120>)
 8003148:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b0a      	cmp	r3, #10
 8003150:	d003      	beq.n	800315a <HAL_DMA2D_ConfigLayer+0x5e>
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b09      	cmp	r3, #9
 8003158:	d107      	bne.n	800316a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	e005      	b.n	8003176 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	061b      	lsls	r3, r3, #24
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d120      	bne.n	80031be <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	43db      	mvns	r3, r3
 8003186:	ea02 0103 	and.w	r1, r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	430a      	orrs	r2, r1
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b0a      	cmp	r3, #10
 80031a4:	d003      	beq.n	80031ae <HAL_DMA2D_ConfigLayer+0xb2>
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b09      	cmp	r3, #9
 80031ac:	d127      	bne.n	80031fe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
 80031bc:	e01f      	b.n	80031fe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	ea02 0103 	and.w	r1, r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b0a      	cmp	r3, #10
 80031e6:	d003      	beq.n	80031f0 <HAL_DMA2D_ConfigLayer+0xf4>
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b09      	cmp	r3, #9
 80031ee:	d106      	bne.n	80031fe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80031fc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	ff03000f 	.word	0xff03000f

08003220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	; 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	e177      	b.n	800352c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800323c:	2201      	movs	r2, #1
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	429a      	cmp	r2, r3
 8003256:	f040 8166 	bne.w	8003526 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d005      	beq.n	8003272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800326e:	2b02      	cmp	r3, #2
 8003270:	d130      	bne.n	80032d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	2203      	movs	r2, #3
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032a8:	2201      	movs	r2, #1
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 0201 	and.w	r2, r3, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d017      	beq.n	8003310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2203      	movs	r2, #3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d123      	bne.n	8003364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	08da      	lsrs	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3208      	adds	r2, #8
 8003324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	220f      	movs	r2, #15
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	08da      	lsrs	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3208      	adds	r2, #8
 800335e:	69b9      	ldr	r1, [r7, #24]
 8003360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2203      	movs	r2, #3
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0203 	and.w	r2, r3, #3
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80c0 	beq.w	8003526 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	4b66      	ldr	r3, [pc, #408]	; (8003544 <HAL_GPIO_Init+0x324>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	4a65      	ldr	r2, [pc, #404]	; (8003544 <HAL_GPIO_Init+0x324>)
 80033b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033b4:	6453      	str	r3, [r2, #68]	; 0x44
 80033b6:	4b63      	ldr	r3, [pc, #396]	; (8003544 <HAL_GPIO_Init+0x324>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033c2:	4a61      	ldr	r2, [pc, #388]	; (8003548 <HAL_GPIO_Init+0x328>)
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	3302      	adds	r3, #2
 80033ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	220f      	movs	r2, #15
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a58      	ldr	r2, [pc, #352]	; (800354c <HAL_GPIO_Init+0x32c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d037      	beq.n	800345e <HAL_GPIO_Init+0x23e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a57      	ldr	r2, [pc, #348]	; (8003550 <HAL_GPIO_Init+0x330>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d031      	beq.n	800345a <HAL_GPIO_Init+0x23a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a56      	ldr	r2, [pc, #344]	; (8003554 <HAL_GPIO_Init+0x334>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d02b      	beq.n	8003456 <HAL_GPIO_Init+0x236>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a55      	ldr	r2, [pc, #340]	; (8003558 <HAL_GPIO_Init+0x338>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d025      	beq.n	8003452 <HAL_GPIO_Init+0x232>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a54      	ldr	r2, [pc, #336]	; (800355c <HAL_GPIO_Init+0x33c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01f      	beq.n	800344e <HAL_GPIO_Init+0x22e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a53      	ldr	r2, [pc, #332]	; (8003560 <HAL_GPIO_Init+0x340>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d019      	beq.n	800344a <HAL_GPIO_Init+0x22a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a52      	ldr	r2, [pc, #328]	; (8003564 <HAL_GPIO_Init+0x344>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <HAL_GPIO_Init+0x226>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a51      	ldr	r2, [pc, #324]	; (8003568 <HAL_GPIO_Init+0x348>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00d      	beq.n	8003442 <HAL_GPIO_Init+0x222>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a50      	ldr	r2, [pc, #320]	; (800356c <HAL_GPIO_Init+0x34c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <HAL_GPIO_Init+0x21e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a4f      	ldr	r2, [pc, #316]	; (8003570 <HAL_GPIO_Init+0x350>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_GPIO_Init+0x21a>
 8003436:	2309      	movs	r3, #9
 8003438:	e012      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800343a:	230a      	movs	r3, #10
 800343c:	e010      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800343e:	2308      	movs	r3, #8
 8003440:	e00e      	b.n	8003460 <HAL_GPIO_Init+0x240>
 8003442:	2307      	movs	r3, #7
 8003444:	e00c      	b.n	8003460 <HAL_GPIO_Init+0x240>
 8003446:	2306      	movs	r3, #6
 8003448:	e00a      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800344a:	2305      	movs	r3, #5
 800344c:	e008      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800344e:	2304      	movs	r3, #4
 8003450:	e006      	b.n	8003460 <HAL_GPIO_Init+0x240>
 8003452:	2303      	movs	r3, #3
 8003454:	e004      	b.n	8003460 <HAL_GPIO_Init+0x240>
 8003456:	2302      	movs	r3, #2
 8003458:	e002      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800345e:	2300      	movs	r3, #0
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	f002 0203 	and.w	r2, r2, #3
 8003466:	0092      	lsls	r2, r2, #2
 8003468:	4093      	lsls	r3, r2
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003470:	4935      	ldr	r1, [pc, #212]	; (8003548 <HAL_GPIO_Init+0x328>)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	089b      	lsrs	r3, r3, #2
 8003476:	3302      	adds	r3, #2
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800347e:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <HAL_GPIO_Init+0x354>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034a2:	4a34      	ldr	r2, [pc, #208]	; (8003574 <HAL_GPIO_Init+0x354>)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034a8:	4b32      	ldr	r3, [pc, #200]	; (8003574 <HAL_GPIO_Init+0x354>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034cc:	4a29      	ldr	r2, [pc, #164]	; (8003574 <HAL_GPIO_Init+0x354>)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d2:	4b28      	ldr	r3, [pc, #160]	; (8003574 <HAL_GPIO_Init+0x354>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034f6:	4a1f      	ldr	r2, [pc, #124]	; (8003574 <HAL_GPIO_Init+0x354>)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034fc:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <HAL_GPIO_Init+0x354>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003520:	4a14      	ldr	r2, [pc, #80]	; (8003574 <HAL_GPIO_Init+0x354>)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3301      	adds	r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	2b0f      	cmp	r3, #15
 8003530:	f67f ae84 	bls.w	800323c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	3724      	adds	r7, #36	; 0x24
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800
 8003548:	40013800 	.word	0x40013800
 800354c:	40020000 	.word	0x40020000
 8003550:	40020400 	.word	0x40020400
 8003554:	40020800 	.word	0x40020800
 8003558:	40020c00 	.word	0x40020c00
 800355c:	40021000 	.word	0x40021000
 8003560:	40021400 	.word	0x40021400
 8003564:	40021800 	.word	0x40021800
 8003568:	40021c00 	.word	0x40021c00
 800356c:	40022000 	.word	0x40022000
 8003570:	40022400 	.word	0x40022400
 8003574:	40013c00 	.word	0x40013c00

08003578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
 8003584:	4613      	mov	r3, r2
 8003586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003588:	787b      	ldrb	r3, [r7, #1]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800358e:	887a      	ldrh	r2, [r7, #2]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003594:	e003      	b.n	800359e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	041a      	lsls	r2, r3, #16
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	619a      	str	r2, [r3, #24]
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035bc:	887a      	ldrh	r2, [r7, #2]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4013      	ands	r3, r2
 80035c2:	041a      	lsls	r2, r3, #16
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	43d9      	mvns	r1, r3
 80035c8:	887b      	ldrh	r3, [r7, #2]
 80035ca:	400b      	ands	r3, r1
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	619a      	str	r2, [r3, #24]
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80035de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e0:	b08f      	sub	sp, #60	; 0x3c
 80035e2:	af0a      	add	r7, sp, #40	; 0x28
 80035e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e054      	b.n	800369a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f00a fae0 	bl	800dbd0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2203      	movs	r2, #3
 8003614:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f005 f904 	bl	800883c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	687e      	ldr	r6, [r7, #4]
 800363c:	466d      	mov	r5, sp
 800363e:	f106 0410 	add.w	r4, r6, #16
 8003642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800364a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800364e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003652:	1d33      	adds	r3, r6, #4
 8003654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003656:	6838      	ldr	r0, [r7, #0]
 8003658:	f005 f87e 	bl	8008758 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2101      	movs	r1, #1
 8003662:	4618      	mov	r0, r3
 8003664:	f005 f8fb 	bl	800885e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	687e      	ldr	r6, [r7, #4]
 8003670:	466d      	mov	r5, sp
 8003672:	f106 0410 	add.w	r4, r6, #16
 8003676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800367a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800367c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800367e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003682:	e885 0003 	stmia.w	r5, {r0, r1}
 8003686:	1d33      	adds	r3, r6, #4
 8003688:	cb0e      	ldmia	r3, {r1, r2, r3}
 800368a:	6838      	ldr	r0, [r7, #0]
 800368c:	f005 fa62 	bl	8008b54 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036a2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80036a2:	b590      	push	{r4, r7, lr}
 80036a4:	b089      	sub	sp, #36	; 0x24
 80036a6:	af04      	add	r7, sp, #16
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	4608      	mov	r0, r1
 80036ac:	4611      	mov	r1, r2
 80036ae:	461a      	mov	r2, r3
 80036b0:	4603      	mov	r3, r0
 80036b2:	70fb      	strb	r3, [r7, #3]
 80036b4:	460b      	mov	r3, r1
 80036b6:	70bb      	strb	r3, [r7, #2]
 80036b8:	4613      	mov	r3, r2
 80036ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_HCD_HC_Init+0x28>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e076      	b.n	80037b8 <HAL_HCD_HC_Init+0x116>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	212c      	movs	r1, #44	; 0x2c
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	4413      	add	r3, r2
 80036de:	333d      	adds	r3, #61	; 0x3d
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	3338      	adds	r3, #56	; 0x38
 80036f2:	787a      	ldrb	r2, [r7, #1]
 80036f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	212c      	movs	r1, #44	; 0x2c
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	4413      	add	r3, r2
 8003702:	3340      	adds	r3, #64	; 0x40
 8003704:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003706:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	3339      	adds	r3, #57	; 0x39
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	212c      	movs	r1, #44	; 0x2c
 8003720:	fb01 f303 	mul.w	r3, r1, r3
 8003724:	4413      	add	r3, r2
 8003726:	333f      	adds	r3, #63	; 0x3f
 8003728:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800372c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	78ba      	ldrb	r2, [r7, #2]
 8003732:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003736:	b2d0      	uxtb	r0, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	333a      	adds	r3, #58	; 0x3a
 8003744:	4602      	mov	r2, r0
 8003746:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003748:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800374c:	2b00      	cmp	r3, #0
 800374e:	da09      	bge.n	8003764 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	212c      	movs	r1, #44	; 0x2c
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	333b      	adds	r3, #59	; 0x3b
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e008      	b.n	8003776 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	333b      	adds	r3, #59	; 0x3b
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003776:	78fb      	ldrb	r3, [r7, #3]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	212c      	movs	r1, #44	; 0x2c
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	333c      	adds	r3, #60	; 0x3c
 8003784:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003788:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	787c      	ldrb	r4, [r7, #1]
 8003790:	78ba      	ldrb	r2, [r7, #2]
 8003792:	78f9      	ldrb	r1, [r7, #3]
 8003794:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003796:	9302      	str	r3, [sp, #8]
 8003798:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4623      	mov	r3, r4
 80037a6:	f005 fb4f 	bl	8008e48 <USB_HC_Init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd90      	pop	{r4, r7, pc}

080037c0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_HCD_HC_Halt+0x1e>
 80037da:	2302      	movs	r3, #2
 80037dc:	e00f      	b.n	80037fe <HAL_HCD_HC_Halt+0x3e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	4611      	mov	r1, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f005 fd8b 	bl	800930a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	4608      	mov	r0, r1
 8003812:	4611      	mov	r1, r2
 8003814:	461a      	mov	r2, r3
 8003816:	4603      	mov	r3, r0
 8003818:	70fb      	strb	r3, [r7, #3]
 800381a:	460b      	mov	r3, r1
 800381c:	70bb      	strb	r3, [r7, #2]
 800381e:	4613      	mov	r3, r2
 8003820:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	212c      	movs	r1, #44	; 0x2c
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	4413      	add	r3, r2
 800382e:	333b      	adds	r3, #59	; 0x3b
 8003830:	78ba      	ldrb	r2, [r7, #2]
 8003832:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	212c      	movs	r1, #44	; 0x2c
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	4413      	add	r3, r2
 8003840:	333f      	adds	r3, #63	; 0x3f
 8003842:	787a      	ldrb	r2, [r7, #1]
 8003844:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003846:	7c3b      	ldrb	r3, [r7, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d112      	bne.n	8003872 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	212c      	movs	r1, #44	; 0x2c
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	4413      	add	r3, r2
 8003858:	3342      	adds	r3, #66	; 0x42
 800385a:	2203      	movs	r2, #3
 800385c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	212c      	movs	r1, #44	; 0x2c
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	4413      	add	r3, r2
 800386a:	333d      	adds	r3, #61	; 0x3d
 800386c:	7f3a      	ldrb	r2, [r7, #28]
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e008      	b.n	8003884 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	3342      	adds	r3, #66	; 0x42
 8003880:	2202      	movs	r2, #2
 8003882:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003884:	787b      	ldrb	r3, [r7, #1]
 8003886:	2b03      	cmp	r3, #3
 8003888:	f200 80c6 	bhi.w	8003a18 <HAL_HCD_HC_SubmitRequest+0x210>
 800388c:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003892:	bf00      	nop
 8003894:	080038a5 	.word	0x080038a5
 8003898:	08003a05 	.word	0x08003a05
 800389c:	08003909 	.word	0x08003909
 80038a0:	08003987 	.word	0x08003987
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80038a4:	7c3b      	ldrb	r3, [r7, #16]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	f040 80b8 	bne.w	8003a1c <HAL_HCD_HC_SubmitRequest+0x214>
 80038ac:	78bb      	ldrb	r3, [r7, #2]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f040 80b4 	bne.w	8003a1c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80038b4:	8b3b      	ldrh	r3, [r7, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d108      	bne.n	80038cc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	212c      	movs	r1, #44	; 0x2c
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	3355      	adds	r3, #85	; 0x55
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038cc:	78fb      	ldrb	r3, [r7, #3]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	212c      	movs	r1, #44	; 0x2c
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	3355      	adds	r3, #85	; 0x55
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	212c      	movs	r1, #44	; 0x2c
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	4413      	add	r3, r2
 80038ec:	3342      	adds	r3, #66	; 0x42
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80038f2:	e093      	b.n	8003a1c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	212c      	movs	r1, #44	; 0x2c
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	4413      	add	r3, r2
 8003900:	3342      	adds	r3, #66	; 0x42
 8003902:	2202      	movs	r2, #2
 8003904:	701a      	strb	r2, [r3, #0]
      break;
 8003906:	e089      	b.n	8003a1c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003908:	78bb      	ldrb	r3, [r7, #2]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d11d      	bne.n	800394a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	212c      	movs	r1, #44	; 0x2c
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	4413      	add	r3, r2
 800391a:	3355      	adds	r3, #85	; 0x55
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	212c      	movs	r1, #44	; 0x2c
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	4413      	add	r3, r2
 800392e:	3342      	adds	r3, #66	; 0x42
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003934:	e073      	b.n	8003a1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	212c      	movs	r1, #44	; 0x2c
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	4413      	add	r3, r2
 8003942:	3342      	adds	r3, #66	; 0x42
 8003944:	2202      	movs	r2, #2
 8003946:	701a      	strb	r2, [r3, #0]
      break;
 8003948:	e069      	b.n	8003a1e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	212c      	movs	r1, #44	; 0x2c
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	4413      	add	r3, r2
 8003956:	3354      	adds	r3, #84	; 0x54
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	3342      	adds	r3, #66	; 0x42
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
      break;
 8003970:	e055      	b.n	8003a1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	3342      	adds	r3, #66	; 0x42
 8003980:	2202      	movs	r2, #2
 8003982:	701a      	strb	r2, [r3, #0]
      break;
 8003984:	e04b      	b.n	8003a1e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003986:	78bb      	ldrb	r3, [r7, #2]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d11d      	bne.n	80039c8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	212c      	movs	r1, #44	; 0x2c
 8003992:	fb01 f303 	mul.w	r3, r1, r3
 8003996:	4413      	add	r3, r2
 8003998:	3355      	adds	r3, #85	; 0x55
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	212c      	movs	r1, #44	; 0x2c
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	3342      	adds	r3, #66	; 0x42
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80039b2:	e034      	b.n	8003a1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3342      	adds	r3, #66	; 0x42
 80039c2:	2202      	movs	r2, #2
 80039c4:	701a      	strb	r2, [r3, #0]
      break;
 80039c6:	e02a      	b.n	8003a1e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	212c      	movs	r1, #44	; 0x2c
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	3354      	adds	r3, #84	; 0x54
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d109      	bne.n	80039f0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3342      	adds	r3, #66	; 0x42
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]
      break;
 80039ee:	e016      	b.n	8003a1e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	3342      	adds	r3, #66	; 0x42
 80039fe:	2202      	movs	r2, #2
 8003a00:	701a      	strb	r2, [r3, #0]
      break;
 8003a02:	e00c      	b.n	8003a1e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	212c      	movs	r1, #44	; 0x2c
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	3342      	adds	r3, #66	; 0x42
 8003a12:	2200      	movs	r2, #0
 8003a14:	701a      	strb	r2, [r3, #0]
      break;
 8003a16:	e002      	b.n	8003a1e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003a18:	bf00      	nop
 8003a1a:	e000      	b.n	8003a1e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003a1c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	212c      	movs	r1, #44	; 0x2c
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	3344      	adds	r3, #68	; 0x44
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	8b3a      	ldrh	r2, [r7, #24]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	202c      	movs	r0, #44	; 0x2c
 8003a38:	fb00 f303 	mul.w	r3, r0, r3
 8003a3c:	440b      	add	r3, r1
 8003a3e:	334c      	adds	r3, #76	; 0x4c
 8003a40:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	212c      	movs	r1, #44	; 0x2c
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3360      	adds	r3, #96	; 0x60
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	212c      	movs	r1, #44	; 0x2c
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	4413      	add	r3, r2
 8003a60:	3350      	adds	r3, #80	; 0x50
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	212c      	movs	r1, #44	; 0x2c
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	4413      	add	r3, r2
 8003a72:	3339      	adds	r3, #57	; 0x39
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	212c      	movs	r1, #44	; 0x2c
 8003a7e:	fb01 f303 	mul.w	r3, r1, r3
 8003a82:	4413      	add	r3, r2
 8003a84:	3361      	adds	r3, #97	; 0x61
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	78fb      	ldrb	r3, [r7, #3]
 8003a90:	222c      	movs	r2, #44	; 0x2c
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	3338      	adds	r3, #56	; 0x38
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	18d1      	adds	r1, r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f005 fade 	bl	8009064 <USB_HC_StartXfer>
 8003aa8:	4603      	mov	r3, r0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop

08003ab4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f005 f801 	bl	8008ad2 <USB_GetMode>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	f040 80f6 	bne.w	8003cc4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f004 ffe5 	bl	8008aac <USB_ReadInterrupts>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80ec 	beq.w	8003cc2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f004 ffdc 	bl	8008aac <USB_ReadInterrupts>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003afe:	d104      	bne.n	8003b0a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003b08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f004 ffcc 	bl	8008aac <USB_ReadInterrupts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b1e:	d104      	bne.n	8003b2a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f004 ffbc 	bl	8008aac <USB_ReadInterrupts>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b3e:	d104      	bne.n	8003b4a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f004 ffac 	bl	8008aac <USB_ReadInterrupts>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d103      	bne.n	8003b66 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2202      	movs	r2, #2
 8003b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f004 ff9e 	bl	8008aac <USB_ReadInterrupts>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b7a:	d11c      	bne.n	8003bb6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b84:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10f      	bne.n	8003bb6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003b96:	2110      	movs	r1, #16
 8003b98:	6938      	ldr	r0, [r7, #16]
 8003b9a:	f004 fead 	bl	80088f8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b9e:	6938      	ldr	r0, [r7, #16]
 8003ba0:	f004 fece 	bl	8008940 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2101      	movs	r1, #1
 8003baa:	4618      	mov	r0, r3
 8003bac:	f005 f886 	bl	8008cbc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f00a f887 	bl	800dcc4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f004 ff76 	bl	8008aac <USB_ReadInterrupts>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bca:	d102      	bne.n	8003bd2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f001 fa03 	bl	8004fd8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f004 ff68 	bl	8008aac <USB_ReadInterrupts>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d106      	bne.n	8003bf4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f00a f850 	bl	800dc8c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2208      	movs	r2, #8
 8003bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f004 ff57 	bl	8008aac <USB_ReadInterrupts>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d101      	bne.n	8003c0c <HAL_HCD_IRQHandler+0x158>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_HCD_IRQHandler+0x15a>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d012      	beq.n	8003c38 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699a      	ldr	r2, [r3, #24]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0210 	bic.w	r2, r2, #16
 8003c20:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f001 f906 	bl	8004e34 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0210 	orr.w	r2, r2, #16
 8003c36:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f004 ff35 	bl	8008aac <USB_ReadInterrupts>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c4c:	d13a      	bne.n	8003cc4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f005 fb48 	bl	80092e8 <USB_HC_ReadInterrupt>
 8003c58:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e025      	b.n	8003cac <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d018      	beq.n	8003ca6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8a:	d106      	bne.n	8003c9a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	4619      	mov	r1, r3
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f8ab 	bl	8003dee <HCD_HC_IN_IRQHandler>
 8003c98:	e005      	b.n	8003ca6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fcc6 	bl	8004632 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d3d4      	bcc.n	8003c60 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cbe:	615a      	str	r2, [r3, #20]
 8003cc0:	e000      	b.n	8003cc4 <HAL_HCD_IRQHandler+0x210>
      return;
 8003cc2:	bf00      	nop
    }
  }
}
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_HCD_Start+0x16>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e013      	b.n	8003d08 <HAL_HCD_Start+0x3e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2101      	movs	r1, #1
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f005 f848 	bl	8008d84 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f004 fd8e 	bl	800881a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_HCD_Stop+0x16>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e00d      	b.n	8003d42 <HAL_HCD_Stop+0x32>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f005 fc42 	bl	80095bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f004 ffea 	bl	8008d30 <USB_ResetPort>
 8003d5c:	4603      	mov	r3, r0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	212c      	movs	r1, #44	; 0x2c
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3360      	adds	r3, #96	; 0x60
 8003d80:	781b      	ldrb	r3, [r3, #0]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	212c      	movs	r1, #44	; 0x2c
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	4413      	add	r3, r2
 8003da6:	3350      	adds	r3, #80	; 0x50
 8003da8:	681b      	ldr	r3, [r3, #0]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f005 f82e 	bl	8008e24 <USB_GetCurrentFrame>
 8003dc8:	4603      	mov	r3, r0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f005 f809 	bl	8008df6 <USB_GetHostSpeed>
 8003de4:	4603      	mov	r3, r0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	460b      	mov	r3, r1
 8003df8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d119      	bne.n	8003e52 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	0151      	lsls	r1, r2, #5
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	440a      	add	r2, r1
 8003e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e4a:	f043 0302 	orr.w	r3, r3, #2
 8003e4e:	60d3      	str	r3, [r2, #12]
 8003e50:	e101      	b.n	8004056 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e68:	d12b      	bne.n	8003ec2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e76:	461a      	mov	r2, r3
 8003e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	212c      	movs	r1, #44	; 0x2c
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	3361      	adds	r3, #97	; 0x61
 8003e8c:	2207      	movs	r2, #7
 8003e8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	0151      	lsls	r1, r2, #5
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	440a      	add	r2, r1
 8003ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eaa:	f043 0302 	orr.w	r3, r3, #2
 8003eae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	4611      	mov	r1, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f005 fa25 	bl	800930a <USB_HC_Halt>
 8003ec0:	e0c9      	b.n	8004056 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d109      	bne.n	8003eec <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2320      	movs	r3, #32
 8003ee8:	6093      	str	r3, [r2, #8]
 8003eea:	e0b4      	b.n	8004056 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d133      	bne.n	8003f6a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	0151      	lsls	r1, r2, #5
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	440a      	add	r2, r1
 8003f18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f1c:	f043 0302 	orr.w	r3, r3, #2
 8003f20:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3361      	adds	r3, #97	; 0x61
 8003f30:	2205      	movs	r2, #5
 8003f32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f40:	461a      	mov	r2, r3
 8003f42:	2310      	movs	r3, #16
 8003f44:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f52:	461a      	mov	r2, r3
 8003f54:	2308      	movs	r3, #8
 8003f56:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	4611      	mov	r1, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f005 f9d1 	bl	800930a <USB_HC_Halt>
 8003f68:	e075      	b.n	8004056 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f80:	d134      	bne.n	8003fec <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f9c:	f043 0302 	orr.w	r3, r3, #2
 8003fa0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	212c      	movs	r1, #44	; 0x2c
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	4413      	add	r3, r2
 8003fae:	3361      	adds	r3, #97	; 0x61
 8003fb0:	2208      	movs	r2, #8
 8003fb2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2310      	movs	r3, #16
 8003fc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fd8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f005 f990 	bl	800930a <USB_HC_Halt>
 8003fea:	e034      	b.n	8004056 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d129      	bne.n	8004056 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4413      	add	r3, r2
 800400a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	440a      	add	r2, r1
 8004018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800401c:	f043 0302 	orr.w	r3, r3, #2
 8004020:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	212c      	movs	r1, #44	; 0x2c
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	4413      	add	r3, r2
 800402e:	3361      	adds	r3, #97	; 0x61
 8004030:	2206      	movs	r2, #6
 8004032:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	4611      	mov	r1, r2
 800403e:	4618      	mov	r0, r3
 8004040:	f005 f963 	bl	800930a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4413      	add	r3, r2
 800404c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004050:	461a      	mov	r2, r3
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4413      	add	r3, r2
 800405e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800406c:	d122      	bne.n	80040b4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4413      	add	r3, r2
 8004076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	0151      	lsls	r1, r2, #5
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	440a      	add	r2, r1
 8004084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004088:	f043 0302 	orr.w	r3, r3, #2
 800408c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	4611      	mov	r1, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f005 f936 	bl	800930a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040aa:	461a      	mov	r2, r3
 80040ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040b0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80040b2:	e2ba      	b.n	800462a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	f040 811b 	bne.w	8004302 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d019      	beq.n	8004108 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	212c      	movs	r1, #44	; 0x2c
 80040da:	fb01 f303 	mul.w	r3, r1, r3
 80040de:	4413      	add	r3, r2
 80040e0:	3348      	adds	r3, #72	; 0x48
 80040e2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	0159      	lsls	r1, r3, #5
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	440b      	add	r3, r1
 80040ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80040f6:	1ad2      	subs	r2, r2, r3
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	202c      	movs	r0, #44	; 0x2c
 80040fe:	fb00 f303 	mul.w	r3, r0, r3
 8004102:	440b      	add	r3, r1
 8004104:	3350      	adds	r3, #80	; 0x50
 8004106:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	212c      	movs	r1, #44	; 0x2c
 800410e:	fb01 f303 	mul.w	r3, r1, r3
 8004112:	4413      	add	r3, r2
 8004114:	3361      	adds	r3, #97	; 0x61
 8004116:	2201      	movs	r2, #1
 8004118:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	212c      	movs	r1, #44	; 0x2c
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	4413      	add	r3, r2
 8004126:	335c      	adds	r3, #92	; 0x5c
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4413      	add	r3, r2
 8004134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004138:	461a      	mov	r2, r3
 800413a:	2301      	movs	r3, #1
 800413c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	212c      	movs	r1, #44	; 0x2c
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	4413      	add	r3, r2
 800414a:	333f      	adds	r3, #63	; 0x3f
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	212c      	movs	r1, #44	; 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	333f      	adds	r3, #63	; 0x3f
 8004160:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004162:	2b02      	cmp	r3, #2
 8004164:	d121      	bne.n	80041aa <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	0151      	lsls	r1, r2, #5
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	440a      	add	r2, r1
 800417c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004180:	f043 0302 	orr.w	r3, r3, #2
 8004184:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f005 f8ba 	bl	800930a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4413      	add	r3, r2
 800419e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a2:	461a      	mov	r2, r3
 80041a4:	2310      	movs	r3, #16
 80041a6:	6093      	str	r3, [r2, #8]
 80041a8:	e066      	b.n	8004278 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	212c      	movs	r1, #44	; 0x2c
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	4413      	add	r3, r2
 80041b6:	333f      	adds	r3, #63	; 0x3f
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d127      	bne.n	800420e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	0151      	lsls	r1, r2, #5
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	440a      	add	r2, r1
 80041d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041dc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	212c      	movs	r1, #44	; 0x2c
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	4413      	add	r3, r2
 80041ea:	3360      	adds	r3, #96	; 0x60
 80041ec:	2201      	movs	r2, #1
 80041ee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	b2d9      	uxtb	r1, r3
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	202c      	movs	r0, #44	; 0x2c
 80041fa:	fb00 f303 	mul.w	r3, r0, r3
 80041fe:	4413      	add	r3, r2
 8004200:	3360      	adds	r3, #96	; 0x60
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f009 fd6a 	bl	800dce0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800420c:	e034      	b.n	8004278 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	212c      	movs	r1, #44	; 0x2c
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	4413      	add	r3, r2
 800421a:	333f      	adds	r3, #63	; 0x3f
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d12a      	bne.n	8004278 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	212c      	movs	r1, #44	; 0x2c
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	3360      	adds	r3, #96	; 0x60
 8004230:	2201      	movs	r2, #1
 8004232:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	212c      	movs	r1, #44	; 0x2c
 800423a:	fb01 f303 	mul.w	r3, r1, r3
 800423e:	4413      	add	r3, r2
 8004240:	3354      	adds	r3, #84	; 0x54
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	f083 0301 	eor.w	r3, r3, #1
 8004248:	b2d8      	uxtb	r0, r3
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	212c      	movs	r1, #44	; 0x2c
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	3354      	adds	r3, #84	; 0x54
 8004258:	4602      	mov	r2, r0
 800425a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	b2d9      	uxtb	r1, r3
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	202c      	movs	r0, #44	; 0x2c
 8004266:	fb00 f303 	mul.w	r3, r0, r3
 800426a:	4413      	add	r3, r2
 800426c:	3360      	adds	r3, #96	; 0x60
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f009 fd34 	bl	800dce0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d12b      	bne.n	80042d8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	212c      	movs	r1, #44	; 0x2c
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	4413      	add	r3, r2
 800428c:	3348      	adds	r3, #72	; 0x48
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	202c      	movs	r0, #44	; 0x2c
 8004296:	fb00 f202 	mul.w	r2, r0, r2
 800429a:	440a      	add	r2, r1
 800429c:	3240      	adds	r2, #64	; 0x40
 800429e:	8812      	ldrh	r2, [r2, #0]
 80042a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 81be 	beq.w	800462a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	212c      	movs	r1, #44	; 0x2c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	3354      	adds	r3, #84	; 0x54
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	f083 0301 	eor.w	r3, r3, #1
 80042c2:	b2d8      	uxtb	r0, r3
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	212c      	movs	r1, #44	; 0x2c
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	3354      	adds	r3, #84	; 0x54
 80042d2:	4602      	mov	r2, r0
 80042d4:	701a      	strb	r2, [r3, #0]
}
 80042d6:	e1a8      	b.n	800462a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	212c      	movs	r1, #44	; 0x2c
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	4413      	add	r3, r2
 80042e4:	3354      	adds	r3, #84	; 0x54
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	f083 0301 	eor.w	r3, r3, #1
 80042ec:	b2d8      	uxtb	r0, r3
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	212c      	movs	r1, #44	; 0x2c
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	3354      	adds	r3, #84	; 0x54
 80042fc:	4602      	mov	r2, r0
 80042fe:	701a      	strb	r2, [r3, #0]
}
 8004300:	e193      	b.n	800462a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4413      	add	r3, r2
 800430a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b02      	cmp	r3, #2
 8004316:	f040 8106 	bne.w	8004526 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4413      	add	r3, r2
 8004322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	0151      	lsls	r1, r2, #5
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	440a      	add	r2, r1
 8004330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004334:	f023 0302 	bic.w	r3, r3, #2
 8004338:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	212c      	movs	r1, #44	; 0x2c
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	4413      	add	r3, r2
 8004346:	3361      	adds	r3, #97	; 0x61
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d109      	bne.n	8004362 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	212c      	movs	r1, #44	; 0x2c
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	4413      	add	r3, r2
 800435a:	3360      	adds	r3, #96	; 0x60
 800435c:	2201      	movs	r2, #1
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e0c9      	b.n	80044f6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	212c      	movs	r1, #44	; 0x2c
 8004368:	fb01 f303 	mul.w	r3, r1, r3
 800436c:	4413      	add	r3, r2
 800436e:	3361      	adds	r3, #97	; 0x61
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b05      	cmp	r3, #5
 8004374:	d109      	bne.n	800438a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	212c      	movs	r1, #44	; 0x2c
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	4413      	add	r3, r2
 8004382:	3360      	adds	r3, #96	; 0x60
 8004384:	2205      	movs	r2, #5
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	e0b5      	b.n	80044f6 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	212c      	movs	r1, #44	; 0x2c
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	4413      	add	r3, r2
 8004396:	3361      	adds	r3, #97	; 0x61
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b06      	cmp	r3, #6
 800439c:	d009      	beq.n	80043b2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	212c      	movs	r1, #44	; 0x2c
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	4413      	add	r3, r2
 80043aa:	3361      	adds	r3, #97	; 0x61
 80043ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d150      	bne.n	8004454 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	212c      	movs	r1, #44	; 0x2c
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	4413      	add	r3, r2
 80043be:	335c      	adds	r3, #92	; 0x5c
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	202c      	movs	r0, #44	; 0x2c
 80043ca:	fb00 f303 	mul.w	r3, r0, r3
 80043ce:	440b      	add	r3, r1
 80043d0:	335c      	adds	r3, #92	; 0x5c
 80043d2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	212c      	movs	r1, #44	; 0x2c
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	4413      	add	r3, r2
 80043e0:	335c      	adds	r3, #92	; 0x5c
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d912      	bls.n	800440e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	212c      	movs	r1, #44	; 0x2c
 80043ee:	fb01 f303 	mul.w	r3, r1, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	335c      	adds	r3, #92	; 0x5c
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	212c      	movs	r1, #44	; 0x2c
 8004400:	fb01 f303 	mul.w	r3, r1, r3
 8004404:	4413      	add	r3, r2
 8004406:	3360      	adds	r3, #96	; 0x60
 8004408:	2204      	movs	r2, #4
 800440a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800440c:	e073      	b.n	80044f6 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	212c      	movs	r1, #44	; 0x2c
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	4413      	add	r3, r2
 800441a:	3360      	adds	r3, #96	; 0x60
 800441c:	2202      	movs	r2, #2
 800441e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4413      	add	r3, r2
 8004428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004436:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800443e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	4413      	add	r3, r2
 8004448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444c:	461a      	mov	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004452:	e050      	b.n	80044f6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	212c      	movs	r1, #44	; 0x2c
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	4413      	add	r3, r2
 8004460:	3361      	adds	r3, #97	; 0x61
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d122      	bne.n	80044ae <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	212c      	movs	r1, #44	; 0x2c
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	4413      	add	r3, r2
 8004474:	3360      	adds	r3, #96	; 0x60
 8004476:	2202      	movs	r2, #2
 8004478:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4413      	add	r3, r2
 8004482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004490:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004498:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a6:	461a      	mov	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	e023      	b.n	80044f6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	212c      	movs	r1, #44	; 0x2c
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	4413      	add	r3, r2
 80044ba:	3361      	adds	r3, #97	; 0x61
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b07      	cmp	r3, #7
 80044c0:	d119      	bne.n	80044f6 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	212c      	movs	r1, #44	; 0x2c
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	4413      	add	r3, r2
 80044ce:	335c      	adds	r3, #92	; 0x5c
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	202c      	movs	r0, #44	; 0x2c
 80044da:	fb00 f303 	mul.w	r3, r0, r3
 80044de:	440b      	add	r3, r1
 80044e0:	335c      	adds	r3, #92	; 0x5c
 80044e2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	212c      	movs	r1, #44	; 0x2c
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	3360      	adds	r3, #96	; 0x60
 80044f2:	2204      	movs	r2, #4
 80044f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004502:	461a      	mov	r2, r3
 8004504:	2302      	movs	r3, #2
 8004506:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	b2d9      	uxtb	r1, r3
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	202c      	movs	r0, #44	; 0x2c
 8004512:	fb00 f303 	mul.w	r3, r0, r3
 8004516:	4413      	add	r3, r2
 8004518:	3360      	adds	r3, #96	; 0x60
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f009 fbde 	bl	800dce0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004524:	e081      	b.n	800462a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4413      	add	r3, r2
 800452e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b10      	cmp	r3, #16
 800453a:	d176      	bne.n	800462a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	212c      	movs	r1, #44	; 0x2c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	333f      	adds	r3, #63	; 0x3f
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d121      	bne.n	8004594 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	212c      	movs	r1, #44	; 0x2c
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	4413      	add	r3, r2
 800455c:	335c      	adds	r3, #92	; 0x5c
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4413      	add	r3, r2
 800456a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	0151      	lsls	r1, r2, #5
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	440a      	add	r2, r1
 8004578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800457c:	f043 0302 	orr.w	r3, r3, #2
 8004580:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	4611      	mov	r1, r2
 800458c:	4618      	mov	r0, r3
 800458e:	f004 febc 	bl	800930a <USB_HC_Halt>
 8004592:	e041      	b.n	8004618 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	212c      	movs	r1, #44	; 0x2c
 800459a:	fb01 f303 	mul.w	r3, r1, r3
 800459e:	4413      	add	r3, r2
 80045a0:	333f      	adds	r3, #63	; 0x3f
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d009      	beq.n	80045bc <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	212c      	movs	r1, #44	; 0x2c
 80045ae:	fb01 f303 	mul.w	r3, r1, r3
 80045b2:	4413      	add	r3, r2
 80045b4:	333f      	adds	r3, #63	; 0x3f
 80045b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d12d      	bne.n	8004618 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	212c      	movs	r1, #44	; 0x2c
 80045c2:	fb01 f303 	mul.w	r3, r1, r3
 80045c6:	4413      	add	r3, r2
 80045c8:	335c      	adds	r3, #92	; 0x5c
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d120      	bne.n	8004618 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	212c      	movs	r1, #44	; 0x2c
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	4413      	add	r3, r2
 80045e2:	3361      	adds	r3, #97	; 0x61
 80045e4:	2203      	movs	r2, #3
 80045e6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	0151      	lsls	r1, r2, #5
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	440a      	add	r2, r1
 80045fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004602:	f043 0302 	orr.w	r3, r3, #2
 8004606:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	4611      	mov	r1, r2
 8004612:	4618      	mov	r0, r3
 8004614:	f004 fe79 	bl	800930a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4413      	add	r3, r2
 8004620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004624:	461a      	mov	r2, r3
 8004626:	2310      	movs	r3, #16
 8004628:	6093      	str	r3, [r2, #8]
}
 800462a:	bf00      	nop
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b088      	sub	sp, #32
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	460b      	mov	r3, r1
 800463c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	4413      	add	r3, r2
 8004654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b04      	cmp	r3, #4
 8004660:	d119      	bne.n	8004696 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	4413      	add	r3, r2
 800466a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466e:	461a      	mov	r2, r3
 8004670:	2304      	movs	r3, #4
 8004672:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	4413      	add	r3, r2
 800467c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	440a      	add	r2, r1
 800468a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800468e:	f043 0302 	orr.w	r3, r3, #2
 8004692:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004694:	e3ca      	b.n	8004e2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	4413      	add	r3, r2
 800469e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d13e      	bne.n	800472a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b8:	461a      	mov	r2, r3
 80046ba:	2320      	movs	r3, #32
 80046bc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	212c      	movs	r1, #44	; 0x2c
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	4413      	add	r3, r2
 80046ca:	333d      	adds	r3, #61	; 0x3d
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	f040 83ac 	bne.w	8004e2c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	212c      	movs	r1, #44	; 0x2c
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	4413      	add	r3, r2
 80046e0:	333d      	adds	r3, #61	; 0x3d
 80046e2:	2200      	movs	r2, #0
 80046e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	212c      	movs	r1, #44	; 0x2c
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	3360      	adds	r3, #96	; 0x60
 80046f4:	2202      	movs	r2, #2
 80046f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	440a      	add	r2, r1
 800470e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004712:	f043 0302 	orr.w	r3, r3, #2
 8004716:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	4611      	mov	r1, r2
 8004722:	4618      	mov	r0, r3
 8004724:	f004 fdf1 	bl	800930a <USB_HC_Halt>
}
 8004728:	e380      	b.n	8004e2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	4413      	add	r3, r2
 8004732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800473c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004740:	d122      	bne.n	8004788 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	4413      	add	r3, r2
 800474a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	440a      	add	r2, r1
 8004758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800475c:	f043 0302 	orr.w	r3, r3, #2
 8004760:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	4611      	mov	r1, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f004 fdcc 	bl	800930a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	4413      	add	r3, r2
 800477a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477e:	461a      	mov	r2, r3
 8004780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004784:	6093      	str	r3, [r2, #8]
}
 8004786:	e351      	b.n	8004e2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	4413      	add	r3, r2
 8004790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b01      	cmp	r3, #1
 800479c:	d150      	bne.n	8004840 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	212c      	movs	r1, #44	; 0x2c
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	4413      	add	r3, r2
 80047aa:	335c      	adds	r3, #92	; 0x5c
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b40      	cmp	r3, #64	; 0x40
 80047c4:	d111      	bne.n	80047ea <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	212c      	movs	r1, #44	; 0x2c
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	333d      	adds	r3, #61	; 0x3d
 80047d4:	2201      	movs	r2, #1
 80047d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e4:	461a      	mov	r2, r3
 80047e6:	2340      	movs	r3, #64	; 0x40
 80047e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	0151      	lsls	r1, r2, #5
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	440a      	add	r2, r1
 8004800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004804:	f043 0302 	orr.w	r3, r3, #2
 8004808:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	4611      	mov	r1, r2
 8004814:	4618      	mov	r0, r3
 8004816:	f004 fd78 	bl	800930a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	4413      	add	r3, r2
 8004822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004826:	461a      	mov	r2, r3
 8004828:	2301      	movs	r3, #1
 800482a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	212c      	movs	r1, #44	; 0x2c
 8004832:	fb01 f303 	mul.w	r3, r1, r3
 8004836:	4413      	add	r3, r2
 8004838:	3361      	adds	r3, #97	; 0x61
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
}
 800483e:	e2f5      	b.n	8004e2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	4413      	add	r3, r2
 8004848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b40      	cmp	r3, #64	; 0x40
 8004854:	d13c      	bne.n	80048d0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	212c      	movs	r1, #44	; 0x2c
 800485c:	fb01 f303 	mul.w	r3, r1, r3
 8004860:	4413      	add	r3, r2
 8004862:	3361      	adds	r3, #97	; 0x61
 8004864:	2204      	movs	r2, #4
 8004866:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	212c      	movs	r1, #44	; 0x2c
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	4413      	add	r3, r2
 8004874:	333d      	adds	r3, #61	; 0x3d
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	212c      	movs	r1, #44	; 0x2c
 8004880:	fb01 f303 	mul.w	r3, r1, r3
 8004884:	4413      	add	r3, r2
 8004886:	335c      	adds	r3, #92	; 0x5c
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	4413      	add	r3, r2
 8004894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	0151      	lsls	r1, r2, #5
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	440a      	add	r2, r1
 80048a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048a6:	f043 0302 	orr.w	r3, r3, #2
 80048aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f004 fd27 	bl	800930a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c8:	461a      	mov	r2, r3
 80048ca:	2340      	movs	r3, #64	; 0x40
 80048cc:	6093      	str	r3, [r2, #8]
}
 80048ce:	e2ad      	b.n	8004e2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d12a      	bne.n	800493c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f2:	461a      	mov	r2, r3
 80048f4:	2308      	movs	r3, #8
 80048f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	440a      	add	r2, r1
 800490e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004912:	f043 0302 	orr.w	r3, r3, #2
 8004916:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	4611      	mov	r1, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f004 fcf1 	bl	800930a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	212c      	movs	r1, #44	; 0x2c
 800492e:	fb01 f303 	mul.w	r3, r1, r3
 8004932:	4413      	add	r3, r2
 8004934:	3361      	adds	r3, #97	; 0x61
 8004936:	2205      	movs	r2, #5
 8004938:	701a      	strb	r2, [r3, #0]
}
 800493a:	e277      	b.n	8004e2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	4413      	add	r3, r2
 8004944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b10      	cmp	r3, #16
 8004950:	d150      	bne.n	80049f4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	212c      	movs	r1, #44	; 0x2c
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	4413      	add	r3, r2
 800495e:	335c      	adds	r3, #92	; 0x5c
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	212c      	movs	r1, #44	; 0x2c
 800496a:	fb01 f303 	mul.w	r3, r1, r3
 800496e:	4413      	add	r3, r2
 8004970:	3361      	adds	r3, #97	; 0x61
 8004972:	2203      	movs	r2, #3
 8004974:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	212c      	movs	r1, #44	; 0x2c
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	333d      	adds	r3, #61	; 0x3d
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d112      	bne.n	80049b0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	212c      	movs	r1, #44	; 0x2c
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	4413      	add	r3, r2
 8004996:	333c      	adds	r3, #60	; 0x3c
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d108      	bne.n	80049b0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	333d      	adds	r3, #61	; 0x3d
 80049ac:	2201      	movs	r2, #1
 80049ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	0151      	lsls	r1, r2, #5
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	440a      	add	r2, r1
 80049c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ca:	f043 0302 	orr.w	r3, r3, #2
 80049ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	4611      	mov	r1, r2
 80049da:	4618      	mov	r0, r3
 80049dc:	f004 fc95 	bl	800930a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ec:	461a      	mov	r2, r3
 80049ee:	2310      	movs	r3, #16
 80049f0:	6093      	str	r3, [r2, #8]
}
 80049f2:	e21b      	b.n	8004e2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b80      	cmp	r3, #128	; 0x80
 8004a08:	d174      	bne.n	8004af4 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d121      	bne.n	8004a56 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	212c      	movs	r1, #44	; 0x2c
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	3361      	adds	r3, #97	; 0x61
 8004a20:	2206      	movs	r2, #6
 8004a22:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	0151      	lsls	r1, r2, #5
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	440a      	add	r2, r1
 8004a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a3e:	f043 0302 	orr.w	r3, r3, #2
 8004a42:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f004 fc5b 	bl	800930a <USB_HC_Halt>
 8004a54:	e044      	b.n	8004ae0 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	212c      	movs	r1, #44	; 0x2c
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	4413      	add	r3, r2
 8004a62:	335c      	adds	r3, #92	; 0x5c
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	202c      	movs	r0, #44	; 0x2c
 8004a6e:	fb00 f303 	mul.w	r3, r0, r3
 8004a72:	440b      	add	r3, r1
 8004a74:	335c      	adds	r3, #92	; 0x5c
 8004a76:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	212c      	movs	r1, #44	; 0x2c
 8004a7e:	fb01 f303 	mul.w	r3, r1, r3
 8004a82:	4413      	add	r3, r2
 8004a84:	335c      	adds	r3, #92	; 0x5c
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d920      	bls.n	8004ace <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	212c      	movs	r1, #44	; 0x2c
 8004a92:	fb01 f303 	mul.w	r3, r1, r3
 8004a96:	4413      	add	r3, r2
 8004a98:	335c      	adds	r3, #92	; 0x5c
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	212c      	movs	r1, #44	; 0x2c
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3360      	adds	r3, #96	; 0x60
 8004aac:	2204      	movs	r2, #4
 8004aae:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	b2d9      	uxtb	r1, r3
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	202c      	movs	r0, #44	; 0x2c
 8004aba:	fb00 f303 	mul.w	r3, r0, r3
 8004abe:	4413      	add	r3, r2
 8004ac0:	3360      	adds	r3, #96	; 0x60
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f009 f90a 	bl	800dce0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004acc:	e008      	b.n	8004ae0 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	212c      	movs	r1, #44	; 0x2c
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	3360      	adds	r3, #96	; 0x60
 8004adc:	2202      	movs	r2, #2
 8004ade:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aec:	461a      	mov	r2, r3
 8004aee:	2380      	movs	r3, #128	; 0x80
 8004af0:	6093      	str	r3, [r2, #8]
}
 8004af2:	e19b      	b.n	8004e2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0a:	d134      	bne.n	8004b76 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	0151      	lsls	r1, r2, #5
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	440a      	add	r2, r1
 8004b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b26:	f043 0302 	orr.w	r3, r3, #2
 8004b2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	4611      	mov	r1, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f004 fbe7 	bl	800930a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b48:	461a      	mov	r2, r3
 8004b4a:	2310      	movs	r3, #16
 8004b4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	212c      	movs	r1, #44	; 0x2c
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	3361      	adds	r3, #97	; 0x61
 8004b70:	2208      	movs	r2, #8
 8004b72:	701a      	strb	r2, [r3, #0]
}
 8004b74:	e15a      	b.n	8004e2c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	f040 814f 	bne.w	8004e2c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ba8:	f023 0302 	bic.w	r3, r3, #2
 8004bac:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	212c      	movs	r1, #44	; 0x2c
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	4413      	add	r3, r2
 8004bba:	3361      	adds	r3, #97	; 0x61
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d17d      	bne.n	8004cbe <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	212c      	movs	r1, #44	; 0x2c
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	4413      	add	r3, r2
 8004bce:	3360      	adds	r3, #96	; 0x60
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	212c      	movs	r1, #44	; 0x2c
 8004bda:	fb01 f303 	mul.w	r3, r1, r3
 8004bde:	4413      	add	r3, r2
 8004be0:	333f      	adds	r3, #63	; 0x3f
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d00a      	beq.n	8004bfe <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	212c      	movs	r1, #44	; 0x2c
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	333f      	adds	r3, #63	; 0x3f
 8004bf6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	f040 8100 	bne.w	8004dfe <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d113      	bne.n	8004c2e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	212c      	movs	r1, #44	; 0x2c
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	3355      	adds	r3, #85	; 0x55
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	f083 0301 	eor.w	r3, r3, #1
 8004c1a:	b2d8      	uxtb	r0, r3
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	212c      	movs	r1, #44	; 0x2c
 8004c22:	fb01 f303 	mul.w	r3, r1, r3
 8004c26:	4413      	add	r3, r2
 8004c28:	3355      	adds	r3, #85	; 0x55
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	f040 80e3 	bne.w	8004dfe <HCD_HC_OUT_IRQHandler+0x7cc>
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	212c      	movs	r1, #44	; 0x2c
 8004c3e:	fb01 f303 	mul.w	r3, r1, r3
 8004c42:	4413      	add	r3, r2
 8004c44:	334c      	adds	r3, #76	; 0x4c
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80d8 	beq.w	8004dfe <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	212c      	movs	r1, #44	; 0x2c
 8004c54:	fb01 f303 	mul.w	r3, r1, r3
 8004c58:	4413      	add	r3, r2
 8004c5a:	334c      	adds	r3, #76	; 0x4c
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	202c      	movs	r0, #44	; 0x2c
 8004c64:	fb00 f202 	mul.w	r2, r0, r2
 8004c68:	440a      	add	r2, r1
 8004c6a:	3240      	adds	r2, #64	; 0x40
 8004c6c:	8812      	ldrh	r2, [r2, #0]
 8004c6e:	4413      	add	r3, r2
 8004c70:	3b01      	subs	r3, #1
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	202c      	movs	r0, #44	; 0x2c
 8004c78:	fb00 f202 	mul.w	r2, r0, r2
 8004c7c:	440a      	add	r2, r1
 8004c7e:	3240      	adds	r2, #64	; 0x40
 8004c80:	8812      	ldrh	r2, [r2, #0]
 8004c82:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80b5 	beq.w	8004dfe <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	212c      	movs	r1, #44	; 0x2c
 8004c9a:	fb01 f303 	mul.w	r3, r1, r3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3355      	adds	r3, #85	; 0x55
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	f083 0301 	eor.w	r3, r3, #1
 8004ca8:	b2d8      	uxtb	r0, r3
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	212c      	movs	r1, #44	; 0x2c
 8004cb0:	fb01 f303 	mul.w	r3, r1, r3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	3355      	adds	r3, #85	; 0x55
 8004cb8:	4602      	mov	r2, r0
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	e09f      	b.n	8004dfe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	212c      	movs	r1, #44	; 0x2c
 8004cc4:	fb01 f303 	mul.w	r3, r1, r3
 8004cc8:	4413      	add	r3, r2
 8004cca:	3361      	adds	r3, #97	; 0x61
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d109      	bne.n	8004ce6 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	212c      	movs	r1, #44	; 0x2c
 8004cd8:	fb01 f303 	mul.w	r3, r1, r3
 8004cdc:	4413      	add	r3, r2
 8004cde:	3360      	adds	r3, #96	; 0x60
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	e08b      	b.n	8004dfe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	212c      	movs	r1, #44	; 0x2c
 8004cec:	fb01 f303 	mul.w	r3, r1, r3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	3361      	adds	r3, #97	; 0x61
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d109      	bne.n	8004d0e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	212c      	movs	r1, #44	; 0x2c
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	4413      	add	r3, r2
 8004d06:	3360      	adds	r3, #96	; 0x60
 8004d08:	2202      	movs	r2, #2
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	e077      	b.n	8004dfe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	212c      	movs	r1, #44	; 0x2c
 8004d14:	fb01 f303 	mul.w	r3, r1, r3
 8004d18:	4413      	add	r3, r2
 8004d1a:	3361      	adds	r3, #97	; 0x61
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b05      	cmp	r3, #5
 8004d20:	d109      	bne.n	8004d36 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	212c      	movs	r1, #44	; 0x2c
 8004d28:	fb01 f303 	mul.w	r3, r1, r3
 8004d2c:	4413      	add	r3, r2
 8004d2e:	3360      	adds	r3, #96	; 0x60
 8004d30:	2205      	movs	r2, #5
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	e063      	b.n	8004dfe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	212c      	movs	r1, #44	; 0x2c
 8004d3c:	fb01 f303 	mul.w	r3, r1, r3
 8004d40:	4413      	add	r3, r2
 8004d42:	3361      	adds	r3, #97	; 0x61
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b06      	cmp	r3, #6
 8004d48:	d009      	beq.n	8004d5e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	212c      	movs	r1, #44	; 0x2c
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	4413      	add	r3, r2
 8004d56:	3361      	adds	r3, #97	; 0x61
 8004d58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d14f      	bne.n	8004dfe <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	212c      	movs	r1, #44	; 0x2c
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	4413      	add	r3, r2
 8004d6a:	335c      	adds	r3, #92	; 0x5c
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	202c      	movs	r0, #44	; 0x2c
 8004d76:	fb00 f303 	mul.w	r3, r0, r3
 8004d7a:	440b      	add	r3, r1
 8004d7c:	335c      	adds	r3, #92	; 0x5c
 8004d7e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	212c      	movs	r1, #44	; 0x2c
 8004d86:	fb01 f303 	mul.w	r3, r1, r3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	335c      	adds	r3, #92	; 0x5c
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d912      	bls.n	8004dba <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	212c      	movs	r1, #44	; 0x2c
 8004d9a:	fb01 f303 	mul.w	r3, r1, r3
 8004d9e:	4413      	add	r3, r2
 8004da0:	335c      	adds	r3, #92	; 0x5c
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	212c      	movs	r1, #44	; 0x2c
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	4413      	add	r3, r2
 8004db2:	3360      	adds	r3, #96	; 0x60
 8004db4:	2204      	movs	r2, #4
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	e021      	b.n	8004dfe <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	212c      	movs	r1, #44	; 0x2c
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3360      	adds	r3, #96	; 0x60
 8004dc8:	2202      	movs	r2, #2
 8004dca:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004de2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dea:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df8:	461a      	mov	r2, r3
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	b2d9      	uxtb	r1, r3
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	202c      	movs	r0, #44	; 0x2c
 8004e1a:	fb00 f303 	mul.w	r3, r0, r3
 8004e1e:	4413      	add	r3, r2
 8004e20:	3360      	adds	r3, #96	; 0x60
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f008 ff5a 	bl	800dce0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e2c:	bf00      	nop
 8004e2e:	3720      	adds	r7, #32
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	; 0x28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	0c5b      	lsrs	r3, r3, #17
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	091b      	lsrs	r3, r3, #4
 8004e64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e68:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d004      	beq.n	8004e7a <HCD_RXQLVL_IRQHandler+0x46>
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2b05      	cmp	r3, #5
 8004e74:	f000 80a9 	beq.w	8004fca <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004e78:	e0aa      	b.n	8004fd0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80a6 	beq.w	8004fce <HCD_RXQLVL_IRQHandler+0x19a>
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	212c      	movs	r1, #44	; 0x2c
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3344      	adds	r3, #68	; 0x44
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 809b 	beq.w	8004fce <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	212c      	movs	r1, #44	; 0x2c
 8004e9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ea2:	4413      	add	r3, r2
 8004ea4:	3350      	adds	r3, #80	; 0x50
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	441a      	add	r2, r3
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	202c      	movs	r0, #44	; 0x2c
 8004eb2:	fb00 f303 	mul.w	r3, r0, r3
 8004eb6:	440b      	add	r3, r1
 8004eb8:	334c      	adds	r3, #76	; 0x4c
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d87a      	bhi.n	8004fb6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	212c      	movs	r1, #44	; 0x2c
 8004eca:	fb01 f303 	mul.w	r3, r1, r3
 8004ece:	4413      	add	r3, r2
 8004ed0:	3344      	adds	r3, #68	; 0x44
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	b292      	uxth	r2, r2
 8004ed8:	4619      	mov	r1, r3
 8004eda:	f003 fd8f 	bl	80089fc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	212c      	movs	r1, #44	; 0x2c
 8004ee4:	fb01 f303 	mul.w	r3, r1, r3
 8004ee8:	4413      	add	r3, r2
 8004eea:	3344      	adds	r3, #68	; 0x44
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	441a      	add	r2, r3
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	202c      	movs	r0, #44	; 0x2c
 8004ef8:	fb00 f303 	mul.w	r3, r0, r3
 8004efc:	440b      	add	r3, r1
 8004efe:	3344      	adds	r3, #68	; 0x44
 8004f00:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	212c      	movs	r1, #44	; 0x2c
 8004f08:	fb01 f303 	mul.w	r3, r1, r3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	3350      	adds	r3, #80	; 0x50
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	441a      	add	r2, r3
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	202c      	movs	r0, #44	; 0x2c
 8004f1c:	fb00 f303 	mul.w	r3, r0, r3
 8004f20:	440b      	add	r3, r1
 8004f22:	3350      	adds	r3, #80	; 0x50
 8004f24:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	0cdb      	lsrs	r3, r3, #19
 8004f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f3a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	212c      	movs	r1, #44	; 0x2c
 8004f42:	fb01 f303 	mul.w	r3, r1, r3
 8004f46:	4413      	add	r3, r2
 8004f48:	3340      	adds	r3, #64	; 0x40
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d13c      	bne.n	8004fce <HCD_RXQLVL_IRQHandler+0x19a>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d039      	beq.n	8004fce <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f70:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f78:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f86:	461a      	mov	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	212c      	movs	r1, #44	; 0x2c
 8004f92:	fb01 f303 	mul.w	r3, r1, r3
 8004f96:	4413      	add	r3, r2
 8004f98:	3354      	adds	r3, #84	; 0x54
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	f083 0301 	eor.w	r3, r3, #1
 8004fa0:	b2d8      	uxtb	r0, r3
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	212c      	movs	r1, #44	; 0x2c
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	4413      	add	r3, r2
 8004fae:	3354      	adds	r3, #84	; 0x54
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	701a      	strb	r2, [r3, #0]
      break;
 8004fb4:	e00b      	b.n	8004fce <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	212c      	movs	r1, #44	; 0x2c
 8004fbc:	fb01 f303 	mul.w	r3, r1, r3
 8004fc0:	4413      	add	r3, r2
 8004fc2:	3360      	adds	r3, #96	; 0x60
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	701a      	strb	r2, [r3, #0]
      break;
 8004fc8:	e001      	b.n	8004fce <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004fca:	bf00      	nop
 8004fcc:	e000      	b.n	8004fd0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004fce:	bf00      	nop
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	3728      	adds	r7, #40	; 0x28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005004:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d10b      	bne.n	8005028 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b01      	cmp	r3, #1
 8005018:	d102      	bne.n	8005020 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f008 fe44 	bl	800dca8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f043 0302 	orr.w	r3, r3, #2
 8005026:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b08      	cmp	r3, #8
 8005030:	d132      	bne.n	8005098 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f043 0308 	orr.w	r3, r3, #8
 8005038:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b04      	cmp	r3, #4
 8005042:	d126      	bne.n	8005092 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d113      	bne.n	8005074 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005052:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005056:	d106      	bne.n	8005066 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2102      	movs	r1, #2
 800505e:	4618      	mov	r0, r3
 8005060:	f003 fe2c 	bl	8008cbc <USB_InitFSLSPClkSel>
 8005064:	e011      	b.n	800508a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2101      	movs	r1, #1
 800506c:	4618      	mov	r0, r3
 800506e:	f003 fe25 	bl	8008cbc <USB_InitFSLSPClkSel>
 8005072:	e00a      	b.n	800508a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d106      	bne.n	800508a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005082:	461a      	mov	r2, r3
 8005084:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005088:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f008 fe3a 	bl	800dd04 <HAL_HCD_PortEnabled_Callback>
 8005090:	e002      	b.n	8005098 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f008 fe44 	bl	800dd20 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d103      	bne.n	80050aa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f043 0320 	orr.w	r3, r3, #32
 80050a8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050b0:	461a      	mov	r2, r3
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6013      	str	r3, [r2, #0]
}
 80050b6:	bf00      	nop
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e12b      	b.n	800532a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fd f8c8 	bl	800227c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2224      	movs	r2, #36	; 0x24
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005112:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005122:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005124:	f001 ffba 	bl	800709c <HAL_RCC_GetPCLK1Freq>
 8005128:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4a81      	ldr	r2, [pc, #516]	; (8005334 <HAL_I2C_Init+0x274>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d807      	bhi.n	8005144 <HAL_I2C_Init+0x84>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4a80      	ldr	r2, [pc, #512]	; (8005338 <HAL_I2C_Init+0x278>)
 8005138:	4293      	cmp	r3, r2
 800513a:	bf94      	ite	ls
 800513c:	2301      	movls	r3, #1
 800513e:	2300      	movhi	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e006      	b.n	8005152 <HAL_I2C_Init+0x92>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4a7d      	ldr	r2, [pc, #500]	; (800533c <HAL_I2C_Init+0x27c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	bf94      	ite	ls
 800514c:	2301      	movls	r3, #1
 800514e:	2300      	movhi	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e0e7      	b.n	800532a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4a78      	ldr	r2, [pc, #480]	; (8005340 <HAL_I2C_Init+0x280>)
 800515e:	fba2 2303 	umull	r2, r3, r2, r3
 8005162:	0c9b      	lsrs	r3, r3, #18
 8005164:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	4a6a      	ldr	r2, [pc, #424]	; (8005334 <HAL_I2C_Init+0x274>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d802      	bhi.n	8005194 <HAL_I2C_Init+0xd4>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	3301      	adds	r3, #1
 8005192:	e009      	b.n	80051a8 <HAL_I2C_Init+0xe8>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800519a:	fb02 f303 	mul.w	r3, r2, r3
 800519e:	4a69      	ldr	r2, [pc, #420]	; (8005344 <HAL_I2C_Init+0x284>)
 80051a0:	fba2 2303 	umull	r2, r3, r2, r3
 80051a4:	099b      	lsrs	r3, r3, #6
 80051a6:	3301      	adds	r3, #1
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6812      	ldr	r2, [r2, #0]
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	495c      	ldr	r1, [pc, #368]	; (8005334 <HAL_I2C_Init+0x274>)
 80051c4:	428b      	cmp	r3, r1
 80051c6:	d819      	bhi.n	80051fc <HAL_I2C_Init+0x13c>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	1e59      	subs	r1, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80051d6:	1c59      	adds	r1, r3, #1
 80051d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051dc:	400b      	ands	r3, r1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_I2C_Init+0x138>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1e59      	subs	r1, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80051f0:	3301      	adds	r3, #1
 80051f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f6:	e051      	b.n	800529c <HAL_I2C_Init+0x1dc>
 80051f8:	2304      	movs	r3, #4
 80051fa:	e04f      	b.n	800529c <HAL_I2C_Init+0x1dc>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d111      	bne.n	8005228 <HAL_I2C_Init+0x168>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	1e58      	subs	r0, r3, #1
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6859      	ldr	r1, [r3, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	440b      	add	r3, r1
 8005212:	fbb0 f3f3 	udiv	r3, r0, r3
 8005216:	3301      	adds	r3, #1
 8005218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800521c:	2b00      	cmp	r3, #0
 800521e:	bf0c      	ite	eq
 8005220:	2301      	moveq	r3, #1
 8005222:	2300      	movne	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	e012      	b.n	800524e <HAL_I2C_Init+0x18e>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1e58      	subs	r0, r3, #1
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6859      	ldr	r1, [r3, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	0099      	lsls	r1, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	fbb0 f3f3 	udiv	r3, r0, r3
 800523e:	3301      	adds	r3, #1
 8005240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005244:	2b00      	cmp	r3, #0
 8005246:	bf0c      	ite	eq
 8005248:	2301      	moveq	r3, #1
 800524a:	2300      	movne	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <HAL_I2C_Init+0x196>
 8005252:	2301      	movs	r3, #1
 8005254:	e022      	b.n	800529c <HAL_I2C_Init+0x1dc>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10e      	bne.n	800527c <HAL_I2C_Init+0x1bc>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1e58      	subs	r0, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6859      	ldr	r1, [r3, #4]
 8005266:	460b      	mov	r3, r1
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	440b      	add	r3, r1
 800526c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005270:	3301      	adds	r3, #1
 8005272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527a:	e00f      	b.n	800529c <HAL_I2C_Init+0x1dc>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	1e58      	subs	r0, r3, #1
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6859      	ldr	r1, [r3, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	0099      	lsls	r1, r3, #2
 800528c:	440b      	add	r3, r1
 800528e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005292:	3301      	adds	r3, #1
 8005294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	6809      	ldr	r1, [r1, #0]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69da      	ldr	r2, [r3, #28]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6911      	ldr	r1, [r2, #16]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	68d2      	ldr	r2, [r2, #12]
 80052d6:	4311      	orrs	r1, r2
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	430b      	orrs	r3, r1
 80052de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	000186a0 	.word	0x000186a0
 8005338:	001e847f 	.word	0x001e847f
 800533c:	003d08ff 	.word	0x003d08ff
 8005340:	431bde83 	.word	0x431bde83
 8005344:	10624dd3 	.word	0x10624dd3

08005348 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	4608      	mov	r0, r1
 8005352:	4611      	mov	r1, r2
 8005354:	461a      	mov	r2, r3
 8005356:	4603      	mov	r3, r0
 8005358:	817b      	strh	r3, [r7, #10]
 800535a:	460b      	mov	r3, r1
 800535c:	813b      	strh	r3, [r7, #8]
 800535e:	4613      	mov	r3, r2
 8005360:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005362:	f7fd fc43 	bl	8002bec <HAL_GetTick>
 8005366:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b20      	cmp	r3, #32
 8005372:	f040 80d9 	bne.w	8005528 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	2319      	movs	r3, #25
 800537c:	2201      	movs	r2, #1
 800537e:	496d      	ldr	r1, [pc, #436]	; (8005534 <HAL_I2C_Mem_Write+0x1ec>)
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 fc7f 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800538c:	2302      	movs	r3, #2
 800538e:	e0cc      	b.n	800552a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005396:	2b01      	cmp	r3, #1
 8005398:	d101      	bne.n	800539e <HAL_I2C_Mem_Write+0x56>
 800539a:	2302      	movs	r3, #2
 800539c:	e0c5      	b.n	800552a <HAL_I2C_Mem_Write+0x1e2>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d007      	beq.n	80053c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2221      	movs	r2, #33	; 0x21
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2240      	movs	r2, #64	; 0x40
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a3a      	ldr	r2, [r7, #32]
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4a4d      	ldr	r2, [pc, #308]	; (8005538 <HAL_I2C_Mem_Write+0x1f0>)
 8005404:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005406:	88f8      	ldrh	r0, [r7, #6]
 8005408:	893a      	ldrh	r2, [r7, #8]
 800540a:	8979      	ldrh	r1, [r7, #10]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	4603      	mov	r3, r0
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 fab6 	bl	8005988 <I2C_RequestMemoryWrite>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d052      	beq.n	80054c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e081      	b.n	800552a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 fd00 	bl	8005e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00d      	beq.n	8005452 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	2b04      	cmp	r3, #4
 800543c:	d107      	bne.n	800544e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800544c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e06b      	b.n	800552a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	781a      	ldrb	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b01      	subs	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b04      	cmp	r3, #4
 800548e:	d11b      	bne.n	80054c8 <HAL_I2C_Mem_Write+0x180>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005494:	2b00      	cmp	r3, #0
 8005496:	d017      	beq.n	80054c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	781a      	ldrb	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1aa      	bne.n	8005426 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fcec 	bl	8005eb2 <I2C_WaitOnBTFFlagUntilTimeout>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00d      	beq.n	80054fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d107      	bne.n	80054f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e016      	b.n	800552a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	e000      	b.n	800552a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005528:	2302      	movs	r3, #2
  }
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	00100002 	.word	0x00100002
 8005538:	ffff0000 	.word	0xffff0000

0800553c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08c      	sub	sp, #48	; 0x30
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	4608      	mov	r0, r1
 8005546:	4611      	mov	r1, r2
 8005548:	461a      	mov	r2, r3
 800554a:	4603      	mov	r3, r0
 800554c:	817b      	strh	r3, [r7, #10]
 800554e:	460b      	mov	r3, r1
 8005550:	813b      	strh	r3, [r7, #8]
 8005552:	4613      	mov	r3, r2
 8005554:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005556:	f7fd fb49 	bl	8002bec <HAL_GetTick>
 800555a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b20      	cmp	r3, #32
 8005566:	f040 8208 	bne.w	800597a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	2319      	movs	r3, #25
 8005570:	2201      	movs	r2, #1
 8005572:	497b      	ldr	r1, [pc, #492]	; (8005760 <HAL_I2C_Mem_Read+0x224>)
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 fb85 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005580:	2302      	movs	r3, #2
 8005582:	e1fb      	b.n	800597c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <HAL_I2C_Mem_Read+0x56>
 800558e:	2302      	movs	r3, #2
 8005590:	e1f4      	b.n	800597c <HAL_I2C_Mem_Read+0x440>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d007      	beq.n	80055b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2222      	movs	r2, #34	; 0x22
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2240      	movs	r2, #64	; 0x40
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80055e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4a5b      	ldr	r2, [pc, #364]	; (8005764 <HAL_I2C_Mem_Read+0x228>)
 80055f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055fa:	88f8      	ldrh	r0, [r7, #6]
 80055fc:	893a      	ldrh	r2, [r7, #8]
 80055fe:	8979      	ldrh	r1, [r7, #10]
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	4603      	mov	r3, r0
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 fa52 	bl	8005ab4 <I2C_RequestMemoryRead>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e1b0      	b.n	800597c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561e:	2b00      	cmp	r3, #0
 8005620:	d113      	bne.n	800564a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005622:	2300      	movs	r3, #0
 8005624:	623b      	str	r3, [r7, #32]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	623b      	str	r3, [r7, #32]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	623b      	str	r3, [r7, #32]
 8005636:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	e184      	b.n	8005954 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564e:	2b01      	cmp	r3, #1
 8005650:	d11b      	bne.n	800568a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005660:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	e164      	b.n	8005954 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568e:	2b02      	cmp	r3, #2
 8005690:	d11b      	bne.n	80056ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b2:	2300      	movs	r3, #0
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	61bb      	str	r3, [r7, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	61bb      	str	r3, [r7, #24]
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	e144      	b.n	8005954 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80056e0:	e138      	b.n	8005954 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	f200 80f1 	bhi.w	80058ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d123      	bne.n	800573c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fc1b 	bl	8005f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e139      	b.n	800597c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	855a      	strh	r2, [r3, #42]	; 0x2a
 800573a:	e10b      	b.n	8005954 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005740:	2b02      	cmp	r3, #2
 8005742:	d14e      	bne.n	80057e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	2200      	movs	r2, #0
 800574c:	4906      	ldr	r1, [pc, #24]	; (8005768 <HAL_I2C_Mem_Read+0x22c>)
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fa98 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d008      	beq.n	800576c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e10e      	b.n	800597c <HAL_I2C_Mem_Read+0x440>
 800575e:	bf00      	nop
 8005760:	00100002 	.word	0x00100002
 8005764:	ffff0000 	.word	0xffff0000
 8005768:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057e0:	e0b8      	b.n	8005954 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e8:	2200      	movs	r2, #0
 80057ea:	4966      	ldr	r1, [pc, #408]	; (8005984 <HAL_I2C_Mem_Read+0x448>)
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fa49 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0bf      	b.n	800597c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	2200      	movs	r2, #0
 8005846:	494f      	ldr	r1, [pc, #316]	; (8005984 <HAL_I2C_Mem_Read+0x448>)
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fa1b 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e091      	b.n	800597c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	3b01      	subs	r3, #1
 8005894:	b29a      	uxth	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058cc:	e042      	b.n	8005954 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 fb2e 	bl	8005f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e04c      	b.n	800597c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b04      	cmp	r3, #4
 8005920:	d118      	bne.n	8005954 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005958:	2b00      	cmp	r3, #0
 800595a:	f47f aec2 	bne.w	80056e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	e000      	b.n	800597c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800597a:	2302      	movs	r3, #2
  }
}
 800597c:	4618      	mov	r0, r3
 800597e:	3728      	adds	r7, #40	; 0x28
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	00010004 	.word	0x00010004

08005988 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af02      	add	r7, sp, #8
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	4608      	mov	r0, r1
 8005992:	4611      	mov	r1, r2
 8005994:	461a      	mov	r2, r3
 8005996:	4603      	mov	r3, r0
 8005998:	817b      	strh	r3, [r7, #10]
 800599a:	460b      	mov	r3, r1
 800599c:	813b      	strh	r3, [r7, #8]
 800599e:	4613      	mov	r3, r2
 80059a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f960 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d8:	d103      	bne.n	80059e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e05f      	b.n	8005aa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059e6:	897b      	ldrh	r3, [r7, #10]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	6a3a      	ldr	r2, [r7, #32]
 80059fa:	492d      	ldr	r1, [pc, #180]	; (8005ab0 <I2C_RequestMemoryWrite+0x128>)
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f998 	bl	8005d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e04c      	b.n	8005aa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a24:	6a39      	ldr	r1, [r7, #32]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 fa02 	bl	8005e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d107      	bne.n	8005a4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e02b      	b.n	8005aa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d105      	bne.n	8005a60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a54:	893b      	ldrh	r3, [r7, #8]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	611a      	str	r2, [r3, #16]
 8005a5e:	e021      	b.n	8005aa4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a60:	893b      	ldrh	r3, [r7, #8]
 8005a62:	0a1b      	lsrs	r3, r3, #8
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a70:	6a39      	ldr	r1, [r7, #32]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f9dc 	bl	8005e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d107      	bne.n	8005a96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e005      	b.n	8005aa6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a9a:	893b      	ldrh	r3, [r7, #8]
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	00010002 	.word	0x00010002

08005ab4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	4608      	mov	r0, r1
 8005abe:	4611      	mov	r1, r2
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	817b      	strh	r3, [r7, #10]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	813b      	strh	r3, [r7, #8]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005adc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f8c2 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00d      	beq.n	8005b22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b14:	d103      	bne.n	8005b1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e0aa      	b.n	8005c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b22:	897b      	ldrh	r3, [r7, #10]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	6a3a      	ldr	r2, [r7, #32]
 8005b36:	4952      	ldr	r1, [pc, #328]	; (8005c80 <I2C_RequestMemoryRead+0x1cc>)
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f8fa 	bl	8005d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e097      	b.n	8005c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b60:	6a39      	ldr	r1, [r7, #32]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f964 	bl	8005e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00d      	beq.n	8005b8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d107      	bne.n	8005b86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e076      	b.n	8005c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d105      	bne.n	8005b9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b90:	893b      	ldrh	r3, [r7, #8]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	611a      	str	r2, [r3, #16]
 8005b9a:	e021      	b.n	8005be0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b9c:	893b      	ldrh	r3, [r7, #8]
 8005b9e:	0a1b      	lsrs	r3, r3, #8
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bac:	6a39      	ldr	r1, [r7, #32]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f93e 	bl	8005e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00d      	beq.n	8005bd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d107      	bne.n	8005bd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e050      	b.n	8005c78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bd6:	893b      	ldrh	r3, [r7, #8]
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be2:	6a39      	ldr	r1, [r7, #32]
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 f923 	bl	8005e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00d      	beq.n	8005c0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d107      	bne.n	8005c08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e035      	b.n	8005c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f82b 	bl	8005c84 <I2C_WaitOnFlagUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00d      	beq.n	8005c50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c42:	d103      	bne.n	8005c4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e013      	b.n	8005c78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c50:	897b      	ldrh	r3, [r7, #10]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f043 0301 	orr.w	r3, r3, #1
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	6a3a      	ldr	r2, [r7, #32]
 8005c64:	4906      	ldr	r1, [pc, #24]	; (8005c80 <I2C_RequestMemoryRead+0x1cc>)
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f863 	bl	8005d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	00010002 	.word	0x00010002

08005c84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	4613      	mov	r3, r2
 8005c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c94:	e025      	b.n	8005ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9c:	d021      	beq.n	8005ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9e:	f7fc ffa5 	bl	8002bec <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d302      	bcc.n	8005cb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d116      	bne.n	8005ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f043 0220 	orr.w	r2, r3, #32
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e023      	b.n	8005d2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	0c1b      	lsrs	r3, r3, #16
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d10d      	bne.n	8005d08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	43da      	mvns	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bf0c      	ite	eq
 8005cfe:	2301      	moveq	r3, #1
 8005d00:	2300      	movne	r3, #0
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	e00c      	b.n	8005d22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	43da      	mvns	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4013      	ands	r3, r2
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bf0c      	ite	eq
 8005d1a:	2301      	moveq	r3, #1
 8005d1c:	2300      	movne	r3, #0
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	461a      	mov	r2, r3
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d0b6      	beq.n	8005c96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d40:	e051      	b.n	8005de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d50:	d123      	bne.n	8005d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	f043 0204 	orr.w	r2, r3, #4
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e046      	b.n	8005e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d021      	beq.n	8005de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da2:	f7fc ff23 	bl	8002bec <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d302      	bcc.n	8005db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d116      	bne.n	8005de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	f043 0220 	orr.w	r2, r3, #32
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e020      	b.n	8005e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	0c1b      	lsrs	r3, r3, #16
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d10c      	bne.n	8005e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	43da      	mvns	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	bf14      	ite	ne
 8005e02:	2301      	movne	r3, #1
 8005e04:	2300      	moveq	r3, #0
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	e00b      	b.n	8005e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	43da      	mvns	r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	4013      	ands	r3, r2
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	bf14      	ite	ne
 8005e1c:	2301      	movne	r3, #1
 8005e1e:	2300      	moveq	r3, #0
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d18d      	bne.n	8005d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e3c:	e02d      	b.n	8005e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 f8ce 	bl	8005fe0 <I2C_IsAcknowledgeFailed>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e02d      	b.n	8005eaa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e54:	d021      	beq.n	8005e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e56:	f7fc fec9 	bl	8002bec <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d302      	bcc.n	8005e6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d116      	bne.n	8005e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f043 0220 	orr.w	r2, r3, #32
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e007      	b.n	8005eaa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea4:	2b80      	cmp	r3, #128	; 0x80
 8005ea6:	d1ca      	bne.n	8005e3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ebe:	e02d      	b.n	8005f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f88d 	bl	8005fe0 <I2C_IsAcknowledgeFailed>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e02d      	b.n	8005f2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d021      	beq.n	8005f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed8:	f7fc fe88 	bl	8002bec <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d302      	bcc.n	8005eee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d116      	bne.n	8005f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	f043 0220 	orr.w	r2, r3, #32
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e007      	b.n	8005f2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d1ca      	bne.n	8005ec0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f40:	e042      	b.n	8005fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b10      	cmp	r3, #16
 8005f4e:	d119      	bne.n	8005f84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f06f 0210 	mvn.w	r2, #16
 8005f58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e029      	b.n	8005fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f84:	f7fc fe32 	bl	8002bec <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d302      	bcc.n	8005f9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d116      	bne.n	8005fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	f043 0220 	orr.w	r2, r3, #32
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e007      	b.n	8005fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	d1b5      	bne.n	8005f42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff6:	d11b      	bne.n	8006030 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006000:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	f043 0204 	orr.w	r2, r3, #4
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b20      	cmp	r3, #32
 8006052:	d129      	bne.n	80060a8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2224      	movs	r2, #36	; 0x24
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0201 	bic.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0210 	bic.w	r2, r2, #16
 800607a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	e000      	b.n	80060aa <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80060a8:	2302      	movs	r3, #2
  }
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b20      	cmp	r3, #32
 80060ce:	d12a      	bne.n	8006126 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	; 0x24
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0201 	bic.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80060f0:	89fb      	ldrh	r3, [r7, #14]
 80060f2:	f023 030f 	bic.w	r3, r3, #15
 80060f6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	89fb      	ldrh	r3, [r7, #14]
 80060fe:	4313      	orrs	r3, r2
 8006100:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	89fa      	ldrh	r2, [r7, #14]
 8006108:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f042 0201 	orr.w	r2, r2, #1
 8006118:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2220      	movs	r2, #32
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	e000      	b.n	8006128 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006126:	2302      	movs	r3, #2
  }
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e0bf      	b.n	80062c6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fc f8f8 	bl	8002350 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006176:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6999      	ldr	r1, [r3, #24]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800618c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6899      	ldr	r1, [r3, #8]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4b4a      	ldr	r3, [pc, #296]	; (80062d0 <HAL_LTDC_Init+0x19c>)
 80061a8:	400b      	ands	r3, r1
 80061aa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	041b      	lsls	r3, r3, #16
 80061b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6899      	ldr	r1, [r3, #8]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699a      	ldr	r2, [r3, #24]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68d9      	ldr	r1, [r3, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	4b3e      	ldr	r3, [pc, #248]	; (80062d0 <HAL_LTDC_Init+0x19c>)
 80061d6:	400b      	ands	r3, r1
 80061d8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	041b      	lsls	r3, r3, #16
 80061e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68d9      	ldr	r1, [r3, #12]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1a      	ldr	r2, [r3, #32]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6919      	ldr	r1, [r3, #16]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4b33      	ldr	r3, [pc, #204]	; (80062d0 <HAL_LTDC_Init+0x19c>)
 8006204:	400b      	ands	r3, r1
 8006206:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	041b      	lsls	r3, r3, #16
 800620e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6919      	ldr	r1, [r3, #16]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6959      	ldr	r1, [r3, #20]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	4b27      	ldr	r3, [pc, #156]	; (80062d0 <HAL_LTDC_Init+0x19c>)
 8006232:	400b      	ands	r3, r1
 8006234:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	041b      	lsls	r3, r3, #16
 800623c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6959      	ldr	r1, [r3, #20]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006264:	041b      	lsls	r3, r3, #16
 8006266:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006276:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0206 	orr.w	r2, r2, #6
 80062a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	f000f800 	.word	0xf000f800

080062d4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d023      	beq.n	800633e <HAL_LTDC_IRQHandler+0x6a>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01e      	beq.n	800633e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0204 	bic.w	r2, r2, #4
 800630e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2204      	movs	r2, #4
 8006316:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800631e:	f043 0201 	orr.w	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2204      	movs	r2, #4
 800632c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f86f 	bl	800641c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d023      	beq.n	8006390 <HAL_LTDC_IRQHandler+0xbc>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01e      	beq.n	8006390 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0202 	bic.w	r2, r2, #2
 8006360:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2202      	movs	r2, #2
 8006368:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006370:	f043 0202 	orr.w	r2, r3, #2
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2204      	movs	r2, #4
 800637e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f846 	bl	800641c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d01b      	beq.n	80063d2 <HAL_LTDC_IRQHandler+0xfe>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d016      	beq.n	80063d2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0201 	bic.w	r2, r2, #1
 80063b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2201      	movs	r2, #1
 80063ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f82f 	bl	8006430 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01b      	beq.n	8006414 <HAL_LTDC_IRQHandler+0x140>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d016      	beq.n	8006414 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0208 	bic.w	r2, r2, #8
 80063f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2208      	movs	r2, #8
 80063fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f818 	bl	8006444 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006414:	bf00      	nop
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006458:	b5b0      	push	{r4, r5, r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_LTDC_ConfigLayer+0x1a>
 800646e:	2302      	movs	r3, #2
 8006470:	e02c      	b.n	80064cc <HAL_LTDC_ConfigLayer+0x74>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2202      	movs	r2, #2
 800647e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2134      	movs	r1, #52	; 0x34
 8006488:	fb01 f303 	mul.w	r3, r1, r3
 800648c:	4413      	add	r3, r2
 800648e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4614      	mov	r4, r2
 8006496:	461d      	mov	r5, r3
 8006498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800649a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800649c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800649e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 f811 	bl	80064d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2201      	movs	r2, #1
 80064b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bdb0      	pop	{r4, r5, r7, pc}

080064d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b089      	sub	sp, #36	; 0x24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	0c1b      	lsrs	r3, r3, #16
 80064ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064f0:	4413      	add	r3, r2
 80064f2:	041b      	lsls	r3, r3, #16
 80064f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	01db      	lsls	r3, r3, #7
 8006500:	4413      	add	r3, r2
 8006502:	3384      	adds	r3, #132	; 0x84
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	6812      	ldr	r2, [r2, #0]
 800650a:	4611      	mov	r1, r2
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	01d2      	lsls	r2, r2, #7
 8006510:	440a      	add	r2, r1
 8006512:	3284      	adds	r2, #132	; 0x84
 8006514:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006518:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	0c1b      	lsrs	r3, r3, #16
 8006526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800652a:	4413      	add	r3, r2
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4619      	mov	r1, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	01db      	lsls	r3, r3, #7
 8006538:	440b      	add	r3, r1
 800653a:	3384      	adds	r3, #132	; 0x84
 800653c:	4619      	mov	r1, r3
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	4313      	orrs	r3, r2
 8006542:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	68da      	ldr	r2, [r3, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006552:	4413      	add	r3, r2
 8006554:	041b      	lsls	r3, r3, #16
 8006556:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	01db      	lsls	r3, r3, #7
 8006562:	4413      	add	r3, r2
 8006564:	3384      	adds	r3, #132	; 0x84
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	6812      	ldr	r2, [r2, #0]
 800656c:	4611      	mov	r1, r2
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	01d2      	lsls	r2, r2, #7
 8006572:	440a      	add	r2, r1
 8006574:	3284      	adds	r2, #132	; 0x84
 8006576:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800657a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800658a:	4413      	add	r3, r2
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4619      	mov	r1, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	01db      	lsls	r3, r3, #7
 8006598:	440b      	add	r3, r1
 800659a:	3384      	adds	r3, #132	; 0x84
 800659c:	4619      	mov	r1, r3
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	01db      	lsls	r3, r3, #7
 80065ae:	4413      	add	r3, r2
 80065b0:	3384      	adds	r3, #132	; 0x84
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	4611      	mov	r1, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	01d2      	lsls	r2, r2, #7
 80065be:	440a      	add	r2, r1
 80065c0:	3284      	adds	r2, #132	; 0x84
 80065c2:	f023 0307 	bic.w	r3, r3, #7
 80065c6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	01db      	lsls	r3, r3, #7
 80065d2:	4413      	add	r3, r2
 80065d4:	3384      	adds	r3, #132	; 0x84
 80065d6:	461a      	mov	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80065e4:	021b      	lsls	r3, r3, #8
 80065e6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80065ee:	041b      	lsls	r3, r3, #16
 80065f0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	061b      	lsls	r3, r3, #24
 80065f8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	01db      	lsls	r3, r3, #7
 8006604:	4413      	add	r3, r2
 8006606:	3384      	adds	r3, #132	; 0x84
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	01db      	lsls	r3, r3, #7
 8006614:	4413      	add	r3, r2
 8006616:	3384      	adds	r3, #132	; 0x84
 8006618:	461a      	mov	r2, r3
 800661a:	2300      	movs	r3, #0
 800661c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006624:	461a      	mov	r2, r3
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	431a      	orrs	r2, r3
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	431a      	orrs	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4619      	mov	r1, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	01db      	lsls	r3, r3, #7
 8006638:	440b      	add	r3, r1
 800663a:	3384      	adds	r3, #132	; 0x84
 800663c:	4619      	mov	r1, r3
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	4313      	orrs	r3, r2
 8006642:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	01db      	lsls	r3, r3, #7
 800664e:	4413      	add	r3, r2
 8006650:	3384      	adds	r3, #132	; 0x84
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	4611      	mov	r1, r2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	01d2      	lsls	r2, r2, #7
 800665e:	440a      	add	r2, r1
 8006660:	3284      	adds	r2, #132	; 0x84
 8006662:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006666:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	01db      	lsls	r3, r3, #7
 8006672:	4413      	add	r3, r2
 8006674:	3384      	adds	r3, #132	; 0x84
 8006676:	461a      	mov	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	01db      	lsls	r3, r3, #7
 8006688:	4413      	add	r3, r2
 800668a:	3384      	adds	r3, #132	; 0x84
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	6812      	ldr	r2, [r2, #0]
 8006692:	4611      	mov	r1, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	01d2      	lsls	r2, r2, #7
 8006698:	440a      	add	r2, r1
 800669a:	3284      	adds	r2, #132	; 0x84
 800669c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80066a0:	f023 0307 	bic.w	r3, r3, #7
 80066a4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	69da      	ldr	r2, [r3, #28]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	68f9      	ldr	r1, [r7, #12]
 80066b0:	6809      	ldr	r1, [r1, #0]
 80066b2:	4608      	mov	r0, r1
 80066b4:	6879      	ldr	r1, [r7, #4]
 80066b6:	01c9      	lsls	r1, r1, #7
 80066b8:	4401      	add	r1, r0
 80066ba:	3184      	adds	r1, #132	; 0x84
 80066bc:	4313      	orrs	r3, r2
 80066be:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	461a      	mov	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	01db      	lsls	r3, r3, #7
 80066ca:	4413      	add	r3, r2
 80066cc:	3384      	adds	r3, #132	; 0x84
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	01db      	lsls	r3, r3, #7
 80066da:	4413      	add	r3, r2
 80066dc:	3384      	adds	r3, #132	; 0x84
 80066de:	461a      	mov	r2, r3
 80066e0:	2300      	movs	r3, #0
 80066e2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	01db      	lsls	r3, r3, #7
 80066ee:	4413      	add	r3, r2
 80066f0:	3384      	adds	r3, #132	; 0x84
 80066f2:	461a      	mov	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d102      	bne.n	8006708 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006702:	2304      	movs	r3, #4
 8006704:	61fb      	str	r3, [r7, #28]
 8006706:	e01b      	b.n	8006740 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d102      	bne.n	8006716 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006710:	2303      	movs	r3, #3
 8006712:	61fb      	str	r3, [r7, #28]
 8006714:	e014      	b.n	8006740 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b04      	cmp	r3, #4
 800671c:	d00b      	beq.n	8006736 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006722:	2b02      	cmp	r3, #2
 8006724:	d007      	beq.n	8006736 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800672a:	2b03      	cmp	r3, #3
 800672c:	d003      	beq.n	8006736 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006732:	2b07      	cmp	r3, #7
 8006734:	d102      	bne.n	800673c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006736:	2302      	movs	r3, #2
 8006738:	61fb      	str	r3, [r7, #28]
 800673a:	e001      	b.n	8006740 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800673c:	2301      	movs	r3, #1
 800673e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	01db      	lsls	r3, r3, #7
 800674a:	4413      	add	r3, r2
 800674c:	3384      	adds	r3, #132	; 0x84
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	6812      	ldr	r2, [r2, #0]
 8006754:	4611      	mov	r1, r2
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	01d2      	lsls	r2, r2, #7
 800675a:	440a      	add	r2, r1
 800675c:	3284      	adds	r2, #132	; 0x84
 800675e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006762:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	69fa      	ldr	r2, [r7, #28]
 800676a:	fb02 f303 	mul.w	r3, r2, r3
 800676e:	041a      	lsls	r2, r3, #16
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6859      	ldr	r1, [r3, #4]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	1acb      	subs	r3, r1, r3
 800677a:	69f9      	ldr	r1, [r7, #28]
 800677c:	fb01 f303 	mul.w	r3, r1, r3
 8006780:	3303      	adds	r3, #3
 8006782:	68f9      	ldr	r1, [r7, #12]
 8006784:	6809      	ldr	r1, [r1, #0]
 8006786:	4608      	mov	r0, r1
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	01c9      	lsls	r1, r1, #7
 800678c:	4401      	add	r1, r0
 800678e:	3184      	adds	r1, #132	; 0x84
 8006790:	4313      	orrs	r3, r2
 8006792:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	461a      	mov	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	01db      	lsls	r3, r3, #7
 800679e:	4413      	add	r3, r2
 80067a0:	3384      	adds	r3, #132	; 0x84
 80067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	4611      	mov	r1, r2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	01d2      	lsls	r2, r2, #7
 80067ae:	440a      	add	r2, r1
 80067b0:	3284      	adds	r2, #132	; 0x84
 80067b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80067b6:	f023 0307 	bic.w	r3, r3, #7
 80067ba:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	01db      	lsls	r3, r3, #7
 80067c6:	4413      	add	r3, r2
 80067c8:	3384      	adds	r3, #132	; 0x84
 80067ca:	461a      	mov	r2, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	01db      	lsls	r3, r3, #7
 80067dc:	4413      	add	r3, r2
 80067de:	3384      	adds	r3, #132	; 0x84
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	6812      	ldr	r2, [r2, #0]
 80067e6:	4611      	mov	r1, r2
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	01d2      	lsls	r2, r2, #7
 80067ec:	440a      	add	r2, r1
 80067ee:	3284      	adds	r2, #132	; 0x84
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	6013      	str	r3, [r2, #0]
}
 80067f6:	bf00      	nop
 80067f8:	3724      	adds	r7, #36	; 0x24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
	...

08006804 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e264      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d075      	beq.n	800690e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006822:	4ba3      	ldr	r3, [pc, #652]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 030c 	and.w	r3, r3, #12
 800682a:	2b04      	cmp	r3, #4
 800682c:	d00c      	beq.n	8006848 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800682e:	4ba0      	ldr	r3, [pc, #640]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006836:	2b08      	cmp	r3, #8
 8006838:	d112      	bne.n	8006860 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800683a:	4b9d      	ldr	r3, [pc, #628]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006846:	d10b      	bne.n	8006860 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006848:	4b99      	ldr	r3, [pc, #612]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d05b      	beq.n	800690c <HAL_RCC_OscConfig+0x108>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d157      	bne.n	800690c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e23f      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006868:	d106      	bne.n	8006878 <HAL_RCC_OscConfig+0x74>
 800686a:	4b91      	ldr	r3, [pc, #580]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a90      	ldr	r2, [pc, #576]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	e01d      	b.n	80068b4 <HAL_RCC_OscConfig+0xb0>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006880:	d10c      	bne.n	800689c <HAL_RCC_OscConfig+0x98>
 8006882:	4b8b      	ldr	r3, [pc, #556]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a8a      	ldr	r2, [pc, #552]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	4b88      	ldr	r3, [pc, #544]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a87      	ldr	r2, [pc, #540]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	e00b      	b.n	80068b4 <HAL_RCC_OscConfig+0xb0>
 800689c:	4b84      	ldr	r3, [pc, #528]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a83      	ldr	r2, [pc, #524]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 80068a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	4b81      	ldr	r3, [pc, #516]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a80      	ldr	r2, [pc, #512]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 80068ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d013      	beq.n	80068e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068bc:	f7fc f996 	bl	8002bec <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068c4:	f7fc f992 	bl	8002bec <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b64      	cmp	r3, #100	; 0x64
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e204      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d6:	4b76      	ldr	r3, [pc, #472]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0f0      	beq.n	80068c4 <HAL_RCC_OscConfig+0xc0>
 80068e2:	e014      	b.n	800690e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e4:	f7fc f982 	bl	8002bec <HAL_GetTick>
 80068e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068ec:	f7fc f97e 	bl	8002bec <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b64      	cmp	r3, #100	; 0x64
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e1f0      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068fe:	4b6c      	ldr	r3, [pc, #432]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1f0      	bne.n	80068ec <HAL_RCC_OscConfig+0xe8>
 800690a:	e000      	b.n	800690e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800690c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d063      	beq.n	80069e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800691a:	4b65      	ldr	r3, [pc, #404]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00b      	beq.n	800693e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006926:	4b62      	ldr	r3, [pc, #392]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800692e:	2b08      	cmp	r3, #8
 8006930:	d11c      	bne.n	800696c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006932:	4b5f      	ldr	r3, [pc, #380]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d116      	bne.n	800696c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800693e:	4b5c      	ldr	r3, [pc, #368]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d005      	beq.n	8006956 <HAL_RCC_OscConfig+0x152>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d001      	beq.n	8006956 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e1c4      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006956:	4b56      	ldr	r3, [pc, #344]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	4952      	ldr	r1, [pc, #328]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006966:	4313      	orrs	r3, r2
 8006968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800696a:	e03a      	b.n	80069e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d020      	beq.n	80069b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006974:	4b4f      	ldr	r3, [pc, #316]	; (8006ab4 <HAL_RCC_OscConfig+0x2b0>)
 8006976:	2201      	movs	r2, #1
 8006978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697a:	f7fc f937 	bl	8002bec <HAL_GetTick>
 800697e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006980:	e008      	b.n	8006994 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006982:	f7fc f933 	bl	8002bec <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e1a5      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006994:	4b46      	ldr	r3, [pc, #280]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0f0      	beq.n	8006982 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069a0:	4b43      	ldr	r3, [pc, #268]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	4940      	ldr	r1, [pc, #256]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	600b      	str	r3, [r1, #0]
 80069b4:	e015      	b.n	80069e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069b6:	4b3f      	ldr	r3, [pc, #252]	; (8006ab4 <HAL_RCC_OscConfig+0x2b0>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069bc:	f7fc f916 	bl	8002bec <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069c4:	f7fc f912 	bl	8002bec <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e184      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d6:	4b36      	ldr	r3, [pc, #216]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f0      	bne.n	80069c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d030      	beq.n	8006a50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d016      	beq.n	8006a24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069f6:	4b30      	ldr	r3, [pc, #192]	; (8006ab8 <HAL_RCC_OscConfig+0x2b4>)
 80069f8:	2201      	movs	r2, #1
 80069fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069fc:	f7fc f8f6 	bl	8002bec <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a04:	f7fc f8f2 	bl	8002bec <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e164      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a16:	4b26      	ldr	r3, [pc, #152]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f0      	beq.n	8006a04 <HAL_RCC_OscConfig+0x200>
 8006a22:	e015      	b.n	8006a50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a24:	4b24      	ldr	r3, [pc, #144]	; (8006ab8 <HAL_RCC_OscConfig+0x2b4>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a2a:	f7fc f8df 	bl	8002bec <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a30:	e008      	b.n	8006a44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a32:	f7fc f8db 	bl	8002bec <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e14d      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a44:	4b1a      	ldr	r3, [pc, #104]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1f0      	bne.n	8006a32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 80a0 	beq.w	8006b9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a62:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10f      	bne.n	8006a8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	4b0f      	ldr	r3, [pc, #60]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	4a0e      	ldr	r2, [pc, #56]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a7e:	4b0c      	ldr	r3, [pc, #48]	; (8006ab0 <HAL_RCC_OscConfig+0x2ac>)
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a86:	60bb      	str	r3, [r7, #8]
 8006a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a8e:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <HAL_RCC_OscConfig+0x2b8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d121      	bne.n	8006ade <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a9a:	4b08      	ldr	r3, [pc, #32]	; (8006abc <HAL_RCC_OscConfig+0x2b8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a07      	ldr	r2, [pc, #28]	; (8006abc <HAL_RCC_OscConfig+0x2b8>)
 8006aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aa6:	f7fc f8a1 	bl	8002bec <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aac:	e011      	b.n	8006ad2 <HAL_RCC_OscConfig+0x2ce>
 8006aae:	bf00      	nop
 8006ab0:	40023800 	.word	0x40023800
 8006ab4:	42470000 	.word	0x42470000
 8006ab8:	42470e80 	.word	0x42470e80
 8006abc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ac0:	f7fc f894 	bl	8002bec <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e106      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad2:	4b85      	ldr	r3, [pc, #532]	; (8006ce8 <HAL_RCC_OscConfig+0x4e4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0f0      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d106      	bne.n	8006af4 <HAL_RCC_OscConfig+0x2f0>
 8006ae6:	4b81      	ldr	r3, [pc, #516]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aea:	4a80      	ldr	r2, [pc, #512]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006aec:	f043 0301 	orr.w	r3, r3, #1
 8006af0:	6713      	str	r3, [r2, #112]	; 0x70
 8006af2:	e01c      	b.n	8006b2e <HAL_RCC_OscConfig+0x32a>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	2b05      	cmp	r3, #5
 8006afa:	d10c      	bne.n	8006b16 <HAL_RCC_OscConfig+0x312>
 8006afc:	4b7b      	ldr	r3, [pc, #492]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b00:	4a7a      	ldr	r2, [pc, #488]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006b02:	f043 0304 	orr.w	r3, r3, #4
 8006b06:	6713      	str	r3, [r2, #112]	; 0x70
 8006b08:	4b78      	ldr	r3, [pc, #480]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0c:	4a77      	ldr	r2, [pc, #476]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006b0e:	f043 0301 	orr.w	r3, r3, #1
 8006b12:	6713      	str	r3, [r2, #112]	; 0x70
 8006b14:	e00b      	b.n	8006b2e <HAL_RCC_OscConfig+0x32a>
 8006b16:	4b75      	ldr	r3, [pc, #468]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1a:	4a74      	ldr	r2, [pc, #464]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006b1c:	f023 0301 	bic.w	r3, r3, #1
 8006b20:	6713      	str	r3, [r2, #112]	; 0x70
 8006b22:	4b72      	ldr	r3, [pc, #456]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b26:	4a71      	ldr	r2, [pc, #452]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006b28:	f023 0304 	bic.w	r3, r3, #4
 8006b2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d015      	beq.n	8006b62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b36:	f7fc f859 	bl	8002bec <HAL_GetTick>
 8006b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b3c:	e00a      	b.n	8006b54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b3e:	f7fc f855 	bl	8002bec <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e0c5      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b54:	4b65      	ldr	r3, [pc, #404]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0ee      	beq.n	8006b3e <HAL_RCC_OscConfig+0x33a>
 8006b60:	e014      	b.n	8006b8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b62:	f7fc f843 	bl	8002bec <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b68:	e00a      	b.n	8006b80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b6a:	f7fc f83f 	bl	8002bec <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e0af      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b80:	4b5a      	ldr	r3, [pc, #360]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1ee      	bne.n	8006b6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d105      	bne.n	8006b9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b92:	4b56      	ldr	r3, [pc, #344]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	4a55      	ldr	r2, [pc, #340]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 809b 	beq.w	8006cde <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ba8:	4b50      	ldr	r3, [pc, #320]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f003 030c 	and.w	r3, r3, #12
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d05c      	beq.n	8006c6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d141      	bne.n	8006c40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bbc:	4b4c      	ldr	r3, [pc, #304]	; (8006cf0 <HAL_RCC_OscConfig+0x4ec>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc2:	f7fc f813 	bl	8002bec <HAL_GetTick>
 8006bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bca:	f7fc f80f 	bl	8002bec <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e081      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bdc:	4b43      	ldr	r3, [pc, #268]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1f0      	bne.n	8006bca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	019b      	lsls	r3, r3, #6
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	085b      	lsrs	r3, r3, #1
 8006c00:	3b01      	subs	r3, #1
 8006c02:	041b      	lsls	r3, r3, #16
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0a:	061b      	lsls	r3, r3, #24
 8006c0c:	4937      	ldr	r1, [pc, #220]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c12:	4b37      	ldr	r3, [pc, #220]	; (8006cf0 <HAL_RCC_OscConfig+0x4ec>)
 8006c14:	2201      	movs	r2, #1
 8006c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c18:	f7fb ffe8 	bl	8002bec <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c20:	f7fb ffe4 	bl	8002bec <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e056      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c32:	4b2e      	ldr	r3, [pc, #184]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0f0      	beq.n	8006c20 <HAL_RCC_OscConfig+0x41c>
 8006c3e:	e04e      	b.n	8006cde <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c40:	4b2b      	ldr	r3, [pc, #172]	; (8006cf0 <HAL_RCC_OscConfig+0x4ec>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c46:	f7fb ffd1 	bl	8002bec <HAL_GetTick>
 8006c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c4e:	f7fb ffcd 	bl	8002bec <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e03f      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c60:	4b22      	ldr	r3, [pc, #136]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1f0      	bne.n	8006c4e <HAL_RCC_OscConfig+0x44a>
 8006c6c:	e037      	b.n	8006cde <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e032      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c7a:	4b1c      	ldr	r3, [pc, #112]	; (8006cec <HAL_RCC_OscConfig+0x4e8>)
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d028      	beq.n	8006cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d121      	bne.n	8006cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d11a      	bne.n	8006cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006caa:	4013      	ands	r3, r2
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cb0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d111      	bne.n	8006cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc0:	085b      	lsrs	r3, r3, #1
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d107      	bne.n	8006cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d001      	beq.n	8006cde <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e000      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40007000 	.word	0x40007000
 8006cec:	40023800 	.word	0x40023800
 8006cf0:	42470060 	.word	0x42470060

08006cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0cc      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d08:	4b68      	ldr	r3, [pc, #416]	; (8006eac <HAL_RCC_ClockConfig+0x1b8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d90c      	bls.n	8006d30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d16:	4b65      	ldr	r3, [pc, #404]	; (8006eac <HAL_RCC_ClockConfig+0x1b8>)
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d1e:	4b63      	ldr	r3, [pc, #396]	; (8006eac <HAL_RCC_ClockConfig+0x1b8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d001      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e0b8      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d020      	beq.n	8006d7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d48:	4b59      	ldr	r3, [pc, #356]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	4a58      	ldr	r2, [pc, #352]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0308 	and.w	r3, r3, #8
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d005      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d60:	4b53      	ldr	r3, [pc, #332]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	4a52      	ldr	r2, [pc, #328]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d6c:	4b50      	ldr	r3, [pc, #320]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	494d      	ldr	r1, [pc, #308]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d044      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d107      	bne.n	8006da2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d92:	4b47      	ldr	r3, [pc, #284]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d119      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e07f      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d003      	beq.n	8006db2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d107      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006db2:	4b3f      	ldr	r3, [pc, #252]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e06f      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc2:	4b3b      	ldr	r3, [pc, #236]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e067      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dd2:	4b37      	ldr	r3, [pc, #220]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f023 0203 	bic.w	r2, r3, #3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	4934      	ldr	r1, [pc, #208]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006de4:	f7fb ff02 	bl	8002bec <HAL_GetTick>
 8006de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dea:	e00a      	b.n	8006e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dec:	f7fb fefe 	bl	8002bec <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e04f      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e02:	4b2b      	ldr	r3, [pc, #172]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 020c 	and.w	r2, r3, #12
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d1eb      	bne.n	8006dec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e14:	4b25      	ldr	r3, [pc, #148]	; (8006eac <HAL_RCC_ClockConfig+0x1b8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 030f 	and.w	r3, r3, #15
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d20c      	bcs.n	8006e3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e22:	4b22      	ldr	r3, [pc, #136]	; (8006eac <HAL_RCC_ClockConfig+0x1b8>)
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e2a:	4b20      	ldr	r3, [pc, #128]	; (8006eac <HAL_RCC_ClockConfig+0x1b8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d001      	beq.n	8006e3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e032      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d008      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e48:	4b19      	ldr	r3, [pc, #100]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	4916      	ldr	r1, [pc, #88]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d009      	beq.n	8006e7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e66:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	490e      	ldr	r1, [pc, #56]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e7a:	f000 f821 	bl	8006ec0 <HAL_RCC_GetSysClockFreq>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	091b      	lsrs	r3, r3, #4
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	490a      	ldr	r1, [pc, #40]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e8c:	5ccb      	ldrb	r3, [r1, r3]
 8006e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e92:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e96:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <HAL_RCC_ClockConfig+0x1c8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fb fcd6 	bl	800284c <HAL_InitTick>

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	40023c00 	.word	0x40023c00
 8006eb0:	40023800 	.word	0x40023800
 8006eb4:	08012dac 	.word	0x08012dac
 8006eb8:	20000008 	.word	0x20000008
 8006ebc:	2000000c 	.word	0x2000000c

08006ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	607b      	str	r3, [r7, #4]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ed8:	4b67      	ldr	r3, [pc, #412]	; (8007078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f003 030c 	and.w	r3, r3, #12
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d00d      	beq.n	8006f00 <HAL_RCC_GetSysClockFreq+0x40>
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	f200 80bd 	bhi.w	8007064 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d003      	beq.n	8006efa <HAL_RCC_GetSysClockFreq+0x3a>
 8006ef2:	e0b7      	b.n	8007064 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ef4:	4b61      	ldr	r3, [pc, #388]	; (800707c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006ef6:	60bb      	str	r3, [r7, #8]
       break;
 8006ef8:	e0b7      	b.n	800706a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006efa:	4b61      	ldr	r3, [pc, #388]	; (8007080 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006efc:	60bb      	str	r3, [r7, #8]
      break;
 8006efe:	e0b4      	b.n	800706a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f00:	4b5d      	ldr	r3, [pc, #372]	; (8007078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f0a:	4b5b      	ldr	r3, [pc, #364]	; (8007078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d04d      	beq.n	8006fb2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f16:	4b58      	ldr	r3, [pc, #352]	; (8007078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	099b      	lsrs	r3, r3, #6
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f26:	f04f 0100 	mov.w	r1, #0
 8006f2a:	ea02 0800 	and.w	r8, r2, r0
 8006f2e:	ea03 0901 	and.w	r9, r3, r1
 8006f32:	4640      	mov	r0, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	f04f 0300 	mov.w	r3, #0
 8006f3e:	014b      	lsls	r3, r1, #5
 8006f40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f44:	0142      	lsls	r2, r0, #5
 8006f46:	4610      	mov	r0, r2
 8006f48:	4619      	mov	r1, r3
 8006f4a:	ebb0 0008 	subs.w	r0, r0, r8
 8006f4e:	eb61 0109 	sbc.w	r1, r1, r9
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	018b      	lsls	r3, r1, #6
 8006f5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f60:	0182      	lsls	r2, r0, #6
 8006f62:	1a12      	subs	r2, r2, r0
 8006f64:	eb63 0301 	sbc.w	r3, r3, r1
 8006f68:	f04f 0000 	mov.w	r0, #0
 8006f6c:	f04f 0100 	mov.w	r1, #0
 8006f70:	00d9      	lsls	r1, r3, #3
 8006f72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f76:	00d0      	lsls	r0, r2, #3
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	eb12 0208 	adds.w	r2, r2, r8
 8006f80:	eb43 0309 	adc.w	r3, r3, r9
 8006f84:	f04f 0000 	mov.w	r0, #0
 8006f88:	f04f 0100 	mov.w	r1, #0
 8006f8c:	0259      	lsls	r1, r3, #9
 8006f8e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006f92:	0250      	lsls	r0, r2, #9
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	f7f9 fe60 	bl	8000c68 <__aeabi_uldivmod>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4613      	mov	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	e04a      	b.n	8007048 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fb2:	4b31      	ldr	r3, [pc, #196]	; (8007078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	099b      	lsrs	r3, r3, #6
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006fc2:	f04f 0100 	mov.w	r1, #0
 8006fc6:	ea02 0400 	and.w	r4, r2, r0
 8006fca:	ea03 0501 	and.w	r5, r3, r1
 8006fce:	4620      	mov	r0, r4
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	f04f 0200 	mov.w	r2, #0
 8006fd6:	f04f 0300 	mov.w	r3, #0
 8006fda:	014b      	lsls	r3, r1, #5
 8006fdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006fe0:	0142      	lsls	r2, r0, #5
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	1b00      	subs	r0, r0, r4
 8006fe8:	eb61 0105 	sbc.w	r1, r1, r5
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	018b      	lsls	r3, r1, #6
 8006ff6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006ffa:	0182      	lsls	r2, r0, #6
 8006ffc:	1a12      	subs	r2, r2, r0
 8006ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8007002:	f04f 0000 	mov.w	r0, #0
 8007006:	f04f 0100 	mov.w	r1, #0
 800700a:	00d9      	lsls	r1, r3, #3
 800700c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007010:	00d0      	lsls	r0, r2, #3
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	1912      	adds	r2, r2, r4
 8007018:	eb45 0303 	adc.w	r3, r5, r3
 800701c:	f04f 0000 	mov.w	r0, #0
 8007020:	f04f 0100 	mov.w	r1, #0
 8007024:	0299      	lsls	r1, r3, #10
 8007026:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800702a:	0290      	lsls	r0, r2, #10
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4610      	mov	r0, r2
 8007032:	4619      	mov	r1, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	461a      	mov	r2, r3
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	f7f9 fe14 	bl	8000c68 <__aeabi_uldivmod>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	4613      	mov	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007048:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	0c1b      	lsrs	r3, r3, #16
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	3301      	adds	r3, #1
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007060:	60bb      	str	r3, [r7, #8]
      break;
 8007062:	e002      	b.n	800706a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007064:	4b05      	ldr	r3, [pc, #20]	; (800707c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007066:	60bb      	str	r3, [r7, #8]
      break;
 8007068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800706a:	68bb      	ldr	r3, [r7, #8]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007076:	bf00      	nop
 8007078:	40023800 	.word	0x40023800
 800707c:	00f42400 	.word	0x00f42400
 8007080:	007a1200 	.word	0x007a1200

08007084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007088:	4b03      	ldr	r3, [pc, #12]	; (8007098 <HAL_RCC_GetHCLKFreq+0x14>)
 800708a:	681b      	ldr	r3, [r3, #0]
}
 800708c:	4618      	mov	r0, r3
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	20000008 	.word	0x20000008

0800709c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070a0:	f7ff fff0 	bl	8007084 <HAL_RCC_GetHCLKFreq>
 80070a4:	4602      	mov	r2, r0
 80070a6:	4b05      	ldr	r3, [pc, #20]	; (80070bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	0a9b      	lsrs	r3, r3, #10
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	4903      	ldr	r1, [pc, #12]	; (80070c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070b2:	5ccb      	ldrb	r3, [r1, r3]
 80070b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	40023800 	.word	0x40023800
 80070c0:	08012dbc 	.word	0x08012dbc

080070c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070c8:	f7ff ffdc 	bl	8007084 <HAL_RCC_GetHCLKFreq>
 80070cc:	4602      	mov	r2, r0
 80070ce:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	0b5b      	lsrs	r3, r3, #13
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	4903      	ldr	r1, [pc, #12]	; (80070e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070da:	5ccb      	ldrb	r3, [r1, r3]
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40023800 	.word	0x40023800
 80070e8:	08012dbc 	.word	0x08012dbc

080070ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	220f      	movs	r2, #15
 80070fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070fc:	4b12      	ldr	r3, [pc, #72]	; (8007148 <HAL_RCC_GetClockConfig+0x5c>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f003 0203 	and.w	r2, r3, #3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007108:	4b0f      	ldr	r3, [pc, #60]	; (8007148 <HAL_RCC_GetClockConfig+0x5c>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007114:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <HAL_RCC_GetClockConfig+0x5c>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007120:	4b09      	ldr	r3, [pc, #36]	; (8007148 <HAL_RCC_GetClockConfig+0x5c>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	08db      	lsrs	r3, r3, #3
 8007126:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800712e:	4b07      	ldr	r3, [pc, #28]	; (800714c <HAL_RCC_GetClockConfig+0x60>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 020f 	and.w	r2, r3, #15
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	601a      	str	r2, [r3, #0]
}
 800713a:	bf00      	nop
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40023800 	.word	0x40023800
 800714c:	40023c00 	.word	0x40023c00

08007150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10b      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007174:	2b00      	cmp	r3, #0
 8007176:	d105      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007180:	2b00      	cmp	r3, #0
 8007182:	d075      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007184:	4bad      	ldr	r3, [pc, #692]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007186:	2200      	movs	r2, #0
 8007188:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800718a:	f7fb fd2f 	bl	8002bec <HAL_GetTick>
 800718e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007190:	e008      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007192:	f7fb fd2b 	bl	8002bec <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d901      	bls.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e18b      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071a4:	4ba6      	ldr	r3, [pc, #664]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1f0      	bne.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d009      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	019a      	lsls	r2, r3, #6
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	071b      	lsls	r3, r3, #28
 80071c8:	499d      	ldr	r1, [pc, #628]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d01f      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071dc:	4b98      	ldr	r3, [pc, #608]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e2:	0f1b      	lsrs	r3, r3, #28
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	019a      	lsls	r2, r3, #6
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	061b      	lsls	r3, r3, #24
 80071f6:	431a      	orrs	r2, r3
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	071b      	lsls	r3, r3, #28
 80071fc:	4990      	ldr	r1, [pc, #576]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007204:	4b8e      	ldr	r3, [pc, #568]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800720a:	f023 021f 	bic.w	r2, r3, #31
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	3b01      	subs	r3, #1
 8007214:	498a      	ldr	r1, [pc, #552]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00d      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	019a      	lsls	r2, r3, #6
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	061b      	lsls	r3, r3, #24
 8007234:	431a      	orrs	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	071b      	lsls	r3, r3, #28
 800723c:	4980      	ldr	r1, [pc, #512]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007244:	4b7d      	ldr	r3, [pc, #500]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007246:	2201      	movs	r2, #1
 8007248:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800724a:	f7fb fccf 	bl	8002bec <HAL_GetTick>
 800724e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007250:	e008      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007252:	f7fb fccb 	bl	8002bec <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d901      	bls.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e12b      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007264:	4b76      	ldr	r3, [pc, #472]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0f0      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d105      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007284:	2b00      	cmp	r3, #0
 8007286:	d079      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007288:	4b6e      	ldr	r3, [pc, #440]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800728e:	f7fb fcad 	bl	8002bec <HAL_GetTick>
 8007292:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007294:	e008      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007296:	f7fb fca9 	bl	8002bec <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d901      	bls.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e109      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072a8:	4b65      	ldr	r3, [pc, #404]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b4:	d0ef      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d020      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80072c2:	4b5f      	ldr	r3, [pc, #380]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c8:	0f1b      	lsrs	r3, r3, #28
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	019a      	lsls	r2, r3, #6
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	061b      	lsls	r3, r3, #24
 80072dc:	431a      	orrs	r2, r3
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	071b      	lsls	r3, r3, #28
 80072e2:	4957      	ldr	r1, [pc, #348]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80072ea:	4b55      	ldr	r3, [pc, #340]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	021b      	lsls	r3, r3, #8
 80072fc:	4950      	ldr	r1, [pc, #320]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	2b00      	cmp	r3, #0
 800730e:	d01e      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007310:	4b4b      	ldr	r3, [pc, #300]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007316:	0e1b      	lsrs	r3, r3, #24
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	019a      	lsls	r2, r3, #6
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	061b      	lsls	r3, r3, #24
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	071b      	lsls	r3, r3, #28
 8007330:	4943      	ldr	r1, [pc, #268]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007338:	4b41      	ldr	r3, [pc, #260]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800733a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800733e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	493e      	ldr	r1, [pc, #248]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007348:	4313      	orrs	r3, r2
 800734a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800734e:	4b3d      	ldr	r3, [pc, #244]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007350:	2201      	movs	r2, #1
 8007352:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007354:	f7fb fc4a 	bl	8002bec <HAL_GetTick>
 8007358:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800735a:	e008      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800735c:	f7fb fc46 	bl	8002bec <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d901      	bls.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e0a6      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800736e:	4b34      	ldr	r3, [pc, #208]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800737a:	d1ef      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0320 	and.w	r3, r3, #32
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 808d 	beq.w	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	4b2c      	ldr	r3, [pc, #176]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	4a2b      	ldr	r2, [pc, #172]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007398:	6413      	str	r3, [r2, #64]	; 0x40
 800739a:	4b29      	ldr	r3, [pc, #164]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80073a6:	4b28      	ldr	r3, [pc, #160]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a27      	ldr	r2, [pc, #156]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80073ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073b2:	f7fb fc1b 	bl	8002bec <HAL_GetTick>
 80073b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073b8:	e008      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073ba:	f7fb fc17 	bl	8002bec <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d901      	bls.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e077      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073cc:	4b1e      	ldr	r3, [pc, #120]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0f0      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073d8:	4b19      	ldr	r3, [pc, #100]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d039      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d032      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073f6:	4b12      	ldr	r3, [pc, #72]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007400:	4b12      	ldr	r3, [pc, #72]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007402:	2201      	movs	r2, #1
 8007404:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007406:	4b11      	ldr	r3, [pc, #68]	; (800744c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800740c:	4a0c      	ldr	r2, [pc, #48]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007412:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b01      	cmp	r3, #1
 800741c:	d11e      	bne.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800741e:	f7fb fbe5 	bl	8002bec <HAL_GetTick>
 8007422:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007424:	e014      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007426:	f7fb fbe1 	bl	8002bec <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	f241 3288 	movw	r2, #5000	; 0x1388
 8007434:	4293      	cmp	r3, r2
 8007436:	d90b      	bls.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e03f      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800743c:	42470068 	.word	0x42470068
 8007440:	40023800 	.word	0x40023800
 8007444:	42470070 	.word	0x42470070
 8007448:	40007000 	.word	0x40007000
 800744c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007450:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d0e4      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007464:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007468:	d10d      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800746a:	4b16      	ldr	r3, [pc, #88]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007476:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800747a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800747e:	4911      	ldr	r1, [pc, #68]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007480:	4313      	orrs	r3, r2
 8007482:	608b      	str	r3, [r1, #8]
 8007484:	e005      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007486:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	4a0e      	ldr	r2, [pc, #56]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800748c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007490:	6093      	str	r3, [r2, #8]
 8007492:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007494:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800749e:	4909      	ldr	r1, [pc, #36]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0310 	and.w	r3, r3, #16
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d004      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80074b6:	4b04      	ldr	r3, [pc, #16]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80074b8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	40023800 	.word	0x40023800
 80074c8:	424711e0 	.word	0x424711e0

080074cc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e025      	b.n	800752c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d106      	bne.n	80074fa <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7fb f99f 	bl	8002838 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2202      	movs	r2, #2
 80074fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3304      	adds	r3, #4
 800750a:	4619      	mov	r1, r3
 800750c:	4610      	mov	r0, r2
 800750e:	f001 f831 	bl	8008574 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	461a      	mov	r2, r3
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	f001 f89c 	bl	800865a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e07b      	b.n	800763e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d108      	bne.n	8007560 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007556:	d009      	beq.n	800756c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	61da      	str	r2, [r3, #28]
 800755e:	e005      	b.n	800756c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d106      	bne.n	800758c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fb f812 	bl	80025b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075be:	431a      	orrs	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	431a      	orrs	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	431a      	orrs	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075dc:	431a      	orrs	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a1b      	ldr	r3, [r3, #32]
 80075ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f0:	ea42 0103 	orr.w	r1, r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	0c1b      	lsrs	r3, r3, #16
 800760a:	f003 0104 	and.w	r1, r3, #4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	f003 0210 	and.w	r2, r3, #16
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69da      	ldr	r2, [r3, #28]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800762c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b082      	sub	sp, #8
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e041      	b.n	80076dc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	d106      	bne.n	8007672 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7fa ffe7 	bl	8002640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2202      	movs	r2, #2
 8007676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3304      	adds	r3, #4
 8007682:	4619      	mov	r1, r3
 8007684:	4610      	mov	r0, r2
 8007686:	f000 fa95 	bl	8007bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d001      	beq.n	80076fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e04e      	b.n	800779a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68da      	ldr	r2, [r3, #12]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0201 	orr.w	r2, r2, #1
 8007712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a23      	ldr	r2, [pc, #140]	; (80077a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d022      	beq.n	8007764 <HAL_TIM_Base_Start_IT+0x80>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007726:	d01d      	beq.n	8007764 <HAL_TIM_Base_Start_IT+0x80>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a1f      	ldr	r2, [pc, #124]	; (80077ac <HAL_TIM_Base_Start_IT+0xc8>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d018      	beq.n	8007764 <HAL_TIM_Base_Start_IT+0x80>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a1e      	ldr	r2, [pc, #120]	; (80077b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d013      	beq.n	8007764 <HAL_TIM_Base_Start_IT+0x80>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a1c      	ldr	r2, [pc, #112]	; (80077b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00e      	beq.n	8007764 <HAL_TIM_Base_Start_IT+0x80>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a1b      	ldr	r2, [pc, #108]	; (80077b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d009      	beq.n	8007764 <HAL_TIM_Base_Start_IT+0x80>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a19      	ldr	r2, [pc, #100]	; (80077bc <HAL_TIM_Base_Start_IT+0xd8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d004      	beq.n	8007764 <HAL_TIM_Base_Start_IT+0x80>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d111      	bne.n	8007788 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 0307 	and.w	r3, r3, #7
 800776e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b06      	cmp	r3, #6
 8007774:	d010      	beq.n	8007798 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f042 0201 	orr.w	r2, r2, #1
 8007784:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007786:	e007      	b.n	8007798 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0201 	orr.w	r2, r2, #1
 8007796:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	40010000 	.word	0x40010000
 80077ac:	40000400 	.word	0x40000400
 80077b0:	40000800 	.word	0x40000800
 80077b4:	40000c00 	.word	0x40000c00
 80077b8:	40010400 	.word	0x40010400
 80077bc:	40014000 	.word	0x40014000
 80077c0:	40001800 	.word	0x40001800

080077c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d122      	bne.n	8007820 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d11b      	bne.n	8007820 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f06f 0202 	mvn.w	r2, #2
 80077f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f9b5 	bl	8007b76 <HAL_TIM_IC_CaptureCallback>
 800780c:	e005      	b.n	800781a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f9a7 	bl	8007b62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f9b8 	bl	8007b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	f003 0304 	and.w	r3, r3, #4
 800782a:	2b04      	cmp	r3, #4
 800782c:	d122      	bne.n	8007874 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b04      	cmp	r3, #4
 800783a:	d11b      	bne.n	8007874 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f06f 0204 	mvn.w	r2, #4
 8007844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2202      	movs	r2, #2
 800784a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f98b 	bl	8007b76 <HAL_TIM_IC_CaptureCallback>
 8007860:	e005      	b.n	800786e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f97d 	bl	8007b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f98e 	bl	8007b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b08      	cmp	r3, #8
 8007880:	d122      	bne.n	80078c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b08      	cmp	r3, #8
 800788e:	d11b      	bne.n	80078c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f06f 0208 	mvn.w	r2, #8
 8007898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2204      	movs	r2, #4
 800789e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f961 	bl	8007b76 <HAL_TIM_IC_CaptureCallback>
 80078b4:	e005      	b.n	80078c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f953 	bl	8007b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f964 	bl	8007b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	f003 0310 	and.w	r3, r3, #16
 80078d2:	2b10      	cmp	r3, #16
 80078d4:	d122      	bne.n	800791c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	2b10      	cmp	r3, #16
 80078e2:	d11b      	bne.n	800791c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f06f 0210 	mvn.w	r2, #16
 80078ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2208      	movs	r2, #8
 80078f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f937 	bl	8007b76 <HAL_TIM_IC_CaptureCallback>
 8007908:	e005      	b.n	8007916 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f929 	bl	8007b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f93a 	bl	8007b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b01      	cmp	r3, #1
 8007928:	d10e      	bne.n	8007948 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b01      	cmp	r3, #1
 8007936:	d107      	bne.n	8007948 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f06f 0201 	mvn.w	r2, #1
 8007940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7fa fc0c 	bl	8002160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007952:	2b80      	cmp	r3, #128	; 0x80
 8007954:	d10e      	bne.n	8007974 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007960:	2b80      	cmp	r3, #128	; 0x80
 8007962:	d107      	bne.n	8007974 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800796c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fae0 	bl	8007f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797e:	2b40      	cmp	r3, #64	; 0x40
 8007980:	d10e      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798c:	2b40      	cmp	r3, #64	; 0x40
 800798e:	d107      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f8ff 	bl	8007b9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	d10e      	bne.n	80079cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	d107      	bne.n	80079cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0220 	mvn.w	r2, #32
 80079c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 faaa 	bl	8007f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_TIM_ConfigClockSource+0x1c>
 80079ec:	2302      	movs	r3, #2
 80079ee:	e0b4      	b.n	8007b5a <HAL_TIM_ConfigClockSource+0x186>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a28:	d03e      	beq.n	8007aa8 <HAL_TIM_ConfigClockSource+0xd4>
 8007a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a2e:	f200 8087 	bhi.w	8007b40 <HAL_TIM_ConfigClockSource+0x16c>
 8007a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a36:	f000 8086 	beq.w	8007b46 <HAL_TIM_ConfigClockSource+0x172>
 8007a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3e:	d87f      	bhi.n	8007b40 <HAL_TIM_ConfigClockSource+0x16c>
 8007a40:	2b70      	cmp	r3, #112	; 0x70
 8007a42:	d01a      	beq.n	8007a7a <HAL_TIM_ConfigClockSource+0xa6>
 8007a44:	2b70      	cmp	r3, #112	; 0x70
 8007a46:	d87b      	bhi.n	8007b40 <HAL_TIM_ConfigClockSource+0x16c>
 8007a48:	2b60      	cmp	r3, #96	; 0x60
 8007a4a:	d050      	beq.n	8007aee <HAL_TIM_ConfigClockSource+0x11a>
 8007a4c:	2b60      	cmp	r3, #96	; 0x60
 8007a4e:	d877      	bhi.n	8007b40 <HAL_TIM_ConfigClockSource+0x16c>
 8007a50:	2b50      	cmp	r3, #80	; 0x50
 8007a52:	d03c      	beq.n	8007ace <HAL_TIM_ConfigClockSource+0xfa>
 8007a54:	2b50      	cmp	r3, #80	; 0x50
 8007a56:	d873      	bhi.n	8007b40 <HAL_TIM_ConfigClockSource+0x16c>
 8007a58:	2b40      	cmp	r3, #64	; 0x40
 8007a5a:	d058      	beq.n	8007b0e <HAL_TIM_ConfigClockSource+0x13a>
 8007a5c:	2b40      	cmp	r3, #64	; 0x40
 8007a5e:	d86f      	bhi.n	8007b40 <HAL_TIM_ConfigClockSource+0x16c>
 8007a60:	2b30      	cmp	r3, #48	; 0x30
 8007a62:	d064      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0x15a>
 8007a64:	2b30      	cmp	r3, #48	; 0x30
 8007a66:	d86b      	bhi.n	8007b40 <HAL_TIM_ConfigClockSource+0x16c>
 8007a68:	2b20      	cmp	r3, #32
 8007a6a:	d060      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0x15a>
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	d867      	bhi.n	8007b40 <HAL_TIM_ConfigClockSource+0x16c>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d05c      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0x15a>
 8007a74:	2b10      	cmp	r3, #16
 8007a76:	d05a      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0x15a>
 8007a78:	e062      	b.n	8007b40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6818      	ldr	r0, [r3, #0]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	6899      	ldr	r1, [r3, #8]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f000 f9ad 	bl	8007de8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	609a      	str	r2, [r3, #8]
      break;
 8007aa6:	e04f      	b.n	8007b48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6818      	ldr	r0, [r3, #0]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	6899      	ldr	r1, [r3, #8]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	f000 f996 	bl	8007de8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689a      	ldr	r2, [r3, #8]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007aca:	609a      	str	r2, [r3, #8]
      break;
 8007acc:	e03c      	b.n	8007b48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	6859      	ldr	r1, [r3, #4]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	461a      	mov	r2, r3
 8007adc:	f000 f90a 	bl	8007cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2150      	movs	r1, #80	; 0x50
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 f963 	bl	8007db2 <TIM_ITRx_SetConfig>
      break;
 8007aec:	e02c      	b.n	8007b48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	6859      	ldr	r1, [r3, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	461a      	mov	r2, r3
 8007afc:	f000 f929 	bl	8007d52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2160      	movs	r1, #96	; 0x60
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 f953 	bl	8007db2 <TIM_ITRx_SetConfig>
      break;
 8007b0c:	e01c      	b.n	8007b48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	6859      	ldr	r1, [r3, #4]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f000 f8ea 	bl	8007cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2140      	movs	r1, #64	; 0x40
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f943 	bl	8007db2 <TIM_ITRx_SetConfig>
      break;
 8007b2c:	e00c      	b.n	8007b48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4619      	mov	r1, r3
 8007b38:	4610      	mov	r0, r2
 8007b3a:	f000 f93a 	bl	8007db2 <TIM_ITRx_SetConfig>
      break;
 8007b3e:	e003      	b.n	8007b48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	73fb      	strb	r3, [r7, #15]
      break;
 8007b44:	e000      	b.n	8007b48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b6a:	bf00      	nop
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b7e:	bf00      	nop
 8007b80:	370c      	adds	r7, #12
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b92:	bf00      	nop
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ba6:	bf00      	nop
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a40      	ldr	r2, [pc, #256]	; (8007cc8 <TIM_Base_SetConfig+0x114>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d013      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd2:	d00f      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a3d      	ldr	r2, [pc, #244]	; (8007ccc <TIM_Base_SetConfig+0x118>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00b      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a3c      	ldr	r2, [pc, #240]	; (8007cd0 <TIM_Base_SetConfig+0x11c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d007      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a3b      	ldr	r2, [pc, #236]	; (8007cd4 <TIM_Base_SetConfig+0x120>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a3a      	ldr	r2, [pc, #232]	; (8007cd8 <TIM_Base_SetConfig+0x124>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d108      	bne.n	8007c06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a2f      	ldr	r2, [pc, #188]	; (8007cc8 <TIM_Base_SetConfig+0x114>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d02b      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c14:	d027      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a2c      	ldr	r2, [pc, #176]	; (8007ccc <TIM_Base_SetConfig+0x118>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d023      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a2b      	ldr	r2, [pc, #172]	; (8007cd0 <TIM_Base_SetConfig+0x11c>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d01f      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a2a      	ldr	r2, [pc, #168]	; (8007cd4 <TIM_Base_SetConfig+0x120>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d01b      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a29      	ldr	r2, [pc, #164]	; (8007cd8 <TIM_Base_SetConfig+0x124>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d017      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a28      	ldr	r2, [pc, #160]	; (8007cdc <TIM_Base_SetConfig+0x128>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a27      	ldr	r2, [pc, #156]	; (8007ce0 <TIM_Base_SetConfig+0x12c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00f      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a26      	ldr	r2, [pc, #152]	; (8007ce4 <TIM_Base_SetConfig+0x130>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00b      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a25      	ldr	r2, [pc, #148]	; (8007ce8 <TIM_Base_SetConfig+0x134>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d007      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a24      	ldr	r2, [pc, #144]	; (8007cec <TIM_Base_SetConfig+0x138>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d003      	beq.n	8007c66 <TIM_Base_SetConfig+0xb2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a23      	ldr	r2, [pc, #140]	; (8007cf0 <TIM_Base_SetConfig+0x13c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d108      	bne.n	8007c78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a0a      	ldr	r2, [pc, #40]	; (8007cc8 <TIM_Base_SetConfig+0x114>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d003      	beq.n	8007cac <TIM_Base_SetConfig+0xf8>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a0c      	ldr	r2, [pc, #48]	; (8007cd8 <TIM_Base_SetConfig+0x124>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d103      	bne.n	8007cb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	615a      	str	r2, [r3, #20]
}
 8007cba:	bf00      	nop
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40010000 	.word	0x40010000
 8007ccc:	40000400 	.word	0x40000400
 8007cd0:	40000800 	.word	0x40000800
 8007cd4:	40000c00 	.word	0x40000c00
 8007cd8:	40010400 	.word	0x40010400
 8007cdc:	40014000 	.word	0x40014000
 8007ce0:	40014400 	.word	0x40014400
 8007ce4:	40014800 	.word	0x40014800
 8007ce8:	40001800 	.word	0x40001800
 8007cec:	40001c00 	.word	0x40001c00
 8007cf0:	40002000 	.word	0x40002000

08007cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	f023 0201 	bic.w	r2, r3, #1
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f023 030a 	bic.w	r3, r3, #10
 8007d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	621a      	str	r2, [r3, #32]
}
 8007d46:	bf00      	nop
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b087      	sub	sp, #28
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	f023 0210 	bic.w	r2, r3, #16
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	031b      	lsls	r3, r3, #12
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	621a      	str	r2, [r3, #32]
}
 8007da6:	bf00      	nop
 8007da8:	371c      	adds	r7, #28
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	f043 0307 	orr.w	r3, r3, #7
 8007dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	609a      	str	r2, [r3, #8]
}
 8007ddc:	bf00      	nop
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	021a      	lsls	r2, r3, #8
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	609a      	str	r2, [r3, #8]
}
 8007e1c:	bf00      	nop
 8007e1e:	371c      	adds	r7, #28
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d101      	bne.n	8007e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e05a      	b.n	8007ef6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a21      	ldr	r2, [pc, #132]	; (8007f04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d022      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e8c:	d01d      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a1d      	ldr	r2, [pc, #116]	; (8007f08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d018      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a1b      	ldr	r2, [pc, #108]	; (8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d013      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a1a      	ldr	r2, [pc, #104]	; (8007f10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d00e      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a18      	ldr	r2, [pc, #96]	; (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d009      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a17      	ldr	r2, [pc, #92]	; (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d004      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a15      	ldr	r2, [pc, #84]	; (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d10c      	bne.n	8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	40010000 	.word	0x40010000
 8007f08:	40000400 	.word	0x40000400
 8007f0c:	40000800 	.word	0x40000800
 8007f10:	40000c00 	.word	0x40000c00
 8007f14:	40010400 	.word	0x40010400
 8007f18:	40014000 	.word	0x40014000
 8007f1c:	40001800 	.word	0x40001800

08007f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e03f      	b.n	8007fda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d106      	bne.n	8007f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7fa fb88 	bl	8002684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2224      	movs	r2, #36	; 0x24
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68da      	ldr	r2, [r3, #12]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f929 	bl	80081e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	691a      	ldr	r2, [r3, #16]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	695a      	ldr	r2, [r3, #20]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b08a      	sub	sp, #40	; 0x28
 8007fe6:	af02      	add	r7, sp, #8
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	603b      	str	r3, [r7, #0]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b20      	cmp	r3, #32
 8008000:	d17c      	bne.n	80080fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <HAL_UART_Transmit+0x2c>
 8008008:	88fb      	ldrh	r3, [r7, #6]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e075      	b.n	80080fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008018:	2b01      	cmp	r3, #1
 800801a:	d101      	bne.n	8008020 <HAL_UART_Transmit+0x3e>
 800801c:	2302      	movs	r3, #2
 800801e:	e06e      	b.n	80080fe <HAL_UART_Transmit+0x11c>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2221      	movs	r2, #33	; 0x21
 8008032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008036:	f7fa fdd9 	bl	8002bec <HAL_GetTick>
 800803a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	88fa      	ldrh	r2, [r7, #6]
 8008040:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	88fa      	ldrh	r2, [r7, #6]
 8008046:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008050:	d108      	bne.n	8008064 <HAL_UART_Transmit+0x82>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d104      	bne.n	8008064 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	61bb      	str	r3, [r7, #24]
 8008062:	e003      	b.n	800806c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008068:	2300      	movs	r3, #0
 800806a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008074:	e02a      	b.n	80080cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2200      	movs	r2, #0
 800807e:	2180      	movs	r1, #128	; 0x80
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f840 	bl	8008106 <UART_WaitOnFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e036      	b.n	80080fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10b      	bne.n	80080ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	3302      	adds	r3, #2
 80080aa:	61bb      	str	r3, [r7, #24]
 80080ac:	e007      	b.n	80080be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	781a      	ldrb	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	3301      	adds	r3, #1
 80080bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	3b01      	subs	r3, #1
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1cf      	bne.n	8008076 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	2200      	movs	r2, #0
 80080de:	2140      	movs	r1, #64	; 0x40
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 f810 	bl	8008106 <UART_WaitOnFlagUntilTimeout>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e006      	b.n	80080fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e000      	b.n	80080fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080fc:	2302      	movs	r3, #2
  }
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3720      	adds	r7, #32
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b090      	sub	sp, #64	; 0x40
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	603b      	str	r3, [r7, #0]
 8008112:	4613      	mov	r3, r2
 8008114:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008116:	e050      	b.n	80081ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800811a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811e:	d04c      	beq.n	80081ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008122:	2b00      	cmp	r3, #0
 8008124:	d007      	beq.n	8008136 <UART_WaitOnFlagUntilTimeout+0x30>
 8008126:	f7fa fd61 	bl	8002bec <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008132:	429a      	cmp	r2, r3
 8008134:	d241      	bcs.n	80081ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	330c      	adds	r3, #12
 800813c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800814c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	330c      	adds	r3, #12
 8008154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008156:	637a      	str	r2, [r7, #52]	; 0x34
 8008158:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800815c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e5      	bne.n	8008136 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3314      	adds	r3, #20
 8008170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	613b      	str	r3, [r7, #16]
   return(result);
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f023 0301 	bic.w	r3, r3, #1
 8008180:	63bb      	str	r3, [r7, #56]	; 0x38
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3314      	adds	r3, #20
 8008188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800818a:	623a      	str	r2, [r7, #32]
 800818c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	69f9      	ldr	r1, [r7, #28]
 8008190:	6a3a      	ldr	r2, [r7, #32]
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	61bb      	str	r3, [r7, #24]
   return(result);
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e5      	bne.n	800816a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e00f      	b.n	80081da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4013      	ands	r3, r2
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	bf0c      	ite	eq
 80081ca:	2301      	moveq	r3, #1
 80081cc:	2300      	movne	r3, #0
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	461a      	mov	r2, r3
 80081d2:	79fb      	ldrb	r3, [r7, #7]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d09f      	beq.n	8008118 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3740      	adds	r7, #64	; 0x40
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	b09f      	sub	sp, #124	; 0x7c
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fa:	68d9      	ldr	r1, [r3, #12]
 80081fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	ea40 0301 	orr.w	r3, r0, r1
 8008204:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008208:	689a      	ldr	r2, [r3, #8]
 800820a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	431a      	orrs	r2, r3
 8008210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	431a      	orrs	r2, r3
 8008216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	4313      	orrs	r3, r2
 800821c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800821e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008228:	f021 010c 	bic.w	r1, r1, #12
 800822c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008232:	430b      	orrs	r3, r1
 8008234:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008242:	6999      	ldr	r1, [r3, #24]
 8008244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	ea40 0301 	orr.w	r3, r0, r1
 800824c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800824e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4bc5      	ldr	r3, [pc, #788]	; (8008568 <UART_SetConfig+0x384>)
 8008254:	429a      	cmp	r2, r3
 8008256:	d004      	beq.n	8008262 <UART_SetConfig+0x7e>
 8008258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	4bc3      	ldr	r3, [pc, #780]	; (800856c <UART_SetConfig+0x388>)
 800825e:	429a      	cmp	r2, r3
 8008260:	d103      	bne.n	800826a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008262:	f7fe ff2f 	bl	80070c4 <HAL_RCC_GetPCLK2Freq>
 8008266:	6778      	str	r0, [r7, #116]	; 0x74
 8008268:	e002      	b.n	8008270 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800826a:	f7fe ff17 	bl	800709c <HAL_RCC_GetPCLK1Freq>
 800826e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008278:	f040 80b6 	bne.w	80083e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800827c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800827e:	461c      	mov	r4, r3
 8008280:	f04f 0500 	mov.w	r5, #0
 8008284:	4622      	mov	r2, r4
 8008286:	462b      	mov	r3, r5
 8008288:	1891      	adds	r1, r2, r2
 800828a:	6439      	str	r1, [r7, #64]	; 0x40
 800828c:	415b      	adcs	r3, r3
 800828e:	647b      	str	r3, [r7, #68]	; 0x44
 8008290:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008294:	1912      	adds	r2, r2, r4
 8008296:	eb45 0303 	adc.w	r3, r5, r3
 800829a:	f04f 0000 	mov.w	r0, #0
 800829e:	f04f 0100 	mov.w	r1, #0
 80082a2:	00d9      	lsls	r1, r3, #3
 80082a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082a8:	00d0      	lsls	r0, r2, #3
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	1911      	adds	r1, r2, r4
 80082b0:	6639      	str	r1, [r7, #96]	; 0x60
 80082b2:	416b      	adcs	r3, r5
 80082b4:	667b      	str	r3, [r7, #100]	; 0x64
 80082b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	461a      	mov	r2, r3
 80082bc:	f04f 0300 	mov.w	r3, #0
 80082c0:	1891      	adds	r1, r2, r2
 80082c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80082c4:	415b      	adcs	r3, r3
 80082c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80082d0:	f7f8 fcca 	bl	8000c68 <__aeabi_uldivmod>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	4ba5      	ldr	r3, [pc, #660]	; (8008570 <UART_SetConfig+0x38c>)
 80082da:	fba3 2302 	umull	r2, r3, r3, r2
 80082de:	095b      	lsrs	r3, r3, #5
 80082e0:	011e      	lsls	r6, r3, #4
 80082e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082e4:	461c      	mov	r4, r3
 80082e6:	f04f 0500 	mov.w	r5, #0
 80082ea:	4622      	mov	r2, r4
 80082ec:	462b      	mov	r3, r5
 80082ee:	1891      	adds	r1, r2, r2
 80082f0:	6339      	str	r1, [r7, #48]	; 0x30
 80082f2:	415b      	adcs	r3, r3
 80082f4:	637b      	str	r3, [r7, #52]	; 0x34
 80082f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80082fa:	1912      	adds	r2, r2, r4
 80082fc:	eb45 0303 	adc.w	r3, r5, r3
 8008300:	f04f 0000 	mov.w	r0, #0
 8008304:	f04f 0100 	mov.w	r1, #0
 8008308:	00d9      	lsls	r1, r3, #3
 800830a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800830e:	00d0      	lsls	r0, r2, #3
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	1911      	adds	r1, r2, r4
 8008316:	65b9      	str	r1, [r7, #88]	; 0x58
 8008318:	416b      	adcs	r3, r5
 800831a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800831c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	461a      	mov	r2, r3
 8008322:	f04f 0300 	mov.w	r3, #0
 8008326:	1891      	adds	r1, r2, r2
 8008328:	62b9      	str	r1, [r7, #40]	; 0x28
 800832a:	415b      	adcs	r3, r3
 800832c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800832e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008332:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008336:	f7f8 fc97 	bl	8000c68 <__aeabi_uldivmod>
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	4b8c      	ldr	r3, [pc, #560]	; (8008570 <UART_SetConfig+0x38c>)
 8008340:	fba3 1302 	umull	r1, r3, r3, r2
 8008344:	095b      	lsrs	r3, r3, #5
 8008346:	2164      	movs	r1, #100	; 0x64
 8008348:	fb01 f303 	mul.w	r3, r1, r3
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	00db      	lsls	r3, r3, #3
 8008350:	3332      	adds	r3, #50	; 0x32
 8008352:	4a87      	ldr	r2, [pc, #540]	; (8008570 <UART_SetConfig+0x38c>)
 8008354:	fba2 2303 	umull	r2, r3, r2, r3
 8008358:	095b      	lsrs	r3, r3, #5
 800835a:	005b      	lsls	r3, r3, #1
 800835c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008360:	441e      	add	r6, r3
 8008362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008364:	4618      	mov	r0, r3
 8008366:	f04f 0100 	mov.w	r1, #0
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	1894      	adds	r4, r2, r2
 8008370:	623c      	str	r4, [r7, #32]
 8008372:	415b      	adcs	r3, r3
 8008374:	627b      	str	r3, [r7, #36]	; 0x24
 8008376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800837a:	1812      	adds	r2, r2, r0
 800837c:	eb41 0303 	adc.w	r3, r1, r3
 8008380:	f04f 0400 	mov.w	r4, #0
 8008384:	f04f 0500 	mov.w	r5, #0
 8008388:	00dd      	lsls	r5, r3, #3
 800838a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800838e:	00d4      	lsls	r4, r2, #3
 8008390:	4622      	mov	r2, r4
 8008392:	462b      	mov	r3, r5
 8008394:	1814      	adds	r4, r2, r0
 8008396:	653c      	str	r4, [r7, #80]	; 0x50
 8008398:	414b      	adcs	r3, r1
 800839a:	657b      	str	r3, [r7, #84]	; 0x54
 800839c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	461a      	mov	r2, r3
 80083a2:	f04f 0300 	mov.w	r3, #0
 80083a6:	1891      	adds	r1, r2, r2
 80083a8:	61b9      	str	r1, [r7, #24]
 80083aa:	415b      	adcs	r3, r3
 80083ac:	61fb      	str	r3, [r7, #28]
 80083ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80083b6:	f7f8 fc57 	bl	8000c68 <__aeabi_uldivmod>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4b6c      	ldr	r3, [pc, #432]	; (8008570 <UART_SetConfig+0x38c>)
 80083c0:	fba3 1302 	umull	r1, r3, r3, r2
 80083c4:	095b      	lsrs	r3, r3, #5
 80083c6:	2164      	movs	r1, #100	; 0x64
 80083c8:	fb01 f303 	mul.w	r3, r1, r3
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	3332      	adds	r3, #50	; 0x32
 80083d2:	4a67      	ldr	r2, [pc, #412]	; (8008570 <UART_SetConfig+0x38c>)
 80083d4:	fba2 2303 	umull	r2, r3, r2, r3
 80083d8:	095b      	lsrs	r3, r3, #5
 80083da:	f003 0207 	and.w	r2, r3, #7
 80083de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4432      	add	r2, r6
 80083e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083e6:	e0b9      	b.n	800855c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083ea:	461c      	mov	r4, r3
 80083ec:	f04f 0500 	mov.w	r5, #0
 80083f0:	4622      	mov	r2, r4
 80083f2:	462b      	mov	r3, r5
 80083f4:	1891      	adds	r1, r2, r2
 80083f6:	6139      	str	r1, [r7, #16]
 80083f8:	415b      	adcs	r3, r3
 80083fa:	617b      	str	r3, [r7, #20]
 80083fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008400:	1912      	adds	r2, r2, r4
 8008402:	eb45 0303 	adc.w	r3, r5, r3
 8008406:	f04f 0000 	mov.w	r0, #0
 800840a:	f04f 0100 	mov.w	r1, #0
 800840e:	00d9      	lsls	r1, r3, #3
 8008410:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008414:	00d0      	lsls	r0, r2, #3
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	eb12 0804 	adds.w	r8, r2, r4
 800841e:	eb43 0905 	adc.w	r9, r3, r5
 8008422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	4618      	mov	r0, r3
 8008428:	f04f 0100 	mov.w	r1, #0
 800842c:	f04f 0200 	mov.w	r2, #0
 8008430:	f04f 0300 	mov.w	r3, #0
 8008434:	008b      	lsls	r3, r1, #2
 8008436:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800843a:	0082      	lsls	r2, r0, #2
 800843c:	4640      	mov	r0, r8
 800843e:	4649      	mov	r1, r9
 8008440:	f7f8 fc12 	bl	8000c68 <__aeabi_uldivmod>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4b49      	ldr	r3, [pc, #292]	; (8008570 <UART_SetConfig+0x38c>)
 800844a:	fba3 2302 	umull	r2, r3, r3, r2
 800844e:	095b      	lsrs	r3, r3, #5
 8008450:	011e      	lsls	r6, r3, #4
 8008452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008454:	4618      	mov	r0, r3
 8008456:	f04f 0100 	mov.w	r1, #0
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	1894      	adds	r4, r2, r2
 8008460:	60bc      	str	r4, [r7, #8]
 8008462:	415b      	adcs	r3, r3
 8008464:	60fb      	str	r3, [r7, #12]
 8008466:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800846a:	1812      	adds	r2, r2, r0
 800846c:	eb41 0303 	adc.w	r3, r1, r3
 8008470:	f04f 0400 	mov.w	r4, #0
 8008474:	f04f 0500 	mov.w	r5, #0
 8008478:	00dd      	lsls	r5, r3, #3
 800847a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800847e:	00d4      	lsls	r4, r2, #3
 8008480:	4622      	mov	r2, r4
 8008482:	462b      	mov	r3, r5
 8008484:	1814      	adds	r4, r2, r0
 8008486:	64bc      	str	r4, [r7, #72]	; 0x48
 8008488:	414b      	adcs	r3, r1
 800848a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800848c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	4618      	mov	r0, r3
 8008492:	f04f 0100 	mov.w	r1, #0
 8008496:	f04f 0200 	mov.w	r2, #0
 800849a:	f04f 0300 	mov.w	r3, #0
 800849e:	008b      	lsls	r3, r1, #2
 80084a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80084a4:	0082      	lsls	r2, r0, #2
 80084a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80084aa:	f7f8 fbdd 	bl	8000c68 <__aeabi_uldivmod>
 80084ae:	4602      	mov	r2, r0
 80084b0:	460b      	mov	r3, r1
 80084b2:	4b2f      	ldr	r3, [pc, #188]	; (8008570 <UART_SetConfig+0x38c>)
 80084b4:	fba3 1302 	umull	r1, r3, r3, r2
 80084b8:	095b      	lsrs	r3, r3, #5
 80084ba:	2164      	movs	r1, #100	; 0x64
 80084bc:	fb01 f303 	mul.w	r3, r1, r3
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	011b      	lsls	r3, r3, #4
 80084c4:	3332      	adds	r3, #50	; 0x32
 80084c6:	4a2a      	ldr	r2, [pc, #168]	; (8008570 <UART_SetConfig+0x38c>)
 80084c8:	fba2 2303 	umull	r2, r3, r2, r3
 80084cc:	095b      	lsrs	r3, r3, #5
 80084ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084d2:	441e      	add	r6, r3
 80084d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084d6:	4618      	mov	r0, r3
 80084d8:	f04f 0100 	mov.w	r1, #0
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	1894      	adds	r4, r2, r2
 80084e2:	603c      	str	r4, [r7, #0]
 80084e4:	415b      	adcs	r3, r3
 80084e6:	607b      	str	r3, [r7, #4]
 80084e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ec:	1812      	adds	r2, r2, r0
 80084ee:	eb41 0303 	adc.w	r3, r1, r3
 80084f2:	f04f 0400 	mov.w	r4, #0
 80084f6:	f04f 0500 	mov.w	r5, #0
 80084fa:	00dd      	lsls	r5, r3, #3
 80084fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008500:	00d4      	lsls	r4, r2, #3
 8008502:	4622      	mov	r2, r4
 8008504:	462b      	mov	r3, r5
 8008506:	eb12 0a00 	adds.w	sl, r2, r0
 800850a:	eb43 0b01 	adc.w	fp, r3, r1
 800850e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	4618      	mov	r0, r3
 8008514:	f04f 0100 	mov.w	r1, #0
 8008518:	f04f 0200 	mov.w	r2, #0
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	008b      	lsls	r3, r1, #2
 8008522:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008526:	0082      	lsls	r2, r0, #2
 8008528:	4650      	mov	r0, sl
 800852a:	4659      	mov	r1, fp
 800852c:	f7f8 fb9c 	bl	8000c68 <__aeabi_uldivmod>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4b0e      	ldr	r3, [pc, #56]	; (8008570 <UART_SetConfig+0x38c>)
 8008536:	fba3 1302 	umull	r1, r3, r3, r2
 800853a:	095b      	lsrs	r3, r3, #5
 800853c:	2164      	movs	r1, #100	; 0x64
 800853e:	fb01 f303 	mul.w	r3, r1, r3
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	011b      	lsls	r3, r3, #4
 8008546:	3332      	adds	r3, #50	; 0x32
 8008548:	4a09      	ldr	r2, [pc, #36]	; (8008570 <UART_SetConfig+0x38c>)
 800854a:	fba2 2303 	umull	r2, r3, r2, r3
 800854e:	095b      	lsrs	r3, r3, #5
 8008550:	f003 020f 	and.w	r2, r3, #15
 8008554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4432      	add	r2, r6
 800855a:	609a      	str	r2, [r3, #8]
}
 800855c:	bf00      	nop
 800855e:	377c      	adds	r7, #124	; 0x7c
 8008560:	46bd      	mov	sp, r7
 8008562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008566:	bf00      	nop
 8008568:	40011000 	.word	0x40011000
 800856c:	40011400 	.word	0x40011400
 8008570:	51eb851f 	.word	0x51eb851f

08008574 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d029      	beq.n	80085e2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800859a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800859e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80085a8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80085ae:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80085b4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80085ba:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80085c0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80085c6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80085cc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80085d2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	e034      	b.n	800864c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085ee:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80085f8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80085fe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008612:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008616:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008620:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008626:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800862c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008632:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008638:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	4313      	orrs	r3, r2
 800863e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800865a:	b480      	push	{r7}
 800865c:	b087      	sub	sp, #28
 800865e:	af00      	add	r7, sp, #0
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008666:	2300      	movs	r3, #0
 8008668:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d02e      	beq.n	80086d2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008680:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	3b01      	subs	r3, #1
 800868e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008690:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	3b01      	subs	r3, #1
 8008698:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800869a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	3b01      	subs	r3, #1
 80086a2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80086a4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80086ae:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80086b8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	3b01      	subs	r3, #1
 80086c0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80086c2:	4313      	orrs	r3, r2
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	609a      	str	r2, [r3, #8]
 80086d0:	e03b      	b.n	800874a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086e2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80086f4:	4313      	orrs	r3, r2
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008708:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	3b01      	subs	r3, #1
 8008716:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008718:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	3b01      	subs	r3, #1
 8008720:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008722:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	3b01      	subs	r3, #1
 800872a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800872c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	3b01      	subs	r3, #1
 8008734:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008736:	4313      	orrs	r3, r2
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008758:	b084      	sub	sp, #16
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	f107 001c 	add.w	r0, r7, #28
 8008766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	2b01      	cmp	r3, #1
 800876e:	d122      	bne.n	80087b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008774:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800879a:	2b01      	cmp	r3, #1
 800879c:	d105      	bne.n	80087aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f9a0 	bl	8008af0 <USB_CoreReset>
 80087b0:	4603      	mov	r3, r0
 80087b2:	73fb      	strb	r3, [r7, #15]
 80087b4:	e01a      	b.n	80087ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f994 	bl	8008af0 <USB_CoreReset>
 80087c8:	4603      	mov	r3, r0
 80087ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80087cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d106      	bne.n	80087e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	639a      	str	r2, [r3, #56]	; 0x38
 80087de:	e005      	b.n	80087ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d10b      	bne.n	800880a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f043 0206 	orr.w	r2, r3, #6
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f043 0220 	orr.w	r2, r3, #32
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800880a:	7bfb      	ldrb	r3, [r7, #15]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008816:	b004      	add	sp, #16
 8008818:	4770      	bx	lr

0800881a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f043 0201 	orr.w	r2, r3, #1
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f023 0201 	bic.w	r2, r3, #1
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	460b      	mov	r3, r1
 8008868:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800887a:	78fb      	ldrb	r3, [r7, #3]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d115      	bne.n	80088ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800888c:	2001      	movs	r0, #1
 800888e:	f7fa f9b9 	bl	8002c04 <HAL_Delay>
      ms++;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3301      	adds	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f91a 	bl	8008ad2 <USB_GetMode>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d01e      	beq.n	80088e2 <USB_SetCurrentMode+0x84>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b31      	cmp	r3, #49	; 0x31
 80088a8:	d9f0      	bls.n	800888c <USB_SetCurrentMode+0x2e>
 80088aa:	e01a      	b.n	80088e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d115      	bne.n	80088de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088be:	2001      	movs	r0, #1
 80088c0:	f7fa f9a0 	bl	8002c04 <HAL_Delay>
      ms++;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3301      	adds	r3, #1
 80088c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f901 	bl	8008ad2 <USB_GetMode>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d005      	beq.n	80088e2 <USB_SetCurrentMode+0x84>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b31      	cmp	r3, #49	; 0x31
 80088da:	d9f0      	bls.n	80088be <USB_SetCurrentMode+0x60>
 80088dc:	e001      	b.n	80088e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e005      	b.n	80088ee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2b32      	cmp	r3, #50	; 0x32
 80088e6:	d101      	bne.n	80088ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e000      	b.n	80088ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	019b      	lsls	r3, r3, #6
 800890a:	f043 0220 	orr.w	r2, r3, #32
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3301      	adds	r3, #1
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	4a08      	ldr	r2, [pc, #32]	; (800893c <USB_FlushTxFifo+0x44>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d901      	bls.n	8008922 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e006      	b.n	8008930 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b20      	cmp	r3, #32
 800892c:	d0f1      	beq.n	8008912 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	00030d40 	.word	0x00030d40

08008940 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008948:	2300      	movs	r3, #0
 800894a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2210      	movs	r2, #16
 8008950:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3301      	adds	r3, #1
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	4a08      	ldr	r2, [pc, #32]	; (800897c <USB_FlushRxFifo+0x3c>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d901      	bls.n	8008962 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e006      	b.n	8008970 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	f003 0310 	and.w	r3, r3, #16
 800896a:	2b10      	cmp	r3, #16
 800896c:	d0f1      	beq.n	8008952 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	00030d40 	.word	0x00030d40

08008980 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008980:	b480      	push	{r7}
 8008982:	b089      	sub	sp, #36	; 0x24
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	4611      	mov	r1, r2
 800898c:	461a      	mov	r2, r3
 800898e:	460b      	mov	r3, r1
 8008990:	71fb      	strb	r3, [r7, #7]
 8008992:	4613      	mov	r3, r2
 8008994:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800899e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d123      	bne.n	80089ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80089a6:	88bb      	ldrh	r3, [r7, #4]
 80089a8:	3303      	adds	r3, #3
 80089aa:	089b      	lsrs	r3, r3, #2
 80089ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80089ae:	2300      	movs	r3, #0
 80089b0:	61bb      	str	r3, [r7, #24]
 80089b2:	e018      	b.n	80089e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80089b4:	79fb      	ldrb	r3, [r7, #7]
 80089b6:	031a      	lsls	r2, r3, #12
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089c0:	461a      	mov	r2, r3
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	3301      	adds	r3, #1
 80089cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	3301      	adds	r3, #1
 80089d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	3301      	adds	r3, #1
 80089d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	3301      	adds	r3, #1
 80089de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	3301      	adds	r3, #1
 80089e4:	61bb      	str	r3, [r7, #24]
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d3e2      	bcc.n	80089b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3724      	adds	r7, #36	; 0x24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b08b      	sub	sp, #44	; 0x2c
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	4613      	mov	r3, r2
 8008a08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a12:	88fb      	ldrh	r3, [r7, #6]
 8008a14:	089b      	lsrs	r3, r3, #2
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a1a:	88fb      	ldrh	r3, [r7, #6]
 8008a1c:	f003 0303 	and.w	r3, r3, #3
 8008a20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a22:	2300      	movs	r3, #0
 8008a24:	623b      	str	r3, [r7, #32]
 8008a26:	e014      	b.n	8008a52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	3301      	adds	r3, #1
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	3301      	adds	r3, #1
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	3301      	adds	r3, #1
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	623b      	str	r3, [r7, #32]
 8008a52:	6a3a      	ldr	r2, [r7, #32]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d3e6      	bcc.n	8008a28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a5a:	8bfb      	ldrh	r3, [r7, #30]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d01e      	beq.n	8008a9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a60:	2300      	movs	r3, #0
 8008a62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f107 0310 	add.w	r3, r7, #16
 8008a70:	6812      	ldr	r2, [r2, #0]
 8008a72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	6a3b      	ldr	r3, [r7, #32]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	00db      	lsls	r3, r3, #3
 8008a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a84:	701a      	strb	r2, [r3, #0]
      i++;
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	3301      	adds	r3, #1
 8008a90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008a92:	8bfb      	ldrh	r3, [r7, #30]
 8008a94:	3b01      	subs	r3, #1
 8008a96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a98:	8bfb      	ldrh	r3, [r7, #30]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1ea      	bne.n	8008a74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	372c      	adds	r7, #44	; 0x2c
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	f003 0301 	and.w	r3, r3, #1
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
	...

08008af0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3301      	adds	r3, #1
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	4a13      	ldr	r2, [pc, #76]	; (8008b50 <USB_CoreReset+0x60>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d901      	bls.n	8008b0c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e01a      	b.n	8008b42 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	daf3      	bge.n	8008afc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	f043 0201 	orr.w	r2, r3, #1
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3301      	adds	r3, #1
 8008b28:	60fb      	str	r3, [r7, #12]
 8008b2a:	4a09      	ldr	r2, [pc, #36]	; (8008b50 <USB_CoreReset+0x60>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d901      	bls.n	8008b34 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e006      	b.n	8008b42 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d0f1      	beq.n	8008b24 <USB_CoreReset+0x34>

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	00030d40 	.word	0x00030d40

08008b54 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b54:	b084      	sub	sp, #16
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	f107 001c 	add.w	r0, r7, #28
 8008b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b70:	461a      	mov	r2, r3
 8008b72:	2300      	movs	r3, #0
 8008b74:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b86:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b92:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d018      	beq.n	8008bd8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d10a      	bne.n	8008bc2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008bba:	f043 0304 	orr.w	r3, r3, #4
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	e014      	b.n	8008bec <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008bd0:	f023 0304 	bic.w	r3, r3, #4
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	e009      	b.n	8008bec <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008be6:	f023 0304 	bic.w	r3, r3, #4
 8008bea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008bec:	2110      	movs	r1, #16
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7ff fe82 	bl	80088f8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7ff fea3 	bl	8008940 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	e015      	b.n	8008c2c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c12:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	015a      	lsls	r2, r3, #5
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c20:	461a      	mov	r2, r3
 8008c22:	2300      	movs	r3, #0
 8008c24:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d3e5      	bcc.n	8008c00 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c40:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00b      	beq.n	8008c66 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c54:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a13      	ldr	r2, [pc, #76]	; (8008ca8 <USB_HostInit+0x154>)
 8008c5a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a13      	ldr	r2, [pc, #76]	; (8008cac <USB_HostInit+0x158>)
 8008c60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008c64:	e009      	b.n	8008c7a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2280      	movs	r2, #128	; 0x80
 8008c6a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a10      	ldr	r2, [pc, #64]	; (8008cb0 <USB_HostInit+0x15c>)
 8008c70:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a0f      	ldr	r2, [pc, #60]	; (8008cb4 <USB_HostInit+0x160>)
 8008c76:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d105      	bne.n	8008c8c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	f043 0210 	orr.w	r2, r3, #16
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	699a      	ldr	r2, [r3, #24]
 8008c90:	4b09      	ldr	r3, [pc, #36]	; (8008cb8 <USB_HostInit+0x164>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ca4:	b004      	add	sp, #16
 8008ca6:	4770      	bx	lr
 8008ca8:	01000200 	.word	0x01000200
 8008cac:	00e00300 	.word	0x00e00300
 8008cb0:	00600080 	.word	0x00600080
 8008cb4:	004000e0 	.word	0x004000e0
 8008cb8:	a3200008 	.word	0xa3200008

08008cbc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008cda:	f023 0303 	bic.w	r3, r3, #3
 8008cde:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	78fb      	ldrb	r3, [r7, #3]
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	68f9      	ldr	r1, [r7, #12]
 8008cf0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008cf8:	78fb      	ldrb	r3, [r7, #3]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d107      	bne.n	8008d0e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d04:	461a      	mov	r2, r3
 8008d06:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008d0a:	6053      	str	r3, [r2, #4]
 8008d0c:	e009      	b.n	8008d22 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008d0e:	78fb      	ldrb	r3, [r7, #3]
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d106      	bne.n	8008d22 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008d20:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008d50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008d60:	2064      	movs	r0, #100	; 0x64
 8008d62:	f7f9 ff4f 	bl	8002c04 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d72:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008d74:	200a      	movs	r0, #10
 8008d76:	f7f9 ff45 	bl	8002c04 <HAL_Delay>

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008d94:	2300      	movs	r3, #0
 8008d96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008da8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d109      	bne.n	8008dc8 <USB_DriveVbus+0x44>
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d106      	bne.n	8008dc8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008dc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008dc6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dd2:	d109      	bne.n	8008de8 <USB_DriveVbus+0x64>
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d106      	bne.n	8008de8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008de2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008de6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b085      	sub	sp, #20
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	0c5b      	lsrs	r3, r3, #17
 8008e14:	f003 0303 	and.w	r3, r3, #3
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	b29b      	uxth	r3, r3
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
	...

08008e48 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	4608      	mov	r0, r1
 8008e52:	4611      	mov	r1, r2
 8008e54:	461a      	mov	r2, r3
 8008e56:	4603      	mov	r3, r0
 8008e58:	70fb      	strb	r3, [r7, #3]
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	70bb      	strb	r3, [r7, #2]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008e6a:	78fb      	ldrb	r3, [r7, #3]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e76:	461a      	mov	r2, r3
 8008e78:	f04f 33ff 	mov.w	r3, #4294967295
 8008e7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008e7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e82:	2b03      	cmp	r3, #3
 8008e84:	d87e      	bhi.n	8008f84 <USB_HC_Init+0x13c>
 8008e86:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <USB_HC_Init+0x44>)
 8008e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8c:	08008e9d 	.word	0x08008e9d
 8008e90:	08008f47 	.word	0x08008f47
 8008e94:	08008e9d 	.word	0x08008e9d
 8008e98:	08008f09 	.word	0x08008f09
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e9c:	78fb      	ldrb	r3, [r7, #3]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	f240 439d 	movw	r3, #1181	; 0x49d
 8008eae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008eb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	da10      	bge.n	8008eda <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008eb8:	78fb      	ldrb	r3, [r7, #3]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	78fa      	ldrb	r2, [r7, #3]
 8008ec8:	0151      	lsls	r1, r2, #5
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	440a      	add	r2, r1
 8008ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ed6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008ed8:	e057      	b.n	8008f8a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d051      	beq.n	8008f8a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008ee6:	78fb      	ldrb	r3, [r7, #3]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	78fa      	ldrb	r2, [r7, #3]
 8008ef6:	0151      	lsls	r1, r2, #5
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	440a      	add	r2, r1
 8008efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f04:	60d3      	str	r3, [r2, #12]
      break;
 8008f06:	e040      	b.n	8008f8a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f08:	78fb      	ldrb	r3, [r7, #3]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f14:	461a      	mov	r2, r3
 8008f16:	f240 639d 	movw	r3, #1693	; 0x69d
 8008f1a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	da34      	bge.n	8008f8e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f24:	78fb      	ldrb	r3, [r7, #3]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	78fa      	ldrb	r2, [r7, #3]
 8008f34:	0151      	lsls	r1, r2, #5
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	440a      	add	r2, r1
 8008f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f42:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008f44:	e023      	b.n	8008f8e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f46:	78fb      	ldrb	r3, [r7, #3]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f52:	461a      	mov	r2, r3
 8008f54:	f240 2325 	movw	r3, #549	; 0x225
 8008f58:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	da17      	bge.n	8008f92 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008f62:	78fb      	ldrb	r3, [r7, #3]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	78fa      	ldrb	r2, [r7, #3]
 8008f72:	0151      	lsls	r1, r2, #5
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	440a      	add	r2, r1
 8008f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f7c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008f80:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008f82:	e006      	b.n	8008f92 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	77fb      	strb	r3, [r7, #31]
      break;
 8008f88:	e004      	b.n	8008f94 <USB_HC_Init+0x14c>
      break;
 8008f8a:	bf00      	nop
 8008f8c:	e002      	b.n	8008f94 <USB_HC_Init+0x14c>
      break;
 8008f8e:	bf00      	nop
 8008f90:	e000      	b.n	8008f94 <USB_HC_Init+0x14c>
      break;
 8008f92:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f9a:	699a      	ldr	r2, [r3, #24]
 8008f9c:	78fb      	ldrb	r3, [r7, #3]
 8008f9e:	f003 030f 	and.w	r3, r3, #15
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa8:	6939      	ldr	r1, [r7, #16]
 8008faa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008fbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	da03      	bge.n	8008fce <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fca:	61bb      	str	r3, [r7, #24]
 8008fcc:	e001      	b.n	8008fd2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff ff0f 	bl	8008df6 <USB_GetHostSpeed>
 8008fd8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008fda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d106      	bne.n	8008ff0 <USB_HC_Init+0x1a8>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d003      	beq.n	8008ff0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008fec:	617b      	str	r3, [r7, #20]
 8008fee:	e001      	b.n	8008ff4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008ff4:	787b      	ldrb	r3, [r7, #1]
 8008ff6:	059b      	lsls	r3, r3, #22
 8008ff8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008ffc:	78bb      	ldrb	r3, [r7, #2]
 8008ffe:	02db      	lsls	r3, r3, #11
 8009000:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009004:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009006:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800900a:	049b      	lsls	r3, r3, #18
 800900c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009010:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009012:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009014:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009018:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800901e:	78fb      	ldrb	r3, [r7, #3]
 8009020:	0159      	lsls	r1, r3, #5
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	440b      	add	r3, r1
 8009026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800902a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009030:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009032:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009036:	2b03      	cmp	r3, #3
 8009038:	d10f      	bne.n	800905a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	4413      	add	r3, r2
 8009042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	0151      	lsls	r1, r2, #5
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	440a      	add	r2, r1
 8009050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009058:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800905a:	7ffb      	ldrb	r3, [r7, #31]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3720      	adds	r7, #32
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b08c      	sub	sp, #48	; 0x30
 8009068:	af02      	add	r7, sp, #8
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	4613      	mov	r3, r2
 8009070:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	785b      	ldrb	r3, [r3, #1]
 800907a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800907c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009080:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908a:	2b00      	cmp	r3, #0
 800908c:	d02d      	beq.n	80090ea <USB_HC_StartXfer+0x86>
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	791b      	ldrb	r3, [r3, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d129      	bne.n	80090ea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009096:	79fb      	ldrb	r3, [r7, #7]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d117      	bne.n	80090cc <USB_HC_StartXfer+0x68>
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	79db      	ldrb	r3, [r3, #7]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d003      	beq.n	80090ac <USB_HC_StartXfer+0x48>
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	79db      	ldrb	r3, [r3, #7]
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d10f      	bne.n	80090cc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	0151      	lsls	r1, r2, #5
 80090be:	6a3a      	ldr	r2, [r7, #32]
 80090c0:	440a      	add	r2, r1
 80090c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ca:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10b      	bne.n	80090ea <USB_HC_StartXfer+0x86>
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	795b      	ldrb	r3, [r3, #5]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d107      	bne.n	80090ea <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	785b      	ldrb	r3, [r3, #1]
 80090de:	4619      	mov	r1, r3
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 fa2f 	bl	8009544 <USB_DoPing>
      return HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	e0f8      	b.n	80092dc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d018      	beq.n	8009124 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	8912      	ldrh	r2, [r2, #8]
 80090fa:	4413      	add	r3, r2
 80090fc:	3b01      	subs	r3, #1
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	8912      	ldrh	r2, [r2, #8]
 8009102:	fbb3 f3f2 	udiv	r3, r3, r2
 8009106:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009108:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800910a:	8b7b      	ldrh	r3, [r7, #26]
 800910c:	429a      	cmp	r2, r3
 800910e:	d90b      	bls.n	8009128 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009110:	8b7b      	ldrh	r3, [r7, #26]
 8009112:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009114:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	8912      	ldrh	r2, [r2, #8]
 800911a:	fb02 f203 	mul.w	r2, r2, r3
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	611a      	str	r2, [r3, #16]
 8009122:	e001      	b.n	8009128 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009124:	2301      	movs	r3, #1
 8009126:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	78db      	ldrb	r3, [r3, #3]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d007      	beq.n	8009140 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009130:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	8912      	ldrh	r2, [r2, #8]
 8009136:	fb02 f203 	mul.w	r2, r2, r3
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	611a      	str	r2, [r3, #16]
 800913e:	e003      	b.n	8009148 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	695a      	ldr	r2, [r3, #20]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009152:	04d9      	lsls	r1, r3, #19
 8009154:	4b63      	ldr	r3, [pc, #396]	; (80092e4 <USB_HC_StartXfer+0x280>)
 8009156:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009158:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	7a9b      	ldrb	r3, [r3, #10]
 800915e:	075b      	lsls	r3, r3, #29
 8009160:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009164:	69f9      	ldr	r1, [r7, #28]
 8009166:	0148      	lsls	r0, r1, #5
 8009168:	6a39      	ldr	r1, [r7, #32]
 800916a:	4401      	add	r1, r0
 800916c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009170:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009172:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d009      	beq.n	800918e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	68d9      	ldr	r1, [r3, #12]
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	6a3b      	ldr	r3, [r7, #32]
 8009184:	4413      	add	r3, r2
 8009186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800918a:	460a      	mov	r2, r1
 800918c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	bf0c      	ite	eq
 800919e:	2301      	moveq	r3, #1
 80091a0:	2300      	movne	r3, #0
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69fa      	ldr	r2, [r7, #28]
 80091b6:	0151      	lsls	r1, r2, #5
 80091b8:	6a3a      	ldr	r2, [r7, #32]
 80091ba:	440a      	add	r2, r1
 80091bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	7e7b      	ldrb	r3, [r7, #25]
 80091d6:	075b      	lsls	r3, r3, #29
 80091d8:	69f9      	ldr	r1, [r7, #28]
 80091da:	0148      	lsls	r0, r1, #5
 80091dc:	6a39      	ldr	r1, [r7, #32]
 80091de:	4401      	add	r1, r0
 80091e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80091e4:	4313      	orrs	r3, r2
 80091e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091fe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	78db      	ldrb	r3, [r3, #3]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800920e:	613b      	str	r3, [r7, #16]
 8009210:	e003      	b.n	800921a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009218:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009220:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	015a      	lsls	r2, r3, #5
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	4413      	add	r3, r2
 800922a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800922e:	461a      	mov	r2, r3
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	e04e      	b.n	80092dc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	78db      	ldrb	r3, [r3, #3]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d149      	bne.n	80092da <USB_HC_StartXfer+0x276>
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d045      	beq.n	80092da <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	79db      	ldrb	r3, [r3, #7]
 8009252:	2b03      	cmp	r3, #3
 8009254:	d830      	bhi.n	80092b8 <USB_HC_StartXfer+0x254>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <USB_HC_StartXfer+0x1f8>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	0800926d 	.word	0x0800926d
 8009260:	08009291 	.word	0x08009291
 8009264:	0800926d 	.word	0x0800926d
 8009268:	08009291 	.word	0x08009291
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	3303      	adds	r3, #3
 8009272:	089b      	lsrs	r3, r3, #2
 8009274:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009276:	8afa      	ldrh	r2, [r7, #22]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	b29b      	uxth	r3, r3
 800927e:	429a      	cmp	r2, r3
 8009280:	d91c      	bls.n	80092bc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	f043 0220 	orr.w	r2, r3, #32
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	619a      	str	r2, [r3, #24]
        }
        break;
 800928e:	e015      	b.n	80092bc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	3303      	adds	r3, #3
 8009296:	089b      	lsrs	r3, r3, #2
 8009298:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800929a:	8afa      	ldrh	r2, [r7, #22]
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d90a      	bls.n	80092c0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	619a      	str	r2, [r3, #24]
        }
        break;
 80092b6:	e003      	b.n	80092c0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80092b8:	bf00      	nop
 80092ba:	e002      	b.n	80092c2 <USB_HC_StartXfer+0x25e>
        break;
 80092bc:	bf00      	nop
 80092be:	e000      	b.n	80092c2 <USB_HC_StartXfer+0x25e>
        break;
 80092c0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	68d9      	ldr	r1, [r3, #12]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	785a      	ldrb	r2, [r3, #1]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	2000      	movs	r0, #0
 80092d2:	9000      	str	r0, [sp, #0]
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7ff fb53 	bl	8008980 <USB_WritePacket>
  }

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3728      	adds	r7, #40	; 0x28
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	1ff80000 	.word	0x1ff80000

080092e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092fa:	695b      	ldr	r3, [r3, #20]
 80092fc:	b29b      	uxth	r3, r3
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr

0800930a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800930a:	b480      	push	{r7}
 800930c:	b089      	sub	sp, #36	; 0x24
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	460b      	mov	r3, r1
 8009314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	015a      	lsls	r2, r3, #5
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	4413      	add	r3, r2
 800932a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	0c9b      	lsrs	r3, r3, #18
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	015a      	lsls	r2, r3, #5
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	4413      	add	r3, r2
 8009340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	0fdb      	lsrs	r3, r3, #31
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b20      	cmp	r3, #32
 8009358:	d104      	bne.n	8009364 <USB_HC_Halt+0x5a>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	e0e8      	b.n	8009536 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <USB_HC_Halt+0x66>
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	2b02      	cmp	r3, #2
 800936e:	d173      	bne.n	8009458 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	4413      	add	r3, r2
 8009378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	0151      	lsls	r1, r2, #5
 8009382:	69ba      	ldr	r2, [r7, #24]
 8009384:	440a      	add	r2, r1
 8009386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800938a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800938e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	f003 0320 	and.w	r3, r3, #32
 8009398:	2b00      	cmp	r3, #0
 800939a:	f040 80cb 	bne.w	8009534 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d143      	bne.n	8009432 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	0151      	lsls	r1, r2, #5
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	440a      	add	r2, r1
 80093c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093c8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	697a      	ldr	r2, [r7, #20]
 80093da:	0151      	lsls	r1, r2, #5
 80093dc:	69ba      	ldr	r2, [r7, #24]
 80093de:	440a      	add	r2, r1
 80093e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	0151      	lsls	r1, r2, #5
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	440a      	add	r2, r1
 8009400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009404:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009408:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	3301      	adds	r3, #1
 800940e:	61fb      	str	r3, [r7, #28]
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009416:	d81d      	bhi.n	8009454 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	4413      	add	r3, r2
 8009420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800942a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800942e:	d0ec      	beq.n	800940a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009430:	e080      	b.n	8009534 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	4413      	add	r3, r2
 800943a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	0151      	lsls	r1, r2, #5
 8009444:	69ba      	ldr	r2, [r7, #24]
 8009446:	440a      	add	r2, r1
 8009448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800944c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009450:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009452:	e06f      	b.n	8009534 <USB_HC_Halt+0x22a>
            break;
 8009454:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009456:	e06d      	b.n	8009534 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	015a      	lsls	r2, r3, #5
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	4413      	add	r3, r2
 8009460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	0151      	lsls	r1, r2, #5
 800946a:	69ba      	ldr	r2, [r7, #24]
 800946c:	440a      	add	r2, r1
 800946e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009472:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009476:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d143      	bne.n	8009510 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	4413      	add	r3, r2
 8009490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	0151      	lsls	r1, r2, #5
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	440a      	add	r2, r1
 800949e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	015a      	lsls	r2, r3, #5
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	4413      	add	r3, r2
 80094b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	0151      	lsls	r1, r2, #5
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	440a      	add	r2, r1
 80094be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	0151      	lsls	r1, r2, #5
 80094da:	69ba      	ldr	r2, [r7, #24]
 80094dc:	440a      	add	r2, r1
 80094de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094e6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	3301      	adds	r3, #1
 80094ec:	61fb      	str	r3, [r7, #28]
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094f4:	d81d      	bhi.n	8009532 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009508:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800950c:	d0ec      	beq.n	80094e8 <USB_HC_Halt+0x1de>
 800950e:	e011      	b.n	8009534 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	4413      	add	r3, r2
 8009518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	0151      	lsls	r1, r2, #5
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	440a      	add	r2, r1
 8009526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800952a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	e000      	b.n	8009534 <USB_HC_Halt+0x22a>
          break;
 8009532:	bf00      	nop
    }
  }

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3724      	adds	r7, #36	; 0x24
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
	...

08009544 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009544:	b480      	push	{r7}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009554:	78fb      	ldrb	r3, [r7, #3]
 8009556:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009558:	2301      	movs	r3, #1
 800955a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	04da      	lsls	r2, r3, #19
 8009560:	4b15      	ldr	r3, [pc, #84]	; (80095b8 <USB_DoPing+0x74>)
 8009562:	4013      	ands	r3, r2
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	0151      	lsls	r1, r2, #5
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	440a      	add	r2, r1
 800956c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009570:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009574:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	4413      	add	r3, r2
 800957e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800958c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009594:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	015a      	lsls	r2, r3, #5
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	4413      	add	r3, r2
 800959e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095a2:	461a      	mov	r2, r3
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	371c      	adds	r7, #28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	1ff80000 	.word	0x1ff80000

080095bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7ff f935 	bl	800883c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80095d2:	2110      	movs	r1, #16
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7ff f98f 	bl	80088f8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff f9b0 	bl	8008940 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80095e0:	2300      	movs	r3, #0
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	e01f      	b.n	8009626 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009604:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800960c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	4413      	add	r3, r2
 8009616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800961a:	461a      	mov	r2, r3
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	3301      	adds	r3, #1
 8009624:	613b      	str	r3, [r7, #16]
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	2b0f      	cmp	r3, #15
 800962a:	d9dc      	bls.n	80095e6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800962c:	2300      	movs	r3, #0
 800962e:	613b      	str	r3, [r7, #16]
 8009630:	e034      	b.n	800969c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4413      	add	r3, r2
 800963a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009648:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009650:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009658:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	4413      	add	r3, r2
 8009662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009666:	461a      	mov	r2, r3
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	3301      	adds	r3, #1
 8009670:	617b      	str	r3, [r7, #20]
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009678:	d80c      	bhi.n	8009694 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	015a      	lsls	r2, r3, #5
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4413      	add	r3, r2
 8009682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800968c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009690:	d0ec      	beq.n	800966c <USB_StopHost+0xb0>
 8009692:	e000      	b.n	8009696 <USB_StopHost+0xda>
        break;
 8009694:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	3301      	adds	r3, #1
 800969a:	613b      	str	r3, [r7, #16]
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	2b0f      	cmp	r3, #15
 80096a0:	d9c7      	bls.n	8009632 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096a8:	461a      	mov	r2, r3
 80096aa:	f04f 33ff 	mov.w	r3, #4294967295
 80096ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f04f 32ff 	mov.w	r2, #4294967295
 80096b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7ff f8ae 	bl	800881a <USB_EnableGlobalInt>

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80096c8:	b590      	push	{r4, r7, lr}
 80096ca:	b089      	sub	sp, #36	; 0x24
 80096cc:	af04      	add	r7, sp, #16
 80096ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80096d0:	2301      	movs	r3, #1
 80096d2:	2202      	movs	r2, #2
 80096d4:	2102      	movs	r1, #2
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fcb8 	bl	800a04c <USBH_FindInterface>
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	2bff      	cmp	r3, #255	; 0xff
 80096e4:	d002      	beq.n	80096ec <USBH_CDC_InterfaceInit+0x24>
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d901      	bls.n	80096f0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80096ec:	2302      	movs	r3, #2
 80096ee:	e13d      	b.n	800996c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fc8d 	bl	800a014 <USBH_SelectInterface>
 80096fa:	4603      	mov	r3, r0
 80096fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009704:	2302      	movs	r3, #2
 8009706:	e131      	b.n	800996c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800970e:	2050      	movs	r0, #80	; 0x50
 8009710:	f004 fd60 	bl	800e1d4 <malloc>
 8009714:	4603      	mov	r3, r0
 8009716:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009728:	2302      	movs	r3, #2
 800972a:	e11f      	b.n	800996c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800972c:	2250      	movs	r2, #80	; 0x50
 800972e:	2100      	movs	r1, #0
 8009730:	68b8      	ldr	r0, [r7, #8]
 8009732:	f004 fd6d 	bl	800e210 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	211a      	movs	r1, #26
 800973c:	fb01 f303 	mul.w	r3, r1, r3
 8009740:	4413      	add	r3, r2
 8009742:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	b25b      	sxtb	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	da15      	bge.n	800977a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800974e:	7bfb      	ldrb	r3, [r7, #15]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	211a      	movs	r1, #26
 8009754:	fb01 f303 	mul.w	r3, r1, r3
 8009758:	4413      	add	r3, r2
 800975a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800975e:	781a      	ldrb	r2, [r3, #0]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	211a      	movs	r1, #26
 800976a:	fb01 f303 	mul.w	r3, r1, r3
 800976e:	4413      	add	r3, r2
 8009770:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009774:	881a      	ldrh	r2, [r3, #0]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	785b      	ldrb	r3, [r3, #1]
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f002 f890 	bl	800b8a6 <USBH_AllocPipe>
 8009786:	4603      	mov	r3, r0
 8009788:	461a      	mov	r2, r3
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	7819      	ldrb	r1, [r3, #0]
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	7858      	ldrb	r0, [r3, #1]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	8952      	ldrh	r2, [r2, #10]
 80097a6:	9202      	str	r2, [sp, #8]
 80097a8:	2203      	movs	r2, #3
 80097aa:	9201      	str	r2, [sp, #4]
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	4623      	mov	r3, r4
 80097b0:	4602      	mov	r2, r0
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f002 f848 	bl	800b848 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2200      	movs	r2, #0
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f004 fc35 	bl	800e030 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80097c6:	2300      	movs	r3, #0
 80097c8:	2200      	movs	r2, #0
 80097ca:	210a      	movs	r1, #10
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fc3d 	bl	800a04c <USBH_FindInterface>
 80097d2:	4603      	mov	r3, r0
 80097d4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	2bff      	cmp	r3, #255	; 0xff
 80097da:	d002      	beq.n	80097e2 <USBH_CDC_InterfaceInit+0x11a>
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d901      	bls.n	80097e6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80097e2:	2302      	movs	r3, #2
 80097e4:	e0c2      	b.n	800996c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	211a      	movs	r1, #26
 80097ec:	fb01 f303 	mul.w	r3, r1, r3
 80097f0:	4413      	add	r3, r2
 80097f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	b25b      	sxtb	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	da16      	bge.n	800982c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	211a      	movs	r1, #26
 8009804:	fb01 f303 	mul.w	r3, r1, r3
 8009808:	4413      	add	r3, r2
 800980a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800980e:	781a      	ldrb	r2, [r3, #0]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009814:	7bfb      	ldrb	r3, [r7, #15]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	211a      	movs	r1, #26
 800981a:	fb01 f303 	mul.w	r3, r1, r3
 800981e:	4413      	add	r3, r2
 8009820:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009824:	881a      	ldrh	r2, [r3, #0]
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	835a      	strh	r2, [r3, #26]
 800982a:	e015      	b.n	8009858 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	211a      	movs	r1, #26
 8009832:	fb01 f303 	mul.w	r3, r1, r3
 8009836:	4413      	add	r3, r2
 8009838:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800983c:	781a      	ldrb	r2, [r3, #0]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	211a      	movs	r1, #26
 8009848:	fb01 f303 	mul.w	r3, r1, r3
 800984c:	4413      	add	r3, r2
 800984e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009852:	881a      	ldrh	r2, [r3, #0]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	211a      	movs	r1, #26
 800985e:	fb01 f303 	mul.w	r3, r1, r3
 8009862:	4413      	add	r3, r2
 8009864:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	b25b      	sxtb	r3, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	da16      	bge.n	800989e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	211a      	movs	r1, #26
 8009876:	fb01 f303 	mul.w	r3, r1, r3
 800987a:	4413      	add	r3, r2
 800987c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009880:	781a      	ldrb	r2, [r3, #0]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009886:	7bfb      	ldrb	r3, [r7, #15]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	211a      	movs	r1, #26
 800988c:	fb01 f303 	mul.w	r3, r1, r3
 8009890:	4413      	add	r3, r2
 8009892:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009896:	881a      	ldrh	r2, [r3, #0]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	835a      	strh	r2, [r3, #26]
 800989c:	e015      	b.n	80098ca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	211a      	movs	r1, #26
 80098a4:	fb01 f303 	mul.w	r3, r1, r3
 80098a8:	4413      	add	r3, r2
 80098aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80098ae:	781a      	ldrb	r2, [r3, #0]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	211a      	movs	r1, #26
 80098ba:	fb01 f303 	mul.w	r3, r1, r3
 80098be:	4413      	add	r3, r2
 80098c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80098c4:	881a      	ldrh	r2, [r3, #0]
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	7b9b      	ldrb	r3, [r3, #14]
 80098ce:	4619      	mov	r1, r3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f001 ffe8 	bl	800b8a6 <USBH_AllocPipe>
 80098d6:	4603      	mov	r3, r0
 80098d8:	461a      	mov	r2, r3
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	7bdb      	ldrb	r3, [r3, #15]
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f001 ffde 	bl	800b8a6 <USBH_AllocPipe>
 80098ea:	4603      	mov	r3, r0
 80098ec:	461a      	mov	r2, r3
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	7b59      	ldrb	r1, [r3, #13]
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	7b98      	ldrb	r0, [r3, #14]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	8b12      	ldrh	r2, [r2, #24]
 800990a:	9202      	str	r2, [sp, #8]
 800990c:	2202      	movs	r2, #2
 800990e:	9201      	str	r2, [sp, #4]
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	4623      	mov	r3, r4
 8009914:	4602      	mov	r2, r0
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f001 ff96 	bl	800b848 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	7b19      	ldrb	r1, [r3, #12]
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	7bd8      	ldrb	r0, [r3, #15]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	8b52      	ldrh	r2, [r2, #26]
 8009934:	9202      	str	r2, [sp, #8]
 8009936:	2202      	movs	r2, #2
 8009938:	9201      	str	r2, [sp, #4]
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	4623      	mov	r3, r4
 800993e:	4602      	mov	r2, r0
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f001 ff81 	bl	800b848 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	7b5b      	ldrb	r3, [r3, #13]
 8009952:	2200      	movs	r2, #0
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f004 fb6a 	bl	800e030 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	7b1b      	ldrb	r3, [r3, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f004 fb63 	bl	800e030 <USBH_LL_SetToggle>

  return USBH_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	bd90      	pop	{r4, r7, pc}

08009974 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009982:	69db      	ldr	r3, [r3, #28]
 8009984:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00e      	beq.n	80099ac <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f001 ff76 	bl	800b886 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f001 ffa1 	bl	800b8e8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	7b1b      	ldrb	r3, [r3, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00e      	beq.n	80099d2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	7b1b      	ldrb	r3, [r3, #12]
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f001 ff63 	bl	800b886 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	7b1b      	ldrb	r3, [r3, #12]
 80099c4:	4619      	mov	r1, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f001 ff8e 	bl	800b8e8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	7b5b      	ldrb	r3, [r3, #13]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00e      	beq.n	80099f8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	7b5b      	ldrb	r3, [r3, #13]
 80099de:	4619      	mov	r1, r3
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f001 ff50 	bl	800b886 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	7b5b      	ldrb	r3, [r3, #13]
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f001 ff7b 	bl	800b8e8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00b      	beq.n	8009a1c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a0a:	69db      	ldr	r3, [r3, #28]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f004 fbe9 	bl	800e1e4 <free>
    phost->pActiveClass->pData = 0U;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a18:	2200      	movs	r2, #0
 8009a1a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a34:	69db      	ldr	r3, [r3, #28]
 8009a36:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	3340      	adds	r3, #64	; 0x40
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f8b1 	bl	8009ba6 <GetLineCoding>
 8009a44:	4603      	mov	r3, r0
 8009a46:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009a48:	7afb      	ldrb	r3, [r7, #11]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d105      	bne.n	8009a5a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a54:	2102      	movs	r1, #2
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009a5a:	7afb      	ldrb	r3, [r7, #11]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009a70:	2300      	movs	r3, #0
 8009a72:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009a84:	2b04      	cmp	r3, #4
 8009a86:	d877      	bhi.n	8009b78 <USBH_CDC_Process+0x114>
 8009a88:	a201      	add	r2, pc, #4	; (adr r2, 8009a90 <USBH_CDC_Process+0x2c>)
 8009a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8e:	bf00      	nop
 8009a90:	08009aa5 	.word	0x08009aa5
 8009a94:	08009aab 	.word	0x08009aab
 8009a98:	08009adb 	.word	0x08009adb
 8009a9c:	08009b4f 	.word	0x08009b4f
 8009aa0:	08009b5d 	.word	0x08009b5d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8009aa8:	e06d      	b.n	8009b86 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f897 	bl	8009be4 <SetLineCoding>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009aba:	7bbb      	ldrb	r3, [r7, #14]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d104      	bne.n	8009aca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009ac8:	e058      	b.n	8009b7c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d055      	beq.n	8009b7c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	2204      	movs	r2, #4
 8009ad4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009ad8:	e050      	b.n	8009b7c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	3340      	adds	r3, #64	; 0x40
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f860 	bl	8009ba6 <GetLineCoding>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009aea:	7bbb      	ldrb	r3, [r7, #14]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d126      	bne.n	8009b3e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b02:	791b      	ldrb	r3, [r3, #4]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d13b      	bne.n	8009b80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b12:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d133      	bne.n	8009b80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b22:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d12b      	bne.n	8009b80 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b30:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d124      	bne.n	8009b80 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f982 	bl	8009e40 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009b3c:	e020      	b.n	8009b80 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d01d      	beq.n	8009b80 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	2204      	movs	r2, #4
 8009b48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009b4c:	e018      	b.n	8009b80 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f867 	bl	8009c22 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f8f6 	bl	8009d46 <CDC_ProcessReception>
      break;
 8009b5a:	e014      	b.n	8009b86 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 f951 	bl	800ae06 <USBH_ClrFeature>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10a      	bne.n	8009b84 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009b76:	e005      	b.n	8009b84 <USBH_CDC_Process+0x120>

    default:
      break;
 8009b78:	bf00      	nop
 8009b7a:	e004      	b.n	8009b86 <USBH_CDC_Process+0x122>
      break;
 8009b7c:	bf00      	nop
 8009b7e:	e002      	b.n	8009b86 <USBH_CDC_Process+0x122>
      break;
 8009b80:	bf00      	nop
 8009b82:	e000      	b.n	8009b86 <USBH_CDC_Process+0x122>
      break;
 8009b84:	bf00      	nop

  }

  return status;
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b082      	sub	sp, #8
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	22a1      	movs	r2, #161	; 0xa1
 8009bb4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2221      	movs	r2, #33	; 0x21
 8009bba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2207      	movs	r2, #7
 8009bcc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2207      	movs	r2, #7
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f001 faf6 	bl	800b1c6 <USBH_CtlReq>
 8009bda:	4603      	mov	r3, r0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2221      	movs	r2, #33	; 0x21
 8009bf2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2220      	movs	r2, #32
 8009bf8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2207      	movs	r2, #7
 8009c0a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	2207      	movs	r2, #7
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f001 fad7 	bl	800b1c6 <USBH_CtlReq>
 8009c18:	4603      	mov	r3, r0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b086      	sub	sp, #24
 8009c26:	af02      	add	r7, sp, #8
 8009c28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c30:	69db      	ldr	r3, [r3, #28]
 8009c32:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c34:	2300      	movs	r3, #0
 8009c36:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d002      	beq.n	8009c48 <CDC_ProcessTransmission+0x26>
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d023      	beq.n	8009c8e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009c46:	e07a      	b.n	8009d3e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	8b12      	ldrh	r2, [r2, #24]
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d90b      	bls.n	8009c6c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	69d9      	ldr	r1, [r3, #28]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	8b1a      	ldrh	r2, [r3, #24]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	7b5b      	ldrb	r3, [r3, #13]
 8009c60:	2001      	movs	r0, #1
 8009c62:	9000      	str	r0, [sp, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f001 fdac 	bl	800b7c2 <USBH_BulkSendData>
 8009c6a:	e00b      	b.n	8009c84 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	7b5b      	ldrb	r3, [r3, #13]
 8009c7a:	2001      	movs	r0, #1
 8009c7c:	9000      	str	r0, [sp, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f001 fd9f 	bl	800b7c2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2202      	movs	r2, #2
 8009c88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009c8c:	e057      	b.n	8009d3e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	7b5b      	ldrb	r3, [r3, #13]
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f004 f9a1 	bl	800dfdc <USBH_LL_GetURBState>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009c9e:	7afb      	ldrb	r3, [r7, #11]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d136      	bne.n	8009d12 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	8b12      	ldrh	r2, [r2, #24]
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d90e      	bls.n	8009cce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	8b12      	ldrh	r2, [r2, #24]
 8009cb8:	1a9a      	subs	r2, r3, r2
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	8b12      	ldrh	r2, [r2, #24]
 8009cc6:	441a      	add	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	61da      	str	r2, [r3, #28]
 8009ccc:	e002      	b.n	8009cd4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d004      	beq.n	8009ce6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009ce4:	e006      	b.n	8009cf4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f892 	bl	8009e18 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2204      	movs	r2, #4
 8009cf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009d08:	2200      	movs	r2, #0
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	f001 fee0 	bl	800bad0 <osMessagePut>
      break;
 8009d10:	e014      	b.n	8009d3c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8009d12:	7afb      	ldrb	r3, [r7, #11]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d111      	bne.n	8009d3c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2204      	movs	r2, #4
 8009d24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009d34:	2200      	movs	r2, #0
 8009d36:	4619      	mov	r1, r3
 8009d38:	f001 feca 	bl	800bad0 <osMessagePut>
      break;
 8009d3c:	bf00      	nop
  }
}
 8009d3e:	bf00      	nop
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b086      	sub	sp, #24
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d002      	beq.n	8009d6c <CDC_ProcessReception+0x26>
 8009d66:	2b04      	cmp	r3, #4
 8009d68:	d00e      	beq.n	8009d88 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009d6a:	e051      	b.n	8009e10 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	6a19      	ldr	r1, [r3, #32]
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	8b5a      	ldrh	r2, [r3, #26]
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	7b1b      	ldrb	r3, [r3, #12]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f001 fd47 	bl	800b80c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2204      	movs	r2, #4
 8009d82:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009d86:	e043      	b.n	8009e10 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	7b1b      	ldrb	r3, [r3, #12]
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f004 f924 	bl	800dfdc <USBH_LL_GetURBState>
 8009d94:	4603      	mov	r3, r0
 8009d96:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009d98:	7cfb      	ldrb	r3, [r7, #19]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d137      	bne.n	8009e0e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	7b1b      	ldrb	r3, [r3, #12]
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f004 f887 	bl	800deb8 <USBH_LL_GetLastXferSize>
 8009daa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d016      	beq.n	8009de4 <CDC_ProcessReception+0x9e>
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	8b5b      	ldrh	r3, [r3, #26]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d910      	bls.n	8009de4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	1ad2      	subs	r2, r2, r3
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	6a1a      	ldr	r2, [r3, #32]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	441a      	add	r2, r3
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	2203      	movs	r2, #3
 8009dde:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8009de2:	e006      	b.n	8009df2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f81d 	bl	8009e2c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2204      	movs	r2, #4
 8009df6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e06:	2200      	movs	r2, #0
 8009e08:	4619      	mov	r1, r3
 8009e0a:	f001 fe61 	bl	800bad0 <osMessagePut>
      break;
 8009e0e:	bf00      	nop
  }
}
 8009e10:	bf00      	nop
 8009e12:	3718      	adds	r7, #24
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009e54:	b5b0      	push	{r4, r5, r7, lr}
 8009e56:	b090      	sub	sp, #64	; 0x40
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d101      	bne.n	8009e6c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009e68:	2302      	movs	r3, #2
 8009e6a:	e04d      	b.n	8009f08 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	79fa      	ldrb	r2, [r7, #7]
 8009e70:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 f847 	bl	8009f18 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d003      	beq.n	8009eb8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8009eb8:	4b15      	ldr	r3, [pc, #84]	; (8009f10 <USBH_Init+0xbc>)
 8009eba:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8009ebe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8009ec4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ec8:	2100      	movs	r1, #0
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f001 fdd8 	bl	800ba80 <osMessageCreate>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8009ed8:	4b0e      	ldr	r3, [pc, #56]	; (8009f14 <USBH_Init+0xc0>)
 8009eda:	f107 0414 	add.w	r4, r7, #20
 8009ede:	461d      	mov	r5, r3
 8009ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ee4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009ee8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8009eec:	f107 0314 	add.w	r3, r7, #20
 8009ef0:	68f9      	ldr	r1, [r7, #12]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f001 fd64 	bl	800b9c0 <osThreadCreate>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f003 ff1b 	bl	800dd3c <USBH_LL_Init>

  return USBH_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3740      	adds	r7, #64	; 0x40
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8009f10:	08012d80 	.word	0x08012d80
 8009f14:	08012d90 	.word	0x08012d90

08009f18 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009f24:	2300      	movs	r3, #0
 8009f26:	60fb      	str	r3, [r7, #12]
 8009f28:	e009      	b.n	8009f3e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	33e0      	adds	r3, #224	; 0xe0
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4413      	add	r3, r2
 8009f34:	2200      	movs	r2, #0
 8009f36:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	60fb      	str	r3, [r7, #12]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b0e      	cmp	r3, #14
 8009f42:	d9f2      	bls.n	8009f2a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009f44:	2300      	movs	r3, #0
 8009f46:	60fb      	str	r3, [r7, #12]
 8009f48:	e009      	b.n	8009f5e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	60fb      	str	r3, [r7, #12]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f64:	d3f1      	bcc.n	8009f4a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2240      	movs	r2, #64	; 0x40
 8009f8a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d016      	beq.n	800a002 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10e      	bne.n	8009ffc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009fe4:	1c59      	adds	r1, r3, #1
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	33de      	adds	r3, #222	; 0xde
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	73fb      	strb	r3, [r7, #15]
 8009ffa:	e004      	b.n	800a006 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	73fb      	strb	r3, [r7, #15]
 800a000:	e001      	b.n	800a006 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a002:	2302      	movs	r3, #2
 800a004:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a006:	7bfb      	ldrb	r3, [r7, #15]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3714      	adds	r7, #20
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	460b      	mov	r3, r1
 800a01e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a020:	2300      	movs	r3, #0
 800a022:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a02a:	78fa      	ldrb	r2, [r7, #3]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d204      	bcs.n	800a03a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	78fa      	ldrb	r2, [r7, #3]
 800a034:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a038:	e001      	b.n	800a03e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a03a:	2302      	movs	r3, #2
 800a03c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	4608      	mov	r0, r1
 800a056:	4611      	mov	r1, r2
 800a058:	461a      	mov	r2, r3
 800a05a:	4603      	mov	r3, r0
 800a05c:	70fb      	strb	r3, [r7, #3]
 800a05e:	460b      	mov	r3, r1
 800a060:	70bb      	strb	r3, [r7, #2]
 800a062:	4613      	mov	r3, r2
 800a064:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a074:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a076:	e025      	b.n	800a0c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a078:	7dfb      	ldrb	r3, [r7, #23]
 800a07a:	221a      	movs	r2, #26
 800a07c:	fb02 f303 	mul.w	r3, r2, r3
 800a080:	3308      	adds	r3, #8
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	4413      	add	r3, r2
 800a086:	3302      	adds	r3, #2
 800a088:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	795b      	ldrb	r3, [r3, #5]
 800a08e:	78fa      	ldrb	r2, [r7, #3]
 800a090:	429a      	cmp	r2, r3
 800a092:	d002      	beq.n	800a09a <USBH_FindInterface+0x4e>
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	2bff      	cmp	r3, #255	; 0xff
 800a098:	d111      	bne.n	800a0be <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a09e:	78ba      	ldrb	r2, [r7, #2]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d002      	beq.n	800a0aa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a0a4:	78bb      	ldrb	r3, [r7, #2]
 800a0a6:	2bff      	cmp	r3, #255	; 0xff
 800a0a8:	d109      	bne.n	800a0be <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a0ae:	787a      	ldrb	r2, [r7, #1]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d002      	beq.n	800a0ba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a0b4:	787b      	ldrb	r3, [r7, #1]
 800a0b6:	2bff      	cmp	r3, #255	; 0xff
 800a0b8:	d101      	bne.n	800a0be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a0ba:	7dfb      	ldrb	r3, [r7, #23]
 800a0bc:	e006      	b.n	800a0cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a0be:	7dfb      	ldrb	r3, [r7, #23]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d9d6      	bls.n	800a078 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a0ca:	23ff      	movs	r3, #255	; 0xff
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	371c      	adds	r7, #28
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f003 fe71 	bl	800ddc8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f003 ff8a 	bl	800e002 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b088      	sub	sp, #32
 800a0fc:	af04      	add	r7, sp, #16
 800a0fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a100:	2302      	movs	r3, #2
 800a102:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a104:	2300      	movs	r3, #0
 800a106:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b01      	cmp	r3, #1
 800a112:	d102      	bne.n	800a11a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2203      	movs	r2, #3
 800a118:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b0b      	cmp	r3, #11
 800a122:	f200 823c 	bhi.w	800a59e <USBH_Process+0x4a6>
 800a126:	a201      	add	r2, pc, #4	; (adr r2, 800a12c <USBH_Process+0x34>)
 800a128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12c:	0800a15d 	.word	0x0800a15d
 800a130:	0800a1ab 	.word	0x0800a1ab
 800a134:	0800a22f 	.word	0x0800a22f
 800a138:	0800a51d 	.word	0x0800a51d
 800a13c:	0800a59f 	.word	0x0800a59f
 800a140:	0800a2ef 	.word	0x0800a2ef
 800a144:	0800a4a7 	.word	0x0800a4a7
 800a148:	0800a341 	.word	0x0800a341
 800a14c:	0800a37d 	.word	0x0800a37d
 800a150:	0800a3b7 	.word	0x0800a3b7
 800a154:	0800a3ff 	.word	0x0800a3ff
 800a158:	0800a505 	.word	0x0800a505
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 821c 	beq.w	800a5a2 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a170:	20c8      	movs	r0, #200	; 0xc8
 800a172:	f003 ff8d 	bl	800e090 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f003 fe83 	bl	800de82 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	f001 fc94 	bl	800bad0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a1a8:	e1fb      	b.n	800a5a2 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d107      	bne.n	800a1c4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	701a      	strb	r2, [r3, #0]
 800a1c2:	e025      	b.n	800a210 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a1ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1ce:	d914      	bls.n	800a1fa <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	b2da      	uxtb	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d903      	bls.n	800a1f2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	220d      	movs	r2, #13
 800a1ee:	701a      	strb	r2, [r3, #0]
 800a1f0:	e00e      	b.n	800a210 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	701a      	strb	r2, [r3, #0]
 800a1f8:	e00a      	b.n	800a210 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a200:	f103 020a 	add.w	r2, r3, #10
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a20a:	200a      	movs	r0, #10
 800a20c:	f003 ff40 	bl	800e090 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a224:	2200      	movs	r2, #0
 800a226:	4619      	mov	r1, r3
 800a228:	f001 fc52 	bl	800bad0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a22c:	e1c0      	b.n	800a5b0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a234:	2b00      	cmp	r3, #0
 800a236:	d005      	beq.n	800a244 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a23e:	2104      	movs	r1, #4
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a244:	2064      	movs	r0, #100	; 0x64
 800a246:	f003 ff23 	bl	800e090 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f003 fdf2 	bl	800de34 <USBH_LL_GetSpeed>
 800a250:	4603      	mov	r3, r0
 800a252:	461a      	mov	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2205      	movs	r2, #5
 800a25e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a260:	2100      	movs	r1, #0
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f001 fb1f 	bl	800b8a6 <USBH_AllocPipe>
 800a268:	4603      	mov	r3, r0
 800a26a:	461a      	mov	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a270:	2180      	movs	r1, #128	; 0x80
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 fb17 	bl	800b8a6 <USBH_AllocPipe>
 800a278:	4603      	mov	r3, r0
 800a27a:	461a      	mov	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	7919      	ldrb	r1, [r3, #4]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a294:	b292      	uxth	r2, r2
 800a296:	9202      	str	r2, [sp, #8]
 800a298:	2200      	movs	r2, #0
 800a29a:	9201      	str	r2, [sp, #4]
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2280      	movs	r2, #128	; 0x80
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f001 fad0 	bl	800b848 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	7959      	ldrb	r1, [r3, #5]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a2bc:	b292      	uxth	r2, r2
 800a2be:	9202      	str	r2, [sp, #8]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	9201      	str	r2, [sp, #4]
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f001 fabc 	bl	800b848 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	f001 fbf2 	bl	800bad0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a2ec:	e160      	b.n	800a5b0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f964 	bl	800a5bc <USBH_HandleEnum>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a2f8:	7bbb      	ldrb	r3, [r7, #14]
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f040 8152 	bne.w	800a5a6 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a310:	2b01      	cmp	r3, #1
 800a312:	d103      	bne.n	800a31c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2208      	movs	r2, #8
 800a318:	701a      	strb	r2, [r3, #0]
 800a31a:	e002      	b.n	800a322 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2207      	movs	r2, #7
 800a320:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2205      	movs	r2, #5
 800a326:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a336:	2200      	movs	r2, #0
 800a338:	4619      	mov	r1, r3
 800a33a:	f001 fbc9 	bl	800bad0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a33e:	e132      	b.n	800a5a6 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a346:	2b00      	cmp	r3, #0
 800a348:	f000 812f 	beq.w	800a5aa <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a352:	2101      	movs	r1, #1
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2208      	movs	r2, #8
 800a35c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2205      	movs	r2, #5
 800a362:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a372:	2200      	movs	r2, #0
 800a374:	4619      	mov	r1, r3
 800a376:	f001 fbab 	bl	800bad0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a37a:	e116      	b.n	800a5aa <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a382:	b29b      	uxth	r3, r3
 800a384:	4619      	mov	r1, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fcf6 	bl	800ad78 <USBH_SetCfg>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d102      	bne.n	800a398 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2209      	movs	r2, #9
 800a396:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	f001 fb8e 	bl	800bad0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a3b4:	e0fc      	b.n	800a5b0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a3bc:	f003 0320 	and.w	r3, r3, #32
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00a      	beq.n	800a3da <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a3c4:	2101      	movs	r1, #1
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fcf9 	bl	800adbe <USBH_SetFeature>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d106      	bne.n	800a3e0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	220a      	movs	r2, #10
 800a3d6:	701a      	strb	r2, [r3, #0]
 800a3d8:	e002      	b.n	800a3e0 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	220a      	movs	r2, #10
 800a3de:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	f001 fb6a 	bl	800bad0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a3fc:	e0d8      	b.n	800a5b0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a404:	2b00      	cmp	r3, #0
 800a406:	d03f      	beq.n	800a488 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a410:	2300      	movs	r3, #0
 800a412:	73fb      	strb	r3, [r7, #15]
 800a414:	e016      	b.n	800a444 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a416:	7bfa      	ldrb	r2, [r7, #15]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	32de      	adds	r2, #222	; 0xde
 800a41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a420:	791a      	ldrb	r2, [r3, #4]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a428:	429a      	cmp	r2, r3
 800a42a:	d108      	bne.n	800a43e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a42c:	7bfa      	ldrb	r2, [r7, #15]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	32de      	adds	r2, #222	; 0xde
 800a432:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a43c:	e005      	b.n	800a44a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a43e:	7bfb      	ldrb	r3, [r7, #15]
 800a440:	3301      	adds	r3, #1
 800a442:	73fb      	strb	r3, [r7, #15]
 800a444:	7bfb      	ldrb	r3, [r7, #15]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d0e5      	beq.n	800a416 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a450:	2b00      	cmp	r3, #0
 800a452:	d016      	beq.n	800a482 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	4798      	blx	r3
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d109      	bne.n	800a47a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2206      	movs	r2, #6
 800a46a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a472:	2103      	movs	r1, #3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	4798      	blx	r3
 800a478:	e006      	b.n	800a488 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	220d      	movs	r2, #13
 800a47e:	701a      	strb	r2, [r3, #0]
 800a480:	e002      	b.n	800a488 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	220d      	movs	r2, #13
 800a486:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2205      	movs	r2, #5
 800a48c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a49c:	2200      	movs	r2, #0
 800a49e:	4619      	mov	r1, r3
 800a4a0:	f001 fb16 	bl	800bad0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a4a4:	e084      	b.n	800a5b0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d017      	beq.n	800a4e0 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	4798      	blx	r3
 800a4bc:	4603      	mov	r3, r0
 800a4be:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a4c0:	7bbb      	ldrb	r3, [r7, #14]
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d103      	bne.n	800a4d0 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	220b      	movs	r2, #11
 800a4cc:	701a      	strb	r2, [r3, #0]
 800a4ce:	e00a      	b.n	800a4e6 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800a4d0:	7bbb      	ldrb	r3, [r7, #14]
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d106      	bne.n	800a4e6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	220d      	movs	r2, #13
 800a4dc:	701a      	strb	r2, [r3, #0]
 800a4de:	e002      	b.n	800a4e6 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	220d      	movs	r2, #13
 800a4e4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2205      	movs	r2, #5
 800a4ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f001 fae7 	bl	800bad0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a502:	e055      	b.n	800a5b0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d04f      	beq.n	800a5ae <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a514:	695b      	ldr	r3, [r3, #20]
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	4798      	blx	r3
      }
      break;
 800a51a:	e048      	b.n	800a5ae <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7ff fcf7 	bl	8009f18 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a530:	2b00      	cmp	r3, #0
 800a532:	d009      	beq.n	800a548 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d005      	beq.n	800a55e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a558:	2105      	movs	r1, #5
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a564:	b2db      	uxtb	r3, r3
 800a566:	2b01      	cmp	r3, #1
 800a568:	d107      	bne.n	800a57a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7ff fdb0 	bl	800a0d8 <USBH_Start>
 800a578:	e002      	b.n	800a580 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f003 fc24 	bl	800ddc8 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a594:	2200      	movs	r2, #0
 800a596:	4619      	mov	r1, r3
 800a598:	f001 fa9a 	bl	800bad0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a59c:	e008      	b.n	800a5b0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a59e:	bf00      	nop
 800a5a0:	e006      	b.n	800a5b0 <USBH_Process+0x4b8>
      break;
 800a5a2:	bf00      	nop
 800a5a4:	e004      	b.n	800a5b0 <USBH_Process+0x4b8>
      break;
 800a5a6:	bf00      	nop
 800a5a8:	e002      	b.n	800a5b0 <USBH_Process+0x4b8>
    break;
 800a5aa:	bf00      	nop
 800a5ac:	e000      	b.n	800a5b0 <USBH_Process+0x4b8>
      break;
 800a5ae:	bf00      	nop
  }
  return USBH_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop

0800a5bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af04      	add	r7, sp, #16
 800a5c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	785b      	ldrb	r3, [r3, #1]
 800a5d0:	2b07      	cmp	r3, #7
 800a5d2:	f200 8208 	bhi.w	800a9e6 <USBH_HandleEnum+0x42a>
 800a5d6:	a201      	add	r2, pc, #4	; (adr r2, 800a5dc <USBH_HandleEnum+0x20>)
 800a5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5dc:	0800a5fd 	.word	0x0800a5fd
 800a5e0:	0800a6bb 	.word	0x0800a6bb
 800a5e4:	0800a725 	.word	0x0800a725
 800a5e8:	0800a7b3 	.word	0x0800a7b3
 800a5ec:	0800a81d 	.word	0x0800a81d
 800a5f0:	0800a88d 	.word	0x0800a88d
 800a5f4:	0800a929 	.word	0x0800a929
 800a5f8:	0800a9a7 	.word	0x0800a9a7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a5fc:	2108      	movs	r1, #8
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 faea 	bl	800abd8 <USBH_Get_DevDesc>
 800a604:	4603      	mov	r3, r0
 800a606:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a608:	7bbb      	ldrb	r3, [r7, #14]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d130      	bne.n	800a670 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	7919      	ldrb	r1, [r3, #4]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a632:	b292      	uxth	r2, r2
 800a634:	9202      	str	r2, [sp, #8]
 800a636:	2200      	movs	r2, #0
 800a638:	9201      	str	r2, [sp, #4]
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	4603      	mov	r3, r0
 800a63e:	2280      	movs	r2, #128	; 0x80
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f001 f901 	bl	800b848 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	7959      	ldrb	r1, [r3, #5]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a65a:	b292      	uxth	r2, r2
 800a65c:	9202      	str	r2, [sp, #8]
 800a65e:	2200      	movs	r2, #0
 800a660:	9201      	str	r2, [sp, #4]
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	4603      	mov	r3, r0
 800a666:	2200      	movs	r2, #0
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f001 f8ed 	bl	800b848 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a66e:	e1bc      	b.n	800a9ea <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a670:	7bbb      	ldrb	r3, [r7, #14]
 800a672:	2b03      	cmp	r3, #3
 800a674:	f040 81b9 	bne.w	800a9ea <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a67e:	3301      	adds	r3, #1
 800a680:	b2da      	uxtb	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a68e:	2b03      	cmp	r3, #3
 800a690:	d903      	bls.n	800a69a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	220d      	movs	r2, #13
 800a696:	701a      	strb	r2, [r3, #0]
      break;
 800a698:	e1a7      	b.n	800a9ea <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	795b      	ldrb	r3, [r3, #5]
 800a69e:	4619      	mov	r1, r3
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f001 f921 	bl	800b8e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	791b      	ldrb	r3, [r3, #4]
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f001 f91b 	bl	800b8e8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	701a      	strb	r2, [r3, #0]
      break;
 800a6b8:	e197      	b.n	800a9ea <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a6ba:	2112      	movs	r1, #18
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fa8b 	bl	800abd8 <USBH_Get_DevDesc>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6c6:	7bbb      	ldrb	r3, [r7, #14]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d103      	bne.n	800a6d4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a6d2:	e18c      	b.n	800a9ee <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6d4:	7bbb      	ldrb	r3, [r7, #14]
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	f040 8189 	bne.w	800a9ee <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6f2:	2b03      	cmp	r3, #3
 800a6f4:	d903      	bls.n	800a6fe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	220d      	movs	r2, #13
 800a6fa:	701a      	strb	r2, [r3, #0]
      break;
 800a6fc:	e177      	b.n	800a9ee <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	795b      	ldrb	r3, [r3, #5]
 800a702:	4619      	mov	r1, r3
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f001 f8ef 	bl	800b8e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	791b      	ldrb	r3, [r3, #4]
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f001 f8e9 	bl	800b8e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	701a      	strb	r2, [r3, #0]
      break;
 800a722:	e164      	b.n	800a9ee <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a724:	2101      	movs	r1, #1
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fb02 	bl	800ad30 <USBH_SetAddress>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a730:	7bbb      	ldrb	r3, [r7, #14]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d132      	bne.n	800a79c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a736:	2002      	movs	r0, #2
 800a738:	f003 fcaa 	bl	800e090 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2203      	movs	r2, #3
 800a748:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	7919      	ldrb	r1, [r3, #4]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a75e:	b292      	uxth	r2, r2
 800a760:	9202      	str	r2, [sp, #8]
 800a762:	2200      	movs	r2, #0
 800a764:	9201      	str	r2, [sp, #4]
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	4603      	mov	r3, r0
 800a76a:	2280      	movs	r2, #128	; 0x80
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f001 f86b 	bl	800b848 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	7959      	ldrb	r1, [r3, #5]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a786:	b292      	uxth	r2, r2
 800a788:	9202      	str	r2, [sp, #8]
 800a78a:	2200      	movs	r2, #0
 800a78c:	9201      	str	r2, [sp, #4]
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	4603      	mov	r3, r0
 800a792:	2200      	movs	r2, #0
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f001 f857 	bl	800b848 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a79a:	e12a      	b.n	800a9f2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a79c:	7bbb      	ldrb	r3, [r7, #14]
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	f040 8127 	bne.w	800a9f2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	220d      	movs	r2, #13
 800a7a8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	705a      	strb	r2, [r3, #1]
      break;
 800a7b0:	e11f      	b.n	800a9f2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a7b2:	2109      	movs	r1, #9
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fa37 	bl	800ac28 <USBH_Get_CfgDesc>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d103      	bne.n	800a7cc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2204      	movs	r2, #4
 800a7c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a7ca:	e114      	b.n	800a9f6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	f040 8111 	bne.w	800a9f6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7da:	3301      	adds	r3, #1
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7ea:	2b03      	cmp	r3, #3
 800a7ec:	d903      	bls.n	800a7f6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	220d      	movs	r2, #13
 800a7f2:	701a      	strb	r2, [r3, #0]
      break;
 800a7f4:	e0ff      	b.n	800a9f6 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	795b      	ldrb	r3, [r3, #5]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f001 f873 	bl	800b8e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	791b      	ldrb	r3, [r3, #4]
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f001 f86d 	bl	800b8e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	701a      	strb	r2, [r3, #0]
      break;
 800a81a:	e0ec      	b.n	800a9f6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f9ff 	bl	800ac28 <USBH_Get_CfgDesc>
 800a82a:	4603      	mov	r3, r0
 800a82c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a82e:	7bbb      	ldrb	r3, [r7, #14]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d103      	bne.n	800a83c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2205      	movs	r2, #5
 800a838:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a83a:	e0de      	b.n	800a9fa <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a83c:	7bbb      	ldrb	r3, [r7, #14]
 800a83e:	2b03      	cmp	r3, #3
 800a840:	f040 80db 	bne.w	800a9fa <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a84a:	3301      	adds	r3, #1
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d903      	bls.n	800a866 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	220d      	movs	r2, #13
 800a862:	701a      	strb	r2, [r3, #0]
      break;
 800a864:	e0c9      	b.n	800a9fa <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	795b      	ldrb	r3, [r3, #5]
 800a86a:	4619      	mov	r1, r3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f001 f83b 	bl	800b8e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	791b      	ldrb	r3, [r3, #4]
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f001 f835 	bl	800b8e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	701a      	strb	r2, [r3, #0]
      break;
 800a88a:	e0b6      	b.n	800a9fa <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a892:	2b00      	cmp	r3, #0
 800a894:	d036      	beq.n	800a904 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a8a2:	23ff      	movs	r3, #255	; 0xff
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f9e3 	bl	800ac70 <USBH_Get_StringDesc>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a8ae:	7bbb      	ldrb	r3, [r7, #14]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d111      	bne.n	800a8d8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2206      	movs	r2, #6
 800a8b8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2205      	movs	r2, #5
 800a8be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f001 f8fd 	bl	800bad0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a8d6:	e092      	b.n	800a9fe <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8d8:	7bbb      	ldrb	r3, [r7, #14]
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	f040 808f 	bne.w	800a9fe <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2206      	movs	r2, #6
 800a8e4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2205      	movs	r2, #5
 800a8ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	f001 f8e7 	bl	800bad0 <osMessagePut>
      break;
 800a902:	e07c      	b.n	800a9fe <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2206      	movs	r2, #6
 800a908:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2205      	movs	r2, #5
 800a90e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a91e:	2200      	movs	r2, #0
 800a920:	4619      	mov	r1, r3
 800a922:	f001 f8d5 	bl	800bad0 <osMessagePut>
      break;
 800a926:	e06a      	b.n	800a9fe <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d027      	beq.n	800a982 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a93e:	23ff      	movs	r3, #255	; 0xff
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f995 	bl	800ac70 <USBH_Get_StringDesc>
 800a946:	4603      	mov	r3, r0
 800a948:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a94a:	7bbb      	ldrb	r3, [r7, #14]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d103      	bne.n	800a958 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2207      	movs	r2, #7
 800a954:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a956:	e054      	b.n	800aa02 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a958:	7bbb      	ldrb	r3, [r7, #14]
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d151      	bne.n	800aa02 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2207      	movs	r2, #7
 800a962:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2205      	movs	r2, #5
 800a968:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a978:	2200      	movs	r2, #0
 800a97a:	4619      	mov	r1, r3
 800a97c:	f001 f8a8 	bl	800bad0 <osMessagePut>
      break;
 800a980:	e03f      	b.n	800aa02 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2207      	movs	r2, #7
 800a986:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2205      	movs	r2, #5
 800a98c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a99c:	2200      	movs	r2, #0
 800a99e:	4619      	mov	r1, r3
 800a9a0:	f001 f896 	bl	800bad0 <osMessagePut>
      break;
 800a9a4:	e02d      	b.n	800aa02 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d017      	beq.n	800a9e0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a9bc:	23ff      	movs	r3, #255	; 0xff
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f956 	bl	800ac70 <USBH_Get_StringDesc>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d102      	bne.n	800a9d4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a9d2:	e018      	b.n	800aa06 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9d4:	7bbb      	ldrb	r3, [r7, #14]
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d115      	bne.n	800aa06 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a9de:	e012      	b.n	800aa06 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a9e4:	e00f      	b.n	800aa06 <USBH_HandleEnum+0x44a>

    default:
      break;
 800a9e6:	bf00      	nop
 800a9e8:	e00e      	b.n	800aa08 <USBH_HandleEnum+0x44c>
      break;
 800a9ea:	bf00      	nop
 800a9ec:	e00c      	b.n	800aa08 <USBH_HandleEnum+0x44c>
      break;
 800a9ee:	bf00      	nop
 800a9f0:	e00a      	b.n	800aa08 <USBH_HandleEnum+0x44c>
      break;
 800a9f2:	bf00      	nop
 800a9f4:	e008      	b.n	800aa08 <USBH_HandleEnum+0x44c>
      break;
 800a9f6:	bf00      	nop
 800a9f8:	e006      	b.n	800aa08 <USBH_HandleEnum+0x44c>
      break;
 800a9fa:	bf00      	nop
 800a9fc:	e004      	b.n	800aa08 <USBH_HandleEnum+0x44c>
      break;
 800a9fe:	bf00      	nop
 800aa00:	e002      	b.n	800aa08 <USBH_HandleEnum+0x44c>
      break;
 800aa02:	bf00      	nop
 800aa04:	e000      	b.n	800aa08 <USBH_HandleEnum+0x44c>
      break;
 800aa06:	bf00      	nop
  }
  return Status;
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop

0800aa14 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800aa26:	bf00      	nop
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b082      	sub	sp, #8
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa40:	1c5a      	adds	r2, r3, #1
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 f804 	bl	800aa56 <USBH_HandleSof>
}
 800aa4e:	bf00      	nop
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b082      	sub	sp, #8
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b0b      	cmp	r3, #11
 800aa66:	d10a      	bne.n	800aa7e <USBH_HandleSof+0x28>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d005      	beq.n	800aa7e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	4798      	blx	r3
  }
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b082      	sub	sp, #8
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2201      	movs	r2, #1
 800aa92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aaaa:	2200      	movs	r2, #0
 800aaac:	4619      	mov	r1, r3
 800aaae:	f001 f80f 	bl	800bad0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800aab2:	bf00      	nop
}
 800aab4:	3708      	adds	r7, #8
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aaba:	b480      	push	{r7}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800aaca:	bf00      	nop
}
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2201      	movs	r2, #1
 800aae2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	f000 ffdf 	bl	800bad0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f003 f95e 	bl	800ddfe <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	791b      	ldrb	r3, [r3, #4]
 800ab46:	4619      	mov	r1, r3
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 fecd 	bl	800b8e8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	795b      	ldrb	r3, [r3, #5]
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fec7 	bl	800b8e8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab6e:	2200      	movs	r2, #0
 800ab70:	4619      	mov	r1, r3
 800ab72:	f000 ffad 	bl	800bad0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800ab8e:	f107 030c 	add.w	r3, r7, #12
 800ab92:	f04f 32ff 	mov.w	r2, #4294967295
 800ab96:	4618      	mov	r0, r3
 800ab98:	f000 ffda 	bl	800bb50 <osMessageGet>
    if (event.status == osEventMessage)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2b10      	cmp	r3, #16
 800aba0:	d1f2      	bne.n	800ab88 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f7ff faa8 	bl	800a0f8 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800aba8:	e7ee      	b.n	800ab88 <USBH_Process_OS+0x8>

0800abaa <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b082      	sub	sp, #8
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2201      	movs	r2, #1
 800abb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800abc6:	2200      	movs	r2, #0
 800abc8:	4619      	mov	r1, r3
 800abca:	f000 ff81 	bl	800bad0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af02      	add	r7, sp, #8
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	460b      	mov	r3, r1
 800abe2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800abea:	78fb      	ldrb	r3, [r7, #3]
 800abec:	b29b      	uxth	r3, r3
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	4613      	mov	r3, r2
 800abf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abf6:	2100      	movs	r1, #0
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 f864 	bl	800acc6 <USBH_GetDescriptor>
 800abfe:	4603      	mov	r3, r0
 800ac00:	73fb      	strb	r3, [r7, #15]
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10a      	bne.n	800ac1e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ac14:	78fa      	ldrb	r2, [r7, #3]
 800ac16:	b292      	uxth	r2, r2
 800ac18:	4619      	mov	r1, r3
 800ac1a:	f000 f918 	bl	800ae4e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b086      	sub	sp, #24
 800ac2c:	af02      	add	r7, sp, #8
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	331c      	adds	r3, #28
 800ac38:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ac3a:	887b      	ldrh	r3, [r7, #2]
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac44:	2100      	movs	r1, #0
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f83d 	bl	800acc6 <USBH_GetDescriptor>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	72fb      	strb	r3, [r7, #11]
 800ac50:	7afb      	ldrb	r3, [r7, #11]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d107      	bne.n	800ac66 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ac5c:	887a      	ldrh	r2, [r7, #2]
 800ac5e:	68f9      	ldr	r1, [r7, #12]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 f964 	bl	800af2e <USBH_ParseCfgDesc>
  }

  return status;
 800ac66:	7afb      	ldrb	r3, [r7, #11]
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af02      	add	r7, sp, #8
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	607a      	str	r2, [r7, #4]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	72fb      	strb	r3, [r7, #11]
 800ac80:	4613      	mov	r3, r2
 800ac82:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ac84:	7afb      	ldrb	r3, [r7, #11]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ac8c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ac94:	893b      	ldrh	r3, [r7, #8]
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f000 f812 	bl	800acc6 <USBH_GetDescriptor>
 800aca2:	4603      	mov	r3, r0
 800aca4:	75fb      	strb	r3, [r7, #23]
 800aca6:	7dfb      	ldrb	r3, [r7, #23]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d107      	bne.n	800acbc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800acb2:	893a      	ldrh	r2, [r7, #8]
 800acb4:	6879      	ldr	r1, [r7, #4]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 fa37 	bl	800b12a <USBH_ParseStringDesc>
  }

  return status;
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3718      	adds	r7, #24
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	60f8      	str	r0, [r7, #12]
 800acce:	607b      	str	r3, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	72fb      	strb	r3, [r7, #11]
 800acd4:	4613      	mov	r3, r2
 800acd6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	789b      	ldrb	r3, [r3, #2]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d11c      	bne.n	800ad1a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ace0:	7afb      	ldrb	r3, [r7, #11]
 800ace2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2206      	movs	r2, #6
 800acf0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	893a      	ldrh	r2, [r7, #8]
 800acf6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800acf8:	893b      	ldrh	r3, [r7, #8]
 800acfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800acfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad02:	d104      	bne.n	800ad0e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f240 4209 	movw	r2, #1033	; 0x409
 800ad0a:	829a      	strh	r2, [r3, #20]
 800ad0c:	e002      	b.n	800ad14 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2200      	movs	r2, #0
 800ad12:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	8b3a      	ldrh	r2, [r7, #24]
 800ad18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ad1a:	8b3b      	ldrh	r3, [r7, #24]
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f000 fa50 	bl	800b1c6 <USBH_CtlReq>
 800ad26:	4603      	mov	r3, r0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	789b      	ldrb	r3, [r3, #2]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d10f      	bne.n	800ad64 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2205      	movs	r2, #5
 800ad4e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ad50:	78fb      	ldrb	r3, [r7, #3]
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ad64:	2200      	movs	r2, #0
 800ad66:	2100      	movs	r1, #0
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fa2c 	bl	800b1c6 <USBH_CtlReq>
 800ad6e:	4603      	mov	r3, r0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	789b      	ldrb	r3, [r3, #2]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d10e      	bne.n	800adaa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2209      	movs	r2, #9
 800ad96:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	887a      	ldrh	r2, [r7, #2]
 800ad9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800adaa:	2200      	movs	r2, #0
 800adac:	2100      	movs	r1, #0
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fa09 	bl	800b1c6 <USBH_CtlReq>
 800adb4:	4603      	mov	r3, r0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b082      	sub	sp, #8
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	460b      	mov	r3, r1
 800adc8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	789b      	ldrb	r3, [r3, #2]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d10f      	bne.n	800adf2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2203      	movs	r2, #3
 800addc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800adde:	78fb      	ldrb	r3, [r7, #3]
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800adf2:	2200      	movs	r2, #0
 800adf4:	2100      	movs	r1, #0
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f9e5 	bl	800b1c6 <USBH_CtlReq>
 800adfc:	4603      	mov	r3, r0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b082      	sub	sp, #8
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
 800ae0e:	460b      	mov	r3, r1
 800ae10:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	789b      	ldrb	r3, [r3, #2]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d10f      	bne.n	800ae3a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2202      	movs	r2, #2
 800ae1e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ae2c:	78fb      	ldrb	r3, [r7, #3]
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f9c1 	bl	800b1c6 <USBH_CtlReq>
 800ae44:	4603      	mov	r3, r0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b085      	sub	sp, #20
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	60f8      	str	r0, [r7, #12]
 800ae56:	60b9      	str	r1, [r7, #8]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	781a      	ldrb	r2, [r3, #0]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	785a      	ldrb	r2, [r3, #1]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	3302      	adds	r3, #2
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	3303      	adds	r3, #3
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	021b      	lsls	r3, r3, #8
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	4313      	orrs	r3, r2
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	791a      	ldrb	r2, [r3, #4]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	795a      	ldrb	r2, [r3, #5]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	799a      	ldrb	r2, [r3, #6]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	79da      	ldrb	r2, [r3, #7]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800aea8:	88fb      	ldrh	r3, [r7, #6]
 800aeaa:	2b08      	cmp	r3, #8
 800aeac:	d939      	bls.n	800af22 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	3308      	adds	r3, #8
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	3309      	adds	r3, #9
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	021b      	lsls	r3, r3, #8
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	4313      	orrs	r3, r2
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	330a      	adds	r3, #10
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	330b      	adds	r3, #11
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	021b      	lsls	r3, r3, #8
 800aedc:	b29b      	uxth	r3, r3
 800aede:	4313      	orrs	r3, r2
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	330c      	adds	r3, #12
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	330d      	adds	r3, #13
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	021b      	lsls	r3, r3, #8
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	4313      	orrs	r3, r2
 800aefc:	b29a      	uxth	r2, r3
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	7b9a      	ldrb	r2, [r3, #14]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	7bda      	ldrb	r2, [r3, #15]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	7c1a      	ldrb	r2, [r3, #16]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	7c5a      	ldrb	r2, [r3, #17]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	745a      	strb	r2, [r3, #17]
  }
}
 800af22:	bf00      	nop
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b08a      	sub	sp, #40	; 0x28
 800af32:	af00      	add	r7, sp, #0
 800af34:	60f8      	str	r0, [r7, #12]
 800af36:	60b9      	str	r1, [r7, #8]
 800af38:	4613      	mov	r3, r2
 800af3a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800af40:	2300      	movs	r3, #0
 800af42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800af46:	2300      	movs	r3, #0
 800af48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	781a      	ldrb	r2, [r3, #0]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	785a      	ldrb	r2, [r3, #1]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	3302      	adds	r3, #2
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	b29a      	uxth	r2, r3
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	3303      	adds	r3, #3
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	b29b      	uxth	r3, r3
 800af70:	021b      	lsls	r3, r3, #8
 800af72:	b29b      	uxth	r3, r3
 800af74:	4313      	orrs	r3, r2
 800af76:	b29a      	uxth	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	791a      	ldrb	r2, [r3, #4]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	795a      	ldrb	r2, [r3, #5]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	799a      	ldrb	r2, [r3, #6]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	79da      	ldrb	r2, [r3, #7]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	7a1a      	ldrb	r2, [r3, #8]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800afa4:	88fb      	ldrh	r3, [r7, #6]
 800afa6:	2b09      	cmp	r3, #9
 800afa8:	d95f      	bls.n	800b06a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800afaa:	2309      	movs	r3, #9
 800afac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800afae:	2300      	movs	r3, #0
 800afb0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800afb2:	e051      	b.n	800b058 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800afb4:	f107 0316 	add.w	r3, r7, #22
 800afb8:	4619      	mov	r1, r3
 800afba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afbc:	f000 f8e8 	bl	800b190 <USBH_GetNextDesc>
 800afc0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800afc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc4:	785b      	ldrb	r3, [r3, #1]
 800afc6:	2b04      	cmp	r3, #4
 800afc8:	d146      	bne.n	800b058 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800afca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800afce:	221a      	movs	r2, #26
 800afd0:	fb02 f303 	mul.w	r3, r2, r3
 800afd4:	3308      	adds	r3, #8
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	4413      	add	r3, r2
 800afda:	3302      	adds	r3, #2
 800afdc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800afde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afe0:	69f8      	ldr	r0, [r7, #28]
 800afe2:	f000 f846 	bl	800b072 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800afe6:	2300      	movs	r3, #0
 800afe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800afec:	2300      	movs	r3, #0
 800afee:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aff0:	e022      	b.n	800b038 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aff2:	f107 0316 	add.w	r3, r7, #22
 800aff6:	4619      	mov	r1, r3
 800aff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800affa:	f000 f8c9 	bl	800b190 <USBH_GetNextDesc>
 800affe:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b002:	785b      	ldrb	r3, [r3, #1]
 800b004:	2b05      	cmp	r3, #5
 800b006:	d117      	bne.n	800b038 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b00c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b010:	3201      	adds	r2, #1
 800b012:	00d2      	lsls	r2, r2, #3
 800b014:	211a      	movs	r1, #26
 800b016:	fb01 f303 	mul.w	r3, r1, r3
 800b01a:	4413      	add	r3, r2
 800b01c:	3308      	adds	r3, #8
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	4413      	add	r3, r2
 800b022:	3304      	adds	r3, #4
 800b024:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b026:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b028:	69b8      	ldr	r0, [r7, #24]
 800b02a:	f000 f851 	bl	800b0d0 <USBH_ParseEPDesc>
            ep_ix++;
 800b02e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b032:	3301      	adds	r3, #1
 800b034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	791b      	ldrb	r3, [r3, #4]
 800b03c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b040:	429a      	cmp	r2, r3
 800b042:	d204      	bcs.n	800b04e <USBH_ParseCfgDesc+0x120>
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	885a      	ldrh	r2, [r3, #2]
 800b048:	8afb      	ldrh	r3, [r7, #22]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d8d1      	bhi.n	800aff2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b04e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b052:	3301      	adds	r3, #1
 800b054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b058:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d804      	bhi.n	800b06a <USBH_ParseCfgDesc+0x13c>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	885a      	ldrh	r2, [r3, #2]
 800b064:	8afb      	ldrh	r3, [r7, #22]
 800b066:	429a      	cmp	r2, r3
 800b068:	d8a4      	bhi.n	800afb4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b06a:	bf00      	nop
 800b06c:	3728      	adds	r7, #40	; 0x28
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b072:	b480      	push	{r7}
 800b074:	b083      	sub	sp, #12
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	781a      	ldrb	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	785a      	ldrb	r2, [r3, #1]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	789a      	ldrb	r2, [r3, #2]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	78da      	ldrb	r2, [r3, #3]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	791a      	ldrb	r2, [r3, #4]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	795a      	ldrb	r2, [r3, #5]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	799a      	ldrb	r2, [r3, #6]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	79da      	ldrb	r2, [r3, #7]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	7a1a      	ldrb	r2, [r3, #8]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	721a      	strb	r2, [r3, #8]
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	781a      	ldrb	r2, [r3, #0]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	785a      	ldrb	r2, [r3, #1]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	789a      	ldrb	r2, [r3, #2]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	78da      	ldrb	r2, [r3, #3]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	3304      	adds	r3, #4
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	b29a      	uxth	r2, r3
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	3305      	adds	r3, #5
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	b29b      	uxth	r3, r3
 800b10a:	021b      	lsls	r3, r3, #8
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	4313      	orrs	r3, r2
 800b110:	b29a      	uxth	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	799a      	ldrb	r2, [r3, #6]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	719a      	strb	r2, [r3, #6]
}
 800b11e:	bf00      	nop
 800b120:	370c      	adds	r7, #12
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b12a:	b480      	push	{r7}
 800b12c:	b087      	sub	sp, #28
 800b12e:	af00      	add	r7, sp, #0
 800b130:	60f8      	str	r0, [r7, #12]
 800b132:	60b9      	str	r1, [r7, #8]
 800b134:	4613      	mov	r3, r2
 800b136:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	3301      	adds	r3, #1
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d120      	bne.n	800b184 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	1e9a      	subs	r2, r3, #2
 800b148:	88fb      	ldrh	r3, [r7, #6]
 800b14a:	4293      	cmp	r3, r2
 800b14c:	bf28      	it	cs
 800b14e:	4613      	movcs	r3, r2
 800b150:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3302      	adds	r3, #2
 800b156:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b158:	2300      	movs	r3, #0
 800b15a:	82fb      	strh	r3, [r7, #22]
 800b15c:	e00b      	b.n	800b176 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b15e:	8afb      	ldrh	r3, [r7, #22]
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	4413      	add	r3, r2
 800b164:	781a      	ldrb	r2, [r3, #0]
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	3301      	adds	r3, #1
 800b16e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b170:	8afb      	ldrh	r3, [r7, #22]
 800b172:	3302      	adds	r3, #2
 800b174:	82fb      	strh	r3, [r7, #22]
 800b176:	8afa      	ldrh	r2, [r7, #22]
 800b178:	8abb      	ldrh	r3, [r7, #20]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d3ef      	bcc.n	800b15e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	2200      	movs	r2, #0
 800b182:	701a      	strb	r2, [r3, #0]
  }
}
 800b184:	bf00      	nop
 800b186:	371c      	adds	r7, #28
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	881a      	ldrh	r2, [r3, #0]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	4413      	add	r3, r2
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b086      	sub	sp, #24
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	60b9      	str	r1, [r7, #8]
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	789b      	ldrb	r3, [r3, #2]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d002      	beq.n	800b1e6 <USBH_CtlReq+0x20>
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d01d      	beq.n	800b220 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b1e4:	e043      	b.n	800b26e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	88fa      	ldrh	r2, [r7, #6]
 800b1f0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b1fe:	2301      	movs	r3, #1
 800b200:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2203      	movs	r2, #3
 800b206:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b216:	2200      	movs	r2, #0
 800b218:	4619      	mov	r1, r3
 800b21a:	f000 fc59 	bl	800bad0 <osMessagePut>
      break;
 800b21e:	e026      	b.n	800b26e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f000 f829 	bl	800b278 <USBH_HandleControl>
 800b226:	4603      	mov	r3, r0
 800b228:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b22a:	7dfb      	ldrb	r3, [r7, #23]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d002      	beq.n	800b236 <USBH_CtlReq+0x70>
 800b230:	7dfb      	ldrb	r3, [r7, #23]
 800b232:	2b03      	cmp	r3, #3
 800b234:	d106      	bne.n	800b244 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2201      	movs	r2, #1
 800b23a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2200      	movs	r2, #0
 800b240:	761a      	strb	r2, [r3, #24]
 800b242:	e005      	b.n	800b250 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b244:	7dfb      	ldrb	r3, [r7, #23]
 800b246:	2b02      	cmp	r3, #2
 800b248:	d102      	bne.n	800b250 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2201      	movs	r2, #1
 800b24e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2203      	movs	r2, #3
 800b254:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b264:	2200      	movs	r2, #0
 800b266:	4619      	mov	r1, r3
 800b268:	f000 fc32 	bl	800bad0 <osMessagePut>
      break;
 800b26c:	bf00      	nop
  }
  return status;
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3718      	adds	r7, #24
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af02      	add	r7, sp, #8
 800b27e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b280:	2301      	movs	r3, #1
 800b282:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b284:	2300      	movs	r3, #0
 800b286:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	7e1b      	ldrb	r3, [r3, #24]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	2b0a      	cmp	r3, #10
 800b290:	f200 8229 	bhi.w	800b6e6 <USBH_HandleControl+0x46e>
 800b294:	a201      	add	r2, pc, #4	; (adr r2, 800b29c <USBH_HandleControl+0x24>)
 800b296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29a:	bf00      	nop
 800b29c:	0800b2c9 	.word	0x0800b2c9
 800b2a0:	0800b2e3 	.word	0x0800b2e3
 800b2a4:	0800b385 	.word	0x0800b385
 800b2a8:	0800b3ab 	.word	0x0800b3ab
 800b2ac:	0800b437 	.word	0x0800b437
 800b2b0:	0800b461 	.word	0x0800b461
 800b2b4:	0800b523 	.word	0x0800b523
 800b2b8:	0800b545 	.word	0x0800b545
 800b2bc:	0800b5d7 	.word	0x0800b5d7
 800b2c0:	0800b5fd 	.word	0x0800b5fd
 800b2c4:	0800b68f 	.word	0x0800b68f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f103 0110 	add.w	r1, r3, #16
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	795b      	ldrb	r3, [r3, #5]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 fa17 	bl	800b708 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2202      	movs	r2, #2
 800b2de:	761a      	strb	r2, [r3, #24]
      break;
 800b2e0:	e20c      	b.n	800b6fc <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	795b      	ldrb	r3, [r3, #5]
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f002 fe77 	bl	800dfdc <USBH_LL_GetURBState>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b2f2:	7bbb      	ldrb	r3, [r7, #14]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d12c      	bne.n	800b352 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	7c1b      	ldrb	r3, [r3, #16]
 800b2fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b300:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	8adb      	ldrh	r3, [r3, #22]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00a      	beq.n	800b320 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b30a:	7b7b      	ldrb	r3, [r7, #13]
 800b30c:	2b80      	cmp	r3, #128	; 0x80
 800b30e:	d103      	bne.n	800b318 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2203      	movs	r2, #3
 800b314:	761a      	strb	r2, [r3, #24]
 800b316:	e00d      	b.n	800b334 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2205      	movs	r2, #5
 800b31c:	761a      	strb	r2, [r3, #24]
 800b31e:	e009      	b.n	800b334 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b320:	7b7b      	ldrb	r3, [r7, #13]
 800b322:	2b80      	cmp	r3, #128	; 0x80
 800b324:	d103      	bne.n	800b32e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2209      	movs	r2, #9
 800b32a:	761a      	strb	r2, [r3, #24]
 800b32c:	e002      	b.n	800b334 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2207      	movs	r2, #7
 800b332:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2203      	movs	r2, #3
 800b338:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b348:	2200      	movs	r2, #0
 800b34a:	4619      	mov	r1, r3
 800b34c:	f000 fbc0 	bl	800bad0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b350:	e1cb      	b.n	800b6ea <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b352:	7bbb      	ldrb	r3, [r7, #14]
 800b354:	2b04      	cmp	r3, #4
 800b356:	d003      	beq.n	800b360 <USBH_HandleControl+0xe8>
 800b358:	7bbb      	ldrb	r3, [r7, #14]
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	f040 81c5 	bne.w	800b6ea <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	220b      	movs	r2, #11
 800b364:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2203      	movs	r2, #3
 800b36a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b37a:	2200      	movs	r2, #0
 800b37c:	4619      	mov	r1, r3
 800b37e:	f000 fba7 	bl	800bad0 <osMessagePut>
      break;
 800b382:	e1b2      	b.n	800b6ea <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6899      	ldr	r1, [r3, #8]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	899a      	ldrh	r2, [r3, #12]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	791b      	ldrb	r3, [r3, #4]
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 f9f2 	bl	800b786 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2204      	movs	r2, #4
 800b3a6:	761a      	strb	r2, [r3, #24]
      break;
 800b3a8:	e1a8      	b.n	800b6fc <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	791b      	ldrb	r3, [r3, #4]
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f002 fe13 	bl	800dfdc <USBH_LL_GetURBState>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b3ba:	7bbb      	ldrb	r3, [r7, #14]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d110      	bne.n	800b3e2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2209      	movs	r2, #9
 800b3c4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2203      	movs	r2, #3
 800b3ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b3da:	2200      	movs	r2, #0
 800b3dc:	4619      	mov	r1, r3
 800b3de:	f000 fb77 	bl	800bad0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b3e2:	7bbb      	ldrb	r3, [r7, #14]
 800b3e4:	2b05      	cmp	r3, #5
 800b3e6:	d110      	bne.n	800b40a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2203      	movs	r2, #3
 800b3f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b400:	2200      	movs	r2, #0
 800b402:	4619      	mov	r1, r3
 800b404:	f000 fb64 	bl	800bad0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b408:	e171      	b.n	800b6ee <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b40a:	7bbb      	ldrb	r3, [r7, #14]
 800b40c:	2b04      	cmp	r3, #4
 800b40e:	f040 816e 	bne.w	800b6ee <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	220b      	movs	r2, #11
 800b416:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2203      	movs	r2, #3
 800b41c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b42c:	2200      	movs	r2, #0
 800b42e:	4619      	mov	r1, r3
 800b430:	f000 fb4e 	bl	800bad0 <osMessagePut>
      break;
 800b434:	e15b      	b.n	800b6ee <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6899      	ldr	r1, [r3, #8]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	899a      	ldrh	r2, [r3, #12]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	795b      	ldrb	r3, [r3, #5]
 800b442:	2001      	movs	r0, #1
 800b444:	9000      	str	r0, [sp, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f978 	bl	800b73c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b452:	b29a      	uxth	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2206      	movs	r2, #6
 800b45c:	761a      	strb	r2, [r3, #24]
      break;
 800b45e:	e14d      	b.n	800b6fc <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	795b      	ldrb	r3, [r3, #5]
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f002 fdb8 	bl	800dfdc <USBH_LL_GetURBState>
 800b46c:	4603      	mov	r3, r0
 800b46e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b470:	7bbb      	ldrb	r3, [r7, #14]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d111      	bne.n	800b49a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2207      	movs	r2, #7
 800b47a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2203      	movs	r2, #3
 800b480:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b490:	2200      	movs	r2, #0
 800b492:	4619      	mov	r1, r3
 800b494:	f000 fb1c 	bl	800bad0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b498:	e12b      	b.n	800b6f2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b49a:	7bbb      	ldrb	r3, [r7, #14]
 800b49c:	2b05      	cmp	r3, #5
 800b49e:	d113      	bne.n	800b4c8 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	220c      	movs	r2, #12
 800b4a4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2203      	movs	r2, #3
 800b4ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4be:	2200      	movs	r2, #0
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	f000 fb05 	bl	800bad0 <osMessagePut>
      break;
 800b4c6:	e114      	b.n	800b6f2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	d111      	bne.n	800b4f2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2205      	movs	r2, #5
 800b4d2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2203      	movs	r2, #3
 800b4d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	f000 faf0 	bl	800bad0 <osMessagePut>
      break;
 800b4f0:	e0ff      	b.n	800b6f2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b4f2:	7bbb      	ldrb	r3, [r7, #14]
 800b4f4:	2b04      	cmp	r3, #4
 800b4f6:	f040 80fc 	bne.w	800b6f2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	220b      	movs	r2, #11
 800b4fe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b500:	2302      	movs	r3, #2
 800b502:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2203      	movs	r2, #3
 800b508:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b518:	2200      	movs	r2, #0
 800b51a:	4619      	mov	r1, r3
 800b51c:	f000 fad8 	bl	800bad0 <osMessagePut>
      break;
 800b520:	e0e7      	b.n	800b6f2 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	791b      	ldrb	r3, [r3, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	2100      	movs	r1, #0
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f92b 	bl	800b786 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b536:	b29a      	uxth	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2208      	movs	r2, #8
 800b540:	761a      	strb	r2, [r3, #24]

      break;
 800b542:	e0db      	b.n	800b6fc <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	791b      	ldrb	r3, [r3, #4]
 800b548:	4619      	mov	r1, r3
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f002 fd46 	bl	800dfdc <USBH_LL_GetURBState>
 800b550:	4603      	mov	r3, r0
 800b552:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b554:	7bbb      	ldrb	r3, [r7, #14]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d113      	bne.n	800b582 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	220d      	movs	r2, #13
 800b55e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b560:	2300      	movs	r3, #0
 800b562:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2203      	movs	r2, #3
 800b568:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b578:	2200      	movs	r2, #0
 800b57a:	4619      	mov	r1, r3
 800b57c:	f000 faa8 	bl	800bad0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b580:	e0b9      	b.n	800b6f6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b582:	7bbb      	ldrb	r3, [r7, #14]
 800b584:	2b04      	cmp	r3, #4
 800b586:	d111      	bne.n	800b5ac <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	220b      	movs	r2, #11
 800b58c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2203      	movs	r2, #3
 800b592:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	f000 fa93 	bl	800bad0 <osMessagePut>
      break;
 800b5aa:	e0a4      	b.n	800b6f6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b5ac:	7bbb      	ldrb	r3, [r7, #14]
 800b5ae:	2b05      	cmp	r3, #5
 800b5b0:	f040 80a1 	bne.w	800b6f6 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2203      	movs	r2, #3
 800b5bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	f000 fa7e 	bl	800bad0 <osMessagePut>
      break;
 800b5d4:	e08f      	b.n	800b6f6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	795b      	ldrb	r3, [r3, #5]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	9200      	str	r2, [sp, #0]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f8aa 	bl	800b73c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	220a      	movs	r2, #10
 800b5f8:	761a      	strb	r2, [r3, #24]
      break;
 800b5fa:	e07f      	b.n	800b6fc <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	795b      	ldrb	r3, [r3, #5]
 800b600:	4619      	mov	r1, r3
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f002 fcea 	bl	800dfdc <USBH_LL_GetURBState>
 800b608:	4603      	mov	r3, r0
 800b60a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b60c:	7bbb      	ldrb	r3, [r7, #14]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d113      	bne.n	800b63a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b612:	2300      	movs	r3, #0
 800b614:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	220d      	movs	r2, #13
 800b61a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2203      	movs	r2, #3
 800b620:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b630:	2200      	movs	r2, #0
 800b632:	4619      	mov	r1, r3
 800b634:	f000 fa4c 	bl	800bad0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b638:	e05f      	b.n	800b6fa <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b63a:	7bbb      	ldrb	r3, [r7, #14]
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d111      	bne.n	800b664 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2209      	movs	r2, #9
 800b644:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2203      	movs	r2, #3
 800b64a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b65a:	2200      	movs	r2, #0
 800b65c:	4619      	mov	r1, r3
 800b65e:	f000 fa37 	bl	800bad0 <osMessagePut>
      break;
 800b662:	e04a      	b.n	800b6fa <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800b664:	7bbb      	ldrb	r3, [r7, #14]
 800b666:	2b04      	cmp	r3, #4
 800b668:	d147      	bne.n	800b6fa <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	220b      	movs	r2, #11
 800b66e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2203      	movs	r2, #3
 800b674:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b684:	2200      	movs	r2, #0
 800b686:	4619      	mov	r1, r3
 800b688:	f000 fa22 	bl	800bad0 <osMessagePut>
      break;
 800b68c:	e035      	b.n	800b6fa <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	7e5b      	ldrb	r3, [r3, #25]
 800b692:	3301      	adds	r3, #1
 800b694:	b2da      	uxtb	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	765a      	strb	r2, [r3, #25]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	7e5b      	ldrb	r3, [r3, #25]
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d806      	bhi.n	800b6b0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b6ae:	e025      	b.n	800b6fc <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6b6:	2106      	movs	r1, #6
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	795b      	ldrb	r3, [r3, #5]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f90d 	bl	800b8e8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	791b      	ldrb	r3, [r3, #4]
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f907 	bl	800b8e8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b6e4:	e00a      	b.n	800b6fc <USBH_HandleControl+0x484>

    default:
      break;
 800b6e6:	bf00      	nop
 800b6e8:	e008      	b.n	800b6fc <USBH_HandleControl+0x484>
      break;
 800b6ea:	bf00      	nop
 800b6ec:	e006      	b.n	800b6fc <USBH_HandleControl+0x484>
      break;
 800b6ee:	bf00      	nop
 800b6f0:	e004      	b.n	800b6fc <USBH_HandleControl+0x484>
      break;
 800b6f2:	bf00      	nop
 800b6f4:	e002      	b.n	800b6fc <USBH_HandleControl+0x484>
      break;
 800b6f6:	bf00      	nop
 800b6f8:	e000      	b.n	800b6fc <USBH_HandleControl+0x484>
      break;
 800b6fa:	bf00      	nop
  }

  return status;
 800b6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop

0800b708 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b088      	sub	sp, #32
 800b70c:	af04      	add	r7, sp, #16
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	4613      	mov	r3, r2
 800b714:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b716:	79f9      	ldrb	r1, [r7, #7]
 800b718:	2300      	movs	r3, #0
 800b71a:	9303      	str	r3, [sp, #12]
 800b71c:	2308      	movs	r3, #8
 800b71e:	9302      	str	r3, [sp, #8]
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	9301      	str	r3, [sp, #4]
 800b724:	2300      	movs	r3, #0
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	2300      	movs	r3, #0
 800b72a:	2200      	movs	r2, #0
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f002 fc24 	bl	800df7a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b088      	sub	sp, #32
 800b740:	af04      	add	r7, sp, #16
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	4611      	mov	r1, r2
 800b748:	461a      	mov	r2, r3
 800b74a:	460b      	mov	r3, r1
 800b74c:	80fb      	strh	r3, [r7, #6]
 800b74e:	4613      	mov	r3, r2
 800b750:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d001      	beq.n	800b760 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b75c:	2300      	movs	r3, #0
 800b75e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b760:	7979      	ldrb	r1, [r7, #5]
 800b762:	7e3b      	ldrb	r3, [r7, #24]
 800b764:	9303      	str	r3, [sp, #12]
 800b766:	88fb      	ldrh	r3, [r7, #6]
 800b768:	9302      	str	r3, [sp, #8]
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	9301      	str	r3, [sp, #4]
 800b76e:	2301      	movs	r3, #1
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	2300      	movs	r3, #0
 800b774:	2200      	movs	r2, #0
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f002 fbff 	bl	800df7a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b77c:	2300      	movs	r3, #0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b088      	sub	sp, #32
 800b78a:	af04      	add	r7, sp, #16
 800b78c:	60f8      	str	r0, [r7, #12]
 800b78e:	60b9      	str	r1, [r7, #8]
 800b790:	4611      	mov	r1, r2
 800b792:	461a      	mov	r2, r3
 800b794:	460b      	mov	r3, r1
 800b796:	80fb      	strh	r3, [r7, #6]
 800b798:	4613      	mov	r3, r2
 800b79a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b79c:	7979      	ldrb	r1, [r7, #5]
 800b79e:	2300      	movs	r3, #0
 800b7a0:	9303      	str	r3, [sp, #12]
 800b7a2:	88fb      	ldrh	r3, [r7, #6]
 800b7a4:	9302      	str	r3, [sp, #8]
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	9301      	str	r3, [sp, #4]
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f002 fbe1 	bl	800df7a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b7b8:	2300      	movs	r3, #0

}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b088      	sub	sp, #32
 800b7c6:	af04      	add	r7, sp, #16
 800b7c8:	60f8      	str	r0, [r7, #12]
 800b7ca:	60b9      	str	r1, [r7, #8]
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	80fb      	strh	r3, [r7, #6]
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d001      	beq.n	800b7e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b7e6:	7979      	ldrb	r1, [r7, #5]
 800b7e8:	7e3b      	ldrb	r3, [r7, #24]
 800b7ea:	9303      	str	r3, [sp, #12]
 800b7ec:	88fb      	ldrh	r3, [r7, #6]
 800b7ee:	9302      	str	r3, [sp, #8]
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	9301      	str	r3, [sp, #4]
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	2302      	movs	r3, #2
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f002 fbbc 	bl	800df7a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b088      	sub	sp, #32
 800b810:	af04      	add	r7, sp, #16
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	4611      	mov	r1, r2
 800b818:	461a      	mov	r2, r3
 800b81a:	460b      	mov	r3, r1
 800b81c:	80fb      	strh	r3, [r7, #6]
 800b81e:	4613      	mov	r3, r2
 800b820:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b822:	7979      	ldrb	r1, [r7, #5]
 800b824:	2300      	movs	r3, #0
 800b826:	9303      	str	r3, [sp, #12]
 800b828:	88fb      	ldrh	r3, [r7, #6]
 800b82a:	9302      	str	r3, [sp, #8]
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	9301      	str	r3, [sp, #4]
 800b830:	2301      	movs	r3, #1
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	2302      	movs	r3, #2
 800b836:	2201      	movs	r2, #1
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f002 fb9e 	bl	800df7a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b086      	sub	sp, #24
 800b84c:	af04      	add	r7, sp, #16
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	4608      	mov	r0, r1
 800b852:	4611      	mov	r1, r2
 800b854:	461a      	mov	r2, r3
 800b856:	4603      	mov	r3, r0
 800b858:	70fb      	strb	r3, [r7, #3]
 800b85a:	460b      	mov	r3, r1
 800b85c:	70bb      	strb	r3, [r7, #2]
 800b85e:	4613      	mov	r3, r2
 800b860:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b862:	7878      	ldrb	r0, [r7, #1]
 800b864:	78ba      	ldrb	r2, [r7, #2]
 800b866:	78f9      	ldrb	r1, [r7, #3]
 800b868:	8b3b      	ldrh	r3, [r7, #24]
 800b86a:	9302      	str	r3, [sp, #8]
 800b86c:	7d3b      	ldrb	r3, [r7, #20]
 800b86e:	9301      	str	r3, [sp, #4]
 800b870:	7c3b      	ldrb	r3, [r7, #16]
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	4603      	mov	r3, r0
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f002 fb31 	bl	800dede <USBH_LL_OpenPipe>

  return USBH_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b082      	sub	sp, #8
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	460b      	mov	r3, r1
 800b890:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b892:	78fb      	ldrb	r3, [r7, #3]
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f002 fb50 	bl	800df3c <USBH_LL_ClosePipe>

  return USBH_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b084      	sub	sp, #16
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f836 	bl	800b924 <USBH_GetFreePipe>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b8bc:	89fb      	ldrh	r3, [r7, #14]
 800b8be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d00a      	beq.n	800b8dc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b8c6:	78fa      	ldrb	r2, [r7, #3]
 800b8c8:	89fb      	ldrh	r3, [r7, #14]
 800b8ca:	f003 030f 	and.w	r3, r3, #15
 800b8ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8d2:	6879      	ldr	r1, [r7, #4]
 800b8d4:	33e0      	adds	r3, #224	; 0xe0
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	440b      	add	r3, r1
 800b8da:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b8dc:	89fb      	ldrh	r3, [r7, #14]
 800b8de:	b2db      	uxtb	r3, r3
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b8f4:	78fb      	ldrb	r3, [r7, #3]
 800b8f6:	2b0a      	cmp	r3, #10
 800b8f8:	d80d      	bhi.n	800b916 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b8fa:	78fb      	ldrb	r3, [r7, #3]
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	33e0      	adds	r3, #224	; 0xe0
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4413      	add	r3, r2
 800b904:	685a      	ldr	r2, [r3, #4]
 800b906:	78fb      	ldrb	r3, [r7, #3]
 800b908:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b90c:	6879      	ldr	r1, [r7, #4]
 800b90e:	33e0      	adds	r3, #224	; 0xe0
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	440b      	add	r3, r1
 800b914:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b92c:	2300      	movs	r3, #0
 800b92e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b930:	2300      	movs	r3, #0
 800b932:	73fb      	strb	r3, [r7, #15]
 800b934:	e00f      	b.n	800b956 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b936:	7bfb      	ldrb	r3, [r7, #15]
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	33e0      	adds	r3, #224	; 0xe0
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	4413      	add	r3, r2
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b946:	2b00      	cmp	r3, #0
 800b948:	d102      	bne.n	800b950 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b94a:	7bfb      	ldrb	r3, [r7, #15]
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	e007      	b.n	800b960 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b950:	7bfb      	ldrb	r3, [r7, #15]
 800b952:	3301      	adds	r3, #1
 800b954:	73fb      	strb	r3, [r7, #15]
 800b956:	7bfb      	ldrb	r3, [r7, #15]
 800b958:	2b0a      	cmp	r3, #10
 800b95a:	d9ec      	bls.n	800b936 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b95c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	4603      	mov	r3, r0
 800b974:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b976:	2300      	movs	r3, #0
 800b978:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b97a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b97e:	2b84      	cmp	r3, #132	; 0x84
 800b980:	d005      	beq.n	800b98e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b982:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	4413      	add	r3, r2
 800b98a:	3303      	adds	r3, #3
 800b98c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b98e:	68fb      	ldr	r3, [r7, #12]
}
 800b990:	4618      	mov	r0, r3
 800b992:	3714      	adds	r7, #20
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9a2:	f3ef 8305 	mrs	r3, IPSR
 800b9a6:	607b      	str	r3, [r7, #4]
  return(result);
 800b9a8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	bf14      	ite	ne
 800b9ae:	2301      	movne	r3, #1
 800b9b0:	2300      	moveq	r3, #0
 800b9b2:	b2db      	uxtb	r3, r3
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9c2:	b089      	sub	sp, #36	; 0x24
 800b9c4:	af04      	add	r7, sp, #16
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	695b      	ldr	r3, [r3, #20]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d020      	beq.n	800ba14 <osThreadCreate+0x54>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d01c      	beq.n	800ba14 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	685c      	ldr	r4, [r3, #4]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681d      	ldr	r5, [r3, #0]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	691e      	ldr	r6, [r3, #16]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7ff ffbd 	bl	800b96c <makeFreeRtosPriority>
 800b9f2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	695b      	ldr	r3, [r3, #20]
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9fc:	9202      	str	r2, [sp, #8]
 800b9fe:	9301      	str	r3, [sp, #4]
 800ba00:	9100      	str	r1, [sp, #0]
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	4632      	mov	r2, r6
 800ba06:	4629      	mov	r1, r5
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f000 ff0d 	bl	800c828 <xTaskCreateStatic>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	60fb      	str	r3, [r7, #12]
 800ba12:	e01c      	b.n	800ba4e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	685c      	ldr	r4, [r3, #4]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba20:	b29e      	uxth	r6, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff ff9f 	bl	800b96c <makeFreeRtosPriority>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	f107 030c 	add.w	r3, r7, #12
 800ba34:	9301      	str	r3, [sp, #4]
 800ba36:	9200      	str	r2, [sp, #0]
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	4632      	mov	r2, r6
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 ff4f 	bl	800c8e2 <xTaskCreate>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d001      	beq.n	800ba4e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e000      	b.n	800ba50 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba58 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d001      	beq.n	800ba6e <osDelay+0x16>
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	e000      	b.n	800ba70 <osDelay+0x18>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	4618      	mov	r0, r3
 800ba72:	f001 f877 	bl	800cb64 <vTaskDelay>
  
  return osOK;
 800ba76:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ba80:	b590      	push	{r4, r7, lr}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af02      	add	r7, sp, #8
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d011      	beq.n	800bab6 <osMessageCreate+0x36>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00d      	beq.n	800bab6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6818      	ldr	r0, [r3, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6859      	ldr	r1, [r3, #4]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	689a      	ldr	r2, [r3, #8]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	2400      	movs	r4, #0
 800baac:	9400      	str	r4, [sp, #0]
 800baae:	f000 f9df 	bl	800be70 <xQueueGenericCreateStatic>
 800bab2:	4603      	mov	r3, r0
 800bab4:	e008      	b.n	800bac8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6818      	ldr	r0, [r3, #0]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	4619      	mov	r1, r3
 800bac2:	f000 fa4d 	bl	800bf60 <xQueueGenericCreate>
 800bac6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd90      	pop	{r4, r7, pc}

0800bad0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800badc:	2300      	movs	r3, #0
 800bade:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d101      	bne.n	800baee <osMessagePut+0x1e>
    ticks = 1;
 800baea:	2301      	movs	r3, #1
 800baec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800baee:	f7ff ff55 	bl	800b99c <inHandlerMode>
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d018      	beq.n	800bb2a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800baf8:	f107 0210 	add.w	r2, r7, #16
 800bafc:	f107 0108 	add.w	r1, r7, #8
 800bb00:	2300      	movs	r3, #0
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f000 fb84 	bl	800c210 <xQueueGenericSendFromISR>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d001      	beq.n	800bb12 <osMessagePut+0x42>
      return osErrorOS;
 800bb0e:	23ff      	movs	r3, #255	; 0xff
 800bb10:	e018      	b.n	800bb44 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d014      	beq.n	800bb42 <osMessagePut+0x72>
 800bb18:	4b0c      	ldr	r3, [pc, #48]	; (800bb4c <osMessagePut+0x7c>)
 800bb1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb1e:	601a      	str	r2, [r3, #0]
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	e00b      	b.n	800bb42 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bb2a:	f107 0108 	add.w	r1, r7, #8
 800bb2e:	2300      	movs	r3, #0
 800bb30:	697a      	ldr	r2, [r7, #20]
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f000 fa6e 	bl	800c014 <xQueueGenericSend>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d001      	beq.n	800bb42 <osMessagePut+0x72>
      return osErrorOS;
 800bb3e:	23ff      	movs	r3, #255	; 0xff
 800bb40:	e000      	b.n	800bb44 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3718      	adds	r7, #24
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	e000ed04 	.word	0xe000ed04

0800bb50 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800bb50:	b590      	push	{r4, r7, lr}
 800bb52:	b08b      	sub	sp, #44	; 0x2c
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bb60:	2300      	movs	r3, #0
 800bb62:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10a      	bne.n	800bb80 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800bb6a:	2380      	movs	r3, #128	; 0x80
 800bb6c:	617b      	str	r3, [r7, #20]
    return event;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	461c      	mov	r4, r3
 800bb72:	f107 0314 	add.w	r3, r7, #20
 800bb76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bb7e:	e054      	b.n	800bc2a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bb80:	2300      	movs	r3, #0
 800bb82:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb8e:	d103      	bne.n	800bb98 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bb90:	f04f 33ff 	mov.w	r3, #4294967295
 800bb94:	627b      	str	r3, [r7, #36]	; 0x24
 800bb96:	e009      	b.n	800bbac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d006      	beq.n	800bbac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d101      	bne.n	800bbac <osMessageGet+0x5c>
      ticks = 1;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bbac:	f7ff fef6 	bl	800b99c <inHandlerMode>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d01c      	beq.n	800bbf0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bbb6:	f107 0220 	add.w	r2, r7, #32
 800bbba:	f107 0314 	add.w	r3, r7, #20
 800bbbe:	3304      	adds	r3, #4
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	68b8      	ldr	r0, [r7, #8]
 800bbc4:	f000 fca0 	bl	800c508 <xQueueReceiveFromISR>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d102      	bne.n	800bbd4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800bbce:	2310      	movs	r3, #16
 800bbd0:	617b      	str	r3, [r7, #20]
 800bbd2:	e001      	b.n	800bbd8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d01d      	beq.n	800bc1a <osMessageGet+0xca>
 800bbde:	4b15      	ldr	r3, [pc, #84]	; (800bc34 <osMessageGet+0xe4>)
 800bbe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	e014      	b.n	800bc1a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bbf0:	f107 0314 	add.w	r3, r7, #20
 800bbf4:	3304      	adds	r3, #4
 800bbf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	68b8      	ldr	r0, [r7, #8]
 800bbfc:	f000 fba4 	bl	800c348 <xQueueReceive>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d102      	bne.n	800bc0c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bc06:	2310      	movs	r3, #16
 800bc08:	617b      	str	r3, [r7, #20]
 800bc0a:	e006      	b.n	800bc1a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d101      	bne.n	800bc16 <osMessageGet+0xc6>
 800bc12:	2300      	movs	r3, #0
 800bc14:	e000      	b.n	800bc18 <osMessageGet+0xc8>
 800bc16:	2340      	movs	r3, #64	; 0x40
 800bc18:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	461c      	mov	r4, r3
 800bc1e:	f107 0314 	add.w	r3, r7, #20
 800bc22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	372c      	adds	r7, #44	; 0x2c
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd90      	pop	{r4, r7, pc}
 800bc32:	bf00      	nop
 800bc34:	e000ed04 	.word	0xe000ed04

0800bc38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f103 0208 	add.w	r2, r3, #8
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f103 0208 	add.w	r2, r3, #8
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f103 0208 	add.w	r2, r3, #8
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc6c:	bf00      	nop
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc86:	bf00      	nop
 800bc88:	370c      	adds	r7, #12
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr

0800bc92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc92:	b480      	push	{r7}
 800bc94:	b085      	sub	sp, #20
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
 800bc9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	689a      	ldr	r2, [r3, #8]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	683a      	ldr	r2, [r7, #0]
 800bcb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	1c5a      	adds	r2, r3, #1
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	601a      	str	r2, [r3, #0]
}
 800bcce:	bf00      	nop
 800bcd0:	3714      	adds	r7, #20
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b085      	sub	sp, #20
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf0:	d103      	bne.n	800bcfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	60fb      	str	r3, [r7, #12]
 800bcf8:	e00c      	b.n	800bd14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	3308      	adds	r3, #8
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	e002      	b.n	800bd08 <vListInsert+0x2e>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	60fb      	str	r3, [r7, #12]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	68ba      	ldr	r2, [r7, #8]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d2f6      	bcs.n	800bd02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	685a      	ldr	r2, [r3, #4]
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	683a      	ldr	r2, [r7, #0]
 800bd22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	68fa      	ldr	r2, [r7, #12]
 800bd28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	683a      	ldr	r2, [r7, #0]
 800bd2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	1c5a      	adds	r2, r3, #1
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	601a      	str	r2, [r3, #0]
}
 800bd40:	bf00      	nop
 800bd42:	3714      	adds	r7, #20
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b085      	sub	sp, #20
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	6892      	ldr	r2, [r2, #8]
 800bd62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	6852      	ldr	r2, [r2, #4]
 800bd6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d103      	bne.n	800bd80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	689a      	ldr	r2, [r3, #8]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	1e5a      	subs	r2, r3, #1
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10a      	bne.n	800bdca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bdc6:	bf00      	nop
 800bdc8:	e7fe      	b.n	800bdc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bdca:	f001 fbcd 	bl	800d568 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdd6:	68f9      	ldr	r1, [r7, #12]
 800bdd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bdda:	fb01 f303 	mul.w	r3, r1, r3
 800bdde:	441a      	add	r2, r3
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2200      	movs	r2, #0
 800bde8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	68f9      	ldr	r1, [r7, #12]
 800bdfe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be00:	fb01 f303 	mul.w	r3, r1, r3
 800be04:	441a      	add	r2, r3
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	22ff      	movs	r2, #255	; 0xff
 800be0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	22ff      	movs	r2, #255	; 0xff
 800be16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d114      	bne.n	800be4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d01a      	beq.n	800be5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	3310      	adds	r3, #16
 800be2c:	4618      	mov	r0, r3
 800be2e:	f001 f8d3 	bl	800cfd8 <xTaskRemoveFromEventList>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d012      	beq.n	800be5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800be38:	4b0c      	ldr	r3, [pc, #48]	; (800be6c <xQueueGenericReset+0xcc>)
 800be3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	e009      	b.n	800be5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3310      	adds	r3, #16
 800be4e:	4618      	mov	r0, r3
 800be50:	f7ff fef2 	bl	800bc38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	3324      	adds	r3, #36	; 0x24
 800be58:	4618      	mov	r0, r3
 800be5a:	f7ff feed 	bl	800bc38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be5e:	f001 fbb3 	bl	800d5c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be62:	2301      	movs	r3, #1
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	e000ed04 	.word	0xe000ed04

0800be70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be70:	b580      	push	{r7, lr}
 800be72:	b08e      	sub	sp, #56	; 0x38
 800be74:	af02      	add	r7, sp, #8
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	607a      	str	r2, [r7, #4]
 800be7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10a      	bne.n	800beb6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800beb2:	bf00      	nop
 800beb4:	e7fe      	b.n	800beb4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d002      	beq.n	800bec2 <xQueueGenericCreateStatic+0x52>
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d001      	beq.n	800bec6 <xQueueGenericCreateStatic+0x56>
 800bec2:	2301      	movs	r3, #1
 800bec4:	e000      	b.n	800bec8 <xQueueGenericCreateStatic+0x58>
 800bec6:	2300      	movs	r3, #0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10a      	bne.n	800bee2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800becc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed0:	f383 8811 	msr	BASEPRI, r3
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	623b      	str	r3, [r7, #32]
}
 800bede:	bf00      	nop
 800bee0:	e7fe      	b.n	800bee0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d102      	bne.n	800beee <xQueueGenericCreateStatic+0x7e>
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d101      	bne.n	800bef2 <xQueueGenericCreateStatic+0x82>
 800beee:	2301      	movs	r3, #1
 800bef0:	e000      	b.n	800bef4 <xQueueGenericCreateStatic+0x84>
 800bef2:	2300      	movs	r3, #0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	61fb      	str	r3, [r7, #28]
}
 800bf0a:	bf00      	nop
 800bf0c:	e7fe      	b.n	800bf0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bf0e:	2348      	movs	r3, #72	; 0x48
 800bf10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2b48      	cmp	r3, #72	; 0x48
 800bf16:	d00a      	beq.n	800bf2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bf18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1c:	f383 8811 	msr	BASEPRI, r3
 800bf20:	f3bf 8f6f 	isb	sy
 800bf24:	f3bf 8f4f 	dsb	sy
 800bf28:	61bb      	str	r3, [r7, #24]
}
 800bf2a:	bf00      	nop
 800bf2c:	e7fe      	b.n	800bf2c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bf2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00d      	beq.n	800bf56 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	68b9      	ldr	r1, [r7, #8]
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f000 f83f 	bl	800bfd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3730      	adds	r7, #48	; 0x30
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08a      	sub	sp, #40	; 0x28
 800bf64:	af02      	add	r7, sp, #8
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d10a      	bne.n	800bf8a <xQueueGenericCreate+0x2a>
	__asm volatile
 800bf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf78:	f383 8811 	msr	BASEPRI, r3
 800bf7c:	f3bf 8f6f 	isb	sy
 800bf80:	f3bf 8f4f 	dsb	sy
 800bf84:	613b      	str	r3, [r7, #16]
}
 800bf86:	bf00      	nop
 800bf88:	e7fe      	b.n	800bf88 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	fb02 f303 	mul.w	r3, r2, r3
 800bf92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	3348      	adds	r3, #72	; 0x48
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f001 fbd7 	bl	800d74c <pvPortMalloc>
 800bf9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d011      	beq.n	800bfca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	3348      	adds	r3, #72	; 0x48
 800bfae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfb8:	79fa      	ldrb	r2, [r7, #7]
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	9300      	str	r3, [sp, #0]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	697a      	ldr	r2, [r7, #20]
 800bfc2:	68b9      	ldr	r1, [r7, #8]
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	f000 f805 	bl	800bfd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfca:	69bb      	ldr	r3, [r7, #24]
	}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3720      	adds	r7, #32
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	607a      	str	r2, [r7, #4]
 800bfe0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d103      	bne.n	800bff0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	69ba      	ldr	r2, [r7, #24]
 800bfec:	601a      	str	r2, [r3, #0]
 800bfee:	e002      	b.n	800bff6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c002:	2101      	movs	r1, #1
 800c004:	69b8      	ldr	r0, [r7, #24]
 800c006:	f7ff fecb 	bl	800bda0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c00a:	bf00      	nop
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
	...

0800c014 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b08e      	sub	sp, #56	; 0x38
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
 800c020:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c022:	2300      	movs	r3, #0
 800c024:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10a      	bne.n	800c046 <xQueueGenericSend+0x32>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d103      	bne.n	800c054 <xQueueGenericSend+0x40>
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c050:	2b00      	cmp	r3, #0
 800c052:	d101      	bne.n	800c058 <xQueueGenericSend+0x44>
 800c054:	2301      	movs	r3, #1
 800c056:	e000      	b.n	800c05a <xQueueGenericSend+0x46>
 800c058:	2300      	movs	r3, #0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10a      	bne.n	800c074 <xQueueGenericSend+0x60>
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c070:	bf00      	nop
 800c072:	e7fe      	b.n	800c072 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	2b02      	cmp	r3, #2
 800c078:	d103      	bne.n	800c082 <xQueueGenericSend+0x6e>
 800c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d101      	bne.n	800c086 <xQueueGenericSend+0x72>
 800c082:	2301      	movs	r3, #1
 800c084:	e000      	b.n	800c088 <xQueueGenericSend+0x74>
 800c086:	2300      	movs	r3, #0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d10a      	bne.n	800c0a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800c08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c090:	f383 8811 	msr	BASEPRI, r3
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	623b      	str	r3, [r7, #32]
}
 800c09e:	bf00      	nop
 800c0a0:	e7fe      	b.n	800c0a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0a2:	f001 f8df 	bl	800d264 <xTaskGetSchedulerState>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d102      	bne.n	800c0b2 <xQueueGenericSend+0x9e>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d101      	bne.n	800c0b6 <xQueueGenericSend+0xa2>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e000      	b.n	800c0b8 <xQueueGenericSend+0xa4>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10a      	bne.n	800c0d2 <xQueueGenericSend+0xbe>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	61fb      	str	r3, [r7, #28]
}
 800c0ce:	bf00      	nop
 800c0d0:	e7fe      	b.n	800c0d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0d2:	f001 fa49 	bl	800d568 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d302      	bcc.n	800c0e8 <xQueueGenericSend+0xd4>
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	d129      	bne.n	800c13c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0e8:	683a      	ldr	r2, [r7, #0]
 800c0ea:	68b9      	ldr	r1, [r7, #8]
 800c0ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0ee:	f000 fa8b 	bl	800c608 <prvCopyDataToQueue>
 800c0f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d010      	beq.n	800c11e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fe:	3324      	adds	r3, #36	; 0x24
 800c100:	4618      	mov	r0, r3
 800c102:	f000 ff69 	bl	800cfd8 <xTaskRemoveFromEventList>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d013      	beq.n	800c134 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c10c:	4b3f      	ldr	r3, [pc, #252]	; (800c20c <xQueueGenericSend+0x1f8>)
 800c10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c112:	601a      	str	r2, [r3, #0]
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	e00a      	b.n	800c134 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c120:	2b00      	cmp	r3, #0
 800c122:	d007      	beq.n	800c134 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c124:	4b39      	ldr	r3, [pc, #228]	; (800c20c <xQueueGenericSend+0x1f8>)
 800c126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c12a:	601a      	str	r2, [r3, #0]
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c134:	f001 fa48 	bl	800d5c8 <vPortExitCritical>
				return pdPASS;
 800c138:	2301      	movs	r3, #1
 800c13a:	e063      	b.n	800c204 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d103      	bne.n	800c14a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c142:	f001 fa41 	bl	800d5c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c146:	2300      	movs	r3, #0
 800c148:	e05c      	b.n	800c204 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d106      	bne.n	800c15e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c150:	f107 0314 	add.w	r3, r7, #20
 800c154:	4618      	mov	r0, r3
 800c156:	f000 ffa1 	bl	800d09c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c15a:	2301      	movs	r3, #1
 800c15c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c15e:	f001 fa33 	bl	800d5c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c162:	f000 fd33 	bl	800cbcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c166:	f001 f9ff 	bl	800d568 <vPortEnterCritical>
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c170:	b25b      	sxtb	r3, r3
 800c172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c176:	d103      	bne.n	800c180 <xQueueGenericSend+0x16c>
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	2200      	movs	r2, #0
 800c17c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c186:	b25b      	sxtb	r3, r3
 800c188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c18c:	d103      	bne.n	800c196 <xQueueGenericSend+0x182>
 800c18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c190:	2200      	movs	r2, #0
 800c192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c196:	f001 fa17 	bl	800d5c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c19a:	1d3a      	adds	r2, r7, #4
 800c19c:	f107 0314 	add.w	r3, r7, #20
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 ff90 	bl	800d0c8 <xTaskCheckForTimeOut>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d124      	bne.n	800c1f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c1ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1b0:	f000 fb22 	bl	800c7f8 <prvIsQueueFull>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d018      	beq.n	800c1ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	3310      	adds	r3, #16
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f000 fee4 	bl	800cf90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c1c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1ca:	f000 faad 	bl	800c728 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c1ce:	f000 fd0b 	bl	800cbe8 <xTaskResumeAll>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f47f af7c 	bne.w	800c0d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c1da:	4b0c      	ldr	r3, [pc, #48]	; (800c20c <xQueueGenericSend+0x1f8>)
 800c1dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	e772      	b.n	800c0d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c1ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1ee:	f000 fa9b 	bl	800c728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1f2:	f000 fcf9 	bl	800cbe8 <xTaskResumeAll>
 800c1f6:	e76c      	b.n	800c0d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c1f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1fa:	f000 fa95 	bl	800c728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1fe:	f000 fcf3 	bl	800cbe8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c202:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c204:	4618      	mov	r0, r3
 800c206:	3738      	adds	r7, #56	; 0x38
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	e000ed04 	.word	0xe000ed04

0800c210 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b090      	sub	sp, #64	; 0x40
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
 800c21c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10a      	bne.n	800c23e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c23a:	bf00      	nop
 800c23c:	e7fe      	b.n	800c23c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d103      	bne.n	800c24c <xQueueGenericSendFromISR+0x3c>
 800c244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d101      	bne.n	800c250 <xQueueGenericSendFromISR+0x40>
 800c24c:	2301      	movs	r3, #1
 800c24e:	e000      	b.n	800c252 <xQueueGenericSendFromISR+0x42>
 800c250:	2300      	movs	r3, #0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d10a      	bne.n	800c26c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c268:	bf00      	nop
 800c26a:	e7fe      	b.n	800c26a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d103      	bne.n	800c27a <xQueueGenericSendFromISR+0x6a>
 800c272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c276:	2b01      	cmp	r3, #1
 800c278:	d101      	bne.n	800c27e <xQueueGenericSendFromISR+0x6e>
 800c27a:	2301      	movs	r3, #1
 800c27c:	e000      	b.n	800c280 <xQueueGenericSendFromISR+0x70>
 800c27e:	2300      	movs	r3, #0
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10a      	bne.n	800c29a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c288:	f383 8811 	msr	BASEPRI, r3
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	f3bf 8f4f 	dsb	sy
 800c294:	623b      	str	r3, [r7, #32]
}
 800c296:	bf00      	nop
 800c298:	e7fe      	b.n	800c298 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c29a:	f001 fa17 	bl	800d6cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c29e:	f3ef 8211 	mrs	r2, BASEPRI
 800c2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	61fa      	str	r2, [r7, #28]
 800c2b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c2b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d302      	bcc.n	800c2cc <xQueueGenericSendFromISR+0xbc>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	d12f      	bne.n	800c32c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2dc:	683a      	ldr	r2, [r7, #0]
 800c2de:	68b9      	ldr	r1, [r7, #8]
 800c2e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2e2:	f000 f991 	bl	800c608 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c2e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ee:	d112      	bne.n	800c316 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d016      	beq.n	800c326 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fa:	3324      	adds	r3, #36	; 0x24
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 fe6b 	bl	800cfd8 <xTaskRemoveFromEventList>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00e      	beq.n	800c326 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00b      	beq.n	800c326 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2201      	movs	r2, #1
 800c312:	601a      	str	r2, [r3, #0]
 800c314:	e007      	b.n	800c326 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c316:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c31a:	3301      	adds	r3, #1
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	b25a      	sxtb	r2, r3
 800c320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c326:	2301      	movs	r3, #1
 800c328:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c32a:	e001      	b.n	800c330 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c32c:	2300      	movs	r3, #0
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c332:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c33a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3740      	adds	r7, #64	; 0x40
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
	...

0800c348 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b08c      	sub	sp, #48	; 0x30
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c354:	2300      	movs	r3, #0
 800c356:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d10a      	bne.n	800c378 <xQueueReceive+0x30>
	__asm volatile
 800c362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c366:	f383 8811 	msr	BASEPRI, r3
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	623b      	str	r3, [r7, #32]
}
 800c374:	bf00      	nop
 800c376:	e7fe      	b.n	800c376 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d103      	bne.n	800c386 <xQueueReceive+0x3e>
 800c37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <xQueueReceive+0x42>
 800c386:	2301      	movs	r3, #1
 800c388:	e000      	b.n	800c38c <xQueueReceive+0x44>
 800c38a:	2300      	movs	r3, #0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d10a      	bne.n	800c3a6 <xQueueReceive+0x5e>
	__asm volatile
 800c390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c394:	f383 8811 	msr	BASEPRI, r3
 800c398:	f3bf 8f6f 	isb	sy
 800c39c:	f3bf 8f4f 	dsb	sy
 800c3a0:	61fb      	str	r3, [r7, #28]
}
 800c3a2:	bf00      	nop
 800c3a4:	e7fe      	b.n	800c3a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3a6:	f000 ff5d 	bl	800d264 <xTaskGetSchedulerState>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d102      	bne.n	800c3b6 <xQueueReceive+0x6e>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d101      	bne.n	800c3ba <xQueueReceive+0x72>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e000      	b.n	800c3bc <xQueueReceive+0x74>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d10a      	bne.n	800c3d6 <xQueueReceive+0x8e>
	__asm volatile
 800c3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c4:	f383 8811 	msr	BASEPRI, r3
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	61bb      	str	r3, [r7, #24]
}
 800c3d2:	bf00      	nop
 800c3d4:	e7fe      	b.n	800c3d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3d6:	f001 f8c7 	bl	800d568 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d01f      	beq.n	800c426 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3e6:	68b9      	ldr	r1, [r7, #8]
 800c3e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ea:	f000 f977 	bl	800c6dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f0:	1e5a      	subs	r2, r3, #1
 800c3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00f      	beq.n	800c41e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c400:	3310      	adds	r3, #16
 800c402:	4618      	mov	r0, r3
 800c404:	f000 fde8 	bl	800cfd8 <xTaskRemoveFromEventList>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d007      	beq.n	800c41e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c40e:	4b3d      	ldr	r3, [pc, #244]	; (800c504 <xQueueReceive+0x1bc>)
 800c410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c414:	601a      	str	r2, [r3, #0]
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c41e:	f001 f8d3 	bl	800d5c8 <vPortExitCritical>
				return pdPASS;
 800c422:	2301      	movs	r3, #1
 800c424:	e069      	b.n	800c4fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d103      	bne.n	800c434 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c42c:	f001 f8cc 	bl	800d5c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c430:	2300      	movs	r3, #0
 800c432:	e062      	b.n	800c4fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c436:	2b00      	cmp	r3, #0
 800c438:	d106      	bne.n	800c448 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c43a:	f107 0310 	add.w	r3, r7, #16
 800c43e:	4618      	mov	r0, r3
 800c440:	f000 fe2c 	bl	800d09c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c444:	2301      	movs	r3, #1
 800c446:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c448:	f001 f8be 	bl	800d5c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c44c:	f000 fbbe 	bl	800cbcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c450:	f001 f88a 	bl	800d568 <vPortEnterCritical>
 800c454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c45a:	b25b      	sxtb	r3, r3
 800c45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c460:	d103      	bne.n	800c46a <xQueueReceive+0x122>
 800c462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c464:	2200      	movs	r2, #0
 800c466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c470:	b25b      	sxtb	r3, r3
 800c472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c476:	d103      	bne.n	800c480 <xQueueReceive+0x138>
 800c478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c480:	f001 f8a2 	bl	800d5c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c484:	1d3a      	adds	r2, r7, #4
 800c486:	f107 0310 	add.w	r3, r7, #16
 800c48a:	4611      	mov	r1, r2
 800c48c:	4618      	mov	r0, r3
 800c48e:	f000 fe1b 	bl	800d0c8 <xTaskCheckForTimeOut>
 800c492:	4603      	mov	r3, r0
 800c494:	2b00      	cmp	r3, #0
 800c496:	d123      	bne.n	800c4e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c49a:	f000 f997 	bl	800c7cc <prvIsQueueEmpty>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d017      	beq.n	800c4d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a6:	3324      	adds	r3, #36	; 0x24
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	4611      	mov	r1, r2
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f000 fd6f 	bl	800cf90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4b4:	f000 f938 	bl	800c728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4b8:	f000 fb96 	bl	800cbe8 <xTaskResumeAll>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d189      	bne.n	800c3d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c4c2:	4b10      	ldr	r3, [pc, #64]	; (800c504 <xQueueReceive+0x1bc>)
 800c4c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4c8:	601a      	str	r2, [r3, #0]
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	e780      	b.n	800c3d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c4d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4d6:	f000 f927 	bl	800c728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4da:	f000 fb85 	bl	800cbe8 <xTaskResumeAll>
 800c4de:	e77a      	b.n	800c3d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c4e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4e2:	f000 f921 	bl	800c728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4e6:	f000 fb7f 	bl	800cbe8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4ec:	f000 f96e 	bl	800c7cc <prvIsQueueEmpty>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f43f af6f 	beq.w	800c3d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3730      	adds	r7, #48	; 0x30
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	e000ed04 	.word	0xe000ed04

0800c508 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b08e      	sub	sp, #56	; 0x38
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d10a      	bne.n	800c534 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	623b      	str	r3, [r7, #32]
}
 800c530:	bf00      	nop
 800c532:	e7fe      	b.n	800c532 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d103      	bne.n	800c542 <xQueueReceiveFromISR+0x3a>
 800c53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d101      	bne.n	800c546 <xQueueReceiveFromISR+0x3e>
 800c542:	2301      	movs	r3, #1
 800c544:	e000      	b.n	800c548 <xQueueReceiveFromISR+0x40>
 800c546:	2300      	movs	r3, #0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10a      	bne.n	800c562 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c550:	f383 8811 	msr	BASEPRI, r3
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	61fb      	str	r3, [r7, #28]
}
 800c55e:	bf00      	nop
 800c560:	e7fe      	b.n	800c560 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c562:	f001 f8b3 	bl	800d6cc <vPortValidateInterruptPriority>
	__asm volatile
 800c566:	f3ef 8211 	mrs	r2, BASEPRI
 800c56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56e:	f383 8811 	msr	BASEPRI, r3
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	61ba      	str	r2, [r7, #24]
 800c57c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c57e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c580:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c586:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d02f      	beq.n	800c5ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c598:	68b9      	ldr	r1, [r7, #8]
 800c59a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c59c:	f000 f89e 	bl	800c6dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a2:	1e5a      	subs	r2, r3, #1
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c5a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b0:	d112      	bne.n	800c5d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b4:	691b      	ldr	r3, [r3, #16]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d016      	beq.n	800c5e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5bc:	3310      	adds	r3, #16
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 fd0a 	bl	800cfd8 <xTaskRemoveFromEventList>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00e      	beq.n	800c5e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00b      	beq.n	800c5e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	601a      	str	r2, [r3, #0]
 800c5d6:	e007      	b.n	800c5e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c5d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5dc:	3301      	adds	r3, #1
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	b25a      	sxtb	r2, r3
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	637b      	str	r3, [r7, #52]	; 0x34
 800c5ec:	e001      	b.n	800c5f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	637b      	str	r3, [r7, #52]	; 0x34
 800c5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	f383 8811 	msr	BASEPRI, r3
}
 800c5fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c600:	4618      	mov	r0, r3
 800c602:	3738      	adds	r7, #56	; 0x38
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b086      	sub	sp, #24
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c614:	2300      	movs	r3, #0
 800c616:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c61c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10d      	bne.n	800c642 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d14d      	bne.n	800c6ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	4618      	mov	r0, r3
 800c634:	f000 fe34 	bl	800d2a0 <xTaskPriorityDisinherit>
 800c638:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2200      	movs	r2, #0
 800c63e:	609a      	str	r2, [r3, #8]
 800c640:	e043      	b.n	800c6ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d119      	bne.n	800c67c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6858      	ldr	r0, [r3, #4]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c650:	461a      	mov	r2, r3
 800c652:	68b9      	ldr	r1, [r7, #8]
 800c654:	f001 fdce 	bl	800e1f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c660:	441a      	add	r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	685a      	ldr	r2, [r3, #4]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d32b      	bcc.n	800c6ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	605a      	str	r2, [r3, #4]
 800c67a:	e026      	b.n	800c6ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	68d8      	ldr	r0, [r3, #12]
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c684:	461a      	mov	r2, r3
 800c686:	68b9      	ldr	r1, [r7, #8]
 800c688:	f001 fdb4 	bl	800e1f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	68da      	ldr	r2, [r3, #12]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c694:	425b      	negs	r3, r3
 800c696:	441a      	add	r2, r3
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	68da      	ldr	r2, [r3, #12]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d207      	bcs.n	800c6b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	689a      	ldr	r2, [r3, #8]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b0:	425b      	negs	r3, r3
 800c6b2:	441a      	add	r2, r3
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b02      	cmp	r3, #2
 800c6bc:	d105      	bne.n	800c6ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d002      	beq.n	800c6ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	1c5a      	adds	r2, r3, #1
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c6d2:	697b      	ldr	r3, [r7, #20]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3718      	adds	r7, #24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d018      	beq.n	800c720 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	68da      	ldr	r2, [r3, #12]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f6:	441a      	add	r2, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	68da      	ldr	r2, [r3, #12]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	429a      	cmp	r2, r3
 800c706:	d303      	bcc.n	800c710 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	68d9      	ldr	r1, [r3, #12]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c718:	461a      	mov	r2, r3
 800c71a:	6838      	ldr	r0, [r7, #0]
 800c71c:	f001 fd6a 	bl	800e1f4 <memcpy>
	}
}
 800c720:	bf00      	nop
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c730:	f000 ff1a 	bl	800d568 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c73a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c73c:	e011      	b.n	800c762 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c742:	2b00      	cmp	r3, #0
 800c744:	d012      	beq.n	800c76c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	3324      	adds	r3, #36	; 0x24
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 fc44 	bl	800cfd8 <xTaskRemoveFromEventList>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d001      	beq.n	800c75a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c756:	f000 fd19 	bl	800d18c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c75a:	7bfb      	ldrb	r3, [r7, #15]
 800c75c:	3b01      	subs	r3, #1
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c766:	2b00      	cmp	r3, #0
 800c768:	dce9      	bgt.n	800c73e <prvUnlockQueue+0x16>
 800c76a:	e000      	b.n	800c76e <prvUnlockQueue+0x46>
					break;
 800c76c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	22ff      	movs	r2, #255	; 0xff
 800c772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c776:	f000 ff27 	bl	800d5c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c77a:	f000 fef5 	bl	800d568 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c784:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c786:	e011      	b.n	800c7ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d012      	beq.n	800c7b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3310      	adds	r3, #16
 800c794:	4618      	mov	r0, r3
 800c796:	f000 fc1f 	bl	800cfd8 <xTaskRemoveFromEventList>
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d001      	beq.n	800c7a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c7a0:	f000 fcf4 	bl	800d18c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c7a4:	7bbb      	ldrb	r3, [r7, #14]
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	dce9      	bgt.n	800c788 <prvUnlockQueue+0x60>
 800c7b4:	e000      	b.n	800c7b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c7b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	22ff      	movs	r2, #255	; 0xff
 800c7bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c7c0:	f000 ff02 	bl	800d5c8 <vPortExitCritical>
}
 800c7c4:	bf00      	nop
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7d4:	f000 fec8 	bl	800d568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d102      	bne.n	800c7e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	60fb      	str	r3, [r7, #12]
 800c7e4:	e001      	b.n	800c7ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7ea:	f000 feed 	bl	800d5c8 <vPortExitCritical>

	return xReturn;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3710      	adds	r7, #16
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c800:	f000 feb2 	bl	800d568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d102      	bne.n	800c816 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c810:	2301      	movs	r3, #1
 800c812:	60fb      	str	r3, [r7, #12]
 800c814:	e001      	b.n	800c81a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c816:	2300      	movs	r3, #0
 800c818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c81a:	f000 fed5 	bl	800d5c8 <vPortExitCritical>

	return xReturn;
 800c81e:	68fb      	ldr	r3, [r7, #12]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b08e      	sub	sp, #56	; 0x38
 800c82c:	af04      	add	r7, sp, #16
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d10a      	bne.n	800c852 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	623b      	str	r3, [r7, #32]
}
 800c84e:	bf00      	nop
 800c850:	e7fe      	b.n	800c850 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10a      	bne.n	800c86e <xTaskCreateStatic+0x46>
	__asm volatile
 800c858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	61fb      	str	r3, [r7, #28]
}
 800c86a:	bf00      	nop
 800c86c:	e7fe      	b.n	800c86c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c86e:	2358      	movs	r3, #88	; 0x58
 800c870:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	2b58      	cmp	r3, #88	; 0x58
 800c876:	d00a      	beq.n	800c88e <xTaskCreateStatic+0x66>
	__asm volatile
 800c878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87c:	f383 8811 	msr	BASEPRI, r3
 800c880:	f3bf 8f6f 	isb	sy
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	61bb      	str	r3, [r7, #24]
}
 800c88a:	bf00      	nop
 800c88c:	e7fe      	b.n	800c88c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c88e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c892:	2b00      	cmp	r3, #0
 800c894:	d01e      	beq.n	800c8d4 <xTaskCreateStatic+0xac>
 800c896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d01b      	beq.n	800c8d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a8:	2202      	movs	r2, #2
 800c8aa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	9303      	str	r3, [sp, #12]
 800c8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b4:	9302      	str	r3, [sp, #8]
 800c8b6:	f107 0314 	add.w	r3, r7, #20
 800c8ba:	9301      	str	r3, [sp, #4]
 800c8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	68b9      	ldr	r1, [r7, #8]
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	f000 f850 	bl	800c96c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8ce:	f000 f8df 	bl	800ca90 <prvAddNewTaskToReadyList>
 800c8d2:	e001      	b.n	800c8d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c8d8:	697b      	ldr	r3, [r7, #20]
	}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3728      	adds	r7, #40	; 0x28
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b08c      	sub	sp, #48	; 0x30
 800c8e6:	af04      	add	r7, sp, #16
 800c8e8:	60f8      	str	r0, [r7, #12]
 800c8ea:	60b9      	str	r1, [r7, #8]
 800c8ec:	603b      	str	r3, [r7, #0]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c8f2:	88fb      	ldrh	r3, [r7, #6]
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 ff28 	bl	800d74c <pvPortMalloc>
 800c8fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00e      	beq.n	800c922 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c904:	2058      	movs	r0, #88	; 0x58
 800c906:	f000 ff21 	bl	800d74c <pvPortMalloc>
 800c90a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d003      	beq.n	800c91a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	697a      	ldr	r2, [r7, #20]
 800c916:	631a      	str	r2, [r3, #48]	; 0x30
 800c918:	e005      	b.n	800c926 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c91a:	6978      	ldr	r0, [r7, #20]
 800c91c:	f000 ffe6 	bl	800d8ec <vPortFree>
 800c920:	e001      	b.n	800c926 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c922:	2300      	movs	r3, #0
 800c924:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c926:	69fb      	ldr	r3, [r7, #28]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d017      	beq.n	800c95c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c934:	88fa      	ldrh	r2, [r7, #6]
 800c936:	2300      	movs	r3, #0
 800c938:	9303      	str	r3, [sp, #12]
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	9302      	str	r3, [sp, #8]
 800c93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c940:	9301      	str	r3, [sp, #4]
 800c942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	68b9      	ldr	r1, [r7, #8]
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f000 f80e 	bl	800c96c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c950:	69f8      	ldr	r0, [r7, #28]
 800c952:	f000 f89d 	bl	800ca90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c956:	2301      	movs	r3, #1
 800c958:	61bb      	str	r3, [r7, #24]
 800c95a:	e002      	b.n	800c962 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c95c:	f04f 33ff 	mov.w	r3, #4294967295
 800c960:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c962:	69bb      	ldr	r3, [r7, #24]
	}
 800c964:	4618      	mov	r0, r3
 800c966:	3720      	adds	r7, #32
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b088      	sub	sp, #32
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
 800c978:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	461a      	mov	r2, r3
 800c984:	21a5      	movs	r1, #165	; 0xa5
 800c986:	f001 fc43 	bl	800e210 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c994:	3b01      	subs	r3, #1
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	4413      	add	r3, r2
 800c99a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	f023 0307 	bic.w	r3, r3, #7
 800c9a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00a      	beq.n	800c9c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	617b      	str	r3, [r7, #20]
}
 800c9c0:	bf00      	nop
 800c9c2:	e7fe      	b.n	800c9c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d01f      	beq.n	800ca0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	61fb      	str	r3, [r7, #28]
 800c9ce:	e012      	b.n	800c9f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	7819      	ldrb	r1, [r3, #0]
 800c9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	4413      	add	r3, r2
 800c9de:	3334      	adds	r3, #52	; 0x34
 800c9e0:	460a      	mov	r2, r1
 800c9e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c9e4:	68ba      	ldr	r2, [r7, #8]
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d006      	beq.n	800c9fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	61fb      	str	r3, [r7, #28]
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	2b0f      	cmp	r3, #15
 800c9fa:	d9e9      	bls.n	800c9d0 <prvInitialiseNewTask+0x64>
 800c9fc:	e000      	b.n	800ca00 <prvInitialiseNewTask+0x94>
			{
				break;
 800c9fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ca00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca02:	2200      	movs	r2, #0
 800ca04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca08:	e003      	b.n	800ca12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ca0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ca12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca14:	2b06      	cmp	r3, #6
 800ca16:	d901      	bls.n	800ca1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca18:	2306      	movs	r3, #6
 800ca1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca26:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ca28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca30:	3304      	adds	r3, #4
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7ff f920 	bl	800bc78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ca38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3a:	3318      	adds	r3, #24
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7ff f91b 	bl	800bc78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4a:	f1c3 0207 	rsb	r2, r3, #7
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ca58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca60:	2200      	movs	r2, #0
 800ca62:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca66:	2200      	movs	r2, #0
 800ca68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca6c:	683a      	ldr	r2, [r7, #0]
 800ca6e:	68f9      	ldr	r1, [r7, #12]
 800ca70:	69b8      	ldr	r0, [r7, #24]
 800ca72:	f000 fd01 	bl	800d478 <pxPortInitialiseStack>
 800ca76:	4602      	mov	r2, r0
 800ca78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d002      	beq.n	800ca88 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ca82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca88:	bf00      	nop
 800ca8a:	3720      	adds	r7, #32
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ca98:	f000 fd66 	bl	800d568 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca9c:	4b2a      	ldr	r3, [pc, #168]	; (800cb48 <prvAddNewTaskToReadyList+0xb8>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	3301      	adds	r3, #1
 800caa2:	4a29      	ldr	r2, [pc, #164]	; (800cb48 <prvAddNewTaskToReadyList+0xb8>)
 800caa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800caa6:	4b29      	ldr	r3, [pc, #164]	; (800cb4c <prvAddNewTaskToReadyList+0xbc>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d109      	bne.n	800cac2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800caae:	4a27      	ldr	r2, [pc, #156]	; (800cb4c <prvAddNewTaskToReadyList+0xbc>)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cab4:	4b24      	ldr	r3, [pc, #144]	; (800cb48 <prvAddNewTaskToReadyList+0xb8>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d110      	bne.n	800cade <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cabc:	f000 fb72 	bl	800d1a4 <prvInitialiseTaskLists>
 800cac0:	e00d      	b.n	800cade <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cac2:	4b23      	ldr	r3, [pc, #140]	; (800cb50 <prvAddNewTaskToReadyList+0xc0>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d109      	bne.n	800cade <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800caca:	4b20      	ldr	r3, [pc, #128]	; (800cb4c <prvAddNewTaskToReadyList+0xbc>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d802      	bhi.n	800cade <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cad8:	4a1c      	ldr	r2, [pc, #112]	; (800cb4c <prvAddNewTaskToReadyList+0xbc>)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cade:	4b1d      	ldr	r3, [pc, #116]	; (800cb54 <prvAddNewTaskToReadyList+0xc4>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	3301      	adds	r3, #1
 800cae4:	4a1b      	ldr	r2, [pc, #108]	; (800cb54 <prvAddNewTaskToReadyList+0xc4>)
 800cae6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caec:	2201      	movs	r2, #1
 800caee:	409a      	lsls	r2, r3
 800caf0:	4b19      	ldr	r3, [pc, #100]	; (800cb58 <prvAddNewTaskToReadyList+0xc8>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4313      	orrs	r3, r2
 800caf6:	4a18      	ldr	r2, [pc, #96]	; (800cb58 <prvAddNewTaskToReadyList+0xc8>)
 800caf8:	6013      	str	r3, [r2, #0]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cafe:	4613      	mov	r3, r2
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	4413      	add	r3, r2
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	4a15      	ldr	r2, [pc, #84]	; (800cb5c <prvAddNewTaskToReadyList+0xcc>)
 800cb08:	441a      	add	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	3304      	adds	r3, #4
 800cb0e:	4619      	mov	r1, r3
 800cb10:	4610      	mov	r0, r2
 800cb12:	f7ff f8be 	bl	800bc92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb16:	f000 fd57 	bl	800d5c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb1a:	4b0d      	ldr	r3, [pc, #52]	; (800cb50 <prvAddNewTaskToReadyList+0xc0>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00e      	beq.n	800cb40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb22:	4b0a      	ldr	r3, [pc, #40]	; (800cb4c <prvAddNewTaskToReadyList+0xbc>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d207      	bcs.n	800cb40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb30:	4b0b      	ldr	r3, [pc, #44]	; (800cb60 <prvAddNewTaskToReadyList+0xd0>)
 800cb32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb36:	601a      	str	r2, [r3, #0]
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb40:	bf00      	nop
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	200001cc 	.word	0x200001cc
 800cb4c:	200000d0 	.word	0x200000d0
 800cb50:	200001d8 	.word	0x200001d8
 800cb54:	200001e8 	.word	0x200001e8
 800cb58:	200001d4 	.word	0x200001d4
 800cb5c:	200000d4 	.word	0x200000d4
 800cb60:	e000ed04 	.word	0xe000ed04

0800cb64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d017      	beq.n	800cba6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cb76:	4b13      	ldr	r3, [pc, #76]	; (800cbc4 <vTaskDelay+0x60>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00a      	beq.n	800cb94 <vTaskDelay+0x30>
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	60bb      	str	r3, [r7, #8]
}
 800cb90:	bf00      	nop
 800cb92:	e7fe      	b.n	800cb92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cb94:	f000 f81a 	bl	800cbcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb98:	2100      	movs	r1, #0
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 fc06 	bl	800d3ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cba0:	f000 f822 	bl	800cbe8 <xTaskResumeAll>
 800cba4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d107      	bne.n	800cbbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cbac:	4b06      	ldr	r3, [pc, #24]	; (800cbc8 <vTaskDelay+0x64>)
 800cbae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbb2:	601a      	str	r2, [r3, #0]
 800cbb4:	f3bf 8f4f 	dsb	sy
 800cbb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cbbc:	bf00      	nop
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	200001f0 	.word	0x200001f0
 800cbc8:	e000ed04 	.word	0xe000ed04

0800cbcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cbcc:	b480      	push	{r7}
 800cbce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cbd0:	4b04      	ldr	r3, [pc, #16]	; (800cbe4 <vTaskSuspendAll+0x18>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	4a03      	ldr	r2, [pc, #12]	; (800cbe4 <vTaskSuspendAll+0x18>)
 800cbd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cbda:	bf00      	nop
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr
 800cbe4:	200001f0 	.word	0x200001f0

0800cbe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cbf6:	4b41      	ldr	r3, [pc, #260]	; (800ccfc <xTaskResumeAll+0x114>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d10a      	bne.n	800cc14 <xTaskResumeAll+0x2c>
	__asm volatile
 800cbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	603b      	str	r3, [r7, #0]
}
 800cc10:	bf00      	nop
 800cc12:	e7fe      	b.n	800cc12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc14:	f000 fca8 	bl	800d568 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc18:	4b38      	ldr	r3, [pc, #224]	; (800ccfc <xTaskResumeAll+0x114>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	4a37      	ldr	r2, [pc, #220]	; (800ccfc <xTaskResumeAll+0x114>)
 800cc20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc22:	4b36      	ldr	r3, [pc, #216]	; (800ccfc <xTaskResumeAll+0x114>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d161      	bne.n	800ccee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc2a:	4b35      	ldr	r3, [pc, #212]	; (800cd00 <xTaskResumeAll+0x118>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d05d      	beq.n	800ccee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc32:	e02e      	b.n	800cc92 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc34:	4b33      	ldr	r3, [pc, #204]	; (800cd04 <xTaskResumeAll+0x11c>)
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	3318      	adds	r3, #24
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7ff f883 	bl	800bd4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	3304      	adds	r3, #4
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7ff f87e 	bl	800bd4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc54:	2201      	movs	r2, #1
 800cc56:	409a      	lsls	r2, r3
 800cc58:	4b2b      	ldr	r3, [pc, #172]	; (800cd08 <xTaskResumeAll+0x120>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	4a2a      	ldr	r2, [pc, #168]	; (800cd08 <xTaskResumeAll+0x120>)
 800cc60:	6013      	str	r3, [r2, #0]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc66:	4613      	mov	r3, r2
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	4413      	add	r3, r2
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	4a27      	ldr	r2, [pc, #156]	; (800cd0c <xTaskResumeAll+0x124>)
 800cc70:	441a      	add	r2, r3
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	3304      	adds	r3, #4
 800cc76:	4619      	mov	r1, r3
 800cc78:	4610      	mov	r0, r2
 800cc7a:	f7ff f80a 	bl	800bc92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc82:	4b23      	ldr	r3, [pc, #140]	; (800cd10 <xTaskResumeAll+0x128>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d302      	bcc.n	800cc92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cc8c:	4b21      	ldr	r3, [pc, #132]	; (800cd14 <xTaskResumeAll+0x12c>)
 800cc8e:	2201      	movs	r2, #1
 800cc90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc92:	4b1c      	ldr	r3, [pc, #112]	; (800cd04 <xTaskResumeAll+0x11c>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1cc      	bne.n	800cc34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d001      	beq.n	800cca4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cca0:	f000 fac0 	bl	800d224 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cca4:	4b1c      	ldr	r3, [pc, #112]	; (800cd18 <xTaskResumeAll+0x130>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d010      	beq.n	800ccd2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ccb0:	f000 f836 	bl	800cd20 <xTaskIncrementTick>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d002      	beq.n	800ccc0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ccba:	4b16      	ldr	r3, [pc, #88]	; (800cd14 <xTaskResumeAll+0x12c>)
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	3b01      	subs	r3, #1
 800ccc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1f1      	bne.n	800ccb0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cccc:	4b12      	ldr	r3, [pc, #72]	; (800cd18 <xTaskResumeAll+0x130>)
 800ccce:	2200      	movs	r2, #0
 800ccd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ccd2:	4b10      	ldr	r3, [pc, #64]	; (800cd14 <xTaskResumeAll+0x12c>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d009      	beq.n	800ccee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ccde:	4b0f      	ldr	r3, [pc, #60]	; (800cd1c <xTaskResumeAll+0x134>)
 800cce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cce4:	601a      	str	r2, [r3, #0]
 800cce6:	f3bf 8f4f 	dsb	sy
 800ccea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ccee:	f000 fc6b 	bl	800d5c8 <vPortExitCritical>

	return xAlreadyYielded;
 800ccf2:	68bb      	ldr	r3, [r7, #8]
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	200001f0 	.word	0x200001f0
 800cd00:	200001cc 	.word	0x200001cc
 800cd04:	20000190 	.word	0x20000190
 800cd08:	200001d4 	.word	0x200001d4
 800cd0c:	200000d4 	.word	0x200000d4
 800cd10:	200000d0 	.word	0x200000d0
 800cd14:	200001e0 	.word	0x200001e0
 800cd18:	200001dc 	.word	0x200001dc
 800cd1c:	e000ed04 	.word	0xe000ed04

0800cd20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b086      	sub	sp, #24
 800cd24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cd26:	2300      	movs	r3, #0
 800cd28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd2a:	4b4e      	ldr	r3, [pc, #312]	; (800ce64 <xTaskIncrementTick+0x144>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	f040 808e 	bne.w	800ce50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cd34:	4b4c      	ldr	r3, [pc, #304]	; (800ce68 <xTaskIncrementTick+0x148>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	3301      	adds	r3, #1
 800cd3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cd3c:	4a4a      	ldr	r2, [pc, #296]	; (800ce68 <xTaskIncrementTick+0x148>)
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d120      	bne.n	800cd8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd48:	4b48      	ldr	r3, [pc, #288]	; (800ce6c <xTaskIncrementTick+0x14c>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00a      	beq.n	800cd68 <xTaskIncrementTick+0x48>
	__asm volatile
 800cd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	603b      	str	r3, [r7, #0]
}
 800cd64:	bf00      	nop
 800cd66:	e7fe      	b.n	800cd66 <xTaskIncrementTick+0x46>
 800cd68:	4b40      	ldr	r3, [pc, #256]	; (800ce6c <xTaskIncrementTick+0x14c>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	60fb      	str	r3, [r7, #12]
 800cd6e:	4b40      	ldr	r3, [pc, #256]	; (800ce70 <xTaskIncrementTick+0x150>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a3e      	ldr	r2, [pc, #248]	; (800ce6c <xTaskIncrementTick+0x14c>)
 800cd74:	6013      	str	r3, [r2, #0]
 800cd76:	4a3e      	ldr	r2, [pc, #248]	; (800ce70 <xTaskIncrementTick+0x150>)
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6013      	str	r3, [r2, #0]
 800cd7c:	4b3d      	ldr	r3, [pc, #244]	; (800ce74 <xTaskIncrementTick+0x154>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	3301      	adds	r3, #1
 800cd82:	4a3c      	ldr	r2, [pc, #240]	; (800ce74 <xTaskIncrementTick+0x154>)
 800cd84:	6013      	str	r3, [r2, #0]
 800cd86:	f000 fa4d 	bl	800d224 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd8a:	4b3b      	ldr	r3, [pc, #236]	; (800ce78 <xTaskIncrementTick+0x158>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	693a      	ldr	r2, [r7, #16]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d348      	bcc.n	800ce26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd94:	4b35      	ldr	r3, [pc, #212]	; (800ce6c <xTaskIncrementTick+0x14c>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d104      	bne.n	800cda8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd9e:	4b36      	ldr	r3, [pc, #216]	; (800ce78 <xTaskIncrementTick+0x158>)
 800cda0:	f04f 32ff 	mov.w	r2, #4294967295
 800cda4:	601a      	str	r2, [r3, #0]
					break;
 800cda6:	e03e      	b.n	800ce26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cda8:	4b30      	ldr	r3, [pc, #192]	; (800ce6c <xTaskIncrementTick+0x14c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cdb8:	693a      	ldr	r2, [r7, #16]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d203      	bcs.n	800cdc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cdc0:	4a2d      	ldr	r2, [pc, #180]	; (800ce78 <xTaskIncrementTick+0x158>)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cdc6:	e02e      	b.n	800ce26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	3304      	adds	r3, #4
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7fe ffbd 	bl	800bd4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d004      	beq.n	800cde4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	3318      	adds	r3, #24
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fe ffb4 	bl	800bd4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde8:	2201      	movs	r2, #1
 800cdea:	409a      	lsls	r2, r3
 800cdec:	4b23      	ldr	r3, [pc, #140]	; (800ce7c <xTaskIncrementTick+0x15c>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	4a22      	ldr	r2, [pc, #136]	; (800ce7c <xTaskIncrementTick+0x15c>)
 800cdf4:	6013      	str	r3, [r2, #0]
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	4413      	add	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4a1f      	ldr	r2, [pc, #124]	; (800ce80 <xTaskIncrementTick+0x160>)
 800ce04:	441a      	add	r2, r3
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	3304      	adds	r3, #4
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	f7fe ff40 	bl	800bc92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce16:	4b1b      	ldr	r3, [pc, #108]	; (800ce84 <xTaskIncrementTick+0x164>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d3b9      	bcc.n	800cd94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ce20:	2301      	movs	r3, #1
 800ce22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce24:	e7b6      	b.n	800cd94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ce26:	4b17      	ldr	r3, [pc, #92]	; (800ce84 <xTaskIncrementTick+0x164>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2c:	4914      	ldr	r1, [pc, #80]	; (800ce80 <xTaskIncrementTick+0x160>)
 800ce2e:	4613      	mov	r3, r2
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	4413      	add	r3, r2
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	440b      	add	r3, r1
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d901      	bls.n	800ce42 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ce42:	4b11      	ldr	r3, [pc, #68]	; (800ce88 <xTaskIncrementTick+0x168>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d007      	beq.n	800ce5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	617b      	str	r3, [r7, #20]
 800ce4e:	e004      	b.n	800ce5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ce50:	4b0e      	ldr	r3, [pc, #56]	; (800ce8c <xTaskIncrementTick+0x16c>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	3301      	adds	r3, #1
 800ce56:	4a0d      	ldr	r2, [pc, #52]	; (800ce8c <xTaskIncrementTick+0x16c>)
 800ce58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ce5a:	697b      	ldr	r3, [r7, #20]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3718      	adds	r7, #24
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	200001f0 	.word	0x200001f0
 800ce68:	200001d0 	.word	0x200001d0
 800ce6c:	20000188 	.word	0x20000188
 800ce70:	2000018c 	.word	0x2000018c
 800ce74:	200001e4 	.word	0x200001e4
 800ce78:	200001ec 	.word	0x200001ec
 800ce7c:	200001d4 	.word	0x200001d4
 800ce80:	200000d4 	.word	0x200000d4
 800ce84:	200000d0 	.word	0x200000d0
 800ce88:	200001e0 	.word	0x200001e0
 800ce8c:	200001dc 	.word	0x200001dc

0800ce90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b088      	sub	sp, #32
 800ce94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ce96:	4b39      	ldr	r3, [pc, #228]	; (800cf7c <vTaskSwitchContext+0xec>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d003      	beq.n	800cea6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ce9e:	4b38      	ldr	r3, [pc, #224]	; (800cf80 <vTaskSwitchContext+0xf0>)
 800cea0:	2201      	movs	r2, #1
 800cea2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cea4:	e066      	b.n	800cf74 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800cea6:	4b36      	ldr	r3, [pc, #216]	; (800cf80 <vTaskSwitchContext+0xf0>)
 800cea8:	2200      	movs	r2, #0
 800ceaa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ceac:	4b35      	ldr	r3, [pc, #212]	; (800cf84 <vTaskSwitchContext+0xf4>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb2:	61fb      	str	r3, [r7, #28]
 800ceb4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ceb8:	61bb      	str	r3, [r7, #24]
 800ceba:	69fb      	ldr	r3, [r7, #28]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	69ba      	ldr	r2, [r7, #24]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d111      	bne.n	800cee8 <vTaskSwitchContext+0x58>
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	3304      	adds	r3, #4
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	69ba      	ldr	r2, [r7, #24]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d10b      	bne.n	800cee8 <vTaskSwitchContext+0x58>
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	3308      	adds	r3, #8
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	69ba      	ldr	r2, [r7, #24]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d105      	bne.n	800cee8 <vTaskSwitchContext+0x58>
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	330c      	adds	r3, #12
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	69ba      	ldr	r2, [r7, #24]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d008      	beq.n	800cefa <vTaskSwitchContext+0x6a>
 800cee8:	4b26      	ldr	r3, [pc, #152]	; (800cf84 <vTaskSwitchContext+0xf4>)
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	4b25      	ldr	r3, [pc, #148]	; (800cf84 <vTaskSwitchContext+0xf4>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	3334      	adds	r3, #52	; 0x34
 800cef2:	4619      	mov	r1, r3
 800cef4:	4610      	mov	r0, r2
 800cef6:	f7f4 f833 	bl	8000f60 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cefa:	4b23      	ldr	r3, [pc, #140]	; (800cf88 <vTaskSwitchContext+0xf8>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	fab3 f383 	clz	r3, r3
 800cf06:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cf08:	7afb      	ldrb	r3, [r7, #11]
 800cf0a:	f1c3 031f 	rsb	r3, r3, #31
 800cf0e:	617b      	str	r3, [r7, #20]
 800cf10:	491e      	ldr	r1, [pc, #120]	; (800cf8c <vTaskSwitchContext+0xfc>)
 800cf12:	697a      	ldr	r2, [r7, #20]
 800cf14:	4613      	mov	r3, r2
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	4413      	add	r3, r2
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	440b      	add	r3, r1
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10a      	bne.n	800cf3a <vTaskSwitchContext+0xaa>
	__asm volatile
 800cf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf28:	f383 8811 	msr	BASEPRI, r3
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	607b      	str	r3, [r7, #4]
}
 800cf36:	bf00      	nop
 800cf38:	e7fe      	b.n	800cf38 <vTaskSwitchContext+0xa8>
 800cf3a:	697a      	ldr	r2, [r7, #20]
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	4413      	add	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4a11      	ldr	r2, [pc, #68]	; (800cf8c <vTaskSwitchContext+0xfc>)
 800cf46:	4413      	add	r3, r2
 800cf48:	613b      	str	r3, [r7, #16]
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	685a      	ldr	r2, [r3, #4]
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	605a      	str	r2, [r3, #4]
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	685a      	ldr	r2, [r3, #4]
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	3308      	adds	r3, #8
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d104      	bne.n	800cf6a <vTaskSwitchContext+0xda>
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	685a      	ldr	r2, [r3, #4]
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	605a      	str	r2, [r3, #4]
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	4a04      	ldr	r2, [pc, #16]	; (800cf84 <vTaskSwitchContext+0xf4>)
 800cf72:	6013      	str	r3, [r2, #0]
}
 800cf74:	bf00      	nop
 800cf76:	3720      	adds	r7, #32
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	200001f0 	.word	0x200001f0
 800cf80:	200001e0 	.word	0x200001e0
 800cf84:	200000d0 	.word	0x200000d0
 800cf88:	200001d4 	.word	0x200001d4
 800cf8c:	200000d4 	.word	0x200000d4

0800cf90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d10a      	bne.n	800cfb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa4:	f383 8811 	msr	BASEPRI, r3
 800cfa8:	f3bf 8f6f 	isb	sy
 800cfac:	f3bf 8f4f 	dsb	sy
 800cfb0:	60fb      	str	r3, [r7, #12]
}
 800cfb2:	bf00      	nop
 800cfb4:	e7fe      	b.n	800cfb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cfb6:	4b07      	ldr	r3, [pc, #28]	; (800cfd4 <vTaskPlaceOnEventList+0x44>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	3318      	adds	r3, #24
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f7fe fe8b 	bl	800bcda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cfc4:	2101      	movs	r1, #1
 800cfc6:	6838      	ldr	r0, [r7, #0]
 800cfc8:	f000 f9f0 	bl	800d3ac <prvAddCurrentTaskToDelayedList>
}
 800cfcc:	bf00      	nop
 800cfce:	3710      	adds	r7, #16
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	200000d0 	.word	0x200000d0

0800cfd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b086      	sub	sp, #24
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d10a      	bne.n	800d004 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	60fb      	str	r3, [r7, #12]
}
 800d000:	bf00      	nop
 800d002:	e7fe      	b.n	800d002 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	3318      	adds	r3, #24
 800d008:	4618      	mov	r0, r3
 800d00a:	f7fe fe9f 	bl	800bd4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d00e:	4b1d      	ldr	r3, [pc, #116]	; (800d084 <xTaskRemoveFromEventList+0xac>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d11c      	bne.n	800d050 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	3304      	adds	r3, #4
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7fe fe96 	bl	800bd4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d024:	2201      	movs	r2, #1
 800d026:	409a      	lsls	r2, r3
 800d028:	4b17      	ldr	r3, [pc, #92]	; (800d088 <xTaskRemoveFromEventList+0xb0>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4313      	orrs	r3, r2
 800d02e:	4a16      	ldr	r2, [pc, #88]	; (800d088 <xTaskRemoveFromEventList+0xb0>)
 800d030:	6013      	str	r3, [r2, #0]
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d036:	4613      	mov	r3, r2
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	4413      	add	r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	4a13      	ldr	r2, [pc, #76]	; (800d08c <xTaskRemoveFromEventList+0xb4>)
 800d040:	441a      	add	r2, r3
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	3304      	adds	r3, #4
 800d046:	4619      	mov	r1, r3
 800d048:	4610      	mov	r0, r2
 800d04a:	f7fe fe22 	bl	800bc92 <vListInsertEnd>
 800d04e:	e005      	b.n	800d05c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	3318      	adds	r3, #24
 800d054:	4619      	mov	r1, r3
 800d056:	480e      	ldr	r0, [pc, #56]	; (800d090 <xTaskRemoveFromEventList+0xb8>)
 800d058:	f7fe fe1b 	bl	800bc92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d060:	4b0c      	ldr	r3, [pc, #48]	; (800d094 <xTaskRemoveFromEventList+0xbc>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d066:	429a      	cmp	r2, r3
 800d068:	d905      	bls.n	800d076 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d06a:	2301      	movs	r3, #1
 800d06c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d06e:	4b0a      	ldr	r3, [pc, #40]	; (800d098 <xTaskRemoveFromEventList+0xc0>)
 800d070:	2201      	movs	r2, #1
 800d072:	601a      	str	r2, [r3, #0]
 800d074:	e001      	b.n	800d07a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d076:	2300      	movs	r3, #0
 800d078:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d07a:	697b      	ldr	r3, [r7, #20]
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3718      	adds	r7, #24
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	200001f0 	.word	0x200001f0
 800d088:	200001d4 	.word	0x200001d4
 800d08c:	200000d4 	.word	0x200000d4
 800d090:	20000190 	.word	0x20000190
 800d094:	200000d0 	.word	0x200000d0
 800d098:	200001e0 	.word	0x200001e0

0800d09c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d0a4:	4b06      	ldr	r3, [pc, #24]	; (800d0c0 <vTaskInternalSetTimeOutState+0x24>)
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d0ac:	4b05      	ldr	r3, [pc, #20]	; (800d0c4 <vTaskInternalSetTimeOutState+0x28>)
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	605a      	str	r2, [r3, #4]
}
 800d0b4:	bf00      	nop
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr
 800d0c0:	200001e4 	.word	0x200001e4
 800d0c4:	200001d0 	.word	0x200001d0

0800d0c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b088      	sub	sp, #32
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10a      	bne.n	800d0ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0dc:	f383 8811 	msr	BASEPRI, r3
 800d0e0:	f3bf 8f6f 	isb	sy
 800d0e4:	f3bf 8f4f 	dsb	sy
 800d0e8:	613b      	str	r3, [r7, #16]
}
 800d0ea:	bf00      	nop
 800d0ec:	e7fe      	b.n	800d0ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10a      	bne.n	800d10a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f8:	f383 8811 	msr	BASEPRI, r3
 800d0fc:	f3bf 8f6f 	isb	sy
 800d100:	f3bf 8f4f 	dsb	sy
 800d104:	60fb      	str	r3, [r7, #12]
}
 800d106:	bf00      	nop
 800d108:	e7fe      	b.n	800d108 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d10a:	f000 fa2d 	bl	800d568 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d10e:	4b1d      	ldr	r3, [pc, #116]	; (800d184 <xTaskCheckForTimeOut+0xbc>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	69ba      	ldr	r2, [r7, #24]
 800d11a:	1ad3      	subs	r3, r2, r3
 800d11c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d126:	d102      	bne.n	800d12e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d128:	2300      	movs	r3, #0
 800d12a:	61fb      	str	r3, [r7, #28]
 800d12c:	e023      	b.n	800d176 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	4b15      	ldr	r3, [pc, #84]	; (800d188 <xTaskCheckForTimeOut+0xc0>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	429a      	cmp	r2, r3
 800d138:	d007      	beq.n	800d14a <xTaskCheckForTimeOut+0x82>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	69ba      	ldr	r2, [r7, #24]
 800d140:	429a      	cmp	r2, r3
 800d142:	d302      	bcc.n	800d14a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d144:	2301      	movs	r3, #1
 800d146:	61fb      	str	r3, [r7, #28]
 800d148:	e015      	b.n	800d176 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	697a      	ldr	r2, [r7, #20]
 800d150:	429a      	cmp	r2, r3
 800d152:	d20b      	bcs.n	800d16c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	1ad2      	subs	r2, r2, r3
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f7ff ff9b 	bl	800d09c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d166:	2300      	movs	r3, #0
 800d168:	61fb      	str	r3, [r7, #28]
 800d16a:	e004      	b.n	800d176 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2200      	movs	r2, #0
 800d170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d172:	2301      	movs	r3, #1
 800d174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d176:	f000 fa27 	bl	800d5c8 <vPortExitCritical>

	return xReturn;
 800d17a:	69fb      	ldr	r3, [r7, #28]
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3720      	adds	r7, #32
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	200001d0 	.word	0x200001d0
 800d188:	200001e4 	.word	0x200001e4

0800d18c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d18c:	b480      	push	{r7}
 800d18e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d190:	4b03      	ldr	r3, [pc, #12]	; (800d1a0 <vTaskMissedYield+0x14>)
 800d192:	2201      	movs	r2, #1
 800d194:	601a      	str	r2, [r3, #0]
}
 800d196:	bf00      	nop
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr
 800d1a0:	200001e0 	.word	0x200001e0

0800d1a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	607b      	str	r3, [r7, #4]
 800d1ae:	e00c      	b.n	800d1ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	4413      	add	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4a12      	ldr	r2, [pc, #72]	; (800d204 <prvInitialiseTaskLists+0x60>)
 800d1bc:	4413      	add	r3, r2
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fe fd3a 	bl	800bc38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	607b      	str	r3, [r7, #4]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b06      	cmp	r3, #6
 800d1ce:	d9ef      	bls.n	800d1b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d1d0:	480d      	ldr	r0, [pc, #52]	; (800d208 <prvInitialiseTaskLists+0x64>)
 800d1d2:	f7fe fd31 	bl	800bc38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d1d6:	480d      	ldr	r0, [pc, #52]	; (800d20c <prvInitialiseTaskLists+0x68>)
 800d1d8:	f7fe fd2e 	bl	800bc38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d1dc:	480c      	ldr	r0, [pc, #48]	; (800d210 <prvInitialiseTaskLists+0x6c>)
 800d1de:	f7fe fd2b 	bl	800bc38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d1e2:	480c      	ldr	r0, [pc, #48]	; (800d214 <prvInitialiseTaskLists+0x70>)
 800d1e4:	f7fe fd28 	bl	800bc38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d1e8:	480b      	ldr	r0, [pc, #44]	; (800d218 <prvInitialiseTaskLists+0x74>)
 800d1ea:	f7fe fd25 	bl	800bc38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d1ee:	4b0b      	ldr	r3, [pc, #44]	; (800d21c <prvInitialiseTaskLists+0x78>)
 800d1f0:	4a05      	ldr	r2, [pc, #20]	; (800d208 <prvInitialiseTaskLists+0x64>)
 800d1f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d1f4:	4b0a      	ldr	r3, [pc, #40]	; (800d220 <prvInitialiseTaskLists+0x7c>)
 800d1f6:	4a05      	ldr	r2, [pc, #20]	; (800d20c <prvInitialiseTaskLists+0x68>)
 800d1f8:	601a      	str	r2, [r3, #0]
}
 800d1fa:	bf00      	nop
 800d1fc:	3708      	adds	r7, #8
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	200000d4 	.word	0x200000d4
 800d208:	20000160 	.word	0x20000160
 800d20c:	20000174 	.word	0x20000174
 800d210:	20000190 	.word	0x20000190
 800d214:	200001a4 	.word	0x200001a4
 800d218:	200001b8 	.word	0x200001b8
 800d21c:	20000188 	.word	0x20000188
 800d220:	2000018c 	.word	0x2000018c

0800d224 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d22a:	4b0c      	ldr	r3, [pc, #48]	; (800d25c <prvResetNextTaskUnblockTime+0x38>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d104      	bne.n	800d23e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d234:	4b0a      	ldr	r3, [pc, #40]	; (800d260 <prvResetNextTaskUnblockTime+0x3c>)
 800d236:	f04f 32ff 	mov.w	r2, #4294967295
 800d23a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d23c:	e008      	b.n	800d250 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d23e:	4b07      	ldr	r3, [pc, #28]	; (800d25c <prvResetNextTaskUnblockTime+0x38>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	4a04      	ldr	r2, [pc, #16]	; (800d260 <prvResetNextTaskUnblockTime+0x3c>)
 800d24e:	6013      	str	r3, [r2, #0]
}
 800d250:	bf00      	nop
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr
 800d25c:	20000188 	.word	0x20000188
 800d260:	200001ec 	.word	0x200001ec

0800d264 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d26a:	4b0b      	ldr	r3, [pc, #44]	; (800d298 <xTaskGetSchedulerState+0x34>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d102      	bne.n	800d278 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d272:	2301      	movs	r3, #1
 800d274:	607b      	str	r3, [r7, #4]
 800d276:	e008      	b.n	800d28a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d278:	4b08      	ldr	r3, [pc, #32]	; (800d29c <xTaskGetSchedulerState+0x38>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d102      	bne.n	800d286 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d280:	2302      	movs	r3, #2
 800d282:	607b      	str	r3, [r7, #4]
 800d284:	e001      	b.n	800d28a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d286:	2300      	movs	r3, #0
 800d288:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d28a:	687b      	ldr	r3, [r7, #4]
	}
 800d28c:	4618      	mov	r0, r3
 800d28e:	370c      	adds	r7, #12
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr
 800d298:	200001d8 	.word	0x200001d8
 800d29c:	200001f0 	.word	0x200001f0

0800d2a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d06e      	beq.n	800d394 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d2b6:	4b3a      	ldr	r3, [pc, #232]	; (800d3a0 <xTaskPriorityDisinherit+0x100>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	693a      	ldr	r2, [r7, #16]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d00a      	beq.n	800d2d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c4:	f383 8811 	msr	BASEPRI, r3
 800d2c8:	f3bf 8f6f 	isb	sy
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	60fb      	str	r3, [r7, #12]
}
 800d2d2:	bf00      	nop
 800d2d4:	e7fe      	b.n	800d2d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d10a      	bne.n	800d2f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e2:	f383 8811 	msr	BASEPRI, r3
 800d2e6:	f3bf 8f6f 	isb	sy
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	60bb      	str	r3, [r7, #8]
}
 800d2f0:	bf00      	nop
 800d2f2:	e7fe      	b.n	800d2f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2f8:	1e5a      	subs	r2, r3, #1
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d306:	429a      	cmp	r2, r3
 800d308:	d044      	beq.n	800d394 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d140      	bne.n	800d394 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	3304      	adds	r3, #4
 800d316:	4618      	mov	r0, r3
 800d318:	f7fe fd18 	bl	800bd4c <uxListRemove>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d115      	bne.n	800d34e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d326:	491f      	ldr	r1, [pc, #124]	; (800d3a4 <xTaskPriorityDisinherit+0x104>)
 800d328:	4613      	mov	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4413      	add	r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	440b      	add	r3, r1
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10a      	bne.n	800d34e <xTaskPriorityDisinherit+0xae>
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33c:	2201      	movs	r2, #1
 800d33e:	fa02 f303 	lsl.w	r3, r2, r3
 800d342:	43da      	mvns	r2, r3
 800d344:	4b18      	ldr	r3, [pc, #96]	; (800d3a8 <xTaskPriorityDisinherit+0x108>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4013      	ands	r3, r2
 800d34a:	4a17      	ldr	r2, [pc, #92]	; (800d3a8 <xTaskPriorityDisinherit+0x108>)
 800d34c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35a:	f1c3 0207 	rsb	r2, r3, #7
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d366:	2201      	movs	r2, #1
 800d368:	409a      	lsls	r2, r3
 800d36a:	4b0f      	ldr	r3, [pc, #60]	; (800d3a8 <xTaskPriorityDisinherit+0x108>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4313      	orrs	r3, r2
 800d370:	4a0d      	ldr	r2, [pc, #52]	; (800d3a8 <xTaskPriorityDisinherit+0x108>)
 800d372:	6013      	str	r3, [r2, #0]
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d378:	4613      	mov	r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4413      	add	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4a08      	ldr	r2, [pc, #32]	; (800d3a4 <xTaskPriorityDisinherit+0x104>)
 800d382:	441a      	add	r2, r3
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	3304      	adds	r3, #4
 800d388:	4619      	mov	r1, r3
 800d38a:	4610      	mov	r0, r2
 800d38c:	f7fe fc81 	bl	800bc92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d390:	2301      	movs	r3, #1
 800d392:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d394:	697b      	ldr	r3, [r7, #20]
	}
 800d396:	4618      	mov	r0, r3
 800d398:	3718      	adds	r7, #24
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	200000d0 	.word	0x200000d0
 800d3a4:	200000d4 	.word	0x200000d4
 800d3a8:	200001d4 	.word	0x200001d4

0800d3ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d3b6:	4b29      	ldr	r3, [pc, #164]	; (800d45c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3bc:	4b28      	ldr	r3, [pc, #160]	; (800d460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	3304      	adds	r3, #4
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fe fcc2 	bl	800bd4c <uxListRemove>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d10b      	bne.n	800d3e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d3ce:	4b24      	ldr	r3, [pc, #144]	; (800d460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3da:	43da      	mvns	r2, r3
 800d3dc:	4b21      	ldr	r3, [pc, #132]	; (800d464 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4013      	ands	r3, r2
 800d3e2:	4a20      	ldr	r2, [pc, #128]	; (800d464 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ec:	d10a      	bne.n	800d404 <prvAddCurrentTaskToDelayedList+0x58>
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d007      	beq.n	800d404 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3f4:	4b1a      	ldr	r3, [pc, #104]	; (800d460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	3304      	adds	r3, #4
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	481a      	ldr	r0, [pc, #104]	; (800d468 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d3fe:	f7fe fc48 	bl	800bc92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d402:	e026      	b.n	800d452 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4413      	add	r3, r2
 800d40a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d40c:	4b14      	ldr	r3, [pc, #80]	; (800d460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	68ba      	ldr	r2, [r7, #8]
 800d412:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d414:	68ba      	ldr	r2, [r7, #8]
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d209      	bcs.n	800d430 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d41c:	4b13      	ldr	r3, [pc, #76]	; (800d46c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	4b0f      	ldr	r3, [pc, #60]	; (800d460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	3304      	adds	r3, #4
 800d426:	4619      	mov	r1, r3
 800d428:	4610      	mov	r0, r2
 800d42a:	f7fe fc56 	bl	800bcda <vListInsert>
}
 800d42e:	e010      	b.n	800d452 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d430:	4b0f      	ldr	r3, [pc, #60]	; (800d470 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	4b0a      	ldr	r3, [pc, #40]	; (800d460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	3304      	adds	r3, #4
 800d43a:	4619      	mov	r1, r3
 800d43c:	4610      	mov	r0, r2
 800d43e:	f7fe fc4c 	bl	800bcda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d442:	4b0c      	ldr	r3, [pc, #48]	; (800d474 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	68ba      	ldr	r2, [r7, #8]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d202      	bcs.n	800d452 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d44c:	4a09      	ldr	r2, [pc, #36]	; (800d474 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	6013      	str	r3, [r2, #0]
}
 800d452:	bf00      	nop
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	200001d0 	.word	0x200001d0
 800d460:	200000d0 	.word	0x200000d0
 800d464:	200001d4 	.word	0x200001d4
 800d468:	200001b8 	.word	0x200001b8
 800d46c:	2000018c 	.word	0x2000018c
 800d470:	20000188 	.word	0x20000188
 800d474:	200001ec 	.word	0x200001ec

0800d478 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d478:	b480      	push	{r7}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	3b04      	subs	r3, #4
 800d488:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	3b04      	subs	r3, #4
 800d496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	f023 0201 	bic.w	r2, r3, #1
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	3b04      	subs	r3, #4
 800d4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4a8:	4a0c      	ldr	r2, [pc, #48]	; (800d4dc <pxPortInitialiseStack+0x64>)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	3b14      	subs	r3, #20
 800d4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	3b04      	subs	r3, #4
 800d4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f06f 0202 	mvn.w	r2, #2
 800d4c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	3b20      	subs	r3, #32
 800d4cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3714      	adds	r7, #20
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	0800d4e1 	.word	0x0800d4e1

0800d4e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d4ea:	4b12      	ldr	r3, [pc, #72]	; (800d534 <prvTaskExitError+0x54>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f2:	d00a      	beq.n	800d50a <prvTaskExitError+0x2a>
	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	60fb      	str	r3, [r7, #12]
}
 800d506:	bf00      	nop
 800d508:	e7fe      	b.n	800d508 <prvTaskExitError+0x28>
	__asm volatile
 800d50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50e:	f383 8811 	msr	BASEPRI, r3
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	60bb      	str	r3, [r7, #8]
}
 800d51c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d51e:	bf00      	nop
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d0fc      	beq.n	800d520 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d526:	bf00      	nop
 800d528:	bf00      	nop
 800d52a:	3714      	adds	r7, #20
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr
 800d534:	20000034 	.word	0x20000034
	...

0800d540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d540:	4b07      	ldr	r3, [pc, #28]	; (800d560 <pxCurrentTCBConst2>)
 800d542:	6819      	ldr	r1, [r3, #0]
 800d544:	6808      	ldr	r0, [r1, #0]
 800d546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54a:	f380 8809 	msr	PSP, r0
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f04f 0000 	mov.w	r0, #0
 800d556:	f380 8811 	msr	BASEPRI, r0
 800d55a:	4770      	bx	lr
 800d55c:	f3af 8000 	nop.w

0800d560 <pxCurrentTCBConst2>:
 800d560:	200000d0 	.word	0x200000d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d564:	bf00      	nop
 800d566:	bf00      	nop

0800d568 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
	__asm volatile
 800d56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d572:	f383 8811 	msr	BASEPRI, r3
 800d576:	f3bf 8f6f 	isb	sy
 800d57a:	f3bf 8f4f 	dsb	sy
 800d57e:	607b      	str	r3, [r7, #4]
}
 800d580:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d582:	4b0f      	ldr	r3, [pc, #60]	; (800d5c0 <vPortEnterCritical+0x58>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	3301      	adds	r3, #1
 800d588:	4a0d      	ldr	r2, [pc, #52]	; (800d5c0 <vPortEnterCritical+0x58>)
 800d58a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d58c:	4b0c      	ldr	r3, [pc, #48]	; (800d5c0 <vPortEnterCritical+0x58>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d10f      	bne.n	800d5b4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d594:	4b0b      	ldr	r3, [pc, #44]	; (800d5c4 <vPortEnterCritical+0x5c>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00a      	beq.n	800d5b4 <vPortEnterCritical+0x4c>
	__asm volatile
 800d59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	603b      	str	r3, [r7, #0]
}
 800d5b0:	bf00      	nop
 800d5b2:	e7fe      	b.n	800d5b2 <vPortEnterCritical+0x4a>
	}
}
 800d5b4:	bf00      	nop
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	20000034 	.word	0x20000034
 800d5c4:	e000ed04 	.word	0xe000ed04

0800d5c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d5ce:	4b12      	ldr	r3, [pc, #72]	; (800d618 <vPortExitCritical+0x50>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d10a      	bne.n	800d5ec <vPortExitCritical+0x24>
	__asm volatile
 800d5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5da:	f383 8811 	msr	BASEPRI, r3
 800d5de:	f3bf 8f6f 	isb	sy
 800d5e2:	f3bf 8f4f 	dsb	sy
 800d5e6:	607b      	str	r3, [r7, #4]
}
 800d5e8:	bf00      	nop
 800d5ea:	e7fe      	b.n	800d5ea <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d5ec:	4b0a      	ldr	r3, [pc, #40]	; (800d618 <vPortExitCritical+0x50>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	4a09      	ldr	r2, [pc, #36]	; (800d618 <vPortExitCritical+0x50>)
 800d5f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d5f6:	4b08      	ldr	r3, [pc, #32]	; (800d618 <vPortExitCritical+0x50>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d105      	bne.n	800d60a <vPortExitCritical+0x42>
 800d5fe:	2300      	movs	r3, #0
 800d600:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	f383 8811 	msr	BASEPRI, r3
}
 800d608:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d60a:	bf00      	nop
 800d60c:	370c      	adds	r7, #12
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop
 800d618:	20000034 	.word	0x20000034
 800d61c:	00000000 	.word	0x00000000

0800d620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d620:	f3ef 8009 	mrs	r0, PSP
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	4b15      	ldr	r3, [pc, #84]	; (800d680 <pxCurrentTCBConst>)
 800d62a:	681a      	ldr	r2, [r3, #0]
 800d62c:	f01e 0f10 	tst.w	lr, #16
 800d630:	bf08      	it	eq
 800d632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d63a:	6010      	str	r0, [r2, #0]
 800d63c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d640:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d644:	f380 8811 	msr	BASEPRI, r0
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	f3bf 8f6f 	isb	sy
 800d650:	f7ff fc1e 	bl	800ce90 <vTaskSwitchContext>
 800d654:	f04f 0000 	mov.w	r0, #0
 800d658:	f380 8811 	msr	BASEPRI, r0
 800d65c:	bc09      	pop	{r0, r3}
 800d65e:	6819      	ldr	r1, [r3, #0]
 800d660:	6808      	ldr	r0, [r1, #0]
 800d662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d666:	f01e 0f10 	tst.w	lr, #16
 800d66a:	bf08      	it	eq
 800d66c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d670:	f380 8809 	msr	PSP, r0
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	f3af 8000 	nop.w

0800d680 <pxCurrentTCBConst>:
 800d680:	200000d0 	.word	0x200000d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d684:	bf00      	nop
 800d686:	bf00      	nop

0800d688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
	__asm volatile
 800d68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d692:	f383 8811 	msr	BASEPRI, r3
 800d696:	f3bf 8f6f 	isb	sy
 800d69a:	f3bf 8f4f 	dsb	sy
 800d69e:	607b      	str	r3, [r7, #4]
}
 800d6a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d6a2:	f7ff fb3d 	bl	800cd20 <xTaskIncrementTick>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d003      	beq.n	800d6b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d6ac:	4b06      	ldr	r3, [pc, #24]	; (800d6c8 <SysTick_Handler+0x40>)
 800d6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b2:	601a      	str	r2, [r3, #0]
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	f383 8811 	msr	BASEPRI, r3
}
 800d6be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	e000ed04 	.word	0xe000ed04

0800d6cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b085      	sub	sp, #20
 800d6d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d6d2:	f3ef 8305 	mrs	r3, IPSR
 800d6d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2b0f      	cmp	r3, #15
 800d6dc:	d914      	bls.n	800d708 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d6de:	4a17      	ldr	r2, [pc, #92]	; (800d73c <vPortValidateInterruptPriority+0x70>)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d6e8:	4b15      	ldr	r3, [pc, #84]	; (800d740 <vPortValidateInterruptPriority+0x74>)
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	7afa      	ldrb	r2, [r7, #11]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d20a      	bcs.n	800d708 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f6:	f383 8811 	msr	BASEPRI, r3
 800d6fa:	f3bf 8f6f 	isb	sy
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	607b      	str	r3, [r7, #4]
}
 800d704:	bf00      	nop
 800d706:	e7fe      	b.n	800d706 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d708:	4b0e      	ldr	r3, [pc, #56]	; (800d744 <vPortValidateInterruptPriority+0x78>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d710:	4b0d      	ldr	r3, [pc, #52]	; (800d748 <vPortValidateInterruptPriority+0x7c>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	429a      	cmp	r2, r3
 800d716:	d90a      	bls.n	800d72e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	603b      	str	r3, [r7, #0]
}
 800d72a:	bf00      	nop
 800d72c:	e7fe      	b.n	800d72c <vPortValidateInterruptPriority+0x60>
	}
 800d72e:	bf00      	nop
 800d730:	3714      	adds	r7, #20
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	e000e3f0 	.word	0xe000e3f0
 800d740:	200001f4 	.word	0x200001f4
 800d744:	e000ed0c 	.word	0xe000ed0c
 800d748:	200001f8 	.word	0x200001f8

0800d74c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b08a      	sub	sp, #40	; 0x28
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d754:	2300      	movs	r3, #0
 800d756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d758:	f7ff fa38 	bl	800cbcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d75c:	4b5d      	ldr	r3, [pc, #372]	; (800d8d4 <pvPortMalloc+0x188>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d101      	bne.n	800d768 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d764:	f000 f924 	bl	800d9b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d768:	4b5b      	ldr	r3, [pc, #364]	; (800d8d8 <pvPortMalloc+0x18c>)
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4013      	ands	r3, r2
 800d770:	2b00      	cmp	r3, #0
 800d772:	f040 8093 	bne.w	800d89c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d01d      	beq.n	800d7b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d77c:	2208      	movs	r2, #8
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4413      	add	r3, r2
 800d782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f003 0307 	and.w	r3, r3, #7
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d014      	beq.n	800d7b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f023 0307 	bic.w	r3, r3, #7
 800d794:	3308      	adds	r3, #8
 800d796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f003 0307 	and.w	r3, r3, #7
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d00a      	beq.n	800d7b8 <pvPortMalloc+0x6c>
	__asm volatile
 800d7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a6:	f383 8811 	msr	BASEPRI, r3
 800d7aa:	f3bf 8f6f 	isb	sy
 800d7ae:	f3bf 8f4f 	dsb	sy
 800d7b2:	617b      	str	r3, [r7, #20]
}
 800d7b4:	bf00      	nop
 800d7b6:	e7fe      	b.n	800d7b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d06e      	beq.n	800d89c <pvPortMalloc+0x150>
 800d7be:	4b47      	ldr	r3, [pc, #284]	; (800d8dc <pvPortMalloc+0x190>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d869      	bhi.n	800d89c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d7c8:	4b45      	ldr	r3, [pc, #276]	; (800d8e0 <pvPortMalloc+0x194>)
 800d7ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d7cc:	4b44      	ldr	r3, [pc, #272]	; (800d8e0 <pvPortMalloc+0x194>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7d2:	e004      	b.n	800d7de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d903      	bls.n	800d7f0 <pvPortMalloc+0xa4>
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d1f1      	bne.n	800d7d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d7f0:	4b38      	ldr	r3, [pc, #224]	; (800d8d4 <pvPortMalloc+0x188>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d050      	beq.n	800d89c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d7fa:	6a3b      	ldr	r3, [r7, #32]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2208      	movs	r2, #8
 800d800:	4413      	add	r3, r2
 800d802:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	6a3b      	ldr	r3, [r7, #32]
 800d80a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80e:	685a      	ldr	r2, [r3, #4]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	1ad2      	subs	r2, r2, r3
 800d814:	2308      	movs	r3, #8
 800d816:	005b      	lsls	r3, r3, #1
 800d818:	429a      	cmp	r2, r3
 800d81a:	d91f      	bls.n	800d85c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4413      	add	r3, r2
 800d822:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	f003 0307 	and.w	r3, r3, #7
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00a      	beq.n	800d844 <pvPortMalloc+0xf8>
	__asm volatile
 800d82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d832:	f383 8811 	msr	BASEPRI, r3
 800d836:	f3bf 8f6f 	isb	sy
 800d83a:	f3bf 8f4f 	dsb	sy
 800d83e:	613b      	str	r3, [r7, #16]
}
 800d840:	bf00      	nop
 800d842:	e7fe      	b.n	800d842 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	685a      	ldr	r2, [r3, #4]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	1ad2      	subs	r2, r2, r3
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d856:	69b8      	ldr	r0, [r7, #24]
 800d858:	f000 f90c 	bl	800da74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d85c:	4b1f      	ldr	r3, [pc, #124]	; (800d8dc <pvPortMalloc+0x190>)
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	1ad3      	subs	r3, r2, r3
 800d866:	4a1d      	ldr	r2, [pc, #116]	; (800d8dc <pvPortMalloc+0x190>)
 800d868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d86a:	4b1c      	ldr	r3, [pc, #112]	; (800d8dc <pvPortMalloc+0x190>)
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	4b1d      	ldr	r3, [pc, #116]	; (800d8e4 <pvPortMalloc+0x198>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	429a      	cmp	r2, r3
 800d874:	d203      	bcs.n	800d87e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d876:	4b19      	ldr	r3, [pc, #100]	; (800d8dc <pvPortMalloc+0x190>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4a1a      	ldr	r2, [pc, #104]	; (800d8e4 <pvPortMalloc+0x198>)
 800d87c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	685a      	ldr	r2, [r3, #4]
 800d882:	4b15      	ldr	r3, [pc, #84]	; (800d8d8 <pvPortMalloc+0x18c>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	431a      	orrs	r2, r3
 800d888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88e:	2200      	movs	r2, #0
 800d890:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d892:	4b15      	ldr	r3, [pc, #84]	; (800d8e8 <pvPortMalloc+0x19c>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	3301      	adds	r3, #1
 800d898:	4a13      	ldr	r2, [pc, #76]	; (800d8e8 <pvPortMalloc+0x19c>)
 800d89a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d89c:	f7ff f9a4 	bl	800cbe8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d101      	bne.n	800d8aa <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d8a6:	f7f3 fb66 	bl	8000f76 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	f003 0307 	and.w	r3, r3, #7
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00a      	beq.n	800d8ca <pvPortMalloc+0x17e>
	__asm volatile
 800d8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b8:	f383 8811 	msr	BASEPRI, r3
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	60fb      	str	r3, [r7, #12]
}
 800d8c6:	bf00      	nop
 800d8c8:	e7fe      	b.n	800d8c8 <pvPortMalloc+0x17c>
	return pvReturn;
 800d8ca:	69fb      	ldr	r3, [r7, #28]
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3728      	adds	r7, #40	; 0x28
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	20008204 	.word	0x20008204
 800d8d8:	20008218 	.word	0x20008218
 800d8dc:	20008208 	.word	0x20008208
 800d8e0:	200081fc 	.word	0x200081fc
 800d8e4:	2000820c 	.word	0x2000820c
 800d8e8:	20008210 	.word	0x20008210

0800d8ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b086      	sub	sp, #24
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d04d      	beq.n	800d99a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d8fe:	2308      	movs	r3, #8
 800d900:	425b      	negs	r3, r3
 800d902:	697a      	ldr	r2, [r7, #20]
 800d904:	4413      	add	r3, r2
 800d906:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	685a      	ldr	r2, [r3, #4]
 800d910:	4b24      	ldr	r3, [pc, #144]	; (800d9a4 <vPortFree+0xb8>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4013      	ands	r3, r2
 800d916:	2b00      	cmp	r3, #0
 800d918:	d10a      	bne.n	800d930 <vPortFree+0x44>
	__asm volatile
 800d91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91e:	f383 8811 	msr	BASEPRI, r3
 800d922:	f3bf 8f6f 	isb	sy
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	60fb      	str	r3, [r7, #12]
}
 800d92c:	bf00      	nop
 800d92e:	e7fe      	b.n	800d92e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00a      	beq.n	800d94e <vPortFree+0x62>
	__asm volatile
 800d938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d93c:	f383 8811 	msr	BASEPRI, r3
 800d940:	f3bf 8f6f 	isb	sy
 800d944:	f3bf 8f4f 	dsb	sy
 800d948:	60bb      	str	r3, [r7, #8]
}
 800d94a:	bf00      	nop
 800d94c:	e7fe      	b.n	800d94c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	685a      	ldr	r2, [r3, #4]
 800d952:	4b14      	ldr	r3, [pc, #80]	; (800d9a4 <vPortFree+0xb8>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4013      	ands	r3, r2
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d01e      	beq.n	800d99a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d11a      	bne.n	800d99a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	685a      	ldr	r2, [r3, #4]
 800d968:	4b0e      	ldr	r3, [pc, #56]	; (800d9a4 <vPortFree+0xb8>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	43db      	mvns	r3, r3
 800d96e:	401a      	ands	r2, r3
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d974:	f7ff f92a 	bl	800cbcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	4b0a      	ldr	r3, [pc, #40]	; (800d9a8 <vPortFree+0xbc>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4413      	add	r3, r2
 800d982:	4a09      	ldr	r2, [pc, #36]	; (800d9a8 <vPortFree+0xbc>)
 800d984:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d986:	6938      	ldr	r0, [r7, #16]
 800d988:	f000 f874 	bl	800da74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d98c:	4b07      	ldr	r3, [pc, #28]	; (800d9ac <vPortFree+0xc0>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	3301      	adds	r3, #1
 800d992:	4a06      	ldr	r2, [pc, #24]	; (800d9ac <vPortFree+0xc0>)
 800d994:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d996:	f7ff f927 	bl	800cbe8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d99a:	bf00      	nop
 800d99c:	3718      	adds	r7, #24
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	20008218 	.word	0x20008218
 800d9a8:	20008208 	.word	0x20008208
 800d9ac:	20008214 	.word	0x20008214

0800d9b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b085      	sub	sp, #20
 800d9b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d9b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d9bc:	4b27      	ldr	r3, [pc, #156]	; (800da5c <prvHeapInit+0xac>)
 800d9be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f003 0307 	and.w	r3, r3, #7
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00c      	beq.n	800d9e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	3307      	adds	r3, #7
 800d9ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f023 0307 	bic.w	r3, r3, #7
 800d9d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d9d8:	68ba      	ldr	r2, [r7, #8]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	1ad3      	subs	r3, r2, r3
 800d9de:	4a1f      	ldr	r2, [pc, #124]	; (800da5c <prvHeapInit+0xac>)
 800d9e0:	4413      	add	r3, r2
 800d9e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d9e8:	4a1d      	ldr	r2, [pc, #116]	; (800da60 <prvHeapInit+0xb0>)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d9ee:	4b1c      	ldr	r3, [pc, #112]	; (800da60 <prvHeapInit+0xb0>)
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	68ba      	ldr	r2, [r7, #8]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d9fc:	2208      	movs	r2, #8
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	1a9b      	subs	r3, r3, r2
 800da02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f023 0307 	bic.w	r3, r3, #7
 800da0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	4a15      	ldr	r2, [pc, #84]	; (800da64 <prvHeapInit+0xb4>)
 800da10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800da12:	4b14      	ldr	r3, [pc, #80]	; (800da64 <prvHeapInit+0xb4>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2200      	movs	r2, #0
 800da18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800da1a:	4b12      	ldr	r3, [pc, #72]	; (800da64 <prvHeapInit+0xb4>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2200      	movs	r2, #0
 800da20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	1ad2      	subs	r2, r2, r3
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da30:	4b0c      	ldr	r3, [pc, #48]	; (800da64 <prvHeapInit+0xb4>)
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	4a0a      	ldr	r2, [pc, #40]	; (800da68 <prvHeapInit+0xb8>)
 800da3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	4a09      	ldr	r2, [pc, #36]	; (800da6c <prvHeapInit+0xbc>)
 800da46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da48:	4b09      	ldr	r3, [pc, #36]	; (800da70 <prvHeapInit+0xc0>)
 800da4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da4e:	601a      	str	r2, [r3, #0]
}
 800da50:	bf00      	nop
 800da52:	3714      	adds	r7, #20
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr
 800da5c:	200001fc 	.word	0x200001fc
 800da60:	200081fc 	.word	0x200081fc
 800da64:	20008204 	.word	0x20008204
 800da68:	2000820c 	.word	0x2000820c
 800da6c:	20008208 	.word	0x20008208
 800da70:	20008218 	.word	0x20008218

0800da74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da7c:	4b28      	ldr	r3, [pc, #160]	; (800db20 <prvInsertBlockIntoFreeList+0xac>)
 800da7e:	60fb      	str	r3, [r7, #12]
 800da80:	e002      	b.n	800da88 <prvInsertBlockIntoFreeList+0x14>
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	60fb      	str	r3, [r7, #12]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	687a      	ldr	r2, [r7, #4]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d8f7      	bhi.n	800da82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	68ba      	ldr	r2, [r7, #8]
 800da9c:	4413      	add	r3, r2
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d108      	bne.n	800dab6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	685a      	ldr	r2, [r3, #4]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	441a      	add	r2, r3
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	68ba      	ldr	r2, [r7, #8]
 800dac0:	441a      	add	r2, r3
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d118      	bne.n	800dafc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	4b15      	ldr	r3, [pc, #84]	; (800db24 <prvInsertBlockIntoFreeList+0xb0>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d00d      	beq.n	800daf2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	685a      	ldr	r2, [r3, #4]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	441a      	add	r2, r3
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	601a      	str	r2, [r3, #0]
 800daf0:	e008      	b.n	800db04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800daf2:	4b0c      	ldr	r3, [pc, #48]	; (800db24 <prvInsertBlockIntoFreeList+0xb0>)
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	601a      	str	r2, [r3, #0]
 800dafa:	e003      	b.n	800db04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db04:	68fa      	ldr	r2, [r7, #12]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	429a      	cmp	r2, r3
 800db0a:	d002      	beq.n	800db12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db12:	bf00      	nop
 800db14:	3714      	adds	r7, #20
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop
 800db20:	200081fc 	.word	0x200081fc
 800db24:	20008204 	.word	0x20008204

0800db28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800db2c:	2200      	movs	r2, #0
 800db2e:	490e      	ldr	r1, [pc, #56]	; (800db68 <MX_USB_HOST_Init+0x40>)
 800db30:	480e      	ldr	r0, [pc, #56]	; (800db6c <MX_USB_HOST_Init+0x44>)
 800db32:	f7fc f98f 	bl	8009e54 <USBH_Init>
 800db36:	4603      	mov	r3, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d001      	beq.n	800db40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800db3c:	f7f4 fb22 	bl	8002184 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800db40:	490b      	ldr	r1, [pc, #44]	; (800db70 <MX_USB_HOST_Init+0x48>)
 800db42:	480a      	ldr	r0, [pc, #40]	; (800db6c <MX_USB_HOST_Init+0x44>)
 800db44:	f7fc fa3c 	bl	8009fc0 <USBH_RegisterClass>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d001      	beq.n	800db52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800db4e:	f7f4 fb19 	bl	8002184 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800db52:	4806      	ldr	r0, [pc, #24]	; (800db6c <MX_USB_HOST_Init+0x44>)
 800db54:	f7fc fac0 	bl	800a0d8 <USBH_Start>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d001      	beq.n	800db62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800db5e:	f7f4 fb11 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800db62:	bf00      	nop
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	0800db75 	.word	0x0800db75
 800db6c:	200084d4 	.word	0x200084d4
 800db70:	20000014 	.word	0x20000014

0800db74 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800db74:	b480      	push	{r7}
 800db76:	b083      	sub	sp, #12
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	460b      	mov	r3, r1
 800db7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800db80:	78fb      	ldrb	r3, [r7, #3]
 800db82:	3b01      	subs	r3, #1
 800db84:	2b04      	cmp	r3, #4
 800db86:	d819      	bhi.n	800dbbc <USBH_UserProcess+0x48>
 800db88:	a201      	add	r2, pc, #4	; (adr r2, 800db90 <USBH_UserProcess+0x1c>)
 800db8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db8e:	bf00      	nop
 800db90:	0800dbbd 	.word	0x0800dbbd
 800db94:	0800dbad 	.word	0x0800dbad
 800db98:	0800dbbd 	.word	0x0800dbbd
 800db9c:	0800dbb5 	.word	0x0800dbb5
 800dba0:	0800dba5 	.word	0x0800dba5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800dba4:	4b09      	ldr	r3, [pc, #36]	; (800dbcc <USBH_UserProcess+0x58>)
 800dba6:	2203      	movs	r2, #3
 800dba8:	701a      	strb	r2, [r3, #0]
  break;
 800dbaa:	e008      	b.n	800dbbe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800dbac:	4b07      	ldr	r3, [pc, #28]	; (800dbcc <USBH_UserProcess+0x58>)
 800dbae:	2202      	movs	r2, #2
 800dbb0:	701a      	strb	r2, [r3, #0]
  break;
 800dbb2:	e004      	b.n	800dbbe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dbb4:	4b05      	ldr	r3, [pc, #20]	; (800dbcc <USBH_UserProcess+0x58>)
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	701a      	strb	r2, [r3, #0]
  break;
 800dbba:	e000      	b.n	800dbbe <USBH_UserProcess+0x4a>

  default:
  break;
 800dbbc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800dbbe:	bf00      	nop
 800dbc0:	370c      	adds	r7, #12
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr
 800dbca:	bf00      	nop
 800dbcc:	2000821c 	.word	0x2000821c

0800dbd0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b08a      	sub	sp, #40	; 0x28
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dbd8:	f107 0314 	add.w	r3, r7, #20
 800dbdc:	2200      	movs	r2, #0
 800dbde:	601a      	str	r2, [r3, #0]
 800dbe0:	605a      	str	r2, [r3, #4]
 800dbe2:	609a      	str	r2, [r3, #8]
 800dbe4:	60da      	str	r2, [r3, #12]
 800dbe6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a24      	ldr	r2, [pc, #144]	; (800dc80 <HAL_HCD_MspInit+0xb0>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d141      	bne.n	800dc76 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	613b      	str	r3, [r7, #16]
 800dbf6:	4b23      	ldr	r3, [pc, #140]	; (800dc84 <HAL_HCD_MspInit+0xb4>)
 800dbf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbfa:	4a22      	ldr	r2, [pc, #136]	; (800dc84 <HAL_HCD_MspInit+0xb4>)
 800dbfc:	f043 0302 	orr.w	r3, r3, #2
 800dc00:	6313      	str	r3, [r2, #48]	; 0x30
 800dc02:	4b20      	ldr	r3, [pc, #128]	; (800dc84 <HAL_HCD_MspInit+0xb4>)
 800dc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc06:	f003 0302 	and.w	r3, r3, #2
 800dc0a:	613b      	str	r3, [r7, #16]
 800dc0c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800dc0e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800dc12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc14:	2302      	movs	r3, #2
 800dc16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800dc20:	230c      	movs	r3, #12
 800dc22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dc24:	f107 0314 	add.w	r3, r7, #20
 800dc28:	4619      	mov	r1, r3
 800dc2a:	4817      	ldr	r0, [pc, #92]	; (800dc88 <HAL_HCD_MspInit+0xb8>)
 800dc2c:	f7f5 faf8 	bl	8003220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800dc30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dc34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dc36:	2300      	movs	r3, #0
 800dc38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800dc3e:	f107 0314 	add.w	r3, r7, #20
 800dc42:	4619      	mov	r1, r3
 800dc44:	4810      	ldr	r0, [pc, #64]	; (800dc88 <HAL_HCD_MspInit+0xb8>)
 800dc46:	f7f5 faeb 	bl	8003220 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	60fb      	str	r3, [r7, #12]
 800dc4e:	4b0d      	ldr	r3, [pc, #52]	; (800dc84 <HAL_HCD_MspInit+0xb4>)
 800dc50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc52:	4a0c      	ldr	r2, [pc, #48]	; (800dc84 <HAL_HCD_MspInit+0xb4>)
 800dc54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc58:	6313      	str	r3, [r2, #48]	; 0x30
 800dc5a:	4b0a      	ldr	r3, [pc, #40]	; (800dc84 <HAL_HCD_MspInit+0xb4>)
 800dc5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc62:	60fb      	str	r3, [r7, #12]
 800dc64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800dc66:	2200      	movs	r2, #0
 800dc68:	2105      	movs	r1, #5
 800dc6a:	204d      	movs	r0, #77	; 0x4d
 800dc6c:	f7f5 f8a6 	bl	8002dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800dc70:	204d      	movs	r0, #77	; 0x4d
 800dc72:	f7f5 f8bf 	bl	8002df4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800dc76:	bf00      	nop
 800dc78:	3728      	adds	r7, #40	; 0x28
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	40040000 	.word	0x40040000
 800dc84:	40023800 	.word	0x40023800
 800dc88:	40020400 	.word	0x40020400

0800dc8c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b082      	sub	sp, #8
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7fc fec9 	bl	800aa32 <USBH_LL_IncTimer>
}
 800dca0:	bf00      	nop
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fc ff0d 	bl	800aad6 <USBH_LL_Connect>
}
 800dcbc:	bf00      	nop
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7fc ff22 	bl	800ab1c <USBH_LL_Disconnect>
}
 800dcd8:	bf00      	nop
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	460b      	mov	r3, r1
 800dcea:	70fb      	strb	r3, [r7, #3]
 800dcec:	4613      	mov	r3, r2
 800dcee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fc ff57 	bl	800abaa <USBH_LL_NotifyURBChange>
#endif
}
 800dcfc:	bf00      	nop
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd12:	4618      	mov	r0, r3
 800dd14:	f7fc feb7 	bl	800aa86 <USBH_LL_PortEnabled>
}
 800dd18:	bf00      	nop
 800dd1a:	3708      	adds	r7, #8
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7fc fec3 	bl	800aaba <USBH_LL_PortDisabled>
}
 800dd34:	bf00      	nop
 800dd36:	3708      	adds	r7, #8
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d132      	bne.n	800ddb4 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800dd4e:	4a1c      	ldr	r2, [pc, #112]	; (800ddc0 <USBH_LL_Init+0x84>)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	4a19      	ldr	r2, [pc, #100]	; (800ddc0 <USBH_LL_Init+0x84>)
 800dd5a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800dd5e:	4b18      	ldr	r3, [pc, #96]	; (800ddc0 <USBH_LL_Init+0x84>)
 800dd60:	4a18      	ldr	r2, [pc, #96]	; (800ddc4 <USBH_LL_Init+0x88>)
 800dd62:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800dd64:	4b16      	ldr	r3, [pc, #88]	; (800ddc0 <USBH_LL_Init+0x84>)
 800dd66:	220c      	movs	r2, #12
 800dd68:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800dd6a:	4b15      	ldr	r3, [pc, #84]	; (800ddc0 <USBH_LL_Init+0x84>)
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800dd70:	4b13      	ldr	r3, [pc, #76]	; (800ddc0 <USBH_LL_Init+0x84>)
 800dd72:	2200      	movs	r2, #0
 800dd74:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800dd76:	4b12      	ldr	r3, [pc, #72]	; (800ddc0 <USBH_LL_Init+0x84>)
 800dd78:	2202      	movs	r2, #2
 800dd7a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800dd7c:	4b10      	ldr	r3, [pc, #64]	; (800ddc0 <USBH_LL_Init+0x84>)
 800dd7e:	2200      	movs	r2, #0
 800dd80:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800dd82:	4b0f      	ldr	r3, [pc, #60]	; (800ddc0 <USBH_LL_Init+0x84>)
 800dd84:	2200      	movs	r2, #0
 800dd86:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800dd88:	4b0d      	ldr	r3, [pc, #52]	; (800ddc0 <USBH_LL_Init+0x84>)
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800dd8e:	4b0c      	ldr	r3, [pc, #48]	; (800ddc0 <USBH_LL_Init+0x84>)
 800dd90:	2200      	movs	r2, #0
 800dd92:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800dd94:	480a      	ldr	r0, [pc, #40]	; (800ddc0 <USBH_LL_Init+0x84>)
 800dd96:	f7f5 fc22 	bl	80035de <HAL_HCD_Init>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d001      	beq.n	800dda4 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800dda0:	f7f4 f9f0 	bl	8002184 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800dda4:	4806      	ldr	r0, [pc, #24]	; (800ddc0 <USBH_LL_Init+0x84>)
 800dda6:	f7f6 f806 	bl	8003db6 <HAL_HCD_GetCurrentFrame>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	4619      	mov	r1, r3
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f7fc fe30 	bl	800aa14 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3708      	adds	r7, #8
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	200088b8 	.word	0x200088b8
 800ddc4:	40040000 	.word	0x40040000

0800ddc8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7f5 ff73 	bl	8003cca <HAL_HCD_Start>
 800dde4:	4603      	mov	r3, r0
 800dde6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dde8:	7bfb      	ldrb	r3, [r7, #15]
 800ddea:	4618      	mov	r0, r3
 800ddec:	f000 f95c 	bl	800e0a8 <USBH_Get_USB_Status>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b084      	sub	sp, #16
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de06:	2300      	movs	r3, #0
 800de08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de14:	4618      	mov	r0, r3
 800de16:	f7f5 ff7b 	bl	8003d10 <HAL_HCD_Stop>
 800de1a:	4603      	mov	r3, r0
 800de1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de1e:	7bfb      	ldrb	r3, [r7, #15]
 800de20:	4618      	mov	r0, r3
 800de22:	f000 f941 	bl	800e0a8 <USBH_Get_USB_Status>
 800de26:	4603      	mov	r3, r0
 800de28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3710      	adds	r7, #16
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800de3c:	2301      	movs	r3, #1
 800de3e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de46:	4618      	mov	r0, r3
 800de48:	f7f5 ffc3 	bl	8003dd2 <HAL_HCD_GetCurrentSpeed>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b02      	cmp	r3, #2
 800de50:	d00c      	beq.n	800de6c <USBH_LL_GetSpeed+0x38>
 800de52:	2b02      	cmp	r3, #2
 800de54:	d80d      	bhi.n	800de72 <USBH_LL_GetSpeed+0x3e>
 800de56:	2b00      	cmp	r3, #0
 800de58:	d002      	beq.n	800de60 <USBH_LL_GetSpeed+0x2c>
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d003      	beq.n	800de66 <USBH_LL_GetSpeed+0x32>
 800de5e:	e008      	b.n	800de72 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800de60:	2300      	movs	r3, #0
 800de62:	73fb      	strb	r3, [r7, #15]
    break;
 800de64:	e008      	b.n	800de78 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800de66:	2301      	movs	r3, #1
 800de68:	73fb      	strb	r3, [r7, #15]
    break;
 800de6a:	e005      	b.n	800de78 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800de6c:	2302      	movs	r3, #2
 800de6e:	73fb      	strb	r3, [r7, #15]
    break;
 800de70:	e002      	b.n	800de78 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800de72:	2301      	movs	r3, #1
 800de74:	73fb      	strb	r3, [r7, #15]
    break;
 800de76:	bf00      	nop
  }
  return  speed;
 800de78:	7bfb      	ldrb	r3, [r7, #15]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3710      	adds	r7, #16
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}

0800de82 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800de82:	b580      	push	{r7, lr}
 800de84:	b084      	sub	sp, #16
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de8e:	2300      	movs	r3, #0
 800de90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de98:	4618      	mov	r0, r3
 800de9a:	f7f5 ff56 	bl	8003d4a <HAL_HCD_ResetPort>
 800de9e:	4603      	mov	r3, r0
 800dea0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dea2:	7bfb      	ldrb	r3, [r7, #15]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f000 f8ff 	bl	800e0a8 <USBH_Get_USB_Status>
 800deaa:	4603      	mov	r3, r0
 800deac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800deae:	7bbb      	ldrb	r3, [r7, #14]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	460b      	mov	r3, r1
 800dec2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800deca:	78fa      	ldrb	r2, [r7, #3]
 800decc:	4611      	mov	r1, r2
 800dece:	4618      	mov	r0, r3
 800ded0:	f7f5 ff5d 	bl	8003d8e <HAL_HCD_HC_GetXferCount>
 800ded4:	4603      	mov	r3, r0
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dede:	b590      	push	{r4, r7, lr}
 800dee0:	b089      	sub	sp, #36	; 0x24
 800dee2:	af04      	add	r7, sp, #16
 800dee4:	6078      	str	r0, [r7, #4]
 800dee6:	4608      	mov	r0, r1
 800dee8:	4611      	mov	r1, r2
 800deea:	461a      	mov	r2, r3
 800deec:	4603      	mov	r3, r0
 800deee:	70fb      	strb	r3, [r7, #3]
 800def0:	460b      	mov	r3, r1
 800def2:	70bb      	strb	r3, [r7, #2]
 800def4:	4613      	mov	r3, r2
 800def6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800defc:	2300      	movs	r3, #0
 800defe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800df06:	787c      	ldrb	r4, [r7, #1]
 800df08:	78ba      	ldrb	r2, [r7, #2]
 800df0a:	78f9      	ldrb	r1, [r7, #3]
 800df0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df0e:	9302      	str	r3, [sp, #8]
 800df10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800df14:	9301      	str	r3, [sp, #4]
 800df16:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df1a:	9300      	str	r3, [sp, #0]
 800df1c:	4623      	mov	r3, r4
 800df1e:	f7f5 fbc0 	bl	80036a2 <HAL_HCD_HC_Init>
 800df22:	4603      	mov	r3, r0
 800df24:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800df26:	7bfb      	ldrb	r3, [r7, #15]
 800df28:	4618      	mov	r0, r3
 800df2a:	f000 f8bd 	bl	800e0a8 <USBH_Get_USB_Status>
 800df2e:	4603      	mov	r3, r0
 800df30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df32:	7bbb      	ldrb	r3, [r7, #14]
}
 800df34:	4618      	mov	r0, r3
 800df36:	3714      	adds	r7, #20
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd90      	pop	{r4, r7, pc}

0800df3c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	460b      	mov	r3, r1
 800df46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df48:	2300      	movs	r3, #0
 800df4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df4c:	2300      	movs	r3, #0
 800df4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df56:	78fa      	ldrb	r2, [r7, #3]
 800df58:	4611      	mov	r1, r2
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7f5 fc30 	bl	80037c0 <HAL_HCD_HC_Halt>
 800df60:	4603      	mov	r3, r0
 800df62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800df64:	7bfb      	ldrb	r3, [r7, #15]
 800df66:	4618      	mov	r0, r3
 800df68:	f000 f89e 	bl	800e0a8 <USBH_Get_USB_Status>
 800df6c:	4603      	mov	r3, r0
 800df6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df70:	7bbb      	ldrb	r3, [r7, #14]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800df7a:	b590      	push	{r4, r7, lr}
 800df7c:	b089      	sub	sp, #36	; 0x24
 800df7e:	af04      	add	r7, sp, #16
 800df80:	6078      	str	r0, [r7, #4]
 800df82:	4608      	mov	r0, r1
 800df84:	4611      	mov	r1, r2
 800df86:	461a      	mov	r2, r3
 800df88:	4603      	mov	r3, r0
 800df8a:	70fb      	strb	r3, [r7, #3]
 800df8c:	460b      	mov	r3, r1
 800df8e:	70bb      	strb	r3, [r7, #2]
 800df90:	4613      	mov	r3, r2
 800df92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df94:	2300      	movs	r3, #0
 800df96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df98:	2300      	movs	r3, #0
 800df9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dfa2:	787c      	ldrb	r4, [r7, #1]
 800dfa4:	78ba      	ldrb	r2, [r7, #2]
 800dfa6:	78f9      	ldrb	r1, [r7, #3]
 800dfa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dfac:	9303      	str	r3, [sp, #12]
 800dfae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dfb0:	9302      	str	r3, [sp, #8]
 800dfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb4:	9301      	str	r3, [sp, #4]
 800dfb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfba:	9300      	str	r3, [sp, #0]
 800dfbc:	4623      	mov	r3, r4
 800dfbe:	f7f5 fc23 	bl	8003808 <HAL_HCD_HC_SubmitRequest>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dfc6:	7bfb      	ldrb	r3, [r7, #15]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f000 f86d 	bl	800e0a8 <USBH_Get_USB_Status>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3714      	adds	r7, #20
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd90      	pop	{r4, r7, pc}

0800dfdc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dfee:	78fa      	ldrb	r2, [r7, #3]
 800dff0:	4611      	mov	r1, r2
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7f5 feb7 	bl	8003d66 <HAL_HCD_HC_GetURBState>
 800dff8:	4603      	mov	r3, r0
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b082      	sub	sp, #8
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
 800e00a:	460b      	mov	r3, r1
 800e00c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e014:	2b00      	cmp	r3, #0
 800e016:	d103      	bne.n	800e020 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800e018:	78fb      	ldrb	r3, [r7, #3]
 800e01a:	4618      	mov	r0, r3
 800e01c:	f000 f870 	bl	800e100 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e020:	20c8      	movs	r0, #200	; 0xc8
 800e022:	f7f4 fdef 	bl	8002c04 <HAL_Delay>
  return USBH_OK;
 800e026:	2300      	movs	r3, #0
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3708      	adds	r7, #8
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e030:	b480      	push	{r7}
 800e032:	b085      	sub	sp, #20
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	460b      	mov	r3, r1
 800e03a:	70fb      	strb	r3, [r7, #3]
 800e03c:	4613      	mov	r3, r2
 800e03e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e046:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e048:	78fb      	ldrb	r3, [r7, #3]
 800e04a:	68fa      	ldr	r2, [r7, #12]
 800e04c:	212c      	movs	r1, #44	; 0x2c
 800e04e:	fb01 f303 	mul.w	r3, r1, r3
 800e052:	4413      	add	r3, r2
 800e054:	333b      	adds	r3, #59	; 0x3b
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d009      	beq.n	800e070 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e05c:	78fb      	ldrb	r3, [r7, #3]
 800e05e:	68fa      	ldr	r2, [r7, #12]
 800e060:	212c      	movs	r1, #44	; 0x2c
 800e062:	fb01 f303 	mul.w	r3, r1, r3
 800e066:	4413      	add	r3, r2
 800e068:	3354      	adds	r3, #84	; 0x54
 800e06a:	78ba      	ldrb	r2, [r7, #2]
 800e06c:	701a      	strb	r2, [r3, #0]
 800e06e:	e008      	b.n	800e082 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e070:	78fb      	ldrb	r3, [r7, #3]
 800e072:	68fa      	ldr	r2, [r7, #12]
 800e074:	212c      	movs	r1, #44	; 0x2c
 800e076:	fb01 f303 	mul.w	r3, r1, r3
 800e07a:	4413      	add	r3, r2
 800e07c:	3355      	adds	r3, #85	; 0x55
 800e07e:	78ba      	ldrb	r2, [r7, #2]
 800e080:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e082:	2300      	movs	r3, #0
}
 800e084:	4618      	mov	r0, r3
 800e086:	3714      	adds	r7, #20
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7f4 fdb3 	bl	8002c04 <HAL_Delay>
}
 800e09e:	bf00      	nop
 800e0a0:	3708      	adds	r7, #8
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
	...

0800e0a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e0b6:	79fb      	ldrb	r3, [r7, #7]
 800e0b8:	2b03      	cmp	r3, #3
 800e0ba:	d817      	bhi.n	800e0ec <USBH_Get_USB_Status+0x44>
 800e0bc:	a201      	add	r2, pc, #4	; (adr r2, 800e0c4 <USBH_Get_USB_Status+0x1c>)
 800e0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c2:	bf00      	nop
 800e0c4:	0800e0d5 	.word	0x0800e0d5
 800e0c8:	0800e0db 	.word	0x0800e0db
 800e0cc:	0800e0e1 	.word	0x0800e0e1
 800e0d0:	0800e0e7 	.word	0x0800e0e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800e0d8:	e00b      	b.n	800e0f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e0da:	2302      	movs	r3, #2
 800e0dc:	73fb      	strb	r3, [r7, #15]
    break;
 800e0de:	e008      	b.n	800e0f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	73fb      	strb	r3, [r7, #15]
    break;
 800e0e4:	e005      	b.n	800e0f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e0e6:	2302      	movs	r3, #2
 800e0e8:	73fb      	strb	r3, [r7, #15]
    break;
 800e0ea:	e002      	b.n	800e0f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e0ec:	2302      	movs	r3, #2
 800e0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800e0f0:	bf00      	nop
  }
  return usb_status;
 800e0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3714      	adds	r7, #20
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	4603      	mov	r3, r0
 800e108:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e10a:	79fb      	ldrb	r3, [r7, #7]
 800e10c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800e10e:	79fb      	ldrb	r3, [r7, #7]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d102      	bne.n	800e11a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e114:	2301      	movs	r3, #1
 800e116:	73fb      	strb	r3, [r7, #15]
 800e118:	e001      	b.n	800e11e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e11a:	2300      	movs	r3, #0
 800e11c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800e11e:	7bfb      	ldrb	r3, [r7, #15]
 800e120:	461a      	mov	r2, r3
 800e122:	2110      	movs	r1, #16
 800e124:	4803      	ldr	r0, [pc, #12]	; (800e134 <MX_DriverVbusHS+0x34>)
 800e126:	f7f5 fa27 	bl	8003578 <HAL_GPIO_WritePin>
}
 800e12a:	bf00      	nop
 800e12c:	3710      	adds	r7, #16
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	40020800 	.word	0x40020800

0800e138 <gcvt>:
 800e138:	b530      	push	{r4, r5, lr}
 800e13a:	2200      	movs	r2, #0
 800e13c:	b085      	sub	sp, #20
 800e13e:	460c      	mov	r4, r1
 800e140:	4605      	mov	r5, r0
 800e142:	2300      	movs	r3, #0
 800e144:	ec51 0b10 	vmov	r0, r1, d0
 800e148:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e14c:	f7f2 fcd6 	bl	8000afc <__aeabi_dcmplt>
 800e150:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e154:	4622      	mov	r2, r4
 800e156:	b118      	cbz	r0, 800e160 <gcvt+0x28>
 800e158:	232d      	movs	r3, #45	; 0x2d
 800e15a:	f802 3b01 	strb.w	r3, [r2], #1
 800e15e:	3d01      	subs	r5, #1
 800e160:	2300      	movs	r3, #0
 800e162:	4806      	ldr	r0, [pc, #24]	; (800e17c <gcvt+0x44>)
 800e164:	9300      	str	r3, [sp, #0]
 800e166:	4629      	mov	r1, r5
 800e168:	2367      	movs	r3, #103	; 0x67
 800e16a:	6800      	ldr	r0, [r0, #0]
 800e16c:	f000 f9a0 	bl	800e4b0 <_gcvt>
 800e170:	2800      	cmp	r0, #0
 800e172:	bf14      	ite	ne
 800e174:	4620      	movne	r0, r4
 800e176:	2000      	moveq	r0, #0
 800e178:	b005      	add	sp, #20
 800e17a:	bd30      	pop	{r4, r5, pc}
 800e17c:	20000038 	.word	0x20000038

0800e180 <__errno>:
 800e180:	4b01      	ldr	r3, [pc, #4]	; (800e188 <__errno+0x8>)
 800e182:	6818      	ldr	r0, [r3, #0]
 800e184:	4770      	bx	lr
 800e186:	bf00      	nop
 800e188:	20000038 	.word	0x20000038

0800e18c <__libc_init_array>:
 800e18c:	b570      	push	{r4, r5, r6, lr}
 800e18e:	4d0d      	ldr	r5, [pc, #52]	; (800e1c4 <__libc_init_array+0x38>)
 800e190:	4c0d      	ldr	r4, [pc, #52]	; (800e1c8 <__libc_init_array+0x3c>)
 800e192:	1b64      	subs	r4, r4, r5
 800e194:	10a4      	asrs	r4, r4, #2
 800e196:	2600      	movs	r6, #0
 800e198:	42a6      	cmp	r6, r4
 800e19a:	d109      	bne.n	800e1b0 <__libc_init_array+0x24>
 800e19c:	4d0b      	ldr	r5, [pc, #44]	; (800e1cc <__libc_init_array+0x40>)
 800e19e:	4c0c      	ldr	r4, [pc, #48]	; (800e1d0 <__libc_init_array+0x44>)
 800e1a0:	f004 fdbc 	bl	8012d1c <_init>
 800e1a4:	1b64      	subs	r4, r4, r5
 800e1a6:	10a4      	asrs	r4, r4, #2
 800e1a8:	2600      	movs	r6, #0
 800e1aa:	42a6      	cmp	r6, r4
 800e1ac:	d105      	bne.n	800e1ba <__libc_init_array+0x2e>
 800e1ae:	bd70      	pop	{r4, r5, r6, pc}
 800e1b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1b4:	4798      	blx	r3
 800e1b6:	3601      	adds	r6, #1
 800e1b8:	e7ee      	b.n	800e198 <__libc_init_array+0xc>
 800e1ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1be:	4798      	blx	r3
 800e1c0:	3601      	adds	r6, #1
 800e1c2:	e7f2      	b.n	800e1aa <__libc_init_array+0x1e>
 800e1c4:	08013320 	.word	0x08013320
 800e1c8:	08013320 	.word	0x08013320
 800e1cc:	08013320 	.word	0x08013320
 800e1d0:	08013324 	.word	0x08013324

0800e1d4 <malloc>:
 800e1d4:	4b02      	ldr	r3, [pc, #8]	; (800e1e0 <malloc+0xc>)
 800e1d6:	4601      	mov	r1, r0
 800e1d8:	6818      	ldr	r0, [r3, #0]
 800e1da:	f000 b871 	b.w	800e2c0 <_malloc_r>
 800e1de:	bf00      	nop
 800e1e0:	20000038 	.word	0x20000038

0800e1e4 <free>:
 800e1e4:	4b02      	ldr	r3, [pc, #8]	; (800e1f0 <free+0xc>)
 800e1e6:	4601      	mov	r1, r0
 800e1e8:	6818      	ldr	r0, [r3, #0]
 800e1ea:	f000 b819 	b.w	800e220 <_free_r>
 800e1ee:	bf00      	nop
 800e1f0:	20000038 	.word	0x20000038

0800e1f4 <memcpy>:
 800e1f4:	440a      	add	r2, r1
 800e1f6:	4291      	cmp	r1, r2
 800e1f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e1fc:	d100      	bne.n	800e200 <memcpy+0xc>
 800e1fe:	4770      	bx	lr
 800e200:	b510      	push	{r4, lr}
 800e202:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e20a:	4291      	cmp	r1, r2
 800e20c:	d1f9      	bne.n	800e202 <memcpy+0xe>
 800e20e:	bd10      	pop	{r4, pc}

0800e210 <memset>:
 800e210:	4402      	add	r2, r0
 800e212:	4603      	mov	r3, r0
 800e214:	4293      	cmp	r3, r2
 800e216:	d100      	bne.n	800e21a <memset+0xa>
 800e218:	4770      	bx	lr
 800e21a:	f803 1b01 	strb.w	r1, [r3], #1
 800e21e:	e7f9      	b.n	800e214 <memset+0x4>

0800e220 <_free_r>:
 800e220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e222:	2900      	cmp	r1, #0
 800e224:	d048      	beq.n	800e2b8 <_free_r+0x98>
 800e226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e22a:	9001      	str	r0, [sp, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f1a1 0404 	sub.w	r4, r1, #4
 800e232:	bfb8      	it	lt
 800e234:	18e4      	addlt	r4, r4, r3
 800e236:	f000 f9fb 	bl	800e630 <__malloc_lock>
 800e23a:	4a20      	ldr	r2, [pc, #128]	; (800e2bc <_free_r+0x9c>)
 800e23c:	9801      	ldr	r0, [sp, #4]
 800e23e:	6813      	ldr	r3, [r2, #0]
 800e240:	4615      	mov	r5, r2
 800e242:	b933      	cbnz	r3, 800e252 <_free_r+0x32>
 800e244:	6063      	str	r3, [r4, #4]
 800e246:	6014      	str	r4, [r2, #0]
 800e248:	b003      	add	sp, #12
 800e24a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e24e:	f000 b9f5 	b.w	800e63c <__malloc_unlock>
 800e252:	42a3      	cmp	r3, r4
 800e254:	d90b      	bls.n	800e26e <_free_r+0x4e>
 800e256:	6821      	ldr	r1, [r4, #0]
 800e258:	1862      	adds	r2, r4, r1
 800e25a:	4293      	cmp	r3, r2
 800e25c:	bf04      	itt	eq
 800e25e:	681a      	ldreq	r2, [r3, #0]
 800e260:	685b      	ldreq	r3, [r3, #4]
 800e262:	6063      	str	r3, [r4, #4]
 800e264:	bf04      	itt	eq
 800e266:	1852      	addeq	r2, r2, r1
 800e268:	6022      	streq	r2, [r4, #0]
 800e26a:	602c      	str	r4, [r5, #0]
 800e26c:	e7ec      	b.n	800e248 <_free_r+0x28>
 800e26e:	461a      	mov	r2, r3
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	b10b      	cbz	r3, 800e278 <_free_r+0x58>
 800e274:	42a3      	cmp	r3, r4
 800e276:	d9fa      	bls.n	800e26e <_free_r+0x4e>
 800e278:	6811      	ldr	r1, [r2, #0]
 800e27a:	1855      	adds	r5, r2, r1
 800e27c:	42a5      	cmp	r5, r4
 800e27e:	d10b      	bne.n	800e298 <_free_r+0x78>
 800e280:	6824      	ldr	r4, [r4, #0]
 800e282:	4421      	add	r1, r4
 800e284:	1854      	adds	r4, r2, r1
 800e286:	42a3      	cmp	r3, r4
 800e288:	6011      	str	r1, [r2, #0]
 800e28a:	d1dd      	bne.n	800e248 <_free_r+0x28>
 800e28c:	681c      	ldr	r4, [r3, #0]
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	6053      	str	r3, [r2, #4]
 800e292:	4421      	add	r1, r4
 800e294:	6011      	str	r1, [r2, #0]
 800e296:	e7d7      	b.n	800e248 <_free_r+0x28>
 800e298:	d902      	bls.n	800e2a0 <_free_r+0x80>
 800e29a:	230c      	movs	r3, #12
 800e29c:	6003      	str	r3, [r0, #0]
 800e29e:	e7d3      	b.n	800e248 <_free_r+0x28>
 800e2a0:	6825      	ldr	r5, [r4, #0]
 800e2a2:	1961      	adds	r1, r4, r5
 800e2a4:	428b      	cmp	r3, r1
 800e2a6:	bf04      	itt	eq
 800e2a8:	6819      	ldreq	r1, [r3, #0]
 800e2aa:	685b      	ldreq	r3, [r3, #4]
 800e2ac:	6063      	str	r3, [r4, #4]
 800e2ae:	bf04      	itt	eq
 800e2b0:	1949      	addeq	r1, r1, r5
 800e2b2:	6021      	streq	r1, [r4, #0]
 800e2b4:	6054      	str	r4, [r2, #4]
 800e2b6:	e7c7      	b.n	800e248 <_free_r+0x28>
 800e2b8:	b003      	add	sp, #12
 800e2ba:	bd30      	pop	{r4, r5, pc}
 800e2bc:	20008220 	.word	0x20008220

0800e2c0 <_malloc_r>:
 800e2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2c2:	1ccd      	adds	r5, r1, #3
 800e2c4:	f025 0503 	bic.w	r5, r5, #3
 800e2c8:	3508      	adds	r5, #8
 800e2ca:	2d0c      	cmp	r5, #12
 800e2cc:	bf38      	it	cc
 800e2ce:	250c      	movcc	r5, #12
 800e2d0:	2d00      	cmp	r5, #0
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	db01      	blt.n	800e2da <_malloc_r+0x1a>
 800e2d6:	42a9      	cmp	r1, r5
 800e2d8:	d903      	bls.n	800e2e2 <_malloc_r+0x22>
 800e2da:	230c      	movs	r3, #12
 800e2dc:	6033      	str	r3, [r6, #0]
 800e2de:	2000      	movs	r0, #0
 800e2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2e2:	f000 f9a5 	bl	800e630 <__malloc_lock>
 800e2e6:	4921      	ldr	r1, [pc, #132]	; (800e36c <_malloc_r+0xac>)
 800e2e8:	680a      	ldr	r2, [r1, #0]
 800e2ea:	4614      	mov	r4, r2
 800e2ec:	b99c      	cbnz	r4, 800e316 <_malloc_r+0x56>
 800e2ee:	4f20      	ldr	r7, [pc, #128]	; (800e370 <_malloc_r+0xb0>)
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	b923      	cbnz	r3, 800e2fe <_malloc_r+0x3e>
 800e2f4:	4621      	mov	r1, r4
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	f000 f83c 	bl	800e374 <_sbrk_r>
 800e2fc:	6038      	str	r0, [r7, #0]
 800e2fe:	4629      	mov	r1, r5
 800e300:	4630      	mov	r0, r6
 800e302:	f000 f837 	bl	800e374 <_sbrk_r>
 800e306:	1c43      	adds	r3, r0, #1
 800e308:	d123      	bne.n	800e352 <_malloc_r+0x92>
 800e30a:	230c      	movs	r3, #12
 800e30c:	6033      	str	r3, [r6, #0]
 800e30e:	4630      	mov	r0, r6
 800e310:	f000 f994 	bl	800e63c <__malloc_unlock>
 800e314:	e7e3      	b.n	800e2de <_malloc_r+0x1e>
 800e316:	6823      	ldr	r3, [r4, #0]
 800e318:	1b5b      	subs	r3, r3, r5
 800e31a:	d417      	bmi.n	800e34c <_malloc_r+0x8c>
 800e31c:	2b0b      	cmp	r3, #11
 800e31e:	d903      	bls.n	800e328 <_malloc_r+0x68>
 800e320:	6023      	str	r3, [r4, #0]
 800e322:	441c      	add	r4, r3
 800e324:	6025      	str	r5, [r4, #0]
 800e326:	e004      	b.n	800e332 <_malloc_r+0x72>
 800e328:	6863      	ldr	r3, [r4, #4]
 800e32a:	42a2      	cmp	r2, r4
 800e32c:	bf0c      	ite	eq
 800e32e:	600b      	streq	r3, [r1, #0]
 800e330:	6053      	strne	r3, [r2, #4]
 800e332:	4630      	mov	r0, r6
 800e334:	f000 f982 	bl	800e63c <__malloc_unlock>
 800e338:	f104 000b 	add.w	r0, r4, #11
 800e33c:	1d23      	adds	r3, r4, #4
 800e33e:	f020 0007 	bic.w	r0, r0, #7
 800e342:	1ac2      	subs	r2, r0, r3
 800e344:	d0cc      	beq.n	800e2e0 <_malloc_r+0x20>
 800e346:	1a1b      	subs	r3, r3, r0
 800e348:	50a3      	str	r3, [r4, r2]
 800e34a:	e7c9      	b.n	800e2e0 <_malloc_r+0x20>
 800e34c:	4622      	mov	r2, r4
 800e34e:	6864      	ldr	r4, [r4, #4]
 800e350:	e7cc      	b.n	800e2ec <_malloc_r+0x2c>
 800e352:	1cc4      	adds	r4, r0, #3
 800e354:	f024 0403 	bic.w	r4, r4, #3
 800e358:	42a0      	cmp	r0, r4
 800e35a:	d0e3      	beq.n	800e324 <_malloc_r+0x64>
 800e35c:	1a21      	subs	r1, r4, r0
 800e35e:	4630      	mov	r0, r6
 800e360:	f000 f808 	bl	800e374 <_sbrk_r>
 800e364:	3001      	adds	r0, #1
 800e366:	d1dd      	bne.n	800e324 <_malloc_r+0x64>
 800e368:	e7cf      	b.n	800e30a <_malloc_r+0x4a>
 800e36a:	bf00      	nop
 800e36c:	20008220 	.word	0x20008220
 800e370:	20008224 	.word	0x20008224

0800e374 <_sbrk_r>:
 800e374:	b538      	push	{r3, r4, r5, lr}
 800e376:	4d06      	ldr	r5, [pc, #24]	; (800e390 <_sbrk_r+0x1c>)
 800e378:	2300      	movs	r3, #0
 800e37a:	4604      	mov	r4, r0
 800e37c:	4608      	mov	r0, r1
 800e37e:	602b      	str	r3, [r5, #0]
 800e380:	f7f4 fb8c 	bl	8002a9c <_sbrk>
 800e384:	1c43      	adds	r3, r0, #1
 800e386:	d102      	bne.n	800e38e <_sbrk_r+0x1a>
 800e388:	682b      	ldr	r3, [r5, #0]
 800e38a:	b103      	cbz	r3, 800e38e <_sbrk_r+0x1a>
 800e38c:	6023      	str	r3, [r4, #0]
 800e38e:	bd38      	pop	{r3, r4, r5, pc}
 800e390:	20008bbc 	.word	0x20008bbc

0800e394 <strcat>:
 800e394:	b510      	push	{r4, lr}
 800e396:	4602      	mov	r2, r0
 800e398:	7814      	ldrb	r4, [r2, #0]
 800e39a:	4613      	mov	r3, r2
 800e39c:	3201      	adds	r2, #1
 800e39e:	2c00      	cmp	r4, #0
 800e3a0:	d1fa      	bne.n	800e398 <strcat+0x4>
 800e3a2:	3b01      	subs	r3, #1
 800e3a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e3ac:	2a00      	cmp	r2, #0
 800e3ae:	d1f9      	bne.n	800e3a4 <strcat+0x10>
 800e3b0:	bd10      	pop	{r4, pc}

0800e3b2 <strcpy>:
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3b8:	f803 2b01 	strb.w	r2, [r3], #1
 800e3bc:	2a00      	cmp	r2, #0
 800e3be:	d1f9      	bne.n	800e3b4 <strcpy+0x2>
 800e3c0:	4770      	bx	lr

0800e3c2 <print_e>:
 800e3c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3c4:	b087      	sub	sp, #28
 800e3c6:	ec43 2b10 	vmov	d0, r2, r3
 800e3ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e3cc:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800e3d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e3d2:	ab04      	add	r3, sp, #16
 800e3d4:	9301      	str	r3, [sp, #4]
 800e3d6:	ab03      	add	r3, sp, #12
 800e3d8:	9300      	str	r3, [sp, #0]
 800e3da:	1c62      	adds	r2, r4, #1
 800e3dc:	ab05      	add	r3, sp, #20
 800e3de:	460f      	mov	r7, r1
 800e3e0:	2102      	movs	r1, #2
 800e3e2:	f000 fd89 	bl	800eef8 <_dtoa_r>
 800e3e6:	9a05      	ldr	r2, [sp, #20]
 800e3e8:	f242 730f 	movw	r3, #9999	; 0x270f
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d105      	bne.n	800e3fc <print_e+0x3a>
 800e3f0:	4601      	mov	r1, r0
 800e3f2:	4638      	mov	r0, r7
 800e3f4:	f7ff ffdd 	bl	800e3b2 <strcpy>
 800e3f8:	b007      	add	sp, #28
 800e3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3fc:	463b      	mov	r3, r7
 800e3fe:	7801      	ldrb	r1, [r0, #0]
 800e400:	f803 1b01 	strb.w	r1, [r3], #1
 800e404:	2c00      	cmp	r4, #0
 800e406:	bfc8      	it	gt
 800e408:	2501      	movgt	r5, #1
 800e40a:	212e      	movs	r1, #46	; 0x2e
 800e40c:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800e410:	b10f      	cbz	r7, 800e416 <print_e+0x54>
 800e412:	2c00      	cmp	r4, #0
 800e414:	dc37      	bgt.n	800e486 <print_e+0xc4>
 800e416:	2e67      	cmp	r6, #103	; 0x67
 800e418:	d046      	beq.n	800e4a8 <print_e+0xe6>
 800e41a:	2e47      	cmp	r6, #71	; 0x47
 800e41c:	d046      	beq.n	800e4ac <print_e+0xea>
 800e41e:	212e      	movs	r1, #46	; 0x2e
 800e420:	2030      	movs	r0, #48	; 0x30
 800e422:	2c00      	cmp	r4, #0
 800e424:	dc38      	bgt.n	800e498 <print_e+0xd6>
 800e426:	1e51      	subs	r1, r2, #1
 800e428:	2900      	cmp	r1, #0
 800e42a:	bfb8      	it	lt
 800e42c:	f1c2 0201 	rsblt	r2, r2, #1
 800e430:	4618      	mov	r0, r3
 800e432:	9105      	str	r1, [sp, #20]
 800e434:	bfbc      	itt	lt
 800e436:	212d      	movlt	r1, #45	; 0x2d
 800e438:	9205      	strlt	r2, [sp, #20]
 800e43a:	f800 6b02 	strb.w	r6, [r0], #2
 800e43e:	bfb8      	it	lt
 800e440:	7059      	strblt	r1, [r3, #1]
 800e442:	9905      	ldr	r1, [sp, #20]
 800e444:	bfa4      	itt	ge
 800e446:	222b      	movge	r2, #43	; 0x2b
 800e448:	705a      	strbge	r2, [r3, #1]
 800e44a:	2963      	cmp	r1, #99	; 0x63
 800e44c:	dd0b      	ble.n	800e466 <print_e+0xa4>
 800e44e:	2264      	movs	r2, #100	; 0x64
 800e450:	fb91 f2f2 	sdiv	r2, r1, r2
 800e454:	f102 0430 	add.w	r4, r2, #48	; 0x30
 800e458:	1cd8      	adds	r0, r3, #3
 800e45a:	709c      	strb	r4, [r3, #2]
 800e45c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800e460:	fb03 1202 	mla	r2, r3, r2, r1
 800e464:	9205      	str	r2, [sp, #20]
 800e466:	9a05      	ldr	r2, [sp, #20]
 800e468:	230a      	movs	r3, #10
 800e46a:	fb92 f3f3 	sdiv	r3, r2, r3
 800e46e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e472:	7001      	strb	r1, [r0, #0]
 800e474:	f06f 0109 	mvn.w	r1, #9
 800e478:	fb01 2303 	mla	r3, r1, r3, r2
 800e47c:	3330      	adds	r3, #48	; 0x30
 800e47e:	7043      	strb	r3, [r0, #1]
 800e480:	2300      	movs	r3, #0
 800e482:	7083      	strb	r3, [r0, #2]
 800e484:	e7b8      	b.n	800e3f8 <print_e+0x36>
 800e486:	b10d      	cbz	r5, 800e48c <print_e+0xca>
 800e488:	f803 1b01 	strb.w	r1, [r3], #1
 800e48c:	7805      	ldrb	r5, [r0, #0]
 800e48e:	f803 5b01 	strb.w	r5, [r3], #1
 800e492:	3c01      	subs	r4, #1
 800e494:	2500      	movs	r5, #0
 800e496:	e7b9      	b.n	800e40c <print_e+0x4a>
 800e498:	b10d      	cbz	r5, 800e49e <print_e+0xdc>
 800e49a:	f803 1b01 	strb.w	r1, [r3], #1
 800e49e:	f803 0b01 	strb.w	r0, [r3], #1
 800e4a2:	3c01      	subs	r4, #1
 800e4a4:	2500      	movs	r5, #0
 800e4a6:	e7bc      	b.n	800e422 <print_e+0x60>
 800e4a8:	2665      	movs	r6, #101	; 0x65
 800e4aa:	e7bc      	b.n	800e426 <print_e+0x64>
 800e4ac:	2645      	movs	r6, #69	; 0x45
 800e4ae:	e7ba      	b.n	800e426 <print_e+0x64>

0800e4b0 <_gcvt>:
 800e4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4b4:	ec55 4b10 	vmov	r4, r5, d0
 800e4b8:	b088      	sub	sp, #32
 800e4ba:	4681      	mov	r9, r0
 800e4bc:	4688      	mov	r8, r1
 800e4be:	4616      	mov	r6, r2
 800e4c0:	469a      	mov	sl, r3
 800e4c2:	ee10 0a10 	vmov	r0, s0
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	4629      	mov	r1, r5
 800e4cc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e4ce:	f7f2 fb15 	bl	8000afc <__aeabi_dcmplt>
 800e4d2:	b110      	cbz	r0, 800e4da <_gcvt+0x2a>
 800e4d4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e4d8:	461d      	mov	r5, r3
 800e4da:	2200      	movs	r2, #0
 800e4dc:	2300      	movs	r3, #0
 800e4de:	4620      	mov	r0, r4
 800e4e0:	4629      	mov	r1, r5
 800e4e2:	f7f2 fb01 	bl	8000ae8 <__aeabi_dcmpeq>
 800e4e6:	b138      	cbz	r0, 800e4f8 <_gcvt+0x48>
 800e4e8:	2330      	movs	r3, #48	; 0x30
 800e4ea:	7033      	strb	r3, [r6, #0]
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	7073      	strb	r3, [r6, #1]
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	b008      	add	sp, #32
 800e4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f8:	a34b      	add	r3, pc, #300	; (adr r3, 800e628 <_gcvt+0x178>)
 800e4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fe:	4620      	mov	r0, r4
 800e500:	4629      	mov	r1, r5
 800e502:	f7f2 fb05 	bl	8000b10 <__aeabi_dcmple>
 800e506:	b158      	cbz	r0, 800e520 <_gcvt+0x70>
 800e508:	f108 31ff 	add.w	r1, r8, #4294967295
 800e50c:	9100      	str	r1, [sp, #0]
 800e50e:	e9cd a701 	strd	sl, r7, [sp, #4]
 800e512:	4622      	mov	r2, r4
 800e514:	462b      	mov	r3, r5
 800e516:	4631      	mov	r1, r6
 800e518:	4648      	mov	r0, r9
 800e51a:	f7ff ff52 	bl	800e3c2 <print_e>
 800e51e:	e7e7      	b.n	800e4f0 <_gcvt+0x40>
 800e520:	4640      	mov	r0, r8
 800e522:	f000 fc0f 	bl	800ed44 <_mprec_log10>
 800e526:	4622      	mov	r2, r4
 800e528:	ec51 0b10 	vmov	r0, r1, d0
 800e52c:	462b      	mov	r3, r5
 800e52e:	f7f2 faef 	bl	8000b10 <__aeabi_dcmple>
 800e532:	2800      	cmp	r0, #0
 800e534:	d1e8      	bne.n	800e508 <_gcvt+0x58>
 800e536:	ab07      	add	r3, sp, #28
 800e538:	9301      	str	r3, [sp, #4]
 800e53a:	ab06      	add	r3, sp, #24
 800e53c:	9300      	str	r3, [sp, #0]
 800e53e:	4642      	mov	r2, r8
 800e540:	ab05      	add	r3, sp, #20
 800e542:	ec45 4b10 	vmov	d0, r4, r5
 800e546:	2102      	movs	r1, #2
 800e548:	4648      	mov	r0, r9
 800e54a:	f000 fcd5 	bl	800eef8 <_dtoa_r>
 800e54e:	9a05      	ldr	r2, [sp, #20]
 800e550:	f242 730f 	movw	r3, #9999	; 0x270f
 800e554:	429a      	cmp	r2, r3
 800e556:	d00e      	beq.n	800e576 <_gcvt+0xc6>
 800e558:	4633      	mov	r3, r6
 800e55a:	44b0      	add	r8, r6
 800e55c:	4604      	mov	r4, r0
 800e55e:	f810 5b01 	ldrb.w	r5, [r0], #1
 800e562:	9905      	ldr	r1, [sp, #20]
 800e564:	eba8 0203 	sub.w	r2, r8, r3
 800e568:	b10d      	cbz	r5, 800e56e <_gcvt+0xbe>
 800e56a:	2900      	cmp	r1, #0
 800e56c:	dc08      	bgt.n	800e580 <_gcvt+0xd0>
 800e56e:	2000      	movs	r0, #0
 800e570:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800e574:	e00d      	b.n	800e592 <_gcvt+0xe2>
 800e576:	4601      	mov	r1, r0
 800e578:	4630      	mov	r0, r6
 800e57a:	f7ff ff1a 	bl	800e3b2 <strcpy>
 800e57e:	e7b7      	b.n	800e4f0 <_gcvt+0x40>
 800e580:	3901      	subs	r1, #1
 800e582:	f803 5b01 	strb.w	r5, [r3], #1
 800e586:	9105      	str	r1, [sp, #20]
 800e588:	e7e8      	b.n	800e55c <_gcvt+0xac>
 800e58a:	f803 cb01 	strb.w	ip, [r3], #1
 800e58e:	3a01      	subs	r2, #1
 800e590:	2001      	movs	r0, #1
 800e592:	2900      	cmp	r1, #0
 800e594:	460d      	mov	r5, r1
 800e596:	dc2a      	bgt.n	800e5ee <_gcvt+0x13e>
 800e598:	b100      	cbz	r0, 800e59c <_gcvt+0xec>
 800e59a:	9105      	str	r1, [sp, #20]
 800e59c:	b90f      	cbnz	r7, 800e5a2 <_gcvt+0xf2>
 800e59e:	7821      	ldrb	r1, [r4, #0]
 800e5a0:	b311      	cbz	r1, 800e5e8 <_gcvt+0x138>
 800e5a2:	42b3      	cmp	r3, r6
 800e5a4:	bf04      	itt	eq
 800e5a6:	2130      	moveq	r1, #48	; 0x30
 800e5a8:	f803 1b01 	strbeq.w	r1, [r3], #1
 800e5ac:	212e      	movs	r1, #46	; 0x2e
 800e5ae:	7019      	strb	r1, [r3, #0]
 800e5b0:	9905      	ldr	r1, [sp, #20]
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	2500      	movs	r5, #0
 800e5b6:	eba1 0c03 	sub.w	ip, r1, r3
 800e5ba:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800e5be:	eb1c 0f00 	cmn.w	ip, r0
 800e5c2:	d41c      	bmi.n	800e5fe <_gcvt+0x14e>
 800e5c4:	2900      	cmp	r1, #0
 800e5c6:	f1c1 0000 	rsb	r0, r1, #0
 800e5ca:	bfc8      	it	gt
 800e5cc:	2000      	movgt	r0, #0
 800e5ce:	f100 0c01 	add.w	ip, r0, #1
 800e5d2:	4463      	add	r3, ip
 800e5d4:	4401      	add	r1, r0
 800e5d6:	b105      	cbz	r5, 800e5da <_gcvt+0x12a>
 800e5d8:	9105      	str	r1, [sp, #20]
 800e5da:	1e61      	subs	r1, r4, #1
 800e5dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e5e0:	b108      	cbz	r0, 800e5e6 <_gcvt+0x136>
 800e5e2:	2a00      	cmp	r2, #0
 800e5e4:	dc0f      	bgt.n	800e606 <_gcvt+0x156>
 800e5e6:	b9df      	cbnz	r7, 800e620 <_gcvt+0x170>
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	701a      	strb	r2, [r3, #0]
 800e5ec:	e780      	b.n	800e4f0 <_gcvt+0x40>
 800e5ee:	2a00      	cmp	r2, #0
 800e5f0:	f101 31ff 	add.w	r1, r1, #4294967295
 800e5f4:	dcc9      	bgt.n	800e58a <_gcvt+0xda>
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	d0d0      	beq.n	800e59c <_gcvt+0xec>
 800e5fa:	9505      	str	r5, [sp, #20]
 800e5fc:	e7ce      	b.n	800e59c <_gcvt+0xec>
 800e5fe:	f800 ef01 	strb.w	lr, [r0, #1]!
 800e602:	2501      	movs	r5, #1
 800e604:	e7db      	b.n	800e5be <_gcvt+0x10e>
 800e606:	f803 0b01 	strb.w	r0, [r3], #1
 800e60a:	3a01      	subs	r2, #1
 800e60c:	e7e6      	b.n	800e5dc <_gcvt+0x12c>
 800e60e:	f801 5b01 	strb.w	r5, [r1], #1
 800e612:	1a60      	subs	r0, r4, r1
 800e614:	2800      	cmp	r0, #0
 800e616:	dcfa      	bgt.n	800e60e <_gcvt+0x15e>
 800e618:	2a00      	cmp	r2, #0
 800e61a:	bfa8      	it	ge
 800e61c:	189b      	addge	r3, r3, r2
 800e61e:	e7e3      	b.n	800e5e8 <_gcvt+0x138>
 800e620:	4619      	mov	r1, r3
 800e622:	189c      	adds	r4, r3, r2
 800e624:	2530      	movs	r5, #48	; 0x30
 800e626:	e7f4      	b.n	800e612 <_gcvt+0x162>
 800e628:	eb1c432d 	.word	0xeb1c432d
 800e62c:	3f1a36e2 	.word	0x3f1a36e2

0800e630 <__malloc_lock>:
 800e630:	4801      	ldr	r0, [pc, #4]	; (800e638 <__malloc_lock+0x8>)
 800e632:	f001 ba60 	b.w	800faf6 <__retarget_lock_acquire_recursive>
 800e636:	bf00      	nop
 800e638:	20008bc4 	.word	0x20008bc4

0800e63c <__malloc_unlock>:
 800e63c:	4801      	ldr	r0, [pc, #4]	; (800e644 <__malloc_unlock+0x8>)
 800e63e:	f001 ba5b 	b.w	800faf8 <__retarget_lock_release_recursive>
 800e642:	bf00      	nop
 800e644:	20008bc4 	.word	0x20008bc4

0800e648 <_Balloc>:
 800e648:	b570      	push	{r4, r5, r6, lr}
 800e64a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e64c:	4604      	mov	r4, r0
 800e64e:	460d      	mov	r5, r1
 800e650:	b976      	cbnz	r6, 800e670 <_Balloc+0x28>
 800e652:	2010      	movs	r0, #16
 800e654:	f7ff fdbe 	bl	800e1d4 <malloc>
 800e658:	4602      	mov	r2, r0
 800e65a:	6260      	str	r0, [r4, #36]	; 0x24
 800e65c:	b920      	cbnz	r0, 800e668 <_Balloc+0x20>
 800e65e:	4b18      	ldr	r3, [pc, #96]	; (800e6c0 <_Balloc+0x78>)
 800e660:	4818      	ldr	r0, [pc, #96]	; (800e6c4 <_Balloc+0x7c>)
 800e662:	2166      	movs	r1, #102	; 0x66
 800e664:	f000 fb9c 	bl	800eda0 <__assert_func>
 800e668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e66c:	6006      	str	r6, [r0, #0]
 800e66e:	60c6      	str	r6, [r0, #12]
 800e670:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e672:	68f3      	ldr	r3, [r6, #12]
 800e674:	b183      	cbz	r3, 800e698 <_Balloc+0x50>
 800e676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e67e:	b9b8      	cbnz	r0, 800e6b0 <_Balloc+0x68>
 800e680:	2101      	movs	r1, #1
 800e682:	fa01 f605 	lsl.w	r6, r1, r5
 800e686:	1d72      	adds	r2, r6, #5
 800e688:	0092      	lsls	r2, r2, #2
 800e68a:	4620      	mov	r0, r4
 800e68c:	f000 fb78 	bl	800ed80 <_calloc_r>
 800e690:	b160      	cbz	r0, 800e6ac <_Balloc+0x64>
 800e692:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e696:	e00e      	b.n	800e6b6 <_Balloc+0x6e>
 800e698:	2221      	movs	r2, #33	; 0x21
 800e69a:	2104      	movs	r1, #4
 800e69c:	4620      	mov	r0, r4
 800e69e:	f000 fb6f 	bl	800ed80 <_calloc_r>
 800e6a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6a4:	60f0      	str	r0, [r6, #12]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d1e4      	bne.n	800e676 <_Balloc+0x2e>
 800e6ac:	2000      	movs	r0, #0
 800e6ae:	bd70      	pop	{r4, r5, r6, pc}
 800e6b0:	6802      	ldr	r2, [r0, #0]
 800e6b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e6bc:	e7f7      	b.n	800e6ae <_Balloc+0x66>
 800e6be:	bf00      	nop
 800e6c0:	08012dc8 	.word	0x08012dc8
 800e6c4:	08012ddf 	.word	0x08012ddf

0800e6c8 <_Bfree>:
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e6cc:	4605      	mov	r5, r0
 800e6ce:	460c      	mov	r4, r1
 800e6d0:	b976      	cbnz	r6, 800e6f0 <_Bfree+0x28>
 800e6d2:	2010      	movs	r0, #16
 800e6d4:	f7ff fd7e 	bl	800e1d4 <malloc>
 800e6d8:	4602      	mov	r2, r0
 800e6da:	6268      	str	r0, [r5, #36]	; 0x24
 800e6dc:	b920      	cbnz	r0, 800e6e8 <_Bfree+0x20>
 800e6de:	4b09      	ldr	r3, [pc, #36]	; (800e704 <_Bfree+0x3c>)
 800e6e0:	4809      	ldr	r0, [pc, #36]	; (800e708 <_Bfree+0x40>)
 800e6e2:	218a      	movs	r1, #138	; 0x8a
 800e6e4:	f000 fb5c 	bl	800eda0 <__assert_func>
 800e6e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6ec:	6006      	str	r6, [r0, #0]
 800e6ee:	60c6      	str	r6, [r0, #12]
 800e6f0:	b13c      	cbz	r4, 800e702 <_Bfree+0x3a>
 800e6f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e6f4:	6862      	ldr	r2, [r4, #4]
 800e6f6:	68db      	ldr	r3, [r3, #12]
 800e6f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e6fc:	6021      	str	r1, [r4, #0]
 800e6fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e702:	bd70      	pop	{r4, r5, r6, pc}
 800e704:	08012dc8 	.word	0x08012dc8
 800e708:	08012ddf 	.word	0x08012ddf

0800e70c <__multadd>:
 800e70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e710:	690e      	ldr	r6, [r1, #16]
 800e712:	4607      	mov	r7, r0
 800e714:	4698      	mov	r8, r3
 800e716:	460c      	mov	r4, r1
 800e718:	f101 0014 	add.w	r0, r1, #20
 800e71c:	2300      	movs	r3, #0
 800e71e:	6805      	ldr	r5, [r0, #0]
 800e720:	b2a9      	uxth	r1, r5
 800e722:	fb02 8101 	mla	r1, r2, r1, r8
 800e726:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e72a:	0c2d      	lsrs	r5, r5, #16
 800e72c:	fb02 c505 	mla	r5, r2, r5, ip
 800e730:	b289      	uxth	r1, r1
 800e732:	3301      	adds	r3, #1
 800e734:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e738:	429e      	cmp	r6, r3
 800e73a:	f840 1b04 	str.w	r1, [r0], #4
 800e73e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e742:	dcec      	bgt.n	800e71e <__multadd+0x12>
 800e744:	f1b8 0f00 	cmp.w	r8, #0
 800e748:	d022      	beq.n	800e790 <__multadd+0x84>
 800e74a:	68a3      	ldr	r3, [r4, #8]
 800e74c:	42b3      	cmp	r3, r6
 800e74e:	dc19      	bgt.n	800e784 <__multadd+0x78>
 800e750:	6861      	ldr	r1, [r4, #4]
 800e752:	4638      	mov	r0, r7
 800e754:	3101      	adds	r1, #1
 800e756:	f7ff ff77 	bl	800e648 <_Balloc>
 800e75a:	4605      	mov	r5, r0
 800e75c:	b928      	cbnz	r0, 800e76a <__multadd+0x5e>
 800e75e:	4602      	mov	r2, r0
 800e760:	4b0d      	ldr	r3, [pc, #52]	; (800e798 <__multadd+0x8c>)
 800e762:	480e      	ldr	r0, [pc, #56]	; (800e79c <__multadd+0x90>)
 800e764:	21b5      	movs	r1, #181	; 0xb5
 800e766:	f000 fb1b 	bl	800eda0 <__assert_func>
 800e76a:	6922      	ldr	r2, [r4, #16]
 800e76c:	3202      	adds	r2, #2
 800e76e:	f104 010c 	add.w	r1, r4, #12
 800e772:	0092      	lsls	r2, r2, #2
 800e774:	300c      	adds	r0, #12
 800e776:	f7ff fd3d 	bl	800e1f4 <memcpy>
 800e77a:	4621      	mov	r1, r4
 800e77c:	4638      	mov	r0, r7
 800e77e:	f7ff ffa3 	bl	800e6c8 <_Bfree>
 800e782:	462c      	mov	r4, r5
 800e784:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e788:	3601      	adds	r6, #1
 800e78a:	f8c3 8014 	str.w	r8, [r3, #20]
 800e78e:	6126      	str	r6, [r4, #16]
 800e790:	4620      	mov	r0, r4
 800e792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e796:	bf00      	nop
 800e798:	08012e3f 	.word	0x08012e3f
 800e79c:	08012ddf 	.word	0x08012ddf

0800e7a0 <__hi0bits>:
 800e7a0:	0c03      	lsrs	r3, r0, #16
 800e7a2:	041b      	lsls	r3, r3, #16
 800e7a4:	b9d3      	cbnz	r3, 800e7dc <__hi0bits+0x3c>
 800e7a6:	0400      	lsls	r0, r0, #16
 800e7a8:	2310      	movs	r3, #16
 800e7aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e7ae:	bf04      	itt	eq
 800e7b0:	0200      	lsleq	r0, r0, #8
 800e7b2:	3308      	addeq	r3, #8
 800e7b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e7b8:	bf04      	itt	eq
 800e7ba:	0100      	lsleq	r0, r0, #4
 800e7bc:	3304      	addeq	r3, #4
 800e7be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e7c2:	bf04      	itt	eq
 800e7c4:	0080      	lsleq	r0, r0, #2
 800e7c6:	3302      	addeq	r3, #2
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	db05      	blt.n	800e7d8 <__hi0bits+0x38>
 800e7cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e7d0:	f103 0301 	add.w	r3, r3, #1
 800e7d4:	bf08      	it	eq
 800e7d6:	2320      	moveq	r3, #32
 800e7d8:	4618      	mov	r0, r3
 800e7da:	4770      	bx	lr
 800e7dc:	2300      	movs	r3, #0
 800e7de:	e7e4      	b.n	800e7aa <__hi0bits+0xa>

0800e7e0 <__lo0bits>:
 800e7e0:	6803      	ldr	r3, [r0, #0]
 800e7e2:	f013 0207 	ands.w	r2, r3, #7
 800e7e6:	4601      	mov	r1, r0
 800e7e8:	d00b      	beq.n	800e802 <__lo0bits+0x22>
 800e7ea:	07da      	lsls	r2, r3, #31
 800e7ec:	d424      	bmi.n	800e838 <__lo0bits+0x58>
 800e7ee:	0798      	lsls	r0, r3, #30
 800e7f0:	bf49      	itett	mi
 800e7f2:	085b      	lsrmi	r3, r3, #1
 800e7f4:	089b      	lsrpl	r3, r3, #2
 800e7f6:	2001      	movmi	r0, #1
 800e7f8:	600b      	strmi	r3, [r1, #0]
 800e7fa:	bf5c      	itt	pl
 800e7fc:	600b      	strpl	r3, [r1, #0]
 800e7fe:	2002      	movpl	r0, #2
 800e800:	4770      	bx	lr
 800e802:	b298      	uxth	r0, r3
 800e804:	b9b0      	cbnz	r0, 800e834 <__lo0bits+0x54>
 800e806:	0c1b      	lsrs	r3, r3, #16
 800e808:	2010      	movs	r0, #16
 800e80a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e80e:	bf04      	itt	eq
 800e810:	0a1b      	lsreq	r3, r3, #8
 800e812:	3008      	addeq	r0, #8
 800e814:	071a      	lsls	r2, r3, #28
 800e816:	bf04      	itt	eq
 800e818:	091b      	lsreq	r3, r3, #4
 800e81a:	3004      	addeq	r0, #4
 800e81c:	079a      	lsls	r2, r3, #30
 800e81e:	bf04      	itt	eq
 800e820:	089b      	lsreq	r3, r3, #2
 800e822:	3002      	addeq	r0, #2
 800e824:	07da      	lsls	r2, r3, #31
 800e826:	d403      	bmi.n	800e830 <__lo0bits+0x50>
 800e828:	085b      	lsrs	r3, r3, #1
 800e82a:	f100 0001 	add.w	r0, r0, #1
 800e82e:	d005      	beq.n	800e83c <__lo0bits+0x5c>
 800e830:	600b      	str	r3, [r1, #0]
 800e832:	4770      	bx	lr
 800e834:	4610      	mov	r0, r2
 800e836:	e7e8      	b.n	800e80a <__lo0bits+0x2a>
 800e838:	2000      	movs	r0, #0
 800e83a:	4770      	bx	lr
 800e83c:	2020      	movs	r0, #32
 800e83e:	4770      	bx	lr

0800e840 <__i2b>:
 800e840:	b510      	push	{r4, lr}
 800e842:	460c      	mov	r4, r1
 800e844:	2101      	movs	r1, #1
 800e846:	f7ff feff 	bl	800e648 <_Balloc>
 800e84a:	4602      	mov	r2, r0
 800e84c:	b928      	cbnz	r0, 800e85a <__i2b+0x1a>
 800e84e:	4b05      	ldr	r3, [pc, #20]	; (800e864 <__i2b+0x24>)
 800e850:	4805      	ldr	r0, [pc, #20]	; (800e868 <__i2b+0x28>)
 800e852:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e856:	f000 faa3 	bl	800eda0 <__assert_func>
 800e85a:	2301      	movs	r3, #1
 800e85c:	6144      	str	r4, [r0, #20]
 800e85e:	6103      	str	r3, [r0, #16]
 800e860:	bd10      	pop	{r4, pc}
 800e862:	bf00      	nop
 800e864:	08012e3f 	.word	0x08012e3f
 800e868:	08012ddf 	.word	0x08012ddf

0800e86c <__multiply>:
 800e86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e870:	4614      	mov	r4, r2
 800e872:	690a      	ldr	r2, [r1, #16]
 800e874:	6923      	ldr	r3, [r4, #16]
 800e876:	429a      	cmp	r2, r3
 800e878:	bfb8      	it	lt
 800e87a:	460b      	movlt	r3, r1
 800e87c:	460d      	mov	r5, r1
 800e87e:	bfbc      	itt	lt
 800e880:	4625      	movlt	r5, r4
 800e882:	461c      	movlt	r4, r3
 800e884:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e888:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e88c:	68ab      	ldr	r3, [r5, #8]
 800e88e:	6869      	ldr	r1, [r5, #4]
 800e890:	eb0a 0709 	add.w	r7, sl, r9
 800e894:	42bb      	cmp	r3, r7
 800e896:	b085      	sub	sp, #20
 800e898:	bfb8      	it	lt
 800e89a:	3101      	addlt	r1, #1
 800e89c:	f7ff fed4 	bl	800e648 <_Balloc>
 800e8a0:	b930      	cbnz	r0, 800e8b0 <__multiply+0x44>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	4b42      	ldr	r3, [pc, #264]	; (800e9b0 <__multiply+0x144>)
 800e8a6:	4843      	ldr	r0, [pc, #268]	; (800e9b4 <__multiply+0x148>)
 800e8a8:	f240 115d 	movw	r1, #349	; 0x15d
 800e8ac:	f000 fa78 	bl	800eda0 <__assert_func>
 800e8b0:	f100 0614 	add.w	r6, r0, #20
 800e8b4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e8b8:	4633      	mov	r3, r6
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	4543      	cmp	r3, r8
 800e8be:	d31e      	bcc.n	800e8fe <__multiply+0x92>
 800e8c0:	f105 0c14 	add.w	ip, r5, #20
 800e8c4:	f104 0314 	add.w	r3, r4, #20
 800e8c8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e8cc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e8d0:	9202      	str	r2, [sp, #8]
 800e8d2:	ebac 0205 	sub.w	r2, ip, r5
 800e8d6:	3a15      	subs	r2, #21
 800e8d8:	f022 0203 	bic.w	r2, r2, #3
 800e8dc:	3204      	adds	r2, #4
 800e8de:	f105 0115 	add.w	r1, r5, #21
 800e8e2:	458c      	cmp	ip, r1
 800e8e4:	bf38      	it	cc
 800e8e6:	2204      	movcc	r2, #4
 800e8e8:	9201      	str	r2, [sp, #4]
 800e8ea:	9a02      	ldr	r2, [sp, #8]
 800e8ec:	9303      	str	r3, [sp, #12]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d808      	bhi.n	800e904 <__multiply+0x98>
 800e8f2:	2f00      	cmp	r7, #0
 800e8f4:	dc55      	bgt.n	800e9a2 <__multiply+0x136>
 800e8f6:	6107      	str	r7, [r0, #16]
 800e8f8:	b005      	add	sp, #20
 800e8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8fe:	f843 2b04 	str.w	r2, [r3], #4
 800e902:	e7db      	b.n	800e8bc <__multiply+0x50>
 800e904:	f8b3 a000 	ldrh.w	sl, [r3]
 800e908:	f1ba 0f00 	cmp.w	sl, #0
 800e90c:	d020      	beq.n	800e950 <__multiply+0xe4>
 800e90e:	f105 0e14 	add.w	lr, r5, #20
 800e912:	46b1      	mov	r9, r6
 800e914:	2200      	movs	r2, #0
 800e916:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e91a:	f8d9 b000 	ldr.w	fp, [r9]
 800e91e:	b2a1      	uxth	r1, r4
 800e920:	fa1f fb8b 	uxth.w	fp, fp
 800e924:	fb0a b101 	mla	r1, sl, r1, fp
 800e928:	4411      	add	r1, r2
 800e92a:	f8d9 2000 	ldr.w	r2, [r9]
 800e92e:	0c24      	lsrs	r4, r4, #16
 800e930:	0c12      	lsrs	r2, r2, #16
 800e932:	fb0a 2404 	mla	r4, sl, r4, r2
 800e936:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e93a:	b289      	uxth	r1, r1
 800e93c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e940:	45f4      	cmp	ip, lr
 800e942:	f849 1b04 	str.w	r1, [r9], #4
 800e946:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e94a:	d8e4      	bhi.n	800e916 <__multiply+0xaa>
 800e94c:	9901      	ldr	r1, [sp, #4]
 800e94e:	5072      	str	r2, [r6, r1]
 800e950:	9a03      	ldr	r2, [sp, #12]
 800e952:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e956:	3304      	adds	r3, #4
 800e958:	f1b9 0f00 	cmp.w	r9, #0
 800e95c:	d01f      	beq.n	800e99e <__multiply+0x132>
 800e95e:	6834      	ldr	r4, [r6, #0]
 800e960:	f105 0114 	add.w	r1, r5, #20
 800e964:	46b6      	mov	lr, r6
 800e966:	f04f 0a00 	mov.w	sl, #0
 800e96a:	880a      	ldrh	r2, [r1, #0]
 800e96c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e970:	fb09 b202 	mla	r2, r9, r2, fp
 800e974:	4492      	add	sl, r2
 800e976:	b2a4      	uxth	r4, r4
 800e978:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e97c:	f84e 4b04 	str.w	r4, [lr], #4
 800e980:	f851 4b04 	ldr.w	r4, [r1], #4
 800e984:	f8be 2000 	ldrh.w	r2, [lr]
 800e988:	0c24      	lsrs	r4, r4, #16
 800e98a:	fb09 2404 	mla	r4, r9, r4, r2
 800e98e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e992:	458c      	cmp	ip, r1
 800e994:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e998:	d8e7      	bhi.n	800e96a <__multiply+0xfe>
 800e99a:	9a01      	ldr	r2, [sp, #4]
 800e99c:	50b4      	str	r4, [r6, r2]
 800e99e:	3604      	adds	r6, #4
 800e9a0:	e7a3      	b.n	800e8ea <__multiply+0x7e>
 800e9a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d1a5      	bne.n	800e8f6 <__multiply+0x8a>
 800e9aa:	3f01      	subs	r7, #1
 800e9ac:	e7a1      	b.n	800e8f2 <__multiply+0x86>
 800e9ae:	bf00      	nop
 800e9b0:	08012e3f 	.word	0x08012e3f
 800e9b4:	08012ddf 	.word	0x08012ddf

0800e9b8 <__pow5mult>:
 800e9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9bc:	4615      	mov	r5, r2
 800e9be:	f012 0203 	ands.w	r2, r2, #3
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	460f      	mov	r7, r1
 800e9c6:	d007      	beq.n	800e9d8 <__pow5mult+0x20>
 800e9c8:	4c25      	ldr	r4, [pc, #148]	; (800ea60 <__pow5mult+0xa8>)
 800e9ca:	3a01      	subs	r2, #1
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e9d2:	f7ff fe9b 	bl	800e70c <__multadd>
 800e9d6:	4607      	mov	r7, r0
 800e9d8:	10ad      	asrs	r5, r5, #2
 800e9da:	d03d      	beq.n	800ea58 <__pow5mult+0xa0>
 800e9dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e9de:	b97c      	cbnz	r4, 800ea00 <__pow5mult+0x48>
 800e9e0:	2010      	movs	r0, #16
 800e9e2:	f7ff fbf7 	bl	800e1d4 <malloc>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	6270      	str	r0, [r6, #36]	; 0x24
 800e9ea:	b928      	cbnz	r0, 800e9f8 <__pow5mult+0x40>
 800e9ec:	4b1d      	ldr	r3, [pc, #116]	; (800ea64 <__pow5mult+0xac>)
 800e9ee:	481e      	ldr	r0, [pc, #120]	; (800ea68 <__pow5mult+0xb0>)
 800e9f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e9f4:	f000 f9d4 	bl	800eda0 <__assert_func>
 800e9f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e9fc:	6004      	str	r4, [r0, #0]
 800e9fe:	60c4      	str	r4, [r0, #12]
 800ea00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ea04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ea08:	b94c      	cbnz	r4, 800ea1e <__pow5mult+0x66>
 800ea0a:	f240 2171 	movw	r1, #625	; 0x271
 800ea0e:	4630      	mov	r0, r6
 800ea10:	f7ff ff16 	bl	800e840 <__i2b>
 800ea14:	2300      	movs	r3, #0
 800ea16:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	6003      	str	r3, [r0, #0]
 800ea1e:	f04f 0900 	mov.w	r9, #0
 800ea22:	07eb      	lsls	r3, r5, #31
 800ea24:	d50a      	bpl.n	800ea3c <__pow5mult+0x84>
 800ea26:	4639      	mov	r1, r7
 800ea28:	4622      	mov	r2, r4
 800ea2a:	4630      	mov	r0, r6
 800ea2c:	f7ff ff1e 	bl	800e86c <__multiply>
 800ea30:	4639      	mov	r1, r7
 800ea32:	4680      	mov	r8, r0
 800ea34:	4630      	mov	r0, r6
 800ea36:	f7ff fe47 	bl	800e6c8 <_Bfree>
 800ea3a:	4647      	mov	r7, r8
 800ea3c:	106d      	asrs	r5, r5, #1
 800ea3e:	d00b      	beq.n	800ea58 <__pow5mult+0xa0>
 800ea40:	6820      	ldr	r0, [r4, #0]
 800ea42:	b938      	cbnz	r0, 800ea54 <__pow5mult+0x9c>
 800ea44:	4622      	mov	r2, r4
 800ea46:	4621      	mov	r1, r4
 800ea48:	4630      	mov	r0, r6
 800ea4a:	f7ff ff0f 	bl	800e86c <__multiply>
 800ea4e:	6020      	str	r0, [r4, #0]
 800ea50:	f8c0 9000 	str.w	r9, [r0]
 800ea54:	4604      	mov	r4, r0
 800ea56:	e7e4      	b.n	800ea22 <__pow5mult+0x6a>
 800ea58:	4638      	mov	r0, r7
 800ea5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea5e:	bf00      	nop
 800ea60:	08012f40 	.word	0x08012f40
 800ea64:	08012dc8 	.word	0x08012dc8
 800ea68:	08012ddf 	.word	0x08012ddf

0800ea6c <__lshift>:
 800ea6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea70:	460c      	mov	r4, r1
 800ea72:	6849      	ldr	r1, [r1, #4]
 800ea74:	6923      	ldr	r3, [r4, #16]
 800ea76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea7a:	68a3      	ldr	r3, [r4, #8]
 800ea7c:	4607      	mov	r7, r0
 800ea7e:	4691      	mov	r9, r2
 800ea80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea84:	f108 0601 	add.w	r6, r8, #1
 800ea88:	42b3      	cmp	r3, r6
 800ea8a:	db0b      	blt.n	800eaa4 <__lshift+0x38>
 800ea8c:	4638      	mov	r0, r7
 800ea8e:	f7ff fddb 	bl	800e648 <_Balloc>
 800ea92:	4605      	mov	r5, r0
 800ea94:	b948      	cbnz	r0, 800eaaa <__lshift+0x3e>
 800ea96:	4602      	mov	r2, r0
 800ea98:	4b28      	ldr	r3, [pc, #160]	; (800eb3c <__lshift+0xd0>)
 800ea9a:	4829      	ldr	r0, [pc, #164]	; (800eb40 <__lshift+0xd4>)
 800ea9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eaa0:	f000 f97e 	bl	800eda0 <__assert_func>
 800eaa4:	3101      	adds	r1, #1
 800eaa6:	005b      	lsls	r3, r3, #1
 800eaa8:	e7ee      	b.n	800ea88 <__lshift+0x1c>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	f100 0114 	add.w	r1, r0, #20
 800eab0:	f100 0210 	add.w	r2, r0, #16
 800eab4:	4618      	mov	r0, r3
 800eab6:	4553      	cmp	r3, sl
 800eab8:	db33      	blt.n	800eb22 <__lshift+0xb6>
 800eaba:	6920      	ldr	r0, [r4, #16]
 800eabc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eac0:	f104 0314 	add.w	r3, r4, #20
 800eac4:	f019 091f 	ands.w	r9, r9, #31
 800eac8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eacc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ead0:	d02b      	beq.n	800eb2a <__lshift+0xbe>
 800ead2:	f1c9 0e20 	rsb	lr, r9, #32
 800ead6:	468a      	mov	sl, r1
 800ead8:	2200      	movs	r2, #0
 800eada:	6818      	ldr	r0, [r3, #0]
 800eadc:	fa00 f009 	lsl.w	r0, r0, r9
 800eae0:	4302      	orrs	r2, r0
 800eae2:	f84a 2b04 	str.w	r2, [sl], #4
 800eae6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaea:	459c      	cmp	ip, r3
 800eaec:	fa22 f20e 	lsr.w	r2, r2, lr
 800eaf0:	d8f3      	bhi.n	800eada <__lshift+0x6e>
 800eaf2:	ebac 0304 	sub.w	r3, ip, r4
 800eaf6:	3b15      	subs	r3, #21
 800eaf8:	f023 0303 	bic.w	r3, r3, #3
 800eafc:	3304      	adds	r3, #4
 800eafe:	f104 0015 	add.w	r0, r4, #21
 800eb02:	4584      	cmp	ip, r0
 800eb04:	bf38      	it	cc
 800eb06:	2304      	movcc	r3, #4
 800eb08:	50ca      	str	r2, [r1, r3]
 800eb0a:	b10a      	cbz	r2, 800eb10 <__lshift+0xa4>
 800eb0c:	f108 0602 	add.w	r6, r8, #2
 800eb10:	3e01      	subs	r6, #1
 800eb12:	4638      	mov	r0, r7
 800eb14:	612e      	str	r6, [r5, #16]
 800eb16:	4621      	mov	r1, r4
 800eb18:	f7ff fdd6 	bl	800e6c8 <_Bfree>
 800eb1c:	4628      	mov	r0, r5
 800eb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb22:	f842 0f04 	str.w	r0, [r2, #4]!
 800eb26:	3301      	adds	r3, #1
 800eb28:	e7c5      	b.n	800eab6 <__lshift+0x4a>
 800eb2a:	3904      	subs	r1, #4
 800eb2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb30:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb34:	459c      	cmp	ip, r3
 800eb36:	d8f9      	bhi.n	800eb2c <__lshift+0xc0>
 800eb38:	e7ea      	b.n	800eb10 <__lshift+0xa4>
 800eb3a:	bf00      	nop
 800eb3c:	08012e3f 	.word	0x08012e3f
 800eb40:	08012ddf 	.word	0x08012ddf

0800eb44 <__mcmp>:
 800eb44:	b530      	push	{r4, r5, lr}
 800eb46:	6902      	ldr	r2, [r0, #16]
 800eb48:	690c      	ldr	r4, [r1, #16]
 800eb4a:	1b12      	subs	r2, r2, r4
 800eb4c:	d10e      	bne.n	800eb6c <__mcmp+0x28>
 800eb4e:	f100 0314 	add.w	r3, r0, #20
 800eb52:	3114      	adds	r1, #20
 800eb54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eb58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eb5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eb60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eb64:	42a5      	cmp	r5, r4
 800eb66:	d003      	beq.n	800eb70 <__mcmp+0x2c>
 800eb68:	d305      	bcc.n	800eb76 <__mcmp+0x32>
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	4610      	mov	r0, r2
 800eb6e:	bd30      	pop	{r4, r5, pc}
 800eb70:	4283      	cmp	r3, r0
 800eb72:	d3f3      	bcc.n	800eb5c <__mcmp+0x18>
 800eb74:	e7fa      	b.n	800eb6c <__mcmp+0x28>
 800eb76:	f04f 32ff 	mov.w	r2, #4294967295
 800eb7a:	e7f7      	b.n	800eb6c <__mcmp+0x28>

0800eb7c <__mdiff>:
 800eb7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb80:	460c      	mov	r4, r1
 800eb82:	4606      	mov	r6, r0
 800eb84:	4611      	mov	r1, r2
 800eb86:	4620      	mov	r0, r4
 800eb88:	4617      	mov	r7, r2
 800eb8a:	f7ff ffdb 	bl	800eb44 <__mcmp>
 800eb8e:	1e05      	subs	r5, r0, #0
 800eb90:	d110      	bne.n	800ebb4 <__mdiff+0x38>
 800eb92:	4629      	mov	r1, r5
 800eb94:	4630      	mov	r0, r6
 800eb96:	f7ff fd57 	bl	800e648 <_Balloc>
 800eb9a:	b930      	cbnz	r0, 800ebaa <__mdiff+0x2e>
 800eb9c:	4b39      	ldr	r3, [pc, #228]	; (800ec84 <__mdiff+0x108>)
 800eb9e:	4602      	mov	r2, r0
 800eba0:	f240 2132 	movw	r1, #562	; 0x232
 800eba4:	4838      	ldr	r0, [pc, #224]	; (800ec88 <__mdiff+0x10c>)
 800eba6:	f000 f8fb 	bl	800eda0 <__assert_func>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ebb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb4:	bfa4      	itt	ge
 800ebb6:	463b      	movge	r3, r7
 800ebb8:	4627      	movge	r7, r4
 800ebba:	4630      	mov	r0, r6
 800ebbc:	6879      	ldr	r1, [r7, #4]
 800ebbe:	bfa6      	itte	ge
 800ebc0:	461c      	movge	r4, r3
 800ebc2:	2500      	movge	r5, #0
 800ebc4:	2501      	movlt	r5, #1
 800ebc6:	f7ff fd3f 	bl	800e648 <_Balloc>
 800ebca:	b920      	cbnz	r0, 800ebd6 <__mdiff+0x5a>
 800ebcc:	4b2d      	ldr	r3, [pc, #180]	; (800ec84 <__mdiff+0x108>)
 800ebce:	4602      	mov	r2, r0
 800ebd0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ebd4:	e7e6      	b.n	800eba4 <__mdiff+0x28>
 800ebd6:	693e      	ldr	r6, [r7, #16]
 800ebd8:	60c5      	str	r5, [r0, #12]
 800ebda:	6925      	ldr	r5, [r4, #16]
 800ebdc:	f107 0114 	add.w	r1, r7, #20
 800ebe0:	f104 0914 	add.w	r9, r4, #20
 800ebe4:	f100 0e14 	add.w	lr, r0, #20
 800ebe8:	f107 0210 	add.w	r2, r7, #16
 800ebec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ebf0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ebf4:	46f2      	mov	sl, lr
 800ebf6:	2700      	movs	r7, #0
 800ebf8:	f859 3b04 	ldr.w	r3, [r9], #4
 800ebfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ec00:	fa1f f883 	uxth.w	r8, r3
 800ec04:	fa17 f78b 	uxtah	r7, r7, fp
 800ec08:	0c1b      	lsrs	r3, r3, #16
 800ec0a:	eba7 0808 	sub.w	r8, r7, r8
 800ec0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ec12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ec16:	fa1f f888 	uxth.w	r8, r8
 800ec1a:	141f      	asrs	r7, r3, #16
 800ec1c:	454d      	cmp	r5, r9
 800ec1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ec22:	f84a 3b04 	str.w	r3, [sl], #4
 800ec26:	d8e7      	bhi.n	800ebf8 <__mdiff+0x7c>
 800ec28:	1b2b      	subs	r3, r5, r4
 800ec2a:	3b15      	subs	r3, #21
 800ec2c:	f023 0303 	bic.w	r3, r3, #3
 800ec30:	3304      	adds	r3, #4
 800ec32:	3415      	adds	r4, #21
 800ec34:	42a5      	cmp	r5, r4
 800ec36:	bf38      	it	cc
 800ec38:	2304      	movcc	r3, #4
 800ec3a:	4419      	add	r1, r3
 800ec3c:	4473      	add	r3, lr
 800ec3e:	469e      	mov	lr, r3
 800ec40:	460d      	mov	r5, r1
 800ec42:	4565      	cmp	r5, ip
 800ec44:	d30e      	bcc.n	800ec64 <__mdiff+0xe8>
 800ec46:	f10c 0203 	add.w	r2, ip, #3
 800ec4a:	1a52      	subs	r2, r2, r1
 800ec4c:	f022 0203 	bic.w	r2, r2, #3
 800ec50:	3903      	subs	r1, #3
 800ec52:	458c      	cmp	ip, r1
 800ec54:	bf38      	it	cc
 800ec56:	2200      	movcc	r2, #0
 800ec58:	441a      	add	r2, r3
 800ec5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ec5e:	b17b      	cbz	r3, 800ec80 <__mdiff+0x104>
 800ec60:	6106      	str	r6, [r0, #16]
 800ec62:	e7a5      	b.n	800ebb0 <__mdiff+0x34>
 800ec64:	f855 8b04 	ldr.w	r8, [r5], #4
 800ec68:	fa17 f488 	uxtah	r4, r7, r8
 800ec6c:	1422      	asrs	r2, r4, #16
 800ec6e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ec72:	b2a4      	uxth	r4, r4
 800ec74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ec78:	f84e 4b04 	str.w	r4, [lr], #4
 800ec7c:	1417      	asrs	r7, r2, #16
 800ec7e:	e7e0      	b.n	800ec42 <__mdiff+0xc6>
 800ec80:	3e01      	subs	r6, #1
 800ec82:	e7ea      	b.n	800ec5a <__mdiff+0xde>
 800ec84:	08012e3f 	.word	0x08012e3f
 800ec88:	08012ddf 	.word	0x08012ddf

0800ec8c <__d2b>:
 800ec8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec90:	4689      	mov	r9, r1
 800ec92:	2101      	movs	r1, #1
 800ec94:	ec57 6b10 	vmov	r6, r7, d0
 800ec98:	4690      	mov	r8, r2
 800ec9a:	f7ff fcd5 	bl	800e648 <_Balloc>
 800ec9e:	4604      	mov	r4, r0
 800eca0:	b930      	cbnz	r0, 800ecb0 <__d2b+0x24>
 800eca2:	4602      	mov	r2, r0
 800eca4:	4b25      	ldr	r3, [pc, #148]	; (800ed3c <__d2b+0xb0>)
 800eca6:	4826      	ldr	r0, [pc, #152]	; (800ed40 <__d2b+0xb4>)
 800eca8:	f240 310a 	movw	r1, #778	; 0x30a
 800ecac:	f000 f878 	bl	800eda0 <__assert_func>
 800ecb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ecb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ecb8:	bb35      	cbnz	r5, 800ed08 <__d2b+0x7c>
 800ecba:	2e00      	cmp	r6, #0
 800ecbc:	9301      	str	r3, [sp, #4]
 800ecbe:	d028      	beq.n	800ed12 <__d2b+0x86>
 800ecc0:	4668      	mov	r0, sp
 800ecc2:	9600      	str	r6, [sp, #0]
 800ecc4:	f7ff fd8c 	bl	800e7e0 <__lo0bits>
 800ecc8:	9900      	ldr	r1, [sp, #0]
 800ecca:	b300      	cbz	r0, 800ed0e <__d2b+0x82>
 800eccc:	9a01      	ldr	r2, [sp, #4]
 800ecce:	f1c0 0320 	rsb	r3, r0, #32
 800ecd2:	fa02 f303 	lsl.w	r3, r2, r3
 800ecd6:	430b      	orrs	r3, r1
 800ecd8:	40c2      	lsrs	r2, r0
 800ecda:	6163      	str	r3, [r4, #20]
 800ecdc:	9201      	str	r2, [sp, #4]
 800ecde:	9b01      	ldr	r3, [sp, #4]
 800ece0:	61a3      	str	r3, [r4, #24]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	bf14      	ite	ne
 800ece6:	2202      	movne	r2, #2
 800ece8:	2201      	moveq	r2, #1
 800ecea:	6122      	str	r2, [r4, #16]
 800ecec:	b1d5      	cbz	r5, 800ed24 <__d2b+0x98>
 800ecee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ecf2:	4405      	add	r5, r0
 800ecf4:	f8c9 5000 	str.w	r5, [r9]
 800ecf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ecfc:	f8c8 0000 	str.w	r0, [r8]
 800ed00:	4620      	mov	r0, r4
 800ed02:	b003      	add	sp, #12
 800ed04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed0c:	e7d5      	b.n	800ecba <__d2b+0x2e>
 800ed0e:	6161      	str	r1, [r4, #20]
 800ed10:	e7e5      	b.n	800ecde <__d2b+0x52>
 800ed12:	a801      	add	r0, sp, #4
 800ed14:	f7ff fd64 	bl	800e7e0 <__lo0bits>
 800ed18:	9b01      	ldr	r3, [sp, #4]
 800ed1a:	6163      	str	r3, [r4, #20]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	6122      	str	r2, [r4, #16]
 800ed20:	3020      	adds	r0, #32
 800ed22:	e7e3      	b.n	800ecec <__d2b+0x60>
 800ed24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ed2c:	f8c9 0000 	str.w	r0, [r9]
 800ed30:	6918      	ldr	r0, [r3, #16]
 800ed32:	f7ff fd35 	bl	800e7a0 <__hi0bits>
 800ed36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed3a:	e7df      	b.n	800ecfc <__d2b+0x70>
 800ed3c:	08012e3f 	.word	0x08012e3f
 800ed40:	08012ddf 	.word	0x08012ddf

0800ed44 <_mprec_log10>:
 800ed44:	2817      	cmp	r0, #23
 800ed46:	b5d0      	push	{r4, r6, r7, lr}
 800ed48:	4604      	mov	r4, r0
 800ed4a:	dc07      	bgt.n	800ed5c <_mprec_log10+0x18>
 800ed4c:	4809      	ldr	r0, [pc, #36]	; (800ed74 <_mprec_log10+0x30>)
 800ed4e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800ed52:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ed56:	ec41 0b10 	vmov	d0, r0, r1
 800ed5a:	bdd0      	pop	{r4, r6, r7, pc}
 800ed5c:	4906      	ldr	r1, [pc, #24]	; (800ed78 <_mprec_log10+0x34>)
 800ed5e:	4f07      	ldr	r7, [pc, #28]	; (800ed7c <_mprec_log10+0x38>)
 800ed60:	2000      	movs	r0, #0
 800ed62:	2600      	movs	r6, #0
 800ed64:	4632      	mov	r2, r6
 800ed66:	463b      	mov	r3, r7
 800ed68:	f7f1 fc56 	bl	8000618 <__aeabi_dmul>
 800ed6c:	3c01      	subs	r4, #1
 800ed6e:	d1f9      	bne.n	800ed64 <_mprec_log10+0x20>
 800ed70:	e7f1      	b.n	800ed56 <_mprec_log10+0x12>
 800ed72:	bf00      	nop
 800ed74:	08012e78 	.word	0x08012e78
 800ed78:	3ff00000 	.word	0x3ff00000
 800ed7c:	40240000 	.word	0x40240000

0800ed80 <_calloc_r>:
 800ed80:	b513      	push	{r0, r1, r4, lr}
 800ed82:	434a      	muls	r2, r1
 800ed84:	4611      	mov	r1, r2
 800ed86:	9201      	str	r2, [sp, #4]
 800ed88:	f7ff fa9a 	bl	800e2c0 <_malloc_r>
 800ed8c:	4604      	mov	r4, r0
 800ed8e:	b118      	cbz	r0, 800ed98 <_calloc_r+0x18>
 800ed90:	9a01      	ldr	r2, [sp, #4]
 800ed92:	2100      	movs	r1, #0
 800ed94:	f7ff fa3c 	bl	800e210 <memset>
 800ed98:	4620      	mov	r0, r4
 800ed9a:	b002      	add	sp, #8
 800ed9c:	bd10      	pop	{r4, pc}
	...

0800eda0 <__assert_func>:
 800eda0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eda2:	4614      	mov	r4, r2
 800eda4:	461a      	mov	r2, r3
 800eda6:	4b09      	ldr	r3, [pc, #36]	; (800edcc <__assert_func+0x2c>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	4605      	mov	r5, r0
 800edac:	68d8      	ldr	r0, [r3, #12]
 800edae:	b14c      	cbz	r4, 800edc4 <__assert_func+0x24>
 800edb0:	4b07      	ldr	r3, [pc, #28]	; (800edd0 <__assert_func+0x30>)
 800edb2:	9100      	str	r1, [sp, #0]
 800edb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800edb8:	4906      	ldr	r1, [pc, #24]	; (800edd4 <__assert_func+0x34>)
 800edba:	462b      	mov	r3, r5
 800edbc:	f000 fe88 	bl	800fad0 <fiprintf>
 800edc0:	f001 fa48 	bl	8010254 <abort>
 800edc4:	4b04      	ldr	r3, [pc, #16]	; (800edd8 <__assert_func+0x38>)
 800edc6:	461c      	mov	r4, r3
 800edc8:	e7f3      	b.n	800edb2 <__assert_func+0x12>
 800edca:	bf00      	nop
 800edcc:	20000038 	.word	0x20000038
 800edd0:	08012f4c 	.word	0x08012f4c
 800edd4:	08012f59 	.word	0x08012f59
 800edd8:	08012f87 	.word	0x08012f87

0800eddc <quorem>:
 800eddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede0:	6903      	ldr	r3, [r0, #16]
 800ede2:	690c      	ldr	r4, [r1, #16]
 800ede4:	42a3      	cmp	r3, r4
 800ede6:	4607      	mov	r7, r0
 800ede8:	f2c0 8081 	blt.w	800eeee <quorem+0x112>
 800edec:	3c01      	subs	r4, #1
 800edee:	f101 0814 	add.w	r8, r1, #20
 800edf2:	f100 0514 	add.w	r5, r0, #20
 800edf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800edfa:	9301      	str	r3, [sp, #4]
 800edfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ee00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee04:	3301      	adds	r3, #1
 800ee06:	429a      	cmp	r2, r3
 800ee08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ee0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ee10:	fbb2 f6f3 	udiv	r6, r2, r3
 800ee14:	d331      	bcc.n	800ee7a <quorem+0x9e>
 800ee16:	f04f 0e00 	mov.w	lr, #0
 800ee1a:	4640      	mov	r0, r8
 800ee1c:	46ac      	mov	ip, r5
 800ee1e:	46f2      	mov	sl, lr
 800ee20:	f850 2b04 	ldr.w	r2, [r0], #4
 800ee24:	b293      	uxth	r3, r2
 800ee26:	fb06 e303 	mla	r3, r6, r3, lr
 800ee2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	ebaa 0303 	sub.w	r3, sl, r3
 800ee34:	0c12      	lsrs	r2, r2, #16
 800ee36:	f8dc a000 	ldr.w	sl, [ip]
 800ee3a:	fb06 e202 	mla	r2, r6, r2, lr
 800ee3e:	fa13 f38a 	uxtah	r3, r3, sl
 800ee42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ee46:	fa1f fa82 	uxth.w	sl, r2
 800ee4a:	f8dc 2000 	ldr.w	r2, [ip]
 800ee4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ee52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee5c:	4581      	cmp	r9, r0
 800ee5e:	f84c 3b04 	str.w	r3, [ip], #4
 800ee62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ee66:	d2db      	bcs.n	800ee20 <quorem+0x44>
 800ee68:	f855 300b 	ldr.w	r3, [r5, fp]
 800ee6c:	b92b      	cbnz	r3, 800ee7a <quorem+0x9e>
 800ee6e:	9b01      	ldr	r3, [sp, #4]
 800ee70:	3b04      	subs	r3, #4
 800ee72:	429d      	cmp	r5, r3
 800ee74:	461a      	mov	r2, r3
 800ee76:	d32e      	bcc.n	800eed6 <quorem+0xfa>
 800ee78:	613c      	str	r4, [r7, #16]
 800ee7a:	4638      	mov	r0, r7
 800ee7c:	f7ff fe62 	bl	800eb44 <__mcmp>
 800ee80:	2800      	cmp	r0, #0
 800ee82:	db24      	blt.n	800eece <quorem+0xf2>
 800ee84:	3601      	adds	r6, #1
 800ee86:	4628      	mov	r0, r5
 800ee88:	f04f 0c00 	mov.w	ip, #0
 800ee8c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ee90:	f8d0 e000 	ldr.w	lr, [r0]
 800ee94:	b293      	uxth	r3, r2
 800ee96:	ebac 0303 	sub.w	r3, ip, r3
 800ee9a:	0c12      	lsrs	r2, r2, #16
 800ee9c:	fa13 f38e 	uxtah	r3, r3, lr
 800eea0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eeae:	45c1      	cmp	r9, r8
 800eeb0:	f840 3b04 	str.w	r3, [r0], #4
 800eeb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eeb8:	d2e8      	bcs.n	800ee8c <quorem+0xb0>
 800eeba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eebe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eec2:	b922      	cbnz	r2, 800eece <quorem+0xf2>
 800eec4:	3b04      	subs	r3, #4
 800eec6:	429d      	cmp	r5, r3
 800eec8:	461a      	mov	r2, r3
 800eeca:	d30a      	bcc.n	800eee2 <quorem+0x106>
 800eecc:	613c      	str	r4, [r7, #16]
 800eece:	4630      	mov	r0, r6
 800eed0:	b003      	add	sp, #12
 800eed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed6:	6812      	ldr	r2, [r2, #0]
 800eed8:	3b04      	subs	r3, #4
 800eeda:	2a00      	cmp	r2, #0
 800eedc:	d1cc      	bne.n	800ee78 <quorem+0x9c>
 800eede:	3c01      	subs	r4, #1
 800eee0:	e7c7      	b.n	800ee72 <quorem+0x96>
 800eee2:	6812      	ldr	r2, [r2, #0]
 800eee4:	3b04      	subs	r3, #4
 800eee6:	2a00      	cmp	r2, #0
 800eee8:	d1f0      	bne.n	800eecc <quorem+0xf0>
 800eeea:	3c01      	subs	r4, #1
 800eeec:	e7eb      	b.n	800eec6 <quorem+0xea>
 800eeee:	2000      	movs	r0, #0
 800eef0:	e7ee      	b.n	800eed0 <quorem+0xf4>
 800eef2:	0000      	movs	r0, r0
 800eef4:	0000      	movs	r0, r0
	...

0800eef8 <_dtoa_r>:
 800eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eefc:	ed2d 8b02 	vpush	{d8}
 800ef00:	ec57 6b10 	vmov	r6, r7, d0
 800ef04:	b095      	sub	sp, #84	; 0x54
 800ef06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ef08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ef0c:	9105      	str	r1, [sp, #20]
 800ef0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ef12:	4604      	mov	r4, r0
 800ef14:	9209      	str	r2, [sp, #36]	; 0x24
 800ef16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef18:	b975      	cbnz	r5, 800ef38 <_dtoa_r+0x40>
 800ef1a:	2010      	movs	r0, #16
 800ef1c:	f7ff f95a 	bl	800e1d4 <malloc>
 800ef20:	4602      	mov	r2, r0
 800ef22:	6260      	str	r0, [r4, #36]	; 0x24
 800ef24:	b920      	cbnz	r0, 800ef30 <_dtoa_r+0x38>
 800ef26:	4bb2      	ldr	r3, [pc, #712]	; (800f1f0 <_dtoa_r+0x2f8>)
 800ef28:	21ea      	movs	r1, #234	; 0xea
 800ef2a:	48b2      	ldr	r0, [pc, #712]	; (800f1f4 <_dtoa_r+0x2fc>)
 800ef2c:	f7ff ff38 	bl	800eda0 <__assert_func>
 800ef30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ef34:	6005      	str	r5, [r0, #0]
 800ef36:	60c5      	str	r5, [r0, #12]
 800ef38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef3a:	6819      	ldr	r1, [r3, #0]
 800ef3c:	b151      	cbz	r1, 800ef54 <_dtoa_r+0x5c>
 800ef3e:	685a      	ldr	r2, [r3, #4]
 800ef40:	604a      	str	r2, [r1, #4]
 800ef42:	2301      	movs	r3, #1
 800ef44:	4093      	lsls	r3, r2
 800ef46:	608b      	str	r3, [r1, #8]
 800ef48:	4620      	mov	r0, r4
 800ef4a:	f7ff fbbd 	bl	800e6c8 <_Bfree>
 800ef4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef50:	2200      	movs	r2, #0
 800ef52:	601a      	str	r2, [r3, #0]
 800ef54:	1e3b      	subs	r3, r7, #0
 800ef56:	bfb9      	ittee	lt
 800ef58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ef5c:	9303      	strlt	r3, [sp, #12]
 800ef5e:	2300      	movge	r3, #0
 800ef60:	f8c8 3000 	strge.w	r3, [r8]
 800ef64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ef68:	4ba3      	ldr	r3, [pc, #652]	; (800f1f8 <_dtoa_r+0x300>)
 800ef6a:	bfbc      	itt	lt
 800ef6c:	2201      	movlt	r2, #1
 800ef6e:	f8c8 2000 	strlt.w	r2, [r8]
 800ef72:	ea33 0309 	bics.w	r3, r3, r9
 800ef76:	d11b      	bne.n	800efb0 <_dtoa_r+0xb8>
 800ef78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef7a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ef7e:	6013      	str	r3, [r2, #0]
 800ef80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef84:	4333      	orrs	r3, r6
 800ef86:	f000 857a 	beq.w	800fa7e <_dtoa_r+0xb86>
 800ef8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef8c:	b963      	cbnz	r3, 800efa8 <_dtoa_r+0xb0>
 800ef8e:	4b9b      	ldr	r3, [pc, #620]	; (800f1fc <_dtoa_r+0x304>)
 800ef90:	e024      	b.n	800efdc <_dtoa_r+0xe4>
 800ef92:	4b9b      	ldr	r3, [pc, #620]	; (800f200 <_dtoa_r+0x308>)
 800ef94:	9300      	str	r3, [sp, #0]
 800ef96:	3308      	adds	r3, #8
 800ef98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ef9a:	6013      	str	r3, [r2, #0]
 800ef9c:	9800      	ldr	r0, [sp, #0]
 800ef9e:	b015      	add	sp, #84	; 0x54
 800efa0:	ecbd 8b02 	vpop	{d8}
 800efa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa8:	4b94      	ldr	r3, [pc, #592]	; (800f1fc <_dtoa_r+0x304>)
 800efaa:	9300      	str	r3, [sp, #0]
 800efac:	3303      	adds	r3, #3
 800efae:	e7f3      	b.n	800ef98 <_dtoa_r+0xa0>
 800efb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800efb4:	2200      	movs	r2, #0
 800efb6:	ec51 0b17 	vmov	r0, r1, d7
 800efba:	2300      	movs	r3, #0
 800efbc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800efc0:	f7f1 fd92 	bl	8000ae8 <__aeabi_dcmpeq>
 800efc4:	4680      	mov	r8, r0
 800efc6:	b158      	cbz	r0, 800efe0 <_dtoa_r+0xe8>
 800efc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800efca:	2301      	movs	r3, #1
 800efcc:	6013      	str	r3, [r2, #0]
 800efce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	f000 8551 	beq.w	800fa78 <_dtoa_r+0xb80>
 800efd6:	488b      	ldr	r0, [pc, #556]	; (800f204 <_dtoa_r+0x30c>)
 800efd8:	6018      	str	r0, [r3, #0]
 800efda:	1e43      	subs	r3, r0, #1
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	e7dd      	b.n	800ef9c <_dtoa_r+0xa4>
 800efe0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800efe4:	aa12      	add	r2, sp, #72	; 0x48
 800efe6:	a913      	add	r1, sp, #76	; 0x4c
 800efe8:	4620      	mov	r0, r4
 800efea:	f7ff fe4f 	bl	800ec8c <__d2b>
 800efee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eff2:	4683      	mov	fp, r0
 800eff4:	2d00      	cmp	r5, #0
 800eff6:	d07c      	beq.n	800f0f2 <_dtoa_r+0x1fa>
 800eff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800effa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800effe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f002:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f006:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f00a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f00e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f012:	4b7d      	ldr	r3, [pc, #500]	; (800f208 <_dtoa_r+0x310>)
 800f014:	2200      	movs	r2, #0
 800f016:	4630      	mov	r0, r6
 800f018:	4639      	mov	r1, r7
 800f01a:	f7f1 f945 	bl	80002a8 <__aeabi_dsub>
 800f01e:	a36e      	add	r3, pc, #440	; (adr r3, 800f1d8 <_dtoa_r+0x2e0>)
 800f020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f024:	f7f1 faf8 	bl	8000618 <__aeabi_dmul>
 800f028:	a36d      	add	r3, pc, #436	; (adr r3, 800f1e0 <_dtoa_r+0x2e8>)
 800f02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02e:	f7f1 f93d 	bl	80002ac <__adddf3>
 800f032:	4606      	mov	r6, r0
 800f034:	4628      	mov	r0, r5
 800f036:	460f      	mov	r7, r1
 800f038:	f7f1 fa84 	bl	8000544 <__aeabi_i2d>
 800f03c:	a36a      	add	r3, pc, #424	; (adr r3, 800f1e8 <_dtoa_r+0x2f0>)
 800f03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f042:	f7f1 fae9 	bl	8000618 <__aeabi_dmul>
 800f046:	4602      	mov	r2, r0
 800f048:	460b      	mov	r3, r1
 800f04a:	4630      	mov	r0, r6
 800f04c:	4639      	mov	r1, r7
 800f04e:	f7f1 f92d 	bl	80002ac <__adddf3>
 800f052:	4606      	mov	r6, r0
 800f054:	460f      	mov	r7, r1
 800f056:	f7f1 fd8f 	bl	8000b78 <__aeabi_d2iz>
 800f05a:	2200      	movs	r2, #0
 800f05c:	4682      	mov	sl, r0
 800f05e:	2300      	movs	r3, #0
 800f060:	4630      	mov	r0, r6
 800f062:	4639      	mov	r1, r7
 800f064:	f7f1 fd4a 	bl	8000afc <__aeabi_dcmplt>
 800f068:	b148      	cbz	r0, 800f07e <_dtoa_r+0x186>
 800f06a:	4650      	mov	r0, sl
 800f06c:	f7f1 fa6a 	bl	8000544 <__aeabi_i2d>
 800f070:	4632      	mov	r2, r6
 800f072:	463b      	mov	r3, r7
 800f074:	f7f1 fd38 	bl	8000ae8 <__aeabi_dcmpeq>
 800f078:	b908      	cbnz	r0, 800f07e <_dtoa_r+0x186>
 800f07a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f07e:	f1ba 0f16 	cmp.w	sl, #22
 800f082:	d854      	bhi.n	800f12e <_dtoa_r+0x236>
 800f084:	4b61      	ldr	r3, [pc, #388]	; (800f20c <_dtoa_r+0x314>)
 800f086:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f08e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f092:	f7f1 fd33 	bl	8000afc <__aeabi_dcmplt>
 800f096:	2800      	cmp	r0, #0
 800f098:	d04b      	beq.n	800f132 <_dtoa_r+0x23a>
 800f09a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f09e:	2300      	movs	r3, #0
 800f0a0:	930e      	str	r3, [sp, #56]	; 0x38
 800f0a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0a4:	1b5d      	subs	r5, r3, r5
 800f0a6:	1e6b      	subs	r3, r5, #1
 800f0a8:	9304      	str	r3, [sp, #16]
 800f0aa:	bf43      	ittte	mi
 800f0ac:	2300      	movmi	r3, #0
 800f0ae:	f1c5 0801 	rsbmi	r8, r5, #1
 800f0b2:	9304      	strmi	r3, [sp, #16]
 800f0b4:	f04f 0800 	movpl.w	r8, #0
 800f0b8:	f1ba 0f00 	cmp.w	sl, #0
 800f0bc:	db3b      	blt.n	800f136 <_dtoa_r+0x23e>
 800f0be:	9b04      	ldr	r3, [sp, #16]
 800f0c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f0c4:	4453      	add	r3, sl
 800f0c6:	9304      	str	r3, [sp, #16]
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	9306      	str	r3, [sp, #24]
 800f0cc:	9b05      	ldr	r3, [sp, #20]
 800f0ce:	2b09      	cmp	r3, #9
 800f0d0:	d869      	bhi.n	800f1a6 <_dtoa_r+0x2ae>
 800f0d2:	2b05      	cmp	r3, #5
 800f0d4:	bfc4      	itt	gt
 800f0d6:	3b04      	subgt	r3, #4
 800f0d8:	9305      	strgt	r3, [sp, #20]
 800f0da:	9b05      	ldr	r3, [sp, #20]
 800f0dc:	f1a3 0302 	sub.w	r3, r3, #2
 800f0e0:	bfcc      	ite	gt
 800f0e2:	2500      	movgt	r5, #0
 800f0e4:	2501      	movle	r5, #1
 800f0e6:	2b03      	cmp	r3, #3
 800f0e8:	d869      	bhi.n	800f1be <_dtoa_r+0x2c6>
 800f0ea:	e8df f003 	tbb	[pc, r3]
 800f0ee:	4e2c      	.short	0x4e2c
 800f0f0:	5a4c      	.short	0x5a4c
 800f0f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f0f6:	441d      	add	r5, r3
 800f0f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f0fc:	2b20      	cmp	r3, #32
 800f0fe:	bfc1      	itttt	gt
 800f100:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f104:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f108:	fa09 f303 	lslgt.w	r3, r9, r3
 800f10c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f110:	bfda      	itte	le
 800f112:	f1c3 0320 	rsble	r3, r3, #32
 800f116:	fa06 f003 	lslle.w	r0, r6, r3
 800f11a:	4318      	orrgt	r0, r3
 800f11c:	f7f1 fa02 	bl	8000524 <__aeabi_ui2d>
 800f120:	2301      	movs	r3, #1
 800f122:	4606      	mov	r6, r0
 800f124:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f128:	3d01      	subs	r5, #1
 800f12a:	9310      	str	r3, [sp, #64]	; 0x40
 800f12c:	e771      	b.n	800f012 <_dtoa_r+0x11a>
 800f12e:	2301      	movs	r3, #1
 800f130:	e7b6      	b.n	800f0a0 <_dtoa_r+0x1a8>
 800f132:	900e      	str	r0, [sp, #56]	; 0x38
 800f134:	e7b5      	b.n	800f0a2 <_dtoa_r+0x1aa>
 800f136:	f1ca 0300 	rsb	r3, sl, #0
 800f13a:	9306      	str	r3, [sp, #24]
 800f13c:	2300      	movs	r3, #0
 800f13e:	eba8 080a 	sub.w	r8, r8, sl
 800f142:	930d      	str	r3, [sp, #52]	; 0x34
 800f144:	e7c2      	b.n	800f0cc <_dtoa_r+0x1d4>
 800f146:	2300      	movs	r3, #0
 800f148:	9308      	str	r3, [sp, #32]
 800f14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	dc39      	bgt.n	800f1c4 <_dtoa_r+0x2cc>
 800f150:	f04f 0901 	mov.w	r9, #1
 800f154:	f8cd 9004 	str.w	r9, [sp, #4]
 800f158:	464b      	mov	r3, r9
 800f15a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f15e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f160:	2200      	movs	r2, #0
 800f162:	6042      	str	r2, [r0, #4]
 800f164:	2204      	movs	r2, #4
 800f166:	f102 0614 	add.w	r6, r2, #20
 800f16a:	429e      	cmp	r6, r3
 800f16c:	6841      	ldr	r1, [r0, #4]
 800f16e:	d92f      	bls.n	800f1d0 <_dtoa_r+0x2d8>
 800f170:	4620      	mov	r0, r4
 800f172:	f7ff fa69 	bl	800e648 <_Balloc>
 800f176:	9000      	str	r0, [sp, #0]
 800f178:	2800      	cmp	r0, #0
 800f17a:	d14b      	bne.n	800f214 <_dtoa_r+0x31c>
 800f17c:	4b24      	ldr	r3, [pc, #144]	; (800f210 <_dtoa_r+0x318>)
 800f17e:	4602      	mov	r2, r0
 800f180:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f184:	e6d1      	b.n	800ef2a <_dtoa_r+0x32>
 800f186:	2301      	movs	r3, #1
 800f188:	e7de      	b.n	800f148 <_dtoa_r+0x250>
 800f18a:	2300      	movs	r3, #0
 800f18c:	9308      	str	r3, [sp, #32]
 800f18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f190:	eb0a 0903 	add.w	r9, sl, r3
 800f194:	f109 0301 	add.w	r3, r9, #1
 800f198:	2b01      	cmp	r3, #1
 800f19a:	9301      	str	r3, [sp, #4]
 800f19c:	bfb8      	it	lt
 800f19e:	2301      	movlt	r3, #1
 800f1a0:	e7dd      	b.n	800f15e <_dtoa_r+0x266>
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	e7f2      	b.n	800f18c <_dtoa_r+0x294>
 800f1a6:	2501      	movs	r5, #1
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	9305      	str	r3, [sp, #20]
 800f1ac:	9508      	str	r5, [sp, #32]
 800f1ae:	f04f 39ff 	mov.w	r9, #4294967295
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800f1b8:	2312      	movs	r3, #18
 800f1ba:	9209      	str	r2, [sp, #36]	; 0x24
 800f1bc:	e7cf      	b.n	800f15e <_dtoa_r+0x266>
 800f1be:	2301      	movs	r3, #1
 800f1c0:	9308      	str	r3, [sp, #32]
 800f1c2:	e7f4      	b.n	800f1ae <_dtoa_r+0x2b6>
 800f1c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f1c8:	f8cd 9004 	str.w	r9, [sp, #4]
 800f1cc:	464b      	mov	r3, r9
 800f1ce:	e7c6      	b.n	800f15e <_dtoa_r+0x266>
 800f1d0:	3101      	adds	r1, #1
 800f1d2:	6041      	str	r1, [r0, #4]
 800f1d4:	0052      	lsls	r2, r2, #1
 800f1d6:	e7c6      	b.n	800f166 <_dtoa_r+0x26e>
 800f1d8:	636f4361 	.word	0x636f4361
 800f1dc:	3fd287a7 	.word	0x3fd287a7
 800f1e0:	8b60c8b3 	.word	0x8b60c8b3
 800f1e4:	3fc68a28 	.word	0x3fc68a28
 800f1e8:	509f79fb 	.word	0x509f79fb
 800f1ec:	3fd34413 	.word	0x3fd34413
 800f1f0:	08012dc8 	.word	0x08012dc8
 800f1f4:	08012f97 	.word	0x08012f97
 800f1f8:	7ff00000 	.word	0x7ff00000
 800f1fc:	08012f91 	.word	0x08012f91
 800f200:	08012f88 	.word	0x08012f88
 800f204:	08012f96 	.word	0x08012f96
 800f208:	3ff80000 	.word	0x3ff80000
 800f20c:	08012e78 	.word	0x08012e78
 800f210:	08012e3f 	.word	0x08012e3f
 800f214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f216:	9a00      	ldr	r2, [sp, #0]
 800f218:	601a      	str	r2, [r3, #0]
 800f21a:	9b01      	ldr	r3, [sp, #4]
 800f21c:	2b0e      	cmp	r3, #14
 800f21e:	f200 80ad 	bhi.w	800f37c <_dtoa_r+0x484>
 800f222:	2d00      	cmp	r5, #0
 800f224:	f000 80aa 	beq.w	800f37c <_dtoa_r+0x484>
 800f228:	f1ba 0f00 	cmp.w	sl, #0
 800f22c:	dd36      	ble.n	800f29c <_dtoa_r+0x3a4>
 800f22e:	4ac3      	ldr	r2, [pc, #780]	; (800f53c <_dtoa_r+0x644>)
 800f230:	f00a 030f 	and.w	r3, sl, #15
 800f234:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f238:	ed93 7b00 	vldr	d7, [r3]
 800f23c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f240:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f244:	eeb0 8a47 	vmov.f32	s16, s14
 800f248:	eef0 8a67 	vmov.f32	s17, s15
 800f24c:	d016      	beq.n	800f27c <_dtoa_r+0x384>
 800f24e:	4bbc      	ldr	r3, [pc, #752]	; (800f540 <_dtoa_r+0x648>)
 800f250:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f254:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f258:	f7f1 fb08 	bl	800086c <__aeabi_ddiv>
 800f25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f260:	f007 070f 	and.w	r7, r7, #15
 800f264:	2503      	movs	r5, #3
 800f266:	4eb6      	ldr	r6, [pc, #728]	; (800f540 <_dtoa_r+0x648>)
 800f268:	b957      	cbnz	r7, 800f280 <_dtoa_r+0x388>
 800f26a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f26e:	ec53 2b18 	vmov	r2, r3, d8
 800f272:	f7f1 fafb 	bl	800086c <__aeabi_ddiv>
 800f276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f27a:	e029      	b.n	800f2d0 <_dtoa_r+0x3d8>
 800f27c:	2502      	movs	r5, #2
 800f27e:	e7f2      	b.n	800f266 <_dtoa_r+0x36e>
 800f280:	07f9      	lsls	r1, r7, #31
 800f282:	d508      	bpl.n	800f296 <_dtoa_r+0x39e>
 800f284:	ec51 0b18 	vmov	r0, r1, d8
 800f288:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f28c:	f7f1 f9c4 	bl	8000618 <__aeabi_dmul>
 800f290:	ec41 0b18 	vmov	d8, r0, r1
 800f294:	3501      	adds	r5, #1
 800f296:	107f      	asrs	r7, r7, #1
 800f298:	3608      	adds	r6, #8
 800f29a:	e7e5      	b.n	800f268 <_dtoa_r+0x370>
 800f29c:	f000 80a6 	beq.w	800f3ec <_dtoa_r+0x4f4>
 800f2a0:	f1ca 0600 	rsb	r6, sl, #0
 800f2a4:	4ba5      	ldr	r3, [pc, #660]	; (800f53c <_dtoa_r+0x644>)
 800f2a6:	4fa6      	ldr	r7, [pc, #664]	; (800f540 <_dtoa_r+0x648>)
 800f2a8:	f006 020f 	and.w	r2, r6, #15
 800f2ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f2b8:	f7f1 f9ae 	bl	8000618 <__aeabi_dmul>
 800f2bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2c0:	1136      	asrs	r6, r6, #4
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	2502      	movs	r5, #2
 800f2c6:	2e00      	cmp	r6, #0
 800f2c8:	f040 8085 	bne.w	800f3d6 <_dtoa_r+0x4de>
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d1d2      	bne.n	800f276 <_dtoa_r+0x37e>
 800f2d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	f000 808c 	beq.w	800f3f0 <_dtoa_r+0x4f8>
 800f2d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f2dc:	4b99      	ldr	r3, [pc, #612]	; (800f544 <_dtoa_r+0x64c>)
 800f2de:	2200      	movs	r2, #0
 800f2e0:	4630      	mov	r0, r6
 800f2e2:	4639      	mov	r1, r7
 800f2e4:	f7f1 fc0a 	bl	8000afc <__aeabi_dcmplt>
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	f000 8081 	beq.w	800f3f0 <_dtoa_r+0x4f8>
 800f2ee:	9b01      	ldr	r3, [sp, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d07d      	beq.n	800f3f0 <_dtoa_r+0x4f8>
 800f2f4:	f1b9 0f00 	cmp.w	r9, #0
 800f2f8:	dd3c      	ble.n	800f374 <_dtoa_r+0x47c>
 800f2fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f2fe:	9307      	str	r3, [sp, #28]
 800f300:	2200      	movs	r2, #0
 800f302:	4b91      	ldr	r3, [pc, #580]	; (800f548 <_dtoa_r+0x650>)
 800f304:	4630      	mov	r0, r6
 800f306:	4639      	mov	r1, r7
 800f308:	f7f1 f986 	bl	8000618 <__aeabi_dmul>
 800f30c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f310:	3501      	adds	r5, #1
 800f312:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f316:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f31a:	4628      	mov	r0, r5
 800f31c:	f7f1 f912 	bl	8000544 <__aeabi_i2d>
 800f320:	4632      	mov	r2, r6
 800f322:	463b      	mov	r3, r7
 800f324:	f7f1 f978 	bl	8000618 <__aeabi_dmul>
 800f328:	4b88      	ldr	r3, [pc, #544]	; (800f54c <_dtoa_r+0x654>)
 800f32a:	2200      	movs	r2, #0
 800f32c:	f7f0 ffbe 	bl	80002ac <__adddf3>
 800f330:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f338:	9303      	str	r3, [sp, #12]
 800f33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d15c      	bne.n	800f3fa <_dtoa_r+0x502>
 800f340:	4b83      	ldr	r3, [pc, #524]	; (800f550 <_dtoa_r+0x658>)
 800f342:	2200      	movs	r2, #0
 800f344:	4630      	mov	r0, r6
 800f346:	4639      	mov	r1, r7
 800f348:	f7f0 ffae 	bl	80002a8 <__aeabi_dsub>
 800f34c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f350:	4606      	mov	r6, r0
 800f352:	460f      	mov	r7, r1
 800f354:	f7f1 fbf0 	bl	8000b38 <__aeabi_dcmpgt>
 800f358:	2800      	cmp	r0, #0
 800f35a:	f040 8296 	bne.w	800f88a <_dtoa_r+0x992>
 800f35e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f362:	4630      	mov	r0, r6
 800f364:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f368:	4639      	mov	r1, r7
 800f36a:	f7f1 fbc7 	bl	8000afc <__aeabi_dcmplt>
 800f36e:	2800      	cmp	r0, #0
 800f370:	f040 8288 	bne.w	800f884 <_dtoa_r+0x98c>
 800f374:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f378:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f37c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f37e:	2b00      	cmp	r3, #0
 800f380:	f2c0 8158 	blt.w	800f634 <_dtoa_r+0x73c>
 800f384:	f1ba 0f0e 	cmp.w	sl, #14
 800f388:	f300 8154 	bgt.w	800f634 <_dtoa_r+0x73c>
 800f38c:	4b6b      	ldr	r3, [pc, #428]	; (800f53c <_dtoa_r+0x644>)
 800f38e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f392:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f398:	2b00      	cmp	r3, #0
 800f39a:	f280 80e3 	bge.w	800f564 <_dtoa_r+0x66c>
 800f39e:	9b01      	ldr	r3, [sp, #4]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	f300 80df 	bgt.w	800f564 <_dtoa_r+0x66c>
 800f3a6:	f040 826d 	bne.w	800f884 <_dtoa_r+0x98c>
 800f3aa:	4b69      	ldr	r3, [pc, #420]	; (800f550 <_dtoa_r+0x658>)
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	4640      	mov	r0, r8
 800f3b0:	4649      	mov	r1, r9
 800f3b2:	f7f1 f931 	bl	8000618 <__aeabi_dmul>
 800f3b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3ba:	f7f1 fbb3 	bl	8000b24 <__aeabi_dcmpge>
 800f3be:	9e01      	ldr	r6, [sp, #4]
 800f3c0:	4637      	mov	r7, r6
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	f040 8243 	bne.w	800f84e <_dtoa_r+0x956>
 800f3c8:	9d00      	ldr	r5, [sp, #0]
 800f3ca:	2331      	movs	r3, #49	; 0x31
 800f3cc:	f805 3b01 	strb.w	r3, [r5], #1
 800f3d0:	f10a 0a01 	add.w	sl, sl, #1
 800f3d4:	e23f      	b.n	800f856 <_dtoa_r+0x95e>
 800f3d6:	07f2      	lsls	r2, r6, #31
 800f3d8:	d505      	bpl.n	800f3e6 <_dtoa_r+0x4ee>
 800f3da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3de:	f7f1 f91b 	bl	8000618 <__aeabi_dmul>
 800f3e2:	3501      	adds	r5, #1
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	1076      	asrs	r6, r6, #1
 800f3e8:	3708      	adds	r7, #8
 800f3ea:	e76c      	b.n	800f2c6 <_dtoa_r+0x3ce>
 800f3ec:	2502      	movs	r5, #2
 800f3ee:	e76f      	b.n	800f2d0 <_dtoa_r+0x3d8>
 800f3f0:	9b01      	ldr	r3, [sp, #4]
 800f3f2:	f8cd a01c 	str.w	sl, [sp, #28]
 800f3f6:	930c      	str	r3, [sp, #48]	; 0x30
 800f3f8:	e78d      	b.n	800f316 <_dtoa_r+0x41e>
 800f3fa:	9900      	ldr	r1, [sp, #0]
 800f3fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f3fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f400:	4b4e      	ldr	r3, [pc, #312]	; (800f53c <_dtoa_r+0x644>)
 800f402:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f406:	4401      	add	r1, r0
 800f408:	9102      	str	r1, [sp, #8]
 800f40a:	9908      	ldr	r1, [sp, #32]
 800f40c:	eeb0 8a47 	vmov.f32	s16, s14
 800f410:	eef0 8a67 	vmov.f32	s17, s15
 800f414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f418:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f41c:	2900      	cmp	r1, #0
 800f41e:	d045      	beq.n	800f4ac <_dtoa_r+0x5b4>
 800f420:	494c      	ldr	r1, [pc, #304]	; (800f554 <_dtoa_r+0x65c>)
 800f422:	2000      	movs	r0, #0
 800f424:	f7f1 fa22 	bl	800086c <__aeabi_ddiv>
 800f428:	ec53 2b18 	vmov	r2, r3, d8
 800f42c:	f7f0 ff3c 	bl	80002a8 <__aeabi_dsub>
 800f430:	9d00      	ldr	r5, [sp, #0]
 800f432:	ec41 0b18 	vmov	d8, r0, r1
 800f436:	4639      	mov	r1, r7
 800f438:	4630      	mov	r0, r6
 800f43a:	f7f1 fb9d 	bl	8000b78 <__aeabi_d2iz>
 800f43e:	900c      	str	r0, [sp, #48]	; 0x30
 800f440:	f7f1 f880 	bl	8000544 <__aeabi_i2d>
 800f444:	4602      	mov	r2, r0
 800f446:	460b      	mov	r3, r1
 800f448:	4630      	mov	r0, r6
 800f44a:	4639      	mov	r1, r7
 800f44c:	f7f0 ff2c 	bl	80002a8 <__aeabi_dsub>
 800f450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f452:	3330      	adds	r3, #48	; 0x30
 800f454:	f805 3b01 	strb.w	r3, [r5], #1
 800f458:	ec53 2b18 	vmov	r2, r3, d8
 800f45c:	4606      	mov	r6, r0
 800f45e:	460f      	mov	r7, r1
 800f460:	f7f1 fb4c 	bl	8000afc <__aeabi_dcmplt>
 800f464:	2800      	cmp	r0, #0
 800f466:	d165      	bne.n	800f534 <_dtoa_r+0x63c>
 800f468:	4632      	mov	r2, r6
 800f46a:	463b      	mov	r3, r7
 800f46c:	4935      	ldr	r1, [pc, #212]	; (800f544 <_dtoa_r+0x64c>)
 800f46e:	2000      	movs	r0, #0
 800f470:	f7f0 ff1a 	bl	80002a8 <__aeabi_dsub>
 800f474:	ec53 2b18 	vmov	r2, r3, d8
 800f478:	f7f1 fb40 	bl	8000afc <__aeabi_dcmplt>
 800f47c:	2800      	cmp	r0, #0
 800f47e:	f040 80b9 	bne.w	800f5f4 <_dtoa_r+0x6fc>
 800f482:	9b02      	ldr	r3, [sp, #8]
 800f484:	429d      	cmp	r5, r3
 800f486:	f43f af75 	beq.w	800f374 <_dtoa_r+0x47c>
 800f48a:	4b2f      	ldr	r3, [pc, #188]	; (800f548 <_dtoa_r+0x650>)
 800f48c:	ec51 0b18 	vmov	r0, r1, d8
 800f490:	2200      	movs	r2, #0
 800f492:	f7f1 f8c1 	bl	8000618 <__aeabi_dmul>
 800f496:	4b2c      	ldr	r3, [pc, #176]	; (800f548 <_dtoa_r+0x650>)
 800f498:	ec41 0b18 	vmov	d8, r0, r1
 800f49c:	2200      	movs	r2, #0
 800f49e:	4630      	mov	r0, r6
 800f4a0:	4639      	mov	r1, r7
 800f4a2:	f7f1 f8b9 	bl	8000618 <__aeabi_dmul>
 800f4a6:	4606      	mov	r6, r0
 800f4a8:	460f      	mov	r7, r1
 800f4aa:	e7c4      	b.n	800f436 <_dtoa_r+0x53e>
 800f4ac:	ec51 0b17 	vmov	r0, r1, d7
 800f4b0:	f7f1 f8b2 	bl	8000618 <__aeabi_dmul>
 800f4b4:	9b02      	ldr	r3, [sp, #8]
 800f4b6:	9d00      	ldr	r5, [sp, #0]
 800f4b8:	930c      	str	r3, [sp, #48]	; 0x30
 800f4ba:	ec41 0b18 	vmov	d8, r0, r1
 800f4be:	4639      	mov	r1, r7
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	f7f1 fb59 	bl	8000b78 <__aeabi_d2iz>
 800f4c6:	9011      	str	r0, [sp, #68]	; 0x44
 800f4c8:	f7f1 f83c 	bl	8000544 <__aeabi_i2d>
 800f4cc:	4602      	mov	r2, r0
 800f4ce:	460b      	mov	r3, r1
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	4639      	mov	r1, r7
 800f4d4:	f7f0 fee8 	bl	80002a8 <__aeabi_dsub>
 800f4d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f4da:	3330      	adds	r3, #48	; 0x30
 800f4dc:	f805 3b01 	strb.w	r3, [r5], #1
 800f4e0:	9b02      	ldr	r3, [sp, #8]
 800f4e2:	429d      	cmp	r5, r3
 800f4e4:	4606      	mov	r6, r0
 800f4e6:	460f      	mov	r7, r1
 800f4e8:	f04f 0200 	mov.w	r2, #0
 800f4ec:	d134      	bne.n	800f558 <_dtoa_r+0x660>
 800f4ee:	4b19      	ldr	r3, [pc, #100]	; (800f554 <_dtoa_r+0x65c>)
 800f4f0:	ec51 0b18 	vmov	r0, r1, d8
 800f4f4:	f7f0 feda 	bl	80002ac <__adddf3>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	4639      	mov	r1, r7
 800f500:	f7f1 fb1a 	bl	8000b38 <__aeabi_dcmpgt>
 800f504:	2800      	cmp	r0, #0
 800f506:	d175      	bne.n	800f5f4 <_dtoa_r+0x6fc>
 800f508:	ec53 2b18 	vmov	r2, r3, d8
 800f50c:	4911      	ldr	r1, [pc, #68]	; (800f554 <_dtoa_r+0x65c>)
 800f50e:	2000      	movs	r0, #0
 800f510:	f7f0 feca 	bl	80002a8 <__aeabi_dsub>
 800f514:	4602      	mov	r2, r0
 800f516:	460b      	mov	r3, r1
 800f518:	4630      	mov	r0, r6
 800f51a:	4639      	mov	r1, r7
 800f51c:	f7f1 faee 	bl	8000afc <__aeabi_dcmplt>
 800f520:	2800      	cmp	r0, #0
 800f522:	f43f af27 	beq.w	800f374 <_dtoa_r+0x47c>
 800f526:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f528:	1e6b      	subs	r3, r5, #1
 800f52a:	930c      	str	r3, [sp, #48]	; 0x30
 800f52c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f530:	2b30      	cmp	r3, #48	; 0x30
 800f532:	d0f8      	beq.n	800f526 <_dtoa_r+0x62e>
 800f534:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f538:	e04a      	b.n	800f5d0 <_dtoa_r+0x6d8>
 800f53a:	bf00      	nop
 800f53c:	08012e78 	.word	0x08012e78
 800f540:	08012e50 	.word	0x08012e50
 800f544:	3ff00000 	.word	0x3ff00000
 800f548:	40240000 	.word	0x40240000
 800f54c:	401c0000 	.word	0x401c0000
 800f550:	40140000 	.word	0x40140000
 800f554:	3fe00000 	.word	0x3fe00000
 800f558:	4baf      	ldr	r3, [pc, #700]	; (800f818 <_dtoa_r+0x920>)
 800f55a:	f7f1 f85d 	bl	8000618 <__aeabi_dmul>
 800f55e:	4606      	mov	r6, r0
 800f560:	460f      	mov	r7, r1
 800f562:	e7ac      	b.n	800f4be <_dtoa_r+0x5c6>
 800f564:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f568:	9d00      	ldr	r5, [sp, #0]
 800f56a:	4642      	mov	r2, r8
 800f56c:	464b      	mov	r3, r9
 800f56e:	4630      	mov	r0, r6
 800f570:	4639      	mov	r1, r7
 800f572:	f7f1 f97b 	bl	800086c <__aeabi_ddiv>
 800f576:	f7f1 faff 	bl	8000b78 <__aeabi_d2iz>
 800f57a:	9002      	str	r0, [sp, #8]
 800f57c:	f7f0 ffe2 	bl	8000544 <__aeabi_i2d>
 800f580:	4642      	mov	r2, r8
 800f582:	464b      	mov	r3, r9
 800f584:	f7f1 f848 	bl	8000618 <__aeabi_dmul>
 800f588:	4602      	mov	r2, r0
 800f58a:	460b      	mov	r3, r1
 800f58c:	4630      	mov	r0, r6
 800f58e:	4639      	mov	r1, r7
 800f590:	f7f0 fe8a 	bl	80002a8 <__aeabi_dsub>
 800f594:	9e02      	ldr	r6, [sp, #8]
 800f596:	9f01      	ldr	r7, [sp, #4]
 800f598:	3630      	adds	r6, #48	; 0x30
 800f59a:	f805 6b01 	strb.w	r6, [r5], #1
 800f59e:	9e00      	ldr	r6, [sp, #0]
 800f5a0:	1bae      	subs	r6, r5, r6
 800f5a2:	42b7      	cmp	r7, r6
 800f5a4:	4602      	mov	r2, r0
 800f5a6:	460b      	mov	r3, r1
 800f5a8:	d137      	bne.n	800f61a <_dtoa_r+0x722>
 800f5aa:	f7f0 fe7f 	bl	80002ac <__adddf3>
 800f5ae:	4642      	mov	r2, r8
 800f5b0:	464b      	mov	r3, r9
 800f5b2:	4606      	mov	r6, r0
 800f5b4:	460f      	mov	r7, r1
 800f5b6:	f7f1 fabf 	bl	8000b38 <__aeabi_dcmpgt>
 800f5ba:	b9c8      	cbnz	r0, 800f5f0 <_dtoa_r+0x6f8>
 800f5bc:	4642      	mov	r2, r8
 800f5be:	464b      	mov	r3, r9
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	4639      	mov	r1, r7
 800f5c4:	f7f1 fa90 	bl	8000ae8 <__aeabi_dcmpeq>
 800f5c8:	b110      	cbz	r0, 800f5d0 <_dtoa_r+0x6d8>
 800f5ca:	9b02      	ldr	r3, [sp, #8]
 800f5cc:	07d9      	lsls	r1, r3, #31
 800f5ce:	d40f      	bmi.n	800f5f0 <_dtoa_r+0x6f8>
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	4659      	mov	r1, fp
 800f5d4:	f7ff f878 	bl	800e6c8 <_Bfree>
 800f5d8:	2300      	movs	r3, #0
 800f5da:	702b      	strb	r3, [r5, #0]
 800f5dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5de:	f10a 0001 	add.w	r0, sl, #1
 800f5e2:	6018      	str	r0, [r3, #0]
 800f5e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	f43f acd8 	beq.w	800ef9c <_dtoa_r+0xa4>
 800f5ec:	601d      	str	r5, [r3, #0]
 800f5ee:	e4d5      	b.n	800ef9c <_dtoa_r+0xa4>
 800f5f0:	f8cd a01c 	str.w	sl, [sp, #28]
 800f5f4:	462b      	mov	r3, r5
 800f5f6:	461d      	mov	r5, r3
 800f5f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f5fc:	2a39      	cmp	r2, #57	; 0x39
 800f5fe:	d108      	bne.n	800f612 <_dtoa_r+0x71a>
 800f600:	9a00      	ldr	r2, [sp, #0]
 800f602:	429a      	cmp	r2, r3
 800f604:	d1f7      	bne.n	800f5f6 <_dtoa_r+0x6fe>
 800f606:	9a07      	ldr	r2, [sp, #28]
 800f608:	9900      	ldr	r1, [sp, #0]
 800f60a:	3201      	adds	r2, #1
 800f60c:	9207      	str	r2, [sp, #28]
 800f60e:	2230      	movs	r2, #48	; 0x30
 800f610:	700a      	strb	r2, [r1, #0]
 800f612:	781a      	ldrb	r2, [r3, #0]
 800f614:	3201      	adds	r2, #1
 800f616:	701a      	strb	r2, [r3, #0]
 800f618:	e78c      	b.n	800f534 <_dtoa_r+0x63c>
 800f61a:	4b7f      	ldr	r3, [pc, #508]	; (800f818 <_dtoa_r+0x920>)
 800f61c:	2200      	movs	r2, #0
 800f61e:	f7f0 fffb 	bl	8000618 <__aeabi_dmul>
 800f622:	2200      	movs	r2, #0
 800f624:	2300      	movs	r3, #0
 800f626:	4606      	mov	r6, r0
 800f628:	460f      	mov	r7, r1
 800f62a:	f7f1 fa5d 	bl	8000ae8 <__aeabi_dcmpeq>
 800f62e:	2800      	cmp	r0, #0
 800f630:	d09b      	beq.n	800f56a <_dtoa_r+0x672>
 800f632:	e7cd      	b.n	800f5d0 <_dtoa_r+0x6d8>
 800f634:	9a08      	ldr	r2, [sp, #32]
 800f636:	2a00      	cmp	r2, #0
 800f638:	f000 80c4 	beq.w	800f7c4 <_dtoa_r+0x8cc>
 800f63c:	9a05      	ldr	r2, [sp, #20]
 800f63e:	2a01      	cmp	r2, #1
 800f640:	f300 80a8 	bgt.w	800f794 <_dtoa_r+0x89c>
 800f644:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f646:	2a00      	cmp	r2, #0
 800f648:	f000 80a0 	beq.w	800f78c <_dtoa_r+0x894>
 800f64c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f650:	9e06      	ldr	r6, [sp, #24]
 800f652:	4645      	mov	r5, r8
 800f654:	9a04      	ldr	r2, [sp, #16]
 800f656:	2101      	movs	r1, #1
 800f658:	441a      	add	r2, r3
 800f65a:	4620      	mov	r0, r4
 800f65c:	4498      	add	r8, r3
 800f65e:	9204      	str	r2, [sp, #16]
 800f660:	f7ff f8ee 	bl	800e840 <__i2b>
 800f664:	4607      	mov	r7, r0
 800f666:	2d00      	cmp	r5, #0
 800f668:	dd0b      	ble.n	800f682 <_dtoa_r+0x78a>
 800f66a:	9b04      	ldr	r3, [sp, #16]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	dd08      	ble.n	800f682 <_dtoa_r+0x78a>
 800f670:	42ab      	cmp	r3, r5
 800f672:	9a04      	ldr	r2, [sp, #16]
 800f674:	bfa8      	it	ge
 800f676:	462b      	movge	r3, r5
 800f678:	eba8 0803 	sub.w	r8, r8, r3
 800f67c:	1aed      	subs	r5, r5, r3
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	9304      	str	r3, [sp, #16]
 800f682:	9b06      	ldr	r3, [sp, #24]
 800f684:	b1fb      	cbz	r3, 800f6c6 <_dtoa_r+0x7ce>
 800f686:	9b08      	ldr	r3, [sp, #32]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	f000 809f 	beq.w	800f7cc <_dtoa_r+0x8d4>
 800f68e:	2e00      	cmp	r6, #0
 800f690:	dd11      	ble.n	800f6b6 <_dtoa_r+0x7be>
 800f692:	4639      	mov	r1, r7
 800f694:	4632      	mov	r2, r6
 800f696:	4620      	mov	r0, r4
 800f698:	f7ff f98e 	bl	800e9b8 <__pow5mult>
 800f69c:	465a      	mov	r2, fp
 800f69e:	4601      	mov	r1, r0
 800f6a0:	4607      	mov	r7, r0
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	f7ff f8e2 	bl	800e86c <__multiply>
 800f6a8:	4659      	mov	r1, fp
 800f6aa:	9007      	str	r0, [sp, #28]
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	f7ff f80b 	bl	800e6c8 <_Bfree>
 800f6b2:	9b07      	ldr	r3, [sp, #28]
 800f6b4:	469b      	mov	fp, r3
 800f6b6:	9b06      	ldr	r3, [sp, #24]
 800f6b8:	1b9a      	subs	r2, r3, r6
 800f6ba:	d004      	beq.n	800f6c6 <_dtoa_r+0x7ce>
 800f6bc:	4659      	mov	r1, fp
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f7ff f97a 	bl	800e9b8 <__pow5mult>
 800f6c4:	4683      	mov	fp, r0
 800f6c6:	2101      	movs	r1, #1
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	f7ff f8b9 	bl	800e840 <__i2b>
 800f6ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	4606      	mov	r6, r0
 800f6d4:	dd7c      	ble.n	800f7d0 <_dtoa_r+0x8d8>
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	4601      	mov	r1, r0
 800f6da:	4620      	mov	r0, r4
 800f6dc:	f7ff f96c 	bl	800e9b8 <__pow5mult>
 800f6e0:	9b05      	ldr	r3, [sp, #20]
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	4606      	mov	r6, r0
 800f6e6:	dd76      	ble.n	800f7d6 <_dtoa_r+0x8de>
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	9306      	str	r3, [sp, #24]
 800f6ec:	6933      	ldr	r3, [r6, #16]
 800f6ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f6f2:	6918      	ldr	r0, [r3, #16]
 800f6f4:	f7ff f854 	bl	800e7a0 <__hi0bits>
 800f6f8:	f1c0 0020 	rsb	r0, r0, #32
 800f6fc:	9b04      	ldr	r3, [sp, #16]
 800f6fe:	4418      	add	r0, r3
 800f700:	f010 001f 	ands.w	r0, r0, #31
 800f704:	f000 8086 	beq.w	800f814 <_dtoa_r+0x91c>
 800f708:	f1c0 0320 	rsb	r3, r0, #32
 800f70c:	2b04      	cmp	r3, #4
 800f70e:	dd7f      	ble.n	800f810 <_dtoa_r+0x918>
 800f710:	f1c0 001c 	rsb	r0, r0, #28
 800f714:	9b04      	ldr	r3, [sp, #16]
 800f716:	4403      	add	r3, r0
 800f718:	4480      	add	r8, r0
 800f71a:	4405      	add	r5, r0
 800f71c:	9304      	str	r3, [sp, #16]
 800f71e:	f1b8 0f00 	cmp.w	r8, #0
 800f722:	dd05      	ble.n	800f730 <_dtoa_r+0x838>
 800f724:	4659      	mov	r1, fp
 800f726:	4642      	mov	r2, r8
 800f728:	4620      	mov	r0, r4
 800f72a:	f7ff f99f 	bl	800ea6c <__lshift>
 800f72e:	4683      	mov	fp, r0
 800f730:	9b04      	ldr	r3, [sp, #16]
 800f732:	2b00      	cmp	r3, #0
 800f734:	dd05      	ble.n	800f742 <_dtoa_r+0x84a>
 800f736:	4631      	mov	r1, r6
 800f738:	461a      	mov	r2, r3
 800f73a:	4620      	mov	r0, r4
 800f73c:	f7ff f996 	bl	800ea6c <__lshift>
 800f740:	4606      	mov	r6, r0
 800f742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f744:	2b00      	cmp	r3, #0
 800f746:	d069      	beq.n	800f81c <_dtoa_r+0x924>
 800f748:	4631      	mov	r1, r6
 800f74a:	4658      	mov	r0, fp
 800f74c:	f7ff f9fa 	bl	800eb44 <__mcmp>
 800f750:	2800      	cmp	r0, #0
 800f752:	da63      	bge.n	800f81c <_dtoa_r+0x924>
 800f754:	2300      	movs	r3, #0
 800f756:	4659      	mov	r1, fp
 800f758:	220a      	movs	r2, #10
 800f75a:	4620      	mov	r0, r4
 800f75c:	f7fe ffd6 	bl	800e70c <__multadd>
 800f760:	9b08      	ldr	r3, [sp, #32]
 800f762:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f766:	4683      	mov	fp, r0
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f000 818f 	beq.w	800fa8c <_dtoa_r+0xb94>
 800f76e:	4639      	mov	r1, r7
 800f770:	2300      	movs	r3, #0
 800f772:	220a      	movs	r2, #10
 800f774:	4620      	mov	r0, r4
 800f776:	f7fe ffc9 	bl	800e70c <__multadd>
 800f77a:	f1b9 0f00 	cmp.w	r9, #0
 800f77e:	4607      	mov	r7, r0
 800f780:	f300 808e 	bgt.w	800f8a0 <_dtoa_r+0x9a8>
 800f784:	9b05      	ldr	r3, [sp, #20]
 800f786:	2b02      	cmp	r3, #2
 800f788:	dc50      	bgt.n	800f82c <_dtoa_r+0x934>
 800f78a:	e089      	b.n	800f8a0 <_dtoa_r+0x9a8>
 800f78c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f78e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f792:	e75d      	b.n	800f650 <_dtoa_r+0x758>
 800f794:	9b01      	ldr	r3, [sp, #4]
 800f796:	1e5e      	subs	r6, r3, #1
 800f798:	9b06      	ldr	r3, [sp, #24]
 800f79a:	42b3      	cmp	r3, r6
 800f79c:	bfbf      	itttt	lt
 800f79e:	9b06      	ldrlt	r3, [sp, #24]
 800f7a0:	9606      	strlt	r6, [sp, #24]
 800f7a2:	1af2      	sublt	r2, r6, r3
 800f7a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f7a6:	bfb6      	itet	lt
 800f7a8:	189b      	addlt	r3, r3, r2
 800f7aa:	1b9e      	subge	r6, r3, r6
 800f7ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f7ae:	9b01      	ldr	r3, [sp, #4]
 800f7b0:	bfb8      	it	lt
 800f7b2:	2600      	movlt	r6, #0
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	bfb5      	itete	lt
 800f7b8:	eba8 0503 	sublt.w	r5, r8, r3
 800f7bc:	9b01      	ldrge	r3, [sp, #4]
 800f7be:	2300      	movlt	r3, #0
 800f7c0:	4645      	movge	r5, r8
 800f7c2:	e747      	b.n	800f654 <_dtoa_r+0x75c>
 800f7c4:	9e06      	ldr	r6, [sp, #24]
 800f7c6:	9f08      	ldr	r7, [sp, #32]
 800f7c8:	4645      	mov	r5, r8
 800f7ca:	e74c      	b.n	800f666 <_dtoa_r+0x76e>
 800f7cc:	9a06      	ldr	r2, [sp, #24]
 800f7ce:	e775      	b.n	800f6bc <_dtoa_r+0x7c4>
 800f7d0:	9b05      	ldr	r3, [sp, #20]
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	dc18      	bgt.n	800f808 <_dtoa_r+0x910>
 800f7d6:	9b02      	ldr	r3, [sp, #8]
 800f7d8:	b9b3      	cbnz	r3, 800f808 <_dtoa_r+0x910>
 800f7da:	9b03      	ldr	r3, [sp, #12]
 800f7dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7e0:	b9a3      	cbnz	r3, 800f80c <_dtoa_r+0x914>
 800f7e2:	9b03      	ldr	r3, [sp, #12]
 800f7e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f7e8:	0d1b      	lsrs	r3, r3, #20
 800f7ea:	051b      	lsls	r3, r3, #20
 800f7ec:	b12b      	cbz	r3, 800f7fa <_dtoa_r+0x902>
 800f7ee:	9b04      	ldr	r3, [sp, #16]
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	9304      	str	r3, [sp, #16]
 800f7f4:	f108 0801 	add.w	r8, r8, #1
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	9306      	str	r3, [sp, #24]
 800f7fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	f47f af74 	bne.w	800f6ec <_dtoa_r+0x7f4>
 800f804:	2001      	movs	r0, #1
 800f806:	e779      	b.n	800f6fc <_dtoa_r+0x804>
 800f808:	2300      	movs	r3, #0
 800f80a:	e7f6      	b.n	800f7fa <_dtoa_r+0x902>
 800f80c:	9b02      	ldr	r3, [sp, #8]
 800f80e:	e7f4      	b.n	800f7fa <_dtoa_r+0x902>
 800f810:	d085      	beq.n	800f71e <_dtoa_r+0x826>
 800f812:	4618      	mov	r0, r3
 800f814:	301c      	adds	r0, #28
 800f816:	e77d      	b.n	800f714 <_dtoa_r+0x81c>
 800f818:	40240000 	.word	0x40240000
 800f81c:	9b01      	ldr	r3, [sp, #4]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	dc38      	bgt.n	800f894 <_dtoa_r+0x99c>
 800f822:	9b05      	ldr	r3, [sp, #20]
 800f824:	2b02      	cmp	r3, #2
 800f826:	dd35      	ble.n	800f894 <_dtoa_r+0x99c>
 800f828:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f82c:	f1b9 0f00 	cmp.w	r9, #0
 800f830:	d10d      	bne.n	800f84e <_dtoa_r+0x956>
 800f832:	4631      	mov	r1, r6
 800f834:	464b      	mov	r3, r9
 800f836:	2205      	movs	r2, #5
 800f838:	4620      	mov	r0, r4
 800f83a:	f7fe ff67 	bl	800e70c <__multadd>
 800f83e:	4601      	mov	r1, r0
 800f840:	4606      	mov	r6, r0
 800f842:	4658      	mov	r0, fp
 800f844:	f7ff f97e 	bl	800eb44 <__mcmp>
 800f848:	2800      	cmp	r0, #0
 800f84a:	f73f adbd 	bgt.w	800f3c8 <_dtoa_r+0x4d0>
 800f84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f850:	9d00      	ldr	r5, [sp, #0]
 800f852:	ea6f 0a03 	mvn.w	sl, r3
 800f856:	f04f 0800 	mov.w	r8, #0
 800f85a:	4631      	mov	r1, r6
 800f85c:	4620      	mov	r0, r4
 800f85e:	f7fe ff33 	bl	800e6c8 <_Bfree>
 800f862:	2f00      	cmp	r7, #0
 800f864:	f43f aeb4 	beq.w	800f5d0 <_dtoa_r+0x6d8>
 800f868:	f1b8 0f00 	cmp.w	r8, #0
 800f86c:	d005      	beq.n	800f87a <_dtoa_r+0x982>
 800f86e:	45b8      	cmp	r8, r7
 800f870:	d003      	beq.n	800f87a <_dtoa_r+0x982>
 800f872:	4641      	mov	r1, r8
 800f874:	4620      	mov	r0, r4
 800f876:	f7fe ff27 	bl	800e6c8 <_Bfree>
 800f87a:	4639      	mov	r1, r7
 800f87c:	4620      	mov	r0, r4
 800f87e:	f7fe ff23 	bl	800e6c8 <_Bfree>
 800f882:	e6a5      	b.n	800f5d0 <_dtoa_r+0x6d8>
 800f884:	2600      	movs	r6, #0
 800f886:	4637      	mov	r7, r6
 800f888:	e7e1      	b.n	800f84e <_dtoa_r+0x956>
 800f88a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f88c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f890:	4637      	mov	r7, r6
 800f892:	e599      	b.n	800f3c8 <_dtoa_r+0x4d0>
 800f894:	9b08      	ldr	r3, [sp, #32]
 800f896:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f000 80fd 	beq.w	800fa9a <_dtoa_r+0xba2>
 800f8a0:	2d00      	cmp	r5, #0
 800f8a2:	dd05      	ble.n	800f8b0 <_dtoa_r+0x9b8>
 800f8a4:	4639      	mov	r1, r7
 800f8a6:	462a      	mov	r2, r5
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f7ff f8df 	bl	800ea6c <__lshift>
 800f8ae:	4607      	mov	r7, r0
 800f8b0:	9b06      	ldr	r3, [sp, #24]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d05c      	beq.n	800f970 <_dtoa_r+0xa78>
 800f8b6:	6879      	ldr	r1, [r7, #4]
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	f7fe fec5 	bl	800e648 <_Balloc>
 800f8be:	4605      	mov	r5, r0
 800f8c0:	b928      	cbnz	r0, 800f8ce <_dtoa_r+0x9d6>
 800f8c2:	4b80      	ldr	r3, [pc, #512]	; (800fac4 <_dtoa_r+0xbcc>)
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f8ca:	f7ff bb2e 	b.w	800ef2a <_dtoa_r+0x32>
 800f8ce:	693a      	ldr	r2, [r7, #16]
 800f8d0:	3202      	adds	r2, #2
 800f8d2:	0092      	lsls	r2, r2, #2
 800f8d4:	f107 010c 	add.w	r1, r7, #12
 800f8d8:	300c      	adds	r0, #12
 800f8da:	f7fe fc8b 	bl	800e1f4 <memcpy>
 800f8de:	2201      	movs	r2, #1
 800f8e0:	4629      	mov	r1, r5
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f7ff f8c2 	bl	800ea6c <__lshift>
 800f8e8:	9b00      	ldr	r3, [sp, #0]
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	9301      	str	r3, [sp, #4]
 800f8ee:	9b00      	ldr	r3, [sp, #0]
 800f8f0:	444b      	add	r3, r9
 800f8f2:	9307      	str	r3, [sp, #28]
 800f8f4:	9b02      	ldr	r3, [sp, #8]
 800f8f6:	f003 0301 	and.w	r3, r3, #1
 800f8fa:	46b8      	mov	r8, r7
 800f8fc:	9306      	str	r3, [sp, #24]
 800f8fe:	4607      	mov	r7, r0
 800f900:	9b01      	ldr	r3, [sp, #4]
 800f902:	4631      	mov	r1, r6
 800f904:	3b01      	subs	r3, #1
 800f906:	4658      	mov	r0, fp
 800f908:	9302      	str	r3, [sp, #8]
 800f90a:	f7ff fa67 	bl	800eddc <quorem>
 800f90e:	4603      	mov	r3, r0
 800f910:	3330      	adds	r3, #48	; 0x30
 800f912:	9004      	str	r0, [sp, #16]
 800f914:	4641      	mov	r1, r8
 800f916:	4658      	mov	r0, fp
 800f918:	9308      	str	r3, [sp, #32]
 800f91a:	f7ff f913 	bl	800eb44 <__mcmp>
 800f91e:	463a      	mov	r2, r7
 800f920:	4681      	mov	r9, r0
 800f922:	4631      	mov	r1, r6
 800f924:	4620      	mov	r0, r4
 800f926:	f7ff f929 	bl	800eb7c <__mdiff>
 800f92a:	68c2      	ldr	r2, [r0, #12]
 800f92c:	9b08      	ldr	r3, [sp, #32]
 800f92e:	4605      	mov	r5, r0
 800f930:	bb02      	cbnz	r2, 800f974 <_dtoa_r+0xa7c>
 800f932:	4601      	mov	r1, r0
 800f934:	4658      	mov	r0, fp
 800f936:	f7ff f905 	bl	800eb44 <__mcmp>
 800f93a:	9b08      	ldr	r3, [sp, #32]
 800f93c:	4602      	mov	r2, r0
 800f93e:	4629      	mov	r1, r5
 800f940:	4620      	mov	r0, r4
 800f942:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f946:	f7fe febf 	bl	800e6c8 <_Bfree>
 800f94a:	9b05      	ldr	r3, [sp, #20]
 800f94c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f94e:	9d01      	ldr	r5, [sp, #4]
 800f950:	ea43 0102 	orr.w	r1, r3, r2
 800f954:	9b06      	ldr	r3, [sp, #24]
 800f956:	430b      	orrs	r3, r1
 800f958:	9b08      	ldr	r3, [sp, #32]
 800f95a:	d10d      	bne.n	800f978 <_dtoa_r+0xa80>
 800f95c:	2b39      	cmp	r3, #57	; 0x39
 800f95e:	d029      	beq.n	800f9b4 <_dtoa_r+0xabc>
 800f960:	f1b9 0f00 	cmp.w	r9, #0
 800f964:	dd01      	ble.n	800f96a <_dtoa_r+0xa72>
 800f966:	9b04      	ldr	r3, [sp, #16]
 800f968:	3331      	adds	r3, #49	; 0x31
 800f96a:	9a02      	ldr	r2, [sp, #8]
 800f96c:	7013      	strb	r3, [r2, #0]
 800f96e:	e774      	b.n	800f85a <_dtoa_r+0x962>
 800f970:	4638      	mov	r0, r7
 800f972:	e7b9      	b.n	800f8e8 <_dtoa_r+0x9f0>
 800f974:	2201      	movs	r2, #1
 800f976:	e7e2      	b.n	800f93e <_dtoa_r+0xa46>
 800f978:	f1b9 0f00 	cmp.w	r9, #0
 800f97c:	db06      	blt.n	800f98c <_dtoa_r+0xa94>
 800f97e:	9905      	ldr	r1, [sp, #20]
 800f980:	ea41 0909 	orr.w	r9, r1, r9
 800f984:	9906      	ldr	r1, [sp, #24]
 800f986:	ea59 0101 	orrs.w	r1, r9, r1
 800f98a:	d120      	bne.n	800f9ce <_dtoa_r+0xad6>
 800f98c:	2a00      	cmp	r2, #0
 800f98e:	ddec      	ble.n	800f96a <_dtoa_r+0xa72>
 800f990:	4659      	mov	r1, fp
 800f992:	2201      	movs	r2, #1
 800f994:	4620      	mov	r0, r4
 800f996:	9301      	str	r3, [sp, #4]
 800f998:	f7ff f868 	bl	800ea6c <__lshift>
 800f99c:	4631      	mov	r1, r6
 800f99e:	4683      	mov	fp, r0
 800f9a0:	f7ff f8d0 	bl	800eb44 <__mcmp>
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	9b01      	ldr	r3, [sp, #4]
 800f9a8:	dc02      	bgt.n	800f9b0 <_dtoa_r+0xab8>
 800f9aa:	d1de      	bne.n	800f96a <_dtoa_r+0xa72>
 800f9ac:	07da      	lsls	r2, r3, #31
 800f9ae:	d5dc      	bpl.n	800f96a <_dtoa_r+0xa72>
 800f9b0:	2b39      	cmp	r3, #57	; 0x39
 800f9b2:	d1d8      	bne.n	800f966 <_dtoa_r+0xa6e>
 800f9b4:	9a02      	ldr	r2, [sp, #8]
 800f9b6:	2339      	movs	r3, #57	; 0x39
 800f9b8:	7013      	strb	r3, [r2, #0]
 800f9ba:	462b      	mov	r3, r5
 800f9bc:	461d      	mov	r5, r3
 800f9be:	3b01      	subs	r3, #1
 800f9c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f9c4:	2a39      	cmp	r2, #57	; 0x39
 800f9c6:	d050      	beq.n	800fa6a <_dtoa_r+0xb72>
 800f9c8:	3201      	adds	r2, #1
 800f9ca:	701a      	strb	r2, [r3, #0]
 800f9cc:	e745      	b.n	800f85a <_dtoa_r+0x962>
 800f9ce:	2a00      	cmp	r2, #0
 800f9d0:	dd03      	ble.n	800f9da <_dtoa_r+0xae2>
 800f9d2:	2b39      	cmp	r3, #57	; 0x39
 800f9d4:	d0ee      	beq.n	800f9b4 <_dtoa_r+0xabc>
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	e7c7      	b.n	800f96a <_dtoa_r+0xa72>
 800f9da:	9a01      	ldr	r2, [sp, #4]
 800f9dc:	9907      	ldr	r1, [sp, #28]
 800f9de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f9e2:	428a      	cmp	r2, r1
 800f9e4:	d02a      	beq.n	800fa3c <_dtoa_r+0xb44>
 800f9e6:	4659      	mov	r1, fp
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	220a      	movs	r2, #10
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	f7fe fe8d 	bl	800e70c <__multadd>
 800f9f2:	45b8      	cmp	r8, r7
 800f9f4:	4683      	mov	fp, r0
 800f9f6:	f04f 0300 	mov.w	r3, #0
 800f9fa:	f04f 020a 	mov.w	r2, #10
 800f9fe:	4641      	mov	r1, r8
 800fa00:	4620      	mov	r0, r4
 800fa02:	d107      	bne.n	800fa14 <_dtoa_r+0xb1c>
 800fa04:	f7fe fe82 	bl	800e70c <__multadd>
 800fa08:	4680      	mov	r8, r0
 800fa0a:	4607      	mov	r7, r0
 800fa0c:	9b01      	ldr	r3, [sp, #4]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	9301      	str	r3, [sp, #4]
 800fa12:	e775      	b.n	800f900 <_dtoa_r+0xa08>
 800fa14:	f7fe fe7a 	bl	800e70c <__multadd>
 800fa18:	4639      	mov	r1, r7
 800fa1a:	4680      	mov	r8, r0
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	220a      	movs	r2, #10
 800fa20:	4620      	mov	r0, r4
 800fa22:	f7fe fe73 	bl	800e70c <__multadd>
 800fa26:	4607      	mov	r7, r0
 800fa28:	e7f0      	b.n	800fa0c <_dtoa_r+0xb14>
 800fa2a:	f1b9 0f00 	cmp.w	r9, #0
 800fa2e:	9a00      	ldr	r2, [sp, #0]
 800fa30:	bfcc      	ite	gt
 800fa32:	464d      	movgt	r5, r9
 800fa34:	2501      	movle	r5, #1
 800fa36:	4415      	add	r5, r2
 800fa38:	f04f 0800 	mov.w	r8, #0
 800fa3c:	4659      	mov	r1, fp
 800fa3e:	2201      	movs	r2, #1
 800fa40:	4620      	mov	r0, r4
 800fa42:	9301      	str	r3, [sp, #4]
 800fa44:	f7ff f812 	bl	800ea6c <__lshift>
 800fa48:	4631      	mov	r1, r6
 800fa4a:	4683      	mov	fp, r0
 800fa4c:	f7ff f87a 	bl	800eb44 <__mcmp>
 800fa50:	2800      	cmp	r0, #0
 800fa52:	dcb2      	bgt.n	800f9ba <_dtoa_r+0xac2>
 800fa54:	d102      	bne.n	800fa5c <_dtoa_r+0xb64>
 800fa56:	9b01      	ldr	r3, [sp, #4]
 800fa58:	07db      	lsls	r3, r3, #31
 800fa5a:	d4ae      	bmi.n	800f9ba <_dtoa_r+0xac2>
 800fa5c:	462b      	mov	r3, r5
 800fa5e:	461d      	mov	r5, r3
 800fa60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa64:	2a30      	cmp	r2, #48	; 0x30
 800fa66:	d0fa      	beq.n	800fa5e <_dtoa_r+0xb66>
 800fa68:	e6f7      	b.n	800f85a <_dtoa_r+0x962>
 800fa6a:	9a00      	ldr	r2, [sp, #0]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d1a5      	bne.n	800f9bc <_dtoa_r+0xac4>
 800fa70:	f10a 0a01 	add.w	sl, sl, #1
 800fa74:	2331      	movs	r3, #49	; 0x31
 800fa76:	e779      	b.n	800f96c <_dtoa_r+0xa74>
 800fa78:	4b13      	ldr	r3, [pc, #76]	; (800fac8 <_dtoa_r+0xbd0>)
 800fa7a:	f7ff baaf 	b.w	800efdc <_dtoa_r+0xe4>
 800fa7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	f47f aa86 	bne.w	800ef92 <_dtoa_r+0x9a>
 800fa86:	4b11      	ldr	r3, [pc, #68]	; (800facc <_dtoa_r+0xbd4>)
 800fa88:	f7ff baa8 	b.w	800efdc <_dtoa_r+0xe4>
 800fa8c:	f1b9 0f00 	cmp.w	r9, #0
 800fa90:	dc03      	bgt.n	800fa9a <_dtoa_r+0xba2>
 800fa92:	9b05      	ldr	r3, [sp, #20]
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	f73f aec9 	bgt.w	800f82c <_dtoa_r+0x934>
 800fa9a:	9d00      	ldr	r5, [sp, #0]
 800fa9c:	4631      	mov	r1, r6
 800fa9e:	4658      	mov	r0, fp
 800faa0:	f7ff f99c 	bl	800eddc <quorem>
 800faa4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800faa8:	f805 3b01 	strb.w	r3, [r5], #1
 800faac:	9a00      	ldr	r2, [sp, #0]
 800faae:	1aaa      	subs	r2, r5, r2
 800fab0:	4591      	cmp	r9, r2
 800fab2:	ddba      	ble.n	800fa2a <_dtoa_r+0xb32>
 800fab4:	4659      	mov	r1, fp
 800fab6:	2300      	movs	r3, #0
 800fab8:	220a      	movs	r2, #10
 800faba:	4620      	mov	r0, r4
 800fabc:	f7fe fe26 	bl	800e70c <__multadd>
 800fac0:	4683      	mov	fp, r0
 800fac2:	e7eb      	b.n	800fa9c <_dtoa_r+0xba4>
 800fac4:	08012e3f 	.word	0x08012e3f
 800fac8:	08012f95 	.word	0x08012f95
 800facc:	08012f88 	.word	0x08012f88

0800fad0 <fiprintf>:
 800fad0:	b40e      	push	{r1, r2, r3}
 800fad2:	b503      	push	{r0, r1, lr}
 800fad4:	4601      	mov	r1, r0
 800fad6:	ab03      	add	r3, sp, #12
 800fad8:	4805      	ldr	r0, [pc, #20]	; (800faf0 <fiprintf+0x20>)
 800fada:	f853 2b04 	ldr.w	r2, [r3], #4
 800fade:	6800      	ldr	r0, [r0, #0]
 800fae0:	9301      	str	r3, [sp, #4]
 800fae2:	f000 f833 	bl	800fb4c <_vfiprintf_r>
 800fae6:	b002      	add	sp, #8
 800fae8:	f85d eb04 	ldr.w	lr, [sp], #4
 800faec:	b003      	add	sp, #12
 800faee:	4770      	bx	lr
 800faf0:	20000038 	.word	0x20000038

0800faf4 <__retarget_lock_init_recursive>:
 800faf4:	4770      	bx	lr

0800faf6 <__retarget_lock_acquire_recursive>:
 800faf6:	4770      	bx	lr

0800faf8 <__retarget_lock_release_recursive>:
 800faf8:	4770      	bx	lr

0800fafa <__sfputc_r>:
 800fafa:	6893      	ldr	r3, [r2, #8]
 800fafc:	3b01      	subs	r3, #1
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	b410      	push	{r4}
 800fb02:	6093      	str	r3, [r2, #8]
 800fb04:	da08      	bge.n	800fb18 <__sfputc_r+0x1e>
 800fb06:	6994      	ldr	r4, [r2, #24]
 800fb08:	42a3      	cmp	r3, r4
 800fb0a:	db01      	blt.n	800fb10 <__sfputc_r+0x16>
 800fb0c:	290a      	cmp	r1, #10
 800fb0e:	d103      	bne.n	800fb18 <__sfputc_r+0x1e>
 800fb10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb14:	f000 bade 	b.w	80100d4 <__swbuf_r>
 800fb18:	6813      	ldr	r3, [r2, #0]
 800fb1a:	1c58      	adds	r0, r3, #1
 800fb1c:	6010      	str	r0, [r2, #0]
 800fb1e:	7019      	strb	r1, [r3, #0]
 800fb20:	4608      	mov	r0, r1
 800fb22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb26:	4770      	bx	lr

0800fb28 <__sfputs_r>:
 800fb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb2a:	4606      	mov	r6, r0
 800fb2c:	460f      	mov	r7, r1
 800fb2e:	4614      	mov	r4, r2
 800fb30:	18d5      	adds	r5, r2, r3
 800fb32:	42ac      	cmp	r4, r5
 800fb34:	d101      	bne.n	800fb3a <__sfputs_r+0x12>
 800fb36:	2000      	movs	r0, #0
 800fb38:	e007      	b.n	800fb4a <__sfputs_r+0x22>
 800fb3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb3e:	463a      	mov	r2, r7
 800fb40:	4630      	mov	r0, r6
 800fb42:	f7ff ffda 	bl	800fafa <__sfputc_r>
 800fb46:	1c43      	adds	r3, r0, #1
 800fb48:	d1f3      	bne.n	800fb32 <__sfputs_r+0xa>
 800fb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fb4c <_vfiprintf_r>:
 800fb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb50:	460d      	mov	r5, r1
 800fb52:	b09d      	sub	sp, #116	; 0x74
 800fb54:	4614      	mov	r4, r2
 800fb56:	4698      	mov	r8, r3
 800fb58:	4606      	mov	r6, r0
 800fb5a:	b118      	cbz	r0, 800fb64 <_vfiprintf_r+0x18>
 800fb5c:	6983      	ldr	r3, [r0, #24]
 800fb5e:	b90b      	cbnz	r3, 800fb64 <_vfiprintf_r+0x18>
 800fb60:	f000 fc9a 	bl	8010498 <__sinit>
 800fb64:	4b89      	ldr	r3, [pc, #548]	; (800fd8c <_vfiprintf_r+0x240>)
 800fb66:	429d      	cmp	r5, r3
 800fb68:	d11b      	bne.n	800fba2 <_vfiprintf_r+0x56>
 800fb6a:	6875      	ldr	r5, [r6, #4]
 800fb6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb6e:	07d9      	lsls	r1, r3, #31
 800fb70:	d405      	bmi.n	800fb7e <_vfiprintf_r+0x32>
 800fb72:	89ab      	ldrh	r3, [r5, #12]
 800fb74:	059a      	lsls	r2, r3, #22
 800fb76:	d402      	bmi.n	800fb7e <_vfiprintf_r+0x32>
 800fb78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb7a:	f7ff ffbc 	bl	800faf6 <__retarget_lock_acquire_recursive>
 800fb7e:	89ab      	ldrh	r3, [r5, #12]
 800fb80:	071b      	lsls	r3, r3, #28
 800fb82:	d501      	bpl.n	800fb88 <_vfiprintf_r+0x3c>
 800fb84:	692b      	ldr	r3, [r5, #16]
 800fb86:	b9eb      	cbnz	r3, 800fbc4 <_vfiprintf_r+0x78>
 800fb88:	4629      	mov	r1, r5
 800fb8a:	4630      	mov	r0, r6
 800fb8c:	f000 faf4 	bl	8010178 <__swsetup_r>
 800fb90:	b1c0      	cbz	r0, 800fbc4 <_vfiprintf_r+0x78>
 800fb92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb94:	07dc      	lsls	r4, r3, #31
 800fb96:	d50e      	bpl.n	800fbb6 <_vfiprintf_r+0x6a>
 800fb98:	f04f 30ff 	mov.w	r0, #4294967295
 800fb9c:	b01d      	add	sp, #116	; 0x74
 800fb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba2:	4b7b      	ldr	r3, [pc, #492]	; (800fd90 <_vfiprintf_r+0x244>)
 800fba4:	429d      	cmp	r5, r3
 800fba6:	d101      	bne.n	800fbac <_vfiprintf_r+0x60>
 800fba8:	68b5      	ldr	r5, [r6, #8]
 800fbaa:	e7df      	b.n	800fb6c <_vfiprintf_r+0x20>
 800fbac:	4b79      	ldr	r3, [pc, #484]	; (800fd94 <_vfiprintf_r+0x248>)
 800fbae:	429d      	cmp	r5, r3
 800fbb0:	bf08      	it	eq
 800fbb2:	68f5      	ldreq	r5, [r6, #12]
 800fbb4:	e7da      	b.n	800fb6c <_vfiprintf_r+0x20>
 800fbb6:	89ab      	ldrh	r3, [r5, #12]
 800fbb8:	0598      	lsls	r0, r3, #22
 800fbba:	d4ed      	bmi.n	800fb98 <_vfiprintf_r+0x4c>
 800fbbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbbe:	f7ff ff9b 	bl	800faf8 <__retarget_lock_release_recursive>
 800fbc2:	e7e9      	b.n	800fb98 <_vfiprintf_r+0x4c>
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	9309      	str	r3, [sp, #36]	; 0x24
 800fbc8:	2320      	movs	r3, #32
 800fbca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbce:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbd2:	2330      	movs	r3, #48	; 0x30
 800fbd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fd98 <_vfiprintf_r+0x24c>
 800fbd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbdc:	f04f 0901 	mov.w	r9, #1
 800fbe0:	4623      	mov	r3, r4
 800fbe2:	469a      	mov	sl, r3
 800fbe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbe8:	b10a      	cbz	r2, 800fbee <_vfiprintf_r+0xa2>
 800fbea:	2a25      	cmp	r2, #37	; 0x25
 800fbec:	d1f9      	bne.n	800fbe2 <_vfiprintf_r+0x96>
 800fbee:	ebba 0b04 	subs.w	fp, sl, r4
 800fbf2:	d00b      	beq.n	800fc0c <_vfiprintf_r+0xc0>
 800fbf4:	465b      	mov	r3, fp
 800fbf6:	4622      	mov	r2, r4
 800fbf8:	4629      	mov	r1, r5
 800fbfa:	4630      	mov	r0, r6
 800fbfc:	f7ff ff94 	bl	800fb28 <__sfputs_r>
 800fc00:	3001      	adds	r0, #1
 800fc02:	f000 80aa 	beq.w	800fd5a <_vfiprintf_r+0x20e>
 800fc06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc08:	445a      	add	r2, fp
 800fc0a:	9209      	str	r2, [sp, #36]	; 0x24
 800fc0c:	f89a 3000 	ldrb.w	r3, [sl]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	f000 80a2 	beq.w	800fd5a <_vfiprintf_r+0x20e>
 800fc16:	2300      	movs	r3, #0
 800fc18:	f04f 32ff 	mov.w	r2, #4294967295
 800fc1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc20:	f10a 0a01 	add.w	sl, sl, #1
 800fc24:	9304      	str	r3, [sp, #16]
 800fc26:	9307      	str	r3, [sp, #28]
 800fc28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc2c:	931a      	str	r3, [sp, #104]	; 0x68
 800fc2e:	4654      	mov	r4, sl
 800fc30:	2205      	movs	r2, #5
 800fc32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc36:	4858      	ldr	r0, [pc, #352]	; (800fd98 <_vfiprintf_r+0x24c>)
 800fc38:	f7f0 fae2 	bl	8000200 <memchr>
 800fc3c:	9a04      	ldr	r2, [sp, #16]
 800fc3e:	b9d8      	cbnz	r0, 800fc78 <_vfiprintf_r+0x12c>
 800fc40:	06d1      	lsls	r1, r2, #27
 800fc42:	bf44      	itt	mi
 800fc44:	2320      	movmi	r3, #32
 800fc46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc4a:	0713      	lsls	r3, r2, #28
 800fc4c:	bf44      	itt	mi
 800fc4e:	232b      	movmi	r3, #43	; 0x2b
 800fc50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc54:	f89a 3000 	ldrb.w	r3, [sl]
 800fc58:	2b2a      	cmp	r3, #42	; 0x2a
 800fc5a:	d015      	beq.n	800fc88 <_vfiprintf_r+0x13c>
 800fc5c:	9a07      	ldr	r2, [sp, #28]
 800fc5e:	4654      	mov	r4, sl
 800fc60:	2000      	movs	r0, #0
 800fc62:	f04f 0c0a 	mov.w	ip, #10
 800fc66:	4621      	mov	r1, r4
 800fc68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc6c:	3b30      	subs	r3, #48	; 0x30
 800fc6e:	2b09      	cmp	r3, #9
 800fc70:	d94e      	bls.n	800fd10 <_vfiprintf_r+0x1c4>
 800fc72:	b1b0      	cbz	r0, 800fca2 <_vfiprintf_r+0x156>
 800fc74:	9207      	str	r2, [sp, #28]
 800fc76:	e014      	b.n	800fca2 <_vfiprintf_r+0x156>
 800fc78:	eba0 0308 	sub.w	r3, r0, r8
 800fc7c:	fa09 f303 	lsl.w	r3, r9, r3
 800fc80:	4313      	orrs	r3, r2
 800fc82:	9304      	str	r3, [sp, #16]
 800fc84:	46a2      	mov	sl, r4
 800fc86:	e7d2      	b.n	800fc2e <_vfiprintf_r+0xe2>
 800fc88:	9b03      	ldr	r3, [sp, #12]
 800fc8a:	1d19      	adds	r1, r3, #4
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	9103      	str	r1, [sp, #12]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	bfbb      	ittet	lt
 800fc94:	425b      	neglt	r3, r3
 800fc96:	f042 0202 	orrlt.w	r2, r2, #2
 800fc9a:	9307      	strge	r3, [sp, #28]
 800fc9c:	9307      	strlt	r3, [sp, #28]
 800fc9e:	bfb8      	it	lt
 800fca0:	9204      	strlt	r2, [sp, #16]
 800fca2:	7823      	ldrb	r3, [r4, #0]
 800fca4:	2b2e      	cmp	r3, #46	; 0x2e
 800fca6:	d10c      	bne.n	800fcc2 <_vfiprintf_r+0x176>
 800fca8:	7863      	ldrb	r3, [r4, #1]
 800fcaa:	2b2a      	cmp	r3, #42	; 0x2a
 800fcac:	d135      	bne.n	800fd1a <_vfiprintf_r+0x1ce>
 800fcae:	9b03      	ldr	r3, [sp, #12]
 800fcb0:	1d1a      	adds	r2, r3, #4
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	9203      	str	r2, [sp, #12]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	bfb8      	it	lt
 800fcba:	f04f 33ff 	movlt.w	r3, #4294967295
 800fcbe:	3402      	adds	r4, #2
 800fcc0:	9305      	str	r3, [sp, #20]
 800fcc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fda8 <_vfiprintf_r+0x25c>
 800fcc6:	7821      	ldrb	r1, [r4, #0]
 800fcc8:	2203      	movs	r2, #3
 800fcca:	4650      	mov	r0, sl
 800fccc:	f7f0 fa98 	bl	8000200 <memchr>
 800fcd0:	b140      	cbz	r0, 800fce4 <_vfiprintf_r+0x198>
 800fcd2:	2340      	movs	r3, #64	; 0x40
 800fcd4:	eba0 000a 	sub.w	r0, r0, sl
 800fcd8:	fa03 f000 	lsl.w	r0, r3, r0
 800fcdc:	9b04      	ldr	r3, [sp, #16]
 800fcde:	4303      	orrs	r3, r0
 800fce0:	3401      	adds	r4, #1
 800fce2:	9304      	str	r3, [sp, #16]
 800fce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fce8:	482c      	ldr	r0, [pc, #176]	; (800fd9c <_vfiprintf_r+0x250>)
 800fcea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fcee:	2206      	movs	r2, #6
 800fcf0:	f7f0 fa86 	bl	8000200 <memchr>
 800fcf4:	2800      	cmp	r0, #0
 800fcf6:	d03f      	beq.n	800fd78 <_vfiprintf_r+0x22c>
 800fcf8:	4b29      	ldr	r3, [pc, #164]	; (800fda0 <_vfiprintf_r+0x254>)
 800fcfa:	bb1b      	cbnz	r3, 800fd44 <_vfiprintf_r+0x1f8>
 800fcfc:	9b03      	ldr	r3, [sp, #12]
 800fcfe:	3307      	adds	r3, #7
 800fd00:	f023 0307 	bic.w	r3, r3, #7
 800fd04:	3308      	adds	r3, #8
 800fd06:	9303      	str	r3, [sp, #12]
 800fd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd0a:	443b      	add	r3, r7
 800fd0c:	9309      	str	r3, [sp, #36]	; 0x24
 800fd0e:	e767      	b.n	800fbe0 <_vfiprintf_r+0x94>
 800fd10:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd14:	460c      	mov	r4, r1
 800fd16:	2001      	movs	r0, #1
 800fd18:	e7a5      	b.n	800fc66 <_vfiprintf_r+0x11a>
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	3401      	adds	r4, #1
 800fd1e:	9305      	str	r3, [sp, #20]
 800fd20:	4619      	mov	r1, r3
 800fd22:	f04f 0c0a 	mov.w	ip, #10
 800fd26:	4620      	mov	r0, r4
 800fd28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd2c:	3a30      	subs	r2, #48	; 0x30
 800fd2e:	2a09      	cmp	r2, #9
 800fd30:	d903      	bls.n	800fd3a <_vfiprintf_r+0x1ee>
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d0c5      	beq.n	800fcc2 <_vfiprintf_r+0x176>
 800fd36:	9105      	str	r1, [sp, #20]
 800fd38:	e7c3      	b.n	800fcc2 <_vfiprintf_r+0x176>
 800fd3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd3e:	4604      	mov	r4, r0
 800fd40:	2301      	movs	r3, #1
 800fd42:	e7f0      	b.n	800fd26 <_vfiprintf_r+0x1da>
 800fd44:	ab03      	add	r3, sp, #12
 800fd46:	9300      	str	r3, [sp, #0]
 800fd48:	462a      	mov	r2, r5
 800fd4a:	4b16      	ldr	r3, [pc, #88]	; (800fda4 <_vfiprintf_r+0x258>)
 800fd4c:	a904      	add	r1, sp, #16
 800fd4e:	4630      	mov	r0, r6
 800fd50:	f3af 8000 	nop.w
 800fd54:	4607      	mov	r7, r0
 800fd56:	1c78      	adds	r0, r7, #1
 800fd58:	d1d6      	bne.n	800fd08 <_vfiprintf_r+0x1bc>
 800fd5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd5c:	07d9      	lsls	r1, r3, #31
 800fd5e:	d405      	bmi.n	800fd6c <_vfiprintf_r+0x220>
 800fd60:	89ab      	ldrh	r3, [r5, #12]
 800fd62:	059a      	lsls	r2, r3, #22
 800fd64:	d402      	bmi.n	800fd6c <_vfiprintf_r+0x220>
 800fd66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd68:	f7ff fec6 	bl	800faf8 <__retarget_lock_release_recursive>
 800fd6c:	89ab      	ldrh	r3, [r5, #12]
 800fd6e:	065b      	lsls	r3, r3, #25
 800fd70:	f53f af12 	bmi.w	800fb98 <_vfiprintf_r+0x4c>
 800fd74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd76:	e711      	b.n	800fb9c <_vfiprintf_r+0x50>
 800fd78:	ab03      	add	r3, sp, #12
 800fd7a:	9300      	str	r3, [sp, #0]
 800fd7c:	462a      	mov	r2, r5
 800fd7e:	4b09      	ldr	r3, [pc, #36]	; (800fda4 <_vfiprintf_r+0x258>)
 800fd80:	a904      	add	r1, sp, #16
 800fd82:	4630      	mov	r0, r6
 800fd84:	f000 f880 	bl	800fe88 <_printf_i>
 800fd88:	e7e4      	b.n	800fd54 <_vfiprintf_r+0x208>
 800fd8a:	bf00      	nop
 800fd8c:	0801304c 	.word	0x0801304c
 800fd90:	0801306c 	.word	0x0801306c
 800fd94:	0801302c 	.word	0x0801302c
 800fd98:	08012ff6 	.word	0x08012ff6
 800fd9c:	08013000 	.word	0x08013000
 800fda0:	00000000 	.word	0x00000000
 800fda4:	0800fb29 	.word	0x0800fb29
 800fda8:	08012ffc 	.word	0x08012ffc

0800fdac <_printf_common>:
 800fdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdb0:	4616      	mov	r6, r2
 800fdb2:	4699      	mov	r9, r3
 800fdb4:	688a      	ldr	r2, [r1, #8]
 800fdb6:	690b      	ldr	r3, [r1, #16]
 800fdb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	bfb8      	it	lt
 800fdc0:	4613      	movlt	r3, r2
 800fdc2:	6033      	str	r3, [r6, #0]
 800fdc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fdc8:	4607      	mov	r7, r0
 800fdca:	460c      	mov	r4, r1
 800fdcc:	b10a      	cbz	r2, 800fdd2 <_printf_common+0x26>
 800fdce:	3301      	adds	r3, #1
 800fdd0:	6033      	str	r3, [r6, #0]
 800fdd2:	6823      	ldr	r3, [r4, #0]
 800fdd4:	0699      	lsls	r1, r3, #26
 800fdd6:	bf42      	ittt	mi
 800fdd8:	6833      	ldrmi	r3, [r6, #0]
 800fdda:	3302      	addmi	r3, #2
 800fddc:	6033      	strmi	r3, [r6, #0]
 800fdde:	6825      	ldr	r5, [r4, #0]
 800fde0:	f015 0506 	ands.w	r5, r5, #6
 800fde4:	d106      	bne.n	800fdf4 <_printf_common+0x48>
 800fde6:	f104 0a19 	add.w	sl, r4, #25
 800fdea:	68e3      	ldr	r3, [r4, #12]
 800fdec:	6832      	ldr	r2, [r6, #0]
 800fdee:	1a9b      	subs	r3, r3, r2
 800fdf0:	42ab      	cmp	r3, r5
 800fdf2:	dc26      	bgt.n	800fe42 <_printf_common+0x96>
 800fdf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fdf8:	1e13      	subs	r3, r2, #0
 800fdfa:	6822      	ldr	r2, [r4, #0]
 800fdfc:	bf18      	it	ne
 800fdfe:	2301      	movne	r3, #1
 800fe00:	0692      	lsls	r2, r2, #26
 800fe02:	d42b      	bmi.n	800fe5c <_printf_common+0xb0>
 800fe04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe08:	4649      	mov	r1, r9
 800fe0a:	4638      	mov	r0, r7
 800fe0c:	47c0      	blx	r8
 800fe0e:	3001      	adds	r0, #1
 800fe10:	d01e      	beq.n	800fe50 <_printf_common+0xa4>
 800fe12:	6823      	ldr	r3, [r4, #0]
 800fe14:	68e5      	ldr	r5, [r4, #12]
 800fe16:	6832      	ldr	r2, [r6, #0]
 800fe18:	f003 0306 	and.w	r3, r3, #6
 800fe1c:	2b04      	cmp	r3, #4
 800fe1e:	bf08      	it	eq
 800fe20:	1aad      	subeq	r5, r5, r2
 800fe22:	68a3      	ldr	r3, [r4, #8]
 800fe24:	6922      	ldr	r2, [r4, #16]
 800fe26:	bf0c      	ite	eq
 800fe28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe2c:	2500      	movne	r5, #0
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	bfc4      	itt	gt
 800fe32:	1a9b      	subgt	r3, r3, r2
 800fe34:	18ed      	addgt	r5, r5, r3
 800fe36:	2600      	movs	r6, #0
 800fe38:	341a      	adds	r4, #26
 800fe3a:	42b5      	cmp	r5, r6
 800fe3c:	d11a      	bne.n	800fe74 <_printf_common+0xc8>
 800fe3e:	2000      	movs	r0, #0
 800fe40:	e008      	b.n	800fe54 <_printf_common+0xa8>
 800fe42:	2301      	movs	r3, #1
 800fe44:	4652      	mov	r2, sl
 800fe46:	4649      	mov	r1, r9
 800fe48:	4638      	mov	r0, r7
 800fe4a:	47c0      	blx	r8
 800fe4c:	3001      	adds	r0, #1
 800fe4e:	d103      	bne.n	800fe58 <_printf_common+0xac>
 800fe50:	f04f 30ff 	mov.w	r0, #4294967295
 800fe54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe58:	3501      	adds	r5, #1
 800fe5a:	e7c6      	b.n	800fdea <_printf_common+0x3e>
 800fe5c:	18e1      	adds	r1, r4, r3
 800fe5e:	1c5a      	adds	r2, r3, #1
 800fe60:	2030      	movs	r0, #48	; 0x30
 800fe62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fe66:	4422      	add	r2, r4
 800fe68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fe6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fe70:	3302      	adds	r3, #2
 800fe72:	e7c7      	b.n	800fe04 <_printf_common+0x58>
 800fe74:	2301      	movs	r3, #1
 800fe76:	4622      	mov	r2, r4
 800fe78:	4649      	mov	r1, r9
 800fe7a:	4638      	mov	r0, r7
 800fe7c:	47c0      	blx	r8
 800fe7e:	3001      	adds	r0, #1
 800fe80:	d0e6      	beq.n	800fe50 <_printf_common+0xa4>
 800fe82:	3601      	adds	r6, #1
 800fe84:	e7d9      	b.n	800fe3a <_printf_common+0x8e>
	...

0800fe88 <_printf_i>:
 800fe88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe8c:	460c      	mov	r4, r1
 800fe8e:	4691      	mov	r9, r2
 800fe90:	7e27      	ldrb	r7, [r4, #24]
 800fe92:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fe94:	2f78      	cmp	r7, #120	; 0x78
 800fe96:	4680      	mov	r8, r0
 800fe98:	469a      	mov	sl, r3
 800fe9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe9e:	d807      	bhi.n	800feb0 <_printf_i+0x28>
 800fea0:	2f62      	cmp	r7, #98	; 0x62
 800fea2:	d80a      	bhi.n	800feba <_printf_i+0x32>
 800fea4:	2f00      	cmp	r7, #0
 800fea6:	f000 80d8 	beq.w	801005a <_printf_i+0x1d2>
 800feaa:	2f58      	cmp	r7, #88	; 0x58
 800feac:	f000 80a3 	beq.w	800fff6 <_printf_i+0x16e>
 800feb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800feb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800feb8:	e03a      	b.n	800ff30 <_printf_i+0xa8>
 800feba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800febe:	2b15      	cmp	r3, #21
 800fec0:	d8f6      	bhi.n	800feb0 <_printf_i+0x28>
 800fec2:	a001      	add	r0, pc, #4	; (adr r0, 800fec8 <_printf_i+0x40>)
 800fec4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fec8:	0800ff21 	.word	0x0800ff21
 800fecc:	0800ff35 	.word	0x0800ff35
 800fed0:	0800feb1 	.word	0x0800feb1
 800fed4:	0800feb1 	.word	0x0800feb1
 800fed8:	0800feb1 	.word	0x0800feb1
 800fedc:	0800feb1 	.word	0x0800feb1
 800fee0:	0800ff35 	.word	0x0800ff35
 800fee4:	0800feb1 	.word	0x0800feb1
 800fee8:	0800feb1 	.word	0x0800feb1
 800feec:	0800feb1 	.word	0x0800feb1
 800fef0:	0800feb1 	.word	0x0800feb1
 800fef4:	08010041 	.word	0x08010041
 800fef8:	0800ff65 	.word	0x0800ff65
 800fefc:	08010023 	.word	0x08010023
 800ff00:	0800feb1 	.word	0x0800feb1
 800ff04:	0800feb1 	.word	0x0800feb1
 800ff08:	08010063 	.word	0x08010063
 800ff0c:	0800feb1 	.word	0x0800feb1
 800ff10:	0800ff65 	.word	0x0800ff65
 800ff14:	0800feb1 	.word	0x0800feb1
 800ff18:	0800feb1 	.word	0x0800feb1
 800ff1c:	0801002b 	.word	0x0801002b
 800ff20:	680b      	ldr	r3, [r1, #0]
 800ff22:	1d1a      	adds	r2, r3, #4
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	600a      	str	r2, [r1, #0]
 800ff28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ff2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ff30:	2301      	movs	r3, #1
 800ff32:	e0a3      	b.n	801007c <_printf_i+0x1f4>
 800ff34:	6825      	ldr	r5, [r4, #0]
 800ff36:	6808      	ldr	r0, [r1, #0]
 800ff38:	062e      	lsls	r6, r5, #24
 800ff3a:	f100 0304 	add.w	r3, r0, #4
 800ff3e:	d50a      	bpl.n	800ff56 <_printf_i+0xce>
 800ff40:	6805      	ldr	r5, [r0, #0]
 800ff42:	600b      	str	r3, [r1, #0]
 800ff44:	2d00      	cmp	r5, #0
 800ff46:	da03      	bge.n	800ff50 <_printf_i+0xc8>
 800ff48:	232d      	movs	r3, #45	; 0x2d
 800ff4a:	426d      	negs	r5, r5
 800ff4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff50:	485e      	ldr	r0, [pc, #376]	; (80100cc <_printf_i+0x244>)
 800ff52:	230a      	movs	r3, #10
 800ff54:	e019      	b.n	800ff8a <_printf_i+0x102>
 800ff56:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ff5a:	6805      	ldr	r5, [r0, #0]
 800ff5c:	600b      	str	r3, [r1, #0]
 800ff5e:	bf18      	it	ne
 800ff60:	b22d      	sxthne	r5, r5
 800ff62:	e7ef      	b.n	800ff44 <_printf_i+0xbc>
 800ff64:	680b      	ldr	r3, [r1, #0]
 800ff66:	6825      	ldr	r5, [r4, #0]
 800ff68:	1d18      	adds	r0, r3, #4
 800ff6a:	6008      	str	r0, [r1, #0]
 800ff6c:	0628      	lsls	r0, r5, #24
 800ff6e:	d501      	bpl.n	800ff74 <_printf_i+0xec>
 800ff70:	681d      	ldr	r5, [r3, #0]
 800ff72:	e002      	b.n	800ff7a <_printf_i+0xf2>
 800ff74:	0669      	lsls	r1, r5, #25
 800ff76:	d5fb      	bpl.n	800ff70 <_printf_i+0xe8>
 800ff78:	881d      	ldrh	r5, [r3, #0]
 800ff7a:	4854      	ldr	r0, [pc, #336]	; (80100cc <_printf_i+0x244>)
 800ff7c:	2f6f      	cmp	r7, #111	; 0x6f
 800ff7e:	bf0c      	ite	eq
 800ff80:	2308      	moveq	r3, #8
 800ff82:	230a      	movne	r3, #10
 800ff84:	2100      	movs	r1, #0
 800ff86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ff8a:	6866      	ldr	r6, [r4, #4]
 800ff8c:	60a6      	str	r6, [r4, #8]
 800ff8e:	2e00      	cmp	r6, #0
 800ff90:	bfa2      	ittt	ge
 800ff92:	6821      	ldrge	r1, [r4, #0]
 800ff94:	f021 0104 	bicge.w	r1, r1, #4
 800ff98:	6021      	strge	r1, [r4, #0]
 800ff9a:	b90d      	cbnz	r5, 800ffa0 <_printf_i+0x118>
 800ff9c:	2e00      	cmp	r6, #0
 800ff9e:	d04d      	beq.n	801003c <_printf_i+0x1b4>
 800ffa0:	4616      	mov	r6, r2
 800ffa2:	fbb5 f1f3 	udiv	r1, r5, r3
 800ffa6:	fb03 5711 	mls	r7, r3, r1, r5
 800ffaa:	5dc7      	ldrb	r7, [r0, r7]
 800ffac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ffb0:	462f      	mov	r7, r5
 800ffb2:	42bb      	cmp	r3, r7
 800ffb4:	460d      	mov	r5, r1
 800ffb6:	d9f4      	bls.n	800ffa2 <_printf_i+0x11a>
 800ffb8:	2b08      	cmp	r3, #8
 800ffba:	d10b      	bne.n	800ffd4 <_printf_i+0x14c>
 800ffbc:	6823      	ldr	r3, [r4, #0]
 800ffbe:	07df      	lsls	r7, r3, #31
 800ffc0:	d508      	bpl.n	800ffd4 <_printf_i+0x14c>
 800ffc2:	6923      	ldr	r3, [r4, #16]
 800ffc4:	6861      	ldr	r1, [r4, #4]
 800ffc6:	4299      	cmp	r1, r3
 800ffc8:	bfde      	ittt	le
 800ffca:	2330      	movle	r3, #48	; 0x30
 800ffcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ffd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ffd4:	1b92      	subs	r2, r2, r6
 800ffd6:	6122      	str	r2, [r4, #16]
 800ffd8:	f8cd a000 	str.w	sl, [sp]
 800ffdc:	464b      	mov	r3, r9
 800ffde:	aa03      	add	r2, sp, #12
 800ffe0:	4621      	mov	r1, r4
 800ffe2:	4640      	mov	r0, r8
 800ffe4:	f7ff fee2 	bl	800fdac <_printf_common>
 800ffe8:	3001      	adds	r0, #1
 800ffea:	d14c      	bne.n	8010086 <_printf_i+0x1fe>
 800ffec:	f04f 30ff 	mov.w	r0, #4294967295
 800fff0:	b004      	add	sp, #16
 800fff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fff6:	4835      	ldr	r0, [pc, #212]	; (80100cc <_printf_i+0x244>)
 800fff8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fffc:	6823      	ldr	r3, [r4, #0]
 800fffe:	680e      	ldr	r6, [r1, #0]
 8010000:	061f      	lsls	r7, r3, #24
 8010002:	f856 5b04 	ldr.w	r5, [r6], #4
 8010006:	600e      	str	r6, [r1, #0]
 8010008:	d514      	bpl.n	8010034 <_printf_i+0x1ac>
 801000a:	07d9      	lsls	r1, r3, #31
 801000c:	bf44      	itt	mi
 801000e:	f043 0320 	orrmi.w	r3, r3, #32
 8010012:	6023      	strmi	r3, [r4, #0]
 8010014:	b91d      	cbnz	r5, 801001e <_printf_i+0x196>
 8010016:	6823      	ldr	r3, [r4, #0]
 8010018:	f023 0320 	bic.w	r3, r3, #32
 801001c:	6023      	str	r3, [r4, #0]
 801001e:	2310      	movs	r3, #16
 8010020:	e7b0      	b.n	800ff84 <_printf_i+0xfc>
 8010022:	6823      	ldr	r3, [r4, #0]
 8010024:	f043 0320 	orr.w	r3, r3, #32
 8010028:	6023      	str	r3, [r4, #0]
 801002a:	2378      	movs	r3, #120	; 0x78
 801002c:	4828      	ldr	r0, [pc, #160]	; (80100d0 <_printf_i+0x248>)
 801002e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010032:	e7e3      	b.n	800fffc <_printf_i+0x174>
 8010034:	065e      	lsls	r6, r3, #25
 8010036:	bf48      	it	mi
 8010038:	b2ad      	uxthmi	r5, r5
 801003a:	e7e6      	b.n	801000a <_printf_i+0x182>
 801003c:	4616      	mov	r6, r2
 801003e:	e7bb      	b.n	800ffb8 <_printf_i+0x130>
 8010040:	680b      	ldr	r3, [r1, #0]
 8010042:	6826      	ldr	r6, [r4, #0]
 8010044:	6960      	ldr	r0, [r4, #20]
 8010046:	1d1d      	adds	r5, r3, #4
 8010048:	600d      	str	r5, [r1, #0]
 801004a:	0635      	lsls	r5, r6, #24
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	d501      	bpl.n	8010054 <_printf_i+0x1cc>
 8010050:	6018      	str	r0, [r3, #0]
 8010052:	e002      	b.n	801005a <_printf_i+0x1d2>
 8010054:	0671      	lsls	r1, r6, #25
 8010056:	d5fb      	bpl.n	8010050 <_printf_i+0x1c8>
 8010058:	8018      	strh	r0, [r3, #0]
 801005a:	2300      	movs	r3, #0
 801005c:	6123      	str	r3, [r4, #16]
 801005e:	4616      	mov	r6, r2
 8010060:	e7ba      	b.n	800ffd8 <_printf_i+0x150>
 8010062:	680b      	ldr	r3, [r1, #0]
 8010064:	1d1a      	adds	r2, r3, #4
 8010066:	600a      	str	r2, [r1, #0]
 8010068:	681e      	ldr	r6, [r3, #0]
 801006a:	6862      	ldr	r2, [r4, #4]
 801006c:	2100      	movs	r1, #0
 801006e:	4630      	mov	r0, r6
 8010070:	f7f0 f8c6 	bl	8000200 <memchr>
 8010074:	b108      	cbz	r0, 801007a <_printf_i+0x1f2>
 8010076:	1b80      	subs	r0, r0, r6
 8010078:	6060      	str	r0, [r4, #4]
 801007a:	6863      	ldr	r3, [r4, #4]
 801007c:	6123      	str	r3, [r4, #16]
 801007e:	2300      	movs	r3, #0
 8010080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010084:	e7a8      	b.n	800ffd8 <_printf_i+0x150>
 8010086:	6923      	ldr	r3, [r4, #16]
 8010088:	4632      	mov	r2, r6
 801008a:	4649      	mov	r1, r9
 801008c:	4640      	mov	r0, r8
 801008e:	47d0      	blx	sl
 8010090:	3001      	adds	r0, #1
 8010092:	d0ab      	beq.n	800ffec <_printf_i+0x164>
 8010094:	6823      	ldr	r3, [r4, #0]
 8010096:	079b      	lsls	r3, r3, #30
 8010098:	d413      	bmi.n	80100c2 <_printf_i+0x23a>
 801009a:	68e0      	ldr	r0, [r4, #12]
 801009c:	9b03      	ldr	r3, [sp, #12]
 801009e:	4298      	cmp	r0, r3
 80100a0:	bfb8      	it	lt
 80100a2:	4618      	movlt	r0, r3
 80100a4:	e7a4      	b.n	800fff0 <_printf_i+0x168>
 80100a6:	2301      	movs	r3, #1
 80100a8:	4632      	mov	r2, r6
 80100aa:	4649      	mov	r1, r9
 80100ac:	4640      	mov	r0, r8
 80100ae:	47d0      	blx	sl
 80100b0:	3001      	adds	r0, #1
 80100b2:	d09b      	beq.n	800ffec <_printf_i+0x164>
 80100b4:	3501      	adds	r5, #1
 80100b6:	68e3      	ldr	r3, [r4, #12]
 80100b8:	9903      	ldr	r1, [sp, #12]
 80100ba:	1a5b      	subs	r3, r3, r1
 80100bc:	42ab      	cmp	r3, r5
 80100be:	dcf2      	bgt.n	80100a6 <_printf_i+0x21e>
 80100c0:	e7eb      	b.n	801009a <_printf_i+0x212>
 80100c2:	2500      	movs	r5, #0
 80100c4:	f104 0619 	add.w	r6, r4, #25
 80100c8:	e7f5      	b.n	80100b6 <_printf_i+0x22e>
 80100ca:	bf00      	nop
 80100cc:	08013007 	.word	0x08013007
 80100d0:	08013018 	.word	0x08013018

080100d4 <__swbuf_r>:
 80100d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100d6:	460e      	mov	r6, r1
 80100d8:	4614      	mov	r4, r2
 80100da:	4605      	mov	r5, r0
 80100dc:	b118      	cbz	r0, 80100e6 <__swbuf_r+0x12>
 80100de:	6983      	ldr	r3, [r0, #24]
 80100e0:	b90b      	cbnz	r3, 80100e6 <__swbuf_r+0x12>
 80100e2:	f000 f9d9 	bl	8010498 <__sinit>
 80100e6:	4b21      	ldr	r3, [pc, #132]	; (801016c <__swbuf_r+0x98>)
 80100e8:	429c      	cmp	r4, r3
 80100ea:	d12b      	bne.n	8010144 <__swbuf_r+0x70>
 80100ec:	686c      	ldr	r4, [r5, #4]
 80100ee:	69a3      	ldr	r3, [r4, #24]
 80100f0:	60a3      	str	r3, [r4, #8]
 80100f2:	89a3      	ldrh	r3, [r4, #12]
 80100f4:	071a      	lsls	r2, r3, #28
 80100f6:	d52f      	bpl.n	8010158 <__swbuf_r+0x84>
 80100f8:	6923      	ldr	r3, [r4, #16]
 80100fa:	b36b      	cbz	r3, 8010158 <__swbuf_r+0x84>
 80100fc:	6923      	ldr	r3, [r4, #16]
 80100fe:	6820      	ldr	r0, [r4, #0]
 8010100:	1ac0      	subs	r0, r0, r3
 8010102:	6963      	ldr	r3, [r4, #20]
 8010104:	b2f6      	uxtb	r6, r6
 8010106:	4283      	cmp	r3, r0
 8010108:	4637      	mov	r7, r6
 801010a:	dc04      	bgt.n	8010116 <__swbuf_r+0x42>
 801010c:	4621      	mov	r1, r4
 801010e:	4628      	mov	r0, r5
 8010110:	f000 f92e 	bl	8010370 <_fflush_r>
 8010114:	bb30      	cbnz	r0, 8010164 <__swbuf_r+0x90>
 8010116:	68a3      	ldr	r3, [r4, #8]
 8010118:	3b01      	subs	r3, #1
 801011a:	60a3      	str	r3, [r4, #8]
 801011c:	6823      	ldr	r3, [r4, #0]
 801011e:	1c5a      	adds	r2, r3, #1
 8010120:	6022      	str	r2, [r4, #0]
 8010122:	701e      	strb	r6, [r3, #0]
 8010124:	6963      	ldr	r3, [r4, #20]
 8010126:	3001      	adds	r0, #1
 8010128:	4283      	cmp	r3, r0
 801012a:	d004      	beq.n	8010136 <__swbuf_r+0x62>
 801012c:	89a3      	ldrh	r3, [r4, #12]
 801012e:	07db      	lsls	r3, r3, #31
 8010130:	d506      	bpl.n	8010140 <__swbuf_r+0x6c>
 8010132:	2e0a      	cmp	r6, #10
 8010134:	d104      	bne.n	8010140 <__swbuf_r+0x6c>
 8010136:	4621      	mov	r1, r4
 8010138:	4628      	mov	r0, r5
 801013a:	f000 f919 	bl	8010370 <_fflush_r>
 801013e:	b988      	cbnz	r0, 8010164 <__swbuf_r+0x90>
 8010140:	4638      	mov	r0, r7
 8010142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010144:	4b0a      	ldr	r3, [pc, #40]	; (8010170 <__swbuf_r+0x9c>)
 8010146:	429c      	cmp	r4, r3
 8010148:	d101      	bne.n	801014e <__swbuf_r+0x7a>
 801014a:	68ac      	ldr	r4, [r5, #8]
 801014c:	e7cf      	b.n	80100ee <__swbuf_r+0x1a>
 801014e:	4b09      	ldr	r3, [pc, #36]	; (8010174 <__swbuf_r+0xa0>)
 8010150:	429c      	cmp	r4, r3
 8010152:	bf08      	it	eq
 8010154:	68ec      	ldreq	r4, [r5, #12]
 8010156:	e7ca      	b.n	80100ee <__swbuf_r+0x1a>
 8010158:	4621      	mov	r1, r4
 801015a:	4628      	mov	r0, r5
 801015c:	f000 f80c 	bl	8010178 <__swsetup_r>
 8010160:	2800      	cmp	r0, #0
 8010162:	d0cb      	beq.n	80100fc <__swbuf_r+0x28>
 8010164:	f04f 37ff 	mov.w	r7, #4294967295
 8010168:	e7ea      	b.n	8010140 <__swbuf_r+0x6c>
 801016a:	bf00      	nop
 801016c:	0801304c 	.word	0x0801304c
 8010170:	0801306c 	.word	0x0801306c
 8010174:	0801302c 	.word	0x0801302c

08010178 <__swsetup_r>:
 8010178:	4b32      	ldr	r3, [pc, #200]	; (8010244 <__swsetup_r+0xcc>)
 801017a:	b570      	push	{r4, r5, r6, lr}
 801017c:	681d      	ldr	r5, [r3, #0]
 801017e:	4606      	mov	r6, r0
 8010180:	460c      	mov	r4, r1
 8010182:	b125      	cbz	r5, 801018e <__swsetup_r+0x16>
 8010184:	69ab      	ldr	r3, [r5, #24]
 8010186:	b913      	cbnz	r3, 801018e <__swsetup_r+0x16>
 8010188:	4628      	mov	r0, r5
 801018a:	f000 f985 	bl	8010498 <__sinit>
 801018e:	4b2e      	ldr	r3, [pc, #184]	; (8010248 <__swsetup_r+0xd0>)
 8010190:	429c      	cmp	r4, r3
 8010192:	d10f      	bne.n	80101b4 <__swsetup_r+0x3c>
 8010194:	686c      	ldr	r4, [r5, #4]
 8010196:	89a3      	ldrh	r3, [r4, #12]
 8010198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801019c:	0719      	lsls	r1, r3, #28
 801019e:	d42c      	bmi.n	80101fa <__swsetup_r+0x82>
 80101a0:	06dd      	lsls	r5, r3, #27
 80101a2:	d411      	bmi.n	80101c8 <__swsetup_r+0x50>
 80101a4:	2309      	movs	r3, #9
 80101a6:	6033      	str	r3, [r6, #0]
 80101a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80101ac:	81a3      	strh	r3, [r4, #12]
 80101ae:	f04f 30ff 	mov.w	r0, #4294967295
 80101b2:	e03e      	b.n	8010232 <__swsetup_r+0xba>
 80101b4:	4b25      	ldr	r3, [pc, #148]	; (801024c <__swsetup_r+0xd4>)
 80101b6:	429c      	cmp	r4, r3
 80101b8:	d101      	bne.n	80101be <__swsetup_r+0x46>
 80101ba:	68ac      	ldr	r4, [r5, #8]
 80101bc:	e7eb      	b.n	8010196 <__swsetup_r+0x1e>
 80101be:	4b24      	ldr	r3, [pc, #144]	; (8010250 <__swsetup_r+0xd8>)
 80101c0:	429c      	cmp	r4, r3
 80101c2:	bf08      	it	eq
 80101c4:	68ec      	ldreq	r4, [r5, #12]
 80101c6:	e7e6      	b.n	8010196 <__swsetup_r+0x1e>
 80101c8:	0758      	lsls	r0, r3, #29
 80101ca:	d512      	bpl.n	80101f2 <__swsetup_r+0x7a>
 80101cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101ce:	b141      	cbz	r1, 80101e2 <__swsetup_r+0x6a>
 80101d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101d4:	4299      	cmp	r1, r3
 80101d6:	d002      	beq.n	80101de <__swsetup_r+0x66>
 80101d8:	4630      	mov	r0, r6
 80101da:	f7fe f821 	bl	800e220 <_free_r>
 80101de:	2300      	movs	r3, #0
 80101e0:	6363      	str	r3, [r4, #52]	; 0x34
 80101e2:	89a3      	ldrh	r3, [r4, #12]
 80101e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80101e8:	81a3      	strh	r3, [r4, #12]
 80101ea:	2300      	movs	r3, #0
 80101ec:	6063      	str	r3, [r4, #4]
 80101ee:	6923      	ldr	r3, [r4, #16]
 80101f0:	6023      	str	r3, [r4, #0]
 80101f2:	89a3      	ldrh	r3, [r4, #12]
 80101f4:	f043 0308 	orr.w	r3, r3, #8
 80101f8:	81a3      	strh	r3, [r4, #12]
 80101fa:	6923      	ldr	r3, [r4, #16]
 80101fc:	b94b      	cbnz	r3, 8010212 <__swsetup_r+0x9a>
 80101fe:	89a3      	ldrh	r3, [r4, #12]
 8010200:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010208:	d003      	beq.n	8010212 <__swsetup_r+0x9a>
 801020a:	4621      	mov	r1, r4
 801020c:	4630      	mov	r0, r6
 801020e:	f000 fa05 	bl	801061c <__smakebuf_r>
 8010212:	89a0      	ldrh	r0, [r4, #12]
 8010214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010218:	f010 0301 	ands.w	r3, r0, #1
 801021c:	d00a      	beq.n	8010234 <__swsetup_r+0xbc>
 801021e:	2300      	movs	r3, #0
 8010220:	60a3      	str	r3, [r4, #8]
 8010222:	6963      	ldr	r3, [r4, #20]
 8010224:	425b      	negs	r3, r3
 8010226:	61a3      	str	r3, [r4, #24]
 8010228:	6923      	ldr	r3, [r4, #16]
 801022a:	b943      	cbnz	r3, 801023e <__swsetup_r+0xc6>
 801022c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010230:	d1ba      	bne.n	80101a8 <__swsetup_r+0x30>
 8010232:	bd70      	pop	{r4, r5, r6, pc}
 8010234:	0781      	lsls	r1, r0, #30
 8010236:	bf58      	it	pl
 8010238:	6963      	ldrpl	r3, [r4, #20]
 801023a:	60a3      	str	r3, [r4, #8]
 801023c:	e7f4      	b.n	8010228 <__swsetup_r+0xb0>
 801023e:	2000      	movs	r0, #0
 8010240:	e7f7      	b.n	8010232 <__swsetup_r+0xba>
 8010242:	bf00      	nop
 8010244:	20000038 	.word	0x20000038
 8010248:	0801304c 	.word	0x0801304c
 801024c:	0801306c 	.word	0x0801306c
 8010250:	0801302c 	.word	0x0801302c

08010254 <abort>:
 8010254:	b508      	push	{r3, lr}
 8010256:	2006      	movs	r0, #6
 8010258:	f000 fa48 	bl	80106ec <raise>
 801025c:	2001      	movs	r0, #1
 801025e:	f7f2 fba5 	bl	80029ac <_exit>
	...

08010264 <__sflush_r>:
 8010264:	898a      	ldrh	r2, [r1, #12]
 8010266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801026a:	4605      	mov	r5, r0
 801026c:	0710      	lsls	r0, r2, #28
 801026e:	460c      	mov	r4, r1
 8010270:	d458      	bmi.n	8010324 <__sflush_r+0xc0>
 8010272:	684b      	ldr	r3, [r1, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	dc05      	bgt.n	8010284 <__sflush_r+0x20>
 8010278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801027a:	2b00      	cmp	r3, #0
 801027c:	dc02      	bgt.n	8010284 <__sflush_r+0x20>
 801027e:	2000      	movs	r0, #0
 8010280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010286:	2e00      	cmp	r6, #0
 8010288:	d0f9      	beq.n	801027e <__sflush_r+0x1a>
 801028a:	2300      	movs	r3, #0
 801028c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010290:	682f      	ldr	r7, [r5, #0]
 8010292:	602b      	str	r3, [r5, #0]
 8010294:	d032      	beq.n	80102fc <__sflush_r+0x98>
 8010296:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010298:	89a3      	ldrh	r3, [r4, #12]
 801029a:	075a      	lsls	r2, r3, #29
 801029c:	d505      	bpl.n	80102aa <__sflush_r+0x46>
 801029e:	6863      	ldr	r3, [r4, #4]
 80102a0:	1ac0      	subs	r0, r0, r3
 80102a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80102a4:	b10b      	cbz	r3, 80102aa <__sflush_r+0x46>
 80102a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80102a8:	1ac0      	subs	r0, r0, r3
 80102aa:	2300      	movs	r3, #0
 80102ac:	4602      	mov	r2, r0
 80102ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102b0:	6a21      	ldr	r1, [r4, #32]
 80102b2:	4628      	mov	r0, r5
 80102b4:	47b0      	blx	r6
 80102b6:	1c43      	adds	r3, r0, #1
 80102b8:	89a3      	ldrh	r3, [r4, #12]
 80102ba:	d106      	bne.n	80102ca <__sflush_r+0x66>
 80102bc:	6829      	ldr	r1, [r5, #0]
 80102be:	291d      	cmp	r1, #29
 80102c0:	d82c      	bhi.n	801031c <__sflush_r+0xb8>
 80102c2:	4a2a      	ldr	r2, [pc, #168]	; (801036c <__sflush_r+0x108>)
 80102c4:	40ca      	lsrs	r2, r1
 80102c6:	07d6      	lsls	r6, r2, #31
 80102c8:	d528      	bpl.n	801031c <__sflush_r+0xb8>
 80102ca:	2200      	movs	r2, #0
 80102cc:	6062      	str	r2, [r4, #4]
 80102ce:	04d9      	lsls	r1, r3, #19
 80102d0:	6922      	ldr	r2, [r4, #16]
 80102d2:	6022      	str	r2, [r4, #0]
 80102d4:	d504      	bpl.n	80102e0 <__sflush_r+0x7c>
 80102d6:	1c42      	adds	r2, r0, #1
 80102d8:	d101      	bne.n	80102de <__sflush_r+0x7a>
 80102da:	682b      	ldr	r3, [r5, #0]
 80102dc:	b903      	cbnz	r3, 80102e0 <__sflush_r+0x7c>
 80102de:	6560      	str	r0, [r4, #84]	; 0x54
 80102e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102e2:	602f      	str	r7, [r5, #0]
 80102e4:	2900      	cmp	r1, #0
 80102e6:	d0ca      	beq.n	801027e <__sflush_r+0x1a>
 80102e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102ec:	4299      	cmp	r1, r3
 80102ee:	d002      	beq.n	80102f6 <__sflush_r+0x92>
 80102f0:	4628      	mov	r0, r5
 80102f2:	f7fd ff95 	bl	800e220 <_free_r>
 80102f6:	2000      	movs	r0, #0
 80102f8:	6360      	str	r0, [r4, #52]	; 0x34
 80102fa:	e7c1      	b.n	8010280 <__sflush_r+0x1c>
 80102fc:	6a21      	ldr	r1, [r4, #32]
 80102fe:	2301      	movs	r3, #1
 8010300:	4628      	mov	r0, r5
 8010302:	47b0      	blx	r6
 8010304:	1c41      	adds	r1, r0, #1
 8010306:	d1c7      	bne.n	8010298 <__sflush_r+0x34>
 8010308:	682b      	ldr	r3, [r5, #0]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d0c4      	beq.n	8010298 <__sflush_r+0x34>
 801030e:	2b1d      	cmp	r3, #29
 8010310:	d001      	beq.n	8010316 <__sflush_r+0xb2>
 8010312:	2b16      	cmp	r3, #22
 8010314:	d101      	bne.n	801031a <__sflush_r+0xb6>
 8010316:	602f      	str	r7, [r5, #0]
 8010318:	e7b1      	b.n	801027e <__sflush_r+0x1a>
 801031a:	89a3      	ldrh	r3, [r4, #12]
 801031c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010320:	81a3      	strh	r3, [r4, #12]
 8010322:	e7ad      	b.n	8010280 <__sflush_r+0x1c>
 8010324:	690f      	ldr	r7, [r1, #16]
 8010326:	2f00      	cmp	r7, #0
 8010328:	d0a9      	beq.n	801027e <__sflush_r+0x1a>
 801032a:	0793      	lsls	r3, r2, #30
 801032c:	680e      	ldr	r6, [r1, #0]
 801032e:	bf08      	it	eq
 8010330:	694b      	ldreq	r3, [r1, #20]
 8010332:	600f      	str	r7, [r1, #0]
 8010334:	bf18      	it	ne
 8010336:	2300      	movne	r3, #0
 8010338:	eba6 0807 	sub.w	r8, r6, r7
 801033c:	608b      	str	r3, [r1, #8]
 801033e:	f1b8 0f00 	cmp.w	r8, #0
 8010342:	dd9c      	ble.n	801027e <__sflush_r+0x1a>
 8010344:	6a21      	ldr	r1, [r4, #32]
 8010346:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010348:	4643      	mov	r3, r8
 801034a:	463a      	mov	r2, r7
 801034c:	4628      	mov	r0, r5
 801034e:	47b0      	blx	r6
 8010350:	2800      	cmp	r0, #0
 8010352:	dc06      	bgt.n	8010362 <__sflush_r+0xfe>
 8010354:	89a3      	ldrh	r3, [r4, #12]
 8010356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801035a:	81a3      	strh	r3, [r4, #12]
 801035c:	f04f 30ff 	mov.w	r0, #4294967295
 8010360:	e78e      	b.n	8010280 <__sflush_r+0x1c>
 8010362:	4407      	add	r7, r0
 8010364:	eba8 0800 	sub.w	r8, r8, r0
 8010368:	e7e9      	b.n	801033e <__sflush_r+0xda>
 801036a:	bf00      	nop
 801036c:	20400001 	.word	0x20400001

08010370 <_fflush_r>:
 8010370:	b538      	push	{r3, r4, r5, lr}
 8010372:	690b      	ldr	r3, [r1, #16]
 8010374:	4605      	mov	r5, r0
 8010376:	460c      	mov	r4, r1
 8010378:	b913      	cbnz	r3, 8010380 <_fflush_r+0x10>
 801037a:	2500      	movs	r5, #0
 801037c:	4628      	mov	r0, r5
 801037e:	bd38      	pop	{r3, r4, r5, pc}
 8010380:	b118      	cbz	r0, 801038a <_fflush_r+0x1a>
 8010382:	6983      	ldr	r3, [r0, #24]
 8010384:	b90b      	cbnz	r3, 801038a <_fflush_r+0x1a>
 8010386:	f000 f887 	bl	8010498 <__sinit>
 801038a:	4b14      	ldr	r3, [pc, #80]	; (80103dc <_fflush_r+0x6c>)
 801038c:	429c      	cmp	r4, r3
 801038e:	d11b      	bne.n	80103c8 <_fflush_r+0x58>
 8010390:	686c      	ldr	r4, [r5, #4]
 8010392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d0ef      	beq.n	801037a <_fflush_r+0xa>
 801039a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801039c:	07d0      	lsls	r0, r2, #31
 801039e:	d404      	bmi.n	80103aa <_fflush_r+0x3a>
 80103a0:	0599      	lsls	r1, r3, #22
 80103a2:	d402      	bmi.n	80103aa <_fflush_r+0x3a>
 80103a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103a6:	f7ff fba6 	bl	800faf6 <__retarget_lock_acquire_recursive>
 80103aa:	4628      	mov	r0, r5
 80103ac:	4621      	mov	r1, r4
 80103ae:	f7ff ff59 	bl	8010264 <__sflush_r>
 80103b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80103b4:	07da      	lsls	r2, r3, #31
 80103b6:	4605      	mov	r5, r0
 80103b8:	d4e0      	bmi.n	801037c <_fflush_r+0xc>
 80103ba:	89a3      	ldrh	r3, [r4, #12]
 80103bc:	059b      	lsls	r3, r3, #22
 80103be:	d4dd      	bmi.n	801037c <_fflush_r+0xc>
 80103c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103c2:	f7ff fb99 	bl	800faf8 <__retarget_lock_release_recursive>
 80103c6:	e7d9      	b.n	801037c <_fflush_r+0xc>
 80103c8:	4b05      	ldr	r3, [pc, #20]	; (80103e0 <_fflush_r+0x70>)
 80103ca:	429c      	cmp	r4, r3
 80103cc:	d101      	bne.n	80103d2 <_fflush_r+0x62>
 80103ce:	68ac      	ldr	r4, [r5, #8]
 80103d0:	e7df      	b.n	8010392 <_fflush_r+0x22>
 80103d2:	4b04      	ldr	r3, [pc, #16]	; (80103e4 <_fflush_r+0x74>)
 80103d4:	429c      	cmp	r4, r3
 80103d6:	bf08      	it	eq
 80103d8:	68ec      	ldreq	r4, [r5, #12]
 80103da:	e7da      	b.n	8010392 <_fflush_r+0x22>
 80103dc:	0801304c 	.word	0x0801304c
 80103e0:	0801306c 	.word	0x0801306c
 80103e4:	0801302c 	.word	0x0801302c

080103e8 <std>:
 80103e8:	2300      	movs	r3, #0
 80103ea:	b510      	push	{r4, lr}
 80103ec:	4604      	mov	r4, r0
 80103ee:	e9c0 3300 	strd	r3, r3, [r0]
 80103f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80103f6:	6083      	str	r3, [r0, #8]
 80103f8:	8181      	strh	r1, [r0, #12]
 80103fa:	6643      	str	r3, [r0, #100]	; 0x64
 80103fc:	81c2      	strh	r2, [r0, #14]
 80103fe:	6183      	str	r3, [r0, #24]
 8010400:	4619      	mov	r1, r3
 8010402:	2208      	movs	r2, #8
 8010404:	305c      	adds	r0, #92	; 0x5c
 8010406:	f7fd ff03 	bl	800e210 <memset>
 801040a:	4b05      	ldr	r3, [pc, #20]	; (8010420 <std+0x38>)
 801040c:	6263      	str	r3, [r4, #36]	; 0x24
 801040e:	4b05      	ldr	r3, [pc, #20]	; (8010424 <std+0x3c>)
 8010410:	62a3      	str	r3, [r4, #40]	; 0x28
 8010412:	4b05      	ldr	r3, [pc, #20]	; (8010428 <std+0x40>)
 8010414:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010416:	4b05      	ldr	r3, [pc, #20]	; (801042c <std+0x44>)
 8010418:	6224      	str	r4, [r4, #32]
 801041a:	6323      	str	r3, [r4, #48]	; 0x30
 801041c:	bd10      	pop	{r4, pc}
 801041e:	bf00      	nop
 8010420:	08010725 	.word	0x08010725
 8010424:	08010747 	.word	0x08010747
 8010428:	0801077f 	.word	0x0801077f
 801042c:	080107a3 	.word	0x080107a3

08010430 <_cleanup_r>:
 8010430:	4901      	ldr	r1, [pc, #4]	; (8010438 <_cleanup_r+0x8>)
 8010432:	f000 b8af 	b.w	8010594 <_fwalk_reent>
 8010436:	bf00      	nop
 8010438:	08010371 	.word	0x08010371

0801043c <__sfmoreglue>:
 801043c:	b570      	push	{r4, r5, r6, lr}
 801043e:	1e4a      	subs	r2, r1, #1
 8010440:	2568      	movs	r5, #104	; 0x68
 8010442:	4355      	muls	r5, r2
 8010444:	460e      	mov	r6, r1
 8010446:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801044a:	f7fd ff39 	bl	800e2c0 <_malloc_r>
 801044e:	4604      	mov	r4, r0
 8010450:	b140      	cbz	r0, 8010464 <__sfmoreglue+0x28>
 8010452:	2100      	movs	r1, #0
 8010454:	e9c0 1600 	strd	r1, r6, [r0]
 8010458:	300c      	adds	r0, #12
 801045a:	60a0      	str	r0, [r4, #8]
 801045c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010460:	f7fd fed6 	bl	800e210 <memset>
 8010464:	4620      	mov	r0, r4
 8010466:	bd70      	pop	{r4, r5, r6, pc}

08010468 <__sfp_lock_acquire>:
 8010468:	4801      	ldr	r0, [pc, #4]	; (8010470 <__sfp_lock_acquire+0x8>)
 801046a:	f7ff bb44 	b.w	800faf6 <__retarget_lock_acquire_recursive>
 801046e:	bf00      	nop
 8010470:	20008bc8 	.word	0x20008bc8

08010474 <__sfp_lock_release>:
 8010474:	4801      	ldr	r0, [pc, #4]	; (801047c <__sfp_lock_release+0x8>)
 8010476:	f7ff bb3f 	b.w	800faf8 <__retarget_lock_release_recursive>
 801047a:	bf00      	nop
 801047c:	20008bc8 	.word	0x20008bc8

08010480 <__sinit_lock_acquire>:
 8010480:	4801      	ldr	r0, [pc, #4]	; (8010488 <__sinit_lock_acquire+0x8>)
 8010482:	f7ff bb38 	b.w	800faf6 <__retarget_lock_acquire_recursive>
 8010486:	bf00      	nop
 8010488:	20008bc3 	.word	0x20008bc3

0801048c <__sinit_lock_release>:
 801048c:	4801      	ldr	r0, [pc, #4]	; (8010494 <__sinit_lock_release+0x8>)
 801048e:	f7ff bb33 	b.w	800faf8 <__retarget_lock_release_recursive>
 8010492:	bf00      	nop
 8010494:	20008bc3 	.word	0x20008bc3

08010498 <__sinit>:
 8010498:	b510      	push	{r4, lr}
 801049a:	4604      	mov	r4, r0
 801049c:	f7ff fff0 	bl	8010480 <__sinit_lock_acquire>
 80104a0:	69a3      	ldr	r3, [r4, #24]
 80104a2:	b11b      	cbz	r3, 80104ac <__sinit+0x14>
 80104a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104a8:	f7ff bff0 	b.w	801048c <__sinit_lock_release>
 80104ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80104b0:	6523      	str	r3, [r4, #80]	; 0x50
 80104b2:	4b13      	ldr	r3, [pc, #76]	; (8010500 <__sinit+0x68>)
 80104b4:	4a13      	ldr	r2, [pc, #76]	; (8010504 <__sinit+0x6c>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80104ba:	42a3      	cmp	r3, r4
 80104bc:	bf04      	itt	eq
 80104be:	2301      	moveq	r3, #1
 80104c0:	61a3      	streq	r3, [r4, #24]
 80104c2:	4620      	mov	r0, r4
 80104c4:	f000 f820 	bl	8010508 <__sfp>
 80104c8:	6060      	str	r0, [r4, #4]
 80104ca:	4620      	mov	r0, r4
 80104cc:	f000 f81c 	bl	8010508 <__sfp>
 80104d0:	60a0      	str	r0, [r4, #8]
 80104d2:	4620      	mov	r0, r4
 80104d4:	f000 f818 	bl	8010508 <__sfp>
 80104d8:	2200      	movs	r2, #0
 80104da:	60e0      	str	r0, [r4, #12]
 80104dc:	2104      	movs	r1, #4
 80104de:	6860      	ldr	r0, [r4, #4]
 80104e0:	f7ff ff82 	bl	80103e8 <std>
 80104e4:	68a0      	ldr	r0, [r4, #8]
 80104e6:	2201      	movs	r2, #1
 80104e8:	2109      	movs	r1, #9
 80104ea:	f7ff ff7d 	bl	80103e8 <std>
 80104ee:	68e0      	ldr	r0, [r4, #12]
 80104f0:	2202      	movs	r2, #2
 80104f2:	2112      	movs	r1, #18
 80104f4:	f7ff ff78 	bl	80103e8 <std>
 80104f8:	2301      	movs	r3, #1
 80104fa:	61a3      	str	r3, [r4, #24]
 80104fc:	e7d2      	b.n	80104a4 <__sinit+0xc>
 80104fe:	bf00      	nop
 8010500:	08012dc4 	.word	0x08012dc4
 8010504:	08010431 	.word	0x08010431

08010508 <__sfp>:
 8010508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801050a:	4607      	mov	r7, r0
 801050c:	f7ff ffac 	bl	8010468 <__sfp_lock_acquire>
 8010510:	4b1e      	ldr	r3, [pc, #120]	; (801058c <__sfp+0x84>)
 8010512:	681e      	ldr	r6, [r3, #0]
 8010514:	69b3      	ldr	r3, [r6, #24]
 8010516:	b913      	cbnz	r3, 801051e <__sfp+0x16>
 8010518:	4630      	mov	r0, r6
 801051a:	f7ff ffbd 	bl	8010498 <__sinit>
 801051e:	3648      	adds	r6, #72	; 0x48
 8010520:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010524:	3b01      	subs	r3, #1
 8010526:	d503      	bpl.n	8010530 <__sfp+0x28>
 8010528:	6833      	ldr	r3, [r6, #0]
 801052a:	b30b      	cbz	r3, 8010570 <__sfp+0x68>
 801052c:	6836      	ldr	r6, [r6, #0]
 801052e:	e7f7      	b.n	8010520 <__sfp+0x18>
 8010530:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010534:	b9d5      	cbnz	r5, 801056c <__sfp+0x64>
 8010536:	4b16      	ldr	r3, [pc, #88]	; (8010590 <__sfp+0x88>)
 8010538:	60e3      	str	r3, [r4, #12]
 801053a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801053e:	6665      	str	r5, [r4, #100]	; 0x64
 8010540:	f7ff fad8 	bl	800faf4 <__retarget_lock_init_recursive>
 8010544:	f7ff ff96 	bl	8010474 <__sfp_lock_release>
 8010548:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801054c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010550:	6025      	str	r5, [r4, #0]
 8010552:	61a5      	str	r5, [r4, #24]
 8010554:	2208      	movs	r2, #8
 8010556:	4629      	mov	r1, r5
 8010558:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801055c:	f7fd fe58 	bl	800e210 <memset>
 8010560:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010564:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010568:	4620      	mov	r0, r4
 801056a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801056c:	3468      	adds	r4, #104	; 0x68
 801056e:	e7d9      	b.n	8010524 <__sfp+0x1c>
 8010570:	2104      	movs	r1, #4
 8010572:	4638      	mov	r0, r7
 8010574:	f7ff ff62 	bl	801043c <__sfmoreglue>
 8010578:	4604      	mov	r4, r0
 801057a:	6030      	str	r0, [r6, #0]
 801057c:	2800      	cmp	r0, #0
 801057e:	d1d5      	bne.n	801052c <__sfp+0x24>
 8010580:	f7ff ff78 	bl	8010474 <__sfp_lock_release>
 8010584:	230c      	movs	r3, #12
 8010586:	603b      	str	r3, [r7, #0]
 8010588:	e7ee      	b.n	8010568 <__sfp+0x60>
 801058a:	bf00      	nop
 801058c:	08012dc4 	.word	0x08012dc4
 8010590:	ffff0001 	.word	0xffff0001

08010594 <_fwalk_reent>:
 8010594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010598:	4606      	mov	r6, r0
 801059a:	4688      	mov	r8, r1
 801059c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80105a0:	2700      	movs	r7, #0
 80105a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80105a6:	f1b9 0901 	subs.w	r9, r9, #1
 80105aa:	d505      	bpl.n	80105b8 <_fwalk_reent+0x24>
 80105ac:	6824      	ldr	r4, [r4, #0]
 80105ae:	2c00      	cmp	r4, #0
 80105b0:	d1f7      	bne.n	80105a2 <_fwalk_reent+0xe>
 80105b2:	4638      	mov	r0, r7
 80105b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105b8:	89ab      	ldrh	r3, [r5, #12]
 80105ba:	2b01      	cmp	r3, #1
 80105bc:	d907      	bls.n	80105ce <_fwalk_reent+0x3a>
 80105be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105c2:	3301      	adds	r3, #1
 80105c4:	d003      	beq.n	80105ce <_fwalk_reent+0x3a>
 80105c6:	4629      	mov	r1, r5
 80105c8:	4630      	mov	r0, r6
 80105ca:	47c0      	blx	r8
 80105cc:	4307      	orrs	r7, r0
 80105ce:	3568      	adds	r5, #104	; 0x68
 80105d0:	e7e9      	b.n	80105a6 <_fwalk_reent+0x12>

080105d2 <__swhatbuf_r>:
 80105d2:	b570      	push	{r4, r5, r6, lr}
 80105d4:	460e      	mov	r6, r1
 80105d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105da:	2900      	cmp	r1, #0
 80105dc:	b096      	sub	sp, #88	; 0x58
 80105de:	4614      	mov	r4, r2
 80105e0:	461d      	mov	r5, r3
 80105e2:	da07      	bge.n	80105f4 <__swhatbuf_r+0x22>
 80105e4:	2300      	movs	r3, #0
 80105e6:	602b      	str	r3, [r5, #0]
 80105e8:	89b3      	ldrh	r3, [r6, #12]
 80105ea:	061a      	lsls	r2, r3, #24
 80105ec:	d410      	bmi.n	8010610 <__swhatbuf_r+0x3e>
 80105ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105f2:	e00e      	b.n	8010612 <__swhatbuf_r+0x40>
 80105f4:	466a      	mov	r2, sp
 80105f6:	f000 f8fb 	bl	80107f0 <_fstat_r>
 80105fa:	2800      	cmp	r0, #0
 80105fc:	dbf2      	blt.n	80105e4 <__swhatbuf_r+0x12>
 80105fe:	9a01      	ldr	r2, [sp, #4]
 8010600:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010604:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010608:	425a      	negs	r2, r3
 801060a:	415a      	adcs	r2, r3
 801060c:	602a      	str	r2, [r5, #0]
 801060e:	e7ee      	b.n	80105ee <__swhatbuf_r+0x1c>
 8010610:	2340      	movs	r3, #64	; 0x40
 8010612:	2000      	movs	r0, #0
 8010614:	6023      	str	r3, [r4, #0]
 8010616:	b016      	add	sp, #88	; 0x58
 8010618:	bd70      	pop	{r4, r5, r6, pc}
	...

0801061c <__smakebuf_r>:
 801061c:	898b      	ldrh	r3, [r1, #12]
 801061e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010620:	079d      	lsls	r5, r3, #30
 8010622:	4606      	mov	r6, r0
 8010624:	460c      	mov	r4, r1
 8010626:	d507      	bpl.n	8010638 <__smakebuf_r+0x1c>
 8010628:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801062c:	6023      	str	r3, [r4, #0]
 801062e:	6123      	str	r3, [r4, #16]
 8010630:	2301      	movs	r3, #1
 8010632:	6163      	str	r3, [r4, #20]
 8010634:	b002      	add	sp, #8
 8010636:	bd70      	pop	{r4, r5, r6, pc}
 8010638:	ab01      	add	r3, sp, #4
 801063a:	466a      	mov	r2, sp
 801063c:	f7ff ffc9 	bl	80105d2 <__swhatbuf_r>
 8010640:	9900      	ldr	r1, [sp, #0]
 8010642:	4605      	mov	r5, r0
 8010644:	4630      	mov	r0, r6
 8010646:	f7fd fe3b 	bl	800e2c0 <_malloc_r>
 801064a:	b948      	cbnz	r0, 8010660 <__smakebuf_r+0x44>
 801064c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010650:	059a      	lsls	r2, r3, #22
 8010652:	d4ef      	bmi.n	8010634 <__smakebuf_r+0x18>
 8010654:	f023 0303 	bic.w	r3, r3, #3
 8010658:	f043 0302 	orr.w	r3, r3, #2
 801065c:	81a3      	strh	r3, [r4, #12]
 801065e:	e7e3      	b.n	8010628 <__smakebuf_r+0xc>
 8010660:	4b0d      	ldr	r3, [pc, #52]	; (8010698 <__smakebuf_r+0x7c>)
 8010662:	62b3      	str	r3, [r6, #40]	; 0x28
 8010664:	89a3      	ldrh	r3, [r4, #12]
 8010666:	6020      	str	r0, [r4, #0]
 8010668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801066c:	81a3      	strh	r3, [r4, #12]
 801066e:	9b00      	ldr	r3, [sp, #0]
 8010670:	6163      	str	r3, [r4, #20]
 8010672:	9b01      	ldr	r3, [sp, #4]
 8010674:	6120      	str	r0, [r4, #16]
 8010676:	b15b      	cbz	r3, 8010690 <__smakebuf_r+0x74>
 8010678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801067c:	4630      	mov	r0, r6
 801067e:	f000 f8c9 	bl	8010814 <_isatty_r>
 8010682:	b128      	cbz	r0, 8010690 <__smakebuf_r+0x74>
 8010684:	89a3      	ldrh	r3, [r4, #12]
 8010686:	f023 0303 	bic.w	r3, r3, #3
 801068a:	f043 0301 	orr.w	r3, r3, #1
 801068e:	81a3      	strh	r3, [r4, #12]
 8010690:	89a0      	ldrh	r0, [r4, #12]
 8010692:	4305      	orrs	r5, r0
 8010694:	81a5      	strh	r5, [r4, #12]
 8010696:	e7cd      	b.n	8010634 <__smakebuf_r+0x18>
 8010698:	08010431 	.word	0x08010431

0801069c <_raise_r>:
 801069c:	291f      	cmp	r1, #31
 801069e:	b538      	push	{r3, r4, r5, lr}
 80106a0:	4604      	mov	r4, r0
 80106a2:	460d      	mov	r5, r1
 80106a4:	d904      	bls.n	80106b0 <_raise_r+0x14>
 80106a6:	2316      	movs	r3, #22
 80106a8:	6003      	str	r3, [r0, #0]
 80106aa:	f04f 30ff 	mov.w	r0, #4294967295
 80106ae:	bd38      	pop	{r3, r4, r5, pc}
 80106b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80106b2:	b112      	cbz	r2, 80106ba <_raise_r+0x1e>
 80106b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106b8:	b94b      	cbnz	r3, 80106ce <_raise_r+0x32>
 80106ba:	4620      	mov	r0, r4
 80106bc:	f000 f830 	bl	8010720 <_getpid_r>
 80106c0:	462a      	mov	r2, r5
 80106c2:	4601      	mov	r1, r0
 80106c4:	4620      	mov	r0, r4
 80106c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106ca:	f000 b817 	b.w	80106fc <_kill_r>
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	d00a      	beq.n	80106e8 <_raise_r+0x4c>
 80106d2:	1c59      	adds	r1, r3, #1
 80106d4:	d103      	bne.n	80106de <_raise_r+0x42>
 80106d6:	2316      	movs	r3, #22
 80106d8:	6003      	str	r3, [r0, #0]
 80106da:	2001      	movs	r0, #1
 80106dc:	e7e7      	b.n	80106ae <_raise_r+0x12>
 80106de:	2400      	movs	r4, #0
 80106e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80106e4:	4628      	mov	r0, r5
 80106e6:	4798      	blx	r3
 80106e8:	2000      	movs	r0, #0
 80106ea:	e7e0      	b.n	80106ae <_raise_r+0x12>

080106ec <raise>:
 80106ec:	4b02      	ldr	r3, [pc, #8]	; (80106f8 <raise+0xc>)
 80106ee:	4601      	mov	r1, r0
 80106f0:	6818      	ldr	r0, [r3, #0]
 80106f2:	f7ff bfd3 	b.w	801069c <_raise_r>
 80106f6:	bf00      	nop
 80106f8:	20000038 	.word	0x20000038

080106fc <_kill_r>:
 80106fc:	b538      	push	{r3, r4, r5, lr}
 80106fe:	4d07      	ldr	r5, [pc, #28]	; (801071c <_kill_r+0x20>)
 8010700:	2300      	movs	r3, #0
 8010702:	4604      	mov	r4, r0
 8010704:	4608      	mov	r0, r1
 8010706:	4611      	mov	r1, r2
 8010708:	602b      	str	r3, [r5, #0]
 801070a:	f7f2 f93f 	bl	800298c <_kill>
 801070e:	1c43      	adds	r3, r0, #1
 8010710:	d102      	bne.n	8010718 <_kill_r+0x1c>
 8010712:	682b      	ldr	r3, [r5, #0]
 8010714:	b103      	cbz	r3, 8010718 <_kill_r+0x1c>
 8010716:	6023      	str	r3, [r4, #0]
 8010718:	bd38      	pop	{r3, r4, r5, pc}
 801071a:	bf00      	nop
 801071c:	20008bbc 	.word	0x20008bbc

08010720 <_getpid_r>:
 8010720:	f7f2 b92c 	b.w	800297c <_getpid>

08010724 <__sread>:
 8010724:	b510      	push	{r4, lr}
 8010726:	460c      	mov	r4, r1
 8010728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801072c:	f000 f894 	bl	8010858 <_read_r>
 8010730:	2800      	cmp	r0, #0
 8010732:	bfab      	itete	ge
 8010734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010736:	89a3      	ldrhlt	r3, [r4, #12]
 8010738:	181b      	addge	r3, r3, r0
 801073a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801073e:	bfac      	ite	ge
 8010740:	6563      	strge	r3, [r4, #84]	; 0x54
 8010742:	81a3      	strhlt	r3, [r4, #12]
 8010744:	bd10      	pop	{r4, pc}

08010746 <__swrite>:
 8010746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801074a:	461f      	mov	r7, r3
 801074c:	898b      	ldrh	r3, [r1, #12]
 801074e:	05db      	lsls	r3, r3, #23
 8010750:	4605      	mov	r5, r0
 8010752:	460c      	mov	r4, r1
 8010754:	4616      	mov	r6, r2
 8010756:	d505      	bpl.n	8010764 <__swrite+0x1e>
 8010758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801075c:	2302      	movs	r3, #2
 801075e:	2200      	movs	r2, #0
 8010760:	f000 f868 	bl	8010834 <_lseek_r>
 8010764:	89a3      	ldrh	r3, [r4, #12]
 8010766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801076a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801076e:	81a3      	strh	r3, [r4, #12]
 8010770:	4632      	mov	r2, r6
 8010772:	463b      	mov	r3, r7
 8010774:	4628      	mov	r0, r5
 8010776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801077a:	f000 b817 	b.w	80107ac <_write_r>

0801077e <__sseek>:
 801077e:	b510      	push	{r4, lr}
 8010780:	460c      	mov	r4, r1
 8010782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010786:	f000 f855 	bl	8010834 <_lseek_r>
 801078a:	1c43      	adds	r3, r0, #1
 801078c:	89a3      	ldrh	r3, [r4, #12]
 801078e:	bf15      	itete	ne
 8010790:	6560      	strne	r0, [r4, #84]	; 0x54
 8010792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801079a:	81a3      	strheq	r3, [r4, #12]
 801079c:	bf18      	it	ne
 801079e:	81a3      	strhne	r3, [r4, #12]
 80107a0:	bd10      	pop	{r4, pc}

080107a2 <__sclose>:
 80107a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107a6:	f000 b813 	b.w	80107d0 <_close_r>
	...

080107ac <_write_r>:
 80107ac:	b538      	push	{r3, r4, r5, lr}
 80107ae:	4d07      	ldr	r5, [pc, #28]	; (80107cc <_write_r+0x20>)
 80107b0:	4604      	mov	r4, r0
 80107b2:	4608      	mov	r0, r1
 80107b4:	4611      	mov	r1, r2
 80107b6:	2200      	movs	r2, #0
 80107b8:	602a      	str	r2, [r5, #0]
 80107ba:	461a      	mov	r2, r3
 80107bc:	f7f2 f91d 	bl	80029fa <_write>
 80107c0:	1c43      	adds	r3, r0, #1
 80107c2:	d102      	bne.n	80107ca <_write_r+0x1e>
 80107c4:	682b      	ldr	r3, [r5, #0]
 80107c6:	b103      	cbz	r3, 80107ca <_write_r+0x1e>
 80107c8:	6023      	str	r3, [r4, #0]
 80107ca:	bd38      	pop	{r3, r4, r5, pc}
 80107cc:	20008bbc 	.word	0x20008bbc

080107d0 <_close_r>:
 80107d0:	b538      	push	{r3, r4, r5, lr}
 80107d2:	4d06      	ldr	r5, [pc, #24]	; (80107ec <_close_r+0x1c>)
 80107d4:	2300      	movs	r3, #0
 80107d6:	4604      	mov	r4, r0
 80107d8:	4608      	mov	r0, r1
 80107da:	602b      	str	r3, [r5, #0]
 80107dc:	f7f2 f929 	bl	8002a32 <_close>
 80107e0:	1c43      	adds	r3, r0, #1
 80107e2:	d102      	bne.n	80107ea <_close_r+0x1a>
 80107e4:	682b      	ldr	r3, [r5, #0]
 80107e6:	b103      	cbz	r3, 80107ea <_close_r+0x1a>
 80107e8:	6023      	str	r3, [r4, #0]
 80107ea:	bd38      	pop	{r3, r4, r5, pc}
 80107ec:	20008bbc 	.word	0x20008bbc

080107f0 <_fstat_r>:
 80107f0:	b538      	push	{r3, r4, r5, lr}
 80107f2:	4d07      	ldr	r5, [pc, #28]	; (8010810 <_fstat_r+0x20>)
 80107f4:	2300      	movs	r3, #0
 80107f6:	4604      	mov	r4, r0
 80107f8:	4608      	mov	r0, r1
 80107fa:	4611      	mov	r1, r2
 80107fc:	602b      	str	r3, [r5, #0]
 80107fe:	f7f2 f924 	bl	8002a4a <_fstat>
 8010802:	1c43      	adds	r3, r0, #1
 8010804:	d102      	bne.n	801080c <_fstat_r+0x1c>
 8010806:	682b      	ldr	r3, [r5, #0]
 8010808:	b103      	cbz	r3, 801080c <_fstat_r+0x1c>
 801080a:	6023      	str	r3, [r4, #0]
 801080c:	bd38      	pop	{r3, r4, r5, pc}
 801080e:	bf00      	nop
 8010810:	20008bbc 	.word	0x20008bbc

08010814 <_isatty_r>:
 8010814:	b538      	push	{r3, r4, r5, lr}
 8010816:	4d06      	ldr	r5, [pc, #24]	; (8010830 <_isatty_r+0x1c>)
 8010818:	2300      	movs	r3, #0
 801081a:	4604      	mov	r4, r0
 801081c:	4608      	mov	r0, r1
 801081e:	602b      	str	r3, [r5, #0]
 8010820:	f7f2 f923 	bl	8002a6a <_isatty>
 8010824:	1c43      	adds	r3, r0, #1
 8010826:	d102      	bne.n	801082e <_isatty_r+0x1a>
 8010828:	682b      	ldr	r3, [r5, #0]
 801082a:	b103      	cbz	r3, 801082e <_isatty_r+0x1a>
 801082c:	6023      	str	r3, [r4, #0]
 801082e:	bd38      	pop	{r3, r4, r5, pc}
 8010830:	20008bbc 	.word	0x20008bbc

08010834 <_lseek_r>:
 8010834:	b538      	push	{r3, r4, r5, lr}
 8010836:	4d07      	ldr	r5, [pc, #28]	; (8010854 <_lseek_r+0x20>)
 8010838:	4604      	mov	r4, r0
 801083a:	4608      	mov	r0, r1
 801083c:	4611      	mov	r1, r2
 801083e:	2200      	movs	r2, #0
 8010840:	602a      	str	r2, [r5, #0]
 8010842:	461a      	mov	r2, r3
 8010844:	f7f2 f91c 	bl	8002a80 <_lseek>
 8010848:	1c43      	adds	r3, r0, #1
 801084a:	d102      	bne.n	8010852 <_lseek_r+0x1e>
 801084c:	682b      	ldr	r3, [r5, #0]
 801084e:	b103      	cbz	r3, 8010852 <_lseek_r+0x1e>
 8010850:	6023      	str	r3, [r4, #0]
 8010852:	bd38      	pop	{r3, r4, r5, pc}
 8010854:	20008bbc 	.word	0x20008bbc

08010858 <_read_r>:
 8010858:	b538      	push	{r3, r4, r5, lr}
 801085a:	4d07      	ldr	r5, [pc, #28]	; (8010878 <_read_r+0x20>)
 801085c:	4604      	mov	r4, r0
 801085e:	4608      	mov	r0, r1
 8010860:	4611      	mov	r1, r2
 8010862:	2200      	movs	r2, #0
 8010864:	602a      	str	r2, [r5, #0]
 8010866:	461a      	mov	r2, r3
 8010868:	f7f2 f8aa 	bl	80029c0 <_read>
 801086c:	1c43      	adds	r3, r0, #1
 801086e:	d102      	bne.n	8010876 <_read_r+0x1e>
 8010870:	682b      	ldr	r3, [r5, #0]
 8010872:	b103      	cbz	r3, 8010876 <_read_r+0x1e>
 8010874:	6023      	str	r3, [r4, #0]
 8010876:	bd38      	pop	{r3, r4, r5, pc}
 8010878:	20008bbc 	.word	0x20008bbc
 801087c:	00000000 	.word	0x00000000

08010880 <cos>:
 8010880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010882:	ec53 2b10 	vmov	r2, r3, d0
 8010886:	4824      	ldr	r0, [pc, #144]	; (8010918 <cos+0x98>)
 8010888:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801088c:	4281      	cmp	r1, r0
 801088e:	dc06      	bgt.n	801089e <cos+0x1e>
 8010890:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8010910 <cos+0x90>
 8010894:	f001 fa2c 	bl	8011cf0 <__kernel_cos>
 8010898:	ec51 0b10 	vmov	r0, r1, d0
 801089c:	e007      	b.n	80108ae <cos+0x2e>
 801089e:	481f      	ldr	r0, [pc, #124]	; (801091c <cos+0x9c>)
 80108a0:	4281      	cmp	r1, r0
 80108a2:	dd09      	ble.n	80108b8 <cos+0x38>
 80108a4:	ee10 0a10 	vmov	r0, s0
 80108a8:	4619      	mov	r1, r3
 80108aa:	f7ef fcfd 	bl	80002a8 <__aeabi_dsub>
 80108ae:	ec41 0b10 	vmov	d0, r0, r1
 80108b2:	b005      	add	sp, #20
 80108b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80108b8:	4668      	mov	r0, sp
 80108ba:	f000 ff59 	bl	8011770 <__ieee754_rem_pio2>
 80108be:	f000 0003 	and.w	r0, r0, #3
 80108c2:	2801      	cmp	r0, #1
 80108c4:	d007      	beq.n	80108d6 <cos+0x56>
 80108c6:	2802      	cmp	r0, #2
 80108c8:	d012      	beq.n	80108f0 <cos+0x70>
 80108ca:	b9c0      	cbnz	r0, 80108fe <cos+0x7e>
 80108cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108d0:	ed9d 0b00 	vldr	d0, [sp]
 80108d4:	e7de      	b.n	8010894 <cos+0x14>
 80108d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108da:	ed9d 0b00 	vldr	d0, [sp]
 80108de:	f001 fe0f 	bl	8012500 <__kernel_sin>
 80108e2:	ec53 2b10 	vmov	r2, r3, d0
 80108e6:	ee10 0a10 	vmov	r0, s0
 80108ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80108ee:	e7de      	b.n	80108ae <cos+0x2e>
 80108f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108f4:	ed9d 0b00 	vldr	d0, [sp]
 80108f8:	f001 f9fa 	bl	8011cf0 <__kernel_cos>
 80108fc:	e7f1      	b.n	80108e2 <cos+0x62>
 80108fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010902:	ed9d 0b00 	vldr	d0, [sp]
 8010906:	2001      	movs	r0, #1
 8010908:	f001 fdfa 	bl	8012500 <__kernel_sin>
 801090c:	e7c4      	b.n	8010898 <cos+0x18>
 801090e:	bf00      	nop
	...
 8010918:	3fe921fb 	.word	0x3fe921fb
 801091c:	7fefffff 	.word	0x7fefffff

08010920 <sin>:
 8010920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010922:	ec53 2b10 	vmov	r2, r3, d0
 8010926:	4826      	ldr	r0, [pc, #152]	; (80109c0 <sin+0xa0>)
 8010928:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801092c:	4281      	cmp	r1, r0
 801092e:	dc07      	bgt.n	8010940 <sin+0x20>
 8010930:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80109b8 <sin+0x98>
 8010934:	2000      	movs	r0, #0
 8010936:	f001 fde3 	bl	8012500 <__kernel_sin>
 801093a:	ec51 0b10 	vmov	r0, r1, d0
 801093e:	e007      	b.n	8010950 <sin+0x30>
 8010940:	4820      	ldr	r0, [pc, #128]	; (80109c4 <sin+0xa4>)
 8010942:	4281      	cmp	r1, r0
 8010944:	dd09      	ble.n	801095a <sin+0x3a>
 8010946:	ee10 0a10 	vmov	r0, s0
 801094a:	4619      	mov	r1, r3
 801094c:	f7ef fcac 	bl	80002a8 <__aeabi_dsub>
 8010950:	ec41 0b10 	vmov	d0, r0, r1
 8010954:	b005      	add	sp, #20
 8010956:	f85d fb04 	ldr.w	pc, [sp], #4
 801095a:	4668      	mov	r0, sp
 801095c:	f000 ff08 	bl	8011770 <__ieee754_rem_pio2>
 8010960:	f000 0003 	and.w	r0, r0, #3
 8010964:	2801      	cmp	r0, #1
 8010966:	d008      	beq.n	801097a <sin+0x5a>
 8010968:	2802      	cmp	r0, #2
 801096a:	d00d      	beq.n	8010988 <sin+0x68>
 801096c:	b9d0      	cbnz	r0, 80109a4 <sin+0x84>
 801096e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010972:	ed9d 0b00 	vldr	d0, [sp]
 8010976:	2001      	movs	r0, #1
 8010978:	e7dd      	b.n	8010936 <sin+0x16>
 801097a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801097e:	ed9d 0b00 	vldr	d0, [sp]
 8010982:	f001 f9b5 	bl	8011cf0 <__kernel_cos>
 8010986:	e7d8      	b.n	801093a <sin+0x1a>
 8010988:	ed9d 1b02 	vldr	d1, [sp, #8]
 801098c:	ed9d 0b00 	vldr	d0, [sp]
 8010990:	2001      	movs	r0, #1
 8010992:	f001 fdb5 	bl	8012500 <__kernel_sin>
 8010996:	ec53 2b10 	vmov	r2, r3, d0
 801099a:	ee10 0a10 	vmov	r0, s0
 801099e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80109a2:	e7d5      	b.n	8010950 <sin+0x30>
 80109a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80109a8:	ed9d 0b00 	vldr	d0, [sp]
 80109ac:	f001 f9a0 	bl	8011cf0 <__kernel_cos>
 80109b0:	e7f1      	b.n	8010996 <sin+0x76>
 80109b2:	bf00      	nop
 80109b4:	f3af 8000 	nop.w
	...
 80109c0:	3fe921fb 	.word	0x3fe921fb
 80109c4:	7fefffff 	.word	0x7fefffff

080109c8 <atan2>:
 80109c8:	f000 b8e2 	b.w	8010b90 <__ieee754_atan2>

080109cc <pow>:
 80109cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109d0:	ec59 8b10 	vmov	r8, r9, d0
 80109d4:	ec57 6b11 	vmov	r6, r7, d1
 80109d8:	f000 f9a6 	bl	8010d28 <__ieee754_pow>
 80109dc:	4b4e      	ldr	r3, [pc, #312]	; (8010b18 <pow+0x14c>)
 80109de:	f993 3000 	ldrsb.w	r3, [r3]
 80109e2:	3301      	adds	r3, #1
 80109e4:	ec55 4b10 	vmov	r4, r5, d0
 80109e8:	d015      	beq.n	8010a16 <pow+0x4a>
 80109ea:	4632      	mov	r2, r6
 80109ec:	463b      	mov	r3, r7
 80109ee:	4630      	mov	r0, r6
 80109f0:	4639      	mov	r1, r7
 80109f2:	f7f0 f8ab 	bl	8000b4c <__aeabi_dcmpun>
 80109f6:	b970      	cbnz	r0, 8010a16 <pow+0x4a>
 80109f8:	4642      	mov	r2, r8
 80109fa:	464b      	mov	r3, r9
 80109fc:	4640      	mov	r0, r8
 80109fe:	4649      	mov	r1, r9
 8010a00:	f7f0 f8a4 	bl	8000b4c <__aeabi_dcmpun>
 8010a04:	2200      	movs	r2, #0
 8010a06:	2300      	movs	r3, #0
 8010a08:	b148      	cbz	r0, 8010a1e <pow+0x52>
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	4639      	mov	r1, r7
 8010a0e:	f7f0 f86b 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a12:	2800      	cmp	r0, #0
 8010a14:	d17d      	bne.n	8010b12 <pow+0x146>
 8010a16:	ec45 4b10 	vmov	d0, r4, r5
 8010a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a1e:	4640      	mov	r0, r8
 8010a20:	4649      	mov	r1, r9
 8010a22:	f7f0 f861 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a26:	b1e0      	cbz	r0, 8010a62 <pow+0x96>
 8010a28:	2200      	movs	r2, #0
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	4630      	mov	r0, r6
 8010a2e:	4639      	mov	r1, r7
 8010a30:	f7f0 f85a 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a34:	2800      	cmp	r0, #0
 8010a36:	d16c      	bne.n	8010b12 <pow+0x146>
 8010a38:	ec47 6b10 	vmov	d0, r6, r7
 8010a3c:	f001 ffc9 	bl	80129d2 <finite>
 8010a40:	2800      	cmp	r0, #0
 8010a42:	d0e8      	beq.n	8010a16 <pow+0x4a>
 8010a44:	2200      	movs	r2, #0
 8010a46:	2300      	movs	r3, #0
 8010a48:	4630      	mov	r0, r6
 8010a4a:	4639      	mov	r1, r7
 8010a4c:	f7f0 f856 	bl	8000afc <__aeabi_dcmplt>
 8010a50:	2800      	cmp	r0, #0
 8010a52:	d0e0      	beq.n	8010a16 <pow+0x4a>
 8010a54:	f7fd fb94 	bl	800e180 <__errno>
 8010a58:	2321      	movs	r3, #33	; 0x21
 8010a5a:	6003      	str	r3, [r0, #0]
 8010a5c:	2400      	movs	r4, #0
 8010a5e:	4d2f      	ldr	r5, [pc, #188]	; (8010b1c <pow+0x150>)
 8010a60:	e7d9      	b.n	8010a16 <pow+0x4a>
 8010a62:	ec45 4b10 	vmov	d0, r4, r5
 8010a66:	f001 ffb4 	bl	80129d2 <finite>
 8010a6a:	bbb8      	cbnz	r0, 8010adc <pow+0x110>
 8010a6c:	ec49 8b10 	vmov	d0, r8, r9
 8010a70:	f001 ffaf 	bl	80129d2 <finite>
 8010a74:	b390      	cbz	r0, 8010adc <pow+0x110>
 8010a76:	ec47 6b10 	vmov	d0, r6, r7
 8010a7a:	f001 ffaa 	bl	80129d2 <finite>
 8010a7e:	b368      	cbz	r0, 8010adc <pow+0x110>
 8010a80:	4622      	mov	r2, r4
 8010a82:	462b      	mov	r3, r5
 8010a84:	4620      	mov	r0, r4
 8010a86:	4629      	mov	r1, r5
 8010a88:	f7f0 f860 	bl	8000b4c <__aeabi_dcmpun>
 8010a8c:	b160      	cbz	r0, 8010aa8 <pow+0xdc>
 8010a8e:	f7fd fb77 	bl	800e180 <__errno>
 8010a92:	2321      	movs	r3, #33	; 0x21
 8010a94:	6003      	str	r3, [r0, #0]
 8010a96:	2200      	movs	r2, #0
 8010a98:	2300      	movs	r3, #0
 8010a9a:	4610      	mov	r0, r2
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	f7ef fee5 	bl	800086c <__aeabi_ddiv>
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	460d      	mov	r5, r1
 8010aa6:	e7b6      	b.n	8010a16 <pow+0x4a>
 8010aa8:	f7fd fb6a 	bl	800e180 <__errno>
 8010aac:	2322      	movs	r3, #34	; 0x22
 8010aae:	6003      	str	r3, [r0, #0]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	4640      	mov	r0, r8
 8010ab6:	4649      	mov	r1, r9
 8010ab8:	f7f0 f820 	bl	8000afc <__aeabi_dcmplt>
 8010abc:	2400      	movs	r4, #0
 8010abe:	b158      	cbz	r0, 8010ad8 <pow+0x10c>
 8010ac0:	ec47 6b10 	vmov	d0, r6, r7
 8010ac4:	f002 f818 	bl	8012af8 <rint>
 8010ac8:	4632      	mov	r2, r6
 8010aca:	ec51 0b10 	vmov	r0, r1, d0
 8010ace:	463b      	mov	r3, r7
 8010ad0:	f7f0 f80a 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	d0c2      	beq.n	8010a5e <pow+0x92>
 8010ad8:	4d11      	ldr	r5, [pc, #68]	; (8010b20 <pow+0x154>)
 8010ada:	e79c      	b.n	8010a16 <pow+0x4a>
 8010adc:	2200      	movs	r2, #0
 8010ade:	2300      	movs	r3, #0
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	4629      	mov	r1, r5
 8010ae4:	f7f0 f800 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ae8:	2800      	cmp	r0, #0
 8010aea:	d094      	beq.n	8010a16 <pow+0x4a>
 8010aec:	ec49 8b10 	vmov	d0, r8, r9
 8010af0:	f001 ff6f 	bl	80129d2 <finite>
 8010af4:	2800      	cmp	r0, #0
 8010af6:	d08e      	beq.n	8010a16 <pow+0x4a>
 8010af8:	ec47 6b10 	vmov	d0, r6, r7
 8010afc:	f001 ff69 	bl	80129d2 <finite>
 8010b00:	2800      	cmp	r0, #0
 8010b02:	d088      	beq.n	8010a16 <pow+0x4a>
 8010b04:	f7fd fb3c 	bl	800e180 <__errno>
 8010b08:	2322      	movs	r3, #34	; 0x22
 8010b0a:	6003      	str	r3, [r0, #0]
 8010b0c:	2400      	movs	r4, #0
 8010b0e:	2500      	movs	r5, #0
 8010b10:	e781      	b.n	8010a16 <pow+0x4a>
 8010b12:	4d04      	ldr	r5, [pc, #16]	; (8010b24 <pow+0x158>)
 8010b14:	2400      	movs	r4, #0
 8010b16:	e77e      	b.n	8010a16 <pow+0x4a>
 8010b18:	2000009c 	.word	0x2000009c
 8010b1c:	fff00000 	.word	0xfff00000
 8010b20:	7ff00000 	.word	0x7ff00000
 8010b24:	3ff00000 	.word	0x3ff00000

08010b28 <sqrt>:
 8010b28:	b538      	push	{r3, r4, r5, lr}
 8010b2a:	ed2d 8b02 	vpush	{d8}
 8010b2e:	ec55 4b10 	vmov	r4, r5, d0
 8010b32:	f001 f827 	bl	8011b84 <__ieee754_sqrt>
 8010b36:	4b15      	ldr	r3, [pc, #84]	; (8010b8c <sqrt+0x64>)
 8010b38:	eeb0 8a40 	vmov.f32	s16, s0
 8010b3c:	eef0 8a60 	vmov.f32	s17, s1
 8010b40:	f993 3000 	ldrsb.w	r3, [r3]
 8010b44:	3301      	adds	r3, #1
 8010b46:	d019      	beq.n	8010b7c <sqrt+0x54>
 8010b48:	4622      	mov	r2, r4
 8010b4a:	462b      	mov	r3, r5
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	4629      	mov	r1, r5
 8010b50:	f7ef fffc 	bl	8000b4c <__aeabi_dcmpun>
 8010b54:	b990      	cbnz	r0, 8010b7c <sqrt+0x54>
 8010b56:	2200      	movs	r2, #0
 8010b58:	2300      	movs	r3, #0
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	4629      	mov	r1, r5
 8010b5e:	f7ef ffcd 	bl	8000afc <__aeabi_dcmplt>
 8010b62:	b158      	cbz	r0, 8010b7c <sqrt+0x54>
 8010b64:	f7fd fb0c 	bl	800e180 <__errno>
 8010b68:	2321      	movs	r3, #33	; 0x21
 8010b6a:	6003      	str	r3, [r0, #0]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	2300      	movs	r3, #0
 8010b70:	4610      	mov	r0, r2
 8010b72:	4619      	mov	r1, r3
 8010b74:	f7ef fe7a 	bl	800086c <__aeabi_ddiv>
 8010b78:	ec41 0b18 	vmov	d8, r0, r1
 8010b7c:	eeb0 0a48 	vmov.f32	s0, s16
 8010b80:	eef0 0a68 	vmov.f32	s1, s17
 8010b84:	ecbd 8b02 	vpop	{d8}
 8010b88:	bd38      	pop	{r3, r4, r5, pc}
 8010b8a:	bf00      	nop
 8010b8c:	2000009c 	.word	0x2000009c

08010b90 <__ieee754_atan2>:
 8010b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b94:	ec57 6b11 	vmov	r6, r7, d1
 8010b98:	4273      	negs	r3, r6
 8010b9a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010d20 <__ieee754_atan2+0x190>
 8010b9e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010ba2:	4333      	orrs	r3, r6
 8010ba4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010ba8:	4573      	cmp	r3, lr
 8010baa:	ec51 0b10 	vmov	r0, r1, d0
 8010bae:	ee11 8a10 	vmov	r8, s2
 8010bb2:	d80a      	bhi.n	8010bca <__ieee754_atan2+0x3a>
 8010bb4:	4244      	negs	r4, r0
 8010bb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010bba:	4304      	orrs	r4, r0
 8010bbc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010bc0:	4574      	cmp	r4, lr
 8010bc2:	ee10 9a10 	vmov	r9, s0
 8010bc6:	468c      	mov	ip, r1
 8010bc8:	d907      	bls.n	8010bda <__ieee754_atan2+0x4a>
 8010bca:	4632      	mov	r2, r6
 8010bcc:	463b      	mov	r3, r7
 8010bce:	f7ef fb6d 	bl	80002ac <__adddf3>
 8010bd2:	ec41 0b10 	vmov	d0, r0, r1
 8010bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bda:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010bde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010be2:	4334      	orrs	r4, r6
 8010be4:	d103      	bne.n	8010bee <__ieee754_atan2+0x5e>
 8010be6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bea:	f001 bd49 	b.w	8012680 <atan>
 8010bee:	17bc      	asrs	r4, r7, #30
 8010bf0:	f004 0402 	and.w	r4, r4, #2
 8010bf4:	ea53 0909 	orrs.w	r9, r3, r9
 8010bf8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010bfc:	d107      	bne.n	8010c0e <__ieee754_atan2+0x7e>
 8010bfe:	2c02      	cmp	r4, #2
 8010c00:	d060      	beq.n	8010cc4 <__ieee754_atan2+0x134>
 8010c02:	2c03      	cmp	r4, #3
 8010c04:	d1e5      	bne.n	8010bd2 <__ieee754_atan2+0x42>
 8010c06:	a142      	add	r1, pc, #264	; (adr r1, 8010d10 <__ieee754_atan2+0x180>)
 8010c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c0c:	e7e1      	b.n	8010bd2 <__ieee754_atan2+0x42>
 8010c0e:	ea52 0808 	orrs.w	r8, r2, r8
 8010c12:	d106      	bne.n	8010c22 <__ieee754_atan2+0x92>
 8010c14:	f1bc 0f00 	cmp.w	ip, #0
 8010c18:	da5f      	bge.n	8010cda <__ieee754_atan2+0x14a>
 8010c1a:	a13f      	add	r1, pc, #252	; (adr r1, 8010d18 <__ieee754_atan2+0x188>)
 8010c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c20:	e7d7      	b.n	8010bd2 <__ieee754_atan2+0x42>
 8010c22:	4572      	cmp	r2, lr
 8010c24:	d10f      	bne.n	8010c46 <__ieee754_atan2+0xb6>
 8010c26:	4293      	cmp	r3, r2
 8010c28:	f104 34ff 	add.w	r4, r4, #4294967295
 8010c2c:	d107      	bne.n	8010c3e <__ieee754_atan2+0xae>
 8010c2e:	2c02      	cmp	r4, #2
 8010c30:	d84c      	bhi.n	8010ccc <__ieee754_atan2+0x13c>
 8010c32:	4b35      	ldr	r3, [pc, #212]	; (8010d08 <__ieee754_atan2+0x178>)
 8010c34:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010c38:	e9d4 0100 	ldrd	r0, r1, [r4]
 8010c3c:	e7c9      	b.n	8010bd2 <__ieee754_atan2+0x42>
 8010c3e:	2c02      	cmp	r4, #2
 8010c40:	d848      	bhi.n	8010cd4 <__ieee754_atan2+0x144>
 8010c42:	4b32      	ldr	r3, [pc, #200]	; (8010d0c <__ieee754_atan2+0x17c>)
 8010c44:	e7f6      	b.n	8010c34 <__ieee754_atan2+0xa4>
 8010c46:	4573      	cmp	r3, lr
 8010c48:	d0e4      	beq.n	8010c14 <__ieee754_atan2+0x84>
 8010c4a:	1a9b      	subs	r3, r3, r2
 8010c4c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010c50:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010c54:	da1e      	bge.n	8010c94 <__ieee754_atan2+0x104>
 8010c56:	2f00      	cmp	r7, #0
 8010c58:	da01      	bge.n	8010c5e <__ieee754_atan2+0xce>
 8010c5a:	323c      	adds	r2, #60	; 0x3c
 8010c5c:	db1e      	blt.n	8010c9c <__ieee754_atan2+0x10c>
 8010c5e:	4632      	mov	r2, r6
 8010c60:	463b      	mov	r3, r7
 8010c62:	f7ef fe03 	bl	800086c <__aeabi_ddiv>
 8010c66:	ec41 0b10 	vmov	d0, r0, r1
 8010c6a:	f001 fea9 	bl	80129c0 <fabs>
 8010c6e:	f001 fd07 	bl	8012680 <atan>
 8010c72:	ec51 0b10 	vmov	r0, r1, d0
 8010c76:	2c01      	cmp	r4, #1
 8010c78:	d013      	beq.n	8010ca2 <__ieee754_atan2+0x112>
 8010c7a:	2c02      	cmp	r4, #2
 8010c7c:	d015      	beq.n	8010caa <__ieee754_atan2+0x11a>
 8010c7e:	2c00      	cmp	r4, #0
 8010c80:	d0a7      	beq.n	8010bd2 <__ieee754_atan2+0x42>
 8010c82:	a319      	add	r3, pc, #100	; (adr r3, 8010ce8 <__ieee754_atan2+0x158>)
 8010c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c88:	f7ef fb0e 	bl	80002a8 <__aeabi_dsub>
 8010c8c:	a318      	add	r3, pc, #96	; (adr r3, 8010cf0 <__ieee754_atan2+0x160>)
 8010c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c92:	e014      	b.n	8010cbe <__ieee754_atan2+0x12e>
 8010c94:	a118      	add	r1, pc, #96	; (adr r1, 8010cf8 <__ieee754_atan2+0x168>)
 8010c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c9a:	e7ec      	b.n	8010c76 <__ieee754_atan2+0xe6>
 8010c9c:	2000      	movs	r0, #0
 8010c9e:	2100      	movs	r1, #0
 8010ca0:	e7e9      	b.n	8010c76 <__ieee754_atan2+0xe6>
 8010ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	e793      	b.n	8010bd2 <__ieee754_atan2+0x42>
 8010caa:	a30f      	add	r3, pc, #60	; (adr r3, 8010ce8 <__ieee754_atan2+0x158>)
 8010cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb0:	f7ef fafa 	bl	80002a8 <__aeabi_dsub>
 8010cb4:	4602      	mov	r2, r0
 8010cb6:	460b      	mov	r3, r1
 8010cb8:	a10d      	add	r1, pc, #52	; (adr r1, 8010cf0 <__ieee754_atan2+0x160>)
 8010cba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cbe:	f7ef faf3 	bl	80002a8 <__aeabi_dsub>
 8010cc2:	e786      	b.n	8010bd2 <__ieee754_atan2+0x42>
 8010cc4:	a10a      	add	r1, pc, #40	; (adr r1, 8010cf0 <__ieee754_atan2+0x160>)
 8010cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cca:	e782      	b.n	8010bd2 <__ieee754_atan2+0x42>
 8010ccc:	a10c      	add	r1, pc, #48	; (adr r1, 8010d00 <__ieee754_atan2+0x170>)
 8010cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cd2:	e77e      	b.n	8010bd2 <__ieee754_atan2+0x42>
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	2100      	movs	r1, #0
 8010cd8:	e77b      	b.n	8010bd2 <__ieee754_atan2+0x42>
 8010cda:	a107      	add	r1, pc, #28	; (adr r1, 8010cf8 <__ieee754_atan2+0x168>)
 8010cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ce0:	e777      	b.n	8010bd2 <__ieee754_atan2+0x42>
 8010ce2:	bf00      	nop
 8010ce4:	f3af 8000 	nop.w
 8010ce8:	33145c07 	.word	0x33145c07
 8010cec:	3ca1a626 	.word	0x3ca1a626
 8010cf0:	54442d18 	.word	0x54442d18
 8010cf4:	400921fb 	.word	0x400921fb
 8010cf8:	54442d18 	.word	0x54442d18
 8010cfc:	3ff921fb 	.word	0x3ff921fb
 8010d00:	54442d18 	.word	0x54442d18
 8010d04:	3fe921fb 	.word	0x3fe921fb
 8010d08:	08013090 	.word	0x08013090
 8010d0c:	080130a8 	.word	0x080130a8
 8010d10:	54442d18 	.word	0x54442d18
 8010d14:	c00921fb 	.word	0xc00921fb
 8010d18:	54442d18 	.word	0x54442d18
 8010d1c:	bff921fb 	.word	0xbff921fb
 8010d20:	7ff00000 	.word	0x7ff00000
 8010d24:	00000000 	.word	0x00000000

08010d28 <__ieee754_pow>:
 8010d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d2c:	ed2d 8b06 	vpush	{d8-d10}
 8010d30:	b08d      	sub	sp, #52	; 0x34
 8010d32:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010d36:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8010d3a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8010d3e:	ea56 0100 	orrs.w	r1, r6, r0
 8010d42:	ec53 2b10 	vmov	r2, r3, d0
 8010d46:	f000 84d1 	beq.w	80116ec <__ieee754_pow+0x9c4>
 8010d4a:	497f      	ldr	r1, [pc, #508]	; (8010f48 <__ieee754_pow+0x220>)
 8010d4c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010d50:	428c      	cmp	r4, r1
 8010d52:	ee10 8a10 	vmov	r8, s0
 8010d56:	4699      	mov	r9, r3
 8010d58:	dc09      	bgt.n	8010d6e <__ieee754_pow+0x46>
 8010d5a:	d103      	bne.n	8010d64 <__ieee754_pow+0x3c>
 8010d5c:	b97a      	cbnz	r2, 8010d7e <__ieee754_pow+0x56>
 8010d5e:	42a6      	cmp	r6, r4
 8010d60:	dd02      	ble.n	8010d68 <__ieee754_pow+0x40>
 8010d62:	e00c      	b.n	8010d7e <__ieee754_pow+0x56>
 8010d64:	428e      	cmp	r6, r1
 8010d66:	dc02      	bgt.n	8010d6e <__ieee754_pow+0x46>
 8010d68:	428e      	cmp	r6, r1
 8010d6a:	d110      	bne.n	8010d8e <__ieee754_pow+0x66>
 8010d6c:	b178      	cbz	r0, 8010d8e <__ieee754_pow+0x66>
 8010d6e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010d72:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010d76:	ea54 0308 	orrs.w	r3, r4, r8
 8010d7a:	f000 84b7 	beq.w	80116ec <__ieee754_pow+0x9c4>
 8010d7e:	4873      	ldr	r0, [pc, #460]	; (8010f4c <__ieee754_pow+0x224>)
 8010d80:	b00d      	add	sp, #52	; 0x34
 8010d82:	ecbd 8b06 	vpop	{d8-d10}
 8010d86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d8a:	f001 bead 	b.w	8012ae8 <nan>
 8010d8e:	f1b9 0f00 	cmp.w	r9, #0
 8010d92:	da36      	bge.n	8010e02 <__ieee754_pow+0xda>
 8010d94:	496e      	ldr	r1, [pc, #440]	; (8010f50 <__ieee754_pow+0x228>)
 8010d96:	428e      	cmp	r6, r1
 8010d98:	dc51      	bgt.n	8010e3e <__ieee754_pow+0x116>
 8010d9a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8010d9e:	428e      	cmp	r6, r1
 8010da0:	f340 84af 	ble.w	8011702 <__ieee754_pow+0x9da>
 8010da4:	1531      	asrs	r1, r6, #20
 8010da6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010daa:	2914      	cmp	r1, #20
 8010dac:	dd0f      	ble.n	8010dce <__ieee754_pow+0xa6>
 8010dae:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8010db2:	fa20 fc01 	lsr.w	ip, r0, r1
 8010db6:	fa0c f101 	lsl.w	r1, ip, r1
 8010dba:	4281      	cmp	r1, r0
 8010dbc:	f040 84a1 	bne.w	8011702 <__ieee754_pow+0x9da>
 8010dc0:	f00c 0c01 	and.w	ip, ip, #1
 8010dc4:	f1cc 0102 	rsb	r1, ip, #2
 8010dc8:	9100      	str	r1, [sp, #0]
 8010dca:	b180      	cbz	r0, 8010dee <__ieee754_pow+0xc6>
 8010dcc:	e059      	b.n	8010e82 <__ieee754_pow+0x15a>
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	d155      	bne.n	8010e7e <__ieee754_pow+0x156>
 8010dd2:	f1c1 0114 	rsb	r1, r1, #20
 8010dd6:	fa46 fc01 	asr.w	ip, r6, r1
 8010dda:	fa0c f101 	lsl.w	r1, ip, r1
 8010dde:	42b1      	cmp	r1, r6
 8010de0:	f040 848c 	bne.w	80116fc <__ieee754_pow+0x9d4>
 8010de4:	f00c 0c01 	and.w	ip, ip, #1
 8010de8:	f1cc 0102 	rsb	r1, ip, #2
 8010dec:	9100      	str	r1, [sp, #0]
 8010dee:	4959      	ldr	r1, [pc, #356]	; (8010f54 <__ieee754_pow+0x22c>)
 8010df0:	428e      	cmp	r6, r1
 8010df2:	d12d      	bne.n	8010e50 <__ieee754_pow+0x128>
 8010df4:	2f00      	cmp	r7, #0
 8010df6:	da79      	bge.n	8010eec <__ieee754_pow+0x1c4>
 8010df8:	4956      	ldr	r1, [pc, #344]	; (8010f54 <__ieee754_pow+0x22c>)
 8010dfa:	2000      	movs	r0, #0
 8010dfc:	f7ef fd36 	bl	800086c <__aeabi_ddiv>
 8010e00:	e016      	b.n	8010e30 <__ieee754_pow+0x108>
 8010e02:	2100      	movs	r1, #0
 8010e04:	9100      	str	r1, [sp, #0]
 8010e06:	2800      	cmp	r0, #0
 8010e08:	d13b      	bne.n	8010e82 <__ieee754_pow+0x15a>
 8010e0a:	494f      	ldr	r1, [pc, #316]	; (8010f48 <__ieee754_pow+0x220>)
 8010e0c:	428e      	cmp	r6, r1
 8010e0e:	d1ee      	bne.n	8010dee <__ieee754_pow+0xc6>
 8010e10:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010e14:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010e18:	ea53 0308 	orrs.w	r3, r3, r8
 8010e1c:	f000 8466 	beq.w	80116ec <__ieee754_pow+0x9c4>
 8010e20:	4b4d      	ldr	r3, [pc, #308]	; (8010f58 <__ieee754_pow+0x230>)
 8010e22:	429c      	cmp	r4, r3
 8010e24:	dd0d      	ble.n	8010e42 <__ieee754_pow+0x11a>
 8010e26:	2f00      	cmp	r7, #0
 8010e28:	f280 8464 	bge.w	80116f4 <__ieee754_pow+0x9cc>
 8010e2c:	2000      	movs	r0, #0
 8010e2e:	2100      	movs	r1, #0
 8010e30:	ec41 0b10 	vmov	d0, r0, r1
 8010e34:	b00d      	add	sp, #52	; 0x34
 8010e36:	ecbd 8b06 	vpop	{d8-d10}
 8010e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e3e:	2102      	movs	r1, #2
 8010e40:	e7e0      	b.n	8010e04 <__ieee754_pow+0xdc>
 8010e42:	2f00      	cmp	r7, #0
 8010e44:	daf2      	bge.n	8010e2c <__ieee754_pow+0x104>
 8010e46:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8010e4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010e4e:	e7ef      	b.n	8010e30 <__ieee754_pow+0x108>
 8010e50:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8010e54:	d104      	bne.n	8010e60 <__ieee754_pow+0x138>
 8010e56:	4610      	mov	r0, r2
 8010e58:	4619      	mov	r1, r3
 8010e5a:	f7ef fbdd 	bl	8000618 <__aeabi_dmul>
 8010e5e:	e7e7      	b.n	8010e30 <__ieee754_pow+0x108>
 8010e60:	493e      	ldr	r1, [pc, #248]	; (8010f5c <__ieee754_pow+0x234>)
 8010e62:	428f      	cmp	r7, r1
 8010e64:	d10d      	bne.n	8010e82 <__ieee754_pow+0x15a>
 8010e66:	f1b9 0f00 	cmp.w	r9, #0
 8010e6a:	db0a      	blt.n	8010e82 <__ieee754_pow+0x15a>
 8010e6c:	ec43 2b10 	vmov	d0, r2, r3
 8010e70:	b00d      	add	sp, #52	; 0x34
 8010e72:	ecbd 8b06 	vpop	{d8-d10}
 8010e76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e7a:	f000 be83 	b.w	8011b84 <__ieee754_sqrt>
 8010e7e:	2100      	movs	r1, #0
 8010e80:	9100      	str	r1, [sp, #0]
 8010e82:	ec43 2b10 	vmov	d0, r2, r3
 8010e86:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e8a:	f001 fd99 	bl	80129c0 <fabs>
 8010e8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e92:	ec51 0b10 	vmov	r0, r1, d0
 8010e96:	f1b8 0f00 	cmp.w	r8, #0
 8010e9a:	d12a      	bne.n	8010ef2 <__ieee754_pow+0x1ca>
 8010e9c:	b12c      	cbz	r4, 8010eaa <__ieee754_pow+0x182>
 8010e9e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8010f54 <__ieee754_pow+0x22c>
 8010ea2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8010ea6:	45e6      	cmp	lr, ip
 8010ea8:	d123      	bne.n	8010ef2 <__ieee754_pow+0x1ca>
 8010eaa:	2f00      	cmp	r7, #0
 8010eac:	da05      	bge.n	8010eba <__ieee754_pow+0x192>
 8010eae:	4602      	mov	r2, r0
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	2000      	movs	r0, #0
 8010eb4:	4927      	ldr	r1, [pc, #156]	; (8010f54 <__ieee754_pow+0x22c>)
 8010eb6:	f7ef fcd9 	bl	800086c <__aeabi_ddiv>
 8010eba:	f1b9 0f00 	cmp.w	r9, #0
 8010ebe:	dab7      	bge.n	8010e30 <__ieee754_pow+0x108>
 8010ec0:	9b00      	ldr	r3, [sp, #0]
 8010ec2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010ec6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010eca:	4323      	orrs	r3, r4
 8010ecc:	d108      	bne.n	8010ee0 <__ieee754_pow+0x1b8>
 8010ece:	4602      	mov	r2, r0
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	4610      	mov	r0, r2
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	f7ef f9e7 	bl	80002a8 <__aeabi_dsub>
 8010eda:	4602      	mov	r2, r0
 8010edc:	460b      	mov	r3, r1
 8010ede:	e78d      	b.n	8010dfc <__ieee754_pow+0xd4>
 8010ee0:	9b00      	ldr	r3, [sp, #0]
 8010ee2:	2b01      	cmp	r3, #1
 8010ee4:	d1a4      	bne.n	8010e30 <__ieee754_pow+0x108>
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010eec:	4610      	mov	r0, r2
 8010eee:	4619      	mov	r1, r3
 8010ef0:	e79e      	b.n	8010e30 <__ieee754_pow+0x108>
 8010ef2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8010ef6:	f10c 35ff 	add.w	r5, ip, #4294967295
 8010efa:	950a      	str	r5, [sp, #40]	; 0x28
 8010efc:	9d00      	ldr	r5, [sp, #0]
 8010efe:	46ac      	mov	ip, r5
 8010f00:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010f02:	ea5c 0505 	orrs.w	r5, ip, r5
 8010f06:	d0e4      	beq.n	8010ed2 <__ieee754_pow+0x1aa>
 8010f08:	4b15      	ldr	r3, [pc, #84]	; (8010f60 <__ieee754_pow+0x238>)
 8010f0a:	429e      	cmp	r6, r3
 8010f0c:	f340 80fc 	ble.w	8011108 <__ieee754_pow+0x3e0>
 8010f10:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010f14:	429e      	cmp	r6, r3
 8010f16:	4b10      	ldr	r3, [pc, #64]	; (8010f58 <__ieee754_pow+0x230>)
 8010f18:	dd07      	ble.n	8010f2a <__ieee754_pow+0x202>
 8010f1a:	429c      	cmp	r4, r3
 8010f1c:	dc0a      	bgt.n	8010f34 <__ieee754_pow+0x20c>
 8010f1e:	2f00      	cmp	r7, #0
 8010f20:	da84      	bge.n	8010e2c <__ieee754_pow+0x104>
 8010f22:	a307      	add	r3, pc, #28	; (adr r3, 8010f40 <__ieee754_pow+0x218>)
 8010f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f28:	e795      	b.n	8010e56 <__ieee754_pow+0x12e>
 8010f2a:	429c      	cmp	r4, r3
 8010f2c:	dbf7      	blt.n	8010f1e <__ieee754_pow+0x1f6>
 8010f2e:	4b09      	ldr	r3, [pc, #36]	; (8010f54 <__ieee754_pow+0x22c>)
 8010f30:	429c      	cmp	r4, r3
 8010f32:	dd17      	ble.n	8010f64 <__ieee754_pow+0x23c>
 8010f34:	2f00      	cmp	r7, #0
 8010f36:	dcf4      	bgt.n	8010f22 <__ieee754_pow+0x1fa>
 8010f38:	e778      	b.n	8010e2c <__ieee754_pow+0x104>
 8010f3a:	bf00      	nop
 8010f3c:	f3af 8000 	nop.w
 8010f40:	8800759c 	.word	0x8800759c
 8010f44:	7e37e43c 	.word	0x7e37e43c
 8010f48:	7ff00000 	.word	0x7ff00000
 8010f4c:	08012f87 	.word	0x08012f87
 8010f50:	433fffff 	.word	0x433fffff
 8010f54:	3ff00000 	.word	0x3ff00000
 8010f58:	3fefffff 	.word	0x3fefffff
 8010f5c:	3fe00000 	.word	0x3fe00000
 8010f60:	41e00000 	.word	0x41e00000
 8010f64:	4b64      	ldr	r3, [pc, #400]	; (80110f8 <__ieee754_pow+0x3d0>)
 8010f66:	2200      	movs	r2, #0
 8010f68:	f7ef f99e 	bl	80002a8 <__aeabi_dsub>
 8010f6c:	a356      	add	r3, pc, #344	; (adr r3, 80110c8 <__ieee754_pow+0x3a0>)
 8010f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f72:	4604      	mov	r4, r0
 8010f74:	460d      	mov	r5, r1
 8010f76:	f7ef fb4f 	bl	8000618 <__aeabi_dmul>
 8010f7a:	a355      	add	r3, pc, #340	; (adr r3, 80110d0 <__ieee754_pow+0x3a8>)
 8010f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f80:	4606      	mov	r6, r0
 8010f82:	460f      	mov	r7, r1
 8010f84:	4620      	mov	r0, r4
 8010f86:	4629      	mov	r1, r5
 8010f88:	f7ef fb46 	bl	8000618 <__aeabi_dmul>
 8010f8c:	4b5b      	ldr	r3, [pc, #364]	; (80110fc <__ieee754_pow+0x3d4>)
 8010f8e:	4682      	mov	sl, r0
 8010f90:	468b      	mov	fp, r1
 8010f92:	2200      	movs	r2, #0
 8010f94:	4620      	mov	r0, r4
 8010f96:	4629      	mov	r1, r5
 8010f98:	f7ef fb3e 	bl	8000618 <__aeabi_dmul>
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	460b      	mov	r3, r1
 8010fa0:	a14d      	add	r1, pc, #308	; (adr r1, 80110d8 <__ieee754_pow+0x3b0>)
 8010fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fa6:	f7ef f97f 	bl	80002a8 <__aeabi_dsub>
 8010faa:	4622      	mov	r2, r4
 8010fac:	462b      	mov	r3, r5
 8010fae:	f7ef fb33 	bl	8000618 <__aeabi_dmul>
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	460b      	mov	r3, r1
 8010fb6:	2000      	movs	r0, #0
 8010fb8:	4951      	ldr	r1, [pc, #324]	; (8011100 <__ieee754_pow+0x3d8>)
 8010fba:	f7ef f975 	bl	80002a8 <__aeabi_dsub>
 8010fbe:	4622      	mov	r2, r4
 8010fc0:	4680      	mov	r8, r0
 8010fc2:	4689      	mov	r9, r1
 8010fc4:	462b      	mov	r3, r5
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	4629      	mov	r1, r5
 8010fca:	f7ef fb25 	bl	8000618 <__aeabi_dmul>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	4640      	mov	r0, r8
 8010fd4:	4649      	mov	r1, r9
 8010fd6:	f7ef fb1f 	bl	8000618 <__aeabi_dmul>
 8010fda:	a341      	add	r3, pc, #260	; (adr r3, 80110e0 <__ieee754_pow+0x3b8>)
 8010fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe0:	f7ef fb1a 	bl	8000618 <__aeabi_dmul>
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	460b      	mov	r3, r1
 8010fe8:	4650      	mov	r0, sl
 8010fea:	4659      	mov	r1, fp
 8010fec:	f7ef f95c 	bl	80002a8 <__aeabi_dsub>
 8010ff0:	4602      	mov	r2, r0
 8010ff2:	460b      	mov	r3, r1
 8010ff4:	4680      	mov	r8, r0
 8010ff6:	4689      	mov	r9, r1
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	4639      	mov	r1, r7
 8010ffc:	f7ef f956 	bl	80002ac <__adddf3>
 8011000:	2400      	movs	r4, #0
 8011002:	4632      	mov	r2, r6
 8011004:	463b      	mov	r3, r7
 8011006:	4620      	mov	r0, r4
 8011008:	460d      	mov	r5, r1
 801100a:	f7ef f94d 	bl	80002a8 <__aeabi_dsub>
 801100e:	4602      	mov	r2, r0
 8011010:	460b      	mov	r3, r1
 8011012:	4640      	mov	r0, r8
 8011014:	4649      	mov	r1, r9
 8011016:	f7ef f947 	bl	80002a8 <__aeabi_dsub>
 801101a:	9b00      	ldr	r3, [sp, #0]
 801101c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801101e:	3b01      	subs	r3, #1
 8011020:	4313      	orrs	r3, r2
 8011022:	4682      	mov	sl, r0
 8011024:	468b      	mov	fp, r1
 8011026:	f040 81f1 	bne.w	801140c <__ieee754_pow+0x6e4>
 801102a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80110e8 <__ieee754_pow+0x3c0>
 801102e:	eeb0 8a47 	vmov.f32	s16, s14
 8011032:	eef0 8a67 	vmov.f32	s17, s15
 8011036:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801103a:	2600      	movs	r6, #0
 801103c:	4632      	mov	r2, r6
 801103e:	463b      	mov	r3, r7
 8011040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011044:	f7ef f930 	bl	80002a8 <__aeabi_dsub>
 8011048:	4622      	mov	r2, r4
 801104a:	462b      	mov	r3, r5
 801104c:	f7ef fae4 	bl	8000618 <__aeabi_dmul>
 8011050:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011054:	4680      	mov	r8, r0
 8011056:	4689      	mov	r9, r1
 8011058:	4650      	mov	r0, sl
 801105a:	4659      	mov	r1, fp
 801105c:	f7ef fadc 	bl	8000618 <__aeabi_dmul>
 8011060:	4602      	mov	r2, r0
 8011062:	460b      	mov	r3, r1
 8011064:	4640      	mov	r0, r8
 8011066:	4649      	mov	r1, r9
 8011068:	f7ef f920 	bl	80002ac <__adddf3>
 801106c:	4632      	mov	r2, r6
 801106e:	463b      	mov	r3, r7
 8011070:	4680      	mov	r8, r0
 8011072:	4689      	mov	r9, r1
 8011074:	4620      	mov	r0, r4
 8011076:	4629      	mov	r1, r5
 8011078:	f7ef face 	bl	8000618 <__aeabi_dmul>
 801107c:	460b      	mov	r3, r1
 801107e:	4604      	mov	r4, r0
 8011080:	460d      	mov	r5, r1
 8011082:	4602      	mov	r2, r0
 8011084:	4649      	mov	r1, r9
 8011086:	4640      	mov	r0, r8
 8011088:	f7ef f910 	bl	80002ac <__adddf3>
 801108c:	4b1d      	ldr	r3, [pc, #116]	; (8011104 <__ieee754_pow+0x3dc>)
 801108e:	4299      	cmp	r1, r3
 8011090:	ec45 4b19 	vmov	d9, r4, r5
 8011094:	4606      	mov	r6, r0
 8011096:	460f      	mov	r7, r1
 8011098:	468b      	mov	fp, r1
 801109a:	f340 82fe 	ble.w	801169a <__ieee754_pow+0x972>
 801109e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80110a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80110a6:	4303      	orrs	r3, r0
 80110a8:	f000 81f0 	beq.w	801148c <__ieee754_pow+0x764>
 80110ac:	a310      	add	r3, pc, #64	; (adr r3, 80110f0 <__ieee754_pow+0x3c8>)
 80110ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b2:	ec51 0b18 	vmov	r0, r1, d8
 80110b6:	f7ef faaf 	bl	8000618 <__aeabi_dmul>
 80110ba:	a30d      	add	r3, pc, #52	; (adr r3, 80110f0 <__ieee754_pow+0x3c8>)
 80110bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c0:	e6cb      	b.n	8010e5a <__ieee754_pow+0x132>
 80110c2:	bf00      	nop
 80110c4:	f3af 8000 	nop.w
 80110c8:	60000000 	.word	0x60000000
 80110cc:	3ff71547 	.word	0x3ff71547
 80110d0:	f85ddf44 	.word	0xf85ddf44
 80110d4:	3e54ae0b 	.word	0x3e54ae0b
 80110d8:	55555555 	.word	0x55555555
 80110dc:	3fd55555 	.word	0x3fd55555
 80110e0:	652b82fe 	.word	0x652b82fe
 80110e4:	3ff71547 	.word	0x3ff71547
 80110e8:	00000000 	.word	0x00000000
 80110ec:	bff00000 	.word	0xbff00000
 80110f0:	8800759c 	.word	0x8800759c
 80110f4:	7e37e43c 	.word	0x7e37e43c
 80110f8:	3ff00000 	.word	0x3ff00000
 80110fc:	3fd00000 	.word	0x3fd00000
 8011100:	3fe00000 	.word	0x3fe00000
 8011104:	408fffff 	.word	0x408fffff
 8011108:	4bd7      	ldr	r3, [pc, #860]	; (8011468 <__ieee754_pow+0x740>)
 801110a:	ea03 0309 	and.w	r3, r3, r9
 801110e:	2200      	movs	r2, #0
 8011110:	b92b      	cbnz	r3, 801111e <__ieee754_pow+0x3f6>
 8011112:	4bd6      	ldr	r3, [pc, #856]	; (801146c <__ieee754_pow+0x744>)
 8011114:	f7ef fa80 	bl	8000618 <__aeabi_dmul>
 8011118:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801111c:	460c      	mov	r4, r1
 801111e:	1523      	asrs	r3, r4, #20
 8011120:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011124:	4413      	add	r3, r2
 8011126:	9309      	str	r3, [sp, #36]	; 0x24
 8011128:	4bd1      	ldr	r3, [pc, #836]	; (8011470 <__ieee754_pow+0x748>)
 801112a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801112e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011132:	429c      	cmp	r4, r3
 8011134:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011138:	dd08      	ble.n	801114c <__ieee754_pow+0x424>
 801113a:	4bce      	ldr	r3, [pc, #824]	; (8011474 <__ieee754_pow+0x74c>)
 801113c:	429c      	cmp	r4, r3
 801113e:	f340 8163 	ble.w	8011408 <__ieee754_pow+0x6e0>
 8011142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011144:	3301      	adds	r3, #1
 8011146:	9309      	str	r3, [sp, #36]	; 0x24
 8011148:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801114c:	2400      	movs	r4, #0
 801114e:	00e3      	lsls	r3, r4, #3
 8011150:	930b      	str	r3, [sp, #44]	; 0x2c
 8011152:	4bc9      	ldr	r3, [pc, #804]	; (8011478 <__ieee754_pow+0x750>)
 8011154:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011158:	ed93 7b00 	vldr	d7, [r3]
 801115c:	4629      	mov	r1, r5
 801115e:	ec53 2b17 	vmov	r2, r3, d7
 8011162:	eeb0 8a47 	vmov.f32	s16, s14
 8011166:	eef0 8a67 	vmov.f32	s17, s15
 801116a:	4682      	mov	sl, r0
 801116c:	f7ef f89c 	bl	80002a8 <__aeabi_dsub>
 8011170:	4652      	mov	r2, sl
 8011172:	4606      	mov	r6, r0
 8011174:	460f      	mov	r7, r1
 8011176:	462b      	mov	r3, r5
 8011178:	ec51 0b18 	vmov	r0, r1, d8
 801117c:	f7ef f896 	bl	80002ac <__adddf3>
 8011180:	4602      	mov	r2, r0
 8011182:	460b      	mov	r3, r1
 8011184:	2000      	movs	r0, #0
 8011186:	49bd      	ldr	r1, [pc, #756]	; (801147c <__ieee754_pow+0x754>)
 8011188:	f7ef fb70 	bl	800086c <__aeabi_ddiv>
 801118c:	ec41 0b19 	vmov	d9, r0, r1
 8011190:	4602      	mov	r2, r0
 8011192:	460b      	mov	r3, r1
 8011194:	4630      	mov	r0, r6
 8011196:	4639      	mov	r1, r7
 8011198:	f7ef fa3e 	bl	8000618 <__aeabi_dmul>
 801119c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80111a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80111a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80111a8:	2300      	movs	r3, #0
 80111aa:	9304      	str	r3, [sp, #16]
 80111ac:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80111b0:	46ab      	mov	fp, r5
 80111b2:	106d      	asrs	r5, r5, #1
 80111b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80111b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80111bc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80111c0:	2200      	movs	r2, #0
 80111c2:	4640      	mov	r0, r8
 80111c4:	4649      	mov	r1, r9
 80111c6:	4614      	mov	r4, r2
 80111c8:	461d      	mov	r5, r3
 80111ca:	f7ef fa25 	bl	8000618 <__aeabi_dmul>
 80111ce:	4602      	mov	r2, r0
 80111d0:	460b      	mov	r3, r1
 80111d2:	4630      	mov	r0, r6
 80111d4:	4639      	mov	r1, r7
 80111d6:	f7ef f867 	bl	80002a8 <__aeabi_dsub>
 80111da:	ec53 2b18 	vmov	r2, r3, d8
 80111de:	4606      	mov	r6, r0
 80111e0:	460f      	mov	r7, r1
 80111e2:	4620      	mov	r0, r4
 80111e4:	4629      	mov	r1, r5
 80111e6:	f7ef f85f 	bl	80002a8 <__aeabi_dsub>
 80111ea:	4602      	mov	r2, r0
 80111ec:	460b      	mov	r3, r1
 80111ee:	4650      	mov	r0, sl
 80111f0:	4659      	mov	r1, fp
 80111f2:	f7ef f859 	bl	80002a8 <__aeabi_dsub>
 80111f6:	4642      	mov	r2, r8
 80111f8:	464b      	mov	r3, r9
 80111fa:	f7ef fa0d 	bl	8000618 <__aeabi_dmul>
 80111fe:	4602      	mov	r2, r0
 8011200:	460b      	mov	r3, r1
 8011202:	4630      	mov	r0, r6
 8011204:	4639      	mov	r1, r7
 8011206:	f7ef f84f 	bl	80002a8 <__aeabi_dsub>
 801120a:	ec53 2b19 	vmov	r2, r3, d9
 801120e:	f7ef fa03 	bl	8000618 <__aeabi_dmul>
 8011212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011216:	ec41 0b18 	vmov	d8, r0, r1
 801121a:	4610      	mov	r0, r2
 801121c:	4619      	mov	r1, r3
 801121e:	f7ef f9fb 	bl	8000618 <__aeabi_dmul>
 8011222:	a37d      	add	r3, pc, #500	; (adr r3, 8011418 <__ieee754_pow+0x6f0>)
 8011224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011228:	4604      	mov	r4, r0
 801122a:	460d      	mov	r5, r1
 801122c:	f7ef f9f4 	bl	8000618 <__aeabi_dmul>
 8011230:	a37b      	add	r3, pc, #492	; (adr r3, 8011420 <__ieee754_pow+0x6f8>)
 8011232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011236:	f7ef f839 	bl	80002ac <__adddf3>
 801123a:	4622      	mov	r2, r4
 801123c:	462b      	mov	r3, r5
 801123e:	f7ef f9eb 	bl	8000618 <__aeabi_dmul>
 8011242:	a379      	add	r3, pc, #484	; (adr r3, 8011428 <__ieee754_pow+0x700>)
 8011244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011248:	f7ef f830 	bl	80002ac <__adddf3>
 801124c:	4622      	mov	r2, r4
 801124e:	462b      	mov	r3, r5
 8011250:	f7ef f9e2 	bl	8000618 <__aeabi_dmul>
 8011254:	a376      	add	r3, pc, #472	; (adr r3, 8011430 <__ieee754_pow+0x708>)
 8011256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125a:	f7ef f827 	bl	80002ac <__adddf3>
 801125e:	4622      	mov	r2, r4
 8011260:	462b      	mov	r3, r5
 8011262:	f7ef f9d9 	bl	8000618 <__aeabi_dmul>
 8011266:	a374      	add	r3, pc, #464	; (adr r3, 8011438 <__ieee754_pow+0x710>)
 8011268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126c:	f7ef f81e 	bl	80002ac <__adddf3>
 8011270:	4622      	mov	r2, r4
 8011272:	462b      	mov	r3, r5
 8011274:	f7ef f9d0 	bl	8000618 <__aeabi_dmul>
 8011278:	a371      	add	r3, pc, #452	; (adr r3, 8011440 <__ieee754_pow+0x718>)
 801127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127e:	f7ef f815 	bl	80002ac <__adddf3>
 8011282:	4622      	mov	r2, r4
 8011284:	4606      	mov	r6, r0
 8011286:	460f      	mov	r7, r1
 8011288:	462b      	mov	r3, r5
 801128a:	4620      	mov	r0, r4
 801128c:	4629      	mov	r1, r5
 801128e:	f7ef f9c3 	bl	8000618 <__aeabi_dmul>
 8011292:	4602      	mov	r2, r0
 8011294:	460b      	mov	r3, r1
 8011296:	4630      	mov	r0, r6
 8011298:	4639      	mov	r1, r7
 801129a:	f7ef f9bd 	bl	8000618 <__aeabi_dmul>
 801129e:	4642      	mov	r2, r8
 80112a0:	4604      	mov	r4, r0
 80112a2:	460d      	mov	r5, r1
 80112a4:	464b      	mov	r3, r9
 80112a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80112aa:	f7ee ffff 	bl	80002ac <__adddf3>
 80112ae:	ec53 2b18 	vmov	r2, r3, d8
 80112b2:	f7ef f9b1 	bl	8000618 <__aeabi_dmul>
 80112b6:	4622      	mov	r2, r4
 80112b8:	462b      	mov	r3, r5
 80112ba:	f7ee fff7 	bl	80002ac <__adddf3>
 80112be:	4642      	mov	r2, r8
 80112c0:	4682      	mov	sl, r0
 80112c2:	468b      	mov	fp, r1
 80112c4:	464b      	mov	r3, r9
 80112c6:	4640      	mov	r0, r8
 80112c8:	4649      	mov	r1, r9
 80112ca:	f7ef f9a5 	bl	8000618 <__aeabi_dmul>
 80112ce:	4b6c      	ldr	r3, [pc, #432]	; (8011480 <__ieee754_pow+0x758>)
 80112d0:	2200      	movs	r2, #0
 80112d2:	4606      	mov	r6, r0
 80112d4:	460f      	mov	r7, r1
 80112d6:	f7ee ffe9 	bl	80002ac <__adddf3>
 80112da:	4652      	mov	r2, sl
 80112dc:	465b      	mov	r3, fp
 80112de:	f7ee ffe5 	bl	80002ac <__adddf3>
 80112e2:	9c04      	ldr	r4, [sp, #16]
 80112e4:	460d      	mov	r5, r1
 80112e6:	4622      	mov	r2, r4
 80112e8:	460b      	mov	r3, r1
 80112ea:	4640      	mov	r0, r8
 80112ec:	4649      	mov	r1, r9
 80112ee:	f7ef f993 	bl	8000618 <__aeabi_dmul>
 80112f2:	4b63      	ldr	r3, [pc, #396]	; (8011480 <__ieee754_pow+0x758>)
 80112f4:	4680      	mov	r8, r0
 80112f6:	4689      	mov	r9, r1
 80112f8:	2200      	movs	r2, #0
 80112fa:	4620      	mov	r0, r4
 80112fc:	4629      	mov	r1, r5
 80112fe:	f7ee ffd3 	bl	80002a8 <__aeabi_dsub>
 8011302:	4632      	mov	r2, r6
 8011304:	463b      	mov	r3, r7
 8011306:	f7ee ffcf 	bl	80002a8 <__aeabi_dsub>
 801130a:	4602      	mov	r2, r0
 801130c:	460b      	mov	r3, r1
 801130e:	4650      	mov	r0, sl
 8011310:	4659      	mov	r1, fp
 8011312:	f7ee ffc9 	bl	80002a8 <__aeabi_dsub>
 8011316:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801131a:	f7ef f97d 	bl	8000618 <__aeabi_dmul>
 801131e:	4622      	mov	r2, r4
 8011320:	4606      	mov	r6, r0
 8011322:	460f      	mov	r7, r1
 8011324:	462b      	mov	r3, r5
 8011326:	ec51 0b18 	vmov	r0, r1, d8
 801132a:	f7ef f975 	bl	8000618 <__aeabi_dmul>
 801132e:	4602      	mov	r2, r0
 8011330:	460b      	mov	r3, r1
 8011332:	4630      	mov	r0, r6
 8011334:	4639      	mov	r1, r7
 8011336:	f7ee ffb9 	bl	80002ac <__adddf3>
 801133a:	4606      	mov	r6, r0
 801133c:	460f      	mov	r7, r1
 801133e:	4602      	mov	r2, r0
 8011340:	460b      	mov	r3, r1
 8011342:	4640      	mov	r0, r8
 8011344:	4649      	mov	r1, r9
 8011346:	f7ee ffb1 	bl	80002ac <__adddf3>
 801134a:	9c04      	ldr	r4, [sp, #16]
 801134c:	a33e      	add	r3, pc, #248	; (adr r3, 8011448 <__ieee754_pow+0x720>)
 801134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011352:	4620      	mov	r0, r4
 8011354:	460d      	mov	r5, r1
 8011356:	f7ef f95f 	bl	8000618 <__aeabi_dmul>
 801135a:	4642      	mov	r2, r8
 801135c:	ec41 0b18 	vmov	d8, r0, r1
 8011360:	464b      	mov	r3, r9
 8011362:	4620      	mov	r0, r4
 8011364:	4629      	mov	r1, r5
 8011366:	f7ee ff9f 	bl	80002a8 <__aeabi_dsub>
 801136a:	4602      	mov	r2, r0
 801136c:	460b      	mov	r3, r1
 801136e:	4630      	mov	r0, r6
 8011370:	4639      	mov	r1, r7
 8011372:	f7ee ff99 	bl	80002a8 <__aeabi_dsub>
 8011376:	a336      	add	r3, pc, #216	; (adr r3, 8011450 <__ieee754_pow+0x728>)
 8011378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137c:	f7ef f94c 	bl	8000618 <__aeabi_dmul>
 8011380:	a335      	add	r3, pc, #212	; (adr r3, 8011458 <__ieee754_pow+0x730>)
 8011382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011386:	4606      	mov	r6, r0
 8011388:	460f      	mov	r7, r1
 801138a:	4620      	mov	r0, r4
 801138c:	4629      	mov	r1, r5
 801138e:	f7ef f943 	bl	8000618 <__aeabi_dmul>
 8011392:	4602      	mov	r2, r0
 8011394:	460b      	mov	r3, r1
 8011396:	4630      	mov	r0, r6
 8011398:	4639      	mov	r1, r7
 801139a:	f7ee ff87 	bl	80002ac <__adddf3>
 801139e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80113a0:	4b38      	ldr	r3, [pc, #224]	; (8011484 <__ieee754_pow+0x75c>)
 80113a2:	4413      	add	r3, r2
 80113a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a8:	f7ee ff80 	bl	80002ac <__adddf3>
 80113ac:	4682      	mov	sl, r0
 80113ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113b0:	468b      	mov	fp, r1
 80113b2:	f7ef f8c7 	bl	8000544 <__aeabi_i2d>
 80113b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80113b8:	4b33      	ldr	r3, [pc, #204]	; (8011488 <__ieee754_pow+0x760>)
 80113ba:	4413      	add	r3, r2
 80113bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80113c0:	4606      	mov	r6, r0
 80113c2:	460f      	mov	r7, r1
 80113c4:	4652      	mov	r2, sl
 80113c6:	465b      	mov	r3, fp
 80113c8:	ec51 0b18 	vmov	r0, r1, d8
 80113cc:	f7ee ff6e 	bl	80002ac <__adddf3>
 80113d0:	4642      	mov	r2, r8
 80113d2:	464b      	mov	r3, r9
 80113d4:	f7ee ff6a 	bl	80002ac <__adddf3>
 80113d8:	4632      	mov	r2, r6
 80113da:	463b      	mov	r3, r7
 80113dc:	f7ee ff66 	bl	80002ac <__adddf3>
 80113e0:	9c04      	ldr	r4, [sp, #16]
 80113e2:	4632      	mov	r2, r6
 80113e4:	463b      	mov	r3, r7
 80113e6:	4620      	mov	r0, r4
 80113e8:	460d      	mov	r5, r1
 80113ea:	f7ee ff5d 	bl	80002a8 <__aeabi_dsub>
 80113ee:	4642      	mov	r2, r8
 80113f0:	464b      	mov	r3, r9
 80113f2:	f7ee ff59 	bl	80002a8 <__aeabi_dsub>
 80113f6:	ec53 2b18 	vmov	r2, r3, d8
 80113fa:	f7ee ff55 	bl	80002a8 <__aeabi_dsub>
 80113fe:	4602      	mov	r2, r0
 8011400:	460b      	mov	r3, r1
 8011402:	4650      	mov	r0, sl
 8011404:	4659      	mov	r1, fp
 8011406:	e606      	b.n	8011016 <__ieee754_pow+0x2ee>
 8011408:	2401      	movs	r4, #1
 801140a:	e6a0      	b.n	801114e <__ieee754_pow+0x426>
 801140c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011460 <__ieee754_pow+0x738>
 8011410:	e60d      	b.n	801102e <__ieee754_pow+0x306>
 8011412:	bf00      	nop
 8011414:	f3af 8000 	nop.w
 8011418:	4a454eef 	.word	0x4a454eef
 801141c:	3fca7e28 	.word	0x3fca7e28
 8011420:	93c9db65 	.word	0x93c9db65
 8011424:	3fcd864a 	.word	0x3fcd864a
 8011428:	a91d4101 	.word	0xa91d4101
 801142c:	3fd17460 	.word	0x3fd17460
 8011430:	518f264d 	.word	0x518f264d
 8011434:	3fd55555 	.word	0x3fd55555
 8011438:	db6fabff 	.word	0xdb6fabff
 801143c:	3fdb6db6 	.word	0x3fdb6db6
 8011440:	33333303 	.word	0x33333303
 8011444:	3fe33333 	.word	0x3fe33333
 8011448:	e0000000 	.word	0xe0000000
 801144c:	3feec709 	.word	0x3feec709
 8011450:	dc3a03fd 	.word	0xdc3a03fd
 8011454:	3feec709 	.word	0x3feec709
 8011458:	145b01f5 	.word	0x145b01f5
 801145c:	be3e2fe0 	.word	0xbe3e2fe0
 8011460:	00000000 	.word	0x00000000
 8011464:	3ff00000 	.word	0x3ff00000
 8011468:	7ff00000 	.word	0x7ff00000
 801146c:	43400000 	.word	0x43400000
 8011470:	0003988e 	.word	0x0003988e
 8011474:	000bb679 	.word	0x000bb679
 8011478:	080130c0 	.word	0x080130c0
 801147c:	3ff00000 	.word	0x3ff00000
 8011480:	40080000 	.word	0x40080000
 8011484:	080130e0 	.word	0x080130e0
 8011488:	080130d0 	.word	0x080130d0
 801148c:	a3b5      	add	r3, pc, #724	; (adr r3, 8011764 <__ieee754_pow+0xa3c>)
 801148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011492:	4640      	mov	r0, r8
 8011494:	4649      	mov	r1, r9
 8011496:	f7ee ff09 	bl	80002ac <__adddf3>
 801149a:	4622      	mov	r2, r4
 801149c:	ec41 0b1a 	vmov	d10, r0, r1
 80114a0:	462b      	mov	r3, r5
 80114a2:	4630      	mov	r0, r6
 80114a4:	4639      	mov	r1, r7
 80114a6:	f7ee feff 	bl	80002a8 <__aeabi_dsub>
 80114aa:	4602      	mov	r2, r0
 80114ac:	460b      	mov	r3, r1
 80114ae:	ec51 0b1a 	vmov	r0, r1, d10
 80114b2:	f7ef fb41 	bl	8000b38 <__aeabi_dcmpgt>
 80114b6:	2800      	cmp	r0, #0
 80114b8:	f47f adf8 	bne.w	80110ac <__ieee754_pow+0x384>
 80114bc:	4aa4      	ldr	r2, [pc, #656]	; (8011750 <__ieee754_pow+0xa28>)
 80114be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80114c2:	4293      	cmp	r3, r2
 80114c4:	f340 810b 	ble.w	80116de <__ieee754_pow+0x9b6>
 80114c8:	151b      	asrs	r3, r3, #20
 80114ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80114ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80114d2:	fa4a f303 	asr.w	r3, sl, r3
 80114d6:	445b      	add	r3, fp
 80114d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80114dc:	4e9d      	ldr	r6, [pc, #628]	; (8011754 <__ieee754_pow+0xa2c>)
 80114de:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80114e2:	4116      	asrs	r6, r2
 80114e4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80114e8:	2000      	movs	r0, #0
 80114ea:	ea23 0106 	bic.w	r1, r3, r6
 80114ee:	f1c2 0214 	rsb	r2, r2, #20
 80114f2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80114f6:	fa4a fa02 	asr.w	sl, sl, r2
 80114fa:	f1bb 0f00 	cmp.w	fp, #0
 80114fe:	4602      	mov	r2, r0
 8011500:	460b      	mov	r3, r1
 8011502:	4620      	mov	r0, r4
 8011504:	4629      	mov	r1, r5
 8011506:	bfb8      	it	lt
 8011508:	f1ca 0a00 	rsblt	sl, sl, #0
 801150c:	f7ee fecc 	bl	80002a8 <__aeabi_dsub>
 8011510:	ec41 0b19 	vmov	d9, r0, r1
 8011514:	4642      	mov	r2, r8
 8011516:	464b      	mov	r3, r9
 8011518:	ec51 0b19 	vmov	r0, r1, d9
 801151c:	f7ee fec6 	bl	80002ac <__adddf3>
 8011520:	2400      	movs	r4, #0
 8011522:	a379      	add	r3, pc, #484	; (adr r3, 8011708 <__ieee754_pow+0x9e0>)
 8011524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011528:	4620      	mov	r0, r4
 801152a:	460d      	mov	r5, r1
 801152c:	f7ef f874 	bl	8000618 <__aeabi_dmul>
 8011530:	ec53 2b19 	vmov	r2, r3, d9
 8011534:	4606      	mov	r6, r0
 8011536:	460f      	mov	r7, r1
 8011538:	4620      	mov	r0, r4
 801153a:	4629      	mov	r1, r5
 801153c:	f7ee feb4 	bl	80002a8 <__aeabi_dsub>
 8011540:	4602      	mov	r2, r0
 8011542:	460b      	mov	r3, r1
 8011544:	4640      	mov	r0, r8
 8011546:	4649      	mov	r1, r9
 8011548:	f7ee feae 	bl	80002a8 <__aeabi_dsub>
 801154c:	a370      	add	r3, pc, #448	; (adr r3, 8011710 <__ieee754_pow+0x9e8>)
 801154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011552:	f7ef f861 	bl	8000618 <__aeabi_dmul>
 8011556:	a370      	add	r3, pc, #448	; (adr r3, 8011718 <__ieee754_pow+0x9f0>)
 8011558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801155c:	4680      	mov	r8, r0
 801155e:	4689      	mov	r9, r1
 8011560:	4620      	mov	r0, r4
 8011562:	4629      	mov	r1, r5
 8011564:	f7ef f858 	bl	8000618 <__aeabi_dmul>
 8011568:	4602      	mov	r2, r0
 801156a:	460b      	mov	r3, r1
 801156c:	4640      	mov	r0, r8
 801156e:	4649      	mov	r1, r9
 8011570:	f7ee fe9c 	bl	80002ac <__adddf3>
 8011574:	4604      	mov	r4, r0
 8011576:	460d      	mov	r5, r1
 8011578:	4602      	mov	r2, r0
 801157a:	460b      	mov	r3, r1
 801157c:	4630      	mov	r0, r6
 801157e:	4639      	mov	r1, r7
 8011580:	f7ee fe94 	bl	80002ac <__adddf3>
 8011584:	4632      	mov	r2, r6
 8011586:	463b      	mov	r3, r7
 8011588:	4680      	mov	r8, r0
 801158a:	4689      	mov	r9, r1
 801158c:	f7ee fe8c 	bl	80002a8 <__aeabi_dsub>
 8011590:	4602      	mov	r2, r0
 8011592:	460b      	mov	r3, r1
 8011594:	4620      	mov	r0, r4
 8011596:	4629      	mov	r1, r5
 8011598:	f7ee fe86 	bl	80002a8 <__aeabi_dsub>
 801159c:	4642      	mov	r2, r8
 801159e:	4606      	mov	r6, r0
 80115a0:	460f      	mov	r7, r1
 80115a2:	464b      	mov	r3, r9
 80115a4:	4640      	mov	r0, r8
 80115a6:	4649      	mov	r1, r9
 80115a8:	f7ef f836 	bl	8000618 <__aeabi_dmul>
 80115ac:	a35c      	add	r3, pc, #368	; (adr r3, 8011720 <__ieee754_pow+0x9f8>)
 80115ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b2:	4604      	mov	r4, r0
 80115b4:	460d      	mov	r5, r1
 80115b6:	f7ef f82f 	bl	8000618 <__aeabi_dmul>
 80115ba:	a35b      	add	r3, pc, #364	; (adr r3, 8011728 <__ieee754_pow+0xa00>)
 80115bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c0:	f7ee fe72 	bl	80002a8 <__aeabi_dsub>
 80115c4:	4622      	mov	r2, r4
 80115c6:	462b      	mov	r3, r5
 80115c8:	f7ef f826 	bl	8000618 <__aeabi_dmul>
 80115cc:	a358      	add	r3, pc, #352	; (adr r3, 8011730 <__ieee754_pow+0xa08>)
 80115ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d2:	f7ee fe6b 	bl	80002ac <__adddf3>
 80115d6:	4622      	mov	r2, r4
 80115d8:	462b      	mov	r3, r5
 80115da:	f7ef f81d 	bl	8000618 <__aeabi_dmul>
 80115de:	a356      	add	r3, pc, #344	; (adr r3, 8011738 <__ieee754_pow+0xa10>)
 80115e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e4:	f7ee fe60 	bl	80002a8 <__aeabi_dsub>
 80115e8:	4622      	mov	r2, r4
 80115ea:	462b      	mov	r3, r5
 80115ec:	f7ef f814 	bl	8000618 <__aeabi_dmul>
 80115f0:	a353      	add	r3, pc, #332	; (adr r3, 8011740 <__ieee754_pow+0xa18>)
 80115f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f6:	f7ee fe59 	bl	80002ac <__adddf3>
 80115fa:	4622      	mov	r2, r4
 80115fc:	462b      	mov	r3, r5
 80115fe:	f7ef f80b 	bl	8000618 <__aeabi_dmul>
 8011602:	4602      	mov	r2, r0
 8011604:	460b      	mov	r3, r1
 8011606:	4640      	mov	r0, r8
 8011608:	4649      	mov	r1, r9
 801160a:	f7ee fe4d 	bl	80002a8 <__aeabi_dsub>
 801160e:	4604      	mov	r4, r0
 8011610:	460d      	mov	r5, r1
 8011612:	4602      	mov	r2, r0
 8011614:	460b      	mov	r3, r1
 8011616:	4640      	mov	r0, r8
 8011618:	4649      	mov	r1, r9
 801161a:	f7ee fffd 	bl	8000618 <__aeabi_dmul>
 801161e:	2200      	movs	r2, #0
 8011620:	ec41 0b19 	vmov	d9, r0, r1
 8011624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011628:	4620      	mov	r0, r4
 801162a:	4629      	mov	r1, r5
 801162c:	f7ee fe3c 	bl	80002a8 <__aeabi_dsub>
 8011630:	4602      	mov	r2, r0
 8011632:	460b      	mov	r3, r1
 8011634:	ec51 0b19 	vmov	r0, r1, d9
 8011638:	f7ef f918 	bl	800086c <__aeabi_ddiv>
 801163c:	4632      	mov	r2, r6
 801163e:	4604      	mov	r4, r0
 8011640:	460d      	mov	r5, r1
 8011642:	463b      	mov	r3, r7
 8011644:	4640      	mov	r0, r8
 8011646:	4649      	mov	r1, r9
 8011648:	f7ee ffe6 	bl	8000618 <__aeabi_dmul>
 801164c:	4632      	mov	r2, r6
 801164e:	463b      	mov	r3, r7
 8011650:	f7ee fe2c 	bl	80002ac <__adddf3>
 8011654:	4602      	mov	r2, r0
 8011656:	460b      	mov	r3, r1
 8011658:	4620      	mov	r0, r4
 801165a:	4629      	mov	r1, r5
 801165c:	f7ee fe24 	bl	80002a8 <__aeabi_dsub>
 8011660:	4642      	mov	r2, r8
 8011662:	464b      	mov	r3, r9
 8011664:	f7ee fe20 	bl	80002a8 <__aeabi_dsub>
 8011668:	460b      	mov	r3, r1
 801166a:	4602      	mov	r2, r0
 801166c:	493a      	ldr	r1, [pc, #232]	; (8011758 <__ieee754_pow+0xa30>)
 801166e:	2000      	movs	r0, #0
 8011670:	f7ee fe1a 	bl	80002a8 <__aeabi_dsub>
 8011674:	e9cd 0100 	strd	r0, r1, [sp]
 8011678:	9b01      	ldr	r3, [sp, #4]
 801167a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801167e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011682:	da2f      	bge.n	80116e4 <__ieee754_pow+0x9bc>
 8011684:	4650      	mov	r0, sl
 8011686:	ed9d 0b00 	vldr	d0, [sp]
 801168a:	f001 fac1 	bl	8012c10 <scalbn>
 801168e:	ec51 0b10 	vmov	r0, r1, d0
 8011692:	ec53 2b18 	vmov	r2, r3, d8
 8011696:	f7ff bbe0 	b.w	8010e5a <__ieee754_pow+0x132>
 801169a:	4b30      	ldr	r3, [pc, #192]	; (801175c <__ieee754_pow+0xa34>)
 801169c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80116a0:	429e      	cmp	r6, r3
 80116a2:	f77f af0b 	ble.w	80114bc <__ieee754_pow+0x794>
 80116a6:	4b2e      	ldr	r3, [pc, #184]	; (8011760 <__ieee754_pow+0xa38>)
 80116a8:	440b      	add	r3, r1
 80116aa:	4303      	orrs	r3, r0
 80116ac:	d00b      	beq.n	80116c6 <__ieee754_pow+0x99e>
 80116ae:	a326      	add	r3, pc, #152	; (adr r3, 8011748 <__ieee754_pow+0xa20>)
 80116b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b4:	ec51 0b18 	vmov	r0, r1, d8
 80116b8:	f7ee ffae 	bl	8000618 <__aeabi_dmul>
 80116bc:	a322      	add	r3, pc, #136	; (adr r3, 8011748 <__ieee754_pow+0xa20>)
 80116be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c2:	f7ff bbca 	b.w	8010e5a <__ieee754_pow+0x132>
 80116c6:	4622      	mov	r2, r4
 80116c8:	462b      	mov	r3, r5
 80116ca:	f7ee fded 	bl	80002a8 <__aeabi_dsub>
 80116ce:	4642      	mov	r2, r8
 80116d0:	464b      	mov	r3, r9
 80116d2:	f7ef fa27 	bl	8000b24 <__aeabi_dcmpge>
 80116d6:	2800      	cmp	r0, #0
 80116d8:	f43f aef0 	beq.w	80114bc <__ieee754_pow+0x794>
 80116dc:	e7e7      	b.n	80116ae <__ieee754_pow+0x986>
 80116de:	f04f 0a00 	mov.w	sl, #0
 80116e2:	e717      	b.n	8011514 <__ieee754_pow+0x7ec>
 80116e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116e8:	4619      	mov	r1, r3
 80116ea:	e7d2      	b.n	8011692 <__ieee754_pow+0x96a>
 80116ec:	491a      	ldr	r1, [pc, #104]	; (8011758 <__ieee754_pow+0xa30>)
 80116ee:	2000      	movs	r0, #0
 80116f0:	f7ff bb9e 	b.w	8010e30 <__ieee754_pow+0x108>
 80116f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116f8:	f7ff bb9a 	b.w	8010e30 <__ieee754_pow+0x108>
 80116fc:	9000      	str	r0, [sp, #0]
 80116fe:	f7ff bb76 	b.w	8010dee <__ieee754_pow+0xc6>
 8011702:	2100      	movs	r1, #0
 8011704:	f7ff bb60 	b.w	8010dc8 <__ieee754_pow+0xa0>
 8011708:	00000000 	.word	0x00000000
 801170c:	3fe62e43 	.word	0x3fe62e43
 8011710:	fefa39ef 	.word	0xfefa39ef
 8011714:	3fe62e42 	.word	0x3fe62e42
 8011718:	0ca86c39 	.word	0x0ca86c39
 801171c:	be205c61 	.word	0xbe205c61
 8011720:	72bea4d0 	.word	0x72bea4d0
 8011724:	3e663769 	.word	0x3e663769
 8011728:	c5d26bf1 	.word	0xc5d26bf1
 801172c:	3ebbbd41 	.word	0x3ebbbd41
 8011730:	af25de2c 	.word	0xaf25de2c
 8011734:	3f11566a 	.word	0x3f11566a
 8011738:	16bebd93 	.word	0x16bebd93
 801173c:	3f66c16c 	.word	0x3f66c16c
 8011740:	5555553e 	.word	0x5555553e
 8011744:	3fc55555 	.word	0x3fc55555
 8011748:	c2f8f359 	.word	0xc2f8f359
 801174c:	01a56e1f 	.word	0x01a56e1f
 8011750:	3fe00000 	.word	0x3fe00000
 8011754:	000fffff 	.word	0x000fffff
 8011758:	3ff00000 	.word	0x3ff00000
 801175c:	4090cbff 	.word	0x4090cbff
 8011760:	3f6f3400 	.word	0x3f6f3400
 8011764:	652b82fe 	.word	0x652b82fe
 8011768:	3c971547 	.word	0x3c971547
 801176c:	00000000 	.word	0x00000000

08011770 <__ieee754_rem_pio2>:
 8011770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011774:	ed2d 8b02 	vpush	{d8}
 8011778:	ec55 4b10 	vmov	r4, r5, d0
 801177c:	4bca      	ldr	r3, [pc, #808]	; (8011aa8 <__ieee754_rem_pio2+0x338>)
 801177e:	b08b      	sub	sp, #44	; 0x2c
 8011780:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011784:	4598      	cmp	r8, r3
 8011786:	4682      	mov	sl, r0
 8011788:	9502      	str	r5, [sp, #8]
 801178a:	dc08      	bgt.n	801179e <__ieee754_rem_pio2+0x2e>
 801178c:	2200      	movs	r2, #0
 801178e:	2300      	movs	r3, #0
 8011790:	ed80 0b00 	vstr	d0, [r0]
 8011794:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011798:	f04f 0b00 	mov.w	fp, #0
 801179c:	e028      	b.n	80117f0 <__ieee754_rem_pio2+0x80>
 801179e:	4bc3      	ldr	r3, [pc, #780]	; (8011aac <__ieee754_rem_pio2+0x33c>)
 80117a0:	4598      	cmp	r8, r3
 80117a2:	dc78      	bgt.n	8011896 <__ieee754_rem_pio2+0x126>
 80117a4:	9b02      	ldr	r3, [sp, #8]
 80117a6:	4ec2      	ldr	r6, [pc, #776]	; (8011ab0 <__ieee754_rem_pio2+0x340>)
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	ee10 0a10 	vmov	r0, s0
 80117ae:	a3b0      	add	r3, pc, #704	; (adr r3, 8011a70 <__ieee754_rem_pio2+0x300>)
 80117b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b4:	4629      	mov	r1, r5
 80117b6:	dd39      	ble.n	801182c <__ieee754_rem_pio2+0xbc>
 80117b8:	f7ee fd76 	bl	80002a8 <__aeabi_dsub>
 80117bc:	45b0      	cmp	r8, r6
 80117be:	4604      	mov	r4, r0
 80117c0:	460d      	mov	r5, r1
 80117c2:	d01b      	beq.n	80117fc <__ieee754_rem_pio2+0x8c>
 80117c4:	a3ac      	add	r3, pc, #688	; (adr r3, 8011a78 <__ieee754_rem_pio2+0x308>)
 80117c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ca:	f7ee fd6d 	bl	80002a8 <__aeabi_dsub>
 80117ce:	4602      	mov	r2, r0
 80117d0:	460b      	mov	r3, r1
 80117d2:	e9ca 2300 	strd	r2, r3, [sl]
 80117d6:	4620      	mov	r0, r4
 80117d8:	4629      	mov	r1, r5
 80117da:	f7ee fd65 	bl	80002a8 <__aeabi_dsub>
 80117de:	a3a6      	add	r3, pc, #664	; (adr r3, 8011a78 <__ieee754_rem_pio2+0x308>)
 80117e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e4:	f7ee fd60 	bl	80002a8 <__aeabi_dsub>
 80117e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80117ec:	f04f 0b01 	mov.w	fp, #1
 80117f0:	4658      	mov	r0, fp
 80117f2:	b00b      	add	sp, #44	; 0x2c
 80117f4:	ecbd 8b02 	vpop	{d8}
 80117f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117fc:	a3a0      	add	r3, pc, #640	; (adr r3, 8011a80 <__ieee754_rem_pio2+0x310>)
 80117fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011802:	f7ee fd51 	bl	80002a8 <__aeabi_dsub>
 8011806:	a3a0      	add	r3, pc, #640	; (adr r3, 8011a88 <__ieee754_rem_pio2+0x318>)
 8011808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180c:	4604      	mov	r4, r0
 801180e:	460d      	mov	r5, r1
 8011810:	f7ee fd4a 	bl	80002a8 <__aeabi_dsub>
 8011814:	4602      	mov	r2, r0
 8011816:	460b      	mov	r3, r1
 8011818:	e9ca 2300 	strd	r2, r3, [sl]
 801181c:	4620      	mov	r0, r4
 801181e:	4629      	mov	r1, r5
 8011820:	f7ee fd42 	bl	80002a8 <__aeabi_dsub>
 8011824:	a398      	add	r3, pc, #608	; (adr r3, 8011a88 <__ieee754_rem_pio2+0x318>)
 8011826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182a:	e7db      	b.n	80117e4 <__ieee754_rem_pio2+0x74>
 801182c:	f7ee fd3e 	bl	80002ac <__adddf3>
 8011830:	45b0      	cmp	r8, r6
 8011832:	4604      	mov	r4, r0
 8011834:	460d      	mov	r5, r1
 8011836:	d016      	beq.n	8011866 <__ieee754_rem_pio2+0xf6>
 8011838:	a38f      	add	r3, pc, #572	; (adr r3, 8011a78 <__ieee754_rem_pio2+0x308>)
 801183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801183e:	f7ee fd35 	bl	80002ac <__adddf3>
 8011842:	4602      	mov	r2, r0
 8011844:	460b      	mov	r3, r1
 8011846:	e9ca 2300 	strd	r2, r3, [sl]
 801184a:	4620      	mov	r0, r4
 801184c:	4629      	mov	r1, r5
 801184e:	f7ee fd2b 	bl	80002a8 <__aeabi_dsub>
 8011852:	a389      	add	r3, pc, #548	; (adr r3, 8011a78 <__ieee754_rem_pio2+0x308>)
 8011854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011858:	f7ee fd28 	bl	80002ac <__adddf3>
 801185c:	f04f 3bff 	mov.w	fp, #4294967295
 8011860:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011864:	e7c4      	b.n	80117f0 <__ieee754_rem_pio2+0x80>
 8011866:	a386      	add	r3, pc, #536	; (adr r3, 8011a80 <__ieee754_rem_pio2+0x310>)
 8011868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801186c:	f7ee fd1e 	bl	80002ac <__adddf3>
 8011870:	a385      	add	r3, pc, #532	; (adr r3, 8011a88 <__ieee754_rem_pio2+0x318>)
 8011872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011876:	4604      	mov	r4, r0
 8011878:	460d      	mov	r5, r1
 801187a:	f7ee fd17 	bl	80002ac <__adddf3>
 801187e:	4602      	mov	r2, r0
 8011880:	460b      	mov	r3, r1
 8011882:	e9ca 2300 	strd	r2, r3, [sl]
 8011886:	4620      	mov	r0, r4
 8011888:	4629      	mov	r1, r5
 801188a:	f7ee fd0d 	bl	80002a8 <__aeabi_dsub>
 801188e:	a37e      	add	r3, pc, #504	; (adr r3, 8011a88 <__ieee754_rem_pio2+0x318>)
 8011890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011894:	e7e0      	b.n	8011858 <__ieee754_rem_pio2+0xe8>
 8011896:	4b87      	ldr	r3, [pc, #540]	; (8011ab4 <__ieee754_rem_pio2+0x344>)
 8011898:	4598      	cmp	r8, r3
 801189a:	f300 80d9 	bgt.w	8011a50 <__ieee754_rem_pio2+0x2e0>
 801189e:	f001 f88f 	bl	80129c0 <fabs>
 80118a2:	ec55 4b10 	vmov	r4, r5, d0
 80118a6:	ee10 0a10 	vmov	r0, s0
 80118aa:	a379      	add	r3, pc, #484	; (adr r3, 8011a90 <__ieee754_rem_pio2+0x320>)
 80118ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b0:	4629      	mov	r1, r5
 80118b2:	f7ee feb1 	bl	8000618 <__aeabi_dmul>
 80118b6:	4b80      	ldr	r3, [pc, #512]	; (8011ab8 <__ieee754_rem_pio2+0x348>)
 80118b8:	2200      	movs	r2, #0
 80118ba:	f7ee fcf7 	bl	80002ac <__adddf3>
 80118be:	f7ef f95b 	bl	8000b78 <__aeabi_d2iz>
 80118c2:	4683      	mov	fp, r0
 80118c4:	f7ee fe3e 	bl	8000544 <__aeabi_i2d>
 80118c8:	4602      	mov	r2, r0
 80118ca:	460b      	mov	r3, r1
 80118cc:	ec43 2b18 	vmov	d8, r2, r3
 80118d0:	a367      	add	r3, pc, #412	; (adr r3, 8011a70 <__ieee754_rem_pio2+0x300>)
 80118d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d6:	f7ee fe9f 	bl	8000618 <__aeabi_dmul>
 80118da:	4602      	mov	r2, r0
 80118dc:	460b      	mov	r3, r1
 80118de:	4620      	mov	r0, r4
 80118e0:	4629      	mov	r1, r5
 80118e2:	f7ee fce1 	bl	80002a8 <__aeabi_dsub>
 80118e6:	a364      	add	r3, pc, #400	; (adr r3, 8011a78 <__ieee754_rem_pio2+0x308>)
 80118e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ec:	4606      	mov	r6, r0
 80118ee:	460f      	mov	r7, r1
 80118f0:	ec51 0b18 	vmov	r0, r1, d8
 80118f4:	f7ee fe90 	bl	8000618 <__aeabi_dmul>
 80118f8:	f1bb 0f1f 	cmp.w	fp, #31
 80118fc:	4604      	mov	r4, r0
 80118fe:	460d      	mov	r5, r1
 8011900:	dc0d      	bgt.n	801191e <__ieee754_rem_pio2+0x1ae>
 8011902:	4b6e      	ldr	r3, [pc, #440]	; (8011abc <__ieee754_rem_pio2+0x34c>)
 8011904:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801190c:	4543      	cmp	r3, r8
 801190e:	d006      	beq.n	801191e <__ieee754_rem_pio2+0x1ae>
 8011910:	4622      	mov	r2, r4
 8011912:	462b      	mov	r3, r5
 8011914:	4630      	mov	r0, r6
 8011916:	4639      	mov	r1, r7
 8011918:	f7ee fcc6 	bl	80002a8 <__aeabi_dsub>
 801191c:	e00f      	b.n	801193e <__ieee754_rem_pio2+0x1ce>
 801191e:	462b      	mov	r3, r5
 8011920:	4622      	mov	r2, r4
 8011922:	4630      	mov	r0, r6
 8011924:	4639      	mov	r1, r7
 8011926:	f7ee fcbf 	bl	80002a8 <__aeabi_dsub>
 801192a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801192e:	9303      	str	r3, [sp, #12]
 8011930:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011934:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011938:	f1b8 0f10 	cmp.w	r8, #16
 801193c:	dc02      	bgt.n	8011944 <__ieee754_rem_pio2+0x1d4>
 801193e:	e9ca 0100 	strd	r0, r1, [sl]
 8011942:	e039      	b.n	80119b8 <__ieee754_rem_pio2+0x248>
 8011944:	a34e      	add	r3, pc, #312	; (adr r3, 8011a80 <__ieee754_rem_pio2+0x310>)
 8011946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194a:	ec51 0b18 	vmov	r0, r1, d8
 801194e:	f7ee fe63 	bl	8000618 <__aeabi_dmul>
 8011952:	4604      	mov	r4, r0
 8011954:	460d      	mov	r5, r1
 8011956:	4602      	mov	r2, r0
 8011958:	460b      	mov	r3, r1
 801195a:	4630      	mov	r0, r6
 801195c:	4639      	mov	r1, r7
 801195e:	f7ee fca3 	bl	80002a8 <__aeabi_dsub>
 8011962:	4602      	mov	r2, r0
 8011964:	460b      	mov	r3, r1
 8011966:	4680      	mov	r8, r0
 8011968:	4689      	mov	r9, r1
 801196a:	4630      	mov	r0, r6
 801196c:	4639      	mov	r1, r7
 801196e:	f7ee fc9b 	bl	80002a8 <__aeabi_dsub>
 8011972:	4622      	mov	r2, r4
 8011974:	462b      	mov	r3, r5
 8011976:	f7ee fc97 	bl	80002a8 <__aeabi_dsub>
 801197a:	a343      	add	r3, pc, #268	; (adr r3, 8011a88 <__ieee754_rem_pio2+0x318>)
 801197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011980:	4604      	mov	r4, r0
 8011982:	460d      	mov	r5, r1
 8011984:	ec51 0b18 	vmov	r0, r1, d8
 8011988:	f7ee fe46 	bl	8000618 <__aeabi_dmul>
 801198c:	4622      	mov	r2, r4
 801198e:	462b      	mov	r3, r5
 8011990:	f7ee fc8a 	bl	80002a8 <__aeabi_dsub>
 8011994:	4602      	mov	r2, r0
 8011996:	460b      	mov	r3, r1
 8011998:	4604      	mov	r4, r0
 801199a:	460d      	mov	r5, r1
 801199c:	4640      	mov	r0, r8
 801199e:	4649      	mov	r1, r9
 80119a0:	f7ee fc82 	bl	80002a8 <__aeabi_dsub>
 80119a4:	9a03      	ldr	r2, [sp, #12]
 80119a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80119aa:	1ad3      	subs	r3, r2, r3
 80119ac:	2b31      	cmp	r3, #49	; 0x31
 80119ae:	dc24      	bgt.n	80119fa <__ieee754_rem_pio2+0x28a>
 80119b0:	e9ca 0100 	strd	r0, r1, [sl]
 80119b4:	4646      	mov	r6, r8
 80119b6:	464f      	mov	r7, r9
 80119b8:	e9da 8900 	ldrd	r8, r9, [sl]
 80119bc:	4630      	mov	r0, r6
 80119be:	4642      	mov	r2, r8
 80119c0:	464b      	mov	r3, r9
 80119c2:	4639      	mov	r1, r7
 80119c4:	f7ee fc70 	bl	80002a8 <__aeabi_dsub>
 80119c8:	462b      	mov	r3, r5
 80119ca:	4622      	mov	r2, r4
 80119cc:	f7ee fc6c 	bl	80002a8 <__aeabi_dsub>
 80119d0:	9b02      	ldr	r3, [sp, #8]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80119d8:	f6bf af0a 	bge.w	80117f0 <__ieee754_rem_pio2+0x80>
 80119dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80119e0:	f8ca 3004 	str.w	r3, [sl, #4]
 80119e4:	f8ca 8000 	str.w	r8, [sl]
 80119e8:	f8ca 0008 	str.w	r0, [sl, #8]
 80119ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80119f0:	f8ca 300c 	str.w	r3, [sl, #12]
 80119f4:	f1cb 0b00 	rsb	fp, fp, #0
 80119f8:	e6fa      	b.n	80117f0 <__ieee754_rem_pio2+0x80>
 80119fa:	a327      	add	r3, pc, #156	; (adr r3, 8011a98 <__ieee754_rem_pio2+0x328>)
 80119fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a00:	ec51 0b18 	vmov	r0, r1, d8
 8011a04:	f7ee fe08 	bl	8000618 <__aeabi_dmul>
 8011a08:	4604      	mov	r4, r0
 8011a0a:	460d      	mov	r5, r1
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	460b      	mov	r3, r1
 8011a10:	4640      	mov	r0, r8
 8011a12:	4649      	mov	r1, r9
 8011a14:	f7ee fc48 	bl	80002a8 <__aeabi_dsub>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	4606      	mov	r6, r0
 8011a1e:	460f      	mov	r7, r1
 8011a20:	4640      	mov	r0, r8
 8011a22:	4649      	mov	r1, r9
 8011a24:	f7ee fc40 	bl	80002a8 <__aeabi_dsub>
 8011a28:	4622      	mov	r2, r4
 8011a2a:	462b      	mov	r3, r5
 8011a2c:	f7ee fc3c 	bl	80002a8 <__aeabi_dsub>
 8011a30:	a31b      	add	r3, pc, #108	; (adr r3, 8011aa0 <__ieee754_rem_pio2+0x330>)
 8011a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a36:	4604      	mov	r4, r0
 8011a38:	460d      	mov	r5, r1
 8011a3a:	ec51 0b18 	vmov	r0, r1, d8
 8011a3e:	f7ee fdeb 	bl	8000618 <__aeabi_dmul>
 8011a42:	4622      	mov	r2, r4
 8011a44:	462b      	mov	r3, r5
 8011a46:	f7ee fc2f 	bl	80002a8 <__aeabi_dsub>
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	460d      	mov	r5, r1
 8011a4e:	e75f      	b.n	8011910 <__ieee754_rem_pio2+0x1a0>
 8011a50:	4b1b      	ldr	r3, [pc, #108]	; (8011ac0 <__ieee754_rem_pio2+0x350>)
 8011a52:	4598      	cmp	r8, r3
 8011a54:	dd36      	ble.n	8011ac4 <__ieee754_rem_pio2+0x354>
 8011a56:	ee10 2a10 	vmov	r2, s0
 8011a5a:	462b      	mov	r3, r5
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	4629      	mov	r1, r5
 8011a60:	f7ee fc22 	bl	80002a8 <__aeabi_dsub>
 8011a64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011a68:	e9ca 0100 	strd	r0, r1, [sl]
 8011a6c:	e694      	b.n	8011798 <__ieee754_rem_pio2+0x28>
 8011a6e:	bf00      	nop
 8011a70:	54400000 	.word	0x54400000
 8011a74:	3ff921fb 	.word	0x3ff921fb
 8011a78:	1a626331 	.word	0x1a626331
 8011a7c:	3dd0b461 	.word	0x3dd0b461
 8011a80:	1a600000 	.word	0x1a600000
 8011a84:	3dd0b461 	.word	0x3dd0b461
 8011a88:	2e037073 	.word	0x2e037073
 8011a8c:	3ba3198a 	.word	0x3ba3198a
 8011a90:	6dc9c883 	.word	0x6dc9c883
 8011a94:	3fe45f30 	.word	0x3fe45f30
 8011a98:	2e000000 	.word	0x2e000000
 8011a9c:	3ba3198a 	.word	0x3ba3198a
 8011aa0:	252049c1 	.word	0x252049c1
 8011aa4:	397b839a 	.word	0x397b839a
 8011aa8:	3fe921fb 	.word	0x3fe921fb
 8011aac:	4002d97b 	.word	0x4002d97b
 8011ab0:	3ff921fb 	.word	0x3ff921fb
 8011ab4:	413921fb 	.word	0x413921fb
 8011ab8:	3fe00000 	.word	0x3fe00000
 8011abc:	080130f0 	.word	0x080130f0
 8011ac0:	7fefffff 	.word	0x7fefffff
 8011ac4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011ac8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8011acc:	ee10 0a10 	vmov	r0, s0
 8011ad0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8011ad4:	ee10 6a10 	vmov	r6, s0
 8011ad8:	460f      	mov	r7, r1
 8011ada:	f7ef f84d 	bl	8000b78 <__aeabi_d2iz>
 8011ade:	f7ee fd31 	bl	8000544 <__aeabi_i2d>
 8011ae2:	4602      	mov	r2, r0
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	4630      	mov	r0, r6
 8011ae8:	4639      	mov	r1, r7
 8011aea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011aee:	f7ee fbdb 	bl	80002a8 <__aeabi_dsub>
 8011af2:	4b22      	ldr	r3, [pc, #136]	; (8011b7c <__ieee754_rem_pio2+0x40c>)
 8011af4:	2200      	movs	r2, #0
 8011af6:	f7ee fd8f 	bl	8000618 <__aeabi_dmul>
 8011afa:	460f      	mov	r7, r1
 8011afc:	4606      	mov	r6, r0
 8011afe:	f7ef f83b 	bl	8000b78 <__aeabi_d2iz>
 8011b02:	f7ee fd1f 	bl	8000544 <__aeabi_i2d>
 8011b06:	4602      	mov	r2, r0
 8011b08:	460b      	mov	r3, r1
 8011b0a:	4630      	mov	r0, r6
 8011b0c:	4639      	mov	r1, r7
 8011b0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011b12:	f7ee fbc9 	bl	80002a8 <__aeabi_dsub>
 8011b16:	4b19      	ldr	r3, [pc, #100]	; (8011b7c <__ieee754_rem_pio2+0x40c>)
 8011b18:	2200      	movs	r2, #0
 8011b1a:	f7ee fd7d 	bl	8000618 <__aeabi_dmul>
 8011b1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011b22:	ad04      	add	r5, sp, #16
 8011b24:	f04f 0803 	mov.w	r8, #3
 8011b28:	46a9      	mov	r9, r5
 8011b2a:	2600      	movs	r6, #0
 8011b2c:	2700      	movs	r7, #0
 8011b2e:	4632      	mov	r2, r6
 8011b30:	463b      	mov	r3, r7
 8011b32:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011b36:	46c3      	mov	fp, r8
 8011b38:	3d08      	subs	r5, #8
 8011b3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8011b3e:	f7ee ffd3 	bl	8000ae8 <__aeabi_dcmpeq>
 8011b42:	2800      	cmp	r0, #0
 8011b44:	d1f3      	bne.n	8011b2e <__ieee754_rem_pio2+0x3be>
 8011b46:	4b0e      	ldr	r3, [pc, #56]	; (8011b80 <__ieee754_rem_pio2+0x410>)
 8011b48:	9301      	str	r3, [sp, #4]
 8011b4a:	2302      	movs	r3, #2
 8011b4c:	9300      	str	r3, [sp, #0]
 8011b4e:	4622      	mov	r2, r4
 8011b50:	465b      	mov	r3, fp
 8011b52:	4651      	mov	r1, sl
 8011b54:	4648      	mov	r0, r9
 8011b56:	f000 f993 	bl	8011e80 <__kernel_rem_pio2>
 8011b5a:	9b02      	ldr	r3, [sp, #8]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	4683      	mov	fp, r0
 8011b60:	f6bf ae46 	bge.w	80117f0 <__ieee754_rem_pio2+0x80>
 8011b64:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011b68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011b6c:	f8ca 3004 	str.w	r3, [sl, #4]
 8011b70:	f8da 300c 	ldr.w	r3, [sl, #12]
 8011b74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011b78:	e73a      	b.n	80119f0 <__ieee754_rem_pio2+0x280>
 8011b7a:	bf00      	nop
 8011b7c:	41700000 	.word	0x41700000
 8011b80:	08013170 	.word	0x08013170

08011b84 <__ieee754_sqrt>:
 8011b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b88:	ec55 4b10 	vmov	r4, r5, d0
 8011b8c:	4e56      	ldr	r6, [pc, #344]	; (8011ce8 <__ieee754_sqrt+0x164>)
 8011b8e:	43ae      	bics	r6, r5
 8011b90:	ee10 0a10 	vmov	r0, s0
 8011b94:	ee10 3a10 	vmov	r3, s0
 8011b98:	4629      	mov	r1, r5
 8011b9a:	462a      	mov	r2, r5
 8011b9c:	d110      	bne.n	8011bc0 <__ieee754_sqrt+0x3c>
 8011b9e:	ee10 2a10 	vmov	r2, s0
 8011ba2:	462b      	mov	r3, r5
 8011ba4:	f7ee fd38 	bl	8000618 <__aeabi_dmul>
 8011ba8:	4602      	mov	r2, r0
 8011baa:	460b      	mov	r3, r1
 8011bac:	4620      	mov	r0, r4
 8011bae:	4629      	mov	r1, r5
 8011bb0:	f7ee fb7c 	bl	80002ac <__adddf3>
 8011bb4:	4604      	mov	r4, r0
 8011bb6:	460d      	mov	r5, r1
 8011bb8:	ec45 4b10 	vmov	d0, r4, r5
 8011bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc0:	2d00      	cmp	r5, #0
 8011bc2:	dc10      	bgt.n	8011be6 <__ieee754_sqrt+0x62>
 8011bc4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011bc8:	4330      	orrs	r0, r6
 8011bca:	d0f5      	beq.n	8011bb8 <__ieee754_sqrt+0x34>
 8011bcc:	b15d      	cbz	r5, 8011be6 <__ieee754_sqrt+0x62>
 8011bce:	ee10 2a10 	vmov	r2, s0
 8011bd2:	462b      	mov	r3, r5
 8011bd4:	ee10 0a10 	vmov	r0, s0
 8011bd8:	f7ee fb66 	bl	80002a8 <__aeabi_dsub>
 8011bdc:	4602      	mov	r2, r0
 8011bde:	460b      	mov	r3, r1
 8011be0:	f7ee fe44 	bl	800086c <__aeabi_ddiv>
 8011be4:	e7e6      	b.n	8011bb4 <__ieee754_sqrt+0x30>
 8011be6:	1509      	asrs	r1, r1, #20
 8011be8:	d076      	beq.n	8011cd8 <__ieee754_sqrt+0x154>
 8011bea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011bee:	07ce      	lsls	r6, r1, #31
 8011bf0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8011bf4:	bf5e      	ittt	pl
 8011bf6:	0fda      	lsrpl	r2, r3, #31
 8011bf8:	005b      	lslpl	r3, r3, #1
 8011bfa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8011bfe:	0fda      	lsrs	r2, r3, #31
 8011c00:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8011c04:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8011c08:	2000      	movs	r0, #0
 8011c0a:	106d      	asrs	r5, r5, #1
 8011c0c:	005b      	lsls	r3, r3, #1
 8011c0e:	f04f 0e16 	mov.w	lr, #22
 8011c12:	4684      	mov	ip, r0
 8011c14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011c18:	eb0c 0401 	add.w	r4, ip, r1
 8011c1c:	4294      	cmp	r4, r2
 8011c1e:	bfde      	ittt	le
 8011c20:	1b12      	suble	r2, r2, r4
 8011c22:	eb04 0c01 	addle.w	ip, r4, r1
 8011c26:	1840      	addle	r0, r0, r1
 8011c28:	0052      	lsls	r2, r2, #1
 8011c2a:	f1be 0e01 	subs.w	lr, lr, #1
 8011c2e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011c32:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011c36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011c3a:	d1ed      	bne.n	8011c18 <__ieee754_sqrt+0x94>
 8011c3c:	4671      	mov	r1, lr
 8011c3e:	2720      	movs	r7, #32
 8011c40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011c44:	4562      	cmp	r2, ip
 8011c46:	eb04 060e 	add.w	r6, r4, lr
 8011c4a:	dc02      	bgt.n	8011c52 <__ieee754_sqrt+0xce>
 8011c4c:	d113      	bne.n	8011c76 <__ieee754_sqrt+0xf2>
 8011c4e:	429e      	cmp	r6, r3
 8011c50:	d811      	bhi.n	8011c76 <__ieee754_sqrt+0xf2>
 8011c52:	2e00      	cmp	r6, #0
 8011c54:	eb06 0e04 	add.w	lr, r6, r4
 8011c58:	da43      	bge.n	8011ce2 <__ieee754_sqrt+0x15e>
 8011c5a:	f1be 0f00 	cmp.w	lr, #0
 8011c5e:	db40      	blt.n	8011ce2 <__ieee754_sqrt+0x15e>
 8011c60:	f10c 0801 	add.w	r8, ip, #1
 8011c64:	eba2 020c 	sub.w	r2, r2, ip
 8011c68:	429e      	cmp	r6, r3
 8011c6a:	bf88      	it	hi
 8011c6c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011c70:	1b9b      	subs	r3, r3, r6
 8011c72:	4421      	add	r1, r4
 8011c74:	46c4      	mov	ip, r8
 8011c76:	0052      	lsls	r2, r2, #1
 8011c78:	3f01      	subs	r7, #1
 8011c7a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011c7e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011c82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011c86:	d1dd      	bne.n	8011c44 <__ieee754_sqrt+0xc0>
 8011c88:	4313      	orrs	r3, r2
 8011c8a:	d006      	beq.n	8011c9a <__ieee754_sqrt+0x116>
 8011c8c:	1c4c      	adds	r4, r1, #1
 8011c8e:	bf13      	iteet	ne
 8011c90:	3101      	addne	r1, #1
 8011c92:	3001      	addeq	r0, #1
 8011c94:	4639      	moveq	r1, r7
 8011c96:	f021 0101 	bicne.w	r1, r1, #1
 8011c9a:	1043      	asrs	r3, r0, #1
 8011c9c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011ca0:	0849      	lsrs	r1, r1, #1
 8011ca2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011ca6:	07c2      	lsls	r2, r0, #31
 8011ca8:	bf48      	it	mi
 8011caa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8011cae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8011cb2:	460c      	mov	r4, r1
 8011cb4:	463d      	mov	r5, r7
 8011cb6:	e77f      	b.n	8011bb8 <__ieee754_sqrt+0x34>
 8011cb8:	0ada      	lsrs	r2, r3, #11
 8011cba:	3815      	subs	r0, #21
 8011cbc:	055b      	lsls	r3, r3, #21
 8011cbe:	2a00      	cmp	r2, #0
 8011cc0:	d0fa      	beq.n	8011cb8 <__ieee754_sqrt+0x134>
 8011cc2:	02d7      	lsls	r7, r2, #11
 8011cc4:	d50a      	bpl.n	8011cdc <__ieee754_sqrt+0x158>
 8011cc6:	f1c1 0420 	rsb	r4, r1, #32
 8011cca:	fa23 f404 	lsr.w	r4, r3, r4
 8011cce:	1e4d      	subs	r5, r1, #1
 8011cd0:	408b      	lsls	r3, r1
 8011cd2:	4322      	orrs	r2, r4
 8011cd4:	1b41      	subs	r1, r0, r5
 8011cd6:	e788      	b.n	8011bea <__ieee754_sqrt+0x66>
 8011cd8:	4608      	mov	r0, r1
 8011cda:	e7f0      	b.n	8011cbe <__ieee754_sqrt+0x13a>
 8011cdc:	0052      	lsls	r2, r2, #1
 8011cde:	3101      	adds	r1, #1
 8011ce0:	e7ef      	b.n	8011cc2 <__ieee754_sqrt+0x13e>
 8011ce2:	46e0      	mov	r8, ip
 8011ce4:	e7be      	b.n	8011c64 <__ieee754_sqrt+0xe0>
 8011ce6:	bf00      	nop
 8011ce8:	7ff00000 	.word	0x7ff00000
 8011cec:	00000000 	.word	0x00000000

08011cf0 <__kernel_cos>:
 8011cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cf4:	ec57 6b10 	vmov	r6, r7, d0
 8011cf8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011cfc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011d00:	ed8d 1b00 	vstr	d1, [sp]
 8011d04:	da07      	bge.n	8011d16 <__kernel_cos+0x26>
 8011d06:	ee10 0a10 	vmov	r0, s0
 8011d0a:	4639      	mov	r1, r7
 8011d0c:	f7ee ff34 	bl	8000b78 <__aeabi_d2iz>
 8011d10:	2800      	cmp	r0, #0
 8011d12:	f000 8088 	beq.w	8011e26 <__kernel_cos+0x136>
 8011d16:	4632      	mov	r2, r6
 8011d18:	463b      	mov	r3, r7
 8011d1a:	4630      	mov	r0, r6
 8011d1c:	4639      	mov	r1, r7
 8011d1e:	f7ee fc7b 	bl	8000618 <__aeabi_dmul>
 8011d22:	4b51      	ldr	r3, [pc, #324]	; (8011e68 <__kernel_cos+0x178>)
 8011d24:	2200      	movs	r2, #0
 8011d26:	4604      	mov	r4, r0
 8011d28:	460d      	mov	r5, r1
 8011d2a:	f7ee fc75 	bl	8000618 <__aeabi_dmul>
 8011d2e:	a340      	add	r3, pc, #256	; (adr r3, 8011e30 <__kernel_cos+0x140>)
 8011d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d34:	4682      	mov	sl, r0
 8011d36:	468b      	mov	fp, r1
 8011d38:	4620      	mov	r0, r4
 8011d3a:	4629      	mov	r1, r5
 8011d3c:	f7ee fc6c 	bl	8000618 <__aeabi_dmul>
 8011d40:	a33d      	add	r3, pc, #244	; (adr r3, 8011e38 <__kernel_cos+0x148>)
 8011d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d46:	f7ee fab1 	bl	80002ac <__adddf3>
 8011d4a:	4622      	mov	r2, r4
 8011d4c:	462b      	mov	r3, r5
 8011d4e:	f7ee fc63 	bl	8000618 <__aeabi_dmul>
 8011d52:	a33b      	add	r3, pc, #236	; (adr r3, 8011e40 <__kernel_cos+0x150>)
 8011d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d58:	f7ee faa6 	bl	80002a8 <__aeabi_dsub>
 8011d5c:	4622      	mov	r2, r4
 8011d5e:	462b      	mov	r3, r5
 8011d60:	f7ee fc5a 	bl	8000618 <__aeabi_dmul>
 8011d64:	a338      	add	r3, pc, #224	; (adr r3, 8011e48 <__kernel_cos+0x158>)
 8011d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6a:	f7ee fa9f 	bl	80002ac <__adddf3>
 8011d6e:	4622      	mov	r2, r4
 8011d70:	462b      	mov	r3, r5
 8011d72:	f7ee fc51 	bl	8000618 <__aeabi_dmul>
 8011d76:	a336      	add	r3, pc, #216	; (adr r3, 8011e50 <__kernel_cos+0x160>)
 8011d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7c:	f7ee fa94 	bl	80002a8 <__aeabi_dsub>
 8011d80:	4622      	mov	r2, r4
 8011d82:	462b      	mov	r3, r5
 8011d84:	f7ee fc48 	bl	8000618 <__aeabi_dmul>
 8011d88:	a333      	add	r3, pc, #204	; (adr r3, 8011e58 <__kernel_cos+0x168>)
 8011d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d8e:	f7ee fa8d 	bl	80002ac <__adddf3>
 8011d92:	4622      	mov	r2, r4
 8011d94:	462b      	mov	r3, r5
 8011d96:	f7ee fc3f 	bl	8000618 <__aeabi_dmul>
 8011d9a:	4622      	mov	r2, r4
 8011d9c:	462b      	mov	r3, r5
 8011d9e:	f7ee fc3b 	bl	8000618 <__aeabi_dmul>
 8011da2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011da6:	4604      	mov	r4, r0
 8011da8:	460d      	mov	r5, r1
 8011daa:	4630      	mov	r0, r6
 8011dac:	4639      	mov	r1, r7
 8011dae:	f7ee fc33 	bl	8000618 <__aeabi_dmul>
 8011db2:	460b      	mov	r3, r1
 8011db4:	4602      	mov	r2, r0
 8011db6:	4629      	mov	r1, r5
 8011db8:	4620      	mov	r0, r4
 8011dba:	f7ee fa75 	bl	80002a8 <__aeabi_dsub>
 8011dbe:	4b2b      	ldr	r3, [pc, #172]	; (8011e6c <__kernel_cos+0x17c>)
 8011dc0:	4598      	cmp	r8, r3
 8011dc2:	4606      	mov	r6, r0
 8011dc4:	460f      	mov	r7, r1
 8011dc6:	dc10      	bgt.n	8011dea <__kernel_cos+0xfa>
 8011dc8:	4602      	mov	r2, r0
 8011dca:	460b      	mov	r3, r1
 8011dcc:	4650      	mov	r0, sl
 8011dce:	4659      	mov	r1, fp
 8011dd0:	f7ee fa6a 	bl	80002a8 <__aeabi_dsub>
 8011dd4:	460b      	mov	r3, r1
 8011dd6:	4926      	ldr	r1, [pc, #152]	; (8011e70 <__kernel_cos+0x180>)
 8011dd8:	4602      	mov	r2, r0
 8011dda:	2000      	movs	r0, #0
 8011ddc:	f7ee fa64 	bl	80002a8 <__aeabi_dsub>
 8011de0:	ec41 0b10 	vmov	d0, r0, r1
 8011de4:	b003      	add	sp, #12
 8011de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dea:	4b22      	ldr	r3, [pc, #136]	; (8011e74 <__kernel_cos+0x184>)
 8011dec:	4920      	ldr	r1, [pc, #128]	; (8011e70 <__kernel_cos+0x180>)
 8011dee:	4598      	cmp	r8, r3
 8011df0:	bfcc      	ite	gt
 8011df2:	4d21      	ldrgt	r5, [pc, #132]	; (8011e78 <__kernel_cos+0x188>)
 8011df4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011df8:	2400      	movs	r4, #0
 8011dfa:	4622      	mov	r2, r4
 8011dfc:	462b      	mov	r3, r5
 8011dfe:	2000      	movs	r0, #0
 8011e00:	f7ee fa52 	bl	80002a8 <__aeabi_dsub>
 8011e04:	4622      	mov	r2, r4
 8011e06:	4680      	mov	r8, r0
 8011e08:	4689      	mov	r9, r1
 8011e0a:	462b      	mov	r3, r5
 8011e0c:	4650      	mov	r0, sl
 8011e0e:	4659      	mov	r1, fp
 8011e10:	f7ee fa4a 	bl	80002a8 <__aeabi_dsub>
 8011e14:	4632      	mov	r2, r6
 8011e16:	463b      	mov	r3, r7
 8011e18:	f7ee fa46 	bl	80002a8 <__aeabi_dsub>
 8011e1c:	4602      	mov	r2, r0
 8011e1e:	460b      	mov	r3, r1
 8011e20:	4640      	mov	r0, r8
 8011e22:	4649      	mov	r1, r9
 8011e24:	e7da      	b.n	8011ddc <__kernel_cos+0xec>
 8011e26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011e60 <__kernel_cos+0x170>
 8011e2a:	e7db      	b.n	8011de4 <__kernel_cos+0xf4>
 8011e2c:	f3af 8000 	nop.w
 8011e30:	be8838d4 	.word	0xbe8838d4
 8011e34:	bda8fae9 	.word	0xbda8fae9
 8011e38:	bdb4b1c4 	.word	0xbdb4b1c4
 8011e3c:	3e21ee9e 	.word	0x3e21ee9e
 8011e40:	809c52ad 	.word	0x809c52ad
 8011e44:	3e927e4f 	.word	0x3e927e4f
 8011e48:	19cb1590 	.word	0x19cb1590
 8011e4c:	3efa01a0 	.word	0x3efa01a0
 8011e50:	16c15177 	.word	0x16c15177
 8011e54:	3f56c16c 	.word	0x3f56c16c
 8011e58:	5555554c 	.word	0x5555554c
 8011e5c:	3fa55555 	.word	0x3fa55555
 8011e60:	00000000 	.word	0x00000000
 8011e64:	3ff00000 	.word	0x3ff00000
 8011e68:	3fe00000 	.word	0x3fe00000
 8011e6c:	3fd33332 	.word	0x3fd33332
 8011e70:	3ff00000 	.word	0x3ff00000
 8011e74:	3fe90000 	.word	0x3fe90000
 8011e78:	3fd20000 	.word	0x3fd20000
 8011e7c:	00000000 	.word	0x00000000

08011e80 <__kernel_rem_pio2>:
 8011e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e84:	ed2d 8b02 	vpush	{d8}
 8011e88:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011e8c:	f112 0f14 	cmn.w	r2, #20
 8011e90:	9308      	str	r3, [sp, #32]
 8011e92:	9101      	str	r1, [sp, #4]
 8011e94:	4bc6      	ldr	r3, [pc, #792]	; (80121b0 <__kernel_rem_pio2+0x330>)
 8011e96:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8011e98:	9009      	str	r0, [sp, #36]	; 0x24
 8011e9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e9e:	9304      	str	r3, [sp, #16]
 8011ea0:	9b08      	ldr	r3, [sp, #32]
 8011ea2:	f103 33ff 	add.w	r3, r3, #4294967295
 8011ea6:	bfa8      	it	ge
 8011ea8:	1ed4      	subge	r4, r2, #3
 8011eaa:	9306      	str	r3, [sp, #24]
 8011eac:	bfb2      	itee	lt
 8011eae:	2400      	movlt	r4, #0
 8011eb0:	2318      	movge	r3, #24
 8011eb2:	fb94 f4f3 	sdivge	r4, r4, r3
 8011eb6:	f06f 0317 	mvn.w	r3, #23
 8011eba:	fb04 3303 	mla	r3, r4, r3, r3
 8011ebe:	eb03 0a02 	add.w	sl, r3, r2
 8011ec2:	9b04      	ldr	r3, [sp, #16]
 8011ec4:	9a06      	ldr	r2, [sp, #24]
 8011ec6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80121a0 <__kernel_rem_pio2+0x320>
 8011eca:	eb03 0802 	add.w	r8, r3, r2
 8011ece:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011ed0:	1aa7      	subs	r7, r4, r2
 8011ed2:	ae20      	add	r6, sp, #128	; 0x80
 8011ed4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011ed8:	2500      	movs	r5, #0
 8011eda:	4545      	cmp	r5, r8
 8011edc:	dd18      	ble.n	8011f10 <__kernel_rem_pio2+0x90>
 8011ede:	9b08      	ldr	r3, [sp, #32]
 8011ee0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011ee4:	aa20      	add	r2, sp, #128	; 0x80
 8011ee6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80121a0 <__kernel_rem_pio2+0x320>
 8011eea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011eee:	f1c3 0301 	rsb	r3, r3, #1
 8011ef2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8011ef6:	9307      	str	r3, [sp, #28]
 8011ef8:	9b07      	ldr	r3, [sp, #28]
 8011efa:	9a04      	ldr	r2, [sp, #16]
 8011efc:	4443      	add	r3, r8
 8011efe:	429a      	cmp	r2, r3
 8011f00:	db2f      	blt.n	8011f62 <__kernel_rem_pio2+0xe2>
 8011f02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011f06:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011f0a:	462f      	mov	r7, r5
 8011f0c:	2600      	movs	r6, #0
 8011f0e:	e01b      	b.n	8011f48 <__kernel_rem_pio2+0xc8>
 8011f10:	42ef      	cmn	r7, r5
 8011f12:	d407      	bmi.n	8011f24 <__kernel_rem_pio2+0xa4>
 8011f14:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011f18:	f7ee fb14 	bl	8000544 <__aeabi_i2d>
 8011f1c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011f20:	3501      	adds	r5, #1
 8011f22:	e7da      	b.n	8011eda <__kernel_rem_pio2+0x5a>
 8011f24:	ec51 0b18 	vmov	r0, r1, d8
 8011f28:	e7f8      	b.n	8011f1c <__kernel_rem_pio2+0x9c>
 8011f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f2e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011f32:	f7ee fb71 	bl	8000618 <__aeabi_dmul>
 8011f36:	4602      	mov	r2, r0
 8011f38:	460b      	mov	r3, r1
 8011f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f3e:	f7ee f9b5 	bl	80002ac <__adddf3>
 8011f42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f46:	3601      	adds	r6, #1
 8011f48:	9b06      	ldr	r3, [sp, #24]
 8011f4a:	429e      	cmp	r6, r3
 8011f4c:	f1a7 0708 	sub.w	r7, r7, #8
 8011f50:	ddeb      	ble.n	8011f2a <__kernel_rem_pio2+0xaa>
 8011f52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f56:	3508      	adds	r5, #8
 8011f58:	ecab 7b02 	vstmia	fp!, {d7}
 8011f5c:	f108 0801 	add.w	r8, r8, #1
 8011f60:	e7ca      	b.n	8011ef8 <__kernel_rem_pio2+0x78>
 8011f62:	9b04      	ldr	r3, [sp, #16]
 8011f64:	aa0c      	add	r2, sp, #48	; 0x30
 8011f66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011f6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f6c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011f6e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011f72:	9c04      	ldr	r4, [sp, #16]
 8011f74:	930a      	str	r3, [sp, #40]	; 0x28
 8011f76:	ab98      	add	r3, sp, #608	; 0x260
 8011f78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011f7c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011f80:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8011f84:	f8cd b008 	str.w	fp, [sp, #8]
 8011f88:	4625      	mov	r5, r4
 8011f8a:	2d00      	cmp	r5, #0
 8011f8c:	dc78      	bgt.n	8012080 <__kernel_rem_pio2+0x200>
 8011f8e:	ec47 6b10 	vmov	d0, r6, r7
 8011f92:	4650      	mov	r0, sl
 8011f94:	f000 fe3c 	bl	8012c10 <scalbn>
 8011f98:	ec57 6b10 	vmov	r6, r7, d0
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011fa2:	ee10 0a10 	vmov	r0, s0
 8011fa6:	4639      	mov	r1, r7
 8011fa8:	f7ee fb36 	bl	8000618 <__aeabi_dmul>
 8011fac:	ec41 0b10 	vmov	d0, r0, r1
 8011fb0:	f000 fd1a 	bl	80129e8 <floor>
 8011fb4:	4b7f      	ldr	r3, [pc, #508]	; (80121b4 <__kernel_rem_pio2+0x334>)
 8011fb6:	ec51 0b10 	vmov	r0, r1, d0
 8011fba:	2200      	movs	r2, #0
 8011fbc:	f7ee fb2c 	bl	8000618 <__aeabi_dmul>
 8011fc0:	4602      	mov	r2, r0
 8011fc2:	460b      	mov	r3, r1
 8011fc4:	4630      	mov	r0, r6
 8011fc6:	4639      	mov	r1, r7
 8011fc8:	f7ee f96e 	bl	80002a8 <__aeabi_dsub>
 8011fcc:	460f      	mov	r7, r1
 8011fce:	4606      	mov	r6, r0
 8011fd0:	f7ee fdd2 	bl	8000b78 <__aeabi_d2iz>
 8011fd4:	9007      	str	r0, [sp, #28]
 8011fd6:	f7ee fab5 	bl	8000544 <__aeabi_i2d>
 8011fda:	4602      	mov	r2, r0
 8011fdc:	460b      	mov	r3, r1
 8011fde:	4630      	mov	r0, r6
 8011fe0:	4639      	mov	r1, r7
 8011fe2:	f7ee f961 	bl	80002a8 <__aeabi_dsub>
 8011fe6:	f1ba 0f00 	cmp.w	sl, #0
 8011fea:	4606      	mov	r6, r0
 8011fec:	460f      	mov	r7, r1
 8011fee:	dd70      	ble.n	80120d2 <__kernel_rem_pio2+0x252>
 8011ff0:	1e62      	subs	r2, r4, #1
 8011ff2:	ab0c      	add	r3, sp, #48	; 0x30
 8011ff4:	9d07      	ldr	r5, [sp, #28]
 8011ff6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011ffa:	f1ca 0118 	rsb	r1, sl, #24
 8011ffe:	fa40 f301 	asr.w	r3, r0, r1
 8012002:	441d      	add	r5, r3
 8012004:	408b      	lsls	r3, r1
 8012006:	1ac0      	subs	r0, r0, r3
 8012008:	ab0c      	add	r3, sp, #48	; 0x30
 801200a:	9507      	str	r5, [sp, #28]
 801200c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012010:	f1ca 0317 	rsb	r3, sl, #23
 8012014:	fa40 f303 	asr.w	r3, r0, r3
 8012018:	9302      	str	r3, [sp, #8]
 801201a:	9b02      	ldr	r3, [sp, #8]
 801201c:	2b00      	cmp	r3, #0
 801201e:	dd66      	ble.n	80120ee <__kernel_rem_pio2+0x26e>
 8012020:	9b07      	ldr	r3, [sp, #28]
 8012022:	2200      	movs	r2, #0
 8012024:	3301      	adds	r3, #1
 8012026:	9307      	str	r3, [sp, #28]
 8012028:	4615      	mov	r5, r2
 801202a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801202e:	4294      	cmp	r4, r2
 8012030:	f300 8099 	bgt.w	8012166 <__kernel_rem_pio2+0x2e6>
 8012034:	f1ba 0f00 	cmp.w	sl, #0
 8012038:	dd07      	ble.n	801204a <__kernel_rem_pio2+0x1ca>
 801203a:	f1ba 0f01 	cmp.w	sl, #1
 801203e:	f000 80a5 	beq.w	801218c <__kernel_rem_pio2+0x30c>
 8012042:	f1ba 0f02 	cmp.w	sl, #2
 8012046:	f000 80c1 	beq.w	80121cc <__kernel_rem_pio2+0x34c>
 801204a:	9b02      	ldr	r3, [sp, #8]
 801204c:	2b02      	cmp	r3, #2
 801204e:	d14e      	bne.n	80120ee <__kernel_rem_pio2+0x26e>
 8012050:	4632      	mov	r2, r6
 8012052:	463b      	mov	r3, r7
 8012054:	4958      	ldr	r1, [pc, #352]	; (80121b8 <__kernel_rem_pio2+0x338>)
 8012056:	2000      	movs	r0, #0
 8012058:	f7ee f926 	bl	80002a8 <__aeabi_dsub>
 801205c:	4606      	mov	r6, r0
 801205e:	460f      	mov	r7, r1
 8012060:	2d00      	cmp	r5, #0
 8012062:	d044      	beq.n	80120ee <__kernel_rem_pio2+0x26e>
 8012064:	4650      	mov	r0, sl
 8012066:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80121a8 <__kernel_rem_pio2+0x328>
 801206a:	f000 fdd1 	bl	8012c10 <scalbn>
 801206e:	4630      	mov	r0, r6
 8012070:	4639      	mov	r1, r7
 8012072:	ec53 2b10 	vmov	r2, r3, d0
 8012076:	f7ee f917 	bl	80002a8 <__aeabi_dsub>
 801207a:	4606      	mov	r6, r0
 801207c:	460f      	mov	r7, r1
 801207e:	e036      	b.n	80120ee <__kernel_rem_pio2+0x26e>
 8012080:	4b4e      	ldr	r3, [pc, #312]	; (80121bc <__kernel_rem_pio2+0x33c>)
 8012082:	2200      	movs	r2, #0
 8012084:	4630      	mov	r0, r6
 8012086:	4639      	mov	r1, r7
 8012088:	f7ee fac6 	bl	8000618 <__aeabi_dmul>
 801208c:	f7ee fd74 	bl	8000b78 <__aeabi_d2iz>
 8012090:	f7ee fa58 	bl	8000544 <__aeabi_i2d>
 8012094:	4b4a      	ldr	r3, [pc, #296]	; (80121c0 <__kernel_rem_pio2+0x340>)
 8012096:	2200      	movs	r2, #0
 8012098:	4680      	mov	r8, r0
 801209a:	4689      	mov	r9, r1
 801209c:	f7ee fabc 	bl	8000618 <__aeabi_dmul>
 80120a0:	4602      	mov	r2, r0
 80120a2:	460b      	mov	r3, r1
 80120a4:	4630      	mov	r0, r6
 80120a6:	4639      	mov	r1, r7
 80120a8:	f7ee f8fe 	bl	80002a8 <__aeabi_dsub>
 80120ac:	f7ee fd64 	bl	8000b78 <__aeabi_d2iz>
 80120b0:	9b02      	ldr	r3, [sp, #8]
 80120b2:	f843 0b04 	str.w	r0, [r3], #4
 80120b6:	3d01      	subs	r5, #1
 80120b8:	9302      	str	r3, [sp, #8]
 80120ba:	ab70      	add	r3, sp, #448	; 0x1c0
 80120bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80120c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c4:	4640      	mov	r0, r8
 80120c6:	4649      	mov	r1, r9
 80120c8:	f7ee f8f0 	bl	80002ac <__adddf3>
 80120cc:	4606      	mov	r6, r0
 80120ce:	460f      	mov	r7, r1
 80120d0:	e75b      	b.n	8011f8a <__kernel_rem_pio2+0x10a>
 80120d2:	d105      	bne.n	80120e0 <__kernel_rem_pio2+0x260>
 80120d4:	1e63      	subs	r3, r4, #1
 80120d6:	aa0c      	add	r2, sp, #48	; 0x30
 80120d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80120dc:	15c3      	asrs	r3, r0, #23
 80120de:	e79b      	b.n	8012018 <__kernel_rem_pio2+0x198>
 80120e0:	4b38      	ldr	r3, [pc, #224]	; (80121c4 <__kernel_rem_pio2+0x344>)
 80120e2:	2200      	movs	r2, #0
 80120e4:	f7ee fd1e 	bl	8000b24 <__aeabi_dcmpge>
 80120e8:	2800      	cmp	r0, #0
 80120ea:	d139      	bne.n	8012160 <__kernel_rem_pio2+0x2e0>
 80120ec:	9002      	str	r0, [sp, #8]
 80120ee:	2200      	movs	r2, #0
 80120f0:	2300      	movs	r3, #0
 80120f2:	4630      	mov	r0, r6
 80120f4:	4639      	mov	r1, r7
 80120f6:	f7ee fcf7 	bl	8000ae8 <__aeabi_dcmpeq>
 80120fa:	2800      	cmp	r0, #0
 80120fc:	f000 80b4 	beq.w	8012268 <__kernel_rem_pio2+0x3e8>
 8012100:	f104 3bff 	add.w	fp, r4, #4294967295
 8012104:	465b      	mov	r3, fp
 8012106:	2200      	movs	r2, #0
 8012108:	9904      	ldr	r1, [sp, #16]
 801210a:	428b      	cmp	r3, r1
 801210c:	da65      	bge.n	80121da <__kernel_rem_pio2+0x35a>
 801210e:	2a00      	cmp	r2, #0
 8012110:	d07b      	beq.n	801220a <__kernel_rem_pio2+0x38a>
 8012112:	ab0c      	add	r3, sp, #48	; 0x30
 8012114:	f1aa 0a18 	sub.w	sl, sl, #24
 8012118:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801211c:	2b00      	cmp	r3, #0
 801211e:	f000 80a0 	beq.w	8012262 <__kernel_rem_pio2+0x3e2>
 8012122:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80121a8 <__kernel_rem_pio2+0x328>
 8012126:	4650      	mov	r0, sl
 8012128:	f000 fd72 	bl	8012c10 <scalbn>
 801212c:	4f23      	ldr	r7, [pc, #140]	; (80121bc <__kernel_rem_pio2+0x33c>)
 801212e:	ec55 4b10 	vmov	r4, r5, d0
 8012132:	46d8      	mov	r8, fp
 8012134:	2600      	movs	r6, #0
 8012136:	f1b8 0f00 	cmp.w	r8, #0
 801213a:	f280 80cf 	bge.w	80122dc <__kernel_rem_pio2+0x45c>
 801213e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80121a0 <__kernel_rem_pio2+0x320>
 8012142:	465f      	mov	r7, fp
 8012144:	f04f 0800 	mov.w	r8, #0
 8012148:	2f00      	cmp	r7, #0
 801214a:	f2c0 80fd 	blt.w	8012348 <__kernel_rem_pio2+0x4c8>
 801214e:	ab70      	add	r3, sp, #448	; 0x1c0
 8012150:	f8df a074 	ldr.w	sl, [pc, #116]	; 80121c8 <__kernel_rem_pio2+0x348>
 8012154:	ec55 4b18 	vmov	r4, r5, d8
 8012158:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801215c:	2600      	movs	r6, #0
 801215e:	e0e5      	b.n	801232c <__kernel_rem_pio2+0x4ac>
 8012160:	2302      	movs	r3, #2
 8012162:	9302      	str	r3, [sp, #8]
 8012164:	e75c      	b.n	8012020 <__kernel_rem_pio2+0x1a0>
 8012166:	f8db 3000 	ldr.w	r3, [fp]
 801216a:	b955      	cbnz	r5, 8012182 <__kernel_rem_pio2+0x302>
 801216c:	b123      	cbz	r3, 8012178 <__kernel_rem_pio2+0x2f8>
 801216e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012172:	f8cb 3000 	str.w	r3, [fp]
 8012176:	2301      	movs	r3, #1
 8012178:	3201      	adds	r2, #1
 801217a:	f10b 0b04 	add.w	fp, fp, #4
 801217e:	461d      	mov	r5, r3
 8012180:	e755      	b.n	801202e <__kernel_rem_pio2+0x1ae>
 8012182:	1acb      	subs	r3, r1, r3
 8012184:	f8cb 3000 	str.w	r3, [fp]
 8012188:	462b      	mov	r3, r5
 801218a:	e7f5      	b.n	8012178 <__kernel_rem_pio2+0x2f8>
 801218c:	1e62      	subs	r2, r4, #1
 801218e:	ab0c      	add	r3, sp, #48	; 0x30
 8012190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012194:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012198:	a90c      	add	r1, sp, #48	; 0x30
 801219a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801219e:	e754      	b.n	801204a <__kernel_rem_pio2+0x1ca>
	...
 80121ac:	3ff00000 	.word	0x3ff00000
 80121b0:	080132b8 	.word	0x080132b8
 80121b4:	40200000 	.word	0x40200000
 80121b8:	3ff00000 	.word	0x3ff00000
 80121bc:	3e700000 	.word	0x3e700000
 80121c0:	41700000 	.word	0x41700000
 80121c4:	3fe00000 	.word	0x3fe00000
 80121c8:	08013278 	.word	0x08013278
 80121cc:	1e62      	subs	r2, r4, #1
 80121ce:	ab0c      	add	r3, sp, #48	; 0x30
 80121d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80121d8:	e7de      	b.n	8012198 <__kernel_rem_pio2+0x318>
 80121da:	a90c      	add	r1, sp, #48	; 0x30
 80121dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80121e0:	3b01      	subs	r3, #1
 80121e2:	430a      	orrs	r2, r1
 80121e4:	e790      	b.n	8012108 <__kernel_rem_pio2+0x288>
 80121e6:	3301      	adds	r3, #1
 80121e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80121ec:	2900      	cmp	r1, #0
 80121ee:	d0fa      	beq.n	80121e6 <__kernel_rem_pio2+0x366>
 80121f0:	9a08      	ldr	r2, [sp, #32]
 80121f2:	18e3      	adds	r3, r4, r3
 80121f4:	18a6      	adds	r6, r4, r2
 80121f6:	aa20      	add	r2, sp, #128	; 0x80
 80121f8:	1c65      	adds	r5, r4, #1
 80121fa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80121fe:	9302      	str	r3, [sp, #8]
 8012200:	9b02      	ldr	r3, [sp, #8]
 8012202:	42ab      	cmp	r3, r5
 8012204:	da04      	bge.n	8012210 <__kernel_rem_pio2+0x390>
 8012206:	461c      	mov	r4, r3
 8012208:	e6b5      	b.n	8011f76 <__kernel_rem_pio2+0xf6>
 801220a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801220c:	2301      	movs	r3, #1
 801220e:	e7eb      	b.n	80121e8 <__kernel_rem_pio2+0x368>
 8012210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012212:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012216:	f7ee f995 	bl	8000544 <__aeabi_i2d>
 801221a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801221e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012220:	46b3      	mov	fp, r6
 8012222:	461c      	mov	r4, r3
 8012224:	2700      	movs	r7, #0
 8012226:	f04f 0800 	mov.w	r8, #0
 801222a:	f04f 0900 	mov.w	r9, #0
 801222e:	9b06      	ldr	r3, [sp, #24]
 8012230:	429f      	cmp	r7, r3
 8012232:	dd06      	ble.n	8012242 <__kernel_rem_pio2+0x3c2>
 8012234:	ab70      	add	r3, sp, #448	; 0x1c0
 8012236:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801223a:	e9c3 8900 	strd	r8, r9, [r3]
 801223e:	3501      	adds	r5, #1
 8012240:	e7de      	b.n	8012200 <__kernel_rem_pio2+0x380>
 8012242:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012246:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801224a:	f7ee f9e5 	bl	8000618 <__aeabi_dmul>
 801224e:	4602      	mov	r2, r0
 8012250:	460b      	mov	r3, r1
 8012252:	4640      	mov	r0, r8
 8012254:	4649      	mov	r1, r9
 8012256:	f7ee f829 	bl	80002ac <__adddf3>
 801225a:	3701      	adds	r7, #1
 801225c:	4680      	mov	r8, r0
 801225e:	4689      	mov	r9, r1
 8012260:	e7e5      	b.n	801222e <__kernel_rem_pio2+0x3ae>
 8012262:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012266:	e754      	b.n	8012112 <__kernel_rem_pio2+0x292>
 8012268:	ec47 6b10 	vmov	d0, r6, r7
 801226c:	f1ca 0000 	rsb	r0, sl, #0
 8012270:	f000 fcce 	bl	8012c10 <scalbn>
 8012274:	ec57 6b10 	vmov	r6, r7, d0
 8012278:	4b9f      	ldr	r3, [pc, #636]	; (80124f8 <__kernel_rem_pio2+0x678>)
 801227a:	ee10 0a10 	vmov	r0, s0
 801227e:	2200      	movs	r2, #0
 8012280:	4639      	mov	r1, r7
 8012282:	f7ee fc4f 	bl	8000b24 <__aeabi_dcmpge>
 8012286:	b300      	cbz	r0, 80122ca <__kernel_rem_pio2+0x44a>
 8012288:	4b9c      	ldr	r3, [pc, #624]	; (80124fc <__kernel_rem_pio2+0x67c>)
 801228a:	2200      	movs	r2, #0
 801228c:	4630      	mov	r0, r6
 801228e:	4639      	mov	r1, r7
 8012290:	f7ee f9c2 	bl	8000618 <__aeabi_dmul>
 8012294:	f7ee fc70 	bl	8000b78 <__aeabi_d2iz>
 8012298:	4605      	mov	r5, r0
 801229a:	f7ee f953 	bl	8000544 <__aeabi_i2d>
 801229e:	4b96      	ldr	r3, [pc, #600]	; (80124f8 <__kernel_rem_pio2+0x678>)
 80122a0:	2200      	movs	r2, #0
 80122a2:	f7ee f9b9 	bl	8000618 <__aeabi_dmul>
 80122a6:	460b      	mov	r3, r1
 80122a8:	4602      	mov	r2, r0
 80122aa:	4639      	mov	r1, r7
 80122ac:	4630      	mov	r0, r6
 80122ae:	f7ed fffb 	bl	80002a8 <__aeabi_dsub>
 80122b2:	f7ee fc61 	bl	8000b78 <__aeabi_d2iz>
 80122b6:	f104 0b01 	add.w	fp, r4, #1
 80122ba:	ab0c      	add	r3, sp, #48	; 0x30
 80122bc:	f10a 0a18 	add.w	sl, sl, #24
 80122c0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80122c4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80122c8:	e72b      	b.n	8012122 <__kernel_rem_pio2+0x2a2>
 80122ca:	4630      	mov	r0, r6
 80122cc:	4639      	mov	r1, r7
 80122ce:	f7ee fc53 	bl	8000b78 <__aeabi_d2iz>
 80122d2:	ab0c      	add	r3, sp, #48	; 0x30
 80122d4:	46a3      	mov	fp, r4
 80122d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80122da:	e722      	b.n	8012122 <__kernel_rem_pio2+0x2a2>
 80122dc:	ab70      	add	r3, sp, #448	; 0x1c0
 80122de:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80122e2:	ab0c      	add	r3, sp, #48	; 0x30
 80122e4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80122e8:	f7ee f92c 	bl	8000544 <__aeabi_i2d>
 80122ec:	4622      	mov	r2, r4
 80122ee:	462b      	mov	r3, r5
 80122f0:	f7ee f992 	bl	8000618 <__aeabi_dmul>
 80122f4:	4632      	mov	r2, r6
 80122f6:	e9c9 0100 	strd	r0, r1, [r9]
 80122fa:	463b      	mov	r3, r7
 80122fc:	4620      	mov	r0, r4
 80122fe:	4629      	mov	r1, r5
 8012300:	f7ee f98a 	bl	8000618 <__aeabi_dmul>
 8012304:	f108 38ff 	add.w	r8, r8, #4294967295
 8012308:	4604      	mov	r4, r0
 801230a:	460d      	mov	r5, r1
 801230c:	e713      	b.n	8012136 <__kernel_rem_pio2+0x2b6>
 801230e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8012312:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8012316:	f7ee f97f 	bl	8000618 <__aeabi_dmul>
 801231a:	4602      	mov	r2, r0
 801231c:	460b      	mov	r3, r1
 801231e:	4620      	mov	r0, r4
 8012320:	4629      	mov	r1, r5
 8012322:	f7ed ffc3 	bl	80002ac <__adddf3>
 8012326:	3601      	adds	r6, #1
 8012328:	4604      	mov	r4, r0
 801232a:	460d      	mov	r5, r1
 801232c:	9b04      	ldr	r3, [sp, #16]
 801232e:	429e      	cmp	r6, r3
 8012330:	dc01      	bgt.n	8012336 <__kernel_rem_pio2+0x4b6>
 8012332:	45b0      	cmp	r8, r6
 8012334:	daeb      	bge.n	801230e <__kernel_rem_pio2+0x48e>
 8012336:	ab48      	add	r3, sp, #288	; 0x120
 8012338:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801233c:	e9c3 4500 	strd	r4, r5, [r3]
 8012340:	3f01      	subs	r7, #1
 8012342:	f108 0801 	add.w	r8, r8, #1
 8012346:	e6ff      	b.n	8012148 <__kernel_rem_pio2+0x2c8>
 8012348:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801234a:	2b02      	cmp	r3, #2
 801234c:	dc0b      	bgt.n	8012366 <__kernel_rem_pio2+0x4e6>
 801234e:	2b00      	cmp	r3, #0
 8012350:	dc6e      	bgt.n	8012430 <__kernel_rem_pio2+0x5b0>
 8012352:	d045      	beq.n	80123e0 <__kernel_rem_pio2+0x560>
 8012354:	9b07      	ldr	r3, [sp, #28]
 8012356:	f003 0007 	and.w	r0, r3, #7
 801235a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801235e:	ecbd 8b02 	vpop	{d8}
 8012362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012366:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012368:	2b03      	cmp	r3, #3
 801236a:	d1f3      	bne.n	8012354 <__kernel_rem_pio2+0x4d4>
 801236c:	ab48      	add	r3, sp, #288	; 0x120
 801236e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8012372:	46d0      	mov	r8, sl
 8012374:	46d9      	mov	r9, fp
 8012376:	f1b9 0f00 	cmp.w	r9, #0
 801237a:	f1a8 0808 	sub.w	r8, r8, #8
 801237e:	dc64      	bgt.n	801244a <__kernel_rem_pio2+0x5ca>
 8012380:	465c      	mov	r4, fp
 8012382:	2c01      	cmp	r4, #1
 8012384:	f1aa 0a08 	sub.w	sl, sl, #8
 8012388:	dc7e      	bgt.n	8012488 <__kernel_rem_pio2+0x608>
 801238a:	2000      	movs	r0, #0
 801238c:	2100      	movs	r1, #0
 801238e:	f1bb 0f01 	cmp.w	fp, #1
 8012392:	f300 8097 	bgt.w	80124c4 <__kernel_rem_pio2+0x644>
 8012396:	9b02      	ldr	r3, [sp, #8]
 8012398:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801239c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	f040 8099 	bne.w	80124d8 <__kernel_rem_pio2+0x658>
 80123a6:	9b01      	ldr	r3, [sp, #4]
 80123a8:	e9c3 5600 	strd	r5, r6, [r3]
 80123ac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80123b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80123b4:	e7ce      	b.n	8012354 <__kernel_rem_pio2+0x4d4>
 80123b6:	ab48      	add	r3, sp, #288	; 0x120
 80123b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80123bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c0:	f7ed ff74 	bl	80002ac <__adddf3>
 80123c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80123c8:	f1bb 0f00 	cmp.w	fp, #0
 80123cc:	daf3      	bge.n	80123b6 <__kernel_rem_pio2+0x536>
 80123ce:	9b02      	ldr	r3, [sp, #8]
 80123d0:	b113      	cbz	r3, 80123d8 <__kernel_rem_pio2+0x558>
 80123d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123d6:	4619      	mov	r1, r3
 80123d8:	9b01      	ldr	r3, [sp, #4]
 80123da:	e9c3 0100 	strd	r0, r1, [r3]
 80123de:	e7b9      	b.n	8012354 <__kernel_rem_pio2+0x4d4>
 80123e0:	2000      	movs	r0, #0
 80123e2:	2100      	movs	r1, #0
 80123e4:	e7f0      	b.n	80123c8 <__kernel_rem_pio2+0x548>
 80123e6:	ab48      	add	r3, sp, #288	; 0x120
 80123e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80123ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f0:	f7ed ff5c 	bl	80002ac <__adddf3>
 80123f4:	3c01      	subs	r4, #1
 80123f6:	2c00      	cmp	r4, #0
 80123f8:	daf5      	bge.n	80123e6 <__kernel_rem_pio2+0x566>
 80123fa:	9b02      	ldr	r3, [sp, #8]
 80123fc:	b1e3      	cbz	r3, 8012438 <__kernel_rem_pio2+0x5b8>
 80123fe:	4602      	mov	r2, r0
 8012400:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012404:	9c01      	ldr	r4, [sp, #4]
 8012406:	e9c4 2300 	strd	r2, r3, [r4]
 801240a:	4602      	mov	r2, r0
 801240c:	460b      	mov	r3, r1
 801240e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012412:	f7ed ff49 	bl	80002a8 <__aeabi_dsub>
 8012416:	ad4a      	add	r5, sp, #296	; 0x128
 8012418:	2401      	movs	r4, #1
 801241a:	45a3      	cmp	fp, r4
 801241c:	da0f      	bge.n	801243e <__kernel_rem_pio2+0x5be>
 801241e:	9b02      	ldr	r3, [sp, #8]
 8012420:	b113      	cbz	r3, 8012428 <__kernel_rem_pio2+0x5a8>
 8012422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012426:	4619      	mov	r1, r3
 8012428:	9b01      	ldr	r3, [sp, #4]
 801242a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801242e:	e791      	b.n	8012354 <__kernel_rem_pio2+0x4d4>
 8012430:	465c      	mov	r4, fp
 8012432:	2000      	movs	r0, #0
 8012434:	2100      	movs	r1, #0
 8012436:	e7de      	b.n	80123f6 <__kernel_rem_pio2+0x576>
 8012438:	4602      	mov	r2, r0
 801243a:	460b      	mov	r3, r1
 801243c:	e7e2      	b.n	8012404 <__kernel_rem_pio2+0x584>
 801243e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8012442:	f7ed ff33 	bl	80002ac <__adddf3>
 8012446:	3401      	adds	r4, #1
 8012448:	e7e7      	b.n	801241a <__kernel_rem_pio2+0x59a>
 801244a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801244e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8012452:	4620      	mov	r0, r4
 8012454:	4632      	mov	r2, r6
 8012456:	463b      	mov	r3, r7
 8012458:	4629      	mov	r1, r5
 801245a:	f7ed ff27 	bl	80002ac <__adddf3>
 801245e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012462:	4602      	mov	r2, r0
 8012464:	460b      	mov	r3, r1
 8012466:	4620      	mov	r0, r4
 8012468:	4629      	mov	r1, r5
 801246a:	f7ed ff1d 	bl	80002a8 <__aeabi_dsub>
 801246e:	4632      	mov	r2, r6
 8012470:	463b      	mov	r3, r7
 8012472:	f7ed ff1b 	bl	80002ac <__adddf3>
 8012476:	ed9d 7b04 	vldr	d7, [sp, #16]
 801247a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801247e:	ed88 7b00 	vstr	d7, [r8]
 8012482:	f109 39ff 	add.w	r9, r9, #4294967295
 8012486:	e776      	b.n	8012376 <__kernel_rem_pio2+0x4f6>
 8012488:	e9da 8900 	ldrd	r8, r9, [sl]
 801248c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012490:	4640      	mov	r0, r8
 8012492:	4632      	mov	r2, r6
 8012494:	463b      	mov	r3, r7
 8012496:	4649      	mov	r1, r9
 8012498:	f7ed ff08 	bl	80002ac <__adddf3>
 801249c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80124a0:	4602      	mov	r2, r0
 80124a2:	460b      	mov	r3, r1
 80124a4:	4640      	mov	r0, r8
 80124a6:	4649      	mov	r1, r9
 80124a8:	f7ed fefe 	bl	80002a8 <__aeabi_dsub>
 80124ac:	4632      	mov	r2, r6
 80124ae:	463b      	mov	r3, r7
 80124b0:	f7ed fefc 	bl	80002ac <__adddf3>
 80124b4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80124b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80124bc:	ed8a 7b00 	vstr	d7, [sl]
 80124c0:	3c01      	subs	r4, #1
 80124c2:	e75e      	b.n	8012382 <__kernel_rem_pio2+0x502>
 80124c4:	ab48      	add	r3, sp, #288	; 0x120
 80124c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80124ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ce:	f7ed feed 	bl	80002ac <__adddf3>
 80124d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80124d6:	e75a      	b.n	801238e <__kernel_rem_pio2+0x50e>
 80124d8:	9b01      	ldr	r3, [sp, #4]
 80124da:	9a01      	ldr	r2, [sp, #4]
 80124dc:	601d      	str	r5, [r3, #0]
 80124de:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80124e2:	605c      	str	r4, [r3, #4]
 80124e4:	609f      	str	r7, [r3, #8]
 80124e6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80124ea:	60d3      	str	r3, [r2, #12]
 80124ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124f0:	6110      	str	r0, [r2, #16]
 80124f2:	6153      	str	r3, [r2, #20]
 80124f4:	e72e      	b.n	8012354 <__kernel_rem_pio2+0x4d4>
 80124f6:	bf00      	nop
 80124f8:	41700000 	.word	0x41700000
 80124fc:	3e700000 	.word	0x3e700000

08012500 <__kernel_sin>:
 8012500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012504:	ed2d 8b04 	vpush	{d8-d9}
 8012508:	eeb0 8a41 	vmov.f32	s16, s2
 801250c:	eef0 8a61 	vmov.f32	s17, s3
 8012510:	ec55 4b10 	vmov	r4, r5, d0
 8012514:	b083      	sub	sp, #12
 8012516:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801251a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801251e:	9001      	str	r0, [sp, #4]
 8012520:	da06      	bge.n	8012530 <__kernel_sin+0x30>
 8012522:	ee10 0a10 	vmov	r0, s0
 8012526:	4629      	mov	r1, r5
 8012528:	f7ee fb26 	bl	8000b78 <__aeabi_d2iz>
 801252c:	2800      	cmp	r0, #0
 801252e:	d051      	beq.n	80125d4 <__kernel_sin+0xd4>
 8012530:	4622      	mov	r2, r4
 8012532:	462b      	mov	r3, r5
 8012534:	4620      	mov	r0, r4
 8012536:	4629      	mov	r1, r5
 8012538:	f7ee f86e 	bl	8000618 <__aeabi_dmul>
 801253c:	4682      	mov	sl, r0
 801253e:	468b      	mov	fp, r1
 8012540:	4602      	mov	r2, r0
 8012542:	460b      	mov	r3, r1
 8012544:	4620      	mov	r0, r4
 8012546:	4629      	mov	r1, r5
 8012548:	f7ee f866 	bl	8000618 <__aeabi_dmul>
 801254c:	a341      	add	r3, pc, #260	; (adr r3, 8012654 <__kernel_sin+0x154>)
 801254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012552:	4680      	mov	r8, r0
 8012554:	4689      	mov	r9, r1
 8012556:	4650      	mov	r0, sl
 8012558:	4659      	mov	r1, fp
 801255a:	f7ee f85d 	bl	8000618 <__aeabi_dmul>
 801255e:	a33f      	add	r3, pc, #252	; (adr r3, 801265c <__kernel_sin+0x15c>)
 8012560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012564:	f7ed fea0 	bl	80002a8 <__aeabi_dsub>
 8012568:	4652      	mov	r2, sl
 801256a:	465b      	mov	r3, fp
 801256c:	f7ee f854 	bl	8000618 <__aeabi_dmul>
 8012570:	a33c      	add	r3, pc, #240	; (adr r3, 8012664 <__kernel_sin+0x164>)
 8012572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012576:	f7ed fe99 	bl	80002ac <__adddf3>
 801257a:	4652      	mov	r2, sl
 801257c:	465b      	mov	r3, fp
 801257e:	f7ee f84b 	bl	8000618 <__aeabi_dmul>
 8012582:	a33a      	add	r3, pc, #232	; (adr r3, 801266c <__kernel_sin+0x16c>)
 8012584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012588:	f7ed fe8e 	bl	80002a8 <__aeabi_dsub>
 801258c:	4652      	mov	r2, sl
 801258e:	465b      	mov	r3, fp
 8012590:	f7ee f842 	bl	8000618 <__aeabi_dmul>
 8012594:	a337      	add	r3, pc, #220	; (adr r3, 8012674 <__kernel_sin+0x174>)
 8012596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801259a:	f7ed fe87 	bl	80002ac <__adddf3>
 801259e:	9b01      	ldr	r3, [sp, #4]
 80125a0:	4606      	mov	r6, r0
 80125a2:	460f      	mov	r7, r1
 80125a4:	b9eb      	cbnz	r3, 80125e2 <__kernel_sin+0xe2>
 80125a6:	4602      	mov	r2, r0
 80125a8:	460b      	mov	r3, r1
 80125aa:	4650      	mov	r0, sl
 80125ac:	4659      	mov	r1, fp
 80125ae:	f7ee f833 	bl	8000618 <__aeabi_dmul>
 80125b2:	a325      	add	r3, pc, #148	; (adr r3, 8012648 <__kernel_sin+0x148>)
 80125b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b8:	f7ed fe76 	bl	80002a8 <__aeabi_dsub>
 80125bc:	4642      	mov	r2, r8
 80125be:	464b      	mov	r3, r9
 80125c0:	f7ee f82a 	bl	8000618 <__aeabi_dmul>
 80125c4:	4602      	mov	r2, r0
 80125c6:	460b      	mov	r3, r1
 80125c8:	4620      	mov	r0, r4
 80125ca:	4629      	mov	r1, r5
 80125cc:	f7ed fe6e 	bl	80002ac <__adddf3>
 80125d0:	4604      	mov	r4, r0
 80125d2:	460d      	mov	r5, r1
 80125d4:	ec45 4b10 	vmov	d0, r4, r5
 80125d8:	b003      	add	sp, #12
 80125da:	ecbd 8b04 	vpop	{d8-d9}
 80125de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125e2:	4b1b      	ldr	r3, [pc, #108]	; (8012650 <__kernel_sin+0x150>)
 80125e4:	ec51 0b18 	vmov	r0, r1, d8
 80125e8:	2200      	movs	r2, #0
 80125ea:	f7ee f815 	bl	8000618 <__aeabi_dmul>
 80125ee:	4632      	mov	r2, r6
 80125f0:	ec41 0b19 	vmov	d9, r0, r1
 80125f4:	463b      	mov	r3, r7
 80125f6:	4640      	mov	r0, r8
 80125f8:	4649      	mov	r1, r9
 80125fa:	f7ee f80d 	bl	8000618 <__aeabi_dmul>
 80125fe:	4602      	mov	r2, r0
 8012600:	460b      	mov	r3, r1
 8012602:	ec51 0b19 	vmov	r0, r1, d9
 8012606:	f7ed fe4f 	bl	80002a8 <__aeabi_dsub>
 801260a:	4652      	mov	r2, sl
 801260c:	465b      	mov	r3, fp
 801260e:	f7ee f803 	bl	8000618 <__aeabi_dmul>
 8012612:	ec53 2b18 	vmov	r2, r3, d8
 8012616:	f7ed fe47 	bl	80002a8 <__aeabi_dsub>
 801261a:	a30b      	add	r3, pc, #44	; (adr r3, 8012648 <__kernel_sin+0x148>)
 801261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012620:	4606      	mov	r6, r0
 8012622:	460f      	mov	r7, r1
 8012624:	4640      	mov	r0, r8
 8012626:	4649      	mov	r1, r9
 8012628:	f7ed fff6 	bl	8000618 <__aeabi_dmul>
 801262c:	4602      	mov	r2, r0
 801262e:	460b      	mov	r3, r1
 8012630:	4630      	mov	r0, r6
 8012632:	4639      	mov	r1, r7
 8012634:	f7ed fe3a 	bl	80002ac <__adddf3>
 8012638:	4602      	mov	r2, r0
 801263a:	460b      	mov	r3, r1
 801263c:	4620      	mov	r0, r4
 801263e:	4629      	mov	r1, r5
 8012640:	f7ed fe32 	bl	80002a8 <__aeabi_dsub>
 8012644:	e7c4      	b.n	80125d0 <__kernel_sin+0xd0>
 8012646:	bf00      	nop
 8012648:	55555549 	.word	0x55555549
 801264c:	3fc55555 	.word	0x3fc55555
 8012650:	3fe00000 	.word	0x3fe00000
 8012654:	5acfd57c 	.word	0x5acfd57c
 8012658:	3de5d93a 	.word	0x3de5d93a
 801265c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012660:	3e5ae5e6 	.word	0x3e5ae5e6
 8012664:	57b1fe7d 	.word	0x57b1fe7d
 8012668:	3ec71de3 	.word	0x3ec71de3
 801266c:	19c161d5 	.word	0x19c161d5
 8012670:	3f2a01a0 	.word	0x3f2a01a0
 8012674:	1110f8a6 	.word	0x1110f8a6
 8012678:	3f811111 	.word	0x3f811111
 801267c:	00000000 	.word	0x00000000

08012680 <atan>:
 8012680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012684:	ec55 4b10 	vmov	r4, r5, d0
 8012688:	4bc3      	ldr	r3, [pc, #780]	; (8012998 <atan+0x318>)
 801268a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801268e:	429e      	cmp	r6, r3
 8012690:	46ab      	mov	fp, r5
 8012692:	dd18      	ble.n	80126c6 <atan+0x46>
 8012694:	4bc1      	ldr	r3, [pc, #772]	; (801299c <atan+0x31c>)
 8012696:	429e      	cmp	r6, r3
 8012698:	dc01      	bgt.n	801269e <atan+0x1e>
 801269a:	d109      	bne.n	80126b0 <atan+0x30>
 801269c:	b144      	cbz	r4, 80126b0 <atan+0x30>
 801269e:	4622      	mov	r2, r4
 80126a0:	462b      	mov	r3, r5
 80126a2:	4620      	mov	r0, r4
 80126a4:	4629      	mov	r1, r5
 80126a6:	f7ed fe01 	bl	80002ac <__adddf3>
 80126aa:	4604      	mov	r4, r0
 80126ac:	460d      	mov	r5, r1
 80126ae:	e006      	b.n	80126be <atan+0x3e>
 80126b0:	f1bb 0f00 	cmp.w	fp, #0
 80126b4:	f300 8131 	bgt.w	801291a <atan+0x29a>
 80126b8:	a59b      	add	r5, pc, #620	; (adr r5, 8012928 <atan+0x2a8>)
 80126ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80126be:	ec45 4b10 	vmov	d0, r4, r5
 80126c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126c6:	4bb6      	ldr	r3, [pc, #728]	; (80129a0 <atan+0x320>)
 80126c8:	429e      	cmp	r6, r3
 80126ca:	dc14      	bgt.n	80126f6 <atan+0x76>
 80126cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80126d0:	429e      	cmp	r6, r3
 80126d2:	dc0d      	bgt.n	80126f0 <atan+0x70>
 80126d4:	a396      	add	r3, pc, #600	; (adr r3, 8012930 <atan+0x2b0>)
 80126d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126da:	ee10 0a10 	vmov	r0, s0
 80126de:	4629      	mov	r1, r5
 80126e0:	f7ed fde4 	bl	80002ac <__adddf3>
 80126e4:	4baf      	ldr	r3, [pc, #700]	; (80129a4 <atan+0x324>)
 80126e6:	2200      	movs	r2, #0
 80126e8:	f7ee fa26 	bl	8000b38 <__aeabi_dcmpgt>
 80126ec:	2800      	cmp	r0, #0
 80126ee:	d1e6      	bne.n	80126be <atan+0x3e>
 80126f0:	f04f 3aff 	mov.w	sl, #4294967295
 80126f4:	e02b      	b.n	801274e <atan+0xce>
 80126f6:	f000 f963 	bl	80129c0 <fabs>
 80126fa:	4bab      	ldr	r3, [pc, #684]	; (80129a8 <atan+0x328>)
 80126fc:	429e      	cmp	r6, r3
 80126fe:	ec55 4b10 	vmov	r4, r5, d0
 8012702:	f300 80bf 	bgt.w	8012884 <atan+0x204>
 8012706:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801270a:	429e      	cmp	r6, r3
 801270c:	f300 80a0 	bgt.w	8012850 <atan+0x1d0>
 8012710:	ee10 2a10 	vmov	r2, s0
 8012714:	ee10 0a10 	vmov	r0, s0
 8012718:	462b      	mov	r3, r5
 801271a:	4629      	mov	r1, r5
 801271c:	f7ed fdc6 	bl	80002ac <__adddf3>
 8012720:	4ba0      	ldr	r3, [pc, #640]	; (80129a4 <atan+0x324>)
 8012722:	2200      	movs	r2, #0
 8012724:	f7ed fdc0 	bl	80002a8 <__aeabi_dsub>
 8012728:	2200      	movs	r2, #0
 801272a:	4606      	mov	r6, r0
 801272c:	460f      	mov	r7, r1
 801272e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012732:	4620      	mov	r0, r4
 8012734:	4629      	mov	r1, r5
 8012736:	f7ed fdb9 	bl	80002ac <__adddf3>
 801273a:	4602      	mov	r2, r0
 801273c:	460b      	mov	r3, r1
 801273e:	4630      	mov	r0, r6
 8012740:	4639      	mov	r1, r7
 8012742:	f7ee f893 	bl	800086c <__aeabi_ddiv>
 8012746:	f04f 0a00 	mov.w	sl, #0
 801274a:	4604      	mov	r4, r0
 801274c:	460d      	mov	r5, r1
 801274e:	4622      	mov	r2, r4
 8012750:	462b      	mov	r3, r5
 8012752:	4620      	mov	r0, r4
 8012754:	4629      	mov	r1, r5
 8012756:	f7ed ff5f 	bl	8000618 <__aeabi_dmul>
 801275a:	4602      	mov	r2, r0
 801275c:	460b      	mov	r3, r1
 801275e:	4680      	mov	r8, r0
 8012760:	4689      	mov	r9, r1
 8012762:	f7ed ff59 	bl	8000618 <__aeabi_dmul>
 8012766:	a374      	add	r3, pc, #464	; (adr r3, 8012938 <atan+0x2b8>)
 8012768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801276c:	4606      	mov	r6, r0
 801276e:	460f      	mov	r7, r1
 8012770:	f7ed ff52 	bl	8000618 <__aeabi_dmul>
 8012774:	a372      	add	r3, pc, #456	; (adr r3, 8012940 <atan+0x2c0>)
 8012776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801277a:	f7ed fd97 	bl	80002ac <__adddf3>
 801277e:	4632      	mov	r2, r6
 8012780:	463b      	mov	r3, r7
 8012782:	f7ed ff49 	bl	8000618 <__aeabi_dmul>
 8012786:	a370      	add	r3, pc, #448	; (adr r3, 8012948 <atan+0x2c8>)
 8012788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278c:	f7ed fd8e 	bl	80002ac <__adddf3>
 8012790:	4632      	mov	r2, r6
 8012792:	463b      	mov	r3, r7
 8012794:	f7ed ff40 	bl	8000618 <__aeabi_dmul>
 8012798:	a36d      	add	r3, pc, #436	; (adr r3, 8012950 <atan+0x2d0>)
 801279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279e:	f7ed fd85 	bl	80002ac <__adddf3>
 80127a2:	4632      	mov	r2, r6
 80127a4:	463b      	mov	r3, r7
 80127a6:	f7ed ff37 	bl	8000618 <__aeabi_dmul>
 80127aa:	a36b      	add	r3, pc, #428	; (adr r3, 8012958 <atan+0x2d8>)
 80127ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b0:	f7ed fd7c 	bl	80002ac <__adddf3>
 80127b4:	4632      	mov	r2, r6
 80127b6:	463b      	mov	r3, r7
 80127b8:	f7ed ff2e 	bl	8000618 <__aeabi_dmul>
 80127bc:	a368      	add	r3, pc, #416	; (adr r3, 8012960 <atan+0x2e0>)
 80127be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c2:	f7ed fd73 	bl	80002ac <__adddf3>
 80127c6:	4642      	mov	r2, r8
 80127c8:	464b      	mov	r3, r9
 80127ca:	f7ed ff25 	bl	8000618 <__aeabi_dmul>
 80127ce:	a366      	add	r3, pc, #408	; (adr r3, 8012968 <atan+0x2e8>)
 80127d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d4:	4680      	mov	r8, r0
 80127d6:	4689      	mov	r9, r1
 80127d8:	4630      	mov	r0, r6
 80127da:	4639      	mov	r1, r7
 80127dc:	f7ed ff1c 	bl	8000618 <__aeabi_dmul>
 80127e0:	a363      	add	r3, pc, #396	; (adr r3, 8012970 <atan+0x2f0>)
 80127e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e6:	f7ed fd5f 	bl	80002a8 <__aeabi_dsub>
 80127ea:	4632      	mov	r2, r6
 80127ec:	463b      	mov	r3, r7
 80127ee:	f7ed ff13 	bl	8000618 <__aeabi_dmul>
 80127f2:	a361      	add	r3, pc, #388	; (adr r3, 8012978 <atan+0x2f8>)
 80127f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f8:	f7ed fd56 	bl	80002a8 <__aeabi_dsub>
 80127fc:	4632      	mov	r2, r6
 80127fe:	463b      	mov	r3, r7
 8012800:	f7ed ff0a 	bl	8000618 <__aeabi_dmul>
 8012804:	a35e      	add	r3, pc, #376	; (adr r3, 8012980 <atan+0x300>)
 8012806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801280a:	f7ed fd4d 	bl	80002a8 <__aeabi_dsub>
 801280e:	4632      	mov	r2, r6
 8012810:	463b      	mov	r3, r7
 8012812:	f7ed ff01 	bl	8000618 <__aeabi_dmul>
 8012816:	a35c      	add	r3, pc, #368	; (adr r3, 8012988 <atan+0x308>)
 8012818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801281c:	f7ed fd44 	bl	80002a8 <__aeabi_dsub>
 8012820:	4632      	mov	r2, r6
 8012822:	463b      	mov	r3, r7
 8012824:	f7ed fef8 	bl	8000618 <__aeabi_dmul>
 8012828:	4602      	mov	r2, r0
 801282a:	460b      	mov	r3, r1
 801282c:	4640      	mov	r0, r8
 801282e:	4649      	mov	r1, r9
 8012830:	f7ed fd3c 	bl	80002ac <__adddf3>
 8012834:	4622      	mov	r2, r4
 8012836:	462b      	mov	r3, r5
 8012838:	f7ed feee 	bl	8000618 <__aeabi_dmul>
 801283c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012840:	4602      	mov	r2, r0
 8012842:	460b      	mov	r3, r1
 8012844:	d14b      	bne.n	80128de <atan+0x25e>
 8012846:	4620      	mov	r0, r4
 8012848:	4629      	mov	r1, r5
 801284a:	f7ed fd2d 	bl	80002a8 <__aeabi_dsub>
 801284e:	e72c      	b.n	80126aa <atan+0x2a>
 8012850:	ee10 0a10 	vmov	r0, s0
 8012854:	4b53      	ldr	r3, [pc, #332]	; (80129a4 <atan+0x324>)
 8012856:	2200      	movs	r2, #0
 8012858:	4629      	mov	r1, r5
 801285a:	f7ed fd25 	bl	80002a8 <__aeabi_dsub>
 801285e:	4b51      	ldr	r3, [pc, #324]	; (80129a4 <atan+0x324>)
 8012860:	4606      	mov	r6, r0
 8012862:	460f      	mov	r7, r1
 8012864:	2200      	movs	r2, #0
 8012866:	4620      	mov	r0, r4
 8012868:	4629      	mov	r1, r5
 801286a:	f7ed fd1f 	bl	80002ac <__adddf3>
 801286e:	4602      	mov	r2, r0
 8012870:	460b      	mov	r3, r1
 8012872:	4630      	mov	r0, r6
 8012874:	4639      	mov	r1, r7
 8012876:	f7ed fff9 	bl	800086c <__aeabi_ddiv>
 801287a:	f04f 0a01 	mov.w	sl, #1
 801287e:	4604      	mov	r4, r0
 8012880:	460d      	mov	r5, r1
 8012882:	e764      	b.n	801274e <atan+0xce>
 8012884:	4b49      	ldr	r3, [pc, #292]	; (80129ac <atan+0x32c>)
 8012886:	429e      	cmp	r6, r3
 8012888:	da1d      	bge.n	80128c6 <atan+0x246>
 801288a:	ee10 0a10 	vmov	r0, s0
 801288e:	4b48      	ldr	r3, [pc, #288]	; (80129b0 <atan+0x330>)
 8012890:	2200      	movs	r2, #0
 8012892:	4629      	mov	r1, r5
 8012894:	f7ed fd08 	bl	80002a8 <__aeabi_dsub>
 8012898:	4b45      	ldr	r3, [pc, #276]	; (80129b0 <atan+0x330>)
 801289a:	4606      	mov	r6, r0
 801289c:	460f      	mov	r7, r1
 801289e:	2200      	movs	r2, #0
 80128a0:	4620      	mov	r0, r4
 80128a2:	4629      	mov	r1, r5
 80128a4:	f7ed feb8 	bl	8000618 <__aeabi_dmul>
 80128a8:	4b3e      	ldr	r3, [pc, #248]	; (80129a4 <atan+0x324>)
 80128aa:	2200      	movs	r2, #0
 80128ac:	f7ed fcfe 	bl	80002ac <__adddf3>
 80128b0:	4602      	mov	r2, r0
 80128b2:	460b      	mov	r3, r1
 80128b4:	4630      	mov	r0, r6
 80128b6:	4639      	mov	r1, r7
 80128b8:	f7ed ffd8 	bl	800086c <__aeabi_ddiv>
 80128bc:	f04f 0a02 	mov.w	sl, #2
 80128c0:	4604      	mov	r4, r0
 80128c2:	460d      	mov	r5, r1
 80128c4:	e743      	b.n	801274e <atan+0xce>
 80128c6:	462b      	mov	r3, r5
 80128c8:	ee10 2a10 	vmov	r2, s0
 80128cc:	4939      	ldr	r1, [pc, #228]	; (80129b4 <atan+0x334>)
 80128ce:	2000      	movs	r0, #0
 80128d0:	f7ed ffcc 	bl	800086c <__aeabi_ddiv>
 80128d4:	f04f 0a03 	mov.w	sl, #3
 80128d8:	4604      	mov	r4, r0
 80128da:	460d      	mov	r5, r1
 80128dc:	e737      	b.n	801274e <atan+0xce>
 80128de:	4b36      	ldr	r3, [pc, #216]	; (80129b8 <atan+0x338>)
 80128e0:	4e36      	ldr	r6, [pc, #216]	; (80129bc <atan+0x33c>)
 80128e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80128e6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80128ea:	e9da 2300 	ldrd	r2, r3, [sl]
 80128ee:	f7ed fcdb 	bl	80002a8 <__aeabi_dsub>
 80128f2:	4622      	mov	r2, r4
 80128f4:	462b      	mov	r3, r5
 80128f6:	f7ed fcd7 	bl	80002a8 <__aeabi_dsub>
 80128fa:	4602      	mov	r2, r0
 80128fc:	460b      	mov	r3, r1
 80128fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012902:	f7ed fcd1 	bl	80002a8 <__aeabi_dsub>
 8012906:	f1bb 0f00 	cmp.w	fp, #0
 801290a:	4604      	mov	r4, r0
 801290c:	460d      	mov	r5, r1
 801290e:	f6bf aed6 	bge.w	80126be <atan+0x3e>
 8012912:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012916:	461d      	mov	r5, r3
 8012918:	e6d1      	b.n	80126be <atan+0x3e>
 801291a:	a51d      	add	r5, pc, #116	; (adr r5, 8012990 <atan+0x310>)
 801291c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012920:	e6cd      	b.n	80126be <atan+0x3e>
 8012922:	bf00      	nop
 8012924:	f3af 8000 	nop.w
 8012928:	54442d18 	.word	0x54442d18
 801292c:	bff921fb 	.word	0xbff921fb
 8012930:	8800759c 	.word	0x8800759c
 8012934:	7e37e43c 	.word	0x7e37e43c
 8012938:	e322da11 	.word	0xe322da11
 801293c:	3f90ad3a 	.word	0x3f90ad3a
 8012940:	24760deb 	.word	0x24760deb
 8012944:	3fa97b4b 	.word	0x3fa97b4b
 8012948:	a0d03d51 	.word	0xa0d03d51
 801294c:	3fb10d66 	.word	0x3fb10d66
 8012950:	c54c206e 	.word	0xc54c206e
 8012954:	3fb745cd 	.word	0x3fb745cd
 8012958:	920083ff 	.word	0x920083ff
 801295c:	3fc24924 	.word	0x3fc24924
 8012960:	5555550d 	.word	0x5555550d
 8012964:	3fd55555 	.word	0x3fd55555
 8012968:	2c6a6c2f 	.word	0x2c6a6c2f
 801296c:	bfa2b444 	.word	0xbfa2b444
 8012970:	52defd9a 	.word	0x52defd9a
 8012974:	3fadde2d 	.word	0x3fadde2d
 8012978:	af749a6d 	.word	0xaf749a6d
 801297c:	3fb3b0f2 	.word	0x3fb3b0f2
 8012980:	fe231671 	.word	0xfe231671
 8012984:	3fbc71c6 	.word	0x3fbc71c6
 8012988:	9998ebc4 	.word	0x9998ebc4
 801298c:	3fc99999 	.word	0x3fc99999
 8012990:	54442d18 	.word	0x54442d18
 8012994:	3ff921fb 	.word	0x3ff921fb
 8012998:	440fffff 	.word	0x440fffff
 801299c:	7ff00000 	.word	0x7ff00000
 80129a0:	3fdbffff 	.word	0x3fdbffff
 80129a4:	3ff00000 	.word	0x3ff00000
 80129a8:	3ff2ffff 	.word	0x3ff2ffff
 80129ac:	40038000 	.word	0x40038000
 80129b0:	3ff80000 	.word	0x3ff80000
 80129b4:	bff00000 	.word	0xbff00000
 80129b8:	080132e8 	.word	0x080132e8
 80129bc:	080132c8 	.word	0x080132c8

080129c0 <fabs>:
 80129c0:	ec51 0b10 	vmov	r0, r1, d0
 80129c4:	ee10 2a10 	vmov	r2, s0
 80129c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80129cc:	ec43 2b10 	vmov	d0, r2, r3
 80129d0:	4770      	bx	lr

080129d2 <finite>:
 80129d2:	b082      	sub	sp, #8
 80129d4:	ed8d 0b00 	vstr	d0, [sp]
 80129d8:	9801      	ldr	r0, [sp, #4]
 80129da:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80129de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80129e2:	0fc0      	lsrs	r0, r0, #31
 80129e4:	b002      	add	sp, #8
 80129e6:	4770      	bx	lr

080129e8 <floor>:
 80129e8:	ec51 0b10 	vmov	r0, r1, d0
 80129ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80129f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80129f8:	2e13      	cmp	r6, #19
 80129fa:	ee10 5a10 	vmov	r5, s0
 80129fe:	ee10 8a10 	vmov	r8, s0
 8012a02:	460c      	mov	r4, r1
 8012a04:	dc32      	bgt.n	8012a6c <floor+0x84>
 8012a06:	2e00      	cmp	r6, #0
 8012a08:	da14      	bge.n	8012a34 <floor+0x4c>
 8012a0a:	a333      	add	r3, pc, #204	; (adr r3, 8012ad8 <floor+0xf0>)
 8012a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a10:	f7ed fc4c 	bl	80002ac <__adddf3>
 8012a14:	2200      	movs	r2, #0
 8012a16:	2300      	movs	r3, #0
 8012a18:	f7ee f88e 	bl	8000b38 <__aeabi_dcmpgt>
 8012a1c:	b138      	cbz	r0, 8012a2e <floor+0x46>
 8012a1e:	2c00      	cmp	r4, #0
 8012a20:	da57      	bge.n	8012ad2 <floor+0xea>
 8012a22:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012a26:	431d      	orrs	r5, r3
 8012a28:	d001      	beq.n	8012a2e <floor+0x46>
 8012a2a:	4c2d      	ldr	r4, [pc, #180]	; (8012ae0 <floor+0xf8>)
 8012a2c:	2500      	movs	r5, #0
 8012a2e:	4621      	mov	r1, r4
 8012a30:	4628      	mov	r0, r5
 8012a32:	e025      	b.n	8012a80 <floor+0x98>
 8012a34:	4f2b      	ldr	r7, [pc, #172]	; (8012ae4 <floor+0xfc>)
 8012a36:	4137      	asrs	r7, r6
 8012a38:	ea01 0307 	and.w	r3, r1, r7
 8012a3c:	4303      	orrs	r3, r0
 8012a3e:	d01f      	beq.n	8012a80 <floor+0x98>
 8012a40:	a325      	add	r3, pc, #148	; (adr r3, 8012ad8 <floor+0xf0>)
 8012a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a46:	f7ed fc31 	bl	80002ac <__adddf3>
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	f7ee f873 	bl	8000b38 <__aeabi_dcmpgt>
 8012a52:	2800      	cmp	r0, #0
 8012a54:	d0eb      	beq.n	8012a2e <floor+0x46>
 8012a56:	2c00      	cmp	r4, #0
 8012a58:	bfbe      	ittt	lt
 8012a5a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012a5e:	fa43 f606 	asrlt.w	r6, r3, r6
 8012a62:	19a4      	addlt	r4, r4, r6
 8012a64:	ea24 0407 	bic.w	r4, r4, r7
 8012a68:	2500      	movs	r5, #0
 8012a6a:	e7e0      	b.n	8012a2e <floor+0x46>
 8012a6c:	2e33      	cmp	r6, #51	; 0x33
 8012a6e:	dd0b      	ble.n	8012a88 <floor+0xa0>
 8012a70:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012a74:	d104      	bne.n	8012a80 <floor+0x98>
 8012a76:	ee10 2a10 	vmov	r2, s0
 8012a7a:	460b      	mov	r3, r1
 8012a7c:	f7ed fc16 	bl	80002ac <__adddf3>
 8012a80:	ec41 0b10 	vmov	d0, r0, r1
 8012a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a88:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a90:	fa23 f707 	lsr.w	r7, r3, r7
 8012a94:	4207      	tst	r7, r0
 8012a96:	d0f3      	beq.n	8012a80 <floor+0x98>
 8012a98:	a30f      	add	r3, pc, #60	; (adr r3, 8012ad8 <floor+0xf0>)
 8012a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a9e:	f7ed fc05 	bl	80002ac <__adddf3>
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	f7ee f847 	bl	8000b38 <__aeabi_dcmpgt>
 8012aaa:	2800      	cmp	r0, #0
 8012aac:	d0bf      	beq.n	8012a2e <floor+0x46>
 8012aae:	2c00      	cmp	r4, #0
 8012ab0:	da02      	bge.n	8012ab8 <floor+0xd0>
 8012ab2:	2e14      	cmp	r6, #20
 8012ab4:	d103      	bne.n	8012abe <floor+0xd6>
 8012ab6:	3401      	adds	r4, #1
 8012ab8:	ea25 0507 	bic.w	r5, r5, r7
 8012abc:	e7b7      	b.n	8012a2e <floor+0x46>
 8012abe:	2301      	movs	r3, #1
 8012ac0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012ac4:	fa03 f606 	lsl.w	r6, r3, r6
 8012ac8:	4435      	add	r5, r6
 8012aca:	4545      	cmp	r5, r8
 8012acc:	bf38      	it	cc
 8012ace:	18e4      	addcc	r4, r4, r3
 8012ad0:	e7f2      	b.n	8012ab8 <floor+0xd0>
 8012ad2:	2500      	movs	r5, #0
 8012ad4:	462c      	mov	r4, r5
 8012ad6:	e7aa      	b.n	8012a2e <floor+0x46>
 8012ad8:	8800759c 	.word	0x8800759c
 8012adc:	7e37e43c 	.word	0x7e37e43c
 8012ae0:	bff00000 	.word	0xbff00000
 8012ae4:	000fffff 	.word	0x000fffff

08012ae8 <nan>:
 8012ae8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012af0 <nan+0x8>
 8012aec:	4770      	bx	lr
 8012aee:	bf00      	nop
 8012af0:	00000000 	.word	0x00000000
 8012af4:	7ff80000 	.word	0x7ff80000

08012af8 <rint>:
 8012af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012afa:	ec51 0b10 	vmov	r0, r1, d0
 8012afe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012b02:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012b06:	2e13      	cmp	r6, #19
 8012b08:	ee10 4a10 	vmov	r4, s0
 8012b0c:	460b      	mov	r3, r1
 8012b0e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012b12:	dc58      	bgt.n	8012bc6 <rint+0xce>
 8012b14:	2e00      	cmp	r6, #0
 8012b16:	da2b      	bge.n	8012b70 <rint+0x78>
 8012b18:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012b1c:	4302      	orrs	r2, r0
 8012b1e:	d023      	beq.n	8012b68 <rint+0x70>
 8012b20:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012b24:	4302      	orrs	r2, r0
 8012b26:	4254      	negs	r4, r2
 8012b28:	4314      	orrs	r4, r2
 8012b2a:	0c4b      	lsrs	r3, r1, #17
 8012b2c:	0b24      	lsrs	r4, r4, #12
 8012b2e:	045b      	lsls	r3, r3, #17
 8012b30:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012b34:	ea44 0103 	orr.w	r1, r4, r3
 8012b38:	4b32      	ldr	r3, [pc, #200]	; (8012c04 <rint+0x10c>)
 8012b3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012b3e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012b42:	4602      	mov	r2, r0
 8012b44:	460b      	mov	r3, r1
 8012b46:	4630      	mov	r0, r6
 8012b48:	4639      	mov	r1, r7
 8012b4a:	f7ed fbaf 	bl	80002ac <__adddf3>
 8012b4e:	e9cd 0100 	strd	r0, r1, [sp]
 8012b52:	463b      	mov	r3, r7
 8012b54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b58:	4632      	mov	r2, r6
 8012b5a:	f7ed fba5 	bl	80002a8 <__aeabi_dsub>
 8012b5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012b62:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012b66:	4639      	mov	r1, r7
 8012b68:	ec41 0b10 	vmov	d0, r0, r1
 8012b6c:	b003      	add	sp, #12
 8012b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b70:	4a25      	ldr	r2, [pc, #148]	; (8012c08 <rint+0x110>)
 8012b72:	4132      	asrs	r2, r6
 8012b74:	ea01 0702 	and.w	r7, r1, r2
 8012b78:	4307      	orrs	r7, r0
 8012b7a:	d0f5      	beq.n	8012b68 <rint+0x70>
 8012b7c:	0851      	lsrs	r1, r2, #1
 8012b7e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8012b82:	4314      	orrs	r4, r2
 8012b84:	d00c      	beq.n	8012ba0 <rint+0xa8>
 8012b86:	ea23 0201 	bic.w	r2, r3, r1
 8012b8a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012b8e:	2e13      	cmp	r6, #19
 8012b90:	fa43 f606 	asr.w	r6, r3, r6
 8012b94:	bf0c      	ite	eq
 8012b96:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012b9a:	2400      	movne	r4, #0
 8012b9c:	ea42 0306 	orr.w	r3, r2, r6
 8012ba0:	4918      	ldr	r1, [pc, #96]	; (8012c04 <rint+0x10c>)
 8012ba2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012ba6:	4622      	mov	r2, r4
 8012ba8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012bac:	4620      	mov	r0, r4
 8012bae:	4629      	mov	r1, r5
 8012bb0:	f7ed fb7c 	bl	80002ac <__adddf3>
 8012bb4:	e9cd 0100 	strd	r0, r1, [sp]
 8012bb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bbc:	4622      	mov	r2, r4
 8012bbe:	462b      	mov	r3, r5
 8012bc0:	f7ed fb72 	bl	80002a8 <__aeabi_dsub>
 8012bc4:	e7d0      	b.n	8012b68 <rint+0x70>
 8012bc6:	2e33      	cmp	r6, #51	; 0x33
 8012bc8:	dd07      	ble.n	8012bda <rint+0xe2>
 8012bca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012bce:	d1cb      	bne.n	8012b68 <rint+0x70>
 8012bd0:	ee10 2a10 	vmov	r2, s0
 8012bd4:	f7ed fb6a 	bl	80002ac <__adddf3>
 8012bd8:	e7c6      	b.n	8012b68 <rint+0x70>
 8012bda:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8012bde:	f04f 36ff 	mov.w	r6, #4294967295
 8012be2:	40d6      	lsrs	r6, r2
 8012be4:	4230      	tst	r0, r6
 8012be6:	d0bf      	beq.n	8012b68 <rint+0x70>
 8012be8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8012bec:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8012bf0:	bf1f      	itttt	ne
 8012bf2:	ea24 0101 	bicne.w	r1, r4, r1
 8012bf6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012bfa:	fa44 f202 	asrne.w	r2, r4, r2
 8012bfe:	ea41 0402 	orrne.w	r4, r1, r2
 8012c02:	e7cd      	b.n	8012ba0 <rint+0xa8>
 8012c04:	08013308 	.word	0x08013308
 8012c08:	000fffff 	.word	0x000fffff
 8012c0c:	00000000 	.word	0x00000000

08012c10 <scalbn>:
 8012c10:	b570      	push	{r4, r5, r6, lr}
 8012c12:	ec55 4b10 	vmov	r4, r5, d0
 8012c16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012c1a:	4606      	mov	r6, r0
 8012c1c:	462b      	mov	r3, r5
 8012c1e:	b99a      	cbnz	r2, 8012c48 <scalbn+0x38>
 8012c20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012c24:	4323      	orrs	r3, r4
 8012c26:	d036      	beq.n	8012c96 <scalbn+0x86>
 8012c28:	4b39      	ldr	r3, [pc, #228]	; (8012d10 <scalbn+0x100>)
 8012c2a:	4629      	mov	r1, r5
 8012c2c:	ee10 0a10 	vmov	r0, s0
 8012c30:	2200      	movs	r2, #0
 8012c32:	f7ed fcf1 	bl	8000618 <__aeabi_dmul>
 8012c36:	4b37      	ldr	r3, [pc, #220]	; (8012d14 <scalbn+0x104>)
 8012c38:	429e      	cmp	r6, r3
 8012c3a:	4604      	mov	r4, r0
 8012c3c:	460d      	mov	r5, r1
 8012c3e:	da10      	bge.n	8012c62 <scalbn+0x52>
 8012c40:	a32b      	add	r3, pc, #172	; (adr r3, 8012cf0 <scalbn+0xe0>)
 8012c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c46:	e03a      	b.n	8012cbe <scalbn+0xae>
 8012c48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012c4c:	428a      	cmp	r2, r1
 8012c4e:	d10c      	bne.n	8012c6a <scalbn+0x5a>
 8012c50:	ee10 2a10 	vmov	r2, s0
 8012c54:	4620      	mov	r0, r4
 8012c56:	4629      	mov	r1, r5
 8012c58:	f7ed fb28 	bl	80002ac <__adddf3>
 8012c5c:	4604      	mov	r4, r0
 8012c5e:	460d      	mov	r5, r1
 8012c60:	e019      	b.n	8012c96 <scalbn+0x86>
 8012c62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012c66:	460b      	mov	r3, r1
 8012c68:	3a36      	subs	r2, #54	; 0x36
 8012c6a:	4432      	add	r2, r6
 8012c6c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012c70:	428a      	cmp	r2, r1
 8012c72:	dd08      	ble.n	8012c86 <scalbn+0x76>
 8012c74:	2d00      	cmp	r5, #0
 8012c76:	a120      	add	r1, pc, #128	; (adr r1, 8012cf8 <scalbn+0xe8>)
 8012c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c7c:	da1c      	bge.n	8012cb8 <scalbn+0xa8>
 8012c7e:	a120      	add	r1, pc, #128	; (adr r1, 8012d00 <scalbn+0xf0>)
 8012c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c84:	e018      	b.n	8012cb8 <scalbn+0xa8>
 8012c86:	2a00      	cmp	r2, #0
 8012c88:	dd08      	ble.n	8012c9c <scalbn+0x8c>
 8012c8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012c8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012c92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012c96:	ec45 4b10 	vmov	d0, r4, r5
 8012c9a:	bd70      	pop	{r4, r5, r6, pc}
 8012c9c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012ca0:	da19      	bge.n	8012cd6 <scalbn+0xc6>
 8012ca2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012ca6:	429e      	cmp	r6, r3
 8012ca8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012cac:	dd0a      	ble.n	8012cc4 <scalbn+0xb4>
 8012cae:	a112      	add	r1, pc, #72	; (adr r1, 8012cf8 <scalbn+0xe8>)
 8012cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d1e2      	bne.n	8012c7e <scalbn+0x6e>
 8012cb8:	a30f      	add	r3, pc, #60	; (adr r3, 8012cf8 <scalbn+0xe8>)
 8012cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cbe:	f7ed fcab 	bl	8000618 <__aeabi_dmul>
 8012cc2:	e7cb      	b.n	8012c5c <scalbn+0x4c>
 8012cc4:	a10a      	add	r1, pc, #40	; (adr r1, 8012cf0 <scalbn+0xe0>)
 8012cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d0b8      	beq.n	8012c40 <scalbn+0x30>
 8012cce:	a10e      	add	r1, pc, #56	; (adr r1, 8012d08 <scalbn+0xf8>)
 8012cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cd4:	e7b4      	b.n	8012c40 <scalbn+0x30>
 8012cd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012cda:	3236      	adds	r2, #54	; 0x36
 8012cdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012ce0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	4b0c      	ldr	r3, [pc, #48]	; (8012d18 <scalbn+0x108>)
 8012ce8:	2200      	movs	r2, #0
 8012cea:	e7e8      	b.n	8012cbe <scalbn+0xae>
 8012cec:	f3af 8000 	nop.w
 8012cf0:	c2f8f359 	.word	0xc2f8f359
 8012cf4:	01a56e1f 	.word	0x01a56e1f
 8012cf8:	8800759c 	.word	0x8800759c
 8012cfc:	7e37e43c 	.word	0x7e37e43c
 8012d00:	8800759c 	.word	0x8800759c
 8012d04:	fe37e43c 	.word	0xfe37e43c
 8012d08:	c2f8f359 	.word	0xc2f8f359
 8012d0c:	81a56e1f 	.word	0x81a56e1f
 8012d10:	43500000 	.word	0x43500000
 8012d14:	ffff3cb0 	.word	0xffff3cb0
 8012d18:	3c900000 	.word	0x3c900000

08012d1c <_init>:
 8012d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d1e:	bf00      	nop
 8012d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d22:	bc08      	pop	{r3}
 8012d24:	469e      	mov	lr, r3
 8012d26:	4770      	bx	lr

08012d28 <_fini>:
 8012d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d2a:	bf00      	nop
 8012d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d2e:	bc08      	pop	{r3}
 8012d30:	469e      	mov	lr, r3
 8012d32:	4770      	bx	lr
