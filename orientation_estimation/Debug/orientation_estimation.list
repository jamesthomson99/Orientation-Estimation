
orientation_estimation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b24  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08012cd8  08012cd8  00022cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080132b8  080132b8  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  080132b8  080132b8  000232b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080132c0  080132c0  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080132c0  080132c0  000232c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080132c4  080132c4  000232c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080132c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a8  2**0
                  CONTENTS
 10 .bss          00008bbc  200000a8  200000a8  000300a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20008c64  20008c64  000300a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000337bf  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062e5  00000000  00000000  00063897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002350  00000000  00000000  00069b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002120  00000000  00000000  0006bed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cff2  00000000  00000000  0006dff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b7bf  00000000  00000000  0009afe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f637e  00000000  00000000  000c67a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001bcb1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000aac4  00000000  00000000  001bcb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012cbc 	.word	0x08012cbc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	08012cbc 	.word	0x08012cbc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	0000      	movs	r0, r0
	...

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b0e4      	sub	sp, #400	; 0x190
 8000eec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eee:	f001 fe1b 	bl	8002b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef2:	f000 fd7f 	bl	80019f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef6:	f000 ffed 	bl	8001ed4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000efa:	f000 fde5 	bl	8001ac8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000efe:	f000 fdf7 	bl	8001af0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000f02:	f000 ff97 	bl	8001e34 <MX_FMC_Init>
  MX_I2C3_Init();
 8000f06:	f000 fe25 	bl	8001b54 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000f0a:	f000 fe63 	bl	8001bd4 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000f0e:	f000 fee1 	bl	8001cd4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000f12:	f000 ff15 	bl	8001d40 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f16:	f000 ff63 	bl	8001de0 <MX_USART1_UART_Init>

  ///////////////////////////
  //change
  ///////////////////////////

  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1e:	48ba      	ldr	r0, [pc, #744]	; (8001208 <main+0x320>)
 8000f20:	f002 fb17 	bl	8003552 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000f24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f28:	48b7      	ldr	r0, [pc, #732]	; (8001208 <main+0x320>)
 8000f2a:	f002 fb12 	bl	8003552 <HAL_GPIO_TogglePin>

  // Register holds configuration bit setup for registers
  uint8_t reg[1];

  // Gyroscope
  reg[0]=0xC0;
 8000f2e:	23c0      	movs	r3, #192	; 0xc0
 8000f30:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG1_G, 1, reg, 1, 0x100);
 8000f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f38:	9302      	str	r3, [sp, #8]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	2210      	movs	r2, #16
 8000f48:	21d6      	movs	r1, #214	; 0xd6
 8000f4a:	48b0      	ldr	r0, [pc, #704]	; (800120c <main+0x324>)
 8000f4c:	f004 f9d0 	bl	80052f0 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG2_G, 1, reg, 1, 0x100);
 8000f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	2211      	movs	r2, #17
 8000f6a:	21d6      	movs	r1, #214	; 0xd6
 8000f6c:	48a7      	ldr	r0, [pc, #668]	; (800120c <main+0x324>)
 8000f6e:	f004 f9bf 	bl	80052f0 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG3_G, 1, reg, 1, 0x100);
 8000f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	2212      	movs	r2, #18
 8000f8c:	21d6      	movs	r1, #214	; 0xd6
 8000f8e:	489f      	ldr	r0, [pc, #636]	; (800120c <main+0x324>)
 8000f90:	f004 f9ae 	bl	80052f0 <HAL_I2C_Mem_Write>
  reg[0]=0x38;
 8000f94:	2338      	movs	r3, #56	; 0x38
 8000f96:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG4, 1, reg, 1, 0x100);
 8000f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	221e      	movs	r2, #30
 8000fae:	21d6      	movs	r1, #214	; 0xd6
 8000fb0:	4896      	ldr	r0, [pc, #600]	; (800120c <main+0x324>)
 8000fb2:	f004 f99d 	bl	80052f0 <HAL_I2C_Mem_Write>


  // Accelerometer
  reg[0]=0x38;
 8000fb6:	2338      	movs	r3, #56	; 0x38
 8000fb8:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG5_XL, 1, reg, 1, 0x100);
 8000fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	221f      	movs	r2, #31
 8000fd0:	21d6      	movs	r1, #214	; 0xd6
 8000fd2:	488e      	ldr	r0, [pc, #568]	; (800120c <main+0x324>)
 8000fd4:	f004 f98c 	bl	80052f0 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG6_XL, 1, reg, 1, 0x100);
 8000fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	21d6      	movs	r1, #214	; 0xd6
 8000ff4:	4885      	ldr	r0, [pc, #532]	; (800120c <main+0x324>)
 8000ff6:	f004 f97b 	bl	80052f0 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG7_XL, 1, reg, 1, 0x100);
 8001000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	2221      	movs	r2, #33	; 0x21
 8001014:	21d6      	movs	r1, #214	; 0xd6
 8001016:	487d      	ldr	r0, [pc, #500]	; (800120c <main+0x324>)
 8001018:	f004 f96a 	bl	80052f0 <HAL_I2C_Mem_Write>


  // Magnetometer
  reg[0]=0x1C;
 800101c:	231c      	movs	r3, #28
 800101e:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG1_M, 1, reg, 1, 0x100);
 8001022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2301      	movs	r3, #1
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	2220      	movs	r2, #32
 8001036:	213c      	movs	r1, #60	; 0x3c
 8001038:	4874      	ldr	r0, [pc, #464]	; (800120c <main+0x324>)
 800103a:	f004 f959 	bl	80052f0 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG2_M, 1, reg, 1, 0x100);
 8001044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	2301      	movs	r3, #1
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	2221      	movs	r2, #33	; 0x21
 8001058:	213c      	movs	r1, #60	; 0x3c
 800105a:	486c      	ldr	r0, [pc, #432]	; (800120c <main+0x324>)
 800105c:	f004 f948 	bl	80052f0 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG3_M, 1, reg, 1, 0x100);
 8001066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2301      	movs	r3, #1
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	2222      	movs	r2, #34	; 0x22
 800107a:	213c      	movs	r1, #60	; 0x3c
 800107c:	4863      	ldr	r0, [pc, #396]	; (800120c <main+0x324>)
 800107e:	f004 f937 	bl	80052f0 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8001082:	2300      	movs	r3, #0
 8001084:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG4_M, 1, reg, 1, 0x100);
 8001088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	2223      	movs	r2, #35	; 0x23
 800109c:	213c      	movs	r1, #60	; 0x3c
 800109e:	485b      	ldr	r0, [pc, #364]	; (800120c <main+0x324>)
 80010a0:	f004 f926 	bl	80052f0 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG5_M, 1, reg, 1, 0x100);
 80010aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	2301      	movs	r3, #1
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	2224      	movs	r2, #36	; 0x24
 80010be:	213c      	movs	r1, #60	; 0x3c
 80010c0:	4852      	ldr	r0, [pc, #328]	; (800120c <main+0x324>)
 80010c2:	f004 f915 	bl	80052f0 <HAL_I2C_Mem_Write>

  double a[3], g[3], m[3];
  uint8_t recieve[6];
  uint8_t buf[50];
  int16_t i = 0, g_data[3],a_data[3], m_data[3];
 80010c6:	2300      	movs	r3, #0
 80010c8:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80010cc:	4b50      	ldr	r3, [pc, #320]	; (8001210 <main+0x328>)
 80010ce:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80010d2:	461d      	mov	r5, r3
 80010d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010e0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f00a fc3e 	bl	800b968 <osThreadCreate>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a49      	ldr	r2, [pc, #292]	; (8001214 <main+0x32c>)
 80010f0:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  char st[50]="";
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	3304      	adds	r3, #4
 80010fa:	222e      	movs	r2, #46	; 0x2e
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00d f856 	bl	800e1b0 <memset>
	  char st1[50]="";
 8001104:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	3304      	adds	r3, #4
 800110e:	222e      	movs	r2, #46	; 0x2e
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f00d f84c 	bl	800e1b0 <memset>
	  char st2[50]="";
 8001118:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	3304      	adds	r3, #4
 8001122:	222e      	movs	r2, #46	; 0x2e
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f00d f842 	bl	800e1b0 <memset>

	  // Receive gyroscope data

	  HAL_I2C_Mem_Read(&hi2c3, IMU_GYRO_ACC, 0x18, 1, recieve, 6, 0x100);
 800112c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2306      	movs	r3, #6
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	2218      	movs	r2, #24
 8001140:	21d6      	movs	r1, #214	; 0xd6
 8001142:	4832      	ldr	r0, [pc, #200]	; (800120c <main+0x324>)
 8001144:	f004 f9ce 	bl	80054e4 <HAL_I2C_Mem_Read>
	  for(i = 0;i<3;i++)
 8001148:	2300      	movs	r3, #0
 800114a:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 800114e:	e03f      	b.n	80011d0 <main+0x2e8>
	  {
		  g_data[i]=(recieve[2*i+1]<<8)|recieve[2*i];
 8001150:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	3301      	adds	r3, #1
 8001158:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800115c:	4413      	add	r3, r2
 800115e:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b219      	sxth	r1, r3
 8001166:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001170:	4413      	add	r3, r2
 8001172:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001176:	b21a      	sxth	r2, r3
 8001178:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800117c:	430a      	orrs	r2, r1
 800117e:	b212      	sxth	r2, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8001186:	440b      	add	r3, r1
 8001188:	f823 2c94 	strh.w	r2, [r3, #-148]
		  g[i] = (double)g_data[i]*0.007477;//(245/32768)
 800118c:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001196:	4413      	add	r3, r2
 8001198:	f933 3c94 	ldrsh.w	r3, [r3, #-148]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9d1 	bl	8000544 <__aeabi_i2d>
 80011a2:	f9b7 417e 	ldrsh.w	r4, [r7, #382]	; 0x17e
 80011a6:	a316      	add	r3, pc, #88	; (adr r3, 8001200 <main+0x318>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff fa34 	bl	8000618 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	00e1      	lsls	r1, r4, #3
 80011b6:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 80011ba:	4401      	add	r1, r0
 80011bc:	3938      	subs	r1, #56	; 0x38
 80011be:	e9c1 2300 	strd	r2, r3, [r1]
	  for(i = 0;i<3;i++)
 80011c2:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	3301      	adds	r3, #1
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 80011d0:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	ddbb      	ble.n	8001150 <main+0x268>
	  }

	  // Receive accelerometer data

	  HAL_I2C_Mem_Read(&hi2c3, IMU_GYRO_ACC, 0x28, 1, recieve, 6, 0x100);
 80011d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011dc:	9302      	str	r3, [sp, #8]
 80011de:	2306      	movs	r3, #6
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	2228      	movs	r2, #40	; 0x28
 80011ec:	21d6      	movs	r1, #214	; 0xd6
 80011ee:	4807      	ldr	r0, [pc, #28]	; (800120c <main+0x324>)
 80011f0:	f004 f978 	bl	80054e4 <HAL_I2C_Mem_Read>
	  for(i = 0;i<3;i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 80011fa:	e04d      	b.n	8001298 <main+0x3b0>
 80011fc:	f3af 8000 	nop.w
 8001200:	e78e1933 	.word	0xe78e1933
 8001204:	3f7ea033 	.word	0x3f7ea033
 8001208:	40021800 	.word	0x40021800
 800120c:	20008254 	.word	0x20008254
 8001210:	08012cf4 	.word	0x08012cf4
 8001214:	20008250 	.word	0x20008250
	  {
		  a_data[i]=(recieve[2*i+1]<<8)|recieve[2*i];
 8001218:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	3301      	adds	r3, #1
 8001220:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001224:	4413      	add	r3, r2
 8001226:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	b219      	sxth	r1, r3
 800122e:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001238:	4413      	add	r3, r2
 800123a:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800123e:	b21a      	sxth	r2, r3
 8001240:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001244:	430a      	orrs	r2, r1
 8001246:	b212      	sxth	r2, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 800124e:	440b      	add	r3, r1
 8001250:	f823 2c9c 	strh.w	r2, [r3, #-156]
		  a[i] = (double)a_data[i]/16384;//(2/32768)
 8001254:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800125e:	4413      	add	r3, r2
 8001260:	f933 3c9c 	ldrsh.w	r3, [r3, #-156]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f96d 	bl	8000544 <__aeabi_i2d>
 800126a:	f9b7 417e 	ldrsh.w	r4, [r7, #382]	; 0x17e
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4bb1      	ldr	r3, [pc, #708]	; (8001538 <main+0x650>)
 8001274:	f7ff fafa 	bl	800086c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	00e1      	lsls	r1, r4, #3
 800127e:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8001282:	4401      	add	r1, r0
 8001284:	3920      	subs	r1, #32
 8001286:	e9c1 2300 	strd	r2, r3, [r1]
	  for(i = 0;i<3;i++)
 800128a:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800128e:	b29b      	uxth	r3, r3
 8001290:	3301      	adds	r3, #1
 8001292:	b29b      	uxth	r3, r3
 8001294:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 8001298:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800129c:	2b02      	cmp	r3, #2
 800129e:	ddbb      	ble.n	8001218 <main+0x330>
	  }

	  // Receive magnetometer data

	  HAL_I2C_Mem_Read(&hi2c3, IMU_MAG, 0x28, 1, recieve, 6, 0x100);
 80012a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	2306      	movs	r3, #6
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	2228      	movs	r2, #40	; 0x28
 80012b4:	213c      	movs	r1, #60	; 0x3c
 80012b6:	48a1      	ldr	r0, [pc, #644]	; (800153c <main+0x654>)
 80012b8:	f004 f914 	bl	80054e4 <HAL_I2C_Mem_Read>
	  for(i = 0;i<3;i++)
 80012bc:	2300      	movs	r3, #0
 80012be:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 80012c2:	e03f      	b.n	8001344 <main+0x45c>
	  {
		  m_data[i]=(recieve[2*i+1]<<8)|recieve[2*i];
 80012c4:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	3301      	adds	r3, #1
 80012cc:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80012d0:	4413      	add	r3, r2
 80012d2:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b219      	sxth	r1, r3
 80012da:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80012e4:	4413      	add	r3, r2
 80012e6:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80012f0:	430a      	orrs	r2, r1
 80012f2:	b212      	sxth	r2, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80012fa:	440b      	add	r3, r1
 80012fc:	f823 2ca4 	strh.w	r2, [r3, #-164]
		  m[i] = (double)m_data[i]*0.0001221;//(4/32768)
 8001300:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800130a:	4413      	add	r3, r2
 800130c:	f933 3ca4 	ldrsh.w	r3, [r3, #-164]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f917 	bl	8000544 <__aeabi_i2d>
 8001316:	f9b7 417e 	ldrsh.w	r4, [r7, #382]	; 0x17e
 800131a:	a385      	add	r3, pc, #532	; (adr r3, 8001530 <main+0x648>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff f97a 	bl	8000618 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	00e1      	lsls	r1, r4, #3
 800132a:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 800132e:	4401      	add	r1, r0
 8001330:	3950      	subs	r1, #80	; 0x50
 8001332:	e9c1 2300 	strd	r2, r3, [r1]
	  for(i = 0;i<3;i++)
 8001336:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800133a:	b29b      	uxth	r3, r3
 800133c:	3301      	adds	r3, #1
 800133e:	b29b      	uxth	r3, r3
 8001340:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 8001344:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001348:	2b02      	cmp	r3, #2
 800134a:	ddbb      	ble.n	80012c4 <main+0x3dc>
	  }

	  wx = g[0];
 800134c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001350:	497b      	ldr	r1, [pc, #492]	; (8001540 <main+0x658>)
 8001352:	e9c1 2300 	strd	r2, r3, [r1]
	  wy = g[1];
 8001356:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800135a:	497a      	ldr	r1, [pc, #488]	; (8001544 <main+0x65c>)
 800135c:	e9c1 2300 	strd	r2, r3, [r1]
	  wz = g[2];
 8001360:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001364:	4978      	ldr	r1, [pc, #480]	; (8001548 <main+0x660>)
 8001366:	e9c1 2300 	strd	r2, r3, [r1]
	  ax = a[0];
 800136a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800136e:	4977      	ldr	r1, [pc, #476]	; (800154c <main+0x664>)
 8001370:	e9c1 2300 	strd	r2, r3, [r1]
	  ay = a[1];
 8001374:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8001378:	4975      	ldr	r1, [pc, #468]	; (8001550 <main+0x668>)
 800137a:	e9c1 2300 	strd	r2, r3, [r1]
	  az = a[2];
 800137e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8001382:	4974      	ldr	r1, [pc, #464]	; (8001554 <main+0x66c>)
 8001384:	e9c1 2300 	strd	r2, r3, [r1]
	  mx = m[0];
 8001388:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800138c:	4972      	ldr	r1, [pc, #456]	; (8001558 <main+0x670>)
 800138e:	e9c1 2300 	strd	r2, r3, [r1]
	  my = m[1];
 8001392:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001396:	4971      	ldr	r1, [pc, #452]	; (800155c <main+0x674>)
 8001398:	e9c1 2300 	strd	r2, r3, [r1]
	  mz = m[2];
 800139c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80013a0:	496f      	ldr	r1, [pc, #444]	; (8001560 <main+0x678>)
 80013a2:	e9c1 2300 	strd	r2, r3, [r1]
//
//	  strcpy((char*)buf, st2);
//	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);

	  // Call CF
	  CF();
 80013a6:	f000 f91b 	bl	80015e0 <CF>

	  // Send CF yaw (y), pitch (p), roll (r) via UART to PC to be visualized
	  strcat(st1, "y");
 80013aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7fe ff1e 	bl	80001f0 <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013bc:	4413      	add	r3, r2
 80013be:	4969      	ldr	r1, [pc, #420]	; (8001564 <main+0x67c>)
 80013c0:	461a      	mov	r2, r3
 80013c2:	460b      	mov	r3, r1
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	8013      	strh	r3, [r2, #0]
	  double_to_char(yaw_cf, buffer);
 80013c8:	4b67      	ldr	r3, [pc, #412]	; (8001568 <main+0x680>)
 80013ca:	ed93 7b00 	vldr	d7, [r3]
 80013ce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013d2:	4618      	mov	r0, r3
 80013d4:	eeb0 0a47 	vmov.f32	s0, s14
 80013d8:	eef0 0a67 	vmov.f32	s1, s15
 80013dc:	f000 f8d2 	bl	8001584 <double_to_char>
	  strcat(st1, buffer);
 80013e0:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80013e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00c ffa2 	bl	800e334 <strcat>
	  strcat(st1, "y");
 80013f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7fe fefb 	bl	80001f0 <strlen>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001402:	4413      	add	r3, r2
 8001404:	4957      	ldr	r1, [pc, #348]	; (8001564 <main+0x67c>)
 8001406:	461a      	mov	r2, r3
 8001408:	460b      	mov	r3, r1
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	8013      	strh	r3, [r2, #0]

	  strcat(st1, "p");
 800140e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001412:	4618      	mov	r0, r3
 8001414:	f7fe feec 	bl	80001f0 <strlen>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001420:	4413      	add	r3, r2
 8001422:	4952      	ldr	r1, [pc, #328]	; (800156c <main+0x684>)
 8001424:	461a      	mov	r2, r3
 8001426:	460b      	mov	r3, r1
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	8013      	strh	r3, [r2, #0]
	  double_to_char(pitch_cf, buffer);
 800142c:	4b50      	ldr	r3, [pc, #320]	; (8001570 <main+0x688>)
 800142e:	ed93 7b00 	vldr	d7, [r3]
 8001432:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001436:	4618      	mov	r0, r3
 8001438:	eeb0 0a47 	vmov.f32	s0, s14
 800143c:	eef0 0a67 	vmov.f32	s1, s15
 8001440:	f000 f8a0 	bl	8001584 <double_to_char>
	  strcat(st1, buffer);
 8001444:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001448:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f00c ff70 	bl	800e334 <strcat>
	  strcat(st1, "p");
 8001454:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001458:	4618      	mov	r0, r3
 800145a:	f7fe fec9 	bl	80001f0 <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001466:	4413      	add	r3, r2
 8001468:	4940      	ldr	r1, [pc, #256]	; (800156c <main+0x684>)
 800146a:	461a      	mov	r2, r3
 800146c:	460b      	mov	r3, r1
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	8013      	strh	r3, [r2, #0]

	  strcat(st1, "r");
 8001472:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe feba 	bl	80001f0 <strlen>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001484:	4413      	add	r3, r2
 8001486:	493b      	ldr	r1, [pc, #236]	; (8001574 <main+0x68c>)
 8001488:	461a      	mov	r2, r3
 800148a:	460b      	mov	r3, r1
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	8013      	strh	r3, [r2, #0]
	  double_to_char(roll_cf, buffer);
 8001490:	4b39      	ldr	r3, [pc, #228]	; (8001578 <main+0x690>)
 8001492:	ed93 7b00 	vldr	d7, [r3]
 8001496:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800149a:	4618      	mov	r0, r3
 800149c:	eeb0 0a47 	vmov.f32	s0, s14
 80014a0:	eef0 0a67 	vmov.f32	s1, s15
 80014a4:	f000 f86e 	bl	8001584 <double_to_char>
	  strcat(st1, buffer);
 80014a8:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80014ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f00c ff3e 	bl	800e334 <strcat>
	  strcat(st1, "r");
 80014b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe fe97 	bl	80001f0 <strlen>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014ca:	4413      	add	r3, r2
 80014cc:	4929      	ldr	r1, [pc, #164]	; (8001574 <main+0x68c>)
 80014ce:	461a      	mov	r2, r3
 80014d0:	460b      	mov	r3, r1
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	8013      	strh	r3, [r2, #0]

	  strcat(st1, "\n");
 80014d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe fe88 	bl	80001f0 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014e8:	4413      	add	r3, r2
 80014ea:	4924      	ldr	r1, [pc, #144]	; (800157c <main+0x694>)
 80014ec:	461a      	mov	r2, r3
 80014ee:	460b      	mov	r3, r1
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	8013      	strh	r3, [r2, #0]
	  strcpy((char*)buf, st1);
 80014f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014f8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f00c ff27 	bl	800e352 <strcpy>
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001504:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe fe71 	bl	80001f0 <strlen>
 800150e:	4603      	mov	r3, r0
 8001510:	b29a      	uxth	r2, r3
 8001512:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	4819      	ldr	r0, [pc, #100]	; (8001580 <main+0x698>)
 800151c:	f006 fd35 	bl	8007f8a <HAL_UART_Transmit>

	  // Sample period
	  HAL_Delay(delay_ms);
 8001520:	2314      	movs	r3, #20
 8001522:	4618      	mov	r0, r3
 8001524:	f001 fb42 	bl	8002bac <HAL_Delay>
  {
 8001528:	e5e3      	b.n	80010f2 <main+0x20a>
 800152a:	bf00      	nop
 800152c:	f3af 8000 	nop.w
 8001530:	0380be01 	.word	0x0380be01
 8001534:	3f2000ff 	.word	0x3f2000ff
 8001538:	40d00000 	.word	0x40d00000
 800153c:	20008254 	.word	0x20008254
 8001540:	20008310 	.word	0x20008310
 8001544:	200084f8 	.word	0x200084f8
 8001548:	20008248 	.word	0x20008248
 800154c:	200083d8 	.word	0x200083d8
 8001550:	20008508 	.word	0x20008508
 8001554:	20008318 	.word	0x20008318
 8001558:	20008510 	.word	0x20008510
 800155c:	20008320 	.word	0x20008320
 8001560:	200000c8 	.word	0x200000c8
 8001564:	08012ce4 	.word	0x08012ce4
 8001568:	200000e0 	.word	0x200000e0
 800156c:	08012ce8 	.word	0x08012ce8
 8001570:	200000d0 	.word	0x200000d0
 8001574:	08012cec 	.word	0x08012cec
 8001578:	200000d8 	.word	0x200000d8
 800157c:	08012cf0 	.word	0x08012cf0
 8001580:	200083e0 	.word	0x200083e0

08001584 <double_to_char>:
  }
  /* USER CODE END 3 */
}

// Function to convert double variables to a char
void double_to_char(double f,char * buffer){
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	ed87 0b02 	vstr	d0, [r7, #8]
 800158e:	6078      	str	r0, [r7, #4]
    gcvt(f, 10, buffer);
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	200a      	movs	r0, #10
 8001594:	ed97 0b02 	vldr	d0, [r7, #8]
 8001598:	f00c fd9e 	bl	800e0d8 <gcvt>
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	0000      	movs	r0, r0
	...

080015a8 <RAD_TO_DEG>:

// Receives radian angle and returns degree angle
double RAD_TO_DEG(double RAD){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	ed87 0b00 	vstr	d0, [r7]
    return (RAD * (180/3.14159265359));
 80015b2:	a309      	add	r3, pc, #36	; (adr r3, 80015d8 <RAD_TO_DEG+0x30>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015bc:	f7ff f82c 	bl	8000618 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	ec43 2b17 	vmov	d7, r2, r3
}
 80015c8:	eeb0 0a47 	vmov.f32	s0, s14
 80015cc:	eef0 0a67 	vmov.f32	s1, s15
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	1a63bfe5 	.word	0x1a63bfe5
 80015dc:	404ca5dc 	.word	0x404ca5dc

080015e0 <CF>:
double DEG_TO_RAD(double DEG){
    return (DEG * (3.14159265359/180));
}

// Complementary filter implementation
void CF(){
 80015e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015e4:	b090      	sub	sp, #64	; 0x40
 80015e6:	af00      	add	r7, sp, #0

    // Calculate pitch and roll measured by accelerometer
	double a_pitch_cf = RAD_TO_DEG(atan2(-ax, sqrt(pow(ay, 2) + pow(az, 2))));
 80015e8:	4bd1      	ldr	r3, [pc, #836]	; (8001930 <CF+0x350>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	4690      	mov	r8, r2
 80015f0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80015f4:	4bcf      	ldr	r3, [pc, #828]	; (8001934 <CF+0x354>)
 80015f6:	ed93 7b00 	vldr	d7, [r3]
 80015fa:	ed9f 1bcb 	vldr	d1, [pc, #812]	; 8001928 <CF+0x348>
 80015fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001602:	eef0 0a67 	vmov.f32	s1, s15
 8001606:	f00f f9b1 	bl	801096c <pow>
 800160a:	ec5b ab10 	vmov	sl, fp, d0
 800160e:	4bca      	ldr	r3, [pc, #808]	; (8001938 <CF+0x358>)
 8001610:	ed93 7b00 	vldr	d7, [r3]
 8001614:	ed9f 1bc4 	vldr	d1, [pc, #784]	; 8001928 <CF+0x348>
 8001618:	eeb0 0a47 	vmov.f32	s0, s14
 800161c:	eef0 0a67 	vmov.f32	s1, s15
 8001620:	f00f f9a4 	bl	801096c <pow>
 8001624:	ec53 2b10 	vmov	r2, r3, d0
 8001628:	4650      	mov	r0, sl
 800162a:	4659      	mov	r1, fp
 800162c:	f7fe fe3e 	bl	80002ac <__adddf3>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	ec43 2b17 	vmov	d7, r2, r3
 8001638:	eeb0 0a47 	vmov.f32	s0, s14
 800163c:	eef0 0a67 	vmov.f32	s1, s15
 8001640:	f00f fa42 	bl	8010ac8 <sqrt>
 8001644:	eeb0 7a40 	vmov.f32	s14, s0
 8001648:	eef0 7a60 	vmov.f32	s15, s1
 800164c:	eeb0 1a47 	vmov.f32	s2, s14
 8001650:	eef0 1a67 	vmov.f32	s3, s15
 8001654:	ec49 8b10 	vmov	d0, r8, r9
 8001658:	f00f f986 	bl	8010968 <atan2>
 800165c:	eeb0 7a40 	vmov.f32	s14, s0
 8001660:	eef0 7a60 	vmov.f32	s15, s1
 8001664:	eeb0 0a47 	vmov.f32	s0, s14
 8001668:	eef0 0a67 	vmov.f32	s1, s15
 800166c:	f7ff ff9c 	bl	80015a8 <RAD_TO_DEG>
 8001670:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	double a_roll_cf = RAD_TO_DEG(atan2(ay, az));
 8001674:	4baf      	ldr	r3, [pc, #700]	; (8001934 <CF+0x354>)
 8001676:	ed93 7b00 	vldr	d7, [r3]
 800167a:	4baf      	ldr	r3, [pc, #700]	; (8001938 <CF+0x358>)
 800167c:	ed93 6b00 	vldr	d6, [r3]
 8001680:	eeb0 1a46 	vmov.f32	s2, s12
 8001684:	eef0 1a66 	vmov.f32	s3, s13
 8001688:	eeb0 0a47 	vmov.f32	s0, s14
 800168c:	eef0 0a67 	vmov.f32	s1, s15
 8001690:	f00f f96a 	bl	8010968 <atan2>
 8001694:	eeb0 7a40 	vmov.f32	s14, s0
 8001698:	eef0 7a60 	vmov.f32	s15, s1
 800169c:	eeb0 0a47 	vmov.f32	s0, s14
 80016a0:	eef0 0a67 	vmov.f32	s1, s15
 80016a4:	f7ff ff80 	bl	80015a8 <RAD_TO_DEG>
 80016a8:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

    // Calculate yaw measured by magnetometer
	double Mx_cf = mx * cos(a_pitch_cf) + mz * sin(a_pitch_cf);
 80016ac:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80016b0:	f00f f8b6 	bl	8010820 <cos>
 80016b4:	ec51 0b10 	vmov	r0, r1, d0
 80016b8:	4ba0      	ldr	r3, [pc, #640]	; (800193c <CF+0x35c>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7fe ffab 	bl	8000618 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4690      	mov	r8, r2
 80016c8:	4699      	mov	r9, r3
 80016ca:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80016ce:	f00f f8f7 	bl	80108c0 <sin>
 80016d2:	ec51 0b10 	vmov	r0, r1, d0
 80016d6:	4b9a      	ldr	r3, [pc, #616]	; (8001940 <CF+0x360>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7fe ff9c 	bl	8000618 <__aeabi_dmul>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4640      	mov	r0, r8
 80016e6:	4649      	mov	r1, r9
 80016e8:	f7fe fde0 	bl	80002ac <__adddf3>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double My_cf = mx * sin(a_roll_cf) * sin(a_pitch_cf) + my * cos(a_roll_cf) - mz * sin(a_roll_cf) * cos(a_pitch_cf);
 80016f4:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80016f8:	f00f f8e2 	bl	80108c0 <sin>
 80016fc:	ec51 0b10 	vmov	r0, r1, d0
 8001700:	4b8e      	ldr	r3, [pc, #568]	; (800193c <CF+0x35c>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe ff87 	bl	8000618 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4690      	mov	r8, r2
 8001710:	4699      	mov	r9, r3
 8001712:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001716:	f00f f8d3 	bl	80108c0 <sin>
 800171a:	ec53 2b10 	vmov	r2, r3, d0
 800171e:	4640      	mov	r0, r8
 8001720:	4649      	mov	r1, r9
 8001722:	f7fe ff79 	bl	8000618 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4690      	mov	r8, r2
 800172c:	4699      	mov	r9, r3
 800172e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001732:	f00f f875 	bl	8010820 <cos>
 8001736:	ec51 0b10 	vmov	r0, r1, d0
 800173a:	4b82      	ldr	r3, [pc, #520]	; (8001944 <CF+0x364>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	f7fe ff6a 	bl	8000618 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4640      	mov	r0, r8
 800174a:	4649      	mov	r1, r9
 800174c:	f7fe fdae 	bl	80002ac <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4690      	mov	r8, r2
 8001756:	4699      	mov	r9, r3
 8001758:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800175c:	f00f f8b0 	bl	80108c0 <sin>
 8001760:	ec51 0b10 	vmov	r0, r1, d0
 8001764:	4b76      	ldr	r3, [pc, #472]	; (8001940 <CF+0x360>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7fe ff55 	bl	8000618 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4692      	mov	sl, r2
 8001774:	469b      	mov	fp, r3
 8001776:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800177a:	f00f f851 	bl	8010820 <cos>
 800177e:	ec53 2b10 	vmov	r2, r3, d0
 8001782:	4650      	mov	r0, sl
 8001784:	4659      	mov	r1, fp
 8001786:	f7fe ff47 	bl	8000618 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4640      	mov	r0, r8
 8001790:	4649      	mov	r1, r9
 8001792:	f7fe fd89 	bl	80002a8 <__aeabi_dsub>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double m_yaw_cf = RAD_TO_DEG(atan2(-My_cf, Mx_cf));
 800179e:	6a3c      	ldr	r4, [r7, #32]
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80017a6:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 80017aa:	ec45 4b10 	vmov	d0, r4, r5
 80017ae:	f00f f8db 	bl	8010968 <atan2>
 80017b2:	eeb0 7a40 	vmov.f32	s14, s0
 80017b6:	eef0 7a60 	vmov.f32	s15, s1
 80017ba:	eeb0 0a47 	vmov.f32	s0, s14
 80017be:	eef0 0a67 	vmov.f32	s1, s15
 80017c2:	f7ff fef1 	bl	80015a8 <RAD_TO_DEG>
 80017c6:	ed87 0b06 	vstr	d0, [r7, #24]

    // Calculate pitch, roll and yaw measured by gyroscope
    double g_pitch_cf = RAD_TO_DEG(wy * DT);
 80017ca:	4b5f      	ldr	r3, [pc, #380]	; (8001948 <CF+0x368>)
 80017cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d0:	4b5e      	ldr	r3, [pc, #376]	; (800194c <CF+0x36c>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7fe ff1f 	bl	8000618 <__aeabi_dmul>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	ec43 2b17 	vmov	d7, r2, r3
 80017e2:	eeb0 0a47 	vmov.f32	s0, s14
 80017e6:	eef0 0a67 	vmov.f32	s1, s15
 80017ea:	f7ff fedd 	bl	80015a8 <RAD_TO_DEG>
 80017ee:	ed87 0b04 	vstr	d0, [r7, #16]
    double g_roll_cf = RAD_TO_DEG(wx * DT);
 80017f2:	4b57      	ldr	r3, [pc, #348]	; (8001950 <CF+0x370>)
 80017f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f8:	4b54      	ldr	r3, [pc, #336]	; (800194c <CF+0x36c>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe ff0b 	bl	8000618 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	ec43 2b17 	vmov	d7, r2, r3
 800180a:	eeb0 0a47 	vmov.f32	s0, s14
 800180e:	eef0 0a67 	vmov.f32	s1, s15
 8001812:	f7ff fec9 	bl	80015a8 <RAD_TO_DEG>
 8001816:	ed87 0b02 	vstr	d0, [r7, #8]
    double g_yaw_cf = RAD_TO_DEG(wz * DT);
 800181a:	4b4e      	ldr	r3, [pc, #312]	; (8001954 <CF+0x374>)
 800181c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001820:	4b4a      	ldr	r3, [pc, #296]	; (800194c <CF+0x36c>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7fe fef7 	bl	8000618 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	ec43 2b17 	vmov	d7, r2, r3
 8001832:	eeb0 0a47 	vmov.f32	s0, s14
 8001836:	eef0 0a67 	vmov.f32	s1, s15
 800183a:	f7ff feb5 	bl	80015a8 <RAD_TO_DEG>
 800183e:	ed87 0b00 	vstr	d0, [r7]

    // Update CF pitch, roll and yaw using previous pitch, roll and yaw and values above
    pitch_cf = weight_cf * (pitch_cf + g_pitch_cf * DT) + (1 - weight_cf) * a_pitch_cf;
 8001842:	4b42      	ldr	r3, [pc, #264]	; (800194c <CF+0x36c>)
 8001844:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001848:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800184c:	f7fe fee4 	bl	8000618 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <CF+0x378>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe fd25 	bl	80002ac <__adddf3>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	4b3c      	ldr	r3, [pc, #240]	; (800195c <CF+0x37c>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe fed2 	bl	8000618 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4614      	mov	r4, r2
 800187a:	461d      	mov	r5, r3
 800187c:	4b37      	ldr	r3, [pc, #220]	; (800195c <CF+0x37c>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f04f 0000 	mov.w	r0, #0
 8001886:	4936      	ldr	r1, [pc, #216]	; (8001960 <CF+0x380>)
 8001888:	f7fe fd0e 	bl	80002a8 <__aeabi_dsub>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001898:	f7fe febe 	bl	8000618 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4620      	mov	r0, r4
 80018a2:	4629      	mov	r1, r5
 80018a4:	f7fe fd02 	bl	80002ac <__adddf3>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	492a      	ldr	r1, [pc, #168]	; (8001958 <CF+0x378>)
 80018ae:	e9c1 2300 	strd	r2, r3, [r1]
    roll_cf = weight_cf * (roll_cf + g_roll_cf * DT) + (1 - weight_cf) * a_roll_cf;
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <CF+0x36c>)
 80018b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018bc:	f7fe feac 	bl	8000618 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	4b26      	ldr	r3, [pc, #152]	; (8001964 <CF+0x384>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	f7fe fced 	bl	80002ac <__adddf3>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <CF+0x37c>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe fe9a 	bl	8000618 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <CF+0x37c>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f04f 0000 	mov.w	r0, #0
 80018f6:	491a      	ldr	r1, [pc, #104]	; (8001960 <CF+0x380>)
 80018f8:	f7fe fcd6 	bl	80002a8 <__aeabi_dsub>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001908:	f7fe fe86 	bl	8000618 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4620      	mov	r0, r4
 8001912:	4629      	mov	r1, r5
 8001914:	f7fe fcca 	bl	80002ac <__adddf3>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4911      	ldr	r1, [pc, #68]	; (8001964 <CF+0x384>)
 800191e:	e9c1 2300 	strd	r2, r3, [r1]
 8001922:	e021      	b.n	8001968 <CF+0x388>
 8001924:	f3af 8000 	nop.w
 8001928:	00000000 	.word	0x00000000
 800192c:	40000000 	.word	0x40000000
 8001930:	200083d8 	.word	0x200083d8
 8001934:	20008508 	.word	0x20008508
 8001938:	20008318 	.word	0x20008318
 800193c:	20008510 	.word	0x20008510
 8001940:	200000c8 	.word	0x200000c8
 8001944:	20008320 	.word	0x20008320
 8001948:	200084f8 	.word	0x200084f8
 800194c:	20000008 	.word	0x20000008
 8001950:	20008310 	.word	0x20008310
 8001954:	20008248 	.word	0x20008248
 8001958:	200000d0 	.word	0x200000d0
 800195c:	20000000 	.word	0x20000000
 8001960:	3ff00000 	.word	0x3ff00000
 8001964:	200000d8 	.word	0x200000d8
    yaw_cf = weight_cf * (yaw_cf + g_yaw_cf * DT) + (1 - weight_cf) * m_yaw_cf;
 8001968:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <CF+0x404>)
 800196a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800196e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001972:	f7fe fe51 	bl	8000618 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <CF+0x408>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fc92 	bl	80002ac <__adddf3>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <CF+0x40c>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe fe3f 	bl	8000618 <__aeabi_dmul>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4614      	mov	r4, r2
 80019a0:	461d      	mov	r5, r3
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <CF+0x40c>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f04f 0000 	mov.w	r0, #0
 80019ac:	4910      	ldr	r1, [pc, #64]	; (80019f0 <CF+0x410>)
 80019ae:	f7fe fc7b 	bl	80002a8 <__aeabi_dsub>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019be:	f7fe fe2b 	bl	8000618 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4620      	mov	r0, r4
 80019c8:	4629      	mov	r1, r5
 80019ca:	f7fe fc6f 	bl	80002ac <__adddf3>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4905      	ldr	r1, [pc, #20]	; (80019e8 <CF+0x408>)
 80019d4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80019d8:	bf00      	nop
 80019da:	3740      	adds	r7, #64	; 0x40
 80019dc:	46bd      	mov	sp, r7
 80019de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019e2:	bf00      	nop
 80019e4:	20000008 	.word	0x20000008
 80019e8:	200000e0 	.word	0x200000e0
 80019ec:	20000000 	.word	0x20000000
 80019f0:	3ff00000 	.word	0x3ff00000

080019f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b094      	sub	sp, #80	; 0x50
 80019f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fa:	f107 0320 	add.w	r3, r7, #32
 80019fe:	2230      	movs	r2, #48	; 0x30
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00c fbd4 	bl	800e1b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <SystemClock_Config+0xcc>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	4a27      	ldr	r2, [pc, #156]	; (8001ac0 <SystemClock_Config+0xcc>)
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a26:	6413      	str	r3, [r2, #64]	; 0x40
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <SystemClock_Config+0xcc>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a34:	2300      	movs	r3, #0
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <SystemClock_Config+0xd0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a40:	4a20      	ldr	r2, [pc, #128]	; (8001ac4 <SystemClock_Config+0xd0>)
 8001a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <SystemClock_Config+0xd0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a54:	2301      	movs	r3, #1
 8001a56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a68:	2304      	movs	r3, #4
 8001a6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a6c:	2348      	movs	r3, #72	; 0x48
 8001a6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a70:	2302      	movs	r3, #2
 8001a72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a74:	2303      	movs	r3, #3
 8001a76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a78:	f107 0320 	add.w	r3, r7, #32
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f004 fe95 	bl	80067ac <HAL_RCC_OscConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a88:	f000 fb50 	bl	800212c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a8c:	230f      	movs	r3, #15
 8001a8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a90:	2302      	movs	r3, #2
 8001a92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f005 f8f7 	bl	8006c9c <HAL_RCC_ClockConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ab4:	f000 fb3a 	bl	800212c <Error_Handler>
  }
}
 8001ab8:	bf00      	nop
 8001aba:	3750      	adds	r7, #80	; 0x50
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40007000 	.word	0x40007000

08001ac8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_CRC_Init+0x20>)
 8001ace:	4a07      	ldr	r2, [pc, #28]	; (8001aec <MX_CRC_Init+0x24>)
 8001ad0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001ad2:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_CRC_Init+0x20>)
 8001ad4:	f001 f970 	bl	8002db8 <HAL_CRC_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001ade:	f000 fb25 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20008300 	.word	0x20008300
 8001aec:	40023000 	.word	0x40023000

08001af0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MX_DMA2D_Init+0x5c>)
 8001af6:	4a16      	ldr	r2, [pc, #88]	; (8001b50 <MX_DMA2D_Init+0x60>)
 8001af8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_DMA2D_Init+0x5c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_DMA2D_Init+0x5c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_DMA2D_Init+0x5c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_DMA2D_Init+0x5c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_DMA2D_Init+0x5c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_DMA2D_Init+0x5c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <MX_DMA2D_Init+0x5c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001b24:	4809      	ldr	r0, [pc, #36]	; (8001b4c <MX_DMA2D_Init+0x5c>)
 8001b26:	f001 f963 	bl	8002df0 <HAL_DMA2D_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001b30:	f000 fafc 	bl	800212c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001b34:	2101      	movs	r1, #1
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_DMA2D_Init+0x5c>)
 8001b38:	f001 fab4 	bl	80030a4 <HAL_DMA2D_ConfigLayer>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001b42:	f000 faf3 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20008480 	.word	0x20008480
 8001b50:	4002b000 	.word	0x4002b000

08001b54 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <MX_I2C3_Init+0x78>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <MX_I2C3_Init+0x7c>)
 8001b62:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b76:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b90:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001b92:	f003 fa69 	bl	8005068 <HAL_I2C_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b9c:	f000 fac6 	bl	800212c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001ba4:	f004 fa1f 	bl	8005fe6 <HAL_I2CEx_ConfigAnalogFilter>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001bae:	f000 fabd 	bl	800212c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <MX_I2C3_Init+0x74>)
 8001bb6:	f004 fa52 	bl	800605e <HAL_I2CEx_ConfigDigitalFilter>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001bc0:	f000 fab4 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20008254 	.word	0x20008254
 8001bcc:	40005c00 	.word	0x40005c00
 8001bd0:	000186a0 	.word	0x000186a0

08001bd4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08e      	sub	sp, #56	; 0x38
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2234      	movs	r2, #52	; 0x34
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f00c fae5 	bl	800e1b0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001be6:	4b39      	ldr	r3, [pc, #228]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001be8:	4a39      	ldr	r2, [pc, #228]	; (8001cd0 <MX_LTDC_Init+0xfc>)
 8001bea:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001bec:	4b37      	ldr	r3, [pc, #220]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001bf2:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001bf8:	4b34      	ldr	r3, [pc, #208]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001bfe:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001c06:	2209      	movs	r2, #9
 8001c08:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001c10:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001c12:	221d      	movs	r2, #29
 8001c14:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001c16:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001c18:	2203      	movs	r2, #3
 8001c1a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001c1e:	f240 120d 	movw	r2, #269	; 0x10d
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001c24:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001c26:	f240 1243 	movw	r2, #323	; 0x143
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001c2e:	f240 1217 	movw	r2, #279	; 0x117
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001c36:	f240 1247 	movw	r2, #327	; 0x147
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001c3c:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001c54:	481d      	ldr	r0, [pc, #116]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001c56:	f004 fa41 	bl	80060dc <HAL_LTDC_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001c60:	f000 fa64 	bl	800212c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001c68:	23f0      	movs	r3, #240	; 0xf0
 8001c6a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001c70:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c74:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001c76:	2302      	movs	r3, #2
 8001c78:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001c7a:	23ff      	movs	r3, #255	; 0xff
 8001c7c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001c82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c86:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001c88:	2307      	movs	r3, #7
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001c8c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001c92:	23f0      	movs	r3, #240	; 0xf0
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001c96:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4805      	ldr	r0, [pc, #20]	; (8001ccc <MX_LTDC_Init+0xf8>)
 8001cb6:	f004 fba3 	bl	8006400 <HAL_LTDC_ConfigLayer>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001cc0:	f000 fa34 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	3738      	adds	r7, #56	; 0x38
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20008328 	.word	0x20008328
 8001cd0:	40016800 	.word	0x40016800

08001cd4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001cda:	4a18      	ldr	r2, [pc, #96]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d04:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001d08:	2218      	movs	r2, #24
 8001d0a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001d20:	220a      	movs	r2, #10
 8001d22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <MX_SPI5_Init+0x64>)
 8001d26:	f005 fbd9 	bl	80074dc <HAL_SPI_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001d30:	f000 f9fc 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200082a8 	.word	0x200082a8
 8001d3c:	40015000 	.word	0x40015000

08001d40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d46:	f107 0308 	add.w	r3, r7, #8
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	463b      	mov	r3, r7
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <MX_TIM1_Init+0x98>)
 8001d5e:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <MX_TIM1_Init+0x9c>)
 8001d60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d62:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <MX_TIM1_Init+0x98>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_TIM1_Init+0x98>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MX_TIM1_Init+0x98>)
 8001d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <MX_TIM1_Init+0x98>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <MX_TIM1_Init+0x98>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <MX_TIM1_Init+0x98>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d88:	4813      	ldr	r0, [pc, #76]	; (8001dd8 <MX_TIM1_Init+0x98>)
 8001d8a:	f005 fc30 	bl	80075ee <HAL_TIM_Base_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d94:	f000 f9ca 	bl	800212c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d9e:	f107 0308 	add.w	r3, r7, #8
 8001da2:	4619      	mov	r1, r3
 8001da4:	480c      	ldr	r0, [pc, #48]	; (8001dd8 <MX_TIM1_Init+0x98>)
 8001da6:	f005 fde9 	bl	800797c <HAL_TIM_ConfigClockSource>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001db0:	f000 f9bc 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db4:	2300      	movs	r3, #0
 8001db6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_TIM1_Init+0x98>)
 8001dc2:	f006 f805 	bl	8007dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001dcc:	f000 f9ae 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dd0:	bf00      	nop
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20008438 	.word	0x20008438
 8001ddc:	40010000 	.word	0x40010000

08001de0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <MX_USART1_UART_Init+0x4c>)
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <MX_USART1_UART_Init+0x50>)
 8001de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <MX_USART1_UART_Init+0x4c>)
 8001dec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <MX_USART1_UART_Init+0x4c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <MX_USART1_UART_Init+0x4c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <MX_USART1_UART_Init+0x4c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <MX_USART1_UART_Init+0x4c>)
 8001e06:	220c      	movs	r2, #12
 8001e08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <MX_USART1_UART_Init+0x4c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <MX_USART1_UART_Init+0x4c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_USART1_UART_Init+0x4c>)
 8001e18:	f006 f86a 	bl	8007ef0 <HAL_UART_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e22:	f000 f983 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200083e0 	.word	0x200083e0
 8001e30:	40011000 	.word	0x40011000

08001e34 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
 8001e48:	615a      	str	r2, [r3, #20]
 8001e4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <MX_FMC_Init+0x98>)
 8001e4e:	4a20      	ldr	r2, [pc, #128]	; (8001ed0 <MX_FMC_Init+0x9c>)
 8001e50:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <MX_FMC_Init+0x98>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e58:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <MX_FMC_Init+0x98>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <MX_FMC_Init+0x98>)
 8001e60:	2204      	movs	r2, #4
 8001e62:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <MX_FMC_Init+0x98>)
 8001e66:	2210      	movs	r2, #16
 8001e68:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <MX_FMC_Init+0x98>)
 8001e6c:	2240      	movs	r2, #64	; 0x40
 8001e6e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001e70:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <MX_FMC_Init+0x98>)
 8001e72:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001e76:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <MX_FMC_Init+0x98>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <MX_FMC_Init+0x98>)
 8001e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e84:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <MX_FMC_Init+0x98>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <MX_FMC_Init+0x98>)
 8001e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001e94:	2302      	movs	r3, #2
 8001e96:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001e98:	2307      	movs	r3, #7
 8001e9a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001ea0:	2307      	movs	r3, #7
 8001ea2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_FMC_Init+0x98>)
 8001eb6:	f005 fadd 	bl	8007474 <HAL_SDRAM_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001ec0:	f000 f934 	bl	800212c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200084c0 	.word	0x200084c0
 8001ed0:	a0000140 	.word	0xa0000140

08001ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08e      	sub	sp, #56	; 0x38
 8001ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
 8001eee:	4b7b      	ldr	r3, [pc, #492]	; (80020dc <MX_GPIO_Init+0x208>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a7a      	ldr	r2, [pc, #488]	; (80020dc <MX_GPIO_Init+0x208>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b78      	ldr	r3, [pc, #480]	; (80020dc <MX_GPIO_Init+0x208>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	623b      	str	r3, [r7, #32]
 8001f04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	4b74      	ldr	r3, [pc, #464]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a73      	ldr	r2, [pc, #460]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f10:	f043 0320 	orr.w	r3, r3, #32
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b71      	ldr	r3, [pc, #452]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	4b6d      	ldr	r3, [pc, #436]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a6c      	ldr	r2, [pc, #432]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b6a      	ldr	r3, [pc, #424]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	4b66      	ldr	r3, [pc, #408]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a65      	ldr	r2, [pc, #404]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b63      	ldr	r3, [pc, #396]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b5f      	ldr	r3, [pc, #380]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a5e      	ldr	r2, [pc, #376]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b5c      	ldr	r3, [pc, #368]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b58      	ldr	r3, [pc, #352]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a57      	ldr	r2, [pc, #348]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b55      	ldr	r3, [pc, #340]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b51      	ldr	r3, [pc, #324]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a50      	ldr	r2, [pc, #320]	; (80020dc <MX_GPIO_Init+0x208>)
 8001f9c:	f043 0310 	orr.w	r3, r3, #16
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b4e      	ldr	r3, [pc, #312]	; (80020dc <MX_GPIO_Init+0x208>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <MX_GPIO_Init+0x208>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a49      	ldr	r2, [pc, #292]	; (80020dc <MX_GPIO_Init+0x208>)
 8001fb8:	f043 0308 	orr.w	r3, r3, #8
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <MX_GPIO_Init+0x208>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2116      	movs	r1, #22
 8001fce:	4844      	ldr	r0, [pc, #272]	; (80020e0 <MX_GPIO_Init+0x20c>)
 8001fd0:	f001 faa6 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	4842      	ldr	r0, [pc, #264]	; (80020e4 <MX_GPIO_Init+0x210>)
 8001fda:	f001 faa1 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001fe4:	4840      	ldr	r0, [pc, #256]	; (80020e8 <MX_GPIO_Init+0x214>)
 8001fe6:	f001 fa9b 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001ff0:	483e      	ldr	r0, [pc, #248]	; (80020ec <MX_GPIO_Init+0x218>)
 8001ff2:	f001 fa95 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001ff6:	2316      	movs	r3, #22
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200a:	4619      	mov	r1, r3
 800200c:	4834      	ldr	r0, [pc, #208]	; (80020e0 <MX_GPIO_Init+0x20c>)
 800200e:	f001 f8db 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002012:	f248 0307 	movw	r3, #32775	; 0x8007
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002018:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002026:	4619      	mov	r1, r3
 8002028:	482e      	ldr	r0, [pc, #184]	; (80020e4 <MX_GPIO_Init+0x210>)
 800202a:	f001 f8cd 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002042:	4619      	mov	r1, r3
 8002044:	4827      	ldr	r0, [pc, #156]	; (80020e4 <MX_GPIO_Init+0x210>)
 8002046:	f001 f8bf 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800204a:	2320      	movs	r3, #32
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800204e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205c:	4619      	mov	r1, r3
 800205e:	4820      	ldr	r0, [pc, #128]	; (80020e0 <MX_GPIO_Init+0x20c>)
 8002060:	f001 f8b2 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002064:	2304      	movs	r3, #4
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002068:	2300      	movs	r3, #0
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002074:	4619      	mov	r1, r3
 8002076:	481e      	ldr	r0, [pc, #120]	; (80020f0 <MX_GPIO_Init+0x21c>)
 8002078:	f001 f8a6 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800207c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002082:	2300      	movs	r3, #0
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208e:	4619      	mov	r1, r3
 8002090:	4815      	ldr	r0, [pc, #84]	; (80020e8 <MX_GPIO_Init+0x214>)
 8002092:	f001 f899 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002096:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209c:	2301      	movs	r3, #1
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ac:	4619      	mov	r1, r3
 80020ae:	480e      	ldr	r0, [pc, #56]	; (80020e8 <MX_GPIO_Init+0x214>)
 80020b0:	f001 f88a 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80020b4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ca:	4619      	mov	r1, r3
 80020cc:	4807      	ldr	r0, [pc, #28]	; (80020ec <MX_GPIO_Init+0x218>)
 80020ce:	f001 f87b 	bl	80031c8 <HAL_GPIO_Init>

}
 80020d2:	bf00      	nop
 80020d4:	3738      	adds	r7, #56	; 0x38
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020800 	.word	0x40020800
 80020e4:	40020000 	.word	0x40020000
 80020e8:	40020c00 	.word	0x40020c00
 80020ec:	40021800 	.word	0x40021800
 80020f0:	40020400 	.word	0x40020400

080020f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80020fc:	f00b fce4 	bl	800dac8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002100:	2001      	movs	r0, #1
 8002102:	f009 fc7d 	bl	800ba00 <osDelay>
 8002106:	e7fb      	b.n	8002100 <StartDefaultTask+0xc>

08002108 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800211a:	f000 fd27 	bl	8002b6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40001000 	.word	0x40001000

0800212c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002130:	b672      	cpsid	i
}
 8002132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002134:	e7fe      	b.n	8002134 <Error_Handler+0x8>
	...

08002138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_MspInit+0x54>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	4a11      	ldr	r2, [pc, #68]	; (800218c <HAL_MspInit+0x54>)
 8002148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800214c:	6453      	str	r3, [r2, #68]	; 0x44
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_MspInit+0x54>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_MspInit+0x54>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_MspInit+0x54>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_MspInit+0x54>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	210f      	movs	r1, #15
 800217a:	f06f 0001 	mvn.w	r0, #1
 800217e:	f000 fdf1 	bl	8002d64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800

08002190 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <HAL_CRC_MspInit+0x3c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10d      	bne.n	80021be <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_CRC_MspInit+0x40>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_CRC_MspInit+0x40>)
 80021ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <HAL_CRC_MspInit+0x40>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40023000 	.word	0x40023000
 80021d0:	40023800 	.word	0x40023800

080021d4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_DMA2D_MspInit+0x48>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d115      	bne.n	8002212 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_DMA2D_MspInit+0x4c>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <HAL_DMA2D_MspInit+0x4c>)
 80021f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_DMA2D_MspInit+0x4c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2105      	movs	r1, #5
 8002206:	205a      	movs	r0, #90	; 0x5a
 8002208:	f000 fdac 	bl	8002d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800220c:	205a      	movs	r0, #90	; 0x5a
 800220e:	f000 fdc5 	bl	8002d9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	4002b000 	.word	0x4002b000
 8002220:	40023800 	.word	0x40023800

08002224 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a29      	ldr	r2, [pc, #164]	; (80022e8 <HAL_I2C_MspInit+0xc4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d14b      	bne.n	80022de <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b28      	ldr	r3, [pc, #160]	; (80022ec <HAL_I2C_MspInit+0xc8>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a27      	ldr	r2, [pc, #156]	; (80022ec <HAL_I2C_MspInit+0xc8>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b25      	ldr	r3, [pc, #148]	; (80022ec <HAL_I2C_MspInit+0xc8>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <HAL_I2C_MspInit+0xc8>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a20      	ldr	r2, [pc, #128]	; (80022ec <HAL_I2C_MspInit+0xc8>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_I2C_MspInit+0xc8>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800227e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002284:	2312      	movs	r3, #18
 8002286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002288:	2301      	movs	r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002290:	2304      	movs	r3, #4
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	4815      	ldr	r0, [pc, #84]	; (80022f0 <HAL_I2C_MspInit+0xcc>)
 800229c:	f000 ff94 	bl	80031c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80022a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022a6:	2312      	movs	r3, #18
 80022a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022b2:	2304      	movs	r3, #4
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	480d      	ldr	r0, [pc, #52]	; (80022f4 <HAL_I2C_MspInit+0xd0>)
 80022be:	f000 ff83 	bl	80031c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_I2C_MspInit+0xc8>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a08      	ldr	r2, [pc, #32]	; (80022ec <HAL_I2C_MspInit+0xc8>)
 80022cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_I2C_MspInit+0xc8>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80022de:	bf00      	nop
 80022e0:	3728      	adds	r7, #40	; 0x28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40005c00 	.word	0x40005c00
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020800 	.word	0x40020800
 80022f4:	40020000 	.word	0x40020000

080022f8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b09a      	sub	sp, #104	; 0x68
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002314:	2230      	movs	r2, #48	; 0x30
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f00b ff49 	bl	800e1b0 <memset>
  if(hltdc->Instance==LTDC)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a85      	ldr	r2, [pc, #532]	; (8002538 <HAL_LTDC_MspInit+0x240>)
 8002324:	4293      	cmp	r3, r2
 8002326:	f040 8102 	bne.w	800252e <HAL_LTDC_MspInit+0x236>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800232a:	2308      	movs	r3, #8
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800232e:	2332      	movs	r3, #50	; 0x32
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002332:	2302      	movs	r3, #2
 8002334:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002336:	2300      	movs	r3, #0
 8002338:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800233a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233e:	4618      	mov	r0, r3
 8002340:	f004 feda 	bl	80070f8 <HAL_RCCEx_PeriphCLKConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800234a:	f7ff feef 	bl	800212c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
 8002352:	4b7a      	ldr	r3, [pc, #488]	; (800253c <HAL_LTDC_MspInit+0x244>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	4a79      	ldr	r2, [pc, #484]	; (800253c <HAL_LTDC_MspInit+0x244>)
 8002358:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800235c:	6453      	str	r3, [r2, #68]	; 0x44
 800235e:	4b77      	ldr	r3, [pc, #476]	; (800253c <HAL_LTDC_MspInit+0x244>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002366:	623b      	str	r3, [r7, #32]
 8002368:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	4b73      	ldr	r3, [pc, #460]	; (800253c <HAL_LTDC_MspInit+0x244>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a72      	ldr	r2, [pc, #456]	; (800253c <HAL_LTDC_MspInit+0x244>)
 8002374:	f043 0320 	orr.w	r3, r3, #32
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b70      	ldr	r3, [pc, #448]	; (800253c <HAL_LTDC_MspInit+0x244>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	4b6c      	ldr	r3, [pc, #432]	; (800253c <HAL_LTDC_MspInit+0x244>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a6b      	ldr	r2, [pc, #428]	; (800253c <HAL_LTDC_MspInit+0x244>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b69      	ldr	r3, [pc, #420]	; (800253c <HAL_LTDC_MspInit+0x244>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	4b65      	ldr	r3, [pc, #404]	; (800253c <HAL_LTDC_MspInit+0x244>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a64      	ldr	r2, [pc, #400]	; (800253c <HAL_LTDC_MspInit+0x244>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b62      	ldr	r3, [pc, #392]	; (800253c <HAL_LTDC_MspInit+0x244>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	4b5e      	ldr	r3, [pc, #376]	; (800253c <HAL_LTDC_MspInit+0x244>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a5d      	ldr	r2, [pc, #372]	; (800253c <HAL_LTDC_MspInit+0x244>)
 80023c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b5b      	ldr	r3, [pc, #364]	; (800253c <HAL_LTDC_MspInit+0x244>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	4b57      	ldr	r3, [pc, #348]	; (800253c <HAL_LTDC_MspInit+0x244>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a56      	ldr	r2, [pc, #344]	; (800253c <HAL_LTDC_MspInit+0x244>)
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b54      	ldr	r3, [pc, #336]	; (800253c <HAL_LTDC_MspInit+0x244>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	4b50      	ldr	r3, [pc, #320]	; (800253c <HAL_LTDC_MspInit+0x244>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a4f      	ldr	r2, [pc, #316]	; (800253c <HAL_LTDC_MspInit+0x244>)
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b4d      	ldr	r3, [pc, #308]	; (800253c <HAL_LTDC_MspInit+0x244>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002416:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002424:	230e      	movs	r3, #14
 8002426:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002428:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800242c:	4619      	mov	r1, r3
 800242e:	4844      	ldr	r0, [pc, #272]	; (8002540 <HAL_LTDC_MspInit+0x248>)
 8002430:	f000 feca 	bl	80031c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002434:	f641 0358 	movw	r3, #6232	; 0x1858
 8002438:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002446:	230e      	movs	r3, #14
 8002448:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800244e:	4619      	mov	r1, r3
 8002450:	483c      	ldr	r0, [pc, #240]	; (8002544 <HAL_LTDC_MspInit+0x24c>)
 8002452:	f000 feb9 	bl	80031c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002456:	2303      	movs	r3, #3
 8002458:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002466:	2309      	movs	r3, #9
 8002468:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800246e:	4619      	mov	r1, r3
 8002470:	4835      	ldr	r0, [pc, #212]	; (8002548 <HAL_LTDC_MspInit+0x250>)
 8002472:	f000 fea9 	bl	80031c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002476:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800247a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002488:	230e      	movs	r3, #14
 800248a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002490:	4619      	mov	r1, r3
 8002492:	482d      	ldr	r0, [pc, #180]	; (8002548 <HAL_LTDC_MspInit+0x250>)
 8002494:	f000 fe98 	bl	80031c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002498:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800249c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024aa:	230e      	movs	r3, #14
 80024ac:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024b2:	4619      	mov	r1, r3
 80024b4:	4825      	ldr	r0, [pc, #148]	; (800254c <HAL_LTDC_MspInit+0x254>)
 80024b6:	f000 fe87 	bl	80031c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80024ba:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80024be:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	2300      	movs	r3, #0
 80024ca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024cc:	230e      	movs	r3, #14
 80024ce:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024d4:	4619      	mov	r1, r3
 80024d6:	481e      	ldr	r0, [pc, #120]	; (8002550 <HAL_LTDC_MspInit+0x258>)
 80024d8:	f000 fe76 	bl	80031c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80024dc:	2348      	movs	r3, #72	; 0x48
 80024de:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024ec:	230e      	movs	r3, #14
 80024ee:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024f4:	4619      	mov	r1, r3
 80024f6:	4817      	ldr	r0, [pc, #92]	; (8002554 <HAL_LTDC_MspInit+0x25c>)
 80024f8:	f000 fe66 	bl	80031c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80024fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002500:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800250e:	2309      	movs	r3, #9
 8002510:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002512:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002516:	4619      	mov	r1, r3
 8002518:	480c      	ldr	r0, [pc, #48]	; (800254c <HAL_LTDC_MspInit+0x254>)
 800251a:	f000 fe55 	bl	80031c8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2105      	movs	r1, #5
 8002522:	2058      	movs	r0, #88	; 0x58
 8002524:	f000 fc1e 	bl	8002d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002528:	2058      	movs	r0, #88	; 0x58
 800252a:	f000 fc37 	bl	8002d9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3768      	adds	r7, #104	; 0x68
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40016800 	.word	0x40016800
 800253c:	40023800 	.word	0x40023800
 8002540:	40021400 	.word	0x40021400
 8002544:	40020000 	.word	0x40020000
 8002548:	40020400 	.word	0x40020400
 800254c:	40021800 	.word	0x40021800
 8002550:	40020800 	.word	0x40020800
 8002554:	40020c00 	.word	0x40020c00

08002558 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_SPI_MspInit+0x84>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d12c      	bne.n	80025d4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_SPI_MspInit+0x88>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a17      	ldr	r2, [pc, #92]	; (80025e0 <HAL_SPI_MspInit+0x88>)
 8002584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_SPI_MspInit+0x88>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_SPI_MspInit+0x88>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <HAL_SPI_MspInit+0x88>)
 80025a0:	f043 0320 	orr.w	r3, r3, #32
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_SPI_MspInit+0x88>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80025b2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80025b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80025c4:	2305      	movs	r3, #5
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4619      	mov	r1, r3
 80025ce:	4805      	ldr	r0, [pc, #20]	; (80025e4 <HAL_SPI_MspInit+0x8c>)
 80025d0:	f000 fdfa 	bl	80031c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80025d4:	bf00      	nop
 80025d6:	3728      	adds	r7, #40	; 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40015000 	.word	0x40015000
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40021400 	.word	0x40021400

080025e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <HAL_TIM_Base_MspInit+0x3c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d10d      	bne.n	8002616 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_TIM_Base_MspInit+0x40>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	4a09      	ldr	r2, [pc, #36]	; (8002628 <HAL_TIM_Base_MspInit+0x40>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6453      	str	r3, [r2, #68]	; 0x44
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_TIM_Base_MspInit+0x40>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40010000 	.word	0x40010000
 8002628:	40023800 	.word	0x40023800

0800262c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a19      	ldr	r2, [pc, #100]	; (80026b0 <HAL_UART_MspInit+0x84>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d12c      	bne.n	80026a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <HAL_UART_MspInit+0x88>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a17      	ldr	r2, [pc, #92]	; (80026b4 <HAL_UART_MspInit+0x88>)
 8002658:	f043 0310 	orr.w	r3, r3, #16
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <HAL_UART_MspInit+0x88>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_UART_MspInit+0x88>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a10      	ldr	r2, [pc, #64]	; (80026b4 <HAL_UART_MspInit+0x88>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_UART_MspInit+0x88>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002686:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800268a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002694:	2303      	movs	r3, #3
 8002696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002698:	2307      	movs	r3, #7
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	4619      	mov	r1, r3
 80026a2:	4805      	ldr	r0, [pc, #20]	; (80026b8 <HAL_UART_MspInit+0x8c>)
 80026a4:	f000 fd90 	bl	80031c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026a8:	bf00      	nop
 80026aa:	3728      	adds	r7, #40	; 0x28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40011000 	.word	0x40011000
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40020000 	.word	0x40020000

080026bc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80026d0:	4b3b      	ldr	r3, [pc, #236]	; (80027c0 <HAL_FMC_MspInit+0x104>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d16f      	bne.n	80027b8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80026d8:	4b39      	ldr	r3, [pc, #228]	; (80027c0 <HAL_FMC_MspInit+0x104>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <HAL_FMC_MspInit+0x108>)
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	4a37      	ldr	r2, [pc, #220]	; (80027c4 <HAL_FMC_MspInit+0x108>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6393      	str	r3, [r2, #56]	; 0x38
 80026ee:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <HAL_FMC_MspInit+0x108>)
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80026fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80026fe:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800270c:	230c      	movs	r3, #12
 800270e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4619      	mov	r1, r3
 8002714:	482c      	ldr	r0, [pc, #176]	; (80027c8 <HAL_FMC_MspInit+0x10c>)
 8002716:	f000 fd57 	bl	80031c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800271a:	2301      	movs	r3, #1
 800271c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002726:	2303      	movs	r3, #3
 8002728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800272a:	230c      	movs	r3, #12
 800272c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	4619      	mov	r1, r3
 8002732:	4826      	ldr	r0, [pc, #152]	; (80027cc <HAL_FMC_MspInit+0x110>)
 8002734:	f000 fd48 	bl	80031c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002738:	f248 1333 	movw	r3, #33075	; 0x8133
 800273c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800274a:	230c      	movs	r3, #12
 800274c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	4619      	mov	r1, r3
 8002752:	481f      	ldr	r0, [pc, #124]	; (80027d0 <HAL_FMC_MspInit+0x114>)
 8002754:	f000 fd38 	bl	80031c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002758:	f64f 7383 	movw	r3, #65411	; 0xff83
 800275c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800276a:	230c      	movs	r3, #12
 800276c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	4619      	mov	r1, r3
 8002772:	4818      	ldr	r0, [pc, #96]	; (80027d4 <HAL_FMC_MspInit+0x118>)
 8002774:	f000 fd28 	bl	80031c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002778:	f24c 7303 	movw	r3, #50947	; 0xc703
 800277c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800278a:	230c      	movs	r3, #12
 800278c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4811      	ldr	r0, [pc, #68]	; (80027d8 <HAL_FMC_MspInit+0x11c>)
 8002794:	f000 fd18 	bl	80031c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002798:	2360      	movs	r3, #96	; 0x60
 800279a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	2302      	movs	r3, #2
 800279e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a4:	2303      	movs	r3, #3
 80027a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027a8:	230c      	movs	r3, #12
 80027aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	4619      	mov	r1, r3
 80027b0:	480a      	ldr	r0, [pc, #40]	; (80027dc <HAL_FMC_MspInit+0x120>)
 80027b2:	f000 fd09 	bl	80031c8 <HAL_GPIO_Init>
 80027b6:	e000      	b.n	80027ba <HAL_FMC_MspInit+0xfe>
    return;
 80027b8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	200000e8 	.word	0x200000e8
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40021400 	.word	0x40021400
 80027cc:	40020800 	.word	0x40020800
 80027d0:	40021800 	.word	0x40021800
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40020400 	.word	0x40020400

080027e0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80027e8:	f7ff ff68 	bl	80026bc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002804:	2200      	movs	r2, #0
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	2036      	movs	r0, #54	; 0x36
 800280a:	f000 faab 	bl	8002d64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800280e:	2036      	movs	r0, #54	; 0x36
 8002810:	f000 fac4 	bl	8002d9c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <HAL_InitTick+0xa4>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	4a1e      	ldr	r2, [pc, #120]	; (8002898 <HAL_InitTick+0xa4>)
 800281e:	f043 0310 	orr.w	r3, r3, #16
 8002822:	6413      	str	r3, [r2, #64]	; 0x40
 8002824:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <HAL_InitTick+0xa4>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002830:	f107 0210 	add.w	r2, r7, #16
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f004 fc2a 	bl	8007094 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002840:	f004 fc00 	bl	8007044 <HAL_RCC_GetPCLK1Freq>
 8002844:	4603      	mov	r3, r0
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	4a13      	ldr	r2, [pc, #76]	; (800289c <HAL_InitTick+0xa8>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0c9b      	lsrs	r3, r3, #18
 8002854:	3b01      	subs	r3, #1
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_InitTick+0xac>)
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <HAL_InitTick+0xb0>)
 800285c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <HAL_InitTick+0xac>)
 8002860:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002864:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002866:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <HAL_InitTick+0xac>)
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <HAL_InitTick+0xac>)
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_InitTick+0xac>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002878:	4809      	ldr	r0, [pc, #36]	; (80028a0 <HAL_InitTick+0xac>)
 800287a:	f004 feb8 	bl	80075ee <HAL_TIM_Base_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d104      	bne.n	800288e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002884:	4806      	ldr	r0, [pc, #24]	; (80028a0 <HAL_InitTick+0xac>)
 8002886:	f004 ff01 	bl	800768c <HAL_TIM_Base_Start_IT>
 800288a:	4603      	mov	r3, r0
 800288c:	e000      	b.n	8002890 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
}
 8002890:	4618      	mov	r0, r3
 8002892:	3730      	adds	r7, #48	; 0x30
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40023800 	.word	0x40023800
 800289c:	431bde83 	.word	0x431bde83
 80028a0:	20008520 	.word	0x20008520
 80028a4:	40001000 	.word	0x40001000

080028a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028ac:	e7fe      	b.n	80028ac <NMI_Handler+0x4>

080028ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b2:	e7fe      	b.n	80028b2 <HardFault_Handler+0x4>

080028b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <MemManage_Handler+0x4>

080028ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028be:	e7fe      	b.n	80028be <BusFault_Handler+0x4>

080028c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c4:	e7fe      	b.n	80028c4 <UsageFault_Handler+0x4>

080028c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028d8:	4802      	ldr	r0, [pc, #8]	; (80028e4 <TIM6_DAC_IRQHandler+0x10>)
 80028da:	f004 ff47 	bl	800776c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20008520 	.word	0x20008520

080028e8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80028ec:	4802      	ldr	r0, [pc, #8]	; (80028f8 <OTG_HS_IRQHandler+0x10>)
 80028ee:	f001 f8b5 	bl	8003a5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20008950 	.word	0x20008950

080028fc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002900:	4802      	ldr	r0, [pc, #8]	; (800290c <LTDC_IRQHandler+0x10>)
 8002902:	f003 fcbb 	bl	800627c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20008328 	.word	0x20008328

08002910 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002914:	4802      	ldr	r0, [pc, #8]	; (8002920 <DMA2D_IRQHandler+0x10>)
 8002916:	f000 fab4 	bl	8002e82 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20008480 	.word	0x20008480

08002924 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
	return 1;
 8002928:	2301      	movs	r3, #1
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_kill>:

int _kill(int pid, int sig)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800293e:	f00b fbef 	bl	800e120 <__errno>
 8002942:	4603      	mov	r3, r0
 8002944:	2216      	movs	r2, #22
 8002946:	601a      	str	r2, [r3, #0]
	return -1;
 8002948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <_exit>:

void _exit (int status)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800295c:	f04f 31ff 	mov.w	r1, #4294967295
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ffe7 	bl	8002934 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002966:	e7fe      	b.n	8002966 <_exit+0x12>

08002968 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	e00a      	b.n	8002990 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800297a:	f3af 8000 	nop.w
 800297e:	4601      	mov	r1, r0
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	60ba      	str	r2, [r7, #8]
 8002986:	b2ca      	uxtb	r2, r1
 8002988:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3301      	adds	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	dbf0      	blt.n	800297a <_read+0x12>
	}

return len;
 8002998:	687b      	ldr	r3, [r7, #4]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e009      	b.n	80029c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	60ba      	str	r2, [r7, #8]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3301      	adds	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	dbf1      	blt.n	80029b4 <_write+0x12>
	}
	return len;
 80029d0:	687b      	ldr	r3, [r7, #4]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <_close>:

int _close(int file)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
	return -1;
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a02:	605a      	str	r2, [r3, #4]
	return 0;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <_isatty>:

int _isatty(int file)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
	return 1;
 8002a1a:	2301      	movs	r3, #1
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
	return 0;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a4c:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <_sbrk+0x5c>)
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <_sbrk+0x60>)
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a58:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <_sbrk+0x64>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <_sbrk+0x64>)
 8002a62:	4a12      	ldr	r2, [pc, #72]	; (8002aac <_sbrk+0x68>)
 8002a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <_sbrk+0x64>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d207      	bcs.n	8002a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a74:	f00b fb54 	bl	800e120 <__errno>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	220c      	movs	r2, #12
 8002a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	e009      	b.n	8002a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <_sbrk+0x64>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a8a:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <_sbrk+0x64>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	4a05      	ldr	r2, [pc, #20]	; (8002aa8 <_sbrk+0x64>)
 8002a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a96:	68fb      	ldr	r3, [r7, #12]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20030000 	.word	0x20030000
 8002aa4:	00000400 	.word	0x00000400
 8002aa8:	200000ec 	.word	0x200000ec
 8002aac:	20008c68 	.word	0x20008c68

08002ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <SystemInit+0x20>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <SystemInit+0x20>)
 8002abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b0c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ad8:	480d      	ldr	r0, [pc, #52]	; (8002b10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ada:	490e      	ldr	r1, [pc, #56]	; (8002b14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002adc:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae0:	e002      	b.n	8002ae8 <LoopCopyDataInit>

08002ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae6:	3304      	adds	r3, #4

08002ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aec:	d3f9      	bcc.n	8002ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002af0:	4c0b      	ldr	r4, [pc, #44]	; (8002b20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af4:	e001      	b.n	8002afa <LoopFillZerobss>

08002af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af8:	3204      	adds	r2, #4

08002afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002afc:	d3fb      	bcc.n	8002af6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002afe:	f7ff ffd7 	bl	8002ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b02:	f00b fb13 	bl	800e12c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b06:	f7fe f9ef 	bl	8000ee8 <main>
  bx  lr    
 8002b0a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b0c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b14:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002b18:	080132c8 	.word	0x080132c8
  ldr r2, =_sbss
 8002b1c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002b20:	20008c64 	.word	0x20008c64

08002b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b24:	e7fe      	b.n	8002b24 <ADC_IRQHandler>
	...

08002b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_Init+0x40>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0d      	ldr	r2, [pc, #52]	; (8002b68 <HAL_Init+0x40>)
 8002b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_Init+0x40>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <HAL_Init+0x40>)
 8002b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_Init+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a07      	ldr	r2, [pc, #28]	; (8002b68 <HAL_Init+0x40>)
 8002b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b50:	2003      	movs	r0, #3
 8002b52:	f000 f8fc 	bl	8002d4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7ff fe4c 	bl	80027f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b5c:	f7ff faec 	bl	8002138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023c00 	.word	0x40023c00

08002b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_IncTick+0x20>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_IncTick+0x24>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <HAL_IncTick+0x24>)
 8002b7e:	6013      	str	r3, [r2, #0]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000018 	.word	0x20000018
 8002b90:	20008568 	.word	0x20008568

08002b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return uwTick;
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_GetTick+0x14>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20008568 	.word	0x20008568

08002bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb4:	f7ff ffee 	bl	8002b94 <HAL_GetTick>
 8002bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d005      	beq.n	8002bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_Delay+0x44>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4413      	add	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bd2:	bf00      	nop
 8002bd4:	f7ff ffde 	bl	8002b94 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d8f7      	bhi.n	8002bd4 <HAL_Delay+0x28>
  {
  }
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000018 	.word	0x20000018

08002bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c10:	4013      	ands	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c26:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	60d3      	str	r3, [r2, #12]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <__NVIC_GetPriorityGrouping+0x18>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 0307 	and.w	r3, r3, #7
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	db0b      	blt.n	8002c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	4907      	ldr	r1, [pc, #28]	; (8002c90 <__NVIC_EnableIRQ+0x38>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2001      	movs	r0, #1
 8002c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	e000e100 	.word	0xe000e100

08002c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6039      	str	r1, [r7, #0]
 8002c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	db0a      	blt.n	8002cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	490c      	ldr	r1, [pc, #48]	; (8002ce0 <__NVIC_SetPriority+0x4c>)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cbc:	e00a      	b.n	8002cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4908      	ldr	r1, [pc, #32]	; (8002ce4 <__NVIC_SetPriority+0x50>)
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	3b04      	subs	r3, #4
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	761a      	strb	r2, [r3, #24]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000e100 	.word	0xe000e100
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	; 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f1c3 0307 	rsb	r3, r3, #7
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	bf28      	it	cs
 8002d06:	2304      	movcs	r3, #4
 8002d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d902      	bls.n	8002d18 <NVIC_EncodePriority+0x30>
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3b03      	subs	r3, #3
 8002d16:	e000      	b.n	8002d1a <NVIC_EncodePriority+0x32>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43da      	mvns	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d30:	f04f 31ff 	mov.w	r1, #4294967295
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	43d9      	mvns	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	4313      	orrs	r3, r2
         );
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	; 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ff4c 	bl	8002bf4 <__NVIC_SetPriorityGrouping>
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d76:	f7ff ff61 	bl	8002c3c <__NVIC_GetPriorityGrouping>
 8002d7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	6978      	ldr	r0, [r7, #20]
 8002d82:	f7ff ffb1 	bl	8002ce8 <NVIC_EncodePriority>
 8002d86:	4602      	mov	r2, r0
 8002d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff80 	bl	8002c94 <__NVIC_SetPriority>
}
 8002d94:	bf00      	nop
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff54 	bl	8002c58 <__NVIC_EnableIRQ>
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00e      	b.n	8002de8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	795b      	ldrb	r3, [r3, #5]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d105      	bne.n	8002de0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff f9d8 	bl	8002190 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e03b      	b.n	8002e7a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff f9dc 	bl	80021d4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e40:	f023 0107 	bic.w	r1, r3, #7
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68d1      	ldr	r1, [r2, #12]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	430b      	orrs	r3, r1
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d026      	beq.n	8002ef2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d021      	beq.n	8002ef2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ebc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d026      	beq.n	8002f4a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d021      	beq.n	8002f4a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f14:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	f043 0202 	orr.w	r2, r3, #2
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d026      	beq.n	8002fa2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d021      	beq.n	8002fa2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f6c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2208      	movs	r2, #8
 8002f74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	f043 0204 	orr.w	r2, r3, #4
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2204      	movs	r2, #4
 8002f86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00e      	beq.n	8002fd4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2204      	movs	r2, #4
 8002fcc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f853 	bl	800307a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d024      	beq.n	8003028 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01f      	beq.n	8003028 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ff6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01f      	beq.n	8003072 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01a      	beq.n	8003072 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800304a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2210      	movs	r2, #16
 8003052:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f80e 	bl	800308e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_DMA2D_ConfigLayer+0x20>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e079      	b.n	80031b8 <HAL_DMA2D_ConfigLayer+0x114>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	3318      	adds	r3, #24
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	041b      	lsls	r3, r3, #16
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80030ee:	4b35      	ldr	r3, [pc, #212]	; (80031c4 <HAL_DMA2D_ConfigLayer+0x120>)
 80030f0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b0a      	cmp	r3, #10
 80030f8:	d003      	beq.n	8003102 <HAL_DMA2D_ConfigLayer+0x5e>
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b09      	cmp	r3, #9
 8003100:	d107      	bne.n	8003112 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e005      	b.n	800311e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	061b      	lsls	r3, r3, #24
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d120      	bne.n	8003166 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	43db      	mvns	r3, r3
 800312e:	ea02 0103 	and.w	r1, r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	430a      	orrs	r2, r1
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b0a      	cmp	r3, #10
 800314c:	d003      	beq.n	8003156 <HAL_DMA2D_ConfigLayer+0xb2>
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b09      	cmp	r3, #9
 8003154:	d127      	bne.n	80031a6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
 8003164:	e01f      	b.n	80031a6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	43db      	mvns	r3, r3
 8003170:	ea02 0103 	and.w	r1, r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	430a      	orrs	r2, r1
 800317c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b0a      	cmp	r3, #10
 800318e:	d003      	beq.n	8003198 <HAL_DMA2D_ConfigLayer+0xf4>
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b09      	cmp	r3, #9
 8003196:	d106      	bne.n	80031a6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80031a4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	ff03000f 	.word	0xff03000f

080031c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b089      	sub	sp, #36	; 0x24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	e177      	b.n	80034d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031e4:	2201      	movs	r2, #1
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	f040 8166 	bne.w	80034ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d005      	beq.n	800321a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003216:	2b02      	cmp	r3, #2
 8003218:	d130      	bne.n	800327c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	2203      	movs	r2, #3
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003250:	2201      	movs	r2, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	f003 0201 	and.w	r2, r3, #1
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b03      	cmp	r3, #3
 8003286:	d017      	beq.n	80032b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	2203      	movs	r2, #3
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d123      	bne.n	800330c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	08da      	lsrs	r2, r3, #3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3208      	adds	r2, #8
 80032cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	220f      	movs	r2, #15
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	08da      	lsrs	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3208      	adds	r2, #8
 8003306:	69b9      	ldr	r1, [r7, #24]
 8003308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	2203      	movs	r2, #3
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4013      	ands	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0203 	and.w	r2, r3, #3
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80c0 	beq.w	80034ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	4b66      	ldr	r3, [pc, #408]	; (80034ec <HAL_GPIO_Init+0x324>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	4a65      	ldr	r2, [pc, #404]	; (80034ec <HAL_GPIO_Init+0x324>)
 8003358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800335c:	6453      	str	r3, [r2, #68]	; 0x44
 800335e:	4b63      	ldr	r3, [pc, #396]	; (80034ec <HAL_GPIO_Init+0x324>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800336a:	4a61      	ldr	r2, [pc, #388]	; (80034f0 <HAL_GPIO_Init+0x328>)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	3302      	adds	r3, #2
 8003372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	220f      	movs	r2, #15
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a58      	ldr	r2, [pc, #352]	; (80034f4 <HAL_GPIO_Init+0x32c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d037      	beq.n	8003406 <HAL_GPIO_Init+0x23e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a57      	ldr	r2, [pc, #348]	; (80034f8 <HAL_GPIO_Init+0x330>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d031      	beq.n	8003402 <HAL_GPIO_Init+0x23a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a56      	ldr	r2, [pc, #344]	; (80034fc <HAL_GPIO_Init+0x334>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d02b      	beq.n	80033fe <HAL_GPIO_Init+0x236>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a55      	ldr	r2, [pc, #340]	; (8003500 <HAL_GPIO_Init+0x338>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d025      	beq.n	80033fa <HAL_GPIO_Init+0x232>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a54      	ldr	r2, [pc, #336]	; (8003504 <HAL_GPIO_Init+0x33c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d01f      	beq.n	80033f6 <HAL_GPIO_Init+0x22e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a53      	ldr	r2, [pc, #332]	; (8003508 <HAL_GPIO_Init+0x340>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d019      	beq.n	80033f2 <HAL_GPIO_Init+0x22a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a52      	ldr	r2, [pc, #328]	; (800350c <HAL_GPIO_Init+0x344>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <HAL_GPIO_Init+0x226>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a51      	ldr	r2, [pc, #324]	; (8003510 <HAL_GPIO_Init+0x348>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00d      	beq.n	80033ea <HAL_GPIO_Init+0x222>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a50      	ldr	r2, [pc, #320]	; (8003514 <HAL_GPIO_Init+0x34c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d007      	beq.n	80033e6 <HAL_GPIO_Init+0x21e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4f      	ldr	r2, [pc, #316]	; (8003518 <HAL_GPIO_Init+0x350>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d101      	bne.n	80033e2 <HAL_GPIO_Init+0x21a>
 80033de:	2309      	movs	r3, #9
 80033e0:	e012      	b.n	8003408 <HAL_GPIO_Init+0x240>
 80033e2:	230a      	movs	r3, #10
 80033e4:	e010      	b.n	8003408 <HAL_GPIO_Init+0x240>
 80033e6:	2308      	movs	r3, #8
 80033e8:	e00e      	b.n	8003408 <HAL_GPIO_Init+0x240>
 80033ea:	2307      	movs	r3, #7
 80033ec:	e00c      	b.n	8003408 <HAL_GPIO_Init+0x240>
 80033ee:	2306      	movs	r3, #6
 80033f0:	e00a      	b.n	8003408 <HAL_GPIO_Init+0x240>
 80033f2:	2305      	movs	r3, #5
 80033f4:	e008      	b.n	8003408 <HAL_GPIO_Init+0x240>
 80033f6:	2304      	movs	r3, #4
 80033f8:	e006      	b.n	8003408 <HAL_GPIO_Init+0x240>
 80033fa:	2303      	movs	r3, #3
 80033fc:	e004      	b.n	8003408 <HAL_GPIO_Init+0x240>
 80033fe:	2302      	movs	r3, #2
 8003400:	e002      	b.n	8003408 <HAL_GPIO_Init+0x240>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_GPIO_Init+0x240>
 8003406:	2300      	movs	r3, #0
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	f002 0203 	and.w	r2, r2, #3
 800340e:	0092      	lsls	r2, r2, #2
 8003410:	4093      	lsls	r3, r2
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003418:	4935      	ldr	r1, [pc, #212]	; (80034f0 <HAL_GPIO_Init+0x328>)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	3302      	adds	r3, #2
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003426:	4b3d      	ldr	r3, [pc, #244]	; (800351c <HAL_GPIO_Init+0x354>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800344a:	4a34      	ldr	r2, [pc, #208]	; (800351c <HAL_GPIO_Init+0x354>)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003450:	4b32      	ldr	r3, [pc, #200]	; (800351c <HAL_GPIO_Init+0x354>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003474:	4a29      	ldr	r2, [pc, #164]	; (800351c <HAL_GPIO_Init+0x354>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800347a:	4b28      	ldr	r3, [pc, #160]	; (800351c <HAL_GPIO_Init+0x354>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800349e:	4a1f      	ldr	r2, [pc, #124]	; (800351c <HAL_GPIO_Init+0x354>)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034a4:	4b1d      	ldr	r3, [pc, #116]	; (800351c <HAL_GPIO_Init+0x354>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034c8:	4a14      	ldr	r2, [pc, #80]	; (800351c <HAL_GPIO_Init+0x354>)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3301      	adds	r3, #1
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2b0f      	cmp	r3, #15
 80034d8:	f67f ae84 	bls.w	80031e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	3724      	adds	r7, #36	; 0x24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40013800 	.word	0x40013800
 80034f4:	40020000 	.word	0x40020000
 80034f8:	40020400 	.word	0x40020400
 80034fc:	40020800 	.word	0x40020800
 8003500:	40020c00 	.word	0x40020c00
 8003504:	40021000 	.word	0x40021000
 8003508:	40021400 	.word	0x40021400
 800350c:	40021800 	.word	0x40021800
 8003510:	40021c00 	.word	0x40021c00
 8003514:	40022000 	.word	0x40022000
 8003518:	40022400 	.word	0x40022400
 800351c:	40013c00 	.word	0x40013c00

08003520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	807b      	strh	r3, [r7, #2]
 800352c:	4613      	mov	r3, r2
 800352e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003530:	787b      	ldrb	r3, [r7, #1]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003536:	887a      	ldrh	r2, [r7, #2]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800353c:	e003      	b.n	8003546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800353e:	887b      	ldrh	r3, [r7, #2]
 8003540:	041a      	lsls	r2, r3, #16
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	619a      	str	r2, [r3, #24]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003564:	887a      	ldrh	r2, [r7, #2]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4013      	ands	r3, r2
 800356a:	041a      	lsls	r2, r3, #16
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	43d9      	mvns	r1, r3
 8003570:	887b      	ldrh	r3, [r7, #2]
 8003572:	400b      	ands	r3, r1
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	619a      	str	r2, [r3, #24]
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003586:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003588:	b08f      	sub	sp, #60	; 0x3c
 800358a:	af0a      	add	r7, sp, #40	; 0x28
 800358c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e054      	b.n	8003642 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f00a fadc 	bl	800db70 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2203      	movs	r2, #3
 80035bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f005 f904 	bl	80087e4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	687e      	ldr	r6, [r7, #4]
 80035e4:	466d      	mov	r5, sp
 80035e6:	f106 0410 	add.w	r4, r6, #16
 80035ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80035fa:	1d33      	adds	r3, r6, #4
 80035fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035fe:	6838      	ldr	r0, [r7, #0]
 8003600:	f005 f87e 	bl	8008700 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f005 f8fb 	bl	8008806 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	687e      	ldr	r6, [r7, #4]
 8003618:	466d      	mov	r5, sp
 800361a:	f106 0410 	add.w	r4, r6, #16
 800361e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003626:	e894 0003 	ldmia.w	r4, {r0, r1}
 800362a:	e885 0003 	stmia.w	r5, {r0, r1}
 800362e:	1d33      	adds	r3, r6, #4
 8003630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003632:	6838      	ldr	r0, [r7, #0]
 8003634:	f005 fa62 	bl	8008afc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800364a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800364a:	b590      	push	{r4, r7, lr}
 800364c:	b089      	sub	sp, #36	; 0x24
 800364e:	af04      	add	r7, sp, #16
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	4608      	mov	r0, r1
 8003654:	4611      	mov	r1, r2
 8003656:	461a      	mov	r2, r3
 8003658:	4603      	mov	r3, r0
 800365a:	70fb      	strb	r3, [r7, #3]
 800365c:	460b      	mov	r3, r1
 800365e:	70bb      	strb	r3, [r7, #2]
 8003660:	4613      	mov	r3, r2
 8003662:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_HCD_HC_Init+0x28>
 800366e:	2302      	movs	r3, #2
 8003670:	e076      	b.n	8003760 <HAL_HCD_HC_Init+0x116>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	333d      	adds	r3, #61	; 0x3d
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3338      	adds	r3, #56	; 0x38
 800369a:	787a      	ldrb	r2, [r7, #1]
 800369c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	3340      	adds	r3, #64	; 0x40
 80036ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036ae:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	212c      	movs	r1, #44	; 0x2c
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	4413      	add	r3, r2
 80036bc:	3339      	adds	r3, #57	; 0x39
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	212c      	movs	r1, #44	; 0x2c
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	4413      	add	r3, r2
 80036ce:	333f      	adds	r3, #63	; 0x3f
 80036d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80036d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	78ba      	ldrb	r2, [r7, #2]
 80036da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036de:	b2d0      	uxtb	r0, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	333a      	adds	r3, #58	; 0x3a
 80036ec:	4602      	mov	r2, r0
 80036ee:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80036f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	da09      	bge.n	800370c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	212c      	movs	r1, #44	; 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	333b      	adds	r3, #59	; 0x3b
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	e008      	b.n	800371e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	333b      	adds	r3, #59	; 0x3b
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	212c      	movs	r1, #44	; 0x2c
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	4413      	add	r3, r2
 800372a:	333c      	adds	r3, #60	; 0x3c
 800372c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003730:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	787c      	ldrb	r4, [r7, #1]
 8003738:	78ba      	ldrb	r2, [r7, #2]
 800373a:	78f9      	ldrb	r1, [r7, #3]
 800373c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800373e:	9302      	str	r3, [sp, #8]
 8003740:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	f897 3020 	ldrb.w	r3, [r7, #32]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	4623      	mov	r3, r4
 800374e:	f005 fb4f 	bl	8008df0 <USB_HC_Init>
 8003752:	4603      	mov	r3, r0
 8003754:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800375e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	bd90      	pop	{r4, r7, pc}

08003768 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_HCD_HC_Halt+0x1e>
 8003782:	2302      	movs	r3, #2
 8003784:	e00f      	b.n	80037a6 <HAL_HCD_HC_Halt+0x3e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f005 fd8b 	bl	80092b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	4608      	mov	r0, r1
 80037ba:	4611      	mov	r1, r2
 80037bc:	461a      	mov	r2, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	70fb      	strb	r3, [r7, #3]
 80037c2:	460b      	mov	r3, r1
 80037c4:	70bb      	strb	r3, [r7, #2]
 80037c6:	4613      	mov	r3, r2
 80037c8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	333b      	adds	r3, #59	; 0x3b
 80037d8:	78ba      	ldrb	r2, [r7, #2]
 80037da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	333f      	adds	r3, #63	; 0x3f
 80037ea:	787a      	ldrb	r2, [r7, #1]
 80037ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80037ee:	7c3b      	ldrb	r3, [r7, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d112      	bne.n	800381a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	212c      	movs	r1, #44	; 0x2c
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	4413      	add	r3, r2
 8003800:	3342      	adds	r3, #66	; 0x42
 8003802:	2203      	movs	r2, #3
 8003804:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	212c      	movs	r1, #44	; 0x2c
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	4413      	add	r3, r2
 8003812:	333d      	adds	r3, #61	; 0x3d
 8003814:	7f3a      	ldrb	r2, [r7, #28]
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	e008      	b.n	800382c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3342      	adds	r3, #66	; 0x42
 8003828:	2202      	movs	r2, #2
 800382a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800382c:	787b      	ldrb	r3, [r7, #1]
 800382e:	2b03      	cmp	r3, #3
 8003830:	f200 80c6 	bhi.w	80039c0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003834:	a201      	add	r2, pc, #4	; (adr r2, 800383c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383a:	bf00      	nop
 800383c:	0800384d 	.word	0x0800384d
 8003840:	080039ad 	.word	0x080039ad
 8003844:	080038b1 	.word	0x080038b1
 8003848:	0800392f 	.word	0x0800392f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800384c:	7c3b      	ldrb	r3, [r7, #16]
 800384e:	2b01      	cmp	r3, #1
 8003850:	f040 80b8 	bne.w	80039c4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003854:	78bb      	ldrb	r3, [r7, #2]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f040 80b4 	bne.w	80039c4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800385c:	8b3b      	ldrh	r3, [r7, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d108      	bne.n	8003874 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	212c      	movs	r1, #44	; 0x2c
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	4413      	add	r3, r2
 800386e:	3355      	adds	r3, #85	; 0x55
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	212c      	movs	r1, #44	; 0x2c
 800387a:	fb01 f303 	mul.w	r3, r1, r3
 800387e:	4413      	add	r3, r2
 8003880:	3355      	adds	r3, #85	; 0x55
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	212c      	movs	r1, #44	; 0x2c
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	4413      	add	r3, r2
 8003894:	3342      	adds	r3, #66	; 0x42
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800389a:	e093      	b.n	80039c4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	3342      	adds	r3, #66	; 0x42
 80038aa:	2202      	movs	r2, #2
 80038ac:	701a      	strb	r2, [r3, #0]
      break;
 80038ae:	e089      	b.n	80039c4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80038b0:	78bb      	ldrb	r3, [r7, #2]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11d      	bne.n	80038f2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	212c      	movs	r1, #44	; 0x2c
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	4413      	add	r3, r2
 80038c2:	3355      	adds	r3, #85	; 0x55
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038ca:	78fb      	ldrb	r3, [r7, #3]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	212c      	movs	r1, #44	; 0x2c
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	3342      	adds	r3, #66	; 0x42
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80038dc:	e073      	b.n	80039c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	212c      	movs	r1, #44	; 0x2c
 80038e4:	fb01 f303 	mul.w	r3, r1, r3
 80038e8:	4413      	add	r3, r2
 80038ea:	3342      	adds	r3, #66	; 0x42
 80038ec:	2202      	movs	r2, #2
 80038ee:	701a      	strb	r2, [r3, #0]
      break;
 80038f0:	e069      	b.n	80039c6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	212c      	movs	r1, #44	; 0x2c
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	4413      	add	r3, r2
 80038fe:	3354      	adds	r3, #84	; 0x54
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	212c      	movs	r1, #44	; 0x2c
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	3342      	adds	r3, #66	; 0x42
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
      break;
 8003918:	e055      	b.n	80039c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	212c      	movs	r1, #44	; 0x2c
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	4413      	add	r3, r2
 8003926:	3342      	adds	r3, #66	; 0x42
 8003928:	2202      	movs	r2, #2
 800392a:	701a      	strb	r2, [r3, #0]
      break;
 800392c:	e04b      	b.n	80039c6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800392e:	78bb      	ldrb	r3, [r7, #2]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11d      	bne.n	8003970 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	212c      	movs	r1, #44	; 0x2c
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	4413      	add	r3, r2
 8003940:	3355      	adds	r3, #85	; 0x55
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	212c      	movs	r1, #44	; 0x2c
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	3342      	adds	r3, #66	; 0x42
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800395a:	e034      	b.n	80039c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3342      	adds	r3, #66	; 0x42
 800396a:	2202      	movs	r2, #2
 800396c:	701a      	strb	r2, [r3, #0]
      break;
 800396e:	e02a      	b.n	80039c6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3354      	adds	r3, #84	; 0x54
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	212c      	movs	r1, #44	; 0x2c
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	4413      	add	r3, r2
 8003990:	3342      	adds	r3, #66	; 0x42
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
      break;
 8003996:	e016      	b.n	80039c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	212c      	movs	r1, #44	; 0x2c
 800399e:	fb01 f303 	mul.w	r3, r1, r3
 80039a2:	4413      	add	r3, r2
 80039a4:	3342      	adds	r3, #66	; 0x42
 80039a6:	2202      	movs	r2, #2
 80039a8:	701a      	strb	r2, [r3, #0]
      break;
 80039aa:	e00c      	b.n	80039c6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	212c      	movs	r1, #44	; 0x2c
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	4413      	add	r3, r2
 80039b8:	3342      	adds	r3, #66	; 0x42
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
      break;
 80039be:	e002      	b.n	80039c6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80039c0:	bf00      	nop
 80039c2:	e000      	b.n	80039c6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80039c4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	212c      	movs	r1, #44	; 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	3344      	adds	r3, #68	; 0x44
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	8b3a      	ldrh	r2, [r7, #24]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	202c      	movs	r0, #44	; 0x2c
 80039e0:	fb00 f303 	mul.w	r3, r0, r3
 80039e4:	440b      	add	r3, r1
 80039e6:	334c      	adds	r3, #76	; 0x4c
 80039e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	212c      	movs	r1, #44	; 0x2c
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	4413      	add	r3, r2
 80039f6:	3360      	adds	r3, #96	; 0x60
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	212c      	movs	r1, #44	; 0x2c
 8003a02:	fb01 f303 	mul.w	r3, r1, r3
 8003a06:	4413      	add	r3, r2
 8003a08:	3350      	adds	r3, #80	; 0x50
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	212c      	movs	r1, #44	; 0x2c
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	4413      	add	r3, r2
 8003a1a:	3339      	adds	r3, #57	; 0x39
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	212c      	movs	r1, #44	; 0x2c
 8003a26:	fb01 f303 	mul.w	r3, r1, r3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3361      	adds	r3, #97	; 0x61
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	222c      	movs	r2, #44	; 0x2c
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	3338      	adds	r3, #56	; 0x38
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	18d1      	adds	r1, r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f005 fade 	bl	800900c <USB_HC_StartXfer>
 8003a50:	4603      	mov	r3, r0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop

08003a5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f005 f801 	bl	8008a7a <USB_GetMode>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	f040 80f6 	bne.w	8003c6c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f004 ffe5 	bl	8008a54 <USB_ReadInterrupts>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80ec 	beq.w	8003c6a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f004 ffdc 	bl	8008a54 <USB_ReadInterrupts>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aa6:	d104      	bne.n	8003ab2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003ab0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f004 ffcc 	bl	8008a54 <USB_ReadInterrupts>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac6:	d104      	bne.n	8003ad2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ad0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f004 ffbc 	bl	8008a54 <USB_ReadInterrupts>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ae2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ae6:	d104      	bne.n	8003af2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003af0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f004 ffac 	bl	8008a54 <USB_ReadInterrupts>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d103      	bne.n	8003b0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f004 ff9e 	bl	8008a54 <USB_ReadInterrupts>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b22:	d11c      	bne.n	8003b5e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10f      	bne.n	8003b5e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003b3e:	2110      	movs	r1, #16
 8003b40:	6938      	ldr	r0, [r7, #16]
 8003b42:	f004 fead 	bl	80088a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b46:	6938      	ldr	r0, [r7, #16]
 8003b48:	f004 fece 	bl	80088e8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2101      	movs	r1, #1
 8003b52:	4618      	mov	r0, r3
 8003b54:	f005 f886 	bl	8008c64 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f00a f883 	bl	800dc64 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f004 ff76 	bl	8008a54 <USB_ReadInterrupts>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b72:	d102      	bne.n	8003b7a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f001 fa03 	bl	8004f80 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f004 ff68 	bl	8008a54 <USB_ReadInterrupts>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d106      	bne.n	8003b9c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f00a f84c 	bl	800dc2c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2208      	movs	r2, #8
 8003b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f004 ff57 	bl	8008a54 <USB_ReadInterrupts>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d101      	bne.n	8003bb4 <HAL_HCD_IRQHandler+0x158>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <HAL_HCD_IRQHandler+0x15a>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d012      	beq.n	8003be0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699a      	ldr	r2, [r3, #24]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0210 	bic.w	r2, r2, #16
 8003bc8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f001 f906 	bl	8004ddc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0210 	orr.w	r2, r2, #16
 8003bde:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f004 ff35 	bl	8008a54 <USB_ReadInterrupts>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bf4:	d13a      	bne.n	8003c6c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f005 fb48 	bl	8009290 <USB_HC_ReadInterrupt>
 8003c00:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e025      	b.n	8003c54 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d018      	beq.n	8003c4e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c32:	d106      	bne.n	8003c42 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8ab 	bl	8003d96 <HCD_HC_IN_IRQHandler>
 8003c40:	e005      	b.n	8003c4e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fcc6 	bl	80045da <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	3301      	adds	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d3d4      	bcc.n	8003c08 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c66:	615a      	str	r2, [r3, #20]
 8003c68:	e000      	b.n	8003c6c <HAL_HCD_IRQHandler+0x210>
      return;
 8003c6a:	bf00      	nop
    }
  }
}
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_HCD_Start+0x16>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e013      	b.n	8003cb0 <HAL_HCD_Start+0x3e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2101      	movs	r1, #1
 8003c96:	4618      	mov	r0, r3
 8003c98:	f005 f848 	bl	8008d2c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f004 fd8e 	bl	80087c2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_HCD_Stop+0x16>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e00d      	b.n	8003cea <HAL_HCD_Stop+0x32>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f005 fc42 	bl	8009564 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f004 ffea 	bl	8008cd8 <USB_ResetPort>
 8003d04:	4603      	mov	r3, r0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	460b      	mov	r3, r1
 8003d18:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	212c      	movs	r1, #44	; 0x2c
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	3360      	adds	r3, #96	; 0x60
 8003d28:	781b      	ldrb	r3, [r3, #0]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	212c      	movs	r1, #44	; 0x2c
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3350      	adds	r3, #80	; 0x50
 8003d50:	681b      	ldr	r3, [r3, #0]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f005 f82e 	bl	8008dcc <USB_GetCurrentFrame>
 8003d70:	4603      	mov	r3, r0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f005 f809 	bl	8008d9e <USB_GetHostSpeed>
 8003d8c:	4603      	mov	r3, r0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d119      	bne.n	8003dfa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003df2:	f043 0302 	orr.w	r3, r3, #2
 8003df6:	60d3      	str	r3, [r2, #12]
 8003df8:	e101      	b.n	8003ffe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e10:	d12b      	bne.n	8003e6a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	212c      	movs	r1, #44	; 0x2c
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	4413      	add	r3, r2
 8003e32:	3361      	adds	r3, #97	; 0x61
 8003e34:	2207      	movs	r2, #7
 8003e36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	0151      	lsls	r1, r2, #5
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	440a      	add	r2, r1
 8003e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e52:	f043 0302 	orr.w	r3, r3, #2
 8003e56:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	4611      	mov	r1, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f005 fa25 	bl	80092b2 <USB_HC_Halt>
 8003e68:	e0c9      	b.n	8003ffe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d109      	bne.n	8003e94 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2320      	movs	r3, #32
 8003e90:	6093      	str	r3, [r2, #8]
 8003e92:	e0b4      	b.n	8003ffe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d133      	bne.n	8003f12 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	0151      	lsls	r1, r2, #5
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	440a      	add	r2, r1
 8003ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ec4:	f043 0302 	orr.w	r3, r3, #2
 8003ec8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	212c      	movs	r1, #44	; 0x2c
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3361      	adds	r3, #97	; 0x61
 8003ed8:	2205      	movs	r2, #5
 8003eda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2310      	movs	r3, #16
 8003eec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efa:	461a      	mov	r2, r3
 8003efc:	2308      	movs	r3, #8
 8003efe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	4611      	mov	r1, r2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f005 f9d1 	bl	80092b2 <USB_HC_Halt>
 8003f10:	e075      	b.n	8003ffe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f28:	d134      	bne.n	8003f94 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	0151      	lsls	r1, r2, #5
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	440a      	add	r2, r1
 8003f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f44:	f043 0302 	orr.w	r3, r3, #2
 8003f48:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	212c      	movs	r1, #44	; 0x2c
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	3361      	adds	r3, #97	; 0x61
 8003f58:	2208      	movs	r2, #8
 8003f5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2310      	movs	r3, #16
 8003f6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f80:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f005 f990 	bl	80092b2 <USB_HC_Halt>
 8003f92:	e034      	b.n	8003ffe <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa6:	2b80      	cmp	r3, #128	; 0x80
 8003fa8:	d129      	bne.n	8003ffe <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	0151      	lsls	r1, r2, #5
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	440a      	add	r2, r1
 8003fc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fc4:	f043 0302 	orr.w	r3, r3, #2
 8003fc8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	212c      	movs	r1, #44	; 0x2c
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3361      	adds	r3, #97	; 0x61
 8003fd8:	2206      	movs	r2, #6
 8003fda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f005 f963 	bl	80092b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2380      	movs	r3, #128	; 0x80
 8003ffc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004014:	d122      	bne.n	800405c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4413      	add	r3, r2
 800401e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	0151      	lsls	r1, r2, #5
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	440a      	add	r2, r1
 800402c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004030:	f043 0302 	orr.w	r3, r3, #2
 8004034:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f005 f936 	bl	80092b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4413      	add	r3, r2
 800404e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004052:	461a      	mov	r2, r3
 8004054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004058:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800405a:	e2ba      	b.n	80045d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4413      	add	r3, r2
 8004064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	f040 811b 	bne.w	80042aa <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d019      	beq.n	80040b0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	212c      	movs	r1, #44	; 0x2c
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	4413      	add	r3, r2
 8004088:	3348      	adds	r3, #72	; 0x48
 800408a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	0159      	lsls	r1, r3, #5
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	440b      	add	r3, r1
 8004094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800409e:	1ad2      	subs	r2, r2, r3
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	202c      	movs	r0, #44	; 0x2c
 80040a6:	fb00 f303 	mul.w	r3, r0, r3
 80040aa:	440b      	add	r3, r1
 80040ac:	3350      	adds	r3, #80	; 0x50
 80040ae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	212c      	movs	r1, #44	; 0x2c
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	3361      	adds	r3, #97	; 0x61
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	212c      	movs	r1, #44	; 0x2c
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	4413      	add	r3, r2
 80040ce:	335c      	adds	r3, #92	; 0x5c
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e0:	461a      	mov	r2, r3
 80040e2:	2301      	movs	r3, #1
 80040e4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	212c      	movs	r1, #44	; 0x2c
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	4413      	add	r3, r2
 80040f2:	333f      	adds	r3, #63	; 0x3f
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	212c      	movs	r1, #44	; 0x2c
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	4413      	add	r3, r2
 8004106:	333f      	adds	r3, #63	; 0x3f
 8004108:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800410a:	2b02      	cmp	r3, #2
 800410c:	d121      	bne.n	8004152 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4413      	add	r3, r2
 8004116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	0151      	lsls	r1, r2, #5
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	440a      	add	r2, r1
 8004124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004128:	f043 0302 	orr.w	r3, r3, #2
 800412c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	4611      	mov	r1, r2
 8004138:	4618      	mov	r0, r3
 800413a:	f005 f8ba 	bl	80092b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	461a      	mov	r2, r3
 800414c:	2310      	movs	r3, #16
 800414e:	6093      	str	r3, [r2, #8]
 8004150:	e066      	b.n	8004220 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	212c      	movs	r1, #44	; 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	333f      	adds	r3, #63	; 0x3f
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d127      	bne.n	80041b6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	0151      	lsls	r1, r2, #5
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	440a      	add	r2, r1
 800417c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004180:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004184:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	212c      	movs	r1, #44	; 0x2c
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	4413      	add	r3, r2
 8004192:	3360      	adds	r3, #96	; 0x60
 8004194:	2201      	movs	r2, #1
 8004196:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	b2d9      	uxtb	r1, r3
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	202c      	movs	r0, #44	; 0x2c
 80041a2:	fb00 f303 	mul.w	r3, r0, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	3360      	adds	r3, #96	; 0x60
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f009 fd66 	bl	800dc80 <HAL_HCD_HC_NotifyURBChange_Callback>
 80041b4:	e034      	b.n	8004220 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	212c      	movs	r1, #44	; 0x2c
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	4413      	add	r3, r2
 80041c2:	333f      	adds	r3, #63	; 0x3f
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d12a      	bne.n	8004220 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	212c      	movs	r1, #44	; 0x2c
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	4413      	add	r3, r2
 80041d6:	3360      	adds	r3, #96	; 0x60
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	212c      	movs	r1, #44	; 0x2c
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	3354      	adds	r3, #84	; 0x54
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	f083 0301 	eor.w	r3, r3, #1
 80041f0:	b2d8      	uxtb	r0, r3
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	212c      	movs	r1, #44	; 0x2c
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	4413      	add	r3, r2
 80041fe:	3354      	adds	r3, #84	; 0x54
 8004200:	4602      	mov	r2, r0
 8004202:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	b2d9      	uxtb	r1, r3
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	202c      	movs	r0, #44	; 0x2c
 800420e:	fb00 f303 	mul.w	r3, r0, r3
 8004212:	4413      	add	r3, r2
 8004214:	3360      	adds	r3, #96	; 0x60
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f009 fd30 	bl	800dc80 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d12b      	bne.n	8004280 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	212c      	movs	r1, #44	; 0x2c
 800422e:	fb01 f303 	mul.w	r3, r1, r3
 8004232:	4413      	add	r3, r2
 8004234:	3348      	adds	r3, #72	; 0x48
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	202c      	movs	r0, #44	; 0x2c
 800423e:	fb00 f202 	mul.w	r2, r0, r2
 8004242:	440a      	add	r2, r1
 8004244:	3240      	adds	r2, #64	; 0x40
 8004246:	8812      	ldrh	r2, [r2, #0]
 8004248:	fbb3 f3f2 	udiv	r3, r3, r2
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 81be 	beq.w	80045d2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	212c      	movs	r1, #44	; 0x2c
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	4413      	add	r3, r2
 8004262:	3354      	adds	r3, #84	; 0x54
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	f083 0301 	eor.w	r3, r3, #1
 800426a:	b2d8      	uxtb	r0, r3
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	212c      	movs	r1, #44	; 0x2c
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	4413      	add	r3, r2
 8004278:	3354      	adds	r3, #84	; 0x54
 800427a:	4602      	mov	r2, r0
 800427c:	701a      	strb	r2, [r3, #0]
}
 800427e:	e1a8      	b.n	80045d2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	212c      	movs	r1, #44	; 0x2c
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	4413      	add	r3, r2
 800428c:	3354      	adds	r3, #84	; 0x54
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	f083 0301 	eor.w	r3, r3, #1
 8004294:	b2d8      	uxtb	r0, r3
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	212c      	movs	r1, #44	; 0x2c
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	3354      	adds	r3, #84	; 0x54
 80042a4:	4602      	mov	r2, r0
 80042a6:	701a      	strb	r2, [r3, #0]
}
 80042a8:	e193      	b.n	80045d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b02      	cmp	r3, #2
 80042be:	f040 8106 	bne.w	80044ce <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	0151      	lsls	r1, r2, #5
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	440a      	add	r2, r1
 80042d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042dc:	f023 0302 	bic.w	r3, r3, #2
 80042e0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	212c      	movs	r1, #44	; 0x2c
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	4413      	add	r3, r2
 80042ee:	3361      	adds	r3, #97	; 0x61
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d109      	bne.n	800430a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	212c      	movs	r1, #44	; 0x2c
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	3360      	adds	r3, #96	; 0x60
 8004304:	2201      	movs	r2, #1
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	e0c9      	b.n	800449e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	212c      	movs	r1, #44	; 0x2c
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	4413      	add	r3, r2
 8004316:	3361      	adds	r3, #97	; 0x61
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b05      	cmp	r3, #5
 800431c:	d109      	bne.n	8004332 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	212c      	movs	r1, #44	; 0x2c
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	4413      	add	r3, r2
 800432a:	3360      	adds	r3, #96	; 0x60
 800432c:	2205      	movs	r2, #5
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	e0b5      	b.n	800449e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	212c      	movs	r1, #44	; 0x2c
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	3361      	adds	r3, #97	; 0x61
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b06      	cmp	r3, #6
 8004344:	d009      	beq.n	800435a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	212c      	movs	r1, #44	; 0x2c
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	3361      	adds	r3, #97	; 0x61
 8004354:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004356:	2b08      	cmp	r3, #8
 8004358:	d150      	bne.n	80043fc <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	212c      	movs	r1, #44	; 0x2c
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	4413      	add	r3, r2
 8004366:	335c      	adds	r3, #92	; 0x5c
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	202c      	movs	r0, #44	; 0x2c
 8004372:	fb00 f303 	mul.w	r3, r0, r3
 8004376:	440b      	add	r3, r1
 8004378:	335c      	adds	r3, #92	; 0x5c
 800437a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	212c      	movs	r1, #44	; 0x2c
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	335c      	adds	r3, #92	; 0x5c
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d912      	bls.n	80043b6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	212c      	movs	r1, #44	; 0x2c
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4413      	add	r3, r2
 800439c:	335c      	adds	r3, #92	; 0x5c
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	212c      	movs	r1, #44	; 0x2c
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	4413      	add	r3, r2
 80043ae:	3360      	adds	r3, #96	; 0x60
 80043b0:	2204      	movs	r2, #4
 80043b2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043b4:	e073      	b.n	800449e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	212c      	movs	r1, #44	; 0x2c
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	4413      	add	r3, r2
 80043c2:	3360      	adds	r3, #96	; 0x60
 80043c4:	2202      	movs	r2, #2
 80043c6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043de:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043e6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f4:	461a      	mov	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043fa:	e050      	b.n	800449e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	212c      	movs	r1, #44	; 0x2c
 8004402:	fb01 f303 	mul.w	r3, r1, r3
 8004406:	4413      	add	r3, r2
 8004408:	3361      	adds	r3, #97	; 0x61
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b03      	cmp	r3, #3
 800440e:	d122      	bne.n	8004456 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	212c      	movs	r1, #44	; 0x2c
 8004416:	fb01 f303 	mul.w	r3, r1, r3
 800441a:	4413      	add	r3, r2
 800441c:	3360      	adds	r3, #96	; 0x60
 800441e:	2202      	movs	r2, #2
 8004420:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004438:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004440:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4413      	add	r3, r2
 800444a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444e:	461a      	mov	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	e023      	b.n	800449e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	212c      	movs	r1, #44	; 0x2c
 800445c:	fb01 f303 	mul.w	r3, r1, r3
 8004460:	4413      	add	r3, r2
 8004462:	3361      	adds	r3, #97	; 0x61
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b07      	cmp	r3, #7
 8004468:	d119      	bne.n	800449e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	212c      	movs	r1, #44	; 0x2c
 8004470:	fb01 f303 	mul.w	r3, r1, r3
 8004474:	4413      	add	r3, r2
 8004476:	335c      	adds	r3, #92	; 0x5c
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	202c      	movs	r0, #44	; 0x2c
 8004482:	fb00 f303 	mul.w	r3, r0, r3
 8004486:	440b      	add	r3, r1
 8004488:	335c      	adds	r3, #92	; 0x5c
 800448a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	212c      	movs	r1, #44	; 0x2c
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	4413      	add	r3, r2
 8004498:	3360      	adds	r3, #96	; 0x60
 800449a:	2204      	movs	r2, #4
 800449c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044aa:	461a      	mov	r2, r3
 80044ac:	2302      	movs	r3, #2
 80044ae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	b2d9      	uxtb	r1, r3
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	202c      	movs	r0, #44	; 0x2c
 80044ba:	fb00 f303 	mul.w	r3, r0, r3
 80044be:	4413      	add	r3, r2
 80044c0:	3360      	adds	r3, #96	; 0x60
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f009 fbda 	bl	800dc80 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80044cc:	e081      	b.n	80045d2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b10      	cmp	r3, #16
 80044e2:	d176      	bne.n	80045d2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	212c      	movs	r1, #44	; 0x2c
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	333f      	adds	r3, #63	; 0x3f
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d121      	bne.n	800453c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	212c      	movs	r1, #44	; 0x2c
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	4413      	add	r3, r2
 8004504:	335c      	adds	r3, #92	; 0x5c
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4413      	add	r3, r2
 8004512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	0151      	lsls	r1, r2, #5
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	440a      	add	r2, r1
 8004520:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004524:	f043 0302 	orr.w	r3, r3, #2
 8004528:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	4611      	mov	r1, r2
 8004534:	4618      	mov	r0, r3
 8004536:	f004 febc 	bl	80092b2 <USB_HC_Halt>
 800453a:	e041      	b.n	80045c0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	212c      	movs	r1, #44	; 0x2c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	333f      	adds	r3, #63	; 0x3f
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	212c      	movs	r1, #44	; 0x2c
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	4413      	add	r3, r2
 800455c:	333f      	adds	r3, #63	; 0x3f
 800455e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004560:	2b02      	cmp	r3, #2
 8004562:	d12d      	bne.n	80045c0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	212c      	movs	r1, #44	; 0x2c
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	4413      	add	r3, r2
 8004570:	335c      	adds	r3, #92	; 0x5c
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d120      	bne.n	80045c0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	212c      	movs	r1, #44	; 0x2c
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	4413      	add	r3, r2
 800458a:	3361      	adds	r3, #97	; 0x61
 800458c:	2203      	movs	r2, #3
 800458e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	0151      	lsls	r1, r2, #5
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	440a      	add	r2, r1
 80045a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045aa:	f043 0302 	orr.w	r3, r3, #2
 80045ae:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f004 fe79 	bl	80092b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045cc:	461a      	mov	r2, r3
 80045ce:	2310      	movs	r3, #16
 80045d0:	6093      	str	r3, [r2, #8]
}
 80045d2:	bf00      	nop
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b088      	sub	sp, #32
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b04      	cmp	r3, #4
 8004608:	d119      	bne.n	800463e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	4413      	add	r3, r2
 8004612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004616:	461a      	mov	r2, r3
 8004618:	2304      	movs	r3, #4
 800461a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	4413      	add	r3, r2
 8004624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	440a      	add	r2, r1
 8004632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004636:	f043 0302 	orr.w	r3, r3, #2
 800463a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800463c:	e3ca      	b.n	8004dd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	4413      	add	r3, r2
 8004646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b20      	cmp	r3, #32
 8004652:	d13e      	bne.n	80046d2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	4413      	add	r3, r2
 800465c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004660:	461a      	mov	r2, r3
 8004662:	2320      	movs	r3, #32
 8004664:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	212c      	movs	r1, #44	; 0x2c
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	4413      	add	r3, r2
 8004672:	333d      	adds	r3, #61	; 0x3d
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b01      	cmp	r3, #1
 8004678:	f040 83ac 	bne.w	8004dd4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	212c      	movs	r1, #44	; 0x2c
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	4413      	add	r3, r2
 8004688:	333d      	adds	r3, #61	; 0x3d
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	212c      	movs	r1, #44	; 0x2c
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	4413      	add	r3, r2
 800469a:	3360      	adds	r3, #96	; 0x60
 800469c:	2202      	movs	r2, #2
 800469e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	0151      	lsls	r1, r2, #5
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	440a      	add	r2, r1
 80046b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046ba:	f043 0302 	orr.w	r3, r3, #2
 80046be:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f004 fdf1 	bl	80092b2 <USB_HC_Halt>
}
 80046d0:	e380      	b.n	8004dd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e8:	d122      	bne.n	8004730 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	0151      	lsls	r1, r2, #5
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	440a      	add	r2, r1
 8004700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004704:	f043 0302 	orr.w	r3, r3, #2
 8004708:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	4611      	mov	r1, r2
 8004714:	4618      	mov	r0, r3
 8004716:	f004 fdcc 	bl	80092b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	4413      	add	r3, r2
 8004722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004726:	461a      	mov	r2, r3
 8004728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800472c:	6093      	str	r3, [r2, #8]
}
 800472e:	e351      	b.n	8004dd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	4413      	add	r3, r2
 8004738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b01      	cmp	r3, #1
 8004744:	d150      	bne.n	80047e8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	212c      	movs	r1, #44	; 0x2c
 800474c:	fb01 f303 	mul.w	r3, r1, r3
 8004750:	4413      	add	r3, r2
 8004752:	335c      	adds	r3, #92	; 0x5c
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	4413      	add	r3, r2
 8004760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b40      	cmp	r3, #64	; 0x40
 800476c:	d111      	bne.n	8004792 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	212c      	movs	r1, #44	; 0x2c
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	4413      	add	r3, r2
 800477a:	333d      	adds	r3, #61	; 0x3d
 800477c:	2201      	movs	r2, #1
 800477e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	4413      	add	r3, r2
 8004788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478c:	461a      	mov	r2, r3
 800478e:	2340      	movs	r3, #64	; 0x40
 8004790:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	4413      	add	r3, r2
 800479a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	4611      	mov	r1, r2
 80047bc:	4618      	mov	r0, r3
 80047be:	f004 fd78 	bl	80092b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ce:	461a      	mov	r2, r3
 80047d0:	2301      	movs	r3, #1
 80047d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	212c      	movs	r1, #44	; 0x2c
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	4413      	add	r3, r2
 80047e0:	3361      	adds	r3, #97	; 0x61
 80047e2:	2201      	movs	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]
}
 80047e6:	e2f5      	b.n	8004dd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b40      	cmp	r3, #64	; 0x40
 80047fc:	d13c      	bne.n	8004878 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	212c      	movs	r1, #44	; 0x2c
 8004804:	fb01 f303 	mul.w	r3, r1, r3
 8004808:	4413      	add	r3, r2
 800480a:	3361      	adds	r3, #97	; 0x61
 800480c:	2204      	movs	r2, #4
 800480e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	212c      	movs	r1, #44	; 0x2c
 8004816:	fb01 f303 	mul.w	r3, r1, r3
 800481a:	4413      	add	r3, r2
 800481c:	333d      	adds	r3, #61	; 0x3d
 800481e:	2201      	movs	r2, #1
 8004820:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	212c      	movs	r1, #44	; 0x2c
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	4413      	add	r3, r2
 800482e:	335c      	adds	r3, #92	; 0x5c
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	4413      	add	r3, r2
 800483c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	440a      	add	r2, r1
 800484a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800484e:	f043 0302 	orr.w	r3, r3, #2
 8004852:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	4611      	mov	r1, r2
 800485e:	4618      	mov	r0, r3
 8004860:	f004 fd27 	bl	80092b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	4413      	add	r3, r2
 800486c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004870:	461a      	mov	r2, r3
 8004872:	2340      	movs	r3, #64	; 0x40
 8004874:	6093      	str	r3, [r2, #8]
}
 8004876:	e2ad      	b.n	8004dd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	4413      	add	r3, r2
 8004880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b08      	cmp	r3, #8
 800488c:	d12a      	bne.n	80048e4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	4413      	add	r3, r2
 8004896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489a:	461a      	mov	r2, r3
 800489c:	2308      	movs	r3, #8
 800489e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	0151      	lsls	r1, r2, #5
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	440a      	add	r2, r1
 80048b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048ba:	f043 0302 	orr.w	r3, r3, #2
 80048be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	4611      	mov	r1, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f004 fcf1 	bl	80092b2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	212c      	movs	r1, #44	; 0x2c
 80048d6:	fb01 f303 	mul.w	r3, r1, r3
 80048da:	4413      	add	r3, r2
 80048dc:	3361      	adds	r3, #97	; 0x61
 80048de:	2205      	movs	r2, #5
 80048e0:	701a      	strb	r2, [r3, #0]
}
 80048e2:	e277      	b.n	8004dd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b10      	cmp	r3, #16
 80048f8:	d150      	bne.n	800499c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	212c      	movs	r1, #44	; 0x2c
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	4413      	add	r3, r2
 8004906:	335c      	adds	r3, #92	; 0x5c
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	212c      	movs	r1, #44	; 0x2c
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	4413      	add	r3, r2
 8004918:	3361      	adds	r3, #97	; 0x61
 800491a:	2203      	movs	r2, #3
 800491c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	212c      	movs	r1, #44	; 0x2c
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	4413      	add	r3, r2
 800492a:	333d      	adds	r3, #61	; 0x3d
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d112      	bne.n	8004958 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	212c      	movs	r1, #44	; 0x2c
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	4413      	add	r3, r2
 800493e:	333c      	adds	r3, #60	; 0x3c
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d108      	bne.n	8004958 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	212c      	movs	r1, #44	; 0x2c
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	4413      	add	r3, r2
 8004952:	333d      	adds	r3, #61	; 0x3d
 8004954:	2201      	movs	r2, #1
 8004956:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	4413      	add	r3, r2
 8004960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	0151      	lsls	r1, r2, #5
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	440a      	add	r2, r1
 800496e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004972:	f043 0302 	orr.w	r3, r3, #2
 8004976:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	4611      	mov	r1, r2
 8004982:	4618      	mov	r0, r3
 8004984:	f004 fc95 	bl	80092b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004994:	461a      	mov	r2, r3
 8004996:	2310      	movs	r3, #16
 8004998:	6093      	str	r3, [r2, #8]
}
 800499a:	e21b      	b.n	8004dd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ae:	2b80      	cmp	r3, #128	; 0x80
 80049b0:	d174      	bne.n	8004a9c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d121      	bne.n	80049fe <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	212c      	movs	r1, #44	; 0x2c
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	4413      	add	r3, r2
 80049c6:	3361      	adds	r3, #97	; 0x61
 80049c8:	2206      	movs	r2, #6
 80049ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	0151      	lsls	r1, r2, #5
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	440a      	add	r2, r1
 80049e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049e6:	f043 0302 	orr.w	r3, r3, #2
 80049ea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	4611      	mov	r1, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f004 fc5b 	bl	80092b2 <USB_HC_Halt>
 80049fc:	e044      	b.n	8004a88 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	212c      	movs	r1, #44	; 0x2c
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	4413      	add	r3, r2
 8004a0a:	335c      	adds	r3, #92	; 0x5c
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	202c      	movs	r0, #44	; 0x2c
 8004a16:	fb00 f303 	mul.w	r3, r0, r3
 8004a1a:	440b      	add	r3, r1
 8004a1c:	335c      	adds	r3, #92	; 0x5c
 8004a1e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	212c      	movs	r1, #44	; 0x2c
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	335c      	adds	r3, #92	; 0x5c
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d920      	bls.n	8004a76 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	212c      	movs	r1, #44	; 0x2c
 8004a3a:	fb01 f303 	mul.w	r3, r1, r3
 8004a3e:	4413      	add	r3, r2
 8004a40:	335c      	adds	r3, #92	; 0x5c
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	212c      	movs	r1, #44	; 0x2c
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	4413      	add	r3, r2
 8004a52:	3360      	adds	r3, #96	; 0x60
 8004a54:	2204      	movs	r2, #4
 8004a56:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	b2d9      	uxtb	r1, r3
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	202c      	movs	r0, #44	; 0x2c
 8004a62:	fb00 f303 	mul.w	r3, r0, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	3360      	adds	r3, #96	; 0x60
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f009 f906 	bl	800dc80 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a74:	e008      	b.n	8004a88 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	212c      	movs	r1, #44	; 0x2c
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	4413      	add	r3, r2
 8004a82:	3360      	adds	r3, #96	; 0x60
 8004a84:	2202      	movs	r2, #2
 8004a86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a94:	461a      	mov	r2, r3
 8004a96:	2380      	movs	r3, #128	; 0x80
 8004a98:	6093      	str	r3, [r2, #8]
}
 8004a9a:	e19b      	b.n	8004dd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab2:	d134      	bne.n	8004b1e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ace:	f043 0302 	orr.w	r3, r3, #2
 8004ad2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	4611      	mov	r1, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f004 fbe7 	bl	80092b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af0:	461a      	mov	r2, r3
 8004af2:	2310      	movs	r3, #16
 8004af4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b02:	461a      	mov	r2, r3
 8004b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	212c      	movs	r1, #44	; 0x2c
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	4413      	add	r3, r2
 8004b16:	3361      	adds	r3, #97	; 0x61
 8004b18:	2208      	movs	r2, #8
 8004b1a:	701a      	strb	r2, [r3, #0]
}
 8004b1c:	e15a      	b.n	8004dd4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	f040 814f 	bne.w	8004dd4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	0151      	lsls	r1, r2, #5
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	440a      	add	r2, r1
 8004b4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b50:	f023 0302 	bic.w	r3, r3, #2
 8004b54:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	212c      	movs	r1, #44	; 0x2c
 8004b5c:	fb01 f303 	mul.w	r3, r1, r3
 8004b60:	4413      	add	r3, r2
 8004b62:	3361      	adds	r3, #97	; 0x61
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d17d      	bne.n	8004c66 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	212c      	movs	r1, #44	; 0x2c
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	3360      	adds	r3, #96	; 0x60
 8004b78:	2201      	movs	r2, #1
 8004b7a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	212c      	movs	r1, #44	; 0x2c
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	4413      	add	r3, r2
 8004b88:	333f      	adds	r3, #63	; 0x3f
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d00a      	beq.n	8004ba6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	212c      	movs	r1, #44	; 0x2c
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	333f      	adds	r3, #63	; 0x3f
 8004b9e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	f040 8100 	bne.w	8004da6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d113      	bne.n	8004bd6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	212c      	movs	r1, #44	; 0x2c
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	4413      	add	r3, r2
 8004bba:	3355      	adds	r3, #85	; 0x55
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	f083 0301 	eor.w	r3, r3, #1
 8004bc2:	b2d8      	uxtb	r0, r3
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	212c      	movs	r1, #44	; 0x2c
 8004bca:	fb01 f303 	mul.w	r3, r1, r3
 8004bce:	4413      	add	r3, r2
 8004bd0:	3355      	adds	r3, #85	; 0x55
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	f040 80e3 	bne.w	8004da6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	212c      	movs	r1, #44	; 0x2c
 8004be6:	fb01 f303 	mul.w	r3, r1, r3
 8004bea:	4413      	add	r3, r2
 8004bec:	334c      	adds	r3, #76	; 0x4c
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80d8 	beq.w	8004da6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	212c      	movs	r1, #44	; 0x2c
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	334c      	adds	r3, #76	; 0x4c
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	202c      	movs	r0, #44	; 0x2c
 8004c0c:	fb00 f202 	mul.w	r2, r0, r2
 8004c10:	440a      	add	r2, r1
 8004c12:	3240      	adds	r2, #64	; 0x40
 8004c14:	8812      	ldrh	r2, [r2, #0]
 8004c16:	4413      	add	r3, r2
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	202c      	movs	r0, #44	; 0x2c
 8004c20:	fb00 f202 	mul.w	r2, r0, r2
 8004c24:	440a      	add	r2, r1
 8004c26:	3240      	adds	r2, #64	; 0x40
 8004c28:	8812      	ldrh	r2, [r2, #0]
 8004c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 80b5 	beq.w	8004da6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	212c      	movs	r1, #44	; 0x2c
 8004c42:	fb01 f303 	mul.w	r3, r1, r3
 8004c46:	4413      	add	r3, r2
 8004c48:	3355      	adds	r3, #85	; 0x55
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	f083 0301 	eor.w	r3, r3, #1
 8004c50:	b2d8      	uxtb	r0, r3
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	212c      	movs	r1, #44	; 0x2c
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	3355      	adds	r3, #85	; 0x55
 8004c60:	4602      	mov	r2, r0
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	e09f      	b.n	8004da6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	212c      	movs	r1, #44	; 0x2c
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	4413      	add	r3, r2
 8004c72:	3361      	adds	r3, #97	; 0x61
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d109      	bne.n	8004c8e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	212c      	movs	r1, #44	; 0x2c
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	4413      	add	r3, r2
 8004c86:	3360      	adds	r3, #96	; 0x60
 8004c88:	2202      	movs	r2, #2
 8004c8a:	701a      	strb	r2, [r3, #0]
 8004c8c:	e08b      	b.n	8004da6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	212c      	movs	r1, #44	; 0x2c
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	4413      	add	r3, r2
 8004c9a:	3361      	adds	r3, #97	; 0x61
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d109      	bne.n	8004cb6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	212c      	movs	r1, #44	; 0x2c
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	3360      	adds	r3, #96	; 0x60
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	701a      	strb	r2, [r3, #0]
 8004cb4:	e077      	b.n	8004da6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	212c      	movs	r1, #44	; 0x2c
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	3361      	adds	r3, #97	; 0x61
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b05      	cmp	r3, #5
 8004cc8:	d109      	bne.n	8004cde <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	212c      	movs	r1, #44	; 0x2c
 8004cd0:	fb01 f303 	mul.w	r3, r1, r3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3360      	adds	r3, #96	; 0x60
 8004cd8:	2205      	movs	r2, #5
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	e063      	b.n	8004da6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	212c      	movs	r1, #44	; 0x2c
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	4413      	add	r3, r2
 8004cea:	3361      	adds	r3, #97	; 0x61
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b06      	cmp	r3, #6
 8004cf0:	d009      	beq.n	8004d06 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	212c      	movs	r1, #44	; 0x2c
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3361      	adds	r3, #97	; 0x61
 8004d00:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d14f      	bne.n	8004da6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	212c      	movs	r1, #44	; 0x2c
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	4413      	add	r3, r2
 8004d12:	335c      	adds	r3, #92	; 0x5c
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	202c      	movs	r0, #44	; 0x2c
 8004d1e:	fb00 f303 	mul.w	r3, r0, r3
 8004d22:	440b      	add	r3, r1
 8004d24:	335c      	adds	r3, #92	; 0x5c
 8004d26:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	212c      	movs	r1, #44	; 0x2c
 8004d2e:	fb01 f303 	mul.w	r3, r1, r3
 8004d32:	4413      	add	r3, r2
 8004d34:	335c      	adds	r3, #92	; 0x5c
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d912      	bls.n	8004d62 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	212c      	movs	r1, #44	; 0x2c
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	4413      	add	r3, r2
 8004d48:	335c      	adds	r3, #92	; 0x5c
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	212c      	movs	r1, #44	; 0x2c
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	4413      	add	r3, r2
 8004d5a:	3360      	adds	r3, #96	; 0x60
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e021      	b.n	8004da6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	212c      	movs	r1, #44	; 0x2c
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3360      	adds	r3, #96	; 0x60
 8004d70:	2202      	movs	r2, #2
 8004d72:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d8a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d92:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da0:	461a      	mov	r2, r3
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db2:	461a      	mov	r2, r3
 8004db4:	2302      	movs	r3, #2
 8004db6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	b2d9      	uxtb	r1, r3
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	202c      	movs	r0, #44	; 0x2c
 8004dc2:	fb00 f303 	mul.w	r3, r0, r3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3360      	adds	r3, #96	; 0x60
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f008 ff56 	bl	800dc80 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004dd4:	bf00      	nop
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	; 0x28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	0c5b      	lsrs	r3, r3, #17
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e10:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d004      	beq.n	8004e22 <HCD_RXQLVL_IRQHandler+0x46>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b05      	cmp	r3, #5
 8004e1c:	f000 80a9 	beq.w	8004f72 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004e20:	e0aa      	b.n	8004f78 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 80a6 	beq.w	8004f76 <HCD_RXQLVL_IRQHandler+0x19a>
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	212c      	movs	r1, #44	; 0x2c
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	4413      	add	r3, r2
 8004e36:	3344      	adds	r3, #68	; 0x44
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 809b 	beq.w	8004f76 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	212c      	movs	r1, #44	; 0x2c
 8004e46:	fb01 f303 	mul.w	r3, r1, r3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3350      	adds	r3, #80	; 0x50
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	441a      	add	r2, r3
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	202c      	movs	r0, #44	; 0x2c
 8004e5a:	fb00 f303 	mul.w	r3, r0, r3
 8004e5e:	440b      	add	r3, r1
 8004e60:	334c      	adds	r3, #76	; 0x4c
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d87a      	bhi.n	8004f5e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	212c      	movs	r1, #44	; 0x2c
 8004e72:	fb01 f303 	mul.w	r3, r1, r3
 8004e76:	4413      	add	r3, r2
 8004e78:	3344      	adds	r3, #68	; 0x44
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	b292      	uxth	r2, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	f003 fd8f 	bl	80089a4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	212c      	movs	r1, #44	; 0x2c
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	3344      	adds	r3, #68	; 0x44
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	441a      	add	r2, r3
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	202c      	movs	r0, #44	; 0x2c
 8004ea0:	fb00 f303 	mul.w	r3, r0, r3
 8004ea4:	440b      	add	r3, r1
 8004ea6:	3344      	adds	r3, #68	; 0x44
 8004ea8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	212c      	movs	r1, #44	; 0x2c
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3350      	adds	r3, #80	; 0x50
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	441a      	add	r2, r3
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	202c      	movs	r0, #44	; 0x2c
 8004ec4:	fb00 f303 	mul.w	r3, r0, r3
 8004ec8:	440b      	add	r3, r1
 8004eca:	3350      	adds	r3, #80	; 0x50
 8004ecc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	0cdb      	lsrs	r3, r3, #19
 8004ede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ee2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	212c      	movs	r1, #44	; 0x2c
 8004eea:	fb01 f303 	mul.w	r3, r1, r3
 8004eee:	4413      	add	r3, r2
 8004ef0:	3340      	adds	r3, #64	; 0x40
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d13c      	bne.n	8004f76 <HCD_RXQLVL_IRQHandler+0x19a>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d039      	beq.n	8004f76 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f18:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f20:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	212c      	movs	r1, #44	; 0x2c
 8004f3a:	fb01 f303 	mul.w	r3, r1, r3
 8004f3e:	4413      	add	r3, r2
 8004f40:	3354      	adds	r3, #84	; 0x54
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	f083 0301 	eor.w	r3, r3, #1
 8004f48:	b2d8      	uxtb	r0, r3
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	212c      	movs	r1, #44	; 0x2c
 8004f50:	fb01 f303 	mul.w	r3, r1, r3
 8004f54:	4413      	add	r3, r2
 8004f56:	3354      	adds	r3, #84	; 0x54
 8004f58:	4602      	mov	r2, r0
 8004f5a:	701a      	strb	r2, [r3, #0]
      break;
 8004f5c:	e00b      	b.n	8004f76 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	212c      	movs	r1, #44	; 0x2c
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	4413      	add	r3, r2
 8004f6a:	3360      	adds	r3, #96	; 0x60
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	701a      	strb	r2, [r3, #0]
      break;
 8004f70:	e001      	b.n	8004f76 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004f72:	bf00      	nop
 8004f74:	e000      	b.n	8004f78 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004f76:	bf00      	nop
  }
}
 8004f78:	bf00      	nop
 8004f7a:	3728      	adds	r7, #40	; 0x28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004fac:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d10b      	bne.n	8004fd0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d102      	bne.n	8004fc8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f008 fe40 	bl	800dc48 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f043 0302 	orr.w	r3, r3, #2
 8004fce:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d132      	bne.n	8005040 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f043 0308 	orr.w	r3, r3, #8
 8004fe0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d126      	bne.n	800503a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d113      	bne.n	800501c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004ffa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ffe:	d106      	bne.n	800500e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2102      	movs	r1, #2
 8005006:	4618      	mov	r0, r3
 8005008:	f003 fe2c 	bl	8008c64 <USB_InitFSLSPClkSel>
 800500c:	e011      	b.n	8005032 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2101      	movs	r1, #1
 8005014:	4618      	mov	r0, r3
 8005016:	f003 fe25 	bl	8008c64 <USB_InitFSLSPClkSel>
 800501a:	e00a      	b.n	8005032 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d106      	bne.n	8005032 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800502a:	461a      	mov	r2, r3
 800502c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005030:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f008 fe36 	bl	800dca4 <HAL_HCD_PortEnabled_Callback>
 8005038:	e002      	b.n	8005040 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f008 fe40 	bl	800dcc0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b20      	cmp	r3, #32
 8005048:	d103      	bne.n	8005052 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f043 0320 	orr.w	r3, r3, #32
 8005050:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005058:	461a      	mov	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	6013      	str	r3, [r2, #0]
}
 800505e:	bf00      	nop
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e12b      	b.n	80052d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fd f8c8 	bl	8002224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	; 0x24
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0201 	bic.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050cc:	f001 ffba 	bl	8007044 <HAL_RCC_GetPCLK1Freq>
 80050d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4a81      	ldr	r2, [pc, #516]	; (80052dc <HAL_I2C_Init+0x274>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d807      	bhi.n	80050ec <HAL_I2C_Init+0x84>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4a80      	ldr	r2, [pc, #512]	; (80052e0 <HAL_I2C_Init+0x278>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	bf94      	ite	ls
 80050e4:	2301      	movls	r3, #1
 80050e6:	2300      	movhi	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	e006      	b.n	80050fa <HAL_I2C_Init+0x92>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4a7d      	ldr	r2, [pc, #500]	; (80052e4 <HAL_I2C_Init+0x27c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	bf94      	ite	ls
 80050f4:	2301      	movls	r3, #1
 80050f6:	2300      	movhi	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e0e7      	b.n	80052d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4a78      	ldr	r2, [pc, #480]	; (80052e8 <HAL_I2C_Init+0x280>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	0c9b      	lsrs	r3, r3, #18
 800510c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	4a6a      	ldr	r2, [pc, #424]	; (80052dc <HAL_I2C_Init+0x274>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d802      	bhi.n	800513c <HAL_I2C_Init+0xd4>
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	3301      	adds	r3, #1
 800513a:	e009      	b.n	8005150 <HAL_I2C_Init+0xe8>
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	4a69      	ldr	r2, [pc, #420]	; (80052ec <HAL_I2C_Init+0x284>)
 8005148:	fba2 2303 	umull	r2, r3, r2, r3
 800514c:	099b      	lsrs	r3, r3, #6
 800514e:	3301      	adds	r3, #1
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6812      	ldr	r2, [r2, #0]
 8005154:	430b      	orrs	r3, r1
 8005156:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005162:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	495c      	ldr	r1, [pc, #368]	; (80052dc <HAL_I2C_Init+0x274>)
 800516c:	428b      	cmp	r3, r1
 800516e:	d819      	bhi.n	80051a4 <HAL_I2C_Init+0x13c>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	1e59      	subs	r1, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	fbb1 f3f3 	udiv	r3, r1, r3
 800517e:	1c59      	adds	r1, r3, #1
 8005180:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005184:	400b      	ands	r3, r1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <HAL_I2C_Init+0x138>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1e59      	subs	r1, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	fbb1 f3f3 	udiv	r3, r1, r3
 8005198:	3301      	adds	r3, #1
 800519a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800519e:	e051      	b.n	8005244 <HAL_I2C_Init+0x1dc>
 80051a0:	2304      	movs	r3, #4
 80051a2:	e04f      	b.n	8005244 <HAL_I2C_Init+0x1dc>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d111      	bne.n	80051d0 <HAL_I2C_Init+0x168>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	1e58      	subs	r0, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6859      	ldr	r1, [r3, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	440b      	add	r3, r1
 80051ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80051be:	3301      	adds	r3, #1
 80051c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	bf0c      	ite	eq
 80051c8:	2301      	moveq	r3, #1
 80051ca:	2300      	movne	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	e012      	b.n	80051f6 <HAL_I2C_Init+0x18e>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	1e58      	subs	r0, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6859      	ldr	r1, [r3, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	0099      	lsls	r1, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051e6:	3301      	adds	r3, #1
 80051e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bf0c      	ite	eq
 80051f0:	2301      	moveq	r3, #1
 80051f2:	2300      	movne	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_I2C_Init+0x196>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e022      	b.n	8005244 <HAL_I2C_Init+0x1dc>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10e      	bne.n	8005224 <HAL_I2C_Init+0x1bc>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1e58      	subs	r0, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6859      	ldr	r1, [r3, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	440b      	add	r3, r1
 8005214:	fbb0 f3f3 	udiv	r3, r0, r3
 8005218:	3301      	adds	r3, #1
 800521a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800521e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005222:	e00f      	b.n	8005244 <HAL_I2C_Init+0x1dc>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1e58      	subs	r0, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6859      	ldr	r1, [r3, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	0099      	lsls	r1, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	fbb0 f3f3 	udiv	r3, r0, r3
 800523a:	3301      	adds	r3, #1
 800523c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	6809      	ldr	r1, [r1, #0]
 8005248:	4313      	orrs	r3, r2
 800524a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69da      	ldr	r2, [r3, #28]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005272:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6911      	ldr	r1, [r2, #16]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	68d2      	ldr	r2, [r2, #12]
 800527e:	4311      	orrs	r1, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	430b      	orrs	r3, r1
 8005286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	000186a0 	.word	0x000186a0
 80052e0:	001e847f 	.word	0x001e847f
 80052e4:	003d08ff 	.word	0x003d08ff
 80052e8:	431bde83 	.word	0x431bde83
 80052ec:	10624dd3 	.word	0x10624dd3

080052f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	4608      	mov	r0, r1
 80052fa:	4611      	mov	r1, r2
 80052fc:	461a      	mov	r2, r3
 80052fe:	4603      	mov	r3, r0
 8005300:	817b      	strh	r3, [r7, #10]
 8005302:	460b      	mov	r3, r1
 8005304:	813b      	strh	r3, [r7, #8]
 8005306:	4613      	mov	r3, r2
 8005308:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800530a:	f7fd fc43 	bl	8002b94 <HAL_GetTick>
 800530e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b20      	cmp	r3, #32
 800531a:	f040 80d9 	bne.w	80054d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	2319      	movs	r3, #25
 8005324:	2201      	movs	r2, #1
 8005326:	496d      	ldr	r1, [pc, #436]	; (80054dc <HAL_I2C_Mem_Write+0x1ec>)
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 fc7f 	bl	8005c2c <I2C_WaitOnFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005334:	2302      	movs	r3, #2
 8005336:	e0cc      	b.n	80054d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_I2C_Mem_Write+0x56>
 8005342:	2302      	movs	r3, #2
 8005344:	e0c5      	b.n	80054d2 <HAL_I2C_Mem_Write+0x1e2>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b01      	cmp	r3, #1
 800535a:	d007      	beq.n	800536c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800537a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2221      	movs	r2, #33	; 0x21
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2240      	movs	r2, #64	; 0x40
 8005388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a3a      	ldr	r2, [r7, #32]
 8005396:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800539c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4a4d      	ldr	r2, [pc, #308]	; (80054e0 <HAL_I2C_Mem_Write+0x1f0>)
 80053ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053ae:	88f8      	ldrh	r0, [r7, #6]
 80053b0:	893a      	ldrh	r2, [r7, #8]
 80053b2:	8979      	ldrh	r1, [r7, #10]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	9301      	str	r3, [sp, #4]
 80053b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	4603      	mov	r3, r0
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fab6 	bl	8005930 <I2C_RequestMemoryWrite>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d052      	beq.n	8005470 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e081      	b.n	80054d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 fd00 	bl	8005dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00d      	beq.n	80053fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d107      	bne.n	80053f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e06b      	b.n	80054d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	781a      	ldrb	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b04      	cmp	r3, #4
 8005436:	d11b      	bne.n	8005470 <HAL_I2C_Mem_Write+0x180>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543c:	2b00      	cmp	r3, #0
 800543e:	d017      	beq.n	8005470 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	781a      	ldrb	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1aa      	bne.n	80053ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fcec 	bl	8005e5a <I2C_WaitOnBTFFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00d      	beq.n	80054a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	2b04      	cmp	r3, #4
 800548e:	d107      	bne.n	80054a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e016      	b.n	80054d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	e000      	b.n	80054d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	00100002 	.word	0x00100002
 80054e0:	ffff0000 	.word	0xffff0000

080054e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08c      	sub	sp, #48	; 0x30
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	4608      	mov	r0, r1
 80054ee:	4611      	mov	r1, r2
 80054f0:	461a      	mov	r2, r3
 80054f2:	4603      	mov	r3, r0
 80054f4:	817b      	strh	r3, [r7, #10]
 80054f6:	460b      	mov	r3, r1
 80054f8:	813b      	strh	r3, [r7, #8]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054fe:	f7fd fb49 	bl	8002b94 <HAL_GetTick>
 8005502:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b20      	cmp	r3, #32
 800550e:	f040 8208 	bne.w	8005922 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	2319      	movs	r3, #25
 8005518:	2201      	movs	r2, #1
 800551a:	497b      	ldr	r1, [pc, #492]	; (8005708 <HAL_I2C_Mem_Read+0x224>)
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 fb85 	bl	8005c2c <I2C_WaitOnFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005528:	2302      	movs	r3, #2
 800552a:	e1fb      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_I2C_Mem_Read+0x56>
 8005536:	2302      	movs	r3, #2
 8005538:	e1f4      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d007      	beq.n	8005560 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800556e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2222      	movs	r2, #34	; 0x22
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2240      	movs	r2, #64	; 0x40
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005590:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a5b      	ldr	r2, [pc, #364]	; (800570c <HAL_I2C_Mem_Read+0x228>)
 80055a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055a2:	88f8      	ldrh	r0, [r7, #6]
 80055a4:	893a      	ldrh	r2, [r7, #8]
 80055a6:	8979      	ldrh	r1, [r7, #10]
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	4603      	mov	r3, r0
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 fa52 	bl	8005a5c <I2C_RequestMemoryRead>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e1b0      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d113      	bne.n	80055f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ca:	2300      	movs	r3, #0
 80055cc:	623b      	str	r3, [r7, #32]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	623b      	str	r3, [r7, #32]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	623b      	str	r3, [r7, #32]
 80055de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	e184      	b.n	80058fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d11b      	bne.n	8005632 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005608:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800560a:	2300      	movs	r3, #0
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	61fb      	str	r3, [r7, #28]
 800561e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e164      	b.n	80058fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005636:	2b02      	cmp	r3, #2
 8005638:	d11b      	bne.n	8005672 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005648:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005658:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800565a:	2300      	movs	r3, #0
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	e144      	b.n	80058fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005688:	e138      	b.n	80058fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568e:	2b03      	cmp	r3, #3
 8005690:	f200 80f1 	bhi.w	8005876 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005698:	2b01      	cmp	r3, #1
 800569a:	d123      	bne.n	80056e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800569c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fc1b 	bl	8005edc <I2C_WaitOnRXNEFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e139      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056e2:	e10b      	b.n	80058fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d14e      	bne.n	800578a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	2200      	movs	r2, #0
 80056f4:	4906      	ldr	r1, [pc, #24]	; (8005710 <HAL_I2C_Mem_Read+0x22c>)
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 fa98 	bl	8005c2c <I2C_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d008      	beq.n	8005714 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e10e      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
 8005706:	bf00      	nop
 8005708:	00100002 	.word	0x00100002
 800570c:	ffff0000 	.word	0xffff0000
 8005710:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691a      	ldr	r2, [r3, #16]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005772:	3b01      	subs	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005788:	e0b8      	b.n	80058fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	2200      	movs	r2, #0
 8005792:	4966      	ldr	r1, [pc, #408]	; (800592c <HAL_I2C_Mem_Read+0x448>)
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 fa49 	bl	8005c2c <I2C_WaitOnFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0bf      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	2200      	movs	r2, #0
 80057ee:	494f      	ldr	r1, [pc, #316]	; (800592c <HAL_I2C_Mem_Read+0x448>)
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 fa1b 	bl	8005c2c <I2C_WaitOnFlagUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e091      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800580e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691a      	ldr	r2, [r3, #16]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005874:	e042      	b.n	80058fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005878:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 fb2e 	bl	8005edc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e04c      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d118      	bne.n	80058fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005900:	2b00      	cmp	r3, #0
 8005902:	f47f aec2 	bne.w	800568a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	e000      	b.n	8005924 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005922:	2302      	movs	r3, #2
  }
}
 8005924:	4618      	mov	r0, r3
 8005926:	3728      	adds	r7, #40	; 0x28
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	00010004 	.word	0x00010004

08005930 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	4608      	mov	r0, r1
 800593a:	4611      	mov	r1, r2
 800593c:	461a      	mov	r2, r3
 800593e:	4603      	mov	r3, r0
 8005940:	817b      	strh	r3, [r7, #10]
 8005942:	460b      	mov	r3, r1
 8005944:	813b      	strh	r3, [r7, #8]
 8005946:	4613      	mov	r3, r2
 8005948:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005958:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	2200      	movs	r2, #0
 8005962:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 f960 	bl	8005c2c <I2C_WaitOnFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00d      	beq.n	800598e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005980:	d103      	bne.n	800598a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e05f      	b.n	8005a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800598e:	897b      	ldrh	r3, [r7, #10]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800599c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	6a3a      	ldr	r2, [r7, #32]
 80059a2:	492d      	ldr	r1, [pc, #180]	; (8005a58 <I2C_RequestMemoryWrite+0x128>)
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f998 	bl	8005cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e04c      	b.n	8005a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059cc:	6a39      	ldr	r1, [r7, #32]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fa02 	bl	8005dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00d      	beq.n	80059f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d107      	bne.n	80059f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e02b      	b.n	8005a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059f6:	88fb      	ldrh	r3, [r7, #6]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d105      	bne.n	8005a08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059fc:	893b      	ldrh	r3, [r7, #8]
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	611a      	str	r2, [r3, #16]
 8005a06:	e021      	b.n	8005a4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a08:	893b      	ldrh	r3, [r7, #8]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a18:	6a39      	ldr	r1, [r7, #32]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f9dc 	bl	8005dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00d      	beq.n	8005a42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d107      	bne.n	8005a3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e005      	b.n	8005a4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a42:	893b      	ldrh	r3, [r7, #8]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	00010002 	.word	0x00010002

08005a5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	4608      	mov	r0, r1
 8005a66:	4611      	mov	r1, r2
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	817b      	strh	r3, [r7, #10]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	813b      	strh	r3, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 f8c2 	bl	8005c2c <I2C_WaitOnFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005abc:	d103      	bne.n	8005ac6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e0aa      	b.n	8005c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005aca:	897b      	ldrh	r3, [r7, #10]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ad8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	6a3a      	ldr	r2, [r7, #32]
 8005ade:	4952      	ldr	r1, [pc, #328]	; (8005c28 <I2C_RequestMemoryRead+0x1cc>)
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f8fa 	bl	8005cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e097      	b.n	8005c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b08:	6a39      	ldr	r1, [r7, #32]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 f964 	bl	8005dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00d      	beq.n	8005b32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d107      	bne.n	8005b2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e076      	b.n	8005c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d105      	bne.n	8005b44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b38:	893b      	ldrh	r3, [r7, #8]
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	611a      	str	r2, [r3, #16]
 8005b42:	e021      	b.n	8005b88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b44:	893b      	ldrh	r3, [r7, #8]
 8005b46:	0a1b      	lsrs	r3, r3, #8
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b54:	6a39      	ldr	r1, [r7, #32]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 f93e 	bl	8005dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00d      	beq.n	8005b7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d107      	bne.n	8005b7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e050      	b.n	8005c20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b7e:	893b      	ldrh	r3, [r7, #8]
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8a:	6a39      	ldr	r1, [r7, #32]
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f923 	bl	8005dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00d      	beq.n	8005bb4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d107      	bne.n	8005bb0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e035      	b.n	8005c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f82b 	bl	8005c2c <I2C_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00d      	beq.n	8005bf8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bea:	d103      	bne.n	8005bf4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e013      	b.n	8005c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bf8:	897b      	ldrh	r3, [r7, #10]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	f043 0301 	orr.w	r3, r3, #1
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	6a3a      	ldr	r2, [r7, #32]
 8005c0c:	4906      	ldr	r1, [pc, #24]	; (8005c28 <I2C_RequestMemoryRead+0x1cc>)
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f863 	bl	8005cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	00010002 	.word	0x00010002

08005c2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c3c:	e025      	b.n	8005c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c44:	d021      	beq.n	8005c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c46:	f7fc ffa5 	bl	8002b94 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d302      	bcc.n	8005c5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d116      	bne.n	8005c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	f043 0220 	orr.w	r2, r3, #32
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e023      	b.n	8005cd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	0c1b      	lsrs	r3, r3, #16
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d10d      	bne.n	8005cb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	43da      	mvns	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	bf0c      	ite	eq
 8005ca6:	2301      	moveq	r3, #1
 8005ca8:	2300      	movne	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	461a      	mov	r2, r3
 8005cae:	e00c      	b.n	8005cca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	43da      	mvns	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	bf0c      	ite	eq
 8005cc2:	2301      	moveq	r3, #1
 8005cc4:	2300      	movne	r3, #0
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	461a      	mov	r2, r3
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d0b6      	beq.n	8005c3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ce8:	e051      	b.n	8005d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf8:	d123      	bne.n	8005d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f043 0204 	orr.w	r2, r3, #4
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e046      	b.n	8005dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d021      	beq.n	8005d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4a:	f7fc ff23 	bl	8002b94 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d302      	bcc.n	8005d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d116      	bne.n	8005d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f043 0220 	orr.w	r2, r3, #32
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e020      	b.n	8005dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	0c1b      	lsrs	r3, r3, #16
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d10c      	bne.n	8005db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	43da      	mvns	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4013      	ands	r3, r2
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	bf14      	ite	ne
 8005daa:	2301      	movne	r3, #1
 8005dac:	2300      	moveq	r3, #0
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	e00b      	b.n	8005dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	43da      	mvns	r2, r3
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	bf14      	ite	ne
 8005dc4:	2301      	movne	r3, #1
 8005dc6:	2300      	moveq	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d18d      	bne.n	8005cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005de4:	e02d      	b.n	8005e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f8ce 	bl	8005f88 <I2C_IsAcknowledgeFailed>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e02d      	b.n	8005e52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d021      	beq.n	8005e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfe:	f7fc fec9 	bl	8002b94 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d302      	bcc.n	8005e14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d116      	bne.n	8005e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	f043 0220 	orr.w	r2, r3, #32
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e007      	b.n	8005e52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4c:	2b80      	cmp	r3, #128	; 0x80
 8005e4e:	d1ca      	bne.n	8005de6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e66:	e02d      	b.n	8005ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f88d 	bl	8005f88 <I2C_IsAcknowledgeFailed>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e02d      	b.n	8005ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7e:	d021      	beq.n	8005ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e80:	f7fc fe88 	bl	8002b94 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d302      	bcc.n	8005e96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d116      	bne.n	8005ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	f043 0220 	orr.w	r2, r3, #32
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e007      	b.n	8005ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d1ca      	bne.n	8005e68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ee8:	e042      	b.n	8005f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	f003 0310 	and.w	r3, r3, #16
 8005ef4:	2b10      	cmp	r3, #16
 8005ef6:	d119      	bne.n	8005f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f06f 0210 	mvn.w	r2, #16
 8005f00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e029      	b.n	8005f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2c:	f7fc fe32 	bl	8002b94 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d302      	bcc.n	8005f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d116      	bne.n	8005f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	f043 0220 	orr.w	r2, r3, #32
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e007      	b.n	8005f80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	d1b5      	bne.n	8005eea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9e:	d11b      	bne.n	8005fd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fa8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	f043 0204 	orr.w	r2, r3, #4
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d129      	bne.n	8006050 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2224      	movs	r2, #36	; 0x24
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0201 	bic.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0210 	bic.w	r2, r2, #16
 8006022:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	e000      	b.n	8006052 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006050:	2302      	movs	r3, #2
  }
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b20      	cmp	r3, #32
 8006076:	d12a      	bne.n	80060ce <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2224      	movs	r2, #36	; 0x24
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0201 	bic.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006098:	89fb      	ldrh	r3, [r7, #14]
 800609a:	f023 030f 	bic.w	r3, r3, #15
 800609e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	89fb      	ldrh	r3, [r7, #14]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	89fa      	ldrh	r2, [r7, #14]
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0201 	orr.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	e000      	b.n	80060d0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80060ce:	2302      	movs	r3, #2
  }
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e0bf      	b.n	800626e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fc f8f8 	bl	80022f8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800611e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6999      	ldr	r1, [r3, #24]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006134:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6899      	ldr	r1, [r3, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b4a      	ldr	r3, [pc, #296]	; (8006278 <HAL_LTDC_Init+0x19c>)
 8006150:	400b      	ands	r3, r1
 8006152:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	041b      	lsls	r3, r3, #16
 800615a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6899      	ldr	r1, [r3, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68d9      	ldr	r1, [r3, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	4b3e      	ldr	r3, [pc, #248]	; (8006278 <HAL_LTDC_Init+0x19c>)
 800617e:	400b      	ands	r3, r1
 8006180:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	041b      	lsls	r3, r3, #16
 8006188:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68d9      	ldr	r1, [r3, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1a      	ldr	r2, [r3, #32]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6919      	ldr	r1, [r3, #16]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4b33      	ldr	r3, [pc, #204]	; (8006278 <HAL_LTDC_Init+0x19c>)
 80061ac:	400b      	ands	r3, r1
 80061ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	041b      	lsls	r3, r3, #16
 80061b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6919      	ldr	r1, [r3, #16]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6959      	ldr	r1, [r3, #20]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	4b27      	ldr	r3, [pc, #156]	; (8006278 <HAL_LTDC_Init+0x19c>)
 80061da:	400b      	ands	r3, r1
 80061dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	041b      	lsls	r3, r3, #16
 80061e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6959      	ldr	r1, [r3, #20]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800620c:	041b      	lsls	r3, r3, #16
 800620e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800621e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4313      	orrs	r3, r2
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0206 	orr.w	r2, r2, #6
 800624a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	f000f800 	.word	0xf000f800

0800627c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006292:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	d023      	beq.n	80062e6 <HAL_LTDC_IRQHandler+0x6a>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01e      	beq.n	80062e6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0204 	bic.w	r2, r2, #4
 80062b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2204      	movs	r2, #4
 80062be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062c6:	f043 0201 	orr.w	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2204      	movs	r2, #4
 80062d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f86f 	bl	80063c4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d023      	beq.n	8006338 <HAL_LTDC_IRQHandler+0xbc>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d01e      	beq.n	8006338 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0202 	bic.w	r2, r2, #2
 8006308:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2202      	movs	r2, #2
 8006310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006318:	f043 0202 	orr.w	r2, r3, #2
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2204      	movs	r2, #4
 8006326:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f846 	bl	80063c4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d01b      	beq.n	800637a <HAL_LTDC_IRQHandler+0xfe>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	d016      	beq.n	800637a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0201 	bic.w	r2, r2, #1
 800635a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2201      	movs	r2, #1
 8006362:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f82f 	bl	80063d8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01b      	beq.n	80063bc <HAL_LTDC_IRQHandler+0x140>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d016      	beq.n	80063bc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0208 	bic.w	r2, r2, #8
 800639c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2208      	movs	r2, #8
 80063a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f818 	bl	80063ec <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80063bc:	bf00      	nop
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006400:	b5b0      	push	{r4, r5, r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_LTDC_ConfigLayer+0x1a>
 8006416:	2302      	movs	r3, #2
 8006418:	e02c      	b.n	8006474 <HAL_LTDC_ConfigLayer+0x74>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2202      	movs	r2, #2
 8006426:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2134      	movs	r1, #52	; 0x34
 8006430:	fb01 f303 	mul.w	r3, r1, r3
 8006434:	4413      	add	r3, r2
 8006436:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4614      	mov	r4, r2
 800643e:	461d      	mov	r5, r3
 8006440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800644a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	68b9      	ldr	r1, [r7, #8]
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 f811 	bl	800647c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2201      	movs	r2, #1
 8006460:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bdb0      	pop	{r4, r5, r7, pc}

0800647c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800647c:	b480      	push	{r7}
 800647e:	b089      	sub	sp, #36	; 0x24
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	0c1b      	lsrs	r3, r3, #16
 8006494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006498:	4413      	add	r3, r2
 800649a:	041b      	lsls	r3, r3, #16
 800649c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	01db      	lsls	r3, r3, #7
 80064a8:	4413      	add	r3, r2
 80064aa:	3384      	adds	r3, #132	; 0x84
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	4611      	mov	r1, r2
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	01d2      	lsls	r2, r2, #7
 80064b8:	440a      	add	r2, r1
 80064ba:	3284      	adds	r2, #132	; 0x84
 80064bc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80064c0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	0c1b      	lsrs	r3, r3, #16
 80064ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d2:	4413      	add	r3, r2
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4619      	mov	r1, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	01db      	lsls	r3, r3, #7
 80064e0:	440b      	add	r3, r1
 80064e2:	3384      	adds	r3, #132	; 0x84
 80064e4:	4619      	mov	r1, r3
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064fa:	4413      	add	r3, r2
 80064fc:	041b      	lsls	r3, r3, #16
 80064fe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	01db      	lsls	r3, r3, #7
 800650a:	4413      	add	r3, r2
 800650c:	3384      	adds	r3, #132	; 0x84
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	6812      	ldr	r2, [r2, #0]
 8006514:	4611      	mov	r1, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	01d2      	lsls	r2, r2, #7
 800651a:	440a      	add	r2, r1
 800651c:	3284      	adds	r2, #132	; 0x84
 800651e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006522:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006532:	4413      	add	r3, r2
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4619      	mov	r1, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	01db      	lsls	r3, r3, #7
 8006540:	440b      	add	r3, r1
 8006542:	3384      	adds	r3, #132	; 0x84
 8006544:	4619      	mov	r1, r3
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	4313      	orrs	r3, r2
 800654a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	01db      	lsls	r3, r3, #7
 8006556:	4413      	add	r3, r2
 8006558:	3384      	adds	r3, #132	; 0x84
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	4611      	mov	r1, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	01d2      	lsls	r2, r2, #7
 8006566:	440a      	add	r2, r1
 8006568:	3284      	adds	r2, #132	; 0x84
 800656a:	f023 0307 	bic.w	r3, r3, #7
 800656e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	461a      	mov	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	01db      	lsls	r3, r3, #7
 800657a:	4413      	add	r3, r2
 800657c:	3384      	adds	r3, #132	; 0x84
 800657e:	461a      	mov	r2, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006596:	041b      	lsls	r3, r3, #16
 8006598:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	061b      	lsls	r3, r3, #24
 80065a0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	01db      	lsls	r3, r3, #7
 80065ac:	4413      	add	r3, r2
 80065ae:	3384      	adds	r3, #132	; 0x84
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	01db      	lsls	r3, r3, #7
 80065bc:	4413      	add	r3, r2
 80065be:	3384      	adds	r3, #132	; 0x84
 80065c0:	461a      	mov	r2, r3
 80065c2:	2300      	movs	r3, #0
 80065c4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065cc:	461a      	mov	r2, r3
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	431a      	orrs	r2, r3
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	431a      	orrs	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4619      	mov	r1, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	01db      	lsls	r3, r3, #7
 80065e0:	440b      	add	r3, r1
 80065e2:	3384      	adds	r3, #132	; 0x84
 80065e4:	4619      	mov	r1, r3
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	01db      	lsls	r3, r3, #7
 80065f6:	4413      	add	r3, r2
 80065f8:	3384      	adds	r3, #132	; 0x84
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	4611      	mov	r1, r2
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	01d2      	lsls	r2, r2, #7
 8006606:	440a      	add	r2, r1
 8006608:	3284      	adds	r2, #132	; 0x84
 800660a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800660e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	01db      	lsls	r3, r3, #7
 800661a:	4413      	add	r3, r2
 800661c:	3384      	adds	r3, #132	; 0x84
 800661e:	461a      	mov	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	01db      	lsls	r3, r3, #7
 8006630:	4413      	add	r3, r2
 8006632:	3384      	adds	r3, #132	; 0x84
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	6812      	ldr	r2, [r2, #0]
 800663a:	4611      	mov	r1, r2
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	01d2      	lsls	r2, r2, #7
 8006640:	440a      	add	r2, r1
 8006642:	3284      	adds	r2, #132	; 0x84
 8006644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006648:	f023 0307 	bic.w	r3, r3, #7
 800664c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	69da      	ldr	r2, [r3, #28]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	6809      	ldr	r1, [r1, #0]
 800665a:	4608      	mov	r0, r1
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	01c9      	lsls	r1, r1, #7
 8006660:	4401      	add	r1, r0
 8006662:	3184      	adds	r1, #132	; 0x84
 8006664:	4313      	orrs	r3, r2
 8006666:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	01db      	lsls	r3, r3, #7
 8006672:	4413      	add	r3, r2
 8006674:	3384      	adds	r3, #132	; 0x84
 8006676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	01db      	lsls	r3, r3, #7
 8006682:	4413      	add	r3, r2
 8006684:	3384      	adds	r3, #132	; 0x84
 8006686:	461a      	mov	r2, r3
 8006688:	2300      	movs	r3, #0
 800668a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	01db      	lsls	r3, r3, #7
 8006696:	4413      	add	r3, r2
 8006698:	3384      	adds	r3, #132	; 0x84
 800669a:	461a      	mov	r2, r3
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d102      	bne.n	80066b0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80066aa:	2304      	movs	r3, #4
 80066ac:	61fb      	str	r3, [r7, #28]
 80066ae:	e01b      	b.n	80066e8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d102      	bne.n	80066be <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80066b8:	2303      	movs	r3, #3
 80066ba:	61fb      	str	r3, [r7, #28]
 80066bc:	e014      	b.n	80066e8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d00b      	beq.n	80066de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d007      	beq.n	80066de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d003      	beq.n	80066de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80066da:	2b07      	cmp	r3, #7
 80066dc:	d102      	bne.n	80066e4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80066de:	2302      	movs	r3, #2
 80066e0:	61fb      	str	r3, [r7, #28]
 80066e2:	e001      	b.n	80066e8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80066e4:	2301      	movs	r3, #1
 80066e6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	01db      	lsls	r3, r3, #7
 80066f2:	4413      	add	r3, r2
 80066f4:	3384      	adds	r3, #132	; 0x84
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	6812      	ldr	r2, [r2, #0]
 80066fc:	4611      	mov	r1, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	01d2      	lsls	r2, r2, #7
 8006702:	440a      	add	r2, r1
 8006704:	3284      	adds	r2, #132	; 0x84
 8006706:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800670a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	69fa      	ldr	r2, [r7, #28]
 8006712:	fb02 f303 	mul.w	r3, r2, r3
 8006716:	041a      	lsls	r2, r3, #16
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6859      	ldr	r1, [r3, #4]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	1acb      	subs	r3, r1, r3
 8006722:	69f9      	ldr	r1, [r7, #28]
 8006724:	fb01 f303 	mul.w	r3, r1, r3
 8006728:	3303      	adds	r3, #3
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	6809      	ldr	r1, [r1, #0]
 800672e:	4608      	mov	r0, r1
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	01c9      	lsls	r1, r1, #7
 8006734:	4401      	add	r1, r0
 8006736:	3184      	adds	r1, #132	; 0x84
 8006738:	4313      	orrs	r3, r2
 800673a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	461a      	mov	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	01db      	lsls	r3, r3, #7
 8006746:	4413      	add	r3, r2
 8006748:	3384      	adds	r3, #132	; 0x84
 800674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	6812      	ldr	r2, [r2, #0]
 8006750:	4611      	mov	r1, r2
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	01d2      	lsls	r2, r2, #7
 8006756:	440a      	add	r2, r1
 8006758:	3284      	adds	r2, #132	; 0x84
 800675a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800675e:	f023 0307 	bic.w	r3, r3, #7
 8006762:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	461a      	mov	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	01db      	lsls	r3, r3, #7
 800676e:	4413      	add	r3, r2
 8006770:	3384      	adds	r3, #132	; 0x84
 8006772:	461a      	mov	r2, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	01db      	lsls	r3, r3, #7
 8006784:	4413      	add	r3, r2
 8006786:	3384      	adds	r3, #132	; 0x84
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	6812      	ldr	r2, [r2, #0]
 800678e:	4611      	mov	r1, r2
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	01d2      	lsls	r2, r2, #7
 8006794:	440a      	add	r2, r1
 8006796:	3284      	adds	r2, #132	; 0x84
 8006798:	f043 0301 	orr.w	r3, r3, #1
 800679c:	6013      	str	r3, [r2, #0]
}
 800679e:	bf00      	nop
 80067a0:	3724      	adds	r7, #36	; 0x24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e264      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d075      	beq.n	80068b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067ca:	4ba3      	ldr	r3, [pc, #652]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 030c 	and.w	r3, r3, #12
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d00c      	beq.n	80067f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067d6:	4ba0      	ldr	r3, [pc, #640]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d112      	bne.n	8006808 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067e2:	4b9d      	ldr	r3, [pc, #628]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ee:	d10b      	bne.n	8006808 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f0:	4b99      	ldr	r3, [pc, #612]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d05b      	beq.n	80068b4 <HAL_RCC_OscConfig+0x108>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d157      	bne.n	80068b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e23f      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006810:	d106      	bne.n	8006820 <HAL_RCC_OscConfig+0x74>
 8006812:	4b91      	ldr	r3, [pc, #580]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a90      	ldr	r2, [pc, #576]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	e01d      	b.n	800685c <HAL_RCC_OscConfig+0xb0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006828:	d10c      	bne.n	8006844 <HAL_RCC_OscConfig+0x98>
 800682a:	4b8b      	ldr	r3, [pc, #556]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a8a      	ldr	r2, [pc, #552]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	4b88      	ldr	r3, [pc, #544]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a87      	ldr	r2, [pc, #540]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 800683c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e00b      	b.n	800685c <HAL_RCC_OscConfig+0xb0>
 8006844:	4b84      	ldr	r3, [pc, #528]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a83      	ldr	r2, [pc, #524]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 800684a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	4b81      	ldr	r3, [pc, #516]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a80      	ldr	r2, [pc, #512]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800685a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d013      	beq.n	800688c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006864:	f7fc f996 	bl	8002b94 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800686c:	f7fc f992 	bl	8002b94 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b64      	cmp	r3, #100	; 0x64
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e204      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800687e:	4b76      	ldr	r3, [pc, #472]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0xc0>
 800688a:	e014      	b.n	80068b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800688c:	f7fc f982 	bl	8002b94 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006894:	f7fc f97e 	bl	8002b94 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b64      	cmp	r3, #100	; 0x64
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e1f0      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068a6:	4b6c      	ldr	r3, [pc, #432]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f0      	bne.n	8006894 <HAL_RCC_OscConfig+0xe8>
 80068b2:	e000      	b.n	80068b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d063      	beq.n	800698a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068c2:	4b65      	ldr	r3, [pc, #404]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 030c 	and.w	r3, r3, #12
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00b      	beq.n	80068e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068ce:	4b62      	ldr	r3, [pc, #392]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d11c      	bne.n	8006914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068da:	4b5f      	ldr	r3, [pc, #380]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d116      	bne.n	8006914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068e6:	4b5c      	ldr	r3, [pc, #368]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <HAL_RCC_OscConfig+0x152>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d001      	beq.n	80068fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e1c4      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068fe:	4b56      	ldr	r3, [pc, #344]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	4952      	ldr	r1, [pc, #328]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 800690e:	4313      	orrs	r3, r2
 8006910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006912:	e03a      	b.n	800698a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d020      	beq.n	800695e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800691c:	4b4f      	ldr	r3, [pc, #316]	; (8006a5c <HAL_RCC_OscConfig+0x2b0>)
 800691e:	2201      	movs	r2, #1
 8006920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006922:	f7fc f937 	bl	8002b94 <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006928:	e008      	b.n	800693c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800692a:	f7fc f933 	bl	8002b94 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d901      	bls.n	800693c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e1a5      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800693c:	4b46      	ldr	r3, [pc, #280]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0f0      	beq.n	800692a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006948:	4b43      	ldr	r3, [pc, #268]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	4940      	ldr	r1, [pc, #256]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006958:	4313      	orrs	r3, r2
 800695a:	600b      	str	r3, [r1, #0]
 800695c:	e015      	b.n	800698a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800695e:	4b3f      	ldr	r3, [pc, #252]	; (8006a5c <HAL_RCC_OscConfig+0x2b0>)
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006964:	f7fc f916 	bl	8002b94 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800696c:	f7fc f912 	bl	8002b94 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e184      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800697e:	4b36      	ldr	r3, [pc, #216]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d030      	beq.n	80069f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d016      	beq.n	80069cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800699e:	4b30      	ldr	r3, [pc, #192]	; (8006a60 <HAL_RCC_OscConfig+0x2b4>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a4:	f7fc f8f6 	bl	8002b94 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069ac:	f7fc f8f2 	bl	8002b94 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e164      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069be:	4b26      	ldr	r3, [pc, #152]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80069c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0f0      	beq.n	80069ac <HAL_RCC_OscConfig+0x200>
 80069ca:	e015      	b.n	80069f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069cc:	4b24      	ldr	r3, [pc, #144]	; (8006a60 <HAL_RCC_OscConfig+0x2b4>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069d2:	f7fc f8df 	bl	8002b94 <HAL_GetTick>
 80069d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069d8:	e008      	b.n	80069ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069da:	f7fc f8db 	bl	8002b94 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d901      	bls.n	80069ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e14d      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069ec:	4b1a      	ldr	r3, [pc, #104]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 80069ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1f0      	bne.n	80069da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80a0 	beq.w	8006b46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a06:	2300      	movs	r3, #0
 8006a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a0a:	4b13      	ldr	r3, [pc, #76]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10f      	bne.n	8006a36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a16:	2300      	movs	r3, #0
 8006a18:	60bb      	str	r3, [r7, #8]
 8006a1a:	4b0f      	ldr	r3, [pc, #60]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	4a0e      	ldr	r2, [pc, #56]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a24:	6413      	str	r3, [r2, #64]	; 0x40
 8006a26:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <HAL_RCC_OscConfig+0x2ac>)
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a2e:	60bb      	str	r3, [r7, #8]
 8006a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a32:	2301      	movs	r3, #1
 8006a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a36:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <HAL_RCC_OscConfig+0x2b8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d121      	bne.n	8006a86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a42:	4b08      	ldr	r3, [pc, #32]	; (8006a64 <HAL_RCC_OscConfig+0x2b8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a07      	ldr	r2, [pc, #28]	; (8006a64 <HAL_RCC_OscConfig+0x2b8>)
 8006a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a4e:	f7fc f8a1 	bl	8002b94 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a54:	e011      	b.n	8006a7a <HAL_RCC_OscConfig+0x2ce>
 8006a56:	bf00      	nop
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	42470000 	.word	0x42470000
 8006a60:	42470e80 	.word	0x42470e80
 8006a64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a68:	f7fc f894 	bl	8002b94 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e106      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a7a:	4b85      	ldr	r3, [pc, #532]	; (8006c90 <HAL_RCC_OscConfig+0x4e4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d106      	bne.n	8006a9c <HAL_RCC_OscConfig+0x2f0>
 8006a8e:	4b81      	ldr	r3, [pc, #516]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a92:	4a80      	ldr	r2, [pc, #512]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006a94:	f043 0301 	orr.w	r3, r3, #1
 8006a98:	6713      	str	r3, [r2, #112]	; 0x70
 8006a9a:	e01c      	b.n	8006ad6 <HAL_RCC_OscConfig+0x32a>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	2b05      	cmp	r3, #5
 8006aa2:	d10c      	bne.n	8006abe <HAL_RCC_OscConfig+0x312>
 8006aa4:	4b7b      	ldr	r3, [pc, #492]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa8:	4a7a      	ldr	r2, [pc, #488]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006aaa:	f043 0304 	orr.w	r3, r3, #4
 8006aae:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab0:	4b78      	ldr	r3, [pc, #480]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab4:	4a77      	ldr	r2, [pc, #476]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006ab6:	f043 0301 	orr.w	r3, r3, #1
 8006aba:	6713      	str	r3, [r2, #112]	; 0x70
 8006abc:	e00b      	b.n	8006ad6 <HAL_RCC_OscConfig+0x32a>
 8006abe:	4b75      	ldr	r3, [pc, #468]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac2:	4a74      	ldr	r2, [pc, #464]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006ac4:	f023 0301 	bic.w	r3, r3, #1
 8006ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aca:	4b72      	ldr	r3, [pc, #456]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ace:	4a71      	ldr	r2, [pc, #452]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006ad0:	f023 0304 	bic.w	r3, r3, #4
 8006ad4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d015      	beq.n	8006b0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ade:	f7fc f859 	bl	8002b94 <HAL_GetTick>
 8006ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae4:	e00a      	b.n	8006afc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ae6:	f7fc f855 	bl	8002b94 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e0c5      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006afc:	4b65      	ldr	r3, [pc, #404]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0ee      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x33a>
 8006b08:	e014      	b.n	8006b34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b0a:	f7fc f843 	bl	8002b94 <HAL_GetTick>
 8006b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b10:	e00a      	b.n	8006b28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b12:	f7fc f83f 	bl	8002b94 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e0af      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b28:	4b5a      	ldr	r3, [pc, #360]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1ee      	bne.n	8006b12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d105      	bne.n	8006b46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b3a:	4b56      	ldr	r3, [pc, #344]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	4a55      	ldr	r2, [pc, #340]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 809b 	beq.w	8006c86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b50:	4b50      	ldr	r3, [pc, #320]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 030c 	and.w	r3, r3, #12
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d05c      	beq.n	8006c16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d141      	bne.n	8006be8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b64:	4b4c      	ldr	r3, [pc, #304]	; (8006c98 <HAL_RCC_OscConfig+0x4ec>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b6a:	f7fc f813 	bl	8002b94 <HAL_GetTick>
 8006b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b70:	e008      	b.n	8006b84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b72:	f7fc f80f 	bl	8002b94 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e081      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b84:	4b43      	ldr	r3, [pc, #268]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1f0      	bne.n	8006b72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	69da      	ldr	r2, [r3, #28]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	019b      	lsls	r3, r3, #6
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba6:	085b      	lsrs	r3, r3, #1
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	041b      	lsls	r3, r3, #16
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb2:	061b      	lsls	r3, r3, #24
 8006bb4:	4937      	ldr	r1, [pc, #220]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bba:	4b37      	ldr	r3, [pc, #220]	; (8006c98 <HAL_RCC_OscConfig+0x4ec>)
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc0:	f7fb ffe8 	bl	8002b94 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc8:	f7fb ffe4 	bl	8002b94 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e056      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bda:	4b2e      	ldr	r3, [pc, #184]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0f0      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x41c>
 8006be6:	e04e      	b.n	8006c86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006be8:	4b2b      	ldr	r3, [pc, #172]	; (8006c98 <HAL_RCC_OscConfig+0x4ec>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bee:	f7fb ffd1 	bl	8002b94 <HAL_GetTick>
 8006bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf4:	e008      	b.n	8006c08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bf6:	f7fb ffcd 	bl	8002b94 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e03f      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c08:	4b22      	ldr	r3, [pc, #136]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1f0      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x44a>
 8006c14:	e037      	b.n	8006c86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e032      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c22:	4b1c      	ldr	r3, [pc, #112]	; (8006c94 <HAL_RCC_OscConfig+0x4e8>)
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d028      	beq.n	8006c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d121      	bne.n	8006c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d11a      	bne.n	8006c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c52:	4013      	ands	r3, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d111      	bne.n	8006c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	085b      	lsrs	r3, r3, #1
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d107      	bne.n	8006c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d001      	beq.n	8006c86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40007000 	.word	0x40007000
 8006c94:	40023800 	.word	0x40023800
 8006c98:	42470060 	.word	0x42470060

08006c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e0cc      	b.n	8006e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cb0:	4b68      	ldr	r3, [pc, #416]	; (8006e54 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d90c      	bls.n	8006cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cbe:	4b65      	ldr	r3, [pc, #404]	; (8006e54 <HAL_RCC_ClockConfig+0x1b8>)
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cc6:	4b63      	ldr	r3, [pc, #396]	; (8006e54 <HAL_RCC_ClockConfig+0x1b8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 030f 	and.w	r3, r3, #15
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d001      	beq.n	8006cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e0b8      	b.n	8006e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d020      	beq.n	8006d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d005      	beq.n	8006cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cf0:	4b59      	ldr	r3, [pc, #356]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	4a58      	ldr	r2, [pc, #352]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0308 	and.w	r3, r3, #8
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d005      	beq.n	8006d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d08:	4b53      	ldr	r3, [pc, #332]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	4a52      	ldr	r2, [pc, #328]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d14:	4b50      	ldr	r3, [pc, #320]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	494d      	ldr	r1, [pc, #308]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d044      	beq.n	8006dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d107      	bne.n	8006d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d3a:	4b47      	ldr	r3, [pc, #284]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d119      	bne.n	8006d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e07f      	b.n	8006e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d003      	beq.n	8006d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d107      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d5a:	4b3f      	ldr	r3, [pc, #252]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d109      	bne.n	8006d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e06f      	b.n	8006e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d6a:	4b3b      	ldr	r3, [pc, #236]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e067      	b.n	8006e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d7a:	4b37      	ldr	r3, [pc, #220]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f023 0203 	bic.w	r2, r3, #3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	4934      	ldr	r1, [pc, #208]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d8c:	f7fb ff02 	bl	8002b94 <HAL_GetTick>
 8006d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d92:	e00a      	b.n	8006daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d94:	f7fb fefe 	bl	8002b94 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e04f      	b.n	8006e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006daa:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 020c 	and.w	r2, r3, #12
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d1eb      	bne.n	8006d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dbc:	4b25      	ldr	r3, [pc, #148]	; (8006e54 <HAL_RCC_ClockConfig+0x1b8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 030f 	and.w	r3, r3, #15
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d20c      	bcs.n	8006de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dca:	4b22      	ldr	r3, [pc, #136]	; (8006e54 <HAL_RCC_ClockConfig+0x1b8>)
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	b2d2      	uxtb	r2, r2
 8006dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dd2:	4b20      	ldr	r3, [pc, #128]	; (8006e54 <HAL_RCC_ClockConfig+0x1b8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 030f 	and.w	r3, r3, #15
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d001      	beq.n	8006de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e032      	b.n	8006e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d008      	beq.n	8006e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006df0:	4b19      	ldr	r3, [pc, #100]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	4916      	ldr	r1, [pc, #88]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e0e:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	490e      	ldr	r1, [pc, #56]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e22:	f000 f821 	bl	8006e68 <HAL_RCC_GetSysClockFreq>
 8006e26:	4602      	mov	r2, r0
 8006e28:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	091b      	lsrs	r3, r3, #4
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	490a      	ldr	r1, [pc, #40]	; (8006e5c <HAL_RCC_ClockConfig+0x1c0>)
 8006e34:	5ccb      	ldrb	r3, [r1, r3]
 8006e36:	fa22 f303 	lsr.w	r3, r2, r3
 8006e3a:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <HAL_RCC_ClockConfig+0x1c4>)
 8006e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e3e:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <HAL_RCC_ClockConfig+0x1c8>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fb fcd6 	bl	80027f4 <HAL_InitTick>

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	40023c00 	.word	0x40023c00
 8006e58:	40023800 	.word	0x40023800
 8006e5c:	08012d4c 	.word	0x08012d4c
 8006e60:	20000010 	.word	0x20000010
 8006e64:	20000014 	.word	0x20000014

08006e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	607b      	str	r3, [r7, #4]
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e80:	4b67      	ldr	r3, [pc, #412]	; (8007020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 030c 	and.w	r3, r3, #12
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d00d      	beq.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x40>
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	f200 80bd 	bhi.w	800700c <HAL_RCC_GetSysClockFreq+0x1a4>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <HAL_RCC_GetSysClockFreq+0x34>
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d003      	beq.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e9a:	e0b7      	b.n	800700c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e9c:	4b61      	ldr	r3, [pc, #388]	; (8007024 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e9e:	60bb      	str	r3, [r7, #8]
       break;
 8006ea0:	e0b7      	b.n	8007012 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ea2:	4b61      	ldr	r3, [pc, #388]	; (8007028 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006ea4:	60bb      	str	r3, [r7, #8]
      break;
 8006ea6:	e0b4      	b.n	8007012 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ea8:	4b5d      	ldr	r3, [pc, #372]	; (8007020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006eb2:	4b5b      	ldr	r3, [pc, #364]	; (8007020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d04d      	beq.n	8006f5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ebe:	4b58      	ldr	r3, [pc, #352]	; (8007020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	099b      	lsrs	r3, r3, #6
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ece:	f04f 0100 	mov.w	r1, #0
 8006ed2:	ea02 0800 	and.w	r8, r2, r0
 8006ed6:	ea03 0901 	and.w	r9, r3, r1
 8006eda:	4640      	mov	r0, r8
 8006edc:	4649      	mov	r1, r9
 8006ede:	f04f 0200 	mov.w	r2, #0
 8006ee2:	f04f 0300 	mov.w	r3, #0
 8006ee6:	014b      	lsls	r3, r1, #5
 8006ee8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006eec:	0142      	lsls	r2, r0, #5
 8006eee:	4610      	mov	r0, r2
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	ebb0 0008 	subs.w	r0, r0, r8
 8006ef6:	eb61 0109 	sbc.w	r1, r1, r9
 8006efa:	f04f 0200 	mov.w	r2, #0
 8006efe:	f04f 0300 	mov.w	r3, #0
 8006f02:	018b      	lsls	r3, r1, #6
 8006f04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f08:	0182      	lsls	r2, r0, #6
 8006f0a:	1a12      	subs	r2, r2, r0
 8006f0c:	eb63 0301 	sbc.w	r3, r3, r1
 8006f10:	f04f 0000 	mov.w	r0, #0
 8006f14:	f04f 0100 	mov.w	r1, #0
 8006f18:	00d9      	lsls	r1, r3, #3
 8006f1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f1e:	00d0      	lsls	r0, r2, #3
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	eb12 0208 	adds.w	r2, r2, r8
 8006f28:	eb43 0309 	adc.w	r3, r3, r9
 8006f2c:	f04f 0000 	mov.w	r0, #0
 8006f30:	f04f 0100 	mov.w	r1, #0
 8006f34:	0259      	lsls	r1, r3, #9
 8006f36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006f3a:	0250      	lsls	r0, r2, #9
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4610      	mov	r0, r2
 8006f42:	4619      	mov	r1, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	461a      	mov	r2, r3
 8006f48:	f04f 0300 	mov.w	r3, #0
 8006f4c:	f7f9 fe3c 	bl	8000bc8 <__aeabi_uldivmod>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4613      	mov	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	e04a      	b.n	8006ff0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f5a:	4b31      	ldr	r3, [pc, #196]	; (8007020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	099b      	lsrs	r3, r3, #6
 8006f60:	461a      	mov	r2, r3
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f6a:	f04f 0100 	mov.w	r1, #0
 8006f6e:	ea02 0400 	and.w	r4, r2, r0
 8006f72:	ea03 0501 	and.w	r5, r3, r1
 8006f76:	4620      	mov	r0, r4
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	014b      	lsls	r3, r1, #5
 8006f84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f88:	0142      	lsls	r2, r0, #5
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	1b00      	subs	r0, r0, r4
 8006f90:	eb61 0105 	sbc.w	r1, r1, r5
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	018b      	lsls	r3, r1, #6
 8006f9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006fa2:	0182      	lsls	r2, r0, #6
 8006fa4:	1a12      	subs	r2, r2, r0
 8006fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8006faa:	f04f 0000 	mov.w	r0, #0
 8006fae:	f04f 0100 	mov.w	r1, #0
 8006fb2:	00d9      	lsls	r1, r3, #3
 8006fb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fb8:	00d0      	lsls	r0, r2, #3
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	1912      	adds	r2, r2, r4
 8006fc0:	eb45 0303 	adc.w	r3, r5, r3
 8006fc4:	f04f 0000 	mov.w	r0, #0
 8006fc8:	f04f 0100 	mov.w	r1, #0
 8006fcc:	0299      	lsls	r1, r3, #10
 8006fce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006fd2:	0290      	lsls	r0, r2, #10
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4619      	mov	r1, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f04f 0300 	mov.w	r3, #0
 8006fe4:	f7f9 fdf0 	bl	8000bc8 <__aeabi_uldivmod>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4613      	mov	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	0c1b      	lsrs	r3, r3, #16
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	fbb2 f3f3 	udiv	r3, r2, r3
 8007008:	60bb      	str	r3, [r7, #8]
      break;
 800700a:	e002      	b.n	8007012 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800700c:	4b05      	ldr	r3, [pc, #20]	; (8007024 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800700e:	60bb      	str	r3, [r7, #8]
      break;
 8007010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007012:	68bb      	ldr	r3, [r7, #8]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800701e:	bf00      	nop
 8007020:	40023800 	.word	0x40023800
 8007024:	00f42400 	.word	0x00f42400
 8007028:	007a1200 	.word	0x007a1200

0800702c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007030:	4b03      	ldr	r3, [pc, #12]	; (8007040 <HAL_RCC_GetHCLKFreq+0x14>)
 8007032:	681b      	ldr	r3, [r3, #0]
}
 8007034:	4618      	mov	r0, r3
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	20000010 	.word	0x20000010

08007044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007048:	f7ff fff0 	bl	800702c <HAL_RCC_GetHCLKFreq>
 800704c:	4602      	mov	r2, r0
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	0a9b      	lsrs	r3, r3, #10
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	4903      	ldr	r1, [pc, #12]	; (8007068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800705a:	5ccb      	ldrb	r3, [r1, r3]
 800705c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007060:	4618      	mov	r0, r3
 8007062:	bd80      	pop	{r7, pc}
 8007064:	40023800 	.word	0x40023800
 8007068:	08012d5c 	.word	0x08012d5c

0800706c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007070:	f7ff ffdc 	bl	800702c <HAL_RCC_GetHCLKFreq>
 8007074:	4602      	mov	r2, r0
 8007076:	4b05      	ldr	r3, [pc, #20]	; (800708c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	0b5b      	lsrs	r3, r3, #13
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	4903      	ldr	r1, [pc, #12]	; (8007090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007082:	5ccb      	ldrb	r3, [r1, r3]
 8007084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007088:	4618      	mov	r0, r3
 800708a:	bd80      	pop	{r7, pc}
 800708c:	40023800 	.word	0x40023800
 8007090:	08012d5c 	.word	0x08012d5c

08007094 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	220f      	movs	r2, #15
 80070a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070a4:	4b12      	ldr	r3, [pc, #72]	; (80070f0 <HAL_RCC_GetClockConfig+0x5c>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0203 	and.w	r2, r3, #3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80070b0:	4b0f      	ldr	r3, [pc, #60]	; (80070f0 <HAL_RCC_GetClockConfig+0x5c>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80070bc:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <HAL_RCC_GetClockConfig+0x5c>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80070c8:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <HAL_RCC_GetClockConfig+0x5c>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	08db      	lsrs	r3, r3, #3
 80070ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070d6:	4b07      	ldr	r3, [pc, #28]	; (80070f4 <HAL_RCC_GetClockConfig+0x60>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 020f 	and.w	r2, r3, #15
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	601a      	str	r2, [r3, #0]
}
 80070e2:	bf00      	nop
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	40023800 	.word	0x40023800
 80070f4:	40023c00 	.word	0x40023c00

080070f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007104:	2300      	movs	r3, #0
 8007106:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10b      	bne.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800711c:	2b00      	cmp	r3, #0
 800711e:	d105      	bne.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007128:	2b00      	cmp	r3, #0
 800712a:	d075      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800712c:	4bad      	ldr	r3, [pc, #692]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007132:	f7fb fd2f 	bl	8002b94 <HAL_GetTick>
 8007136:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007138:	e008      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800713a:	f7fb fd2b 	bl	8002b94 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b02      	cmp	r3, #2
 8007146:	d901      	bls.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e18b      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800714c:	4ba6      	ldr	r3, [pc, #664]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1f0      	bne.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b00      	cmp	r3, #0
 8007162:	d009      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	019a      	lsls	r2, r3, #6
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	071b      	lsls	r3, r3, #28
 8007170:	499d      	ldr	r1, [pc, #628]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007172:	4313      	orrs	r3, r2
 8007174:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d01f      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007184:	4b98      	ldr	r3, [pc, #608]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800718a:	0f1b      	lsrs	r3, r3, #28
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	019a      	lsls	r2, r3, #6
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	061b      	lsls	r3, r3, #24
 800719e:	431a      	orrs	r2, r3
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	071b      	lsls	r3, r3, #28
 80071a4:	4990      	ldr	r1, [pc, #576]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80071ac:	4b8e      	ldr	r3, [pc, #568]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b2:	f023 021f 	bic.w	r2, r3, #31
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	498a      	ldr	r1, [pc, #552]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00d      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	019a      	lsls	r2, r3, #6
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	061b      	lsls	r3, r3, #24
 80071dc:	431a      	orrs	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	071b      	lsls	r3, r3, #28
 80071e4:	4980      	ldr	r1, [pc, #512]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071ec:	4b7d      	ldr	r3, [pc, #500]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071f2:	f7fb fccf 	bl	8002b94 <HAL_GetTick>
 80071f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071f8:	e008      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071fa:	f7fb fccb 	bl	8002b94 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d901      	bls.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e12b      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800720c:	4b76      	ldr	r3, [pc, #472]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0f0      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d105      	bne.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800722c:	2b00      	cmp	r3, #0
 800722e:	d079      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007230:	4b6e      	ldr	r3, [pc, #440]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007236:	f7fb fcad 	bl	8002b94 <HAL_GetTick>
 800723a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800723c:	e008      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800723e:	f7fb fca9 	bl	8002b94 <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	2b02      	cmp	r3, #2
 800724a:	d901      	bls.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e109      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007250:	4b65      	ldr	r3, [pc, #404]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800725c:	d0ef      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0304 	and.w	r3, r3, #4
 8007266:	2b00      	cmp	r3, #0
 8007268:	d020      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800726a:	4b5f      	ldr	r3, [pc, #380]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800726c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007270:	0f1b      	lsrs	r3, r3, #28
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	019a      	lsls	r2, r3, #6
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	061b      	lsls	r3, r3, #24
 8007284:	431a      	orrs	r2, r3
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	071b      	lsls	r3, r3, #28
 800728a:	4957      	ldr	r1, [pc, #348]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800728c:	4313      	orrs	r3, r2
 800728e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007292:	4b55      	ldr	r3, [pc, #340]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007298:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	021b      	lsls	r3, r3, #8
 80072a4:	4950      	ldr	r1, [pc, #320]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0308 	and.w	r3, r3, #8
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01e      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072b8:	4b4b      	ldr	r3, [pc, #300]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072be:	0e1b      	lsrs	r3, r3, #24
 80072c0:	f003 030f 	and.w	r3, r3, #15
 80072c4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	019a      	lsls	r2, r3, #6
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	061b      	lsls	r3, r3, #24
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	071b      	lsls	r3, r3, #28
 80072d8:	4943      	ldr	r1, [pc, #268]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80072e0:	4b41      	ldr	r3, [pc, #260]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	493e      	ldr	r1, [pc, #248]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80072f6:	4b3d      	ldr	r3, [pc, #244]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072f8:	2201      	movs	r2, #1
 80072fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072fc:	f7fb fc4a 	bl	8002b94 <HAL_GetTick>
 8007300:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007302:	e008      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007304:	f7fb fc46 	bl	8002b94 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b02      	cmp	r3, #2
 8007310:	d901      	bls.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e0a6      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007316:	4b34      	ldr	r3, [pc, #208]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800731e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007322:	d1ef      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0320 	and.w	r3, r3, #32
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 808d 	beq.w	800744c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007332:	2300      	movs	r3, #0
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	4b2c      	ldr	r3, [pc, #176]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	4a2b      	ldr	r2, [pc, #172]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800733c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007340:	6413      	str	r3, [r2, #64]	; 0x40
 8007342:	4b29      	ldr	r3, [pc, #164]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800734e:	4b28      	ldr	r3, [pc, #160]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a27      	ldr	r2, [pc, #156]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007358:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800735a:	f7fb fc1b 	bl	8002b94 <HAL_GetTick>
 800735e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007360:	e008      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007362:	f7fb fc17 	bl	8002b94 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d901      	bls.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e077      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007374:	4b1e      	ldr	r3, [pc, #120]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0f0      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007380:	4b19      	ldr	r3, [pc, #100]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007388:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d039      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	429a      	cmp	r2, r3
 800739c:	d032      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800739e:	4b12      	ldr	r3, [pc, #72]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073a8:	4b12      	ldr	r3, [pc, #72]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80073aa:	2201      	movs	r2, #1
 80073ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073ae:	4b11      	ldr	r3, [pc, #68]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80073b4:	4a0c      	ldr	r2, [pc, #48]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073ba:	4b0b      	ldr	r3, [pc, #44]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d11e      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80073c6:	f7fb fbe5 	bl	8002b94 <HAL_GetTick>
 80073ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073cc:	e014      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073ce:	f7fb fbe1 	bl	8002b94 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073dc:	4293      	cmp	r3, r2
 80073de:	d90b      	bls.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e03f      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80073e4:	42470068 	.word	0x42470068
 80073e8:	40023800 	.word	0x40023800
 80073ec:	42470070 	.word	0x42470070
 80073f0:	40007000 	.word	0x40007000
 80073f4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f8:	4b1c      	ldr	r3, [pc, #112]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d0e4      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800740c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007410:	d10d      	bne.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007412:	4b16      	ldr	r3, [pc, #88]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007426:	4911      	ldr	r1, [pc, #68]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007428:	4313      	orrs	r3, r2
 800742a:	608b      	str	r3, [r1, #8]
 800742c:	e005      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800742e:	4b0f      	ldr	r3, [pc, #60]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	4a0e      	ldr	r2, [pc, #56]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007434:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007438:	6093      	str	r3, [r2, #8]
 800743a:	4b0c      	ldr	r3, [pc, #48]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800743c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007446:	4909      	ldr	r1, [pc, #36]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007448:	4313      	orrs	r3, r2
 800744a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b00      	cmp	r3, #0
 8007456:	d004      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800745e:	4b04      	ldr	r3, [pc, #16]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007460:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	40023800 	.word	0x40023800
 8007470:	424711e0 	.word	0x424711e0

08007474 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e025      	b.n	80074d4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	d106      	bne.n	80074a2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7fb f99f 	bl	80027e0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2202      	movs	r2, #2
 80074a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3304      	adds	r3, #4
 80074b2:	4619      	mov	r1, r3
 80074b4:	4610      	mov	r0, r2
 80074b6:	f001 f831 	bl	800851c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6818      	ldr	r0, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	461a      	mov	r2, r3
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	f001 f89c 	bl	8008602 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e07b      	b.n	80075e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d108      	bne.n	8007508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074fe:	d009      	beq.n	8007514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	61da      	str	r2, [r3, #28]
 8007506:	e005      	b.n	8007514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d106      	bne.n	8007534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fb f812 	bl	8002558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800754a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800755c:	431a      	orrs	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007584:	431a      	orrs	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800758e:	431a      	orrs	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007598:	ea42 0103 	orr.w	r1, r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	0c1b      	lsrs	r3, r3, #16
 80075b2:	f003 0104 	and.w	r1, r3, #4
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	f003 0210 	and.w	r2, r3, #16
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69da      	ldr	r2, [r3, #28]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e041      	b.n	8007684 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	d106      	bne.n	800761a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7fa ffe7 	bl	80025e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2202      	movs	r2, #2
 800761e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3304      	adds	r3, #4
 800762a:	4619      	mov	r1, r3
 800762c:	4610      	mov	r0, r2
 800762e:	f000 fa95 	bl	8007b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b01      	cmp	r3, #1
 800769e:	d001      	beq.n	80076a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e04e      	b.n	8007742 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68da      	ldr	r2, [r3, #12]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0201 	orr.w	r2, r2, #1
 80076ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a23      	ldr	r2, [pc, #140]	; (8007750 <HAL_TIM_Base_Start_IT+0xc4>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d022      	beq.n	800770c <HAL_TIM_Base_Start_IT+0x80>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ce:	d01d      	beq.n	800770c <HAL_TIM_Base_Start_IT+0x80>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1f      	ldr	r2, [pc, #124]	; (8007754 <HAL_TIM_Base_Start_IT+0xc8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d018      	beq.n	800770c <HAL_TIM_Base_Start_IT+0x80>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1e      	ldr	r2, [pc, #120]	; (8007758 <HAL_TIM_Base_Start_IT+0xcc>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d013      	beq.n	800770c <HAL_TIM_Base_Start_IT+0x80>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a1c      	ldr	r2, [pc, #112]	; (800775c <HAL_TIM_Base_Start_IT+0xd0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00e      	beq.n	800770c <HAL_TIM_Base_Start_IT+0x80>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a1b      	ldr	r2, [pc, #108]	; (8007760 <HAL_TIM_Base_Start_IT+0xd4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d009      	beq.n	800770c <HAL_TIM_Base_Start_IT+0x80>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a19      	ldr	r2, [pc, #100]	; (8007764 <HAL_TIM_Base_Start_IT+0xd8>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d004      	beq.n	800770c <HAL_TIM_Base_Start_IT+0x80>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a18      	ldr	r2, [pc, #96]	; (8007768 <HAL_TIM_Base_Start_IT+0xdc>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d111      	bne.n	8007730 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b06      	cmp	r3, #6
 800771c:	d010      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f042 0201 	orr.w	r2, r2, #1
 800772c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800772e:	e007      	b.n	8007740 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0201 	orr.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	40010000 	.word	0x40010000
 8007754:	40000400 	.word	0x40000400
 8007758:	40000800 	.word	0x40000800
 800775c:	40000c00 	.word	0x40000c00
 8007760:	40010400 	.word	0x40010400
 8007764:	40014000 	.word	0x40014000
 8007768:	40001800 	.word	0x40001800

0800776c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b02      	cmp	r3, #2
 8007780:	d122      	bne.n	80077c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f003 0302 	and.w	r3, r3, #2
 800778c:	2b02      	cmp	r3, #2
 800778e:	d11b      	bne.n	80077c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f06f 0202 	mvn.w	r2, #2
 8007798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	f003 0303 	and.w	r3, r3, #3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f9b5 	bl	8007b1e <HAL_TIM_IC_CaptureCallback>
 80077b4:	e005      	b.n	80077c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f9a7 	bl	8007b0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f9b8 	bl	8007b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	f003 0304 	and.w	r3, r3, #4
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d122      	bne.n	800781c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b04      	cmp	r3, #4
 80077e2:	d11b      	bne.n	800781c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f06f 0204 	mvn.w	r2, #4
 80077ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2202      	movs	r2, #2
 80077f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f98b 	bl	8007b1e <HAL_TIM_IC_CaptureCallback>
 8007808:	e005      	b.n	8007816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f97d 	bl	8007b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f98e 	bl	8007b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f003 0308 	and.w	r3, r3, #8
 8007826:	2b08      	cmp	r3, #8
 8007828:	d122      	bne.n	8007870 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f003 0308 	and.w	r3, r3, #8
 8007834:	2b08      	cmp	r3, #8
 8007836:	d11b      	bne.n	8007870 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f06f 0208 	mvn.w	r2, #8
 8007840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2204      	movs	r2, #4
 8007846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f961 	bl	8007b1e <HAL_TIM_IC_CaptureCallback>
 800785c:	e005      	b.n	800786a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f953 	bl	8007b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f964 	bl	8007b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	f003 0310 	and.w	r3, r3, #16
 800787a:	2b10      	cmp	r3, #16
 800787c:	d122      	bne.n	80078c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f003 0310 	and.w	r3, r3, #16
 8007888:	2b10      	cmp	r3, #16
 800788a:	d11b      	bne.n	80078c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f06f 0210 	mvn.w	r2, #16
 8007894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2208      	movs	r2, #8
 800789a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f937 	bl	8007b1e <HAL_TIM_IC_CaptureCallback>
 80078b0:	e005      	b.n	80078be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f929 	bl	8007b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f93a 	bl	8007b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d10e      	bne.n	80078f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d107      	bne.n	80078f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f06f 0201 	mvn.w	r2, #1
 80078e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7fa fc0c 	bl	8002108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078fa:	2b80      	cmp	r3, #128	; 0x80
 80078fc:	d10e      	bne.n	800791c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007908:	2b80      	cmp	r3, #128	; 0x80
 800790a:	d107      	bne.n	800791c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fae0 	bl	8007edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007926:	2b40      	cmp	r3, #64	; 0x40
 8007928:	d10e      	bne.n	8007948 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007934:	2b40      	cmp	r3, #64	; 0x40
 8007936:	d107      	bne.n	8007948 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f8ff 	bl	8007b46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	f003 0320 	and.w	r3, r3, #32
 8007952:	2b20      	cmp	r3, #32
 8007954:	d10e      	bne.n	8007974 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f003 0320 	and.w	r3, r3, #32
 8007960:	2b20      	cmp	r3, #32
 8007962:	d107      	bne.n	8007974 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f06f 0220 	mvn.w	r2, #32
 800796c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 faaa 	bl	8007ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007990:	2b01      	cmp	r3, #1
 8007992:	d101      	bne.n	8007998 <HAL_TIM_ConfigClockSource+0x1c>
 8007994:	2302      	movs	r3, #2
 8007996:	e0b4      	b.n	8007b02 <HAL_TIM_ConfigClockSource+0x186>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d0:	d03e      	beq.n	8007a50 <HAL_TIM_ConfigClockSource+0xd4>
 80079d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d6:	f200 8087 	bhi.w	8007ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80079da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079de:	f000 8086 	beq.w	8007aee <HAL_TIM_ConfigClockSource+0x172>
 80079e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e6:	d87f      	bhi.n	8007ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80079e8:	2b70      	cmp	r3, #112	; 0x70
 80079ea:	d01a      	beq.n	8007a22 <HAL_TIM_ConfigClockSource+0xa6>
 80079ec:	2b70      	cmp	r3, #112	; 0x70
 80079ee:	d87b      	bhi.n	8007ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80079f0:	2b60      	cmp	r3, #96	; 0x60
 80079f2:	d050      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0x11a>
 80079f4:	2b60      	cmp	r3, #96	; 0x60
 80079f6:	d877      	bhi.n	8007ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80079f8:	2b50      	cmp	r3, #80	; 0x50
 80079fa:	d03c      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0xfa>
 80079fc:	2b50      	cmp	r3, #80	; 0x50
 80079fe:	d873      	bhi.n	8007ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8007a00:	2b40      	cmp	r3, #64	; 0x40
 8007a02:	d058      	beq.n	8007ab6 <HAL_TIM_ConfigClockSource+0x13a>
 8007a04:	2b40      	cmp	r3, #64	; 0x40
 8007a06:	d86f      	bhi.n	8007ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8007a08:	2b30      	cmp	r3, #48	; 0x30
 8007a0a:	d064      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8007a0c:	2b30      	cmp	r3, #48	; 0x30
 8007a0e:	d86b      	bhi.n	8007ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d060      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8007a14:	2b20      	cmp	r3, #32
 8007a16:	d867      	bhi.n	8007ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d05c      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8007a1c:	2b10      	cmp	r3, #16
 8007a1e:	d05a      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8007a20:	e062      	b.n	8007ae8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6818      	ldr	r0, [r3, #0]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	6899      	ldr	r1, [r3, #8]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f000 f9ad 	bl	8007d90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	609a      	str	r2, [r3, #8]
      break;
 8007a4e:	e04f      	b.n	8007af0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6818      	ldr	r0, [r3, #0]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	6899      	ldr	r1, [r3, #8]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f000 f996 	bl	8007d90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689a      	ldr	r2, [r3, #8]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a72:	609a      	str	r2, [r3, #8]
      break;
 8007a74:	e03c      	b.n	8007af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	6859      	ldr	r1, [r3, #4]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	461a      	mov	r2, r3
 8007a84:	f000 f90a 	bl	8007c9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2150      	movs	r1, #80	; 0x50
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 f963 	bl	8007d5a <TIM_ITRx_SetConfig>
      break;
 8007a94:	e02c      	b.n	8007af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	6859      	ldr	r1, [r3, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f000 f929 	bl	8007cfa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2160      	movs	r1, #96	; 0x60
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 f953 	bl	8007d5a <TIM_ITRx_SetConfig>
      break;
 8007ab4:	e01c      	b.n	8007af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	6859      	ldr	r1, [r3, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f000 f8ea 	bl	8007c9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2140      	movs	r1, #64	; 0x40
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 f943 	bl	8007d5a <TIM_ITRx_SetConfig>
      break;
 8007ad4:	e00c      	b.n	8007af0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	f000 f93a 	bl	8007d5a <TIM_ITRx_SetConfig>
      break;
 8007ae6:	e003      	b.n	8007af0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	73fb      	strb	r3, [r7, #15]
      break;
 8007aec:	e000      	b.n	8007af0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007aee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b46:	b480      	push	{r7}
 8007b48:	b083      	sub	sp, #12
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
	...

08007b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a40      	ldr	r2, [pc, #256]	; (8007c70 <TIM_Base_SetConfig+0x114>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d013      	beq.n	8007b9c <TIM_Base_SetConfig+0x40>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b7a:	d00f      	beq.n	8007b9c <TIM_Base_SetConfig+0x40>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a3d      	ldr	r2, [pc, #244]	; (8007c74 <TIM_Base_SetConfig+0x118>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00b      	beq.n	8007b9c <TIM_Base_SetConfig+0x40>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a3c      	ldr	r2, [pc, #240]	; (8007c78 <TIM_Base_SetConfig+0x11c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d007      	beq.n	8007b9c <TIM_Base_SetConfig+0x40>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a3b      	ldr	r2, [pc, #236]	; (8007c7c <TIM_Base_SetConfig+0x120>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d003      	beq.n	8007b9c <TIM_Base_SetConfig+0x40>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a3a      	ldr	r2, [pc, #232]	; (8007c80 <TIM_Base_SetConfig+0x124>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d108      	bne.n	8007bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a2f      	ldr	r2, [pc, #188]	; (8007c70 <TIM_Base_SetConfig+0x114>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d02b      	beq.n	8007c0e <TIM_Base_SetConfig+0xb2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bbc:	d027      	beq.n	8007c0e <TIM_Base_SetConfig+0xb2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a2c      	ldr	r2, [pc, #176]	; (8007c74 <TIM_Base_SetConfig+0x118>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d023      	beq.n	8007c0e <TIM_Base_SetConfig+0xb2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a2b      	ldr	r2, [pc, #172]	; (8007c78 <TIM_Base_SetConfig+0x11c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d01f      	beq.n	8007c0e <TIM_Base_SetConfig+0xb2>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a2a      	ldr	r2, [pc, #168]	; (8007c7c <TIM_Base_SetConfig+0x120>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d01b      	beq.n	8007c0e <TIM_Base_SetConfig+0xb2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a29      	ldr	r2, [pc, #164]	; (8007c80 <TIM_Base_SetConfig+0x124>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d017      	beq.n	8007c0e <TIM_Base_SetConfig+0xb2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a28      	ldr	r2, [pc, #160]	; (8007c84 <TIM_Base_SetConfig+0x128>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d013      	beq.n	8007c0e <TIM_Base_SetConfig+0xb2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a27      	ldr	r2, [pc, #156]	; (8007c88 <TIM_Base_SetConfig+0x12c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00f      	beq.n	8007c0e <TIM_Base_SetConfig+0xb2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a26      	ldr	r2, [pc, #152]	; (8007c8c <TIM_Base_SetConfig+0x130>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d00b      	beq.n	8007c0e <TIM_Base_SetConfig+0xb2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a25      	ldr	r2, [pc, #148]	; (8007c90 <TIM_Base_SetConfig+0x134>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d007      	beq.n	8007c0e <TIM_Base_SetConfig+0xb2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a24      	ldr	r2, [pc, #144]	; (8007c94 <TIM_Base_SetConfig+0x138>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d003      	beq.n	8007c0e <TIM_Base_SetConfig+0xb2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a23      	ldr	r2, [pc, #140]	; (8007c98 <TIM_Base_SetConfig+0x13c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d108      	bne.n	8007c20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a0a      	ldr	r2, [pc, #40]	; (8007c70 <TIM_Base_SetConfig+0x114>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d003      	beq.n	8007c54 <TIM_Base_SetConfig+0xf8>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a0c      	ldr	r2, [pc, #48]	; (8007c80 <TIM_Base_SetConfig+0x124>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d103      	bne.n	8007c5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	691a      	ldr	r2, [r3, #16]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	615a      	str	r2, [r3, #20]
}
 8007c62:	bf00      	nop
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	40010000 	.word	0x40010000
 8007c74:	40000400 	.word	0x40000400
 8007c78:	40000800 	.word	0x40000800
 8007c7c:	40000c00 	.word	0x40000c00
 8007c80:	40010400 	.word	0x40010400
 8007c84:	40014000 	.word	0x40014000
 8007c88:	40014400 	.word	0x40014400
 8007c8c:	40014800 	.word	0x40014800
 8007c90:	40001800 	.word	0x40001800
 8007c94:	40001c00 	.word	0x40001c00
 8007c98:	40002000 	.word	0x40002000

08007c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	f023 0201 	bic.w	r2, r3, #1
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f023 030a 	bic.w	r3, r3, #10
 8007cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	621a      	str	r2, [r3, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b087      	sub	sp, #28
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	f023 0210 	bic.w	r2, r3, #16
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	031b      	lsls	r3, r3, #12
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	621a      	str	r2, [r3, #32]
}
 8007d4e:	bf00      	nop
 8007d50:	371c      	adds	r7, #28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	f043 0307 	orr.w	r3, r3, #7
 8007d7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	609a      	str	r2, [r3, #8]
}
 8007d84:	bf00      	nop
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007daa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	021a      	lsls	r2, r3, #8
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	431a      	orrs	r2, r3
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	609a      	str	r2, [r3, #8]
}
 8007dc4:	bf00      	nop
 8007dc6:	371c      	adds	r7, #28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d101      	bne.n	8007de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007de4:	2302      	movs	r3, #2
 8007de6:	e05a      	b.n	8007e9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a21      	ldr	r2, [pc, #132]	; (8007eac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d022      	beq.n	8007e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e34:	d01d      	beq.n	8007e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a1d      	ldr	r2, [pc, #116]	; (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d018      	beq.n	8007e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a1b      	ldr	r2, [pc, #108]	; (8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d013      	beq.n	8007e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a1a      	ldr	r2, [pc, #104]	; (8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d00e      	beq.n	8007e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a18      	ldr	r2, [pc, #96]	; (8007ebc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d009      	beq.n	8007e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a17      	ldr	r2, [pc, #92]	; (8007ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d004      	beq.n	8007e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a15      	ldr	r2, [pc, #84]	; (8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d10c      	bne.n	8007e8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	40010000 	.word	0x40010000
 8007eb0:	40000400 	.word	0x40000400
 8007eb4:	40000800 	.word	0x40000800
 8007eb8:	40000c00 	.word	0x40000c00
 8007ebc:	40010400 	.word	0x40010400
 8007ec0:	40014000 	.word	0x40014000
 8007ec4:	40001800 	.word	0x40001800

08007ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e03f      	b.n	8007f82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d106      	bne.n	8007f1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7fa fb88 	bl	800262c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2224      	movs	r2, #36	; 0x24
 8007f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f929 	bl	800818c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	691a      	ldr	r2, [r3, #16]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	695a      	ldr	r2, [r3, #20]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b08a      	sub	sp, #40	; 0x28
 8007f8e:	af02      	add	r7, sp, #8
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	60b9      	str	r1, [r7, #8]
 8007f94:	603b      	str	r3, [r7, #0]
 8007f96:	4613      	mov	r3, r2
 8007f98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b20      	cmp	r3, #32
 8007fa8:	d17c      	bne.n	80080a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <HAL_UART_Transmit+0x2c>
 8007fb0:	88fb      	ldrh	r3, [r7, #6]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e075      	b.n	80080a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d101      	bne.n	8007fc8 <HAL_UART_Transmit+0x3e>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	e06e      	b.n	80080a6 <HAL_UART_Transmit+0x11c>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2221      	movs	r2, #33	; 0x21
 8007fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fde:	f7fa fdd9 	bl	8002b94 <HAL_GetTick>
 8007fe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	88fa      	ldrh	r2, [r7, #6]
 8007fe8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	88fa      	ldrh	r2, [r7, #6]
 8007fee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff8:	d108      	bne.n	800800c <HAL_UART_Transmit+0x82>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d104      	bne.n	800800c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008002:	2300      	movs	r3, #0
 8008004:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	61bb      	str	r3, [r7, #24]
 800800a:	e003      	b.n	8008014 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008010:	2300      	movs	r3, #0
 8008012:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800801c:	e02a      	b.n	8008074 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2200      	movs	r2, #0
 8008026:	2180      	movs	r1, #128	; 0x80
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f840 	bl	80080ae <UART_WaitOnFlagUntilTimeout>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e036      	b.n	80080a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10b      	bne.n	8008056 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800804c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	3302      	adds	r3, #2
 8008052:	61bb      	str	r3, [r7, #24]
 8008054:	e007      	b.n	8008066 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	781a      	ldrb	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	3301      	adds	r3, #1
 8008064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800806a:	b29b      	uxth	r3, r3
 800806c:	3b01      	subs	r3, #1
 800806e:	b29a      	uxth	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008078:	b29b      	uxth	r3, r3
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1cf      	bne.n	800801e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2200      	movs	r2, #0
 8008086:	2140      	movs	r1, #64	; 0x40
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 f810 	bl	80080ae <UART_WaitOnFlagUntilTimeout>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e006      	b.n	80080a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2220      	movs	r2, #32
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	e000      	b.n	80080a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080a4:	2302      	movs	r3, #2
  }
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3720      	adds	r7, #32
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b090      	sub	sp, #64	; 0x40
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	603b      	str	r3, [r7, #0]
 80080ba:	4613      	mov	r3, r2
 80080bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080be:	e050      	b.n	8008162 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c6:	d04c      	beq.n	8008162 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d007      	beq.n	80080de <UART_WaitOnFlagUntilTimeout+0x30>
 80080ce:	f7fa fd61 	bl	8002b94 <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080da:	429a      	cmp	r2, r3
 80080dc:	d241      	bcs.n	8008162 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	330c      	adds	r3, #12
 80080e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	330c      	adds	r3, #12
 80080fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080fe:	637a      	str	r2, [r7, #52]	; 0x34
 8008100:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e5      	bne.n	80080de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3314      	adds	r3, #20
 8008118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	613b      	str	r3, [r7, #16]
   return(result);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f023 0301 	bic.w	r3, r3, #1
 8008128:	63bb      	str	r3, [r7, #56]	; 0x38
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3314      	adds	r3, #20
 8008130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008132:	623a      	str	r2, [r7, #32]
 8008134:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	69f9      	ldr	r1, [r7, #28]
 8008138:	6a3a      	ldr	r2, [r7, #32]
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e5      	bne.n	8008112 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2220      	movs	r2, #32
 800814a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2220      	movs	r2, #32
 8008152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e00f      	b.n	8008182 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4013      	ands	r3, r2
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	429a      	cmp	r2, r3
 8008170:	bf0c      	ite	eq
 8008172:	2301      	moveq	r3, #1
 8008174:	2300      	movne	r3, #0
 8008176:	b2db      	uxtb	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	79fb      	ldrb	r3, [r7, #7]
 800817c:	429a      	cmp	r2, r3
 800817e:	d09f      	beq.n	80080c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3740      	adds	r7, #64	; 0x40
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008190:	b09f      	sub	sp, #124	; 0x7c
 8008192:	af00      	add	r7, sp, #0
 8008194:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a2:	68d9      	ldr	r1, [r3, #12]
 80081a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	ea40 0301 	orr.w	r3, r0, r1
 80081ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	431a      	orrs	r2, r3
 80081b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	431a      	orrs	r2, r3
 80081be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80081c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80081d0:	f021 010c 	bic.w	r1, r1, #12
 80081d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081da:	430b      	orrs	r3, r1
 80081dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80081e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ea:	6999      	ldr	r1, [r3, #24]
 80081ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	ea40 0301 	orr.w	r3, r0, r1
 80081f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	4bc5      	ldr	r3, [pc, #788]	; (8008510 <UART_SetConfig+0x384>)
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d004      	beq.n	800820a <UART_SetConfig+0x7e>
 8008200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	4bc3      	ldr	r3, [pc, #780]	; (8008514 <UART_SetConfig+0x388>)
 8008206:	429a      	cmp	r2, r3
 8008208:	d103      	bne.n	8008212 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800820a:	f7fe ff2f 	bl	800706c <HAL_RCC_GetPCLK2Freq>
 800820e:	6778      	str	r0, [r7, #116]	; 0x74
 8008210:	e002      	b.n	8008218 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008212:	f7fe ff17 	bl	8007044 <HAL_RCC_GetPCLK1Freq>
 8008216:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800821a:	69db      	ldr	r3, [r3, #28]
 800821c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008220:	f040 80b6 	bne.w	8008390 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008226:	461c      	mov	r4, r3
 8008228:	f04f 0500 	mov.w	r5, #0
 800822c:	4622      	mov	r2, r4
 800822e:	462b      	mov	r3, r5
 8008230:	1891      	adds	r1, r2, r2
 8008232:	6439      	str	r1, [r7, #64]	; 0x40
 8008234:	415b      	adcs	r3, r3
 8008236:	647b      	str	r3, [r7, #68]	; 0x44
 8008238:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800823c:	1912      	adds	r2, r2, r4
 800823e:	eb45 0303 	adc.w	r3, r5, r3
 8008242:	f04f 0000 	mov.w	r0, #0
 8008246:	f04f 0100 	mov.w	r1, #0
 800824a:	00d9      	lsls	r1, r3, #3
 800824c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008250:	00d0      	lsls	r0, r2, #3
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	1911      	adds	r1, r2, r4
 8008258:	6639      	str	r1, [r7, #96]	; 0x60
 800825a:	416b      	adcs	r3, r5
 800825c:	667b      	str	r3, [r7, #100]	; 0x64
 800825e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	461a      	mov	r2, r3
 8008264:	f04f 0300 	mov.w	r3, #0
 8008268:	1891      	adds	r1, r2, r2
 800826a:	63b9      	str	r1, [r7, #56]	; 0x38
 800826c:	415b      	adcs	r3, r3
 800826e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008274:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008278:	f7f8 fca6 	bl	8000bc8 <__aeabi_uldivmod>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4ba5      	ldr	r3, [pc, #660]	; (8008518 <UART_SetConfig+0x38c>)
 8008282:	fba3 2302 	umull	r2, r3, r3, r2
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	011e      	lsls	r6, r3, #4
 800828a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800828c:	461c      	mov	r4, r3
 800828e:	f04f 0500 	mov.w	r5, #0
 8008292:	4622      	mov	r2, r4
 8008294:	462b      	mov	r3, r5
 8008296:	1891      	adds	r1, r2, r2
 8008298:	6339      	str	r1, [r7, #48]	; 0x30
 800829a:	415b      	adcs	r3, r3
 800829c:	637b      	str	r3, [r7, #52]	; 0x34
 800829e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80082a2:	1912      	adds	r2, r2, r4
 80082a4:	eb45 0303 	adc.w	r3, r5, r3
 80082a8:	f04f 0000 	mov.w	r0, #0
 80082ac:	f04f 0100 	mov.w	r1, #0
 80082b0:	00d9      	lsls	r1, r3, #3
 80082b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082b6:	00d0      	lsls	r0, r2, #3
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	1911      	adds	r1, r2, r4
 80082be:	65b9      	str	r1, [r7, #88]	; 0x58
 80082c0:	416b      	adcs	r3, r5
 80082c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	461a      	mov	r2, r3
 80082ca:	f04f 0300 	mov.w	r3, #0
 80082ce:	1891      	adds	r1, r2, r2
 80082d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80082d2:	415b      	adcs	r3, r3
 80082d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80082de:	f7f8 fc73 	bl	8000bc8 <__aeabi_uldivmod>
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	4b8c      	ldr	r3, [pc, #560]	; (8008518 <UART_SetConfig+0x38c>)
 80082e8:	fba3 1302 	umull	r1, r3, r3, r2
 80082ec:	095b      	lsrs	r3, r3, #5
 80082ee:	2164      	movs	r1, #100	; 0x64
 80082f0:	fb01 f303 	mul.w	r3, r1, r3
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	00db      	lsls	r3, r3, #3
 80082f8:	3332      	adds	r3, #50	; 0x32
 80082fa:	4a87      	ldr	r2, [pc, #540]	; (8008518 <UART_SetConfig+0x38c>)
 80082fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008300:	095b      	lsrs	r3, r3, #5
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008308:	441e      	add	r6, r3
 800830a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800830c:	4618      	mov	r0, r3
 800830e:	f04f 0100 	mov.w	r1, #0
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	1894      	adds	r4, r2, r2
 8008318:	623c      	str	r4, [r7, #32]
 800831a:	415b      	adcs	r3, r3
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
 800831e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008322:	1812      	adds	r2, r2, r0
 8008324:	eb41 0303 	adc.w	r3, r1, r3
 8008328:	f04f 0400 	mov.w	r4, #0
 800832c:	f04f 0500 	mov.w	r5, #0
 8008330:	00dd      	lsls	r5, r3, #3
 8008332:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008336:	00d4      	lsls	r4, r2, #3
 8008338:	4622      	mov	r2, r4
 800833a:	462b      	mov	r3, r5
 800833c:	1814      	adds	r4, r2, r0
 800833e:	653c      	str	r4, [r7, #80]	; 0x50
 8008340:	414b      	adcs	r3, r1
 8008342:	657b      	str	r3, [r7, #84]	; 0x54
 8008344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	461a      	mov	r2, r3
 800834a:	f04f 0300 	mov.w	r3, #0
 800834e:	1891      	adds	r1, r2, r2
 8008350:	61b9      	str	r1, [r7, #24]
 8008352:	415b      	adcs	r3, r3
 8008354:	61fb      	str	r3, [r7, #28]
 8008356:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800835a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800835e:	f7f8 fc33 	bl	8000bc8 <__aeabi_uldivmod>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4b6c      	ldr	r3, [pc, #432]	; (8008518 <UART_SetConfig+0x38c>)
 8008368:	fba3 1302 	umull	r1, r3, r3, r2
 800836c:	095b      	lsrs	r3, r3, #5
 800836e:	2164      	movs	r1, #100	; 0x64
 8008370:	fb01 f303 	mul.w	r3, r1, r3
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	3332      	adds	r3, #50	; 0x32
 800837a:	4a67      	ldr	r2, [pc, #412]	; (8008518 <UART_SetConfig+0x38c>)
 800837c:	fba2 2303 	umull	r2, r3, r2, r3
 8008380:	095b      	lsrs	r3, r3, #5
 8008382:	f003 0207 	and.w	r2, r3, #7
 8008386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4432      	add	r2, r6
 800838c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800838e:	e0b9      	b.n	8008504 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008392:	461c      	mov	r4, r3
 8008394:	f04f 0500 	mov.w	r5, #0
 8008398:	4622      	mov	r2, r4
 800839a:	462b      	mov	r3, r5
 800839c:	1891      	adds	r1, r2, r2
 800839e:	6139      	str	r1, [r7, #16]
 80083a0:	415b      	adcs	r3, r3
 80083a2:	617b      	str	r3, [r7, #20]
 80083a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80083a8:	1912      	adds	r2, r2, r4
 80083aa:	eb45 0303 	adc.w	r3, r5, r3
 80083ae:	f04f 0000 	mov.w	r0, #0
 80083b2:	f04f 0100 	mov.w	r1, #0
 80083b6:	00d9      	lsls	r1, r3, #3
 80083b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083bc:	00d0      	lsls	r0, r2, #3
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	eb12 0804 	adds.w	r8, r2, r4
 80083c6:	eb43 0905 	adc.w	r9, r3, r5
 80083ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f04f 0100 	mov.w	r1, #0
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	f04f 0300 	mov.w	r3, #0
 80083dc:	008b      	lsls	r3, r1, #2
 80083de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083e2:	0082      	lsls	r2, r0, #2
 80083e4:	4640      	mov	r0, r8
 80083e6:	4649      	mov	r1, r9
 80083e8:	f7f8 fbee 	bl	8000bc8 <__aeabi_uldivmod>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	4b49      	ldr	r3, [pc, #292]	; (8008518 <UART_SetConfig+0x38c>)
 80083f2:	fba3 2302 	umull	r2, r3, r3, r2
 80083f6:	095b      	lsrs	r3, r3, #5
 80083f8:	011e      	lsls	r6, r3, #4
 80083fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083fc:	4618      	mov	r0, r3
 80083fe:	f04f 0100 	mov.w	r1, #0
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	1894      	adds	r4, r2, r2
 8008408:	60bc      	str	r4, [r7, #8]
 800840a:	415b      	adcs	r3, r3
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008412:	1812      	adds	r2, r2, r0
 8008414:	eb41 0303 	adc.w	r3, r1, r3
 8008418:	f04f 0400 	mov.w	r4, #0
 800841c:	f04f 0500 	mov.w	r5, #0
 8008420:	00dd      	lsls	r5, r3, #3
 8008422:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008426:	00d4      	lsls	r4, r2, #3
 8008428:	4622      	mov	r2, r4
 800842a:	462b      	mov	r3, r5
 800842c:	1814      	adds	r4, r2, r0
 800842e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008430:	414b      	adcs	r3, r1
 8008432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	4618      	mov	r0, r3
 800843a:	f04f 0100 	mov.w	r1, #0
 800843e:	f04f 0200 	mov.w	r2, #0
 8008442:	f04f 0300 	mov.w	r3, #0
 8008446:	008b      	lsls	r3, r1, #2
 8008448:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800844c:	0082      	lsls	r2, r0, #2
 800844e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008452:	f7f8 fbb9 	bl	8000bc8 <__aeabi_uldivmod>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4b2f      	ldr	r3, [pc, #188]	; (8008518 <UART_SetConfig+0x38c>)
 800845c:	fba3 1302 	umull	r1, r3, r3, r2
 8008460:	095b      	lsrs	r3, r3, #5
 8008462:	2164      	movs	r1, #100	; 0x64
 8008464:	fb01 f303 	mul.w	r3, r1, r3
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	011b      	lsls	r3, r3, #4
 800846c:	3332      	adds	r3, #50	; 0x32
 800846e:	4a2a      	ldr	r2, [pc, #168]	; (8008518 <UART_SetConfig+0x38c>)
 8008470:	fba2 2303 	umull	r2, r3, r2, r3
 8008474:	095b      	lsrs	r3, r3, #5
 8008476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800847a:	441e      	add	r6, r3
 800847c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800847e:	4618      	mov	r0, r3
 8008480:	f04f 0100 	mov.w	r1, #0
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	1894      	adds	r4, r2, r2
 800848a:	603c      	str	r4, [r7, #0]
 800848c:	415b      	adcs	r3, r3
 800848e:	607b      	str	r3, [r7, #4]
 8008490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008494:	1812      	adds	r2, r2, r0
 8008496:	eb41 0303 	adc.w	r3, r1, r3
 800849a:	f04f 0400 	mov.w	r4, #0
 800849e:	f04f 0500 	mov.w	r5, #0
 80084a2:	00dd      	lsls	r5, r3, #3
 80084a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084a8:	00d4      	lsls	r4, r2, #3
 80084aa:	4622      	mov	r2, r4
 80084ac:	462b      	mov	r3, r5
 80084ae:	eb12 0a00 	adds.w	sl, r2, r0
 80084b2:	eb43 0b01 	adc.w	fp, r3, r1
 80084b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f04f 0100 	mov.w	r1, #0
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	008b      	lsls	r3, r1, #2
 80084ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80084ce:	0082      	lsls	r2, r0, #2
 80084d0:	4650      	mov	r0, sl
 80084d2:	4659      	mov	r1, fp
 80084d4:	f7f8 fb78 	bl	8000bc8 <__aeabi_uldivmod>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <UART_SetConfig+0x38c>)
 80084de:	fba3 1302 	umull	r1, r3, r3, r2
 80084e2:	095b      	lsrs	r3, r3, #5
 80084e4:	2164      	movs	r1, #100	; 0x64
 80084e6:	fb01 f303 	mul.w	r3, r1, r3
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	011b      	lsls	r3, r3, #4
 80084ee:	3332      	adds	r3, #50	; 0x32
 80084f0:	4a09      	ldr	r2, [pc, #36]	; (8008518 <UART_SetConfig+0x38c>)
 80084f2:	fba2 2303 	umull	r2, r3, r2, r3
 80084f6:	095b      	lsrs	r3, r3, #5
 80084f8:	f003 020f 	and.w	r2, r3, #15
 80084fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4432      	add	r2, r6
 8008502:	609a      	str	r2, [r3, #8]
}
 8008504:	bf00      	nop
 8008506:	377c      	adds	r7, #124	; 0x7c
 8008508:	46bd      	mov	sp, r7
 800850a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850e:	bf00      	nop
 8008510:	40011000 	.word	0x40011000
 8008514:	40011400 	.word	0x40011400
 8008518:	51eb851f 	.word	0x51eb851f

0800851c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008526:	2300      	movs	r3, #0
 8008528:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d029      	beq.n	800858a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008542:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008546:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008550:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008556:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800855c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008562:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008568:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800856e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008574:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800857a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	601a      	str	r2, [r3, #0]
 8008588:	e034      	b.n	80085f4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008596:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80085a0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80085a6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80085ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085be:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80085c8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80085ce:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80085d4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80085da:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80085e0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008602:	b480      	push	{r7}
 8008604:	b087      	sub	sp, #28
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800860e:	2300      	movs	r3, #0
 8008610:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008612:	2300      	movs	r3, #0
 8008614:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d02e      	beq.n	800867a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008628:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	3b01      	subs	r3, #1
 8008636:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008638:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	3b01      	subs	r3, #1
 8008640:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008642:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	3b01      	subs	r3, #1
 800864a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800864c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	3b01      	subs	r3, #1
 8008654:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008656:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	3b01      	subs	r3, #1
 800865e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008660:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	3b01      	subs	r3, #1
 8008668:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800866a:	4313      	orrs	r3, r2
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	4313      	orrs	r3, r2
 8008670:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	609a      	str	r2, [r3, #8]
 8008678:	e03b      	b.n	80086f2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008686:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800868a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	3b01      	subs	r3, #1
 8008692:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	3b01      	subs	r3, #1
 800869a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800869c:	4313      	orrs	r3, r2
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80086b0:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	3b01      	subs	r3, #1
 80086be:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80086c0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80086ca:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80086d4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	3b01      	subs	r3, #1
 80086dc:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80086de:	4313      	orrs	r3, r2
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	371c      	adds	r7, #28
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008700:	b084      	sub	sp, #16
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	f107 001c 	add.w	r0, r7, #28
 800870e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008714:	2b01      	cmp	r3, #1
 8008716:	d122      	bne.n	800875e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800872c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008742:	2b01      	cmp	r3, #1
 8008744:	d105      	bne.n	8008752 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f9a0 	bl	8008a98 <USB_CoreReset>
 8008758:	4603      	mov	r3, r0
 800875a:	73fb      	strb	r3, [r7, #15]
 800875c:	e01a      	b.n	8008794 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f994 	bl	8008a98 <USB_CoreReset>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008776:	2b00      	cmp	r3, #0
 8008778:	d106      	bne.n	8008788 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	639a      	str	r2, [r3, #56]	; 0x38
 8008786:	e005      	b.n	8008794 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	2b01      	cmp	r3, #1
 8008798:	d10b      	bne.n	80087b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f043 0206 	orr.w	r2, r3, #6
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f043 0220 	orr.w	r2, r3, #32
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087be:	b004      	add	sp, #16
 80087c0:	4770      	bx	lr

080087c2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b083      	sub	sp, #12
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f043 0201 	orr.w	r2, r3, #1
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f023 0201 	bic.w	r2, r3, #1
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	460b      	mov	r3, r1
 8008810:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008812:	2300      	movs	r3, #0
 8008814:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d115      	bne.n	8008854 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008834:	2001      	movs	r0, #1
 8008836:	f7fa f9b9 	bl	8002bac <HAL_Delay>
      ms++;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3301      	adds	r3, #1
 800883e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f91a 	bl	8008a7a <USB_GetMode>
 8008846:	4603      	mov	r3, r0
 8008848:	2b01      	cmp	r3, #1
 800884a:	d01e      	beq.n	800888a <USB_SetCurrentMode+0x84>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2b31      	cmp	r3, #49	; 0x31
 8008850:	d9f0      	bls.n	8008834 <USB_SetCurrentMode+0x2e>
 8008852:	e01a      	b.n	800888a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d115      	bne.n	8008886 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008866:	2001      	movs	r0, #1
 8008868:	f7fa f9a0 	bl	8002bac <HAL_Delay>
      ms++;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3301      	adds	r3, #1
 8008870:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f901 	bl	8008a7a <USB_GetMode>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <USB_SetCurrentMode+0x84>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2b31      	cmp	r3, #49	; 0x31
 8008882:	d9f0      	bls.n	8008866 <USB_SetCurrentMode+0x60>
 8008884:	e001      	b.n	800888a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e005      	b.n	8008896 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2b32      	cmp	r3, #50	; 0x32
 800888e:	d101      	bne.n	8008894 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e000      	b.n	8008896 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	019b      	lsls	r3, r3, #6
 80088b2:	f043 0220 	orr.w	r2, r3, #32
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3301      	adds	r3, #1
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	4a08      	ldr	r2, [pc, #32]	; (80088e4 <USB_FlushTxFifo+0x44>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d901      	bls.n	80088ca <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e006      	b.n	80088d8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	f003 0320 	and.w	r3, r3, #32
 80088d2:	2b20      	cmp	r3, #32
 80088d4:	d0f1      	beq.n	80088ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	00030d40 	.word	0x00030d40

080088e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2210      	movs	r2, #16
 80088f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3301      	adds	r3, #1
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	4a08      	ldr	r2, [pc, #32]	; (8008924 <USB_FlushRxFifo+0x3c>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d901      	bls.n	800890a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e006      	b.n	8008918 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0310 	and.w	r3, r3, #16
 8008912:	2b10      	cmp	r3, #16
 8008914:	d0f1      	beq.n	80088fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr
 8008924:	00030d40 	.word	0x00030d40

08008928 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008928:	b480      	push	{r7}
 800892a:	b089      	sub	sp, #36	; 0x24
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	4611      	mov	r1, r2
 8008934:	461a      	mov	r2, r3
 8008936:	460b      	mov	r3, r1
 8008938:	71fb      	strb	r3, [r7, #7]
 800893a:	4613      	mov	r3, r2
 800893c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008946:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800894a:	2b00      	cmp	r3, #0
 800894c:	d123      	bne.n	8008996 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800894e:	88bb      	ldrh	r3, [r7, #4]
 8008950:	3303      	adds	r3, #3
 8008952:	089b      	lsrs	r3, r3, #2
 8008954:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008956:	2300      	movs	r3, #0
 8008958:	61bb      	str	r3, [r7, #24]
 800895a:	e018      	b.n	800898e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	031a      	lsls	r2, r3, #12
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	4413      	add	r3, r2
 8008964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008968:	461a      	mov	r2, r3
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	3301      	adds	r3, #1
 8008974:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	3301      	adds	r3, #1
 800897a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	3301      	adds	r3, #1
 8008980:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	3301      	adds	r3, #1
 8008986:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	3301      	adds	r3, #1
 800898c:	61bb      	str	r3, [r7, #24]
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	429a      	cmp	r2, r3
 8008994:	d3e2      	bcc.n	800895c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3724      	adds	r7, #36	; 0x24
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b08b      	sub	sp, #44	; 0x2c
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	4613      	mov	r3, r2
 80089b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80089ba:	88fb      	ldrh	r3, [r7, #6]
 80089bc:	089b      	lsrs	r3, r3, #2
 80089be:	b29b      	uxth	r3, r3
 80089c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80089c2:	88fb      	ldrh	r3, [r7, #6]
 80089c4:	f003 0303 	and.w	r3, r3, #3
 80089c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80089ca:	2300      	movs	r3, #0
 80089cc:	623b      	str	r3, [r7, #32]
 80089ce:	e014      	b.n	80089fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	601a      	str	r2, [r3, #0]
    pDest++;
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	3301      	adds	r3, #1
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	3301      	adds	r3, #1
 80089e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	3301      	adds	r3, #1
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	3301      	adds	r3, #1
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	3301      	adds	r3, #1
 80089f8:	623b      	str	r3, [r7, #32]
 80089fa:	6a3a      	ldr	r2, [r7, #32]
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d3e6      	bcc.n	80089d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a02:	8bfb      	ldrh	r3, [r7, #30]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d01e      	beq.n	8008a46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a12:	461a      	mov	r2, r3
 8008a14:	f107 0310 	add.w	r3, r7, #16
 8008a18:	6812      	ldr	r2, [r2, #0]
 8008a1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	fa22 f303 	lsr.w	r3, r2, r3
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	701a      	strb	r2, [r3, #0]
      i++;
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	3301      	adds	r3, #1
 8008a32:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	3301      	adds	r3, #1
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008a3a:	8bfb      	ldrh	r3, [r7, #30]
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a40:	8bfb      	ldrh	r3, [r7, #30]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1ea      	bne.n	8008a1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	372c      	adds	r7, #44	; 0x2c
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	695b      	ldr	r3, [r3, #20]
 8008a60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	4013      	ands	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b083      	sub	sp, #12
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	f003 0301 	and.w	r3, r3, #1
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
	...

08008a98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	60fb      	str	r3, [r7, #12]
 8008aaa:	4a13      	ldr	r2, [pc, #76]	; (8008af8 <USB_CoreReset+0x60>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d901      	bls.n	8008ab4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e01a      	b.n	8008aea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	daf3      	bge.n	8008aa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	f043 0201 	orr.w	r2, r3, #1
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	60fb      	str	r3, [r7, #12]
 8008ad2:	4a09      	ldr	r2, [pc, #36]	; (8008af8 <USB_CoreReset+0x60>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d901      	bls.n	8008adc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e006      	b.n	8008aea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d0f1      	beq.n	8008acc <USB_CoreReset+0x34>

  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	00030d40 	.word	0x00030d40

08008afc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008afc:	b084      	sub	sp, #16
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	f107 001c 	add.w	r0, r7, #28
 8008b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b18:	461a      	mov	r2, r3
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d018      	beq.n	8008b80 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d10a      	bne.n	8008b6a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b62:	f043 0304 	orr.w	r3, r3, #4
 8008b66:	6013      	str	r3, [r2, #0]
 8008b68:	e014      	b.n	8008b94 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b78:	f023 0304 	bic.w	r3, r3, #4
 8008b7c:	6013      	str	r3, [r2, #0]
 8008b7e:	e009      	b.n	8008b94 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b8e:	f023 0304 	bic.w	r3, r3, #4
 8008b92:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008b94:	2110      	movs	r1, #16
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff fe82 	bl	80088a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7ff fea3 	bl	80088e8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	e015      	b.n	8008bd4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	015a      	lsls	r2, r3, #5
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bc8:	461a      	mov	r2, r3
 8008bca:	2300      	movs	r3, #0
 8008bcc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d3e5      	bcc.n	8008ba8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f04f 32ff 	mov.w	r2, #4294967295
 8008be8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00b      	beq.n	8008c0e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bfc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a13      	ldr	r2, [pc, #76]	; (8008c50 <USB_HostInit+0x154>)
 8008c02:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a13      	ldr	r2, [pc, #76]	; (8008c54 <USB_HostInit+0x158>)
 8008c08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008c0c:	e009      	b.n	8008c22 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2280      	movs	r2, #128	; 0x80
 8008c12:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a10      	ldr	r2, [pc, #64]	; (8008c58 <USB_HostInit+0x15c>)
 8008c18:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a0f      	ldr	r2, [pc, #60]	; (8008c5c <USB_HostInit+0x160>)
 8008c1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d105      	bne.n	8008c34 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	f043 0210 	orr.w	r2, r3, #16
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	699a      	ldr	r2, [r3, #24]
 8008c38:	4b09      	ldr	r3, [pc, #36]	; (8008c60 <USB_HostInit+0x164>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c4c:	b004      	add	sp, #16
 8008c4e:	4770      	bx	lr
 8008c50:	01000200 	.word	0x01000200
 8008c54:	00e00300 	.word	0x00e00300
 8008c58:	00600080 	.word	0x00600080
 8008c5c:	004000e0 	.word	0x004000e0
 8008c60:	a3200008 	.word	0xa3200008

08008c64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c82:	f023 0303 	bic.w	r3, r3, #3
 8008c86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	78fb      	ldrb	r3, [r7, #3]
 8008c92:	f003 0303 	and.w	r3, r3, #3
 8008c96:	68f9      	ldr	r1, [r7, #12]
 8008c98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008ca0:	78fb      	ldrb	r3, [r7, #3]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d107      	bne.n	8008cb6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cac:	461a      	mov	r2, r3
 8008cae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008cb2:	6053      	str	r3, [r2, #4]
 8008cb4:	e009      	b.n	8008cca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008cb6:	78fb      	ldrb	r3, [r7, #3]
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d106      	bne.n	8008cca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	f241 7370 	movw	r3, #6000	; 0x1770
 8008cc8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008cf8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d06:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008d08:	2064      	movs	r0, #100	; 0x64
 8008d0a:	f7f9 ff4f 	bl	8002bac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d1a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008d1c:	200a      	movs	r0, #10
 8008d1e:	f7f9 ff45 	bl	8002bac <HAL_Delay>

  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008d50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d109      	bne.n	8008d70 <USB_DriveVbus+0x44>
 8008d5c:	78fb      	ldrb	r3, [r7, #3]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d106      	bne.n	8008d70 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d6e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d7a:	d109      	bne.n	8008d90 <USB_DriveVbus+0x64>
 8008d7c:	78fb      	ldrb	r3, [r7, #3]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d106      	bne.n	8008d90 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d8e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	0c5b      	lsrs	r3, r3, #17
 8008dbc:	f003 0303 	and.w	r3, r3, #3
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	b29b      	uxth	r3, r3
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
	...

08008df0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	4608      	mov	r0, r1
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	4603      	mov	r3, r0
 8008e00:	70fb      	strb	r3, [r7, #3]
 8008e02:	460b      	mov	r3, r1
 8008e04:	70bb      	strb	r3, [r7, #2]
 8008e06:	4613      	mov	r3, r2
 8008e08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008e12:	78fb      	ldrb	r3, [r7, #3]
 8008e14:	015a      	lsls	r2, r3, #5
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	4413      	add	r3, r2
 8008e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f04f 33ff 	mov.w	r3, #4294967295
 8008e24:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008e26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d87e      	bhi.n	8008f2c <USB_HC_Init+0x13c>
 8008e2e:	a201      	add	r2, pc, #4	; (adr r2, 8008e34 <USB_HC_Init+0x44>)
 8008e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e34:	08008e45 	.word	0x08008e45
 8008e38:	08008eef 	.word	0x08008eef
 8008e3c:	08008e45 	.word	0x08008e45
 8008e40:	08008eb1 	.word	0x08008eb1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e44:	78fb      	ldrb	r3, [r7, #3]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e50:	461a      	mov	r2, r3
 8008e52:	f240 439d 	movw	r3, #1181	; 0x49d
 8008e56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008e58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	da10      	bge.n	8008e82 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	78fa      	ldrb	r2, [r7, #3]
 8008e70:	0151      	lsls	r1, r2, #5
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	440a      	add	r2, r1
 8008e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e7e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008e80:	e057      	b.n	8008f32 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d051      	beq.n	8008f32 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008e8e:	78fb      	ldrb	r3, [r7, #3]
 8008e90:	015a      	lsls	r2, r3, #5
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	4413      	add	r3, r2
 8008e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	78fa      	ldrb	r2, [r7, #3]
 8008e9e:	0151      	lsls	r1, r2, #5
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	440a      	add	r2, r1
 8008ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ea8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008eac:	60d3      	str	r3, [r2, #12]
      break;
 8008eae:	e040      	b.n	8008f32 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	f240 639d 	movw	r3, #1693	; 0x69d
 8008ec2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ec4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	da34      	bge.n	8008f36 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	78fa      	ldrb	r2, [r7, #3]
 8008edc:	0151      	lsls	r1, r2, #5
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	440a      	add	r2, r1
 8008ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eea:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008eec:	e023      	b.n	8008f36 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008eee:	78fb      	ldrb	r3, [r7, #3]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008efa:	461a      	mov	r2, r3
 8008efc:	f240 2325 	movw	r3, #549	; 0x225
 8008f00:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	da17      	bge.n	8008f3a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008f0a:	78fb      	ldrb	r3, [r7, #3]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	78fa      	ldrb	r2, [r7, #3]
 8008f1a:	0151      	lsls	r1, r2, #5
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	440a      	add	r2, r1
 8008f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f24:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008f28:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008f2a:	e006      	b.n	8008f3a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	77fb      	strb	r3, [r7, #31]
      break;
 8008f30:	e004      	b.n	8008f3c <USB_HC_Init+0x14c>
      break;
 8008f32:	bf00      	nop
 8008f34:	e002      	b.n	8008f3c <USB_HC_Init+0x14c>
      break;
 8008f36:	bf00      	nop
 8008f38:	e000      	b.n	8008f3c <USB_HC_Init+0x14c>
      break;
 8008f3a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f42:	699a      	ldr	r2, [r3, #24]
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	f003 030f 	and.w	r3, r3, #15
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f50:	6939      	ldr	r1, [r7, #16]
 8008f52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008f56:	4313      	orrs	r3, r2
 8008f58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008f66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	da03      	bge.n	8008f76 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f72:	61bb      	str	r3, [r7, #24]
 8008f74:	e001      	b.n	8008f7a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff ff0f 	bl	8008d9e <USB_GetHostSpeed>
 8008f80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008f82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d106      	bne.n	8008f98 <USB_HC_Init+0x1a8>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d003      	beq.n	8008f98 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f94:	617b      	str	r3, [r7, #20]
 8008f96:	e001      	b.n	8008f9c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f9c:	787b      	ldrb	r3, [r7, #1]
 8008f9e:	059b      	lsls	r3, r3, #22
 8008fa0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008fa4:	78bb      	ldrb	r3, [r7, #2]
 8008fa6:	02db      	lsls	r3, r3, #11
 8008fa8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008fac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008fae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008fb2:	049b      	lsls	r3, r3, #18
 8008fb4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008fb8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008fba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008fbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008fc0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008fc6:	78fb      	ldrb	r3, [r7, #3]
 8008fc8:	0159      	lsls	r1, r3, #5
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	440b      	add	r3, r1
 8008fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fd2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008fd8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008fda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d10f      	bne.n	8009002 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	78fa      	ldrb	r2, [r7, #3]
 8008ff2:	0151      	lsls	r1, r2, #5
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009000:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009002:	7ffb      	ldrb	r3, [r7, #31]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3720      	adds	r7, #32
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b08c      	sub	sp, #48	; 0x30
 8009010:	af02      	add	r7, sp, #8
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	4613      	mov	r3, r2
 8009018:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	785b      	ldrb	r3, [r3, #1]
 8009022:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009028:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009032:	2b00      	cmp	r3, #0
 8009034:	d02d      	beq.n	8009092 <USB_HC_StartXfer+0x86>
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	791b      	ldrb	r3, [r3, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d129      	bne.n	8009092 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d117      	bne.n	8009074 <USB_HC_StartXfer+0x68>
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	79db      	ldrb	r3, [r3, #7]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <USB_HC_StartXfer+0x48>
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	79db      	ldrb	r3, [r3, #7]
 8009050:	2b02      	cmp	r3, #2
 8009052:	d10f      	bne.n	8009074 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	6a3b      	ldr	r3, [r7, #32]
 800905a:	4413      	add	r3, r2
 800905c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	69fa      	ldr	r2, [r7, #28]
 8009064:	0151      	lsls	r1, r2, #5
 8009066:	6a3a      	ldr	r2, [r7, #32]
 8009068:	440a      	add	r2, r1
 800906a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800906e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009072:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10b      	bne.n	8009092 <USB_HC_StartXfer+0x86>
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	795b      	ldrb	r3, [r3, #5]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d107      	bne.n	8009092 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	785b      	ldrb	r3, [r3, #1]
 8009086:	4619      	mov	r1, r3
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f000 fa2f 	bl	80094ec <USB_DoPing>
      return HAL_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	e0f8      	b.n	8009284 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d018      	beq.n	80090cc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	8912      	ldrh	r2, [r2, #8]
 80090a2:	4413      	add	r3, r2
 80090a4:	3b01      	subs	r3, #1
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	8912      	ldrh	r2, [r2, #8]
 80090aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80090ae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80090b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80090b2:	8b7b      	ldrh	r3, [r7, #26]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d90b      	bls.n	80090d0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80090b8:	8b7b      	ldrh	r3, [r7, #26]
 80090ba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80090bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	8912      	ldrh	r2, [r2, #8]
 80090c2:	fb02 f203 	mul.w	r2, r2, r3
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	611a      	str	r2, [r3, #16]
 80090ca:	e001      	b.n	80090d0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80090cc:	2301      	movs	r3, #1
 80090ce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	78db      	ldrb	r3, [r3, #3]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d007      	beq.n	80090e8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80090d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	8912      	ldrh	r2, [r2, #8]
 80090de:	fb02 f203 	mul.w	r2, r2, r3
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	611a      	str	r2, [r3, #16]
 80090e6:	e003      	b.n	80090f0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	695a      	ldr	r2, [r3, #20]
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80090f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090fa:	04d9      	lsls	r1, r3, #19
 80090fc:	4b63      	ldr	r3, [pc, #396]	; (800928c <USB_HC_StartXfer+0x280>)
 80090fe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009100:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	7a9b      	ldrb	r3, [r3, #10]
 8009106:	075b      	lsls	r3, r3, #29
 8009108:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800910c:	69f9      	ldr	r1, [r7, #28]
 800910e:	0148      	lsls	r0, r1, #5
 8009110:	6a39      	ldr	r1, [r7, #32]
 8009112:	4401      	add	r1, r0
 8009114:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009118:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800911a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d009      	beq.n	8009136 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	68d9      	ldr	r1, [r3, #12]
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	4413      	add	r3, r2
 800912e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009132:	460a      	mov	r2, r1
 8009134:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009136:	6a3b      	ldr	r3, [r7, #32]
 8009138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	2b00      	cmp	r3, #0
 8009144:	bf0c      	ite	eq
 8009146:	2301      	moveq	r3, #1
 8009148:	2300      	movne	r3, #0
 800914a:	b2db      	uxtb	r3, r3
 800914c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	6a3b      	ldr	r3, [r7, #32]
 8009154:	4413      	add	r3, r2
 8009156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	69fa      	ldr	r2, [r7, #28]
 800915e:	0151      	lsls	r1, r2, #5
 8009160:	6a3a      	ldr	r2, [r7, #32]
 8009162:	440a      	add	r2, r1
 8009164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009168:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800916c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	015a      	lsls	r2, r3, #5
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	4413      	add	r3, r2
 8009176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	7e7b      	ldrb	r3, [r7, #25]
 800917e:	075b      	lsls	r3, r3, #29
 8009180:	69f9      	ldr	r1, [r7, #28]
 8009182:	0148      	lsls	r0, r1, #5
 8009184:	6a39      	ldr	r1, [r7, #32]
 8009186:	4401      	add	r1, r0
 8009188:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800918c:	4313      	orrs	r3, r2
 800918e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	4413      	add	r3, r2
 8009198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091a6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	78db      	ldrb	r3, [r3, #3]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d004      	beq.n	80091ba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091b6:	613b      	str	r3, [r7, #16]
 80091b8:	e003      	b.n	80091c2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80091c0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091c8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091d6:	461a      	mov	r2, r3
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	e04e      	b.n	8009284 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	78db      	ldrb	r3, [r3, #3]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d149      	bne.n	8009282 <USB_HC_StartXfer+0x276>
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d045      	beq.n	8009282 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	79db      	ldrb	r3, [r3, #7]
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d830      	bhi.n	8009260 <USB_HC_StartXfer+0x254>
 80091fe:	a201      	add	r2, pc, #4	; (adr r2, 8009204 <USB_HC_StartXfer+0x1f8>)
 8009200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009204:	08009215 	.word	0x08009215
 8009208:	08009239 	.word	0x08009239
 800920c:	08009215 	.word	0x08009215
 8009210:	08009239 	.word	0x08009239
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	3303      	adds	r3, #3
 800921a:	089b      	lsrs	r3, r3, #2
 800921c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800921e:	8afa      	ldrh	r2, [r7, #22]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009224:	b29b      	uxth	r3, r3
 8009226:	429a      	cmp	r2, r3
 8009228:	d91c      	bls.n	8009264 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	f043 0220 	orr.w	r2, r3, #32
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	619a      	str	r2, [r3, #24]
        }
        break;
 8009236:	e015      	b.n	8009264 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	3303      	adds	r3, #3
 800923e:	089b      	lsrs	r3, r3, #2
 8009240:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009242:	8afa      	ldrh	r2, [r7, #22]
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	b29b      	uxth	r3, r3
 800924e:	429a      	cmp	r2, r3
 8009250:	d90a      	bls.n	8009268 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	619a      	str	r2, [r3, #24]
        }
        break;
 800925e:	e003      	b.n	8009268 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009260:	bf00      	nop
 8009262:	e002      	b.n	800926a <USB_HC_StartXfer+0x25e>
        break;
 8009264:	bf00      	nop
 8009266:	e000      	b.n	800926a <USB_HC_StartXfer+0x25e>
        break;
 8009268:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	68d9      	ldr	r1, [r3, #12]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	785a      	ldrb	r2, [r3, #1]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	b29b      	uxth	r3, r3
 8009278:	2000      	movs	r0, #0
 800927a:	9000      	str	r0, [sp, #0]
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7ff fb53 	bl	8008928 <USB_WritePacket>
  }

  return HAL_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3728      	adds	r7, #40	; 0x28
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	1ff80000 	.word	0x1ff80000

08009290 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	b29b      	uxth	r3, r3
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b089      	sub	sp, #36	; 0x24
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	460b      	mov	r3, r1
 80092bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80092c2:	78fb      	ldrb	r3, [r7, #3]
 80092c4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80092c6:	2300      	movs	r3, #0
 80092c8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	0c9b      	lsrs	r3, r3, #18
 80092da:	f003 0303 	and.w	r3, r3, #3
 80092de:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	0fdb      	lsrs	r3, r3, #31
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f003 0320 	and.w	r3, r3, #32
 80092fe:	2b20      	cmp	r3, #32
 8009300:	d104      	bne.n	800930c <USB_HC_Halt+0x5a>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	e0e8      	b.n	80094de <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <USB_HC_Halt+0x66>
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	2b02      	cmp	r3, #2
 8009316:	d173      	bne.n	8009400 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	015a      	lsls	r2, r3, #5
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	4413      	add	r3, r2
 8009320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	0151      	lsls	r1, r2, #5
 800932a:	69ba      	ldr	r2, [r7, #24]
 800932c:	440a      	add	r2, r1
 800932e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009332:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009336:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f003 0320 	and.w	r3, r3, #32
 8009340:	2b00      	cmp	r3, #0
 8009342:	f040 80cb 	bne.w	80094dc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d143      	bne.n	80093da <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	015a      	lsls	r2, r3, #5
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	4413      	add	r3, r2
 800935a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	0151      	lsls	r1, r2, #5
 8009364:	69ba      	ldr	r2, [r7, #24]
 8009366:	440a      	add	r2, r1
 8009368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800936c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009370:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	015a      	lsls	r2, r3, #5
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	4413      	add	r3, r2
 800937a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	0151      	lsls	r1, r2, #5
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	440a      	add	r2, r1
 8009388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800938c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009390:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	015a      	lsls	r2, r3, #5
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	4413      	add	r3, r2
 800939a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	0151      	lsls	r1, r2, #5
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	440a      	add	r2, r1
 80093a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093b0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	3301      	adds	r3, #1
 80093b6:	61fb      	str	r3, [r7, #28]
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093be:	d81d      	bhi.n	80093fc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093d6:	d0ec      	beq.n	80093b2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80093d8:	e080      	b.n	80094dc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	0151      	lsls	r1, r2, #5
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	440a      	add	r2, r1
 80093f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093f8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80093fa:	e06f      	b.n	80094dc <USB_HC_Halt+0x22a>
            break;
 80093fc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80093fe:	e06d      	b.n	80094dc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	015a      	lsls	r2, r3, #5
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	4413      	add	r3, r2
 8009408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	0151      	lsls	r1, r2, #5
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	440a      	add	r2, r1
 8009416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800941a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800941e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d143      	bne.n	80094b8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	4413      	add	r3, r2
 8009438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	0151      	lsls	r1, r2, #5
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	440a      	add	r2, r1
 8009446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800944a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800944e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	4413      	add	r3, r2
 8009458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	0151      	lsls	r1, r2, #5
 8009462:	69ba      	ldr	r2, [r7, #24]
 8009464:	440a      	add	r2, r1
 8009466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800946a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800946e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	4413      	add	r3, r2
 8009478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	0151      	lsls	r1, r2, #5
 8009482:	69ba      	ldr	r2, [r7, #24]
 8009484:	440a      	add	r2, r1
 8009486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800948a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800948e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	3301      	adds	r3, #1
 8009494:	61fb      	str	r3, [r7, #28]
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800949c:	d81d      	bhi.n	80094da <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094b4:	d0ec      	beq.n	8009490 <USB_HC_Halt+0x1de>
 80094b6:	e011      	b.n	80094dc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	015a      	lsls	r2, r3, #5
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	4413      	add	r3, r2
 80094c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	0151      	lsls	r1, r2, #5
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	440a      	add	r2, r1
 80094ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	e000      	b.n	80094dc <USB_HC_Halt+0x22a>
          break;
 80094da:	bf00      	nop
    }
  }

  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3724      	adds	r7, #36	; 0x24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
	...

080094ec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	460b      	mov	r3, r1
 80094f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80094fc:	78fb      	ldrb	r3, [r7, #3]
 80094fe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009500:	2301      	movs	r3, #1
 8009502:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	04da      	lsls	r2, r3, #19
 8009508:	4b15      	ldr	r3, [pc, #84]	; (8009560 <USB_DoPing+0x74>)
 800950a:	4013      	ands	r3, r2
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	0151      	lsls	r1, r2, #5
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	440a      	add	r2, r1
 8009514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009518:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800951c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	4413      	add	r3, r2
 8009526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009534:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800953c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	4413      	add	r3, r2
 8009546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800954a:	461a      	mov	r2, r3
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	371c      	adds	r7, #28
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	1ff80000 	.word	0x1ff80000

08009564 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009570:	2300      	movs	r3, #0
 8009572:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7ff f935 	bl	80087e4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800957a:	2110      	movs	r1, #16
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f7ff f98f 	bl	80088a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7ff f9b0 	bl	80088e8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009588:	2300      	movs	r3, #0
 800958a:	613b      	str	r3, [r7, #16]
 800958c:	e01f      	b.n	80095ce <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	4413      	add	r3, r2
 8009596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095b4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	015a      	lsls	r2, r3, #5
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	4413      	add	r3, r2
 80095be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095c2:	461a      	mov	r2, r3
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	3301      	adds	r3, #1
 80095cc:	613b      	str	r3, [r7, #16]
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	2b0f      	cmp	r3, #15
 80095d2:	d9dc      	bls.n	800958e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80095d4:	2300      	movs	r3, #0
 80095d6:	613b      	str	r3, [r7, #16]
 80095d8:	e034      	b.n	8009644 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095f0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009600:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	015a      	lsls	r2, r3, #5
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	4413      	add	r3, r2
 800960a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800960e:	461a      	mov	r2, r3
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	3301      	adds	r3, #1
 8009618:	617b      	str	r3, [r7, #20]
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009620:	d80c      	bhi.n	800963c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	4413      	add	r3, r2
 800962a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009638:	d0ec      	beq.n	8009614 <USB_StopHost+0xb0>
 800963a:	e000      	b.n	800963e <USB_StopHost+0xda>
        break;
 800963c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	3301      	adds	r3, #1
 8009642:	613b      	str	r3, [r7, #16]
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	2b0f      	cmp	r3, #15
 8009648:	d9c7      	bls.n	80095da <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009650:	461a      	mov	r2, r3
 8009652:	f04f 33ff 	mov.w	r3, #4294967295
 8009656:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f04f 32ff 	mov.w	r2, #4294967295
 800965e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7ff f8ae 	bl	80087c2 <USB_EnableGlobalInt>

  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3718      	adds	r7, #24
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009670:	b590      	push	{r4, r7, lr}
 8009672:	b089      	sub	sp, #36	; 0x24
 8009674:	af04      	add	r7, sp, #16
 8009676:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009678:	2301      	movs	r3, #1
 800967a:	2202      	movs	r2, #2
 800967c:	2102      	movs	r1, #2
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fcb8 	bl	8009ff4 <USBH_FindInterface>
 8009684:	4603      	mov	r3, r0
 8009686:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	2bff      	cmp	r3, #255	; 0xff
 800968c:	d002      	beq.n	8009694 <USBH_CDC_InterfaceInit+0x24>
 800968e:	7bfb      	ldrb	r3, [r7, #15]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d901      	bls.n	8009698 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009694:	2302      	movs	r3, #2
 8009696:	e13d      	b.n	8009914 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fc8d 	bl	8009fbc <USBH_SelectInterface>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80096ac:	2302      	movs	r3, #2
 80096ae:	e131      	b.n	8009914 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80096b6:	2050      	movs	r0, #80	; 0x50
 80096b8:	f004 fd5c 	bl	800e174 <malloc>
 80096bc:	4603      	mov	r3, r0
 80096be:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096c6:	69db      	ldr	r3, [r3, #28]
 80096c8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80096d0:	2302      	movs	r3, #2
 80096d2:	e11f      	b.n	8009914 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80096d4:	2250      	movs	r2, #80	; 0x50
 80096d6:	2100      	movs	r1, #0
 80096d8:	68b8      	ldr	r0, [r7, #8]
 80096da:	f004 fd69 	bl	800e1b0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	211a      	movs	r1, #26
 80096e4:	fb01 f303 	mul.w	r3, r1, r3
 80096e8:	4413      	add	r3, r2
 80096ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	b25b      	sxtb	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	da15      	bge.n	8009722 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	211a      	movs	r1, #26
 80096fc:	fb01 f303 	mul.w	r3, r1, r3
 8009700:	4413      	add	r3, r2
 8009702:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009706:	781a      	ldrb	r2, [r3, #0]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	211a      	movs	r1, #26
 8009712:	fb01 f303 	mul.w	r3, r1, r3
 8009716:	4413      	add	r3, r2
 8009718:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800971c:	881a      	ldrh	r2, [r3, #0]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	785b      	ldrb	r3, [r3, #1]
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f002 f890 	bl	800b84e <USBH_AllocPipe>
 800972e:	4603      	mov	r3, r0
 8009730:	461a      	mov	r2, r3
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	7819      	ldrb	r1, [r3, #0]
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	7858      	ldrb	r0, [r3, #1]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	8952      	ldrh	r2, [r2, #10]
 800974e:	9202      	str	r2, [sp, #8]
 8009750:	2203      	movs	r2, #3
 8009752:	9201      	str	r2, [sp, #4]
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	4623      	mov	r3, r4
 8009758:	4602      	mov	r2, r0
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f002 f848 	bl	800b7f0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	2200      	movs	r2, #0
 8009766:	4619      	mov	r1, r3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f004 fc31 	bl	800dfd0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800976e:	2300      	movs	r3, #0
 8009770:	2200      	movs	r2, #0
 8009772:	210a      	movs	r1, #10
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fc3d 	bl	8009ff4 <USBH_FindInterface>
 800977a:	4603      	mov	r3, r0
 800977c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800977e:	7bfb      	ldrb	r3, [r7, #15]
 8009780:	2bff      	cmp	r3, #255	; 0xff
 8009782:	d002      	beq.n	800978a <USBH_CDC_InterfaceInit+0x11a>
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d901      	bls.n	800978e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800978a:	2302      	movs	r3, #2
 800978c:	e0c2      	b.n	8009914 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800978e:	7bfb      	ldrb	r3, [r7, #15]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	211a      	movs	r1, #26
 8009794:	fb01 f303 	mul.w	r3, r1, r3
 8009798:	4413      	add	r3, r2
 800979a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	b25b      	sxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	da16      	bge.n	80097d4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	211a      	movs	r1, #26
 80097ac:	fb01 f303 	mul.w	r3, r1, r3
 80097b0:	4413      	add	r3, r2
 80097b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80097b6:	781a      	ldrb	r2, [r3, #0]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	211a      	movs	r1, #26
 80097c2:	fb01 f303 	mul.w	r3, r1, r3
 80097c6:	4413      	add	r3, r2
 80097c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80097cc:	881a      	ldrh	r2, [r3, #0]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	835a      	strh	r2, [r3, #26]
 80097d2:	e015      	b.n	8009800 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	211a      	movs	r1, #26
 80097da:	fb01 f303 	mul.w	r3, r1, r3
 80097de:	4413      	add	r3, r2
 80097e0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80097e4:	781a      	ldrb	r2, [r3, #0]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	211a      	movs	r1, #26
 80097f0:	fb01 f303 	mul.w	r3, r1, r3
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80097fa:	881a      	ldrh	r2, [r3, #0]
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009800:	7bfb      	ldrb	r3, [r7, #15]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	211a      	movs	r1, #26
 8009806:	fb01 f303 	mul.w	r3, r1, r3
 800980a:	4413      	add	r3, r2
 800980c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	b25b      	sxtb	r3, r3
 8009814:	2b00      	cmp	r3, #0
 8009816:	da16      	bge.n	8009846 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009818:	7bfb      	ldrb	r3, [r7, #15]
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	211a      	movs	r1, #26
 800981e:	fb01 f303 	mul.w	r3, r1, r3
 8009822:	4413      	add	r3, r2
 8009824:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009828:	781a      	ldrb	r2, [r3, #0]
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800982e:	7bfb      	ldrb	r3, [r7, #15]
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	211a      	movs	r1, #26
 8009834:	fb01 f303 	mul.w	r3, r1, r3
 8009838:	4413      	add	r3, r2
 800983a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800983e:	881a      	ldrh	r2, [r3, #0]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	835a      	strh	r2, [r3, #26]
 8009844:	e015      	b.n	8009872 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	211a      	movs	r1, #26
 800984c:	fb01 f303 	mul.w	r3, r1, r3
 8009850:	4413      	add	r3, r2
 8009852:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009856:	781a      	ldrb	r2, [r3, #0]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800985c:	7bfb      	ldrb	r3, [r7, #15]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	211a      	movs	r1, #26
 8009862:	fb01 f303 	mul.w	r3, r1, r3
 8009866:	4413      	add	r3, r2
 8009868:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800986c:	881a      	ldrh	r2, [r3, #0]
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	7b9b      	ldrb	r3, [r3, #14]
 8009876:	4619      	mov	r1, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f001 ffe8 	bl	800b84e <USBH_AllocPipe>
 800987e:	4603      	mov	r3, r0
 8009880:	461a      	mov	r2, r3
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	7bdb      	ldrb	r3, [r3, #15]
 800988a:	4619      	mov	r1, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f001 ffde 	bl	800b84e <USBH_AllocPipe>
 8009892:	4603      	mov	r3, r0
 8009894:	461a      	mov	r2, r3
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	7b59      	ldrb	r1, [r3, #13]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	7b98      	ldrb	r0, [r3, #14]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	8b12      	ldrh	r2, [r2, #24]
 80098b2:	9202      	str	r2, [sp, #8]
 80098b4:	2202      	movs	r2, #2
 80098b6:	9201      	str	r2, [sp, #4]
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	4623      	mov	r3, r4
 80098bc:	4602      	mov	r2, r0
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f001 ff96 	bl	800b7f0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	7b19      	ldrb	r1, [r3, #12]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	7bd8      	ldrb	r0, [r3, #15]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	8b52      	ldrh	r2, [r2, #26]
 80098dc:	9202      	str	r2, [sp, #8]
 80098de:	2202      	movs	r2, #2
 80098e0:	9201      	str	r2, [sp, #4]
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	4623      	mov	r3, r4
 80098e6:	4602      	mov	r2, r0
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f001 ff81 	bl	800b7f0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	7b5b      	ldrb	r3, [r3, #13]
 80098fa:	2200      	movs	r2, #0
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f004 fb66 	bl	800dfd0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	7b1b      	ldrb	r3, [r3, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f004 fb5f 	bl	800dfd0 <USBH_LL_SetToggle>

  return USBH_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	bd90      	pop	{r4, r7, pc}

0800991c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00e      	beq.n	8009954 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f001 ff76 	bl	800b82e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f001 ffa1 	bl	800b890 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	7b1b      	ldrb	r3, [r3, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00e      	beq.n	800997a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	7b1b      	ldrb	r3, [r3, #12]
 8009960:	4619      	mov	r1, r3
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f001 ff63 	bl	800b82e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	7b1b      	ldrb	r3, [r3, #12]
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f001 ff8e 	bl	800b890 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	7b5b      	ldrb	r3, [r3, #13]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00e      	beq.n	80099a0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	7b5b      	ldrb	r3, [r3, #13]
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f001 ff50 	bl	800b82e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	7b5b      	ldrb	r3, [r3, #13]
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f001 ff7b 	bl	800b890 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00b      	beq.n	80099c4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099b2:	69db      	ldr	r3, [r3, #28]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f004 fbe5 	bl	800e184 <free>
    phost->pActiveClass->pData = 0U;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099c0:	2200      	movs	r2, #0
 80099c2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b084      	sub	sp, #16
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099dc:	69db      	ldr	r3, [r3, #28]
 80099de:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	3340      	adds	r3, #64	; 0x40
 80099e4:	4619      	mov	r1, r3
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f8b1 	bl	8009b4e <GetLineCoding>
 80099ec:	4603      	mov	r3, r0
 80099ee:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80099f0:	7afb      	ldrb	r3, [r7, #11]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d105      	bne.n	8009a02 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099fc:	2102      	movs	r1, #2
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009a02:	7afb      	ldrb	r3, [r7, #11]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a14:	2301      	movs	r3, #1
 8009a16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a22:	69db      	ldr	r3, [r3, #28]
 8009a24:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009a2c:	2b04      	cmp	r3, #4
 8009a2e:	d877      	bhi.n	8009b20 <USBH_CDC_Process+0x114>
 8009a30:	a201      	add	r2, pc, #4	; (adr r2, 8009a38 <USBH_CDC_Process+0x2c>)
 8009a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a36:	bf00      	nop
 8009a38:	08009a4d 	.word	0x08009a4d
 8009a3c:	08009a53 	.word	0x08009a53
 8009a40:	08009a83 	.word	0x08009a83
 8009a44:	08009af7 	.word	0x08009af7
 8009a48:	08009b05 	.word	0x08009b05
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a50:	e06d      	b.n	8009b2e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f897 	bl	8009b8c <SetLineCoding>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d104      	bne.n	8009a72 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009a70:	e058      	b.n	8009b24 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d055      	beq.n	8009b24 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2204      	movs	r2, #4
 8009a7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009a80:	e050      	b.n	8009b24 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	3340      	adds	r3, #64	; 0x40
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f860 	bl	8009b4e <GetLineCoding>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d126      	bne.n	8009ae6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aaa:	791b      	ldrb	r3, [r3, #4]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d13b      	bne.n	8009b28 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aba:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d133      	bne.n	8009b28 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aca:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d12b      	bne.n	8009b28 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ad8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d124      	bne.n	8009b28 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f982 	bl	8009de8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009ae4:	e020      	b.n	8009b28 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d01d      	beq.n	8009b28 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	2204      	movs	r2, #4
 8009af0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009af4:	e018      	b.n	8009b28 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f867 	bl	8009bca <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f8f6 	bl	8009cee <CDC_ProcessReception>
      break;
 8009b02:	e014      	b.n	8009b2e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009b04:	2100      	movs	r1, #0
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f001 f951 	bl	800adae <USBH_ClrFeature>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10a      	bne.n	8009b2c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009b1e:	e005      	b.n	8009b2c <USBH_CDC_Process+0x120>

    default:
      break;
 8009b20:	bf00      	nop
 8009b22:	e004      	b.n	8009b2e <USBH_CDC_Process+0x122>
      break;
 8009b24:	bf00      	nop
 8009b26:	e002      	b.n	8009b2e <USBH_CDC_Process+0x122>
      break;
 8009b28:	bf00      	nop
 8009b2a:	e000      	b.n	8009b2e <USBH_CDC_Process+0x122>
      break;
 8009b2c:	bf00      	nop

  }

  return status;
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr

08009b4e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b082      	sub	sp, #8
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	22a1      	movs	r2, #161	; 0xa1
 8009b5c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2221      	movs	r2, #33	; 0x21
 8009b62:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2207      	movs	r2, #7
 8009b74:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	2207      	movs	r2, #7
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f001 faf6 	bl	800b16e <USBH_CtlReq>
 8009b82:	4603      	mov	r3, r0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2221      	movs	r2, #33	; 0x21
 8009b9a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2220      	movs	r2, #32
 8009ba0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2207      	movs	r2, #7
 8009bb2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2207      	movs	r2, #7
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f001 fad7 	bl	800b16e <USBH_CtlReq>
 8009bc0:	4603      	mov	r3, r0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b086      	sub	sp, #24
 8009bce:	af02      	add	r7, sp, #8
 8009bd0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bd8:	69db      	ldr	r3, [r3, #28]
 8009bda:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d002      	beq.n	8009bf0 <CDC_ProcessTransmission+0x26>
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d023      	beq.n	8009c36 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009bee:	e07a      	b.n	8009ce6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	8b12      	ldrh	r2, [r2, #24]
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d90b      	bls.n	8009c14 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	69d9      	ldr	r1, [r3, #28]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	8b1a      	ldrh	r2, [r3, #24]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	7b5b      	ldrb	r3, [r3, #13]
 8009c08:	2001      	movs	r0, #1
 8009c0a:	9000      	str	r0, [sp, #0]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f001 fdac 	bl	800b76a <USBH_BulkSendData>
 8009c12:	e00b      	b.n	8009c2c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	7b5b      	ldrb	r3, [r3, #13]
 8009c22:	2001      	movs	r0, #1
 8009c24:	9000      	str	r0, [sp, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f001 fd9f 	bl	800b76a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2202      	movs	r2, #2
 8009c30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009c34:	e057      	b.n	8009ce6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	7b5b      	ldrb	r3, [r3, #13]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f004 f99d 	bl	800df7c <USBH_LL_GetURBState>
 8009c42:	4603      	mov	r3, r0
 8009c44:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009c46:	7afb      	ldrb	r3, [r7, #11]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d136      	bne.n	8009cba <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	8b12      	ldrh	r2, [r2, #24]
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d90e      	bls.n	8009c76 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	8b12      	ldrh	r2, [r2, #24]
 8009c60:	1a9a      	subs	r2, r3, r2
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	8b12      	ldrh	r2, [r2, #24]
 8009c6e:	441a      	add	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	61da      	str	r2, [r3, #28]
 8009c74:	e002      	b.n	8009c7c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d004      	beq.n	8009c8e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009c8c:	e006      	b.n	8009c9c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f892 	bl	8009dc0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2204      	movs	r2, #4
 8009ca0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	f001 fee0 	bl	800ba78 <osMessagePut>
      break;
 8009cb8:	e014      	b.n	8009ce4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8009cba:	7afb      	ldrb	r3, [r7, #11]
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d111      	bne.n	8009ce4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2204      	movs	r2, #4
 8009ccc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009cdc:	2200      	movs	r2, #0
 8009cde:	4619      	mov	r1, r3
 8009ce0:	f001 feca 	bl	800ba78 <osMessagePut>
      break;
 8009ce4:	bf00      	nop
  }
}
 8009ce6:	bf00      	nop
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b086      	sub	sp, #24
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d00:	2300      	movs	r3, #0
 8009d02:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d002      	beq.n	8009d14 <CDC_ProcessReception+0x26>
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	d00e      	beq.n	8009d30 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009d12:	e051      	b.n	8009db8 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	6a19      	ldr	r1, [r3, #32]
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	8b5a      	ldrh	r2, [r3, #26]
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	7b1b      	ldrb	r3, [r3, #12]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f001 fd47 	bl	800b7b4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2204      	movs	r2, #4
 8009d2a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009d2e:	e043      	b.n	8009db8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	7b1b      	ldrb	r3, [r3, #12]
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f004 f920 	bl	800df7c <USBH_LL_GetURBState>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009d40:	7cfb      	ldrb	r3, [r7, #19]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d137      	bne.n	8009db6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	7b1b      	ldrb	r3, [r3, #12]
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f004 f883 	bl	800de58 <USBH_LL_GetLastXferSize>
 8009d52:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d016      	beq.n	8009d8c <CDC_ProcessReception+0x9e>
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	8b5b      	ldrh	r3, [r3, #26]
 8009d62:	461a      	mov	r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d910      	bls.n	8009d8c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	1ad2      	subs	r2, r2, r3
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	6a1a      	ldr	r2, [r3, #32]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	441a      	add	r2, r3
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2203      	movs	r2, #3
 8009d86:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8009d8a:	e006      	b.n	8009d9a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f81d 	bl	8009dd4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2204      	movs	r2, #4
 8009d9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009dae:	2200      	movs	r2, #0
 8009db0:	4619      	mov	r1, r3
 8009db2:	f001 fe61 	bl	800ba78 <osMessagePut>
      break;
 8009db6:	bf00      	nop
  }
}
 8009db8:	bf00      	nop
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009dfc:	b5b0      	push	{r4, r5, r7, lr}
 8009dfe:	b090      	sub	sp, #64	; 0x40
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	4613      	mov	r3, r2
 8009e08:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009e10:	2302      	movs	r3, #2
 8009e12:	e04d      	b.n	8009eb0 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	79fa      	ldrb	r2, [r7, #7]
 8009e18:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f000 f847 	bl	8009ec0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d003      	beq.n	8009e60 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8009e60:	4b15      	ldr	r3, [pc, #84]	; (8009eb8 <USBH_Init+0xbc>)
 8009e62:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8009e66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8009e6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e70:	2100      	movs	r1, #0
 8009e72:	4618      	mov	r0, r3
 8009e74:	f001 fdd8 	bl	800ba28 <osMessageCreate>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8009e80:	4b0e      	ldr	r3, [pc, #56]	; (8009ebc <USBH_Init+0xc0>)
 8009e82:	f107 0414 	add.w	r4, r7, #20
 8009e86:	461d      	mov	r5, r3
 8009e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009e90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8009e94:	f107 0314 	add.w	r3, r7, #20
 8009e98:	68f9      	ldr	r1, [r7, #12]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f001 fd64 	bl	800b968 <osThreadCreate>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f003 ff17 	bl	800dcdc <USBH_LL_Init>

  return USBH_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3740      	adds	r7, #64	; 0x40
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8009eb8:	08012d20 	.word	0x08012d20
 8009ebc:	08012d30 	.word	0x08012d30

08009ec0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009ecc:	2300      	movs	r3, #0
 8009ece:	60fb      	str	r3, [r7, #12]
 8009ed0:	e009      	b.n	8009ee6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	33e0      	adds	r3, #224	; 0xe0
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4413      	add	r3, r2
 8009edc:	2200      	movs	r2, #0
 8009ede:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	60fb      	str	r3, [r7, #12]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b0e      	cmp	r3, #14
 8009eea:	d9f2      	bls.n	8009ed2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009eec:	2300      	movs	r3, #0
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	e009      	b.n	8009f06 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009efc:	2200      	movs	r2, #0
 8009efe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	3301      	adds	r3, #1
 8009f04:	60fb      	str	r3, [r7, #12]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f0c:	d3f1      	bcc.n	8009ef2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2240      	movs	r2, #64	; 0x40
 8009f32:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d016      	beq.n	8009faa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10e      	bne.n	8009fa4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009f8c:	1c59      	adds	r1, r3, #1
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	33de      	adds	r3, #222	; 0xde
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	73fb      	strb	r3, [r7, #15]
 8009fa2:	e004      	b.n	8009fae <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	73fb      	strb	r3, [r7, #15]
 8009fa8:	e001      	b.n	8009fae <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009faa:	2302      	movs	r3, #2
 8009fac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009fd2:	78fa      	ldrb	r2, [r7, #3]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d204      	bcs.n	8009fe2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	78fa      	ldrb	r2, [r7, #3]
 8009fdc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009fe0:	e001      	b.n	8009fe6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b087      	sub	sp, #28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	4611      	mov	r1, r2
 800a000:	461a      	mov	r2, r3
 800a002:	4603      	mov	r3, r0
 800a004:	70fb      	strb	r3, [r7, #3]
 800a006:	460b      	mov	r3, r1
 800a008:	70bb      	strb	r3, [r7, #2]
 800a00a:	4613      	mov	r3, r2
 800a00c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a012:	2300      	movs	r3, #0
 800a014:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a01c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a01e:	e025      	b.n	800a06c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	221a      	movs	r2, #26
 800a024:	fb02 f303 	mul.w	r3, r2, r3
 800a028:	3308      	adds	r3, #8
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	4413      	add	r3, r2
 800a02e:	3302      	adds	r3, #2
 800a030:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	795b      	ldrb	r3, [r3, #5]
 800a036:	78fa      	ldrb	r2, [r7, #3]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d002      	beq.n	800a042 <USBH_FindInterface+0x4e>
 800a03c:	78fb      	ldrb	r3, [r7, #3]
 800a03e:	2bff      	cmp	r3, #255	; 0xff
 800a040:	d111      	bne.n	800a066 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a046:	78ba      	ldrb	r2, [r7, #2]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d002      	beq.n	800a052 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a04c:	78bb      	ldrb	r3, [r7, #2]
 800a04e:	2bff      	cmp	r3, #255	; 0xff
 800a050:	d109      	bne.n	800a066 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a056:	787a      	ldrb	r2, [r7, #1]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d002      	beq.n	800a062 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a05c:	787b      	ldrb	r3, [r7, #1]
 800a05e:	2bff      	cmp	r3, #255	; 0xff
 800a060:	d101      	bne.n	800a066 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a062:	7dfb      	ldrb	r3, [r7, #23]
 800a064:	e006      	b.n	800a074 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a066:	7dfb      	ldrb	r3, [r7, #23]
 800a068:	3301      	adds	r3, #1
 800a06a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a06c:	7dfb      	ldrb	r3, [r7, #23]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d9d6      	bls.n	800a020 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a072:	23ff      	movs	r3, #255	; 0xff
}
 800a074:	4618      	mov	r0, r3
 800a076:	371c      	adds	r7, #28
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f003 fe6d 	bl	800dd68 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a08e:	2101      	movs	r1, #1
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f003 ff86 	bl	800dfa2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b088      	sub	sp, #32
 800a0a4:	af04      	add	r7, sp, #16
 800a0a6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d102      	bne.n	800a0c2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2203      	movs	r2, #3
 800a0c0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b0b      	cmp	r3, #11
 800a0ca:	f200 823c 	bhi.w	800a546 <USBH_Process+0x4a6>
 800a0ce:	a201      	add	r2, pc, #4	; (adr r2, 800a0d4 <USBH_Process+0x34>)
 800a0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d4:	0800a105 	.word	0x0800a105
 800a0d8:	0800a153 	.word	0x0800a153
 800a0dc:	0800a1d7 	.word	0x0800a1d7
 800a0e0:	0800a4c5 	.word	0x0800a4c5
 800a0e4:	0800a547 	.word	0x0800a547
 800a0e8:	0800a297 	.word	0x0800a297
 800a0ec:	0800a44f 	.word	0x0800a44f
 800a0f0:	0800a2e9 	.word	0x0800a2e9
 800a0f4:	0800a325 	.word	0x0800a325
 800a0f8:	0800a35f 	.word	0x0800a35f
 800a0fc:	0800a3a7 	.word	0x0800a3a7
 800a100:	0800a4ad 	.word	0x0800a4ad
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 821c 	beq.w	800a54a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a118:	20c8      	movs	r0, #200	; 0xc8
 800a11a:	f003 ff89 	bl	800e030 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f003 fe7f 	bl	800de22 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a148:	2200      	movs	r2, #0
 800a14a:	4619      	mov	r1, r3
 800a14c:	f001 fc94 	bl	800ba78 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a150:	e1fb      	b.n	800a54a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d107      	bne.n	800a16c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2202      	movs	r2, #2
 800a168:	701a      	strb	r2, [r3, #0]
 800a16a:	e025      	b.n	800a1b8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a176:	d914      	bls.n	800a1a2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a17e:	3301      	adds	r3, #1
 800a180:	b2da      	uxtb	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d903      	bls.n	800a19a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	220d      	movs	r2, #13
 800a196:	701a      	strb	r2, [r3, #0]
 800a198:	e00e      	b.n	800a1b8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	701a      	strb	r2, [r3, #0]
 800a1a0:	e00a      	b.n	800a1b8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a1a8:	f103 020a 	add.w	r2, r3, #10
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a1b2:	200a      	movs	r0, #10
 800a1b4:	f003 ff3c 	bl	800e030 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	f001 fc52 	bl	800ba78 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a1d4:	e1c0      	b.n	800a558 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d005      	beq.n	800a1ec <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1e6:	2104      	movs	r1, #4
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a1ec:	2064      	movs	r0, #100	; 0x64
 800a1ee:	f003 ff1f 	bl	800e030 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f003 fdee 	bl	800ddd4 <USBH_LL_GetSpeed>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2205      	movs	r2, #5
 800a206:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a208:	2100      	movs	r1, #0
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f001 fb1f 	bl	800b84e <USBH_AllocPipe>
 800a210:	4603      	mov	r3, r0
 800a212:	461a      	mov	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a218:	2180      	movs	r1, #128	; 0x80
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f001 fb17 	bl	800b84e <USBH_AllocPipe>
 800a220:	4603      	mov	r3, r0
 800a222:	461a      	mov	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	7919      	ldrb	r1, [r3, #4]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a23c:	b292      	uxth	r2, r2
 800a23e:	9202      	str	r2, [sp, #8]
 800a240:	2200      	movs	r2, #0
 800a242:	9201      	str	r2, [sp, #4]
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	4603      	mov	r3, r0
 800a248:	2280      	movs	r2, #128	; 0x80
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f001 fad0 	bl	800b7f0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	7959      	ldrb	r1, [r3, #5]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a264:	b292      	uxth	r2, r2
 800a266:	9202      	str	r2, [sp, #8]
 800a268:	2200      	movs	r2, #0
 800a26a:	9201      	str	r2, [sp, #4]
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	4603      	mov	r3, r0
 800a270:	2200      	movs	r2, #0
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 fabc 	bl	800b7f0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a28c:	2200      	movs	r2, #0
 800a28e:	4619      	mov	r1, r3
 800a290:	f001 fbf2 	bl	800ba78 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a294:	e160      	b.n	800a558 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f964 	bl	800a564 <USBH_HandleEnum>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f040 8152 	bne.w	800a54e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d103      	bne.n	800a2c4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2208      	movs	r2, #8
 800a2c0:	701a      	strb	r2, [r3, #0]
 800a2c2:	e002      	b.n	800a2ca <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2207      	movs	r2, #7
 800a2c8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2205      	movs	r2, #5
 800a2ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a2de:	2200      	movs	r2, #0
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	f001 fbc9 	bl	800ba78 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a2e6:	e132      	b.n	800a54e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	f000 812f 	beq.w	800a552 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2208      	movs	r2, #8
 800a304:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2205      	movs	r2, #5
 800a30a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a31a:	2200      	movs	r2, #0
 800a31c:	4619      	mov	r1, r3
 800a31e:	f001 fbab 	bl	800ba78 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a322:	e116      	b.n	800a552 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fcf6 	bl	800ad20 <USBH_SetCfg>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d102      	bne.n	800a340 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2209      	movs	r2, #9
 800a33e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a354:	2200      	movs	r2, #0
 800a356:	4619      	mov	r1, r3
 800a358:	f001 fb8e 	bl	800ba78 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a35c:	e0fc      	b.n	800a558 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a364:	f003 0320 	and.w	r3, r3, #32
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00a      	beq.n	800a382 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a36c:	2101      	movs	r1, #1
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fcf9 	bl	800ad66 <USBH_SetFeature>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d106      	bne.n	800a388 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	220a      	movs	r2, #10
 800a37e:	701a      	strb	r2, [r3, #0]
 800a380:	e002      	b.n	800a388 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	220a      	movs	r2, #10
 800a386:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a39c:	2200      	movs	r2, #0
 800a39e:	4619      	mov	r1, r3
 800a3a0:	f001 fb6a 	bl	800ba78 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a3a4:	e0d8      	b.n	800a558 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d03f      	beq.n	800a430 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	73fb      	strb	r3, [r7, #15]
 800a3bc:	e016      	b.n	800a3ec <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a3be:	7bfa      	ldrb	r2, [r7, #15]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	32de      	adds	r2, #222	; 0xde
 800a3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c8:	791a      	ldrb	r2, [r3, #4]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d108      	bne.n	800a3e6 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a3d4:	7bfa      	ldrb	r2, [r7, #15]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	32de      	adds	r2, #222	; 0xde
 800a3da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a3e4:	e005      	b.n	800a3f2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	73fb      	strb	r3, [r7, #15]
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0e5      	beq.n	800a3be <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d016      	beq.n	800a42a <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	4798      	blx	r3
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d109      	bne.n	800a422 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2206      	movs	r2, #6
 800a412:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a41a:	2103      	movs	r1, #3
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	4798      	blx	r3
 800a420:	e006      	b.n	800a430 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	220d      	movs	r2, #13
 800a426:	701a      	strb	r2, [r3, #0]
 800a428:	e002      	b.n	800a430 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	220d      	movs	r2, #13
 800a42e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2205      	movs	r2, #5
 800a434:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a444:	2200      	movs	r2, #0
 800a446:	4619      	mov	r1, r3
 800a448:	f001 fb16 	bl	800ba78 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a44c:	e084      	b.n	800a558 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a454:	2b00      	cmp	r3, #0
 800a456:	d017      	beq.n	800a488 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	4798      	blx	r3
 800a464:	4603      	mov	r3, r0
 800a466:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d103      	bne.n	800a478 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	220b      	movs	r2, #11
 800a474:	701a      	strb	r2, [r3, #0]
 800a476:	e00a      	b.n	800a48e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800a478:	7bbb      	ldrb	r3, [r7, #14]
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d106      	bne.n	800a48e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	220d      	movs	r2, #13
 800a484:	701a      	strb	r2, [r3, #0]
 800a486:	e002      	b.n	800a48e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	220d      	movs	r2, #13
 800a48c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2205      	movs	r2, #5
 800a492:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	f001 fae7 	bl	800ba78 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a4aa:	e055      	b.n	800a558 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d04f      	beq.n	800a556 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	4798      	blx	r3
      }
      break;
 800a4c2:	e048      	b.n	800a556 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff fcf7 	bl	8009ec0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d009      	beq.n	800a4f0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d005      	beq.n	800a506 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a500:	2105      	movs	r1, #5
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d107      	bne.n	800a522 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7ff fdb0 	bl	800a080 <USBH_Start>
 800a520:	e002      	b.n	800a528 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f003 fc20 	bl	800dd68 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a53c:	2200      	movs	r2, #0
 800a53e:	4619      	mov	r1, r3
 800a540:	f001 fa9a 	bl	800ba78 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a544:	e008      	b.n	800a558 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a546:	bf00      	nop
 800a548:	e006      	b.n	800a558 <USBH_Process+0x4b8>
      break;
 800a54a:	bf00      	nop
 800a54c:	e004      	b.n	800a558 <USBH_Process+0x4b8>
      break;
 800a54e:	bf00      	nop
 800a550:	e002      	b.n	800a558 <USBH_Process+0x4b8>
    break;
 800a552:	bf00      	nop
 800a554:	e000      	b.n	800a558 <USBH_Process+0x4b8>
      break;
 800a556:	bf00      	nop
  }
  return USBH_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop

0800a564 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b088      	sub	sp, #32
 800a568:	af04      	add	r7, sp, #16
 800a56a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a56c:	2301      	movs	r3, #1
 800a56e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a570:	2301      	movs	r3, #1
 800a572:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	785b      	ldrb	r3, [r3, #1]
 800a578:	2b07      	cmp	r3, #7
 800a57a:	f200 8208 	bhi.w	800a98e <USBH_HandleEnum+0x42a>
 800a57e:	a201      	add	r2, pc, #4	; (adr r2, 800a584 <USBH_HandleEnum+0x20>)
 800a580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a584:	0800a5a5 	.word	0x0800a5a5
 800a588:	0800a663 	.word	0x0800a663
 800a58c:	0800a6cd 	.word	0x0800a6cd
 800a590:	0800a75b 	.word	0x0800a75b
 800a594:	0800a7c5 	.word	0x0800a7c5
 800a598:	0800a835 	.word	0x0800a835
 800a59c:	0800a8d1 	.word	0x0800a8d1
 800a5a0:	0800a94f 	.word	0x0800a94f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a5a4:	2108      	movs	r1, #8
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 faea 	bl	800ab80 <USBH_Get_DevDesc>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5b0:	7bbb      	ldrb	r3, [r7, #14]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d130      	bne.n	800a618 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	7919      	ldrb	r1, [r3, #4]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5da:	b292      	uxth	r2, r2
 800a5dc:	9202      	str	r2, [sp, #8]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	9201      	str	r2, [sp, #4]
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2280      	movs	r2, #128	; 0x80
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f001 f901 	bl	800b7f0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	7959      	ldrb	r1, [r3, #5]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a602:	b292      	uxth	r2, r2
 800a604:	9202      	str	r2, [sp, #8]
 800a606:	2200      	movs	r2, #0
 800a608:	9201      	str	r2, [sp, #4]
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	4603      	mov	r3, r0
 800a60e:	2200      	movs	r2, #0
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f001 f8ed 	bl	800b7f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a616:	e1bc      	b.n	800a992 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a618:	7bbb      	ldrb	r3, [r7, #14]
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	f040 81b9 	bne.w	800a992 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a626:	3301      	adds	r3, #1
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a636:	2b03      	cmp	r3, #3
 800a638:	d903      	bls.n	800a642 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	220d      	movs	r2, #13
 800a63e:	701a      	strb	r2, [r3, #0]
      break;
 800a640:	e1a7      	b.n	800a992 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	795b      	ldrb	r3, [r3, #5]
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f001 f921 	bl	800b890 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	791b      	ldrb	r3, [r3, #4]
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f001 f91b 	bl	800b890 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	701a      	strb	r2, [r3, #0]
      break;
 800a660:	e197      	b.n	800a992 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a662:	2112      	movs	r1, #18
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fa8b 	bl	800ab80 <USBH_Get_DevDesc>
 800a66a:	4603      	mov	r3, r0
 800a66c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a66e:	7bbb      	ldrb	r3, [r7, #14]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d103      	bne.n	800a67c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2202      	movs	r2, #2
 800a678:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a67a:	e18c      	b.n	800a996 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
 800a67e:	2b03      	cmp	r3, #3
 800a680:	f040 8189 	bne.w	800a996 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a68a:	3301      	adds	r3, #1
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	d903      	bls.n	800a6a6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	220d      	movs	r2, #13
 800a6a2:	701a      	strb	r2, [r3, #0]
      break;
 800a6a4:	e177      	b.n	800a996 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	795b      	ldrb	r3, [r3, #5]
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f001 f8ef 	bl	800b890 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	791b      	ldrb	r3, [r3, #4]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f001 f8e9 	bl	800b890 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	701a      	strb	r2, [r3, #0]
      break;
 800a6ca:	e164      	b.n	800a996 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a6cc:	2101      	movs	r1, #1
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fb02 	bl	800acd8 <USBH_SetAddress>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6d8:	7bbb      	ldrb	r3, [r7, #14]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d132      	bne.n	800a744 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a6de:	2002      	movs	r0, #2
 800a6e0:	f003 fca6 	bl	800e030 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2203      	movs	r2, #3
 800a6f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	7919      	ldrb	r1, [r3, #4]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a706:	b292      	uxth	r2, r2
 800a708:	9202      	str	r2, [sp, #8]
 800a70a:	2200      	movs	r2, #0
 800a70c:	9201      	str	r2, [sp, #4]
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	4603      	mov	r3, r0
 800a712:	2280      	movs	r2, #128	; 0x80
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f001 f86b 	bl	800b7f0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	7959      	ldrb	r1, [r3, #5]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a72e:	b292      	uxth	r2, r2
 800a730:	9202      	str	r2, [sp, #8]
 800a732:	2200      	movs	r2, #0
 800a734:	9201      	str	r2, [sp, #4]
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	4603      	mov	r3, r0
 800a73a:	2200      	movs	r2, #0
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f001 f857 	bl	800b7f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a742:	e12a      	b.n	800a99a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a744:	7bbb      	ldrb	r3, [r7, #14]
 800a746:	2b03      	cmp	r3, #3
 800a748:	f040 8127 	bne.w	800a99a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	220d      	movs	r2, #13
 800a750:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	705a      	strb	r2, [r3, #1]
      break;
 800a758:	e11f      	b.n	800a99a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a75a:	2109      	movs	r1, #9
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 fa37 	bl	800abd0 <USBH_Get_CfgDesc>
 800a762:	4603      	mov	r3, r0
 800a764:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a766:	7bbb      	ldrb	r3, [r7, #14]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d103      	bne.n	800a774 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2204      	movs	r2, #4
 800a770:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a772:	e114      	b.n	800a99e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a774:	7bbb      	ldrb	r3, [r7, #14]
 800a776:	2b03      	cmp	r3, #3
 800a778:	f040 8111 	bne.w	800a99e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a782:	3301      	adds	r3, #1
 800a784:	b2da      	uxtb	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a792:	2b03      	cmp	r3, #3
 800a794:	d903      	bls.n	800a79e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	220d      	movs	r2, #13
 800a79a:	701a      	strb	r2, [r3, #0]
      break;
 800a79c:	e0ff      	b.n	800a99e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	795b      	ldrb	r3, [r3, #5]
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 f873 	bl	800b890 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	791b      	ldrb	r3, [r3, #4]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f001 f86d 	bl	800b890 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	701a      	strb	r2, [r3, #0]
      break;
 800a7c2:	e0ec      	b.n	800a99e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 f9ff 	bl	800abd0 <USBH_Get_CfgDesc>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7d6:	7bbb      	ldrb	r3, [r7, #14]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d103      	bne.n	800a7e4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2205      	movs	r2, #5
 800a7e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a7e2:	e0de      	b.n	800a9a2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7e4:	7bbb      	ldrb	r3, [r7, #14]
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	f040 80db 	bne.w	800a9a2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a802:	2b03      	cmp	r3, #3
 800a804:	d903      	bls.n	800a80e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	220d      	movs	r2, #13
 800a80a:	701a      	strb	r2, [r3, #0]
      break;
 800a80c:	e0c9      	b.n	800a9a2 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	795b      	ldrb	r3, [r3, #5]
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f001 f83b 	bl	800b890 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	791b      	ldrb	r3, [r3, #4]
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f001 f835 	bl	800b890 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	701a      	strb	r2, [r3, #0]
      break;
 800a832:	e0b6      	b.n	800a9a2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d036      	beq.n	800a8ac <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a84a:	23ff      	movs	r3, #255	; 0xff
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f9e3 	bl	800ac18 <USBH_Get_StringDesc>
 800a852:	4603      	mov	r3, r0
 800a854:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d111      	bne.n	800a880 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2206      	movs	r2, #6
 800a860:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2205      	movs	r2, #5
 800a866:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a876:	2200      	movs	r2, #0
 800a878:	4619      	mov	r1, r3
 800a87a:	f001 f8fd 	bl	800ba78 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a87e:	e092      	b.n	800a9a6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	2b03      	cmp	r3, #3
 800a884:	f040 808f 	bne.w	800a9a6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2206      	movs	r2, #6
 800a88c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2205      	movs	r2, #5
 800a892:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	f001 f8e7 	bl	800ba78 <osMessagePut>
      break;
 800a8aa:	e07c      	b.n	800a9a6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2206      	movs	r2, #6
 800a8b0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2205      	movs	r2, #5
 800a8b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	f001 f8d5 	bl	800ba78 <osMessagePut>
      break;
 800a8ce:	e06a      	b.n	800a9a6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d027      	beq.n	800a92a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a8e6:	23ff      	movs	r3, #255	; 0xff
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f995 	bl	800ac18 <USBH_Get_StringDesc>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d103      	bne.n	800a900 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2207      	movs	r2, #7
 800a8fc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a8fe:	e054      	b.n	800a9aa <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a900:	7bbb      	ldrb	r3, [r7, #14]
 800a902:	2b03      	cmp	r3, #3
 800a904:	d151      	bne.n	800a9aa <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2207      	movs	r2, #7
 800a90a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2205      	movs	r2, #5
 800a910:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a920:	2200      	movs	r2, #0
 800a922:	4619      	mov	r1, r3
 800a924:	f001 f8a8 	bl	800ba78 <osMessagePut>
      break;
 800a928:	e03f      	b.n	800a9aa <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2207      	movs	r2, #7
 800a92e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2205      	movs	r2, #5
 800a934:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a944:	2200      	movs	r2, #0
 800a946:	4619      	mov	r1, r3
 800a948:	f001 f896 	bl	800ba78 <osMessagePut>
      break;
 800a94c:	e02d      	b.n	800a9aa <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a954:	2b00      	cmp	r3, #0
 800a956:	d017      	beq.n	800a988 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a964:	23ff      	movs	r3, #255	; 0xff
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f956 	bl	800ac18 <USBH_Get_StringDesc>
 800a96c:	4603      	mov	r3, r0
 800a96e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d102      	bne.n	800a97c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a97a:	e018      	b.n	800a9ae <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d115      	bne.n	800a9ae <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a982:	2300      	movs	r3, #0
 800a984:	73fb      	strb	r3, [r7, #15]
      break;
 800a986:	e012      	b.n	800a9ae <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	73fb      	strb	r3, [r7, #15]
      break;
 800a98c:	e00f      	b.n	800a9ae <USBH_HandleEnum+0x44a>

    default:
      break;
 800a98e:	bf00      	nop
 800a990:	e00e      	b.n	800a9b0 <USBH_HandleEnum+0x44c>
      break;
 800a992:	bf00      	nop
 800a994:	e00c      	b.n	800a9b0 <USBH_HandleEnum+0x44c>
      break;
 800a996:	bf00      	nop
 800a998:	e00a      	b.n	800a9b0 <USBH_HandleEnum+0x44c>
      break;
 800a99a:	bf00      	nop
 800a99c:	e008      	b.n	800a9b0 <USBH_HandleEnum+0x44c>
      break;
 800a99e:	bf00      	nop
 800a9a0:	e006      	b.n	800a9b0 <USBH_HandleEnum+0x44c>
      break;
 800a9a2:	bf00      	nop
 800a9a4:	e004      	b.n	800a9b0 <USBH_HandleEnum+0x44c>
      break;
 800a9a6:	bf00      	nop
 800a9a8:	e002      	b.n	800a9b0 <USBH_HandleEnum+0x44c>
      break;
 800a9aa:	bf00      	nop
 800a9ac:	e000      	b.n	800a9b0 <USBH_HandleEnum+0x44c>
      break;
 800a9ae:	bf00      	nop
  }
  return Status;
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop

0800a9bc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	683a      	ldr	r2, [r7, #0]
 800a9ca:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a9ce:	bf00      	nop
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b082      	sub	sp, #8
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9e8:	1c5a      	adds	r2, r3, #1
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 f804 	bl	800a9fe <USBH_HandleSof>
}
 800a9f6:	bf00      	nop
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b082      	sub	sp, #8
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	2b0b      	cmp	r3, #11
 800aa0e:	d10a      	bne.n	800aa26 <USBH_HandleSof+0x28>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d005      	beq.n	800aa26 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa20:	699b      	ldr	r3, [r3, #24]
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	4798      	blx	r3
  }
}
 800aa26:	bf00      	nop
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b082      	sub	sp, #8
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa52:	2200      	movs	r2, #0
 800aa54:	4619      	mov	r1, r3
 800aa56:	f001 f80f 	bl	800ba78 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800aa5a:	bf00      	nop
}
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aa62:	b480      	push	{r7}
 800aa64:	b083      	sub	sp, #12
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800aa72:	bf00      	nop
}
 800aa74:	370c      	adds	r7, #12
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b082      	sub	sp, #8
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aab2:	2200      	movs	r2, #0
 800aab4:	4619      	mov	r1, r3
 800aab6:	f000 ffdf 	bl	800ba78 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f003 f95a 	bl	800dd9e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	791b      	ldrb	r3, [r3, #4]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fecd 	bl	800b890 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	795b      	ldrb	r3, [r3, #5]
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fec7 	bl	800b890 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab16:	2200      	movs	r2, #0
 800ab18:	4619      	mov	r1, r3
 800ab1a:	f000 ffad 	bl	800ba78 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800ab36:	f107 030c 	add.w	r3, r7, #12
 800ab3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 ffda 	bl	800baf8 <osMessageGet>
    if (event.status == osEventMessage)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2b10      	cmp	r3, #16
 800ab48:	d1f2      	bne.n	800ab30 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff faa8 	bl	800a0a0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800ab50:	e7ee      	b.n	800ab30 <USBH_Process_OS+0x8>

0800ab52 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b082      	sub	sp, #8
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab6e:	2200      	movs	r2, #0
 800ab70:	4619      	mov	r1, r3
 800ab72:	f000 ff81 	bl	800ba78 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af02      	add	r7, sp, #8
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ab92:	78fb      	ldrb	r3, [r7, #3]
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab9e:	2100      	movs	r1, #0
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f864 	bl	800ac6e <USBH_GetDescriptor>
 800aba6:	4603      	mov	r3, r0
 800aba8:	73fb      	strb	r3, [r7, #15]
 800abaa:	7bfb      	ldrb	r3, [r7, #15]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d10a      	bne.n	800abc6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800abbc:	78fa      	ldrb	r2, [r7, #3]
 800abbe:	b292      	uxth	r2, r2
 800abc0:	4619      	mov	r1, r3
 800abc2:	f000 f918 	bl	800adf6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af02      	add	r7, sp, #8
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	331c      	adds	r3, #28
 800abe0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800abe2:	887b      	ldrh	r3, [r7, #2]
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abec:	2100      	movs	r1, #0
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 f83d 	bl	800ac6e <USBH_GetDescriptor>
 800abf4:	4603      	mov	r3, r0
 800abf6:	72fb      	strb	r3, [r7, #11]
 800abf8:	7afb      	ldrb	r3, [r7, #11]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d107      	bne.n	800ac0e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ac04:	887a      	ldrh	r2, [r7, #2]
 800ac06:	68f9      	ldr	r1, [r7, #12]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 f964 	bl	800aed6 <USBH_ParseCfgDesc>
  }

  return status;
 800ac0e:	7afb      	ldrb	r3, [r7, #11]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b088      	sub	sp, #32
 800ac1c:	af02      	add	r7, sp, #8
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	607a      	str	r2, [r7, #4]
 800ac22:	461a      	mov	r2, r3
 800ac24:	460b      	mov	r3, r1
 800ac26:	72fb      	strb	r3, [r7, #11]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ac34:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ac3c:	893b      	ldrh	r3, [r7, #8]
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	460b      	mov	r3, r1
 800ac42:	2100      	movs	r1, #0
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f000 f812 	bl	800ac6e <USBH_GetDescriptor>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	75fb      	strb	r3, [r7, #23]
 800ac4e:	7dfb      	ldrb	r3, [r7, #23]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d107      	bne.n	800ac64 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ac5a:	893a      	ldrh	r2, [r7, #8]
 800ac5c:	6879      	ldr	r1, [r7, #4]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 fa37 	bl	800b0d2 <USBH_ParseStringDesc>
  }

  return status;
 800ac64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3718      	adds	r7, #24
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	60f8      	str	r0, [r7, #12]
 800ac76:	607b      	str	r3, [r7, #4]
 800ac78:	460b      	mov	r3, r1
 800ac7a:	72fb      	strb	r3, [r7, #11]
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	789b      	ldrb	r3, [r3, #2]
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d11c      	bne.n	800acc2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ac88:	7afb      	ldrb	r3, [r7, #11]
 800ac8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2206      	movs	r2, #6
 800ac98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	893a      	ldrh	r2, [r7, #8]
 800ac9e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aca0:	893b      	ldrh	r3, [r7, #8]
 800aca2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acaa:	d104      	bne.n	800acb6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f240 4209 	movw	r2, #1033	; 0x409
 800acb2:	829a      	strh	r2, [r3, #20]
 800acb4:	e002      	b.n	800acbc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	8b3a      	ldrh	r2, [r7, #24]
 800acc0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800acc2:	8b3b      	ldrh	r3, [r7, #24]
 800acc4:	461a      	mov	r2, r3
 800acc6:	6879      	ldr	r1, [r7, #4]
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f000 fa50 	bl	800b16e <USBH_CtlReq>
 800acce:	4603      	mov	r3, r0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	789b      	ldrb	r3, [r3, #2]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d10f      	bne.n	800ad0c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2205      	movs	r2, #5
 800acf6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	2100      	movs	r1, #0
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fa2c 	bl	800b16e <USBH_CtlReq>
 800ad16:	4603      	mov	r3, r0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	460b      	mov	r3, r1
 800ad2a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	789b      	ldrb	r3, [r3, #2]
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d10e      	bne.n	800ad52 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2209      	movs	r2, #9
 800ad3e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	887a      	ldrh	r2, [r7, #2]
 800ad44:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ad52:	2200      	movs	r2, #0
 800ad54:	2100      	movs	r1, #0
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fa09 	bl	800b16e <USBH_CtlReq>
 800ad5c:	4603      	mov	r3, r0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b082      	sub	sp, #8
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	460b      	mov	r3, r1
 800ad70:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	789b      	ldrb	r3, [r3, #2]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d10f      	bne.n	800ad9a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2203      	movs	r2, #3
 800ad84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ad86:	78fb      	ldrb	r3, [r7, #3]
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f9e5 	bl	800b16e <USBH_CtlReq>
 800ada4:	4603      	mov	r3, r0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b082      	sub	sp, #8
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	460b      	mov	r3, r1
 800adb8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	789b      	ldrb	r3, [r3, #2]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d10f      	bne.n	800ade2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2202      	movs	r2, #2
 800adc6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800add4:	78fb      	ldrb	r3, [r7, #3]
 800add6:	b29a      	uxth	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ade2:	2200      	movs	r2, #0
 800ade4:	2100      	movs	r1, #0
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f9c1 	bl	800b16e <USBH_CtlReq>
 800adec:	4603      	mov	r3, r0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b085      	sub	sp, #20
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	60f8      	str	r0, [r7, #12]
 800adfe:	60b9      	str	r1, [r7, #8]
 800ae00:	4613      	mov	r3, r2
 800ae02:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	781a      	ldrb	r2, [r3, #0]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	785a      	ldrb	r2, [r3, #1]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	3302      	adds	r3, #2
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	3303      	adds	r3, #3
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	021b      	lsls	r3, r3, #8
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	791a      	ldrb	r2, [r3, #4]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	795a      	ldrb	r2, [r3, #5]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	799a      	ldrb	r2, [r3, #6]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	79da      	ldrb	r2, [r3, #7]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ae50:	88fb      	ldrh	r3, [r7, #6]
 800ae52:	2b08      	cmp	r3, #8
 800ae54:	d939      	bls.n	800aeca <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	3308      	adds	r3, #8
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	b29a      	uxth	r2, r3
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	3309      	adds	r3, #9
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	021b      	lsls	r3, r3, #8
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	330a      	adds	r3, #10
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	330b      	adds	r3, #11
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	021b      	lsls	r3, r3, #8
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	4313      	orrs	r3, r2
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	330c      	adds	r3, #12
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	330d      	adds	r3, #13
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	021b      	lsls	r3, r3, #8
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	4313      	orrs	r3, r2
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	7b9a      	ldrb	r2, [r3, #14]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	7bda      	ldrb	r2, [r3, #15]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	7c1a      	ldrb	r2, [r3, #16]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	7c5a      	ldrb	r2, [r3, #17]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	745a      	strb	r2, [r3, #17]
  }
}
 800aeca:	bf00      	nop
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b08a      	sub	sp, #40	; 0x28
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	4613      	mov	r3, r2
 800aee2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800aee8:	2300      	movs	r3, #0
 800aeea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800aeee:	2300      	movs	r3, #0
 800aef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	781a      	ldrb	r2, [r3, #0]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	785a      	ldrb	r2, [r3, #1]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	3302      	adds	r3, #2
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	b29a      	uxth	r2, r3
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	3303      	adds	r3, #3
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	b29b      	uxth	r3, r3
 800af18:	021b      	lsls	r3, r3, #8
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	4313      	orrs	r3, r2
 800af1e:	b29a      	uxth	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	791a      	ldrb	r2, [r3, #4]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	795a      	ldrb	r2, [r3, #5]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	799a      	ldrb	r2, [r3, #6]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	79da      	ldrb	r2, [r3, #7]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	7a1a      	ldrb	r2, [r3, #8]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800af4c:	88fb      	ldrh	r3, [r7, #6]
 800af4e:	2b09      	cmp	r3, #9
 800af50:	d95f      	bls.n	800b012 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800af52:	2309      	movs	r3, #9
 800af54:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800af56:	2300      	movs	r3, #0
 800af58:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800af5a:	e051      	b.n	800b000 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800af5c:	f107 0316 	add.w	r3, r7, #22
 800af60:	4619      	mov	r1, r3
 800af62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af64:	f000 f8e8 	bl	800b138 <USBH_GetNextDesc>
 800af68:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6c:	785b      	ldrb	r3, [r3, #1]
 800af6e:	2b04      	cmp	r3, #4
 800af70:	d146      	bne.n	800b000 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800af72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af76:	221a      	movs	r2, #26
 800af78:	fb02 f303 	mul.w	r3, r2, r3
 800af7c:	3308      	adds	r3, #8
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	4413      	add	r3, r2
 800af82:	3302      	adds	r3, #2
 800af84:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800af86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af88:	69f8      	ldr	r0, [r7, #28]
 800af8a:	f000 f846 	bl	800b01a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800af8e:	2300      	movs	r3, #0
 800af90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800af94:	2300      	movs	r3, #0
 800af96:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800af98:	e022      	b.n	800afe0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800af9a:	f107 0316 	add.w	r3, r7, #22
 800af9e:	4619      	mov	r1, r3
 800afa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afa2:	f000 f8c9 	bl	800b138 <USBH_GetNextDesc>
 800afa6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800afa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afaa:	785b      	ldrb	r3, [r3, #1]
 800afac:	2b05      	cmp	r3, #5
 800afae:	d117      	bne.n	800afe0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800afb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800afb4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800afb8:	3201      	adds	r2, #1
 800afba:	00d2      	lsls	r2, r2, #3
 800afbc:	211a      	movs	r1, #26
 800afbe:	fb01 f303 	mul.w	r3, r1, r3
 800afc2:	4413      	add	r3, r2
 800afc4:	3308      	adds	r3, #8
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	4413      	add	r3, r2
 800afca:	3304      	adds	r3, #4
 800afcc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800afce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afd0:	69b8      	ldr	r0, [r7, #24]
 800afd2:	f000 f851 	bl	800b078 <USBH_ParseEPDesc>
            ep_ix++;
 800afd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800afda:	3301      	adds	r3, #1
 800afdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	791b      	ldrb	r3, [r3, #4]
 800afe4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800afe8:	429a      	cmp	r2, r3
 800afea:	d204      	bcs.n	800aff6 <USBH_ParseCfgDesc+0x120>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	885a      	ldrh	r2, [r3, #2]
 800aff0:	8afb      	ldrh	r3, [r7, #22]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d8d1      	bhi.n	800af9a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800aff6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800affa:	3301      	adds	r3, #1
 800affc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b004:	2b01      	cmp	r3, #1
 800b006:	d804      	bhi.n	800b012 <USBH_ParseCfgDesc+0x13c>
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	885a      	ldrh	r2, [r3, #2]
 800b00c:	8afb      	ldrh	r3, [r7, #22]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d8a4      	bhi.n	800af5c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b012:	bf00      	nop
 800b014:	3728      	adds	r7, #40	; 0x28
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b01a:	b480      	push	{r7}
 800b01c:	b083      	sub	sp, #12
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	781a      	ldrb	r2, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	785a      	ldrb	r2, [r3, #1]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	789a      	ldrb	r2, [r3, #2]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	78da      	ldrb	r2, [r3, #3]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	791a      	ldrb	r2, [r3, #4]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	795a      	ldrb	r2, [r3, #5]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	799a      	ldrb	r2, [r3, #6]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	79da      	ldrb	r2, [r3, #7]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	7a1a      	ldrb	r2, [r3, #8]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	721a      	strb	r2, [r3, #8]
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	781a      	ldrb	r2, [r3, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	785a      	ldrb	r2, [r3, #1]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	789a      	ldrb	r2, [r3, #2]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	78da      	ldrb	r2, [r3, #3]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	3305      	adds	r3, #5
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	021b      	lsls	r3, r3, #8
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	799a      	ldrb	r2, [r3, #6]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	719a      	strb	r2, [r3, #6]
}
 800b0c6:	bf00      	nop
 800b0c8:	370c      	adds	r7, #12
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr

0800b0d2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b0d2:	b480      	push	{r7}
 800b0d4:	b087      	sub	sp, #28
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	60f8      	str	r0, [r7, #12]
 800b0da:	60b9      	str	r1, [r7, #8]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	2b03      	cmp	r3, #3
 800b0e8:	d120      	bne.n	800b12c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	1e9a      	subs	r2, r3, #2
 800b0f0:	88fb      	ldrh	r3, [r7, #6]
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	bf28      	it	cs
 800b0f6:	4613      	movcs	r3, r2
 800b0f8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3302      	adds	r3, #2
 800b0fe:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b100:	2300      	movs	r3, #0
 800b102:	82fb      	strh	r3, [r7, #22]
 800b104:	e00b      	b.n	800b11e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b106:	8afb      	ldrh	r3, [r7, #22]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	4413      	add	r3, r2
 800b10c:	781a      	ldrb	r2, [r3, #0]
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	3301      	adds	r3, #1
 800b116:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b118:	8afb      	ldrh	r3, [r7, #22]
 800b11a:	3302      	adds	r3, #2
 800b11c:	82fb      	strh	r3, [r7, #22]
 800b11e:	8afa      	ldrh	r2, [r7, #22]
 800b120:	8abb      	ldrh	r3, [r7, #20]
 800b122:	429a      	cmp	r2, r3
 800b124:	d3ef      	bcc.n	800b106 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2200      	movs	r2, #0
 800b12a:	701a      	strb	r2, [r3, #0]
  }
}
 800b12c:	bf00      	nop
 800b12e:	371c      	adds	r7, #28
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	881a      	ldrh	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	4413      	add	r3, r2
 800b14e:	b29a      	uxth	r2, r3
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4413      	add	r3, r2
 800b15e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b160:	68fb      	ldr	r3, [r7, #12]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b086      	sub	sp, #24
 800b172:	af00      	add	r7, sp, #0
 800b174:	60f8      	str	r0, [r7, #12]
 800b176:	60b9      	str	r1, [r7, #8]
 800b178:	4613      	mov	r3, r2
 800b17a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b17c:	2301      	movs	r3, #1
 800b17e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	789b      	ldrb	r3, [r3, #2]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d002      	beq.n	800b18e <USBH_CtlReq+0x20>
 800b188:	2b02      	cmp	r3, #2
 800b18a:	d01d      	beq.n	800b1c8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b18c:	e043      	b.n	800b216 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	88fa      	ldrh	r2, [r7, #6]
 800b198:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2201      	movs	r2, #1
 800b19e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2203      	movs	r2, #3
 800b1ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b1be:	2200      	movs	r2, #0
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	f000 fc59 	bl	800ba78 <osMessagePut>
      break;
 800b1c6:	e026      	b.n	800b216 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f000 f829 	bl	800b220 <USBH_HandleControl>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b1d2:	7dfb      	ldrb	r3, [r7, #23]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d002      	beq.n	800b1de <USBH_CtlReq+0x70>
 800b1d8:	7dfb      	ldrb	r3, [r7, #23]
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	d106      	bne.n	800b1ec <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	761a      	strb	r2, [r3, #24]
 800b1ea:	e005      	b.n	800b1f8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b1ec:	7dfb      	ldrb	r3, [r7, #23]
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d102      	bne.n	800b1f8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2203      	movs	r2, #3
 800b1fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b20c:	2200      	movs	r2, #0
 800b20e:	4619      	mov	r1, r3
 800b210:	f000 fc32 	bl	800ba78 <osMessagePut>
      break;
 800b214:	bf00      	nop
  }
  return status;
 800b216:	7dfb      	ldrb	r3, [r7, #23]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3718      	adds	r7, #24
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af02      	add	r7, sp, #8
 800b226:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b228:	2301      	movs	r3, #1
 800b22a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b22c:	2300      	movs	r3, #0
 800b22e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	7e1b      	ldrb	r3, [r3, #24]
 800b234:	3b01      	subs	r3, #1
 800b236:	2b0a      	cmp	r3, #10
 800b238:	f200 8229 	bhi.w	800b68e <USBH_HandleControl+0x46e>
 800b23c:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <USBH_HandleControl+0x24>)
 800b23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b242:	bf00      	nop
 800b244:	0800b271 	.word	0x0800b271
 800b248:	0800b28b 	.word	0x0800b28b
 800b24c:	0800b32d 	.word	0x0800b32d
 800b250:	0800b353 	.word	0x0800b353
 800b254:	0800b3df 	.word	0x0800b3df
 800b258:	0800b409 	.word	0x0800b409
 800b25c:	0800b4cb 	.word	0x0800b4cb
 800b260:	0800b4ed 	.word	0x0800b4ed
 800b264:	0800b57f 	.word	0x0800b57f
 800b268:	0800b5a5 	.word	0x0800b5a5
 800b26c:	0800b637 	.word	0x0800b637
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f103 0110 	add.w	r1, r3, #16
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	795b      	ldrb	r3, [r3, #5]
 800b27a:	461a      	mov	r2, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fa17 	bl	800b6b0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2202      	movs	r2, #2
 800b286:	761a      	strb	r2, [r3, #24]
      break;
 800b288:	e20c      	b.n	800b6a4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	795b      	ldrb	r3, [r3, #5]
 800b28e:	4619      	mov	r1, r3
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f002 fe73 	bl	800df7c <USBH_LL_GetURBState>
 800b296:	4603      	mov	r3, r0
 800b298:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b29a:	7bbb      	ldrb	r3, [r7, #14]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d12c      	bne.n	800b2fa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	7c1b      	ldrb	r3, [r3, #16]
 800b2a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b2a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	8adb      	ldrh	r3, [r3, #22]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00a      	beq.n	800b2c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b2b2:	7b7b      	ldrb	r3, [r7, #13]
 800b2b4:	2b80      	cmp	r3, #128	; 0x80
 800b2b6:	d103      	bne.n	800b2c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2203      	movs	r2, #3
 800b2bc:	761a      	strb	r2, [r3, #24]
 800b2be:	e00d      	b.n	800b2dc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2205      	movs	r2, #5
 800b2c4:	761a      	strb	r2, [r3, #24]
 800b2c6:	e009      	b.n	800b2dc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b2c8:	7b7b      	ldrb	r3, [r7, #13]
 800b2ca:	2b80      	cmp	r3, #128	; 0x80
 800b2cc:	d103      	bne.n	800b2d6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2209      	movs	r2, #9
 800b2d2:	761a      	strb	r2, [r3, #24]
 800b2d4:	e002      	b.n	800b2dc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2207      	movs	r2, #7
 800b2da:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2203      	movs	r2, #3
 800b2e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	f000 fbc0 	bl	800ba78 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b2f8:	e1cb      	b.n	800b692 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b2fa:	7bbb      	ldrb	r3, [r7, #14]
 800b2fc:	2b04      	cmp	r3, #4
 800b2fe:	d003      	beq.n	800b308 <USBH_HandleControl+0xe8>
 800b300:	7bbb      	ldrb	r3, [r7, #14]
 800b302:	2b02      	cmp	r3, #2
 800b304:	f040 81c5 	bne.w	800b692 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	220b      	movs	r2, #11
 800b30c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2203      	movs	r2, #3
 800b312:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b322:	2200      	movs	r2, #0
 800b324:	4619      	mov	r1, r3
 800b326:	f000 fba7 	bl	800ba78 <osMessagePut>
      break;
 800b32a:	e1b2      	b.n	800b692 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b332:	b29a      	uxth	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6899      	ldr	r1, [r3, #8]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	899a      	ldrh	r2, [r3, #12]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	791b      	ldrb	r3, [r3, #4]
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 f9f2 	bl	800b72e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2204      	movs	r2, #4
 800b34e:	761a      	strb	r2, [r3, #24]
      break;
 800b350:	e1a8      	b.n	800b6a4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	791b      	ldrb	r3, [r3, #4]
 800b356:	4619      	mov	r1, r3
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f002 fe0f 	bl	800df7c <USBH_LL_GetURBState>
 800b35e:	4603      	mov	r3, r0
 800b360:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b362:	7bbb      	ldrb	r3, [r7, #14]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d110      	bne.n	800b38a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2209      	movs	r2, #9
 800b36c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2203      	movs	r2, #3
 800b372:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b382:	2200      	movs	r2, #0
 800b384:	4619      	mov	r1, r3
 800b386:	f000 fb77 	bl	800ba78 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b38a:	7bbb      	ldrb	r3, [r7, #14]
 800b38c:	2b05      	cmp	r3, #5
 800b38e:	d110      	bne.n	800b3b2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b390:	2303      	movs	r3, #3
 800b392:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2203      	movs	r2, #3
 800b398:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	f000 fb64 	bl	800ba78 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b3b0:	e171      	b.n	800b696 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b3b2:	7bbb      	ldrb	r3, [r7, #14]
 800b3b4:	2b04      	cmp	r3, #4
 800b3b6:	f040 816e 	bne.w	800b696 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	220b      	movs	r2, #11
 800b3be:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2203      	movs	r2, #3
 800b3c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	f000 fb4e 	bl	800ba78 <osMessagePut>
      break;
 800b3dc:	e15b      	b.n	800b696 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6899      	ldr	r1, [r3, #8]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	899a      	ldrh	r2, [r3, #12]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	795b      	ldrb	r3, [r3, #5]
 800b3ea:	2001      	movs	r0, #1
 800b3ec:	9000      	str	r0, [sp, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f978 	bl	800b6e4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2206      	movs	r2, #6
 800b404:	761a      	strb	r2, [r3, #24]
      break;
 800b406:	e14d      	b.n	800b6a4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	795b      	ldrb	r3, [r3, #5]
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f002 fdb4 	bl	800df7c <USBH_LL_GetURBState>
 800b414:	4603      	mov	r3, r0
 800b416:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b418:	7bbb      	ldrb	r3, [r7, #14]
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d111      	bne.n	800b442 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2207      	movs	r2, #7
 800b422:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2203      	movs	r2, #3
 800b428:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b438:	2200      	movs	r2, #0
 800b43a:	4619      	mov	r1, r3
 800b43c:	f000 fb1c 	bl	800ba78 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b440:	e12b      	b.n	800b69a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b442:	7bbb      	ldrb	r3, [r7, #14]
 800b444:	2b05      	cmp	r3, #5
 800b446:	d113      	bne.n	800b470 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	220c      	movs	r2, #12
 800b44c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b44e:	2303      	movs	r3, #3
 800b450:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2203      	movs	r2, #3
 800b456:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b466:	2200      	movs	r2, #0
 800b468:	4619      	mov	r1, r3
 800b46a:	f000 fb05 	bl	800ba78 <osMessagePut>
      break;
 800b46e:	e114      	b.n	800b69a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b470:	7bbb      	ldrb	r3, [r7, #14]
 800b472:	2b02      	cmp	r3, #2
 800b474:	d111      	bne.n	800b49a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2205      	movs	r2, #5
 800b47a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2203      	movs	r2, #3
 800b480:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b490:	2200      	movs	r2, #0
 800b492:	4619      	mov	r1, r3
 800b494:	f000 faf0 	bl	800ba78 <osMessagePut>
      break;
 800b498:	e0ff      	b.n	800b69a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b49a:	7bbb      	ldrb	r3, [r7, #14]
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	f040 80fc 	bne.w	800b69a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	220b      	movs	r2, #11
 800b4a6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2203      	movs	r2, #3
 800b4b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	f000 fad8 	bl	800ba78 <osMessagePut>
      break;
 800b4c8:	e0e7      	b.n	800b69a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	791b      	ldrb	r3, [r3, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f92b 	bl	800b72e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2208      	movs	r2, #8
 800b4e8:	761a      	strb	r2, [r3, #24]

      break;
 800b4ea:	e0db      	b.n	800b6a4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	791b      	ldrb	r3, [r3, #4]
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f002 fd42 	bl	800df7c <USBH_LL_GetURBState>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b4fc:	7bbb      	ldrb	r3, [r7, #14]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d113      	bne.n	800b52a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	220d      	movs	r2, #13
 800b506:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b508:	2300      	movs	r3, #0
 800b50a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2203      	movs	r2, #3
 800b510:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b520:	2200      	movs	r2, #0
 800b522:	4619      	mov	r1, r3
 800b524:	f000 faa8 	bl	800ba78 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b528:	e0b9      	b.n	800b69e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b52a:	7bbb      	ldrb	r3, [r7, #14]
 800b52c:	2b04      	cmp	r3, #4
 800b52e:	d111      	bne.n	800b554 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	220b      	movs	r2, #11
 800b534:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2203      	movs	r2, #3
 800b53a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b54a:	2200      	movs	r2, #0
 800b54c:	4619      	mov	r1, r3
 800b54e:	f000 fa93 	bl	800ba78 <osMessagePut>
      break;
 800b552:	e0a4      	b.n	800b69e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b554:	7bbb      	ldrb	r3, [r7, #14]
 800b556:	2b05      	cmp	r3, #5
 800b558:	f040 80a1 	bne.w	800b69e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b55c:	2303      	movs	r3, #3
 800b55e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2203      	movs	r2, #3
 800b564:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b574:	2200      	movs	r2, #0
 800b576:	4619      	mov	r1, r3
 800b578:	f000 fa7e 	bl	800ba78 <osMessagePut>
      break;
 800b57c:	e08f      	b.n	800b69e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	795b      	ldrb	r3, [r3, #5]
 800b582:	2201      	movs	r2, #1
 800b584:	9200      	str	r2, [sp, #0]
 800b586:	2200      	movs	r2, #0
 800b588:	2100      	movs	r1, #0
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f8aa 	bl	800b6e4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b596:	b29a      	uxth	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	220a      	movs	r2, #10
 800b5a0:	761a      	strb	r2, [r3, #24]
      break;
 800b5a2:	e07f      	b.n	800b6a4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	795b      	ldrb	r3, [r3, #5]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f002 fce6 	bl	800df7c <USBH_LL_GetURBState>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b5b4:	7bbb      	ldrb	r3, [r7, #14]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d113      	bne.n	800b5e2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	220d      	movs	r2, #13
 800b5c2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2203      	movs	r2, #3
 800b5c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5d8:	2200      	movs	r2, #0
 800b5da:	4619      	mov	r1, r3
 800b5dc:	f000 fa4c 	bl	800ba78 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b5e0:	e05f      	b.n	800b6a2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b5e2:	7bbb      	ldrb	r3, [r7, #14]
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d111      	bne.n	800b60c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2209      	movs	r2, #9
 800b5ec:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2203      	movs	r2, #3
 800b5f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b602:	2200      	movs	r2, #0
 800b604:	4619      	mov	r1, r3
 800b606:	f000 fa37 	bl	800ba78 <osMessagePut>
      break;
 800b60a:	e04a      	b.n	800b6a2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800b60c:	7bbb      	ldrb	r3, [r7, #14]
 800b60e:	2b04      	cmp	r3, #4
 800b610:	d147      	bne.n	800b6a2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	220b      	movs	r2, #11
 800b616:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2203      	movs	r2, #3
 800b61c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b62c:	2200      	movs	r2, #0
 800b62e:	4619      	mov	r1, r3
 800b630:	f000 fa22 	bl	800ba78 <osMessagePut>
      break;
 800b634:	e035      	b.n	800b6a2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	7e5b      	ldrb	r3, [r3, #25]
 800b63a:	3301      	adds	r3, #1
 800b63c:	b2da      	uxtb	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	765a      	strb	r2, [r3, #25]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	7e5b      	ldrb	r3, [r3, #25]
 800b646:	2b02      	cmp	r3, #2
 800b648:	d806      	bhi.n	800b658 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b656:	e025      	b.n	800b6a4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b65e:	2106      	movs	r1, #6
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	795b      	ldrb	r3, [r3, #5]
 800b66e:	4619      	mov	r1, r3
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 f90d 	bl	800b890 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	791b      	ldrb	r3, [r3, #4]
 800b67a:	4619      	mov	r1, r3
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f907 	bl	800b890 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b688:	2302      	movs	r3, #2
 800b68a:	73fb      	strb	r3, [r7, #15]
      break;
 800b68c:	e00a      	b.n	800b6a4 <USBH_HandleControl+0x484>

    default:
      break;
 800b68e:	bf00      	nop
 800b690:	e008      	b.n	800b6a4 <USBH_HandleControl+0x484>
      break;
 800b692:	bf00      	nop
 800b694:	e006      	b.n	800b6a4 <USBH_HandleControl+0x484>
      break;
 800b696:	bf00      	nop
 800b698:	e004      	b.n	800b6a4 <USBH_HandleControl+0x484>
      break;
 800b69a:	bf00      	nop
 800b69c:	e002      	b.n	800b6a4 <USBH_HandleControl+0x484>
      break;
 800b69e:	bf00      	nop
 800b6a0:	e000      	b.n	800b6a4 <USBH_HandleControl+0x484>
      break;
 800b6a2:	bf00      	nop
  }

  return status;
 800b6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop

0800b6b0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af04      	add	r7, sp, #16
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b6be:	79f9      	ldrb	r1, [r7, #7]
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	9303      	str	r3, [sp, #12]
 800b6c4:	2308      	movs	r3, #8
 800b6c6:	9302      	str	r3, [sp, #8]
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	9301      	str	r3, [sp, #4]
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f002 fc20 	bl	800df1a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b088      	sub	sp, #32
 800b6e8:	af04      	add	r7, sp, #16
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	4611      	mov	r1, r2
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	80fb      	strh	r3, [r7, #6]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b704:	2300      	movs	r3, #0
 800b706:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b708:	7979      	ldrb	r1, [r7, #5]
 800b70a:	7e3b      	ldrb	r3, [r7, #24]
 800b70c:	9303      	str	r3, [sp, #12]
 800b70e:	88fb      	ldrh	r3, [r7, #6]
 800b710:	9302      	str	r3, [sp, #8]
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	2301      	movs	r3, #1
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	2300      	movs	r3, #0
 800b71c:	2200      	movs	r2, #0
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f002 fbfb 	bl	800df1a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b088      	sub	sp, #32
 800b732:	af04      	add	r7, sp, #16
 800b734:	60f8      	str	r0, [r7, #12]
 800b736:	60b9      	str	r1, [r7, #8]
 800b738:	4611      	mov	r1, r2
 800b73a:	461a      	mov	r2, r3
 800b73c:	460b      	mov	r3, r1
 800b73e:	80fb      	strh	r3, [r7, #6]
 800b740:	4613      	mov	r3, r2
 800b742:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b744:	7979      	ldrb	r1, [r7, #5]
 800b746:	2300      	movs	r3, #0
 800b748:	9303      	str	r3, [sp, #12]
 800b74a:	88fb      	ldrh	r3, [r7, #6]
 800b74c:	9302      	str	r3, [sp, #8]
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	2301      	movs	r3, #1
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	2300      	movs	r3, #0
 800b758:	2201      	movs	r2, #1
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f002 fbdd 	bl	800df1a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b760:	2300      	movs	r3, #0

}
 800b762:	4618      	mov	r0, r3
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b088      	sub	sp, #32
 800b76e:	af04      	add	r7, sp, #16
 800b770:	60f8      	str	r0, [r7, #12]
 800b772:	60b9      	str	r1, [r7, #8]
 800b774:	4611      	mov	r1, r2
 800b776:	461a      	mov	r2, r3
 800b778:	460b      	mov	r3, r1
 800b77a:	80fb      	strh	r3, [r7, #6]
 800b77c:	4613      	mov	r3, r2
 800b77e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b786:	2b00      	cmp	r3, #0
 800b788:	d001      	beq.n	800b78e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b78a:	2300      	movs	r3, #0
 800b78c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b78e:	7979      	ldrb	r1, [r7, #5]
 800b790:	7e3b      	ldrb	r3, [r7, #24]
 800b792:	9303      	str	r3, [sp, #12]
 800b794:	88fb      	ldrh	r3, [r7, #6]
 800b796:	9302      	str	r3, [sp, #8]
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	9301      	str	r3, [sp, #4]
 800b79c:	2301      	movs	r3, #1
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	2302      	movs	r3, #2
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f002 fbb8 	bl	800df1a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af04      	add	r7, sp, #16
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	4611      	mov	r1, r2
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	80fb      	strh	r3, [r7, #6]
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b7ca:	7979      	ldrb	r1, [r7, #5]
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	9303      	str	r3, [sp, #12]
 800b7d0:	88fb      	ldrh	r3, [r7, #6]
 800b7d2:	9302      	str	r3, [sp, #8]
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	9301      	str	r3, [sp, #4]
 800b7d8:	2301      	movs	r3, #1
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	2302      	movs	r3, #2
 800b7de:	2201      	movs	r2, #1
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f002 fb9a 	bl	800df1a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af04      	add	r7, sp, #16
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	4603      	mov	r3, r0
 800b800:	70fb      	strb	r3, [r7, #3]
 800b802:	460b      	mov	r3, r1
 800b804:	70bb      	strb	r3, [r7, #2]
 800b806:	4613      	mov	r3, r2
 800b808:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b80a:	7878      	ldrb	r0, [r7, #1]
 800b80c:	78ba      	ldrb	r2, [r7, #2]
 800b80e:	78f9      	ldrb	r1, [r7, #3]
 800b810:	8b3b      	ldrh	r3, [r7, #24]
 800b812:	9302      	str	r3, [sp, #8]
 800b814:	7d3b      	ldrb	r3, [r7, #20]
 800b816:	9301      	str	r3, [sp, #4]
 800b818:	7c3b      	ldrb	r3, [r7, #16]
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	4603      	mov	r3, r0
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f002 fb2d 	bl	800de7e <USBH_LL_OpenPipe>

  return USBH_OK;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b082      	sub	sp, #8
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	460b      	mov	r3, r1
 800b838:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b83a:	78fb      	ldrb	r3, [r7, #3]
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f002 fb4c 	bl	800dedc <USBH_LL_ClosePipe>

  return USBH_OK;
 800b844:	2300      	movs	r3, #0
}
 800b846:	4618      	mov	r0, r3
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b084      	sub	sp, #16
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	460b      	mov	r3, r1
 800b858:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 f836 	bl	800b8cc <USBH_GetFreePipe>
 800b860:	4603      	mov	r3, r0
 800b862:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b864:	89fb      	ldrh	r3, [r7, #14]
 800b866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d00a      	beq.n	800b884 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b86e:	78fa      	ldrb	r2, [r7, #3]
 800b870:	89fb      	ldrh	r3, [r7, #14]
 800b872:	f003 030f 	and.w	r3, r3, #15
 800b876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b87a:	6879      	ldr	r1, [r7, #4]
 800b87c:	33e0      	adds	r3, #224	; 0xe0
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	440b      	add	r3, r1
 800b882:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b884:	89fb      	ldrh	r3, [r7, #14]
 800b886:	b2db      	uxtb	r3, r3
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	460b      	mov	r3, r1
 800b89a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b89c:	78fb      	ldrb	r3, [r7, #3]
 800b89e:	2b0a      	cmp	r3, #10
 800b8a0:	d80d      	bhi.n	800b8be <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b8a2:	78fb      	ldrb	r3, [r7, #3]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	33e0      	adds	r3, #224	; 0xe0
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4413      	add	r3, r2
 800b8ac:	685a      	ldr	r2, [r3, #4]
 800b8ae:	78fb      	ldrb	r3, [r7, #3]
 800b8b0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b8b4:	6879      	ldr	r1, [r7, #4]
 800b8b6:	33e0      	adds	r3, #224	; 0xe0
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	440b      	add	r3, r1
 800b8bc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b8d8:	2300      	movs	r3, #0
 800b8da:	73fb      	strb	r3, [r7, #15]
 800b8dc:	e00f      	b.n	800b8fe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b8de:	7bfb      	ldrb	r3, [r7, #15]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	33e0      	adds	r3, #224	; 0xe0
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d102      	bne.n	800b8f8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b8f2:	7bfb      	ldrb	r3, [r7, #15]
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	e007      	b.n	800b908 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b8f8:	7bfb      	ldrb	r3, [r7, #15]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	73fb      	strb	r3, [r7, #15]
 800b8fe:	7bfb      	ldrb	r3, [r7, #15]
 800b900:	2b0a      	cmp	r3, #10
 800b902:	d9ec      	bls.n	800b8de <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b904:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3714      	adds	r7, #20
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	4603      	mov	r3, r0
 800b91c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b91e:	2300      	movs	r3, #0
 800b920:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b926:	2b84      	cmp	r3, #132	; 0x84
 800b928:	d005      	beq.n	800b936 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b92a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	4413      	add	r3, r2
 800b932:	3303      	adds	r3, #3
 800b934:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b936:	68fb      	ldr	r3, [r7, #12]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b94a:	f3ef 8305 	mrs	r3, IPSR
 800b94e:	607b      	str	r3, [r7, #4]
  return(result);
 800b950:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b952:	2b00      	cmp	r3, #0
 800b954:	bf14      	ite	ne
 800b956:	2301      	movne	r3, #1
 800b958:	2300      	moveq	r3, #0
 800b95a:	b2db      	uxtb	r3, r3
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b96a:	b089      	sub	sp, #36	; 0x24
 800b96c:	af04      	add	r7, sp, #16
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d020      	beq.n	800b9bc <osThreadCreate+0x54>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	699b      	ldr	r3, [r3, #24]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d01c      	beq.n	800b9bc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	685c      	ldr	r4, [r3, #4]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681d      	ldr	r5, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	691e      	ldr	r6, [r3, #16]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff ffbd 	bl	800b914 <makeFreeRtosPriority>
 800b99a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	695b      	ldr	r3, [r3, #20]
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9a4:	9202      	str	r2, [sp, #8]
 800b9a6:	9301      	str	r3, [sp, #4]
 800b9a8:	9100      	str	r1, [sp, #0]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	4632      	mov	r2, r6
 800b9ae:	4629      	mov	r1, r5
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f000 ff0d 	bl	800c7d0 <xTaskCreateStatic>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	60fb      	str	r3, [r7, #12]
 800b9ba:	e01c      	b.n	800b9f6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	685c      	ldr	r4, [r3, #4]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9c8:	b29e      	uxth	r6, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7ff ff9f 	bl	800b914 <makeFreeRtosPriority>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	f107 030c 	add.w	r3, r7, #12
 800b9dc:	9301      	str	r3, [sp, #4]
 800b9de:	9200      	str	r2, [sp, #0]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	4632      	mov	r2, r6
 800b9e4:	4629      	mov	r1, r5
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f000 ff4f 	bl	800c88a <xTaskCreate>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d001      	beq.n	800b9f6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	e000      	b.n	800b9f8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba00 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <osDelay+0x16>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	e000      	b.n	800ba18 <osDelay+0x18>
 800ba16:	2301      	movs	r3, #1
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f001 f877 	bl	800cb0c <vTaskDelay>
  
  return osOK;
 800ba1e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ba28:	b590      	push	{r4, r7, lr}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af02      	add	r7, sp, #8
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d011      	beq.n	800ba5e <osMessageCreate+0x36>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00d      	beq.n	800ba5e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6818      	ldr	r0, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6859      	ldr	r1, [r3, #4]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	689a      	ldr	r2, [r3, #8]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	2400      	movs	r4, #0
 800ba54:	9400      	str	r4, [sp, #0]
 800ba56:	f000 f9df 	bl	800be18 <xQueueGenericCreateStatic>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	e008      	b.n	800ba70 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6818      	ldr	r0, [r3, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	4619      	mov	r1, r3
 800ba6a:	f000 fa4d 	bl	800bf08 <xQueueGenericCreate>
 800ba6e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd90      	pop	{r4, r7, pc}

0800ba78 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ba84:	2300      	movs	r3, #0
 800ba86:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d101      	bne.n	800ba96 <osMessagePut+0x1e>
    ticks = 1;
 800ba92:	2301      	movs	r3, #1
 800ba94:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ba96:	f7ff ff55 	bl	800b944 <inHandlerMode>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d018      	beq.n	800bad2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800baa0:	f107 0210 	add.w	r2, r7, #16
 800baa4:	f107 0108 	add.w	r1, r7, #8
 800baa8:	2300      	movs	r3, #0
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f000 fb84 	bl	800c1b8 <xQueueGenericSendFromISR>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d001      	beq.n	800baba <osMessagePut+0x42>
      return osErrorOS;
 800bab6:	23ff      	movs	r3, #255	; 0xff
 800bab8:	e018      	b.n	800baec <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d014      	beq.n	800baea <osMessagePut+0x72>
 800bac0:	4b0c      	ldr	r3, [pc, #48]	; (800baf4 <osMessagePut+0x7c>)
 800bac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bac6:	601a      	str	r2, [r3, #0]
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	e00b      	b.n	800baea <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bad2:	f107 0108 	add.w	r1, r7, #8
 800bad6:	2300      	movs	r3, #0
 800bad8:	697a      	ldr	r2, [r7, #20]
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f000 fa6e 	bl	800bfbc <xQueueGenericSend>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d001      	beq.n	800baea <osMessagePut+0x72>
      return osErrorOS;
 800bae6:	23ff      	movs	r3, #255	; 0xff
 800bae8:	e000      	b.n	800baec <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3718      	adds	r7, #24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	e000ed04 	.word	0xe000ed04

0800baf8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800baf8:	b590      	push	{r4, r7, lr}
 800bafa:	b08b      	sub	sp, #44	; 0x2c
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10a      	bne.n	800bb28 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800bb12:	2380      	movs	r3, #128	; 0x80
 800bb14:	617b      	str	r3, [r7, #20]
    return event;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	461c      	mov	r4, r3
 800bb1a:	f107 0314 	add.w	r3, r7, #20
 800bb1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bb26:	e054      	b.n	800bbd2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb36:	d103      	bne.n	800bb40 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bb38:	f04f 33ff 	mov.w	r3, #4294967295
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24
 800bb3e:	e009      	b.n	800bb54 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d006      	beq.n	800bb54 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d101      	bne.n	800bb54 <osMessageGet+0x5c>
      ticks = 1;
 800bb50:	2301      	movs	r3, #1
 800bb52:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bb54:	f7ff fef6 	bl	800b944 <inHandlerMode>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d01c      	beq.n	800bb98 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bb5e:	f107 0220 	add.w	r2, r7, #32
 800bb62:	f107 0314 	add.w	r3, r7, #20
 800bb66:	3304      	adds	r3, #4
 800bb68:	4619      	mov	r1, r3
 800bb6a:	68b8      	ldr	r0, [r7, #8]
 800bb6c:	f000 fca0 	bl	800c4b0 <xQueueReceiveFromISR>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d102      	bne.n	800bb7c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800bb76:	2310      	movs	r3, #16
 800bb78:	617b      	str	r3, [r7, #20]
 800bb7a:	e001      	b.n	800bb80 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d01d      	beq.n	800bbc2 <osMessageGet+0xca>
 800bb86:	4b15      	ldr	r3, [pc, #84]	; (800bbdc <osMessageGet+0xe4>)
 800bb88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb8c:	601a      	str	r2, [r3, #0]
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	e014      	b.n	800bbc2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bb98:	f107 0314 	add.w	r3, r7, #20
 800bb9c:	3304      	adds	r3, #4
 800bb9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bba0:	4619      	mov	r1, r3
 800bba2:	68b8      	ldr	r0, [r7, #8]
 800bba4:	f000 fba4 	bl	800c2f0 <xQueueReceive>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d102      	bne.n	800bbb4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bbae:	2310      	movs	r3, #16
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	e006      	b.n	800bbc2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <osMessageGet+0xc6>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	e000      	b.n	800bbc0 <osMessageGet+0xc8>
 800bbbe:	2340      	movs	r3, #64	; 0x40
 800bbc0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	461c      	mov	r4, r3
 800bbc6:	f107 0314 	add.w	r3, r7, #20
 800bbca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bbce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	372c      	adds	r7, #44	; 0x2c
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd90      	pop	{r4, r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	e000ed04 	.word	0xe000ed04

0800bbe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f103 0208 	add.w	r2, r3, #8
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f103 0208 	add.w	r2, r3, #8
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f103 0208 	add.w	r2, r3, #8
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc2e:	bf00      	nop
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b085      	sub	sp, #20
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	689a      	ldr	r2, [r3, #8]
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	683a      	ldr	r2, [r7, #0]
 800bc5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	1c5a      	adds	r2, r3, #1
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	601a      	str	r2, [r3, #0]
}
 800bc76:	bf00      	nop
 800bc78:	3714      	adds	r7, #20
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc82:	b480      	push	{r7}
 800bc84:	b085      	sub	sp, #20
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc98:	d103      	bne.n	800bca2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	60fb      	str	r3, [r7, #12]
 800bca0:	e00c      	b.n	800bcbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	3308      	adds	r3, #8
 800bca6:	60fb      	str	r3, [r7, #12]
 800bca8:	e002      	b.n	800bcb0 <vListInsert+0x2e>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	60fb      	str	r3, [r7, #12]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68ba      	ldr	r2, [r7, #8]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d2f6      	bcs.n	800bcaa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	685a      	ldr	r2, [r3, #4]
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	1c5a      	adds	r2, r3, #1
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	601a      	str	r2, [r3, #0]
}
 800bce8:	bf00      	nop
 800bcea:	3714      	adds	r7, #20
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	6892      	ldr	r2, [r2, #8]
 800bd0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	6852      	ldr	r2, [r2, #4]
 800bd14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d103      	bne.n	800bd28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	689a      	ldr	r2, [r3, #8]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	1e5a      	subs	r2, r3, #1
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10a      	bne.n	800bd72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd60:	f383 8811 	msr	BASEPRI, r3
 800bd64:	f3bf 8f6f 	isb	sy
 800bd68:	f3bf 8f4f 	dsb	sy
 800bd6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bd6e:	bf00      	nop
 800bd70:	e7fe      	b.n	800bd70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bd72:	f001 fbc9 	bl	800d508 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7e:	68f9      	ldr	r1, [r7, #12]
 800bd80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd82:	fb01 f303 	mul.w	r3, r1, r3
 800bd86:	441a      	add	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bda2:	3b01      	subs	r3, #1
 800bda4:	68f9      	ldr	r1, [r7, #12]
 800bda6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bda8:	fb01 f303 	mul.w	r3, r1, r3
 800bdac:	441a      	add	r2, r3
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	22ff      	movs	r2, #255	; 0xff
 800bdb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	22ff      	movs	r2, #255	; 0xff
 800bdbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d114      	bne.n	800bdf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d01a      	beq.n	800be06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	3310      	adds	r3, #16
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f001 f8d3 	bl	800cf80 <xTaskRemoveFromEventList>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d012      	beq.n	800be06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bde0:	4b0c      	ldr	r3, [pc, #48]	; (800be14 <xQueueGenericReset+0xcc>)
 800bde2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde6:	601a      	str	r2, [r3, #0]
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	e009      	b.n	800be06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	3310      	adds	r3, #16
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7ff fef2 	bl	800bbe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	3324      	adds	r3, #36	; 0x24
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff feed 	bl	800bbe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be06:	f001 fbaf 	bl	800d568 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be0a:	2301      	movs	r3, #1
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	e000ed04 	.word	0xe000ed04

0800be18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b08e      	sub	sp, #56	; 0x38
 800be1c:	af02      	add	r7, sp, #8
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
 800be24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10a      	bne.n	800be42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be3e:	bf00      	nop
 800be40:	e7fe      	b.n	800be40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d10a      	bne.n	800be5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800be48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4c:	f383 8811 	msr	BASEPRI, r3
 800be50:	f3bf 8f6f 	isb	sy
 800be54:	f3bf 8f4f 	dsb	sy
 800be58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be5a:	bf00      	nop
 800be5c:	e7fe      	b.n	800be5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <xQueueGenericCreateStatic+0x52>
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d001      	beq.n	800be6e <xQueueGenericCreateStatic+0x56>
 800be6a:	2301      	movs	r3, #1
 800be6c:	e000      	b.n	800be70 <xQueueGenericCreateStatic+0x58>
 800be6e:	2300      	movs	r3, #0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10a      	bne.n	800be8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	623b      	str	r3, [r7, #32]
}
 800be86:	bf00      	nop
 800be88:	e7fe      	b.n	800be88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d102      	bne.n	800be96 <xQueueGenericCreateStatic+0x7e>
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d101      	bne.n	800be9a <xQueueGenericCreateStatic+0x82>
 800be96:	2301      	movs	r3, #1
 800be98:	e000      	b.n	800be9c <xQueueGenericCreateStatic+0x84>
 800be9a:	2300      	movs	r3, #0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10a      	bne.n	800beb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	61fb      	str	r3, [r7, #28]
}
 800beb2:	bf00      	nop
 800beb4:	e7fe      	b.n	800beb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800beb6:	2348      	movs	r3, #72	; 0x48
 800beb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	2b48      	cmp	r3, #72	; 0x48
 800bebe:	d00a      	beq.n	800bed6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	61bb      	str	r3, [r7, #24]
}
 800bed2:	bf00      	nop
 800bed4:	e7fe      	b.n	800bed4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bed6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00d      	beq.n	800befe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee4:	2201      	movs	r2, #1
 800bee6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800beea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800beee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef0:	9300      	str	r3, [sp, #0]
 800bef2:	4613      	mov	r3, r2
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	68b9      	ldr	r1, [r7, #8]
 800bef8:	68f8      	ldr	r0, [r7, #12]
 800befa:	f000 f83f 	bl	800bf7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800befe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3730      	adds	r7, #48	; 0x30
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08a      	sub	sp, #40	; 0x28
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	4613      	mov	r3, r2
 800bf14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d10a      	bne.n	800bf32 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf20:	f383 8811 	msr	BASEPRI, r3
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	613b      	str	r3, [r7, #16]
}
 800bf2e:	bf00      	nop
 800bf30:	e7fe      	b.n	800bf30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	fb02 f303 	mul.w	r3, r2, r3
 800bf3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	3348      	adds	r3, #72	; 0x48
 800bf40:	4618      	mov	r0, r3
 800bf42:	f001 fbd3 	bl	800d6ec <pvPortMalloc>
 800bf46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d011      	beq.n	800bf72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	3348      	adds	r3, #72	; 0x48
 800bf56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf60:	79fa      	ldrb	r2, [r7, #7]
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	4613      	mov	r3, r2
 800bf68:	697a      	ldr	r2, [r7, #20]
 800bf6a:	68b9      	ldr	r1, [r7, #8]
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f000 f805 	bl	800bf7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf72:	69bb      	ldr	r3, [r7, #24]
	}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3720      	adds	r7, #32
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
 800bf88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d103      	bne.n	800bf98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	69ba      	ldr	r2, [r7, #24]
 800bf94:	601a      	str	r2, [r3, #0]
 800bf96:	e002      	b.n	800bf9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bfaa:	2101      	movs	r1, #1
 800bfac:	69b8      	ldr	r0, [r7, #24]
 800bfae:	f7ff fecb 	bl	800bd48 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bfb2:	bf00      	nop
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
	...

0800bfbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b08e      	sub	sp, #56	; 0x38
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
 800bfc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d10a      	bne.n	800bfee <xQueueGenericSend+0x32>
	__asm volatile
 800bfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfdc:	f383 8811 	msr	BASEPRI, r3
 800bfe0:	f3bf 8f6f 	isb	sy
 800bfe4:	f3bf 8f4f 	dsb	sy
 800bfe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bfea:	bf00      	nop
 800bfec:	e7fe      	b.n	800bfec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d103      	bne.n	800bffc <xQueueGenericSend+0x40>
 800bff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d101      	bne.n	800c000 <xQueueGenericSend+0x44>
 800bffc:	2301      	movs	r3, #1
 800bffe:	e000      	b.n	800c002 <xQueueGenericSend+0x46>
 800c000:	2300      	movs	r3, #0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10a      	bne.n	800c01c <xQueueGenericSend+0x60>
	__asm volatile
 800c006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c018:	bf00      	nop
 800c01a:	e7fe      	b.n	800c01a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d103      	bne.n	800c02a <xQueueGenericSend+0x6e>
 800c022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c026:	2b01      	cmp	r3, #1
 800c028:	d101      	bne.n	800c02e <xQueueGenericSend+0x72>
 800c02a:	2301      	movs	r3, #1
 800c02c:	e000      	b.n	800c030 <xQueueGenericSend+0x74>
 800c02e:	2300      	movs	r3, #0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10a      	bne.n	800c04a <xQueueGenericSend+0x8e>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	623b      	str	r3, [r7, #32]
}
 800c046:	bf00      	nop
 800c048:	e7fe      	b.n	800c048 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c04a:	f001 f8df 	bl	800d20c <xTaskGetSchedulerState>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d102      	bne.n	800c05a <xQueueGenericSend+0x9e>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d101      	bne.n	800c05e <xQueueGenericSend+0xa2>
 800c05a:	2301      	movs	r3, #1
 800c05c:	e000      	b.n	800c060 <xQueueGenericSend+0xa4>
 800c05e:	2300      	movs	r3, #0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10a      	bne.n	800c07a <xQueueGenericSend+0xbe>
	__asm volatile
 800c064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c068:	f383 8811 	msr	BASEPRI, r3
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	61fb      	str	r3, [r7, #28]
}
 800c076:	bf00      	nop
 800c078:	e7fe      	b.n	800c078 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c07a:	f001 fa45 	bl	800d508 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c086:	429a      	cmp	r2, r3
 800c088:	d302      	bcc.n	800c090 <xQueueGenericSend+0xd4>
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	d129      	bne.n	800c0e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c090:	683a      	ldr	r2, [r7, #0]
 800c092:	68b9      	ldr	r1, [r7, #8]
 800c094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c096:	f000 fa8b 	bl	800c5b0 <prvCopyDataToQueue>
 800c09a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d010      	beq.n	800c0c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a6:	3324      	adds	r3, #36	; 0x24
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f000 ff69 	bl	800cf80 <xTaskRemoveFromEventList>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d013      	beq.n	800c0dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c0b4:	4b3f      	ldr	r3, [pc, #252]	; (800c1b4 <xQueueGenericSend+0x1f8>)
 800c0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ba:	601a      	str	r2, [r3, #0]
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	f3bf 8f6f 	isb	sy
 800c0c4:	e00a      	b.n	800c0dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d007      	beq.n	800c0dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c0cc:	4b39      	ldr	r3, [pc, #228]	; (800c1b4 <xQueueGenericSend+0x1f8>)
 800c0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0d2:	601a      	str	r2, [r3, #0]
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c0dc:	f001 fa44 	bl	800d568 <vPortExitCritical>
				return pdPASS;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e063      	b.n	800c1ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d103      	bne.n	800c0f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0ea:	f001 fa3d 	bl	800d568 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	e05c      	b.n	800c1ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d106      	bne.n	800c106 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0f8:	f107 0314 	add.w	r3, r7, #20
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 ffa1 	bl	800d044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c102:	2301      	movs	r3, #1
 800c104:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c106:	f001 fa2f 	bl	800d568 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c10a:	f000 fd33 	bl	800cb74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c10e:	f001 f9fb 	bl	800d508 <vPortEnterCritical>
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c118:	b25b      	sxtb	r3, r3
 800c11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c11e:	d103      	bne.n	800c128 <xQueueGenericSend+0x16c>
 800c120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c122:	2200      	movs	r2, #0
 800c124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c12e:	b25b      	sxtb	r3, r3
 800c130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c134:	d103      	bne.n	800c13e <xQueueGenericSend+0x182>
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c13e:	f001 fa13 	bl	800d568 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c142:	1d3a      	adds	r2, r7, #4
 800c144:	f107 0314 	add.w	r3, r7, #20
 800c148:	4611      	mov	r1, r2
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 ff90 	bl	800d070 <xTaskCheckForTimeOut>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d124      	bne.n	800c1a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c158:	f000 fb22 	bl	800c7a0 <prvIsQueueFull>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d018      	beq.n	800c194 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	3310      	adds	r3, #16
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	4611      	mov	r1, r2
 800c16a:	4618      	mov	r0, r3
 800c16c:	f000 fee4 	bl	800cf38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c172:	f000 faad 	bl	800c6d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c176:	f000 fd0b 	bl	800cb90 <xTaskResumeAll>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f47f af7c 	bne.w	800c07a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c182:	4b0c      	ldr	r3, [pc, #48]	; (800c1b4 <xQueueGenericSend+0x1f8>)
 800c184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c188:	601a      	str	r2, [r3, #0]
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	e772      	b.n	800c07a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c196:	f000 fa9b 	bl	800c6d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c19a:	f000 fcf9 	bl	800cb90 <xTaskResumeAll>
 800c19e:	e76c      	b.n	800c07a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c1a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1a2:	f000 fa95 	bl	800c6d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1a6:	f000 fcf3 	bl	800cb90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c1aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3738      	adds	r7, #56	; 0x38
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	e000ed04 	.word	0xe000ed04

0800c1b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b090      	sub	sp, #64	; 0x40
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
 800c1c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10a      	bne.n	800c1e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d4:	f383 8811 	msr	BASEPRI, r3
 800c1d8:	f3bf 8f6f 	isb	sy
 800c1dc:	f3bf 8f4f 	dsb	sy
 800c1e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c1e2:	bf00      	nop
 800c1e4:	e7fe      	b.n	800c1e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d103      	bne.n	800c1f4 <xQueueGenericSendFromISR+0x3c>
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d101      	bne.n	800c1f8 <xQueueGenericSendFromISR+0x40>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e000      	b.n	800c1fa <xQueueGenericSendFromISR+0x42>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10a      	bne.n	800c214 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c210:	bf00      	nop
 800c212:	e7fe      	b.n	800c212 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	2b02      	cmp	r3, #2
 800c218:	d103      	bne.n	800c222 <xQueueGenericSendFromISR+0x6a>
 800c21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d101      	bne.n	800c226 <xQueueGenericSendFromISR+0x6e>
 800c222:	2301      	movs	r3, #1
 800c224:	e000      	b.n	800c228 <xQueueGenericSendFromISR+0x70>
 800c226:	2300      	movs	r3, #0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10a      	bne.n	800c242 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c230:	f383 8811 	msr	BASEPRI, r3
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	623b      	str	r3, [r7, #32]
}
 800c23e:	bf00      	nop
 800c240:	e7fe      	b.n	800c240 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c242:	f001 fa13 	bl	800d66c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c246:	f3ef 8211 	mrs	r2, BASEPRI
 800c24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24e:	f383 8811 	msr	BASEPRI, r3
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	61fa      	str	r2, [r7, #28]
 800c25c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c25e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c260:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d302      	bcc.n	800c274 <xQueueGenericSendFromISR+0xbc>
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	2b02      	cmp	r3, #2
 800c272:	d12f      	bne.n	800c2d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c27a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c282:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c284:	683a      	ldr	r2, [r7, #0]
 800c286:	68b9      	ldr	r1, [r7, #8]
 800c288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c28a:	f000 f991 	bl	800c5b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c28e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c296:	d112      	bne.n	800c2be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d016      	beq.n	800c2ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a2:	3324      	adds	r3, #36	; 0x24
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f000 fe6b 	bl	800cf80 <xTaskRemoveFromEventList>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00e      	beq.n	800c2ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d00b      	beq.n	800c2ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	601a      	str	r2, [r3, #0]
 800c2bc:	e007      	b.n	800c2ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c2be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	b25a      	sxtb	r2, r3
 800c2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c2d2:	e001      	b.n	800c2d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c2e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3740      	adds	r7, #64	; 0x40
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
	...

0800c2f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b08c      	sub	sp, #48	; 0x30
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10a      	bne.n	800c320 <xQueueReceive+0x30>
	__asm volatile
 800c30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	623b      	str	r3, [r7, #32]
}
 800c31c:	bf00      	nop
 800c31e:	e7fe      	b.n	800c31e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d103      	bne.n	800c32e <xQueueReceive+0x3e>
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <xQueueReceive+0x42>
 800c32e:	2301      	movs	r3, #1
 800c330:	e000      	b.n	800c334 <xQueueReceive+0x44>
 800c332:	2300      	movs	r3, #0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10a      	bne.n	800c34e <xQueueReceive+0x5e>
	__asm volatile
 800c338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33c:	f383 8811 	msr	BASEPRI, r3
 800c340:	f3bf 8f6f 	isb	sy
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	61fb      	str	r3, [r7, #28]
}
 800c34a:	bf00      	nop
 800c34c:	e7fe      	b.n	800c34c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c34e:	f000 ff5d 	bl	800d20c <xTaskGetSchedulerState>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d102      	bne.n	800c35e <xQueueReceive+0x6e>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <xQueueReceive+0x72>
 800c35e:	2301      	movs	r3, #1
 800c360:	e000      	b.n	800c364 <xQueueReceive+0x74>
 800c362:	2300      	movs	r3, #0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d10a      	bne.n	800c37e <xQueueReceive+0x8e>
	__asm volatile
 800c368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36c:	f383 8811 	msr	BASEPRI, r3
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	61bb      	str	r3, [r7, #24]
}
 800c37a:	bf00      	nop
 800c37c:	e7fe      	b.n	800c37c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c37e:	f001 f8c3 	bl	800d508 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c386:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d01f      	beq.n	800c3ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c38e:	68b9      	ldr	r1, [r7, #8]
 800c390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c392:	f000 f977 	bl	800c684 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c398:	1e5a      	subs	r2, r3, #1
 800c39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	691b      	ldr	r3, [r3, #16]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00f      	beq.n	800c3c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a8:	3310      	adds	r3, #16
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f000 fde8 	bl	800cf80 <xTaskRemoveFromEventList>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d007      	beq.n	800c3c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3b6:	4b3d      	ldr	r3, [pc, #244]	; (800c4ac <xQueueReceive+0x1bc>)
 800c3b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3bc:	601a      	str	r2, [r3, #0]
 800c3be:	f3bf 8f4f 	dsb	sy
 800c3c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c3c6:	f001 f8cf 	bl	800d568 <vPortExitCritical>
				return pdPASS;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e069      	b.n	800c4a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d103      	bne.n	800c3dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c3d4:	f001 f8c8 	bl	800d568 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	e062      	b.n	800c4a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d106      	bne.n	800c3f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3e2:	f107 0310 	add.w	r3, r7, #16
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f000 fe2c 	bl	800d044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3f0:	f001 f8ba 	bl	800d568 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3f4:	f000 fbbe 	bl	800cb74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3f8:	f001 f886 	bl	800d508 <vPortEnterCritical>
 800c3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c402:	b25b      	sxtb	r3, r3
 800c404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c408:	d103      	bne.n	800c412 <xQueueReceive+0x122>
 800c40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40c:	2200      	movs	r2, #0
 800c40e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c418:	b25b      	sxtb	r3, r3
 800c41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c41e:	d103      	bne.n	800c428 <xQueueReceive+0x138>
 800c420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c422:	2200      	movs	r2, #0
 800c424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c428:	f001 f89e 	bl	800d568 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c42c:	1d3a      	adds	r2, r7, #4
 800c42e:	f107 0310 	add.w	r3, r7, #16
 800c432:	4611      	mov	r1, r2
 800c434:	4618      	mov	r0, r3
 800c436:	f000 fe1b 	bl	800d070 <xTaskCheckForTimeOut>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d123      	bne.n	800c488 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c442:	f000 f997 	bl	800c774 <prvIsQueueEmpty>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d017      	beq.n	800c47c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44e:	3324      	adds	r3, #36	; 0x24
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	4611      	mov	r1, r2
 800c454:	4618      	mov	r0, r3
 800c456:	f000 fd6f 	bl	800cf38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c45a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c45c:	f000 f938 	bl	800c6d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c460:	f000 fb96 	bl	800cb90 <xTaskResumeAll>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d189      	bne.n	800c37e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c46a:	4b10      	ldr	r3, [pc, #64]	; (800c4ac <xQueueReceive+0x1bc>)
 800c46c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c470:	601a      	str	r2, [r3, #0]
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	e780      	b.n	800c37e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c47c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c47e:	f000 f927 	bl	800c6d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c482:	f000 fb85 	bl	800cb90 <xTaskResumeAll>
 800c486:	e77a      	b.n	800c37e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c48a:	f000 f921 	bl	800c6d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c48e:	f000 fb7f 	bl	800cb90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c494:	f000 f96e 	bl	800c774 <prvIsQueueEmpty>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f43f af6f 	beq.w	800c37e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3730      	adds	r7, #48	; 0x30
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	e000ed04 	.word	0xe000ed04

0800c4b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b08e      	sub	sp, #56	; 0x38
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10a      	bne.n	800c4dc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ca:	f383 8811 	msr	BASEPRI, r3
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	623b      	str	r3, [r7, #32]
}
 800c4d8:	bf00      	nop
 800c4da:	e7fe      	b.n	800c4da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d103      	bne.n	800c4ea <xQueueReceiveFromISR+0x3a>
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d101      	bne.n	800c4ee <xQueueReceiveFromISR+0x3e>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e000      	b.n	800c4f0 <xQueueReceiveFromISR+0x40>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d10a      	bne.n	800c50a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	61fb      	str	r3, [r7, #28]
}
 800c506:	bf00      	nop
 800c508:	e7fe      	b.n	800c508 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c50a:	f001 f8af 	bl	800d66c <vPortValidateInterruptPriority>
	__asm volatile
 800c50e:	f3ef 8211 	mrs	r2, BASEPRI
 800c512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	61ba      	str	r2, [r7, #24]
 800c524:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c526:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c528:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c52e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c532:	2b00      	cmp	r3, #0
 800c534:	d02f      	beq.n	800c596 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c53c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c540:	68b9      	ldr	r1, [r7, #8]
 800c542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c544:	f000 f89e 	bl	800c684 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54a:	1e5a      	subs	r2, r3, #1
 800c54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c550:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c558:	d112      	bne.n	800c580 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	691b      	ldr	r3, [r3, #16]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d016      	beq.n	800c590 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c564:	3310      	adds	r3, #16
 800c566:	4618      	mov	r0, r3
 800c568:	f000 fd0a 	bl	800cf80 <xTaskRemoveFromEventList>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00e      	beq.n	800c590 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00b      	beq.n	800c590 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2201      	movs	r2, #1
 800c57c:	601a      	str	r2, [r3, #0]
 800c57e:	e007      	b.n	800c590 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c584:	3301      	adds	r3, #1
 800c586:	b2db      	uxtb	r3, r3
 800c588:	b25a      	sxtb	r2, r3
 800c58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c590:	2301      	movs	r3, #1
 800c592:	637b      	str	r3, [r7, #52]	; 0x34
 800c594:	e001      	b.n	800c59a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c596:	2300      	movs	r3, #0
 800c598:	637b      	str	r3, [r7, #52]	; 0x34
 800c59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	f383 8811 	msr	BASEPRI, r3
}
 800c5a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3738      	adds	r7, #56	; 0x38
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d10d      	bne.n	800c5ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d14d      	bne.n	800c672 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 fe34 	bl	800d248 <xTaskPriorityDisinherit>
 800c5e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	609a      	str	r2, [r3, #8]
 800c5e8:	e043      	b.n	800c672 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d119      	bne.n	800c624 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6858      	ldr	r0, [r3, #4]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	68b9      	ldr	r1, [r7, #8]
 800c5fc:	f001 fdca 	bl	800e194 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	685a      	ldr	r2, [r3, #4]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c608:	441a      	add	r2, r3
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	685a      	ldr	r2, [r3, #4]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	429a      	cmp	r2, r3
 800c618:	d32b      	bcc.n	800c672 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	605a      	str	r2, [r3, #4]
 800c622:	e026      	b.n	800c672 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	68d8      	ldr	r0, [r3, #12]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62c:	461a      	mov	r2, r3
 800c62e:	68b9      	ldr	r1, [r7, #8]
 800c630:	f001 fdb0 	bl	800e194 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	68da      	ldr	r2, [r3, #12]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c63c:	425b      	negs	r3, r3
 800c63e:	441a      	add	r2, r3
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	68da      	ldr	r2, [r3, #12]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d207      	bcs.n	800c660 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	689a      	ldr	r2, [r3, #8]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c658:	425b      	negs	r3, r3
 800c65a:	441a      	add	r2, r3
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2b02      	cmp	r3, #2
 800c664:	d105      	bne.n	800c672 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d002      	beq.n	800c672 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	3b01      	subs	r3, #1
 800c670:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	1c5a      	adds	r2, r3, #1
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c67a:	697b      	ldr	r3, [r7, #20]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3718      	adds	r7, #24
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c692:	2b00      	cmp	r3, #0
 800c694:	d018      	beq.n	800c6c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	68da      	ldr	r2, [r3, #12]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c69e:	441a      	add	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	68da      	ldr	r2, [r3, #12]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d303      	bcc.n	800c6b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68d9      	ldr	r1, [r3, #12]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	6838      	ldr	r0, [r7, #0]
 800c6c4:	f001 fd66 	bl	800e194 <memcpy>
	}
}
 800c6c8:	bf00      	nop
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c6d8:	f000 ff16 	bl	800d508 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6e4:	e011      	b.n	800c70a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d012      	beq.n	800c714 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	3324      	adds	r3, #36	; 0x24
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 fc44 	bl	800cf80 <xTaskRemoveFromEventList>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d001      	beq.n	800c702 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c6fe:	f000 fd19 	bl	800d134 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c702:	7bfb      	ldrb	r3, [r7, #15]
 800c704:	3b01      	subs	r3, #1
 800c706:	b2db      	uxtb	r3, r3
 800c708:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	dce9      	bgt.n	800c6e6 <prvUnlockQueue+0x16>
 800c712:	e000      	b.n	800c716 <prvUnlockQueue+0x46>
					break;
 800c714:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	22ff      	movs	r2, #255	; 0xff
 800c71a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c71e:	f000 ff23 	bl	800d568 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c722:	f000 fef1 	bl	800d508 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c72c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c72e:	e011      	b.n	800c754 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	691b      	ldr	r3, [r3, #16]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d012      	beq.n	800c75e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	3310      	adds	r3, #16
 800c73c:	4618      	mov	r0, r3
 800c73e:	f000 fc1f 	bl	800cf80 <xTaskRemoveFromEventList>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d001      	beq.n	800c74c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c748:	f000 fcf4 	bl	800d134 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c74c:	7bbb      	ldrb	r3, [r7, #14]
 800c74e:	3b01      	subs	r3, #1
 800c750:	b2db      	uxtb	r3, r3
 800c752:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	dce9      	bgt.n	800c730 <prvUnlockQueue+0x60>
 800c75c:	e000      	b.n	800c760 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c75e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	22ff      	movs	r2, #255	; 0xff
 800c764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c768:	f000 fefe 	bl	800d568 <vPortExitCritical>
}
 800c76c:	bf00      	nop
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c77c:	f000 fec4 	bl	800d508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c784:	2b00      	cmp	r3, #0
 800c786:	d102      	bne.n	800c78e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c788:	2301      	movs	r3, #1
 800c78a:	60fb      	str	r3, [r7, #12]
 800c78c:	e001      	b.n	800c792 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c78e:	2300      	movs	r3, #0
 800c790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c792:	f000 fee9 	bl	800d568 <vPortExitCritical>

	return xReturn;
 800c796:	68fb      	ldr	r3, [r7, #12]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3710      	adds	r7, #16
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7a8:	f000 feae 	bl	800d508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d102      	bne.n	800c7be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	60fb      	str	r3, [r7, #12]
 800c7bc:	e001      	b.n	800c7c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7c2:	f000 fed1 	bl	800d568 <vPortExitCritical>

	return xReturn;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b08e      	sub	sp, #56	; 0x38
 800c7d4:	af04      	add	r7, sp, #16
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	607a      	str	r2, [r7, #4]
 800c7dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10a      	bne.n	800c7fa <xTaskCreateStatic+0x2a>
	__asm volatile
 800c7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	623b      	str	r3, [r7, #32]
}
 800c7f6:	bf00      	nop
 800c7f8:	e7fe      	b.n	800c7f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10a      	bne.n	800c816 <xTaskCreateStatic+0x46>
	__asm volatile
 800c800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	61fb      	str	r3, [r7, #28]
}
 800c812:	bf00      	nop
 800c814:	e7fe      	b.n	800c814 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c816:	2358      	movs	r3, #88	; 0x58
 800c818:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	2b58      	cmp	r3, #88	; 0x58
 800c81e:	d00a      	beq.n	800c836 <xTaskCreateStatic+0x66>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	61bb      	str	r3, [r7, #24]
}
 800c832:	bf00      	nop
 800c834:	e7fe      	b.n	800c834 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c836:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d01e      	beq.n	800c87c <xTaskCreateStatic+0xac>
 800c83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c840:	2b00      	cmp	r3, #0
 800c842:	d01b      	beq.n	800c87c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c846:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c84c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c850:	2202      	movs	r2, #2
 800c852:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c856:	2300      	movs	r3, #0
 800c858:	9303      	str	r3, [sp, #12]
 800c85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85c:	9302      	str	r3, [sp, #8]
 800c85e:	f107 0314 	add.w	r3, r7, #20
 800c862:	9301      	str	r3, [sp, #4]
 800c864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c866:	9300      	str	r3, [sp, #0]
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	68b9      	ldr	r1, [r7, #8]
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f000 f850 	bl	800c914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c876:	f000 f8df 	bl	800ca38 <prvAddNewTaskToReadyList>
 800c87a:	e001      	b.n	800c880 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c87c:	2300      	movs	r3, #0
 800c87e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c880:	697b      	ldr	r3, [r7, #20]
	}
 800c882:	4618      	mov	r0, r3
 800c884:	3728      	adds	r7, #40	; 0x28
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b08c      	sub	sp, #48	; 0x30
 800c88e:	af04      	add	r7, sp, #16
 800c890:	60f8      	str	r0, [r7, #12]
 800c892:	60b9      	str	r1, [r7, #8]
 800c894:	603b      	str	r3, [r7, #0]
 800c896:	4613      	mov	r3, r2
 800c898:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c89a:	88fb      	ldrh	r3, [r7, #6]
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f000 ff24 	bl	800d6ec <pvPortMalloc>
 800c8a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00e      	beq.n	800c8ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c8ac:	2058      	movs	r0, #88	; 0x58
 800c8ae:	f000 ff1d 	bl	800d6ec <pvPortMalloc>
 800c8b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d003      	beq.n	800c8c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	697a      	ldr	r2, [r7, #20]
 800c8be:	631a      	str	r2, [r3, #48]	; 0x30
 800c8c0:	e005      	b.n	800c8ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c8c2:	6978      	ldr	r0, [r7, #20]
 800c8c4:	f000 ffe2 	bl	800d88c <vPortFree>
 800c8c8:	e001      	b.n	800c8ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d017      	beq.n	800c904 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c8dc:	88fa      	ldrh	r2, [r7, #6]
 800c8de:	2300      	movs	r3, #0
 800c8e0:	9303      	str	r3, [sp, #12]
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	9302      	str	r3, [sp, #8]
 800c8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e8:	9301      	str	r3, [sp, #4]
 800c8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ec:	9300      	str	r3, [sp, #0]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	68b9      	ldr	r1, [r7, #8]
 800c8f2:	68f8      	ldr	r0, [r7, #12]
 800c8f4:	f000 f80e 	bl	800c914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8f8:	69f8      	ldr	r0, [r7, #28]
 800c8fa:	f000 f89d 	bl	800ca38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c8fe:	2301      	movs	r3, #1
 800c900:	61bb      	str	r3, [r7, #24]
 800c902:	e002      	b.n	800c90a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c904:	f04f 33ff 	mov.w	r3, #4294967295
 800c908:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c90a:	69bb      	ldr	r3, [r7, #24]
	}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3720      	adds	r7, #32
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b088      	sub	sp, #32
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	607a      	str	r2, [r7, #4]
 800c920:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c924:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	009b      	lsls	r3, r3, #2
 800c92a:	461a      	mov	r2, r3
 800c92c:	21a5      	movs	r1, #165	; 0xa5
 800c92e:	f001 fc3f 	bl	800e1b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c93c:	3b01      	subs	r3, #1
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	4413      	add	r3, r2
 800c942:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	f023 0307 	bic.w	r3, r3, #7
 800c94a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	f003 0307 	and.w	r3, r3, #7
 800c952:	2b00      	cmp	r3, #0
 800c954:	d00a      	beq.n	800c96c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	617b      	str	r3, [r7, #20]
}
 800c968:	bf00      	nop
 800c96a:	e7fe      	b.n	800c96a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d01f      	beq.n	800c9b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c972:	2300      	movs	r3, #0
 800c974:	61fb      	str	r3, [r7, #28]
 800c976:	e012      	b.n	800c99e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	4413      	add	r3, r2
 800c97e:	7819      	ldrb	r1, [r3, #0]
 800c980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	4413      	add	r3, r2
 800c986:	3334      	adds	r3, #52	; 0x34
 800c988:	460a      	mov	r2, r1
 800c98a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c98c:	68ba      	ldr	r2, [r7, #8]
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	4413      	add	r3, r2
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d006      	beq.n	800c9a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	3301      	adds	r3, #1
 800c99c:	61fb      	str	r3, [r7, #28]
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	2b0f      	cmp	r3, #15
 800c9a2:	d9e9      	bls.n	800c978 <prvInitialiseNewTask+0x64>
 800c9a4:	e000      	b.n	800c9a8 <prvInitialiseNewTask+0x94>
			{
				break;
 800c9a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c9b0:	e003      	b.n	800c9ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9bc:	2b06      	cmp	r3, #6
 800c9be:	d901      	bls.n	800c9c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c9c0:	2306      	movs	r3, #6
 800c9c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d8:	3304      	adds	r3, #4
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7ff f920 	bl	800bc20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e2:	3318      	adds	r3, #24
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7ff f91b 	bl	800bc20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f2:	f1c3 0207 	rsb	r2, r3, #7
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ca00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca02:	2200      	movs	r2, #0
 800ca04:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca08:	2200      	movs	r2, #0
 800ca0a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca14:	683a      	ldr	r2, [r7, #0]
 800ca16:	68f9      	ldr	r1, [r7, #12]
 800ca18:	69b8      	ldr	r0, [r7, #24]
 800ca1a:	f000 fd01 	bl	800d420 <pxPortInitialiseStack>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d002      	beq.n	800ca30 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ca2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca30:	bf00      	nop
 800ca32:	3720      	adds	r7, #32
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ca40:	f000 fd62 	bl	800d508 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca44:	4b2a      	ldr	r3, [pc, #168]	; (800caf0 <prvAddNewTaskToReadyList+0xb8>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	4a29      	ldr	r2, [pc, #164]	; (800caf0 <prvAddNewTaskToReadyList+0xb8>)
 800ca4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ca4e:	4b29      	ldr	r3, [pc, #164]	; (800caf4 <prvAddNewTaskToReadyList+0xbc>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d109      	bne.n	800ca6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ca56:	4a27      	ldr	r2, [pc, #156]	; (800caf4 <prvAddNewTaskToReadyList+0xbc>)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ca5c:	4b24      	ldr	r3, [pc, #144]	; (800caf0 <prvAddNewTaskToReadyList+0xb8>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d110      	bne.n	800ca86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca64:	f000 fb72 	bl	800d14c <prvInitialiseTaskLists>
 800ca68:	e00d      	b.n	800ca86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca6a:	4b23      	ldr	r3, [pc, #140]	; (800caf8 <prvAddNewTaskToReadyList+0xc0>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d109      	bne.n	800ca86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca72:	4b20      	ldr	r3, [pc, #128]	; (800caf4 <prvAddNewTaskToReadyList+0xbc>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d802      	bhi.n	800ca86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca80:	4a1c      	ldr	r2, [pc, #112]	; (800caf4 <prvAddNewTaskToReadyList+0xbc>)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca86:	4b1d      	ldr	r3, [pc, #116]	; (800cafc <prvAddNewTaskToReadyList+0xc4>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	4a1b      	ldr	r2, [pc, #108]	; (800cafc <prvAddNewTaskToReadyList+0xc4>)
 800ca8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca94:	2201      	movs	r2, #1
 800ca96:	409a      	lsls	r2, r3
 800ca98:	4b19      	ldr	r3, [pc, #100]	; (800cb00 <prvAddNewTaskToReadyList+0xc8>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	4a18      	ldr	r2, [pc, #96]	; (800cb00 <prvAddNewTaskToReadyList+0xc8>)
 800caa0:	6013      	str	r3, [r2, #0]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa6:	4613      	mov	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	4413      	add	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	4a15      	ldr	r2, [pc, #84]	; (800cb04 <prvAddNewTaskToReadyList+0xcc>)
 800cab0:	441a      	add	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	3304      	adds	r3, #4
 800cab6:	4619      	mov	r1, r3
 800cab8:	4610      	mov	r0, r2
 800caba:	f7ff f8be 	bl	800bc3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cabe:	f000 fd53 	bl	800d568 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cac2:	4b0d      	ldr	r3, [pc, #52]	; (800caf8 <prvAddNewTaskToReadyList+0xc0>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00e      	beq.n	800cae8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800caca:	4b0a      	ldr	r3, [pc, #40]	; (800caf4 <prvAddNewTaskToReadyList+0xbc>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d207      	bcs.n	800cae8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cad8:	4b0b      	ldr	r3, [pc, #44]	; (800cb08 <prvAddNewTaskToReadyList+0xd0>)
 800cada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cade:	601a      	str	r2, [r3, #0]
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cae8:	bf00      	nop
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	200001ec 	.word	0x200001ec
 800caf4:	200000f0 	.word	0x200000f0
 800caf8:	200001f8 	.word	0x200001f8
 800cafc:	20000208 	.word	0x20000208
 800cb00:	200001f4 	.word	0x200001f4
 800cb04:	200000f4 	.word	0x200000f4
 800cb08:	e000ed04 	.word	0xe000ed04

0800cb0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cb14:	2300      	movs	r3, #0
 800cb16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d017      	beq.n	800cb4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cb1e:	4b13      	ldr	r3, [pc, #76]	; (800cb6c <vTaskDelay+0x60>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00a      	beq.n	800cb3c <vTaskDelay+0x30>
	__asm volatile
 800cb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2a:	f383 8811 	msr	BASEPRI, r3
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	60bb      	str	r3, [r7, #8]
}
 800cb38:	bf00      	nop
 800cb3a:	e7fe      	b.n	800cb3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cb3c:	f000 f81a 	bl	800cb74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb40:	2100      	movs	r1, #0
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 fc06 	bl	800d354 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb48:	f000 f822 	bl	800cb90 <xTaskResumeAll>
 800cb4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d107      	bne.n	800cb64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cb54:	4b06      	ldr	r3, [pc, #24]	; (800cb70 <vTaskDelay+0x64>)
 800cb56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb5a:	601a      	str	r2, [r3, #0]
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb64:	bf00      	nop
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	20000210 	.word	0x20000210
 800cb70:	e000ed04 	.word	0xe000ed04

0800cb74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cb74:	b480      	push	{r7}
 800cb76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cb78:	4b04      	ldr	r3, [pc, #16]	; (800cb8c <vTaskSuspendAll+0x18>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	4a03      	ldr	r2, [pc, #12]	; (800cb8c <vTaskSuspendAll+0x18>)
 800cb80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cb82:	bf00      	nop
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr
 800cb8c:	20000210 	.word	0x20000210

0800cb90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb96:	2300      	movs	r3, #0
 800cb98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb9e:	4b41      	ldr	r3, [pc, #260]	; (800cca4 <xTaskResumeAll+0x114>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d10a      	bne.n	800cbbc <xTaskResumeAll+0x2c>
	__asm volatile
 800cba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbaa:	f383 8811 	msr	BASEPRI, r3
 800cbae:	f3bf 8f6f 	isb	sy
 800cbb2:	f3bf 8f4f 	dsb	sy
 800cbb6:	603b      	str	r3, [r7, #0]
}
 800cbb8:	bf00      	nop
 800cbba:	e7fe      	b.n	800cbba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cbbc:	f000 fca4 	bl	800d508 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cbc0:	4b38      	ldr	r3, [pc, #224]	; (800cca4 <xTaskResumeAll+0x114>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	4a37      	ldr	r2, [pc, #220]	; (800cca4 <xTaskResumeAll+0x114>)
 800cbc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbca:	4b36      	ldr	r3, [pc, #216]	; (800cca4 <xTaskResumeAll+0x114>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d161      	bne.n	800cc96 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cbd2:	4b35      	ldr	r3, [pc, #212]	; (800cca8 <xTaskResumeAll+0x118>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d05d      	beq.n	800cc96 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbda:	e02e      	b.n	800cc3a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbdc:	4b33      	ldr	r3, [pc, #204]	; (800ccac <xTaskResumeAll+0x11c>)
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	3318      	adds	r3, #24
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7ff f883 	bl	800bcf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	3304      	adds	r3, #4
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7ff f87e 	bl	800bcf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	409a      	lsls	r2, r3
 800cc00:	4b2b      	ldr	r3, [pc, #172]	; (800ccb0 <xTaskResumeAll+0x120>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4313      	orrs	r3, r2
 800cc06:	4a2a      	ldr	r2, [pc, #168]	; (800ccb0 <xTaskResumeAll+0x120>)
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc0e:	4613      	mov	r3, r2
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	4413      	add	r3, r2
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	4a27      	ldr	r2, [pc, #156]	; (800ccb4 <xTaskResumeAll+0x124>)
 800cc18:	441a      	add	r2, r3
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	3304      	adds	r3, #4
 800cc1e:	4619      	mov	r1, r3
 800cc20:	4610      	mov	r0, r2
 800cc22:	f7ff f80a 	bl	800bc3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc2a:	4b23      	ldr	r3, [pc, #140]	; (800ccb8 <xTaskResumeAll+0x128>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d302      	bcc.n	800cc3a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cc34:	4b21      	ldr	r3, [pc, #132]	; (800ccbc <xTaskResumeAll+0x12c>)
 800cc36:	2201      	movs	r2, #1
 800cc38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc3a:	4b1c      	ldr	r3, [pc, #112]	; (800ccac <xTaskResumeAll+0x11c>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1cc      	bne.n	800cbdc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d001      	beq.n	800cc4c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cc48:	f000 fac0 	bl	800d1cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cc4c:	4b1c      	ldr	r3, [pc, #112]	; (800ccc0 <xTaskResumeAll+0x130>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d010      	beq.n	800cc7a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cc58:	f000 f836 	bl	800ccc8 <xTaskIncrementTick>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d002      	beq.n	800cc68 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cc62:	4b16      	ldr	r3, [pc, #88]	; (800ccbc <xTaskResumeAll+0x12c>)
 800cc64:	2201      	movs	r2, #1
 800cc66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1f1      	bne.n	800cc58 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cc74:	4b12      	ldr	r3, [pc, #72]	; (800ccc0 <xTaskResumeAll+0x130>)
 800cc76:	2200      	movs	r2, #0
 800cc78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cc7a:	4b10      	ldr	r3, [pc, #64]	; (800ccbc <xTaskResumeAll+0x12c>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d009      	beq.n	800cc96 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cc82:	2301      	movs	r3, #1
 800cc84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cc86:	4b0f      	ldr	r3, [pc, #60]	; (800ccc4 <xTaskResumeAll+0x134>)
 800cc88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc8c:	601a      	str	r2, [r3, #0]
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc96:	f000 fc67 	bl	800d568 <vPortExitCritical>

	return xAlreadyYielded;
 800cc9a:	68bb      	ldr	r3, [r7, #8]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	20000210 	.word	0x20000210
 800cca8:	200001ec 	.word	0x200001ec
 800ccac:	200001b0 	.word	0x200001b0
 800ccb0:	200001f4 	.word	0x200001f4
 800ccb4:	200000f4 	.word	0x200000f4
 800ccb8:	200000f0 	.word	0x200000f0
 800ccbc:	20000200 	.word	0x20000200
 800ccc0:	200001fc 	.word	0x200001fc
 800ccc4:	e000ed04 	.word	0xe000ed04

0800ccc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b086      	sub	sp, #24
 800cccc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccd2:	4b4e      	ldr	r3, [pc, #312]	; (800ce0c <xTaskIncrementTick+0x144>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f040 808e 	bne.w	800cdf8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ccdc:	4b4c      	ldr	r3, [pc, #304]	; (800ce10 <xTaskIncrementTick+0x148>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	3301      	adds	r3, #1
 800cce2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cce4:	4a4a      	ldr	r2, [pc, #296]	; (800ce10 <xTaskIncrementTick+0x148>)
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d120      	bne.n	800cd32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ccf0:	4b48      	ldr	r3, [pc, #288]	; (800ce14 <xTaskIncrementTick+0x14c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00a      	beq.n	800cd10 <xTaskIncrementTick+0x48>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	603b      	str	r3, [r7, #0]
}
 800cd0c:	bf00      	nop
 800cd0e:	e7fe      	b.n	800cd0e <xTaskIncrementTick+0x46>
 800cd10:	4b40      	ldr	r3, [pc, #256]	; (800ce14 <xTaskIncrementTick+0x14c>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	60fb      	str	r3, [r7, #12]
 800cd16:	4b40      	ldr	r3, [pc, #256]	; (800ce18 <xTaskIncrementTick+0x150>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a3e      	ldr	r2, [pc, #248]	; (800ce14 <xTaskIncrementTick+0x14c>)
 800cd1c:	6013      	str	r3, [r2, #0]
 800cd1e:	4a3e      	ldr	r2, [pc, #248]	; (800ce18 <xTaskIncrementTick+0x150>)
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	6013      	str	r3, [r2, #0]
 800cd24:	4b3d      	ldr	r3, [pc, #244]	; (800ce1c <xTaskIncrementTick+0x154>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	4a3c      	ldr	r2, [pc, #240]	; (800ce1c <xTaskIncrementTick+0x154>)
 800cd2c:	6013      	str	r3, [r2, #0]
 800cd2e:	f000 fa4d 	bl	800d1cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd32:	4b3b      	ldr	r3, [pc, #236]	; (800ce20 <xTaskIncrementTick+0x158>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	693a      	ldr	r2, [r7, #16]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d348      	bcc.n	800cdce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd3c:	4b35      	ldr	r3, [pc, #212]	; (800ce14 <xTaskIncrementTick+0x14c>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d104      	bne.n	800cd50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd46:	4b36      	ldr	r3, [pc, #216]	; (800ce20 <xTaskIncrementTick+0x158>)
 800cd48:	f04f 32ff 	mov.w	r2, #4294967295
 800cd4c:	601a      	str	r2, [r3, #0]
					break;
 800cd4e:	e03e      	b.n	800cdce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd50:	4b30      	ldr	r3, [pc, #192]	; (800ce14 <xTaskIncrementTick+0x14c>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cd60:	693a      	ldr	r2, [r7, #16]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d203      	bcs.n	800cd70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cd68:	4a2d      	ldr	r2, [pc, #180]	; (800ce20 <xTaskIncrementTick+0x158>)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cd6e:	e02e      	b.n	800cdce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	3304      	adds	r3, #4
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fe ffbd 	bl	800bcf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d004      	beq.n	800cd8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	3318      	adds	r3, #24
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe ffb4 	bl	800bcf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd90:	2201      	movs	r2, #1
 800cd92:	409a      	lsls	r2, r3
 800cd94:	4b23      	ldr	r3, [pc, #140]	; (800ce24 <xTaskIncrementTick+0x15c>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	4a22      	ldr	r2, [pc, #136]	; (800ce24 <xTaskIncrementTick+0x15c>)
 800cd9c:	6013      	str	r3, [r2, #0]
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda2:	4613      	mov	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	4413      	add	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	4a1f      	ldr	r2, [pc, #124]	; (800ce28 <xTaskIncrementTick+0x160>)
 800cdac:	441a      	add	r2, r3
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	3304      	adds	r3, #4
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	f7fe ff40 	bl	800bc3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdbe:	4b1b      	ldr	r3, [pc, #108]	; (800ce2c <xTaskIncrementTick+0x164>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d3b9      	bcc.n	800cd3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdcc:	e7b6      	b.n	800cd3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cdce:	4b17      	ldr	r3, [pc, #92]	; (800ce2c <xTaskIncrementTick+0x164>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd4:	4914      	ldr	r1, [pc, #80]	; (800ce28 <xTaskIncrementTick+0x160>)
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	4413      	add	r3, r2
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	440b      	add	r3, r1
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d901      	bls.n	800cdea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cde6:	2301      	movs	r3, #1
 800cde8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cdea:	4b11      	ldr	r3, [pc, #68]	; (800ce30 <xTaskIncrementTick+0x168>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d007      	beq.n	800ce02 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	617b      	str	r3, [r7, #20]
 800cdf6:	e004      	b.n	800ce02 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cdf8:	4b0e      	ldr	r3, [pc, #56]	; (800ce34 <xTaskIncrementTick+0x16c>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	4a0d      	ldr	r2, [pc, #52]	; (800ce34 <xTaskIncrementTick+0x16c>)
 800ce00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ce02:	697b      	ldr	r3, [r7, #20]
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3718      	adds	r7, #24
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	20000210 	.word	0x20000210
 800ce10:	200001f0 	.word	0x200001f0
 800ce14:	200001a8 	.word	0x200001a8
 800ce18:	200001ac 	.word	0x200001ac
 800ce1c:	20000204 	.word	0x20000204
 800ce20:	2000020c 	.word	0x2000020c
 800ce24:	200001f4 	.word	0x200001f4
 800ce28:	200000f4 	.word	0x200000f4
 800ce2c:	200000f0 	.word	0x200000f0
 800ce30:	20000200 	.word	0x20000200
 800ce34:	200001fc 	.word	0x200001fc

0800ce38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b088      	sub	sp, #32
 800ce3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ce3e:	4b39      	ldr	r3, [pc, #228]	; (800cf24 <vTaskSwitchContext+0xec>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d003      	beq.n	800ce4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ce46:	4b38      	ldr	r3, [pc, #224]	; (800cf28 <vTaskSwitchContext+0xf0>)
 800ce48:	2201      	movs	r2, #1
 800ce4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ce4c:	e066      	b.n	800cf1c <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800ce4e:	4b36      	ldr	r3, [pc, #216]	; (800cf28 <vTaskSwitchContext+0xf0>)
 800ce50:	2200      	movs	r2, #0
 800ce52:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ce54:	4b35      	ldr	r3, [pc, #212]	; (800cf2c <vTaskSwitchContext+0xf4>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce5a:	61fb      	str	r3, [r7, #28]
 800ce5c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ce60:	61bb      	str	r3, [r7, #24]
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	69ba      	ldr	r2, [r7, #24]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d111      	bne.n	800ce90 <vTaskSwitchContext+0x58>
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	3304      	adds	r3, #4
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	69ba      	ldr	r2, [r7, #24]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d10b      	bne.n	800ce90 <vTaskSwitchContext+0x58>
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	3308      	adds	r3, #8
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	69ba      	ldr	r2, [r7, #24]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d105      	bne.n	800ce90 <vTaskSwitchContext+0x58>
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	330c      	adds	r3, #12
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	69ba      	ldr	r2, [r7, #24]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d008      	beq.n	800cea2 <vTaskSwitchContext+0x6a>
 800ce90:	4b26      	ldr	r3, [pc, #152]	; (800cf2c <vTaskSwitchContext+0xf4>)
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	4b25      	ldr	r3, [pc, #148]	; (800cf2c <vTaskSwitchContext+0xf4>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	3334      	adds	r3, #52	; 0x34
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	f7f4 f80f 	bl	8000ec0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cea2:	4b23      	ldr	r3, [pc, #140]	; (800cf30 <vTaskSwitchContext+0xf8>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	fab3 f383 	clz	r3, r3
 800ceae:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ceb0:	7afb      	ldrb	r3, [r7, #11]
 800ceb2:	f1c3 031f 	rsb	r3, r3, #31
 800ceb6:	617b      	str	r3, [r7, #20]
 800ceb8:	491e      	ldr	r1, [pc, #120]	; (800cf34 <vTaskSwitchContext+0xfc>)
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	4613      	mov	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4413      	add	r3, r2
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	440b      	add	r3, r1
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d10a      	bne.n	800cee2 <vTaskSwitchContext+0xaa>
	__asm volatile
 800cecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	607b      	str	r3, [r7, #4]
}
 800cede:	bf00      	nop
 800cee0:	e7fe      	b.n	800cee0 <vTaskSwitchContext+0xa8>
 800cee2:	697a      	ldr	r2, [r7, #20]
 800cee4:	4613      	mov	r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	4413      	add	r3, r2
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	4a11      	ldr	r2, [pc, #68]	; (800cf34 <vTaskSwitchContext+0xfc>)
 800ceee:	4413      	add	r3, r2
 800cef0:	613b      	str	r3, [r7, #16]
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	685a      	ldr	r2, [r3, #4]
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	605a      	str	r2, [r3, #4]
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	685a      	ldr	r2, [r3, #4]
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	3308      	adds	r3, #8
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d104      	bne.n	800cf12 <vTaskSwitchContext+0xda>
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	685a      	ldr	r2, [r3, #4]
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	605a      	str	r2, [r3, #4]
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	4a04      	ldr	r2, [pc, #16]	; (800cf2c <vTaskSwitchContext+0xf4>)
 800cf1a:	6013      	str	r3, [r2, #0]
}
 800cf1c:	bf00      	nop
 800cf1e:	3720      	adds	r7, #32
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	20000210 	.word	0x20000210
 800cf28:	20000200 	.word	0x20000200
 800cf2c:	200000f0 	.word	0x200000f0
 800cf30:	200001f4 	.word	0x200001f4
 800cf34:	200000f4 	.word	0x200000f4

0800cf38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10a      	bne.n	800cf5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cf48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4c:	f383 8811 	msr	BASEPRI, r3
 800cf50:	f3bf 8f6f 	isb	sy
 800cf54:	f3bf 8f4f 	dsb	sy
 800cf58:	60fb      	str	r3, [r7, #12]
}
 800cf5a:	bf00      	nop
 800cf5c:	e7fe      	b.n	800cf5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf5e:	4b07      	ldr	r3, [pc, #28]	; (800cf7c <vTaskPlaceOnEventList+0x44>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	3318      	adds	r3, #24
 800cf64:	4619      	mov	r1, r3
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f7fe fe8b 	bl	800bc82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cf6c:	2101      	movs	r1, #1
 800cf6e:	6838      	ldr	r0, [r7, #0]
 800cf70:	f000 f9f0 	bl	800d354 <prvAddCurrentTaskToDelayedList>
}
 800cf74:	bf00      	nop
 800cf76:	3710      	adds	r7, #16
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	200000f0 	.word	0x200000f0

0800cf80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b086      	sub	sp, #24
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d10a      	bne.n	800cfac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9a:	f383 8811 	msr	BASEPRI, r3
 800cf9e:	f3bf 8f6f 	isb	sy
 800cfa2:	f3bf 8f4f 	dsb	sy
 800cfa6:	60fb      	str	r3, [r7, #12]
}
 800cfa8:	bf00      	nop
 800cfaa:	e7fe      	b.n	800cfaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	3318      	adds	r3, #24
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fe fe9f 	bl	800bcf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfb6:	4b1d      	ldr	r3, [pc, #116]	; (800d02c <xTaskRemoveFromEventList+0xac>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d11c      	bne.n	800cff8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	3304      	adds	r3, #4
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe fe96 	bl	800bcf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfcc:	2201      	movs	r2, #1
 800cfce:	409a      	lsls	r2, r3
 800cfd0:	4b17      	ldr	r3, [pc, #92]	; (800d030 <xTaskRemoveFromEventList+0xb0>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	4a16      	ldr	r2, [pc, #88]	; (800d030 <xTaskRemoveFromEventList+0xb0>)
 800cfd8:	6013      	str	r3, [r2, #0]
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfde:	4613      	mov	r3, r2
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	4a13      	ldr	r2, [pc, #76]	; (800d034 <xTaskRemoveFromEventList+0xb4>)
 800cfe8:	441a      	add	r2, r3
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	3304      	adds	r3, #4
 800cfee:	4619      	mov	r1, r3
 800cff0:	4610      	mov	r0, r2
 800cff2:	f7fe fe22 	bl	800bc3a <vListInsertEnd>
 800cff6:	e005      	b.n	800d004 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	3318      	adds	r3, #24
 800cffc:	4619      	mov	r1, r3
 800cffe:	480e      	ldr	r0, [pc, #56]	; (800d038 <xTaskRemoveFromEventList+0xb8>)
 800d000:	f7fe fe1b 	bl	800bc3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d008:	4b0c      	ldr	r3, [pc, #48]	; (800d03c <xTaskRemoveFromEventList+0xbc>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d00e:	429a      	cmp	r2, r3
 800d010:	d905      	bls.n	800d01e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d012:	2301      	movs	r3, #1
 800d014:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d016:	4b0a      	ldr	r3, [pc, #40]	; (800d040 <xTaskRemoveFromEventList+0xc0>)
 800d018:	2201      	movs	r2, #1
 800d01a:	601a      	str	r2, [r3, #0]
 800d01c:	e001      	b.n	800d022 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d01e:	2300      	movs	r3, #0
 800d020:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d022:	697b      	ldr	r3, [r7, #20]
}
 800d024:	4618      	mov	r0, r3
 800d026:	3718      	adds	r7, #24
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	20000210 	.word	0x20000210
 800d030:	200001f4 	.word	0x200001f4
 800d034:	200000f4 	.word	0x200000f4
 800d038:	200001b0 	.word	0x200001b0
 800d03c:	200000f0 	.word	0x200000f0
 800d040:	20000200 	.word	0x20000200

0800d044 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d04c:	4b06      	ldr	r3, [pc, #24]	; (800d068 <vTaskInternalSetTimeOutState+0x24>)
 800d04e:	681a      	ldr	r2, [r3, #0]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d054:	4b05      	ldr	r3, [pc, #20]	; (800d06c <vTaskInternalSetTimeOutState+0x28>)
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	605a      	str	r2, [r3, #4]
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr
 800d068:	20000204 	.word	0x20000204
 800d06c:	200001f0 	.word	0x200001f0

0800d070 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b088      	sub	sp, #32
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10a      	bne.n	800d096 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d084:	f383 8811 	msr	BASEPRI, r3
 800d088:	f3bf 8f6f 	isb	sy
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	613b      	str	r3, [r7, #16]
}
 800d092:	bf00      	nop
 800d094:	e7fe      	b.n	800d094 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10a      	bne.n	800d0b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	60fb      	str	r3, [r7, #12]
}
 800d0ae:	bf00      	nop
 800d0b0:	e7fe      	b.n	800d0b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d0b2:	f000 fa29 	bl	800d508 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d0b6:	4b1d      	ldr	r3, [pc, #116]	; (800d12c <xTaskCheckForTimeOut+0xbc>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	69ba      	ldr	r2, [r7, #24]
 800d0c2:	1ad3      	subs	r3, r2, r3
 800d0c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ce:	d102      	bne.n	800d0d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	61fb      	str	r3, [r7, #28]
 800d0d4:	e023      	b.n	800d11e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	4b15      	ldr	r3, [pc, #84]	; (800d130 <xTaskCheckForTimeOut+0xc0>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d007      	beq.n	800d0f2 <xTaskCheckForTimeOut+0x82>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	69ba      	ldr	r2, [r7, #24]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d302      	bcc.n	800d0f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	61fb      	str	r3, [r7, #28]
 800d0f0:	e015      	b.n	800d11e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	697a      	ldr	r2, [r7, #20]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d20b      	bcs.n	800d114 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	1ad2      	subs	r2, r2, r3
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f7ff ff9b 	bl	800d044 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d10e:	2300      	movs	r3, #0
 800d110:	61fb      	str	r3, [r7, #28]
 800d112:	e004      	b.n	800d11e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	2200      	movs	r2, #0
 800d118:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d11a:	2301      	movs	r3, #1
 800d11c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d11e:	f000 fa23 	bl	800d568 <vPortExitCritical>

	return xReturn;
 800d122:	69fb      	ldr	r3, [r7, #28]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3720      	adds	r7, #32
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	200001f0 	.word	0x200001f0
 800d130:	20000204 	.word	0x20000204

0800d134 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d134:	b480      	push	{r7}
 800d136:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d138:	4b03      	ldr	r3, [pc, #12]	; (800d148 <vTaskMissedYield+0x14>)
 800d13a:	2201      	movs	r2, #1
 800d13c:	601a      	str	r2, [r3, #0]
}
 800d13e:	bf00      	nop
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr
 800d148:	20000200 	.word	0x20000200

0800d14c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d152:	2300      	movs	r3, #0
 800d154:	607b      	str	r3, [r7, #4]
 800d156:	e00c      	b.n	800d172 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	4613      	mov	r3, r2
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	4413      	add	r3, r2
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	4a12      	ldr	r2, [pc, #72]	; (800d1ac <prvInitialiseTaskLists+0x60>)
 800d164:	4413      	add	r3, r2
 800d166:	4618      	mov	r0, r3
 800d168:	f7fe fd3a 	bl	800bbe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	3301      	adds	r3, #1
 800d170:	607b      	str	r3, [r7, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2b06      	cmp	r3, #6
 800d176:	d9ef      	bls.n	800d158 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d178:	480d      	ldr	r0, [pc, #52]	; (800d1b0 <prvInitialiseTaskLists+0x64>)
 800d17a:	f7fe fd31 	bl	800bbe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d17e:	480d      	ldr	r0, [pc, #52]	; (800d1b4 <prvInitialiseTaskLists+0x68>)
 800d180:	f7fe fd2e 	bl	800bbe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d184:	480c      	ldr	r0, [pc, #48]	; (800d1b8 <prvInitialiseTaskLists+0x6c>)
 800d186:	f7fe fd2b 	bl	800bbe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d18a:	480c      	ldr	r0, [pc, #48]	; (800d1bc <prvInitialiseTaskLists+0x70>)
 800d18c:	f7fe fd28 	bl	800bbe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d190:	480b      	ldr	r0, [pc, #44]	; (800d1c0 <prvInitialiseTaskLists+0x74>)
 800d192:	f7fe fd25 	bl	800bbe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d196:	4b0b      	ldr	r3, [pc, #44]	; (800d1c4 <prvInitialiseTaskLists+0x78>)
 800d198:	4a05      	ldr	r2, [pc, #20]	; (800d1b0 <prvInitialiseTaskLists+0x64>)
 800d19a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d19c:	4b0a      	ldr	r3, [pc, #40]	; (800d1c8 <prvInitialiseTaskLists+0x7c>)
 800d19e:	4a05      	ldr	r2, [pc, #20]	; (800d1b4 <prvInitialiseTaskLists+0x68>)
 800d1a0:	601a      	str	r2, [r3, #0]
}
 800d1a2:	bf00      	nop
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	200000f4 	.word	0x200000f4
 800d1b0:	20000180 	.word	0x20000180
 800d1b4:	20000194 	.word	0x20000194
 800d1b8:	200001b0 	.word	0x200001b0
 800d1bc:	200001c4 	.word	0x200001c4
 800d1c0:	200001d8 	.word	0x200001d8
 800d1c4:	200001a8 	.word	0x200001a8
 800d1c8:	200001ac 	.word	0x200001ac

0800d1cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1d2:	4b0c      	ldr	r3, [pc, #48]	; (800d204 <prvResetNextTaskUnblockTime+0x38>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d104      	bne.n	800d1e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1dc:	4b0a      	ldr	r3, [pc, #40]	; (800d208 <prvResetNextTaskUnblockTime+0x3c>)
 800d1de:	f04f 32ff 	mov.w	r2, #4294967295
 800d1e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1e4:	e008      	b.n	800d1f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1e6:	4b07      	ldr	r3, [pc, #28]	; (800d204 <prvResetNextTaskUnblockTime+0x38>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	4a04      	ldr	r2, [pc, #16]	; (800d208 <prvResetNextTaskUnblockTime+0x3c>)
 800d1f6:	6013      	str	r3, [r2, #0]
}
 800d1f8:	bf00      	nop
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr
 800d204:	200001a8 	.word	0x200001a8
 800d208:	2000020c 	.word	0x2000020c

0800d20c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d212:	4b0b      	ldr	r3, [pc, #44]	; (800d240 <xTaskGetSchedulerState+0x34>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d102      	bne.n	800d220 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d21a:	2301      	movs	r3, #1
 800d21c:	607b      	str	r3, [r7, #4]
 800d21e:	e008      	b.n	800d232 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d220:	4b08      	ldr	r3, [pc, #32]	; (800d244 <xTaskGetSchedulerState+0x38>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d102      	bne.n	800d22e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d228:	2302      	movs	r3, #2
 800d22a:	607b      	str	r3, [r7, #4]
 800d22c:	e001      	b.n	800d232 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d22e:	2300      	movs	r3, #0
 800d230:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d232:	687b      	ldr	r3, [r7, #4]
	}
 800d234:	4618      	mov	r0, r3
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr
 800d240:	200001f8 	.word	0x200001f8
 800d244:	20000210 	.word	0x20000210

0800d248 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b086      	sub	sp, #24
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d254:	2300      	movs	r3, #0
 800d256:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d06e      	beq.n	800d33c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d25e:	4b3a      	ldr	r3, [pc, #232]	; (800d348 <xTaskPriorityDisinherit+0x100>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	429a      	cmp	r2, r3
 800d266:	d00a      	beq.n	800d27e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26c:	f383 8811 	msr	BASEPRI, r3
 800d270:	f3bf 8f6f 	isb	sy
 800d274:	f3bf 8f4f 	dsb	sy
 800d278:	60fb      	str	r3, [r7, #12]
}
 800d27a:	bf00      	nop
 800d27c:	e7fe      	b.n	800d27c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10a      	bne.n	800d29c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28a:	f383 8811 	msr	BASEPRI, r3
 800d28e:	f3bf 8f6f 	isb	sy
 800d292:	f3bf 8f4f 	dsb	sy
 800d296:	60bb      	str	r3, [r7, #8]
}
 800d298:	bf00      	nop
 800d29a:	e7fe      	b.n	800d29a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2a0:	1e5a      	subs	r2, r3, #1
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d044      	beq.n	800d33c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d140      	bne.n	800d33c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	3304      	adds	r3, #4
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fe fd18 	bl	800bcf4 <uxListRemove>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d115      	bne.n	800d2f6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ce:	491f      	ldr	r1, [pc, #124]	; (800d34c <xTaskPriorityDisinherit+0x104>)
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4413      	add	r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	440b      	add	r3, r1
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d10a      	bne.n	800d2f6 <xTaskPriorityDisinherit+0xae>
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ea:	43da      	mvns	r2, r3
 800d2ec:	4b18      	ldr	r3, [pc, #96]	; (800d350 <xTaskPriorityDisinherit+0x108>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4013      	ands	r3, r2
 800d2f2:	4a17      	ldr	r2, [pc, #92]	; (800d350 <xTaskPriorityDisinherit+0x108>)
 800d2f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d302:	f1c3 0207 	rsb	r2, r3, #7
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d30e:	2201      	movs	r2, #1
 800d310:	409a      	lsls	r2, r3
 800d312:	4b0f      	ldr	r3, [pc, #60]	; (800d350 <xTaskPriorityDisinherit+0x108>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4313      	orrs	r3, r2
 800d318:	4a0d      	ldr	r2, [pc, #52]	; (800d350 <xTaskPriorityDisinherit+0x108>)
 800d31a:	6013      	str	r3, [r2, #0]
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d320:	4613      	mov	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4413      	add	r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	4a08      	ldr	r2, [pc, #32]	; (800d34c <xTaskPriorityDisinherit+0x104>)
 800d32a:	441a      	add	r2, r3
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	3304      	adds	r3, #4
 800d330:	4619      	mov	r1, r3
 800d332:	4610      	mov	r0, r2
 800d334:	f7fe fc81 	bl	800bc3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d338:	2301      	movs	r3, #1
 800d33a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d33c:	697b      	ldr	r3, [r7, #20]
	}
 800d33e:	4618      	mov	r0, r3
 800d340:	3718      	adds	r7, #24
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	200000f0 	.word	0x200000f0
 800d34c:	200000f4 	.word	0x200000f4
 800d350:	200001f4 	.word	0x200001f4

0800d354 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d35e:	4b29      	ldr	r3, [pc, #164]	; (800d404 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d364:	4b28      	ldr	r3, [pc, #160]	; (800d408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	3304      	adds	r3, #4
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fe fcc2 	bl	800bcf4 <uxListRemove>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d10b      	bne.n	800d38e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d376:	4b24      	ldr	r3, [pc, #144]	; (800d408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37c:	2201      	movs	r2, #1
 800d37e:	fa02 f303 	lsl.w	r3, r2, r3
 800d382:	43da      	mvns	r2, r3
 800d384:	4b21      	ldr	r3, [pc, #132]	; (800d40c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4013      	ands	r3, r2
 800d38a:	4a20      	ldr	r2, [pc, #128]	; (800d40c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d38c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d394:	d10a      	bne.n	800d3ac <prvAddCurrentTaskToDelayedList+0x58>
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d007      	beq.n	800d3ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d39c:	4b1a      	ldr	r3, [pc, #104]	; (800d408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	3304      	adds	r3, #4
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	481a      	ldr	r0, [pc, #104]	; (800d410 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d3a6:	f7fe fc48 	bl	800bc3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d3aa:	e026      	b.n	800d3fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d3b4:	4b14      	ldr	r3, [pc, #80]	; (800d408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d209      	bcs.n	800d3d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3c4:	4b13      	ldr	r3, [pc, #76]	; (800d414 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	4b0f      	ldr	r3, [pc, #60]	; (800d408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	3304      	adds	r3, #4
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	f7fe fc56 	bl	800bc82 <vListInsert>
}
 800d3d6:	e010      	b.n	800d3fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3d8:	4b0f      	ldr	r3, [pc, #60]	; (800d418 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	4b0a      	ldr	r3, [pc, #40]	; (800d408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3304      	adds	r3, #4
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	f7fe fc4c 	bl	800bc82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d3ea:	4b0c      	ldr	r3, [pc, #48]	; (800d41c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	68ba      	ldr	r2, [r7, #8]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d202      	bcs.n	800d3fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d3f4:	4a09      	ldr	r2, [pc, #36]	; (800d41c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	6013      	str	r3, [r2, #0]
}
 800d3fa:	bf00      	nop
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	200001f0 	.word	0x200001f0
 800d408:	200000f0 	.word	0x200000f0
 800d40c:	200001f4 	.word	0x200001f4
 800d410:	200001d8 	.word	0x200001d8
 800d414:	200001ac 	.word	0x200001ac
 800d418:	200001a8 	.word	0x200001a8
 800d41c:	2000020c 	.word	0x2000020c

0800d420 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	3b04      	subs	r3, #4
 800d430:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	3b04      	subs	r3, #4
 800d43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	f023 0201 	bic.w	r2, r3, #1
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	3b04      	subs	r3, #4
 800d44e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d450:	4a0c      	ldr	r2, [pc, #48]	; (800d484 <pxPortInitialiseStack+0x64>)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	3b14      	subs	r3, #20
 800d45a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	3b04      	subs	r3, #4
 800d466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f06f 0202 	mvn.w	r2, #2
 800d46e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	3b20      	subs	r3, #32
 800d474:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d476:	68fb      	ldr	r3, [r7, #12]
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3714      	adds	r7, #20
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr
 800d484:	0800d489 	.word	0x0800d489

0800d488 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d488:	b480      	push	{r7}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d48e:	2300      	movs	r3, #0
 800d490:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d492:	4b12      	ldr	r3, [pc, #72]	; (800d4dc <prvTaskExitError+0x54>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d49a:	d00a      	beq.n	800d4b2 <prvTaskExitError+0x2a>
	__asm volatile
 800d49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a0:	f383 8811 	msr	BASEPRI, r3
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	f3bf 8f4f 	dsb	sy
 800d4ac:	60fb      	str	r3, [r7, #12]
}
 800d4ae:	bf00      	nop
 800d4b0:	e7fe      	b.n	800d4b0 <prvTaskExitError+0x28>
	__asm volatile
 800d4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b6:	f383 8811 	msr	BASEPRI, r3
 800d4ba:	f3bf 8f6f 	isb	sy
 800d4be:	f3bf 8f4f 	dsb	sy
 800d4c2:	60bb      	str	r3, [r7, #8]
}
 800d4c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d4c6:	bf00      	nop
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d0fc      	beq.n	800d4c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d4ce:	bf00      	nop
 800d4d0:	bf00      	nop
 800d4d2:	3714      	adds	r7, #20
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	2000003c 	.word	0x2000003c

0800d4e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d4e0:	4b07      	ldr	r3, [pc, #28]	; (800d500 <pxCurrentTCBConst2>)
 800d4e2:	6819      	ldr	r1, [r3, #0]
 800d4e4:	6808      	ldr	r0, [r1, #0]
 800d4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ea:	f380 8809 	msr	PSP, r0
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f04f 0000 	mov.w	r0, #0
 800d4f6:	f380 8811 	msr	BASEPRI, r0
 800d4fa:	4770      	bx	lr
 800d4fc:	f3af 8000 	nop.w

0800d500 <pxCurrentTCBConst2>:
 800d500:	200000f0 	.word	0x200000f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d504:	bf00      	nop
 800d506:	bf00      	nop

0800d508 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
	__asm volatile
 800d50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d512:	f383 8811 	msr	BASEPRI, r3
 800d516:	f3bf 8f6f 	isb	sy
 800d51a:	f3bf 8f4f 	dsb	sy
 800d51e:	607b      	str	r3, [r7, #4]
}
 800d520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d522:	4b0f      	ldr	r3, [pc, #60]	; (800d560 <vPortEnterCritical+0x58>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	3301      	adds	r3, #1
 800d528:	4a0d      	ldr	r2, [pc, #52]	; (800d560 <vPortEnterCritical+0x58>)
 800d52a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d52c:	4b0c      	ldr	r3, [pc, #48]	; (800d560 <vPortEnterCritical+0x58>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2b01      	cmp	r3, #1
 800d532:	d10f      	bne.n	800d554 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d534:	4b0b      	ldr	r3, [pc, #44]	; (800d564 <vPortEnterCritical+0x5c>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d00a      	beq.n	800d554 <vPortEnterCritical+0x4c>
	__asm volatile
 800d53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	603b      	str	r3, [r7, #0]
}
 800d550:	bf00      	nop
 800d552:	e7fe      	b.n	800d552 <vPortEnterCritical+0x4a>
	}
}
 800d554:	bf00      	nop
 800d556:	370c      	adds	r7, #12
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr
 800d560:	2000003c 	.word	0x2000003c
 800d564:	e000ed04 	.word	0xe000ed04

0800d568 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d56e:	4b12      	ldr	r3, [pc, #72]	; (800d5b8 <vPortExitCritical+0x50>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10a      	bne.n	800d58c <vPortExitCritical+0x24>
	__asm volatile
 800d576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	607b      	str	r3, [r7, #4]
}
 800d588:	bf00      	nop
 800d58a:	e7fe      	b.n	800d58a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d58c:	4b0a      	ldr	r3, [pc, #40]	; (800d5b8 <vPortExitCritical+0x50>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	3b01      	subs	r3, #1
 800d592:	4a09      	ldr	r2, [pc, #36]	; (800d5b8 <vPortExitCritical+0x50>)
 800d594:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d596:	4b08      	ldr	r3, [pc, #32]	; (800d5b8 <vPortExitCritical+0x50>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d105      	bne.n	800d5aa <vPortExitCritical+0x42>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	f383 8811 	msr	BASEPRI, r3
}
 800d5a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d5aa:	bf00      	nop
 800d5ac:	370c      	adds	r7, #12
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	2000003c 	.word	0x2000003c
 800d5bc:	00000000 	.word	0x00000000

0800d5c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d5c0:	f3ef 8009 	mrs	r0, PSP
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	4b15      	ldr	r3, [pc, #84]	; (800d620 <pxCurrentTCBConst>)
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	f01e 0f10 	tst.w	lr, #16
 800d5d0:	bf08      	it	eq
 800d5d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d5d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5da:	6010      	str	r0, [r2, #0]
 800d5dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d5e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d5e4:	f380 8811 	msr	BASEPRI, r0
 800d5e8:	f3bf 8f4f 	dsb	sy
 800d5ec:	f3bf 8f6f 	isb	sy
 800d5f0:	f7ff fc22 	bl	800ce38 <vTaskSwitchContext>
 800d5f4:	f04f 0000 	mov.w	r0, #0
 800d5f8:	f380 8811 	msr	BASEPRI, r0
 800d5fc:	bc09      	pop	{r0, r3}
 800d5fe:	6819      	ldr	r1, [r3, #0]
 800d600:	6808      	ldr	r0, [r1, #0]
 800d602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d606:	f01e 0f10 	tst.w	lr, #16
 800d60a:	bf08      	it	eq
 800d60c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d610:	f380 8809 	msr	PSP, r0
 800d614:	f3bf 8f6f 	isb	sy
 800d618:	4770      	bx	lr
 800d61a:	bf00      	nop
 800d61c:	f3af 8000 	nop.w

0800d620 <pxCurrentTCBConst>:
 800d620:	200000f0 	.word	0x200000f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d624:	bf00      	nop
 800d626:	bf00      	nop

0800d628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
	__asm volatile
 800d62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d632:	f383 8811 	msr	BASEPRI, r3
 800d636:	f3bf 8f6f 	isb	sy
 800d63a:	f3bf 8f4f 	dsb	sy
 800d63e:	607b      	str	r3, [r7, #4]
}
 800d640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d642:	f7ff fb41 	bl	800ccc8 <xTaskIncrementTick>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d003      	beq.n	800d654 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d64c:	4b06      	ldr	r3, [pc, #24]	; (800d668 <SysTick_Handler+0x40>)
 800d64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d652:	601a      	str	r2, [r3, #0]
 800d654:	2300      	movs	r3, #0
 800d656:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	f383 8811 	msr	BASEPRI, r3
}
 800d65e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d660:	bf00      	nop
 800d662:	3708      	adds	r7, #8
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	e000ed04 	.word	0xe000ed04

0800d66c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d66c:	b480      	push	{r7}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d672:	f3ef 8305 	mrs	r3, IPSR
 800d676:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2b0f      	cmp	r3, #15
 800d67c:	d914      	bls.n	800d6a8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d67e:	4a17      	ldr	r2, [pc, #92]	; (800d6dc <vPortValidateInterruptPriority+0x70>)
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	4413      	add	r3, r2
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d688:	4b15      	ldr	r3, [pc, #84]	; (800d6e0 <vPortValidateInterruptPriority+0x74>)
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	7afa      	ldrb	r2, [r7, #11]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d20a      	bcs.n	800d6a8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d696:	f383 8811 	msr	BASEPRI, r3
 800d69a:	f3bf 8f6f 	isb	sy
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	607b      	str	r3, [r7, #4]
}
 800d6a4:	bf00      	nop
 800d6a6:	e7fe      	b.n	800d6a6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d6a8:	4b0e      	ldr	r3, [pc, #56]	; (800d6e4 <vPortValidateInterruptPriority+0x78>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d6b0:	4b0d      	ldr	r3, [pc, #52]	; (800d6e8 <vPortValidateInterruptPriority+0x7c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d90a      	bls.n	800d6ce <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6bc:	f383 8811 	msr	BASEPRI, r3
 800d6c0:	f3bf 8f6f 	isb	sy
 800d6c4:	f3bf 8f4f 	dsb	sy
 800d6c8:	603b      	str	r3, [r7, #0]
}
 800d6ca:	bf00      	nop
 800d6cc:	e7fe      	b.n	800d6cc <vPortValidateInterruptPriority+0x60>
	}
 800d6ce:	bf00      	nop
 800d6d0:	3714      	adds	r7, #20
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop
 800d6dc:	e000e3f0 	.word	0xe000e3f0
 800d6e0:	20000214 	.word	0x20000214
 800d6e4:	e000ed0c 	.word	0xe000ed0c
 800d6e8:	20000218 	.word	0x20000218

0800d6ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b08a      	sub	sp, #40	; 0x28
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d6f8:	f7ff fa3c 	bl	800cb74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d6fc:	4b5d      	ldr	r3, [pc, #372]	; (800d874 <pvPortMalloc+0x188>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d101      	bne.n	800d708 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d704:	f000 f924 	bl	800d950 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d708:	4b5b      	ldr	r3, [pc, #364]	; (800d878 <pvPortMalloc+0x18c>)
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4013      	ands	r3, r2
 800d710:	2b00      	cmp	r3, #0
 800d712:	f040 8093 	bne.w	800d83c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d01d      	beq.n	800d758 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d71c:	2208      	movs	r2, #8
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4413      	add	r3, r2
 800d722:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f003 0307 	and.w	r3, r3, #7
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d014      	beq.n	800d758 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f023 0307 	bic.w	r3, r3, #7
 800d734:	3308      	adds	r3, #8
 800d736:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f003 0307 	and.w	r3, r3, #7
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00a      	beq.n	800d758 <pvPortMalloc+0x6c>
	__asm volatile
 800d742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d746:	f383 8811 	msr	BASEPRI, r3
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	617b      	str	r3, [r7, #20]
}
 800d754:	bf00      	nop
 800d756:	e7fe      	b.n	800d756 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d06e      	beq.n	800d83c <pvPortMalloc+0x150>
 800d75e:	4b47      	ldr	r3, [pc, #284]	; (800d87c <pvPortMalloc+0x190>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	429a      	cmp	r2, r3
 800d766:	d869      	bhi.n	800d83c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d768:	4b45      	ldr	r3, [pc, #276]	; (800d880 <pvPortMalloc+0x194>)
 800d76a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d76c:	4b44      	ldr	r3, [pc, #272]	; (800d880 <pvPortMalloc+0x194>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d772:	e004      	b.n	800d77e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d776:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	429a      	cmp	r2, r3
 800d786:	d903      	bls.n	800d790 <pvPortMalloc+0xa4>
 800d788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d1f1      	bne.n	800d774 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d790:	4b38      	ldr	r3, [pc, #224]	; (800d874 <pvPortMalloc+0x188>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d796:	429a      	cmp	r2, r3
 800d798:	d050      	beq.n	800d83c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d79a:	6a3b      	ldr	r3, [r7, #32]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2208      	movs	r2, #8
 800d7a0:	4413      	add	r3, r2
 800d7a2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	6a3b      	ldr	r3, [r7, #32]
 800d7aa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ae:	685a      	ldr	r2, [r3, #4]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	1ad2      	subs	r2, r2, r3
 800d7b4:	2308      	movs	r3, #8
 800d7b6:	005b      	lsls	r3, r3, #1
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d91f      	bls.n	800d7fc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d7bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	f003 0307 	and.w	r3, r3, #7
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00a      	beq.n	800d7e4 <pvPortMalloc+0xf8>
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	613b      	str	r3, [r7, #16]
}
 800d7e0:	bf00      	nop
 800d7e2:	e7fe      	b.n	800d7e2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e6:	685a      	ldr	r2, [r3, #4]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	1ad2      	subs	r2, r2, r3
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d7f6:	69b8      	ldr	r0, [r7, #24]
 800d7f8:	f000 f90c 	bl	800da14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d7fc:	4b1f      	ldr	r3, [pc, #124]	; (800d87c <pvPortMalloc+0x190>)
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	1ad3      	subs	r3, r2, r3
 800d806:	4a1d      	ldr	r2, [pc, #116]	; (800d87c <pvPortMalloc+0x190>)
 800d808:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d80a:	4b1c      	ldr	r3, [pc, #112]	; (800d87c <pvPortMalloc+0x190>)
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	4b1d      	ldr	r3, [pc, #116]	; (800d884 <pvPortMalloc+0x198>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	429a      	cmp	r2, r3
 800d814:	d203      	bcs.n	800d81e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d816:	4b19      	ldr	r3, [pc, #100]	; (800d87c <pvPortMalloc+0x190>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4a1a      	ldr	r2, [pc, #104]	; (800d884 <pvPortMalloc+0x198>)
 800d81c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d820:	685a      	ldr	r2, [r3, #4]
 800d822:	4b15      	ldr	r3, [pc, #84]	; (800d878 <pvPortMalloc+0x18c>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	431a      	orrs	r2, r3
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	2200      	movs	r2, #0
 800d830:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d832:	4b15      	ldr	r3, [pc, #84]	; (800d888 <pvPortMalloc+0x19c>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	3301      	adds	r3, #1
 800d838:	4a13      	ldr	r2, [pc, #76]	; (800d888 <pvPortMalloc+0x19c>)
 800d83a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d83c:	f7ff f9a8 	bl	800cb90 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d101      	bne.n	800d84a <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d846:	f7f3 fb46 	bl	8000ed6 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	f003 0307 	and.w	r3, r3, #7
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00a      	beq.n	800d86a <pvPortMalloc+0x17e>
	__asm volatile
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	60fb      	str	r3, [r7, #12]
}
 800d866:	bf00      	nop
 800d868:	e7fe      	b.n	800d868 <pvPortMalloc+0x17c>
	return pvReturn;
 800d86a:	69fb      	ldr	r3, [r7, #28]
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3728      	adds	r7, #40	; 0x28
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	20008224 	.word	0x20008224
 800d878:	20008238 	.word	0x20008238
 800d87c:	20008228 	.word	0x20008228
 800d880:	2000821c 	.word	0x2000821c
 800d884:	2000822c 	.word	0x2000822c
 800d888:	20008230 	.word	0x20008230

0800d88c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d04d      	beq.n	800d93a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d89e:	2308      	movs	r3, #8
 800d8a0:	425b      	negs	r3, r3
 800d8a2:	697a      	ldr	r2, [r7, #20]
 800d8a4:	4413      	add	r3, r2
 800d8a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	685a      	ldr	r2, [r3, #4]
 800d8b0:	4b24      	ldr	r3, [pc, #144]	; (800d944 <vPortFree+0xb8>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4013      	ands	r3, r2
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d10a      	bne.n	800d8d0 <vPortFree+0x44>
	__asm volatile
 800d8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8be:	f383 8811 	msr	BASEPRI, r3
 800d8c2:	f3bf 8f6f 	isb	sy
 800d8c6:	f3bf 8f4f 	dsb	sy
 800d8ca:	60fb      	str	r3, [r7, #12]
}
 800d8cc:	bf00      	nop
 800d8ce:	e7fe      	b.n	800d8ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00a      	beq.n	800d8ee <vPortFree+0x62>
	__asm volatile
 800d8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8dc:	f383 8811 	msr	BASEPRI, r3
 800d8e0:	f3bf 8f6f 	isb	sy
 800d8e4:	f3bf 8f4f 	dsb	sy
 800d8e8:	60bb      	str	r3, [r7, #8]
}
 800d8ea:	bf00      	nop
 800d8ec:	e7fe      	b.n	800d8ec <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	685a      	ldr	r2, [r3, #4]
 800d8f2:	4b14      	ldr	r3, [pc, #80]	; (800d944 <vPortFree+0xb8>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4013      	ands	r3, r2
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d01e      	beq.n	800d93a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d11a      	bne.n	800d93a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	685a      	ldr	r2, [r3, #4]
 800d908:	4b0e      	ldr	r3, [pc, #56]	; (800d944 <vPortFree+0xb8>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	43db      	mvns	r3, r3
 800d90e:	401a      	ands	r2, r3
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d914:	f7ff f92e 	bl	800cb74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	685a      	ldr	r2, [r3, #4]
 800d91c:	4b0a      	ldr	r3, [pc, #40]	; (800d948 <vPortFree+0xbc>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4413      	add	r3, r2
 800d922:	4a09      	ldr	r2, [pc, #36]	; (800d948 <vPortFree+0xbc>)
 800d924:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d926:	6938      	ldr	r0, [r7, #16]
 800d928:	f000 f874 	bl	800da14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d92c:	4b07      	ldr	r3, [pc, #28]	; (800d94c <vPortFree+0xc0>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	3301      	adds	r3, #1
 800d932:	4a06      	ldr	r2, [pc, #24]	; (800d94c <vPortFree+0xc0>)
 800d934:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d936:	f7ff f92b 	bl	800cb90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d93a:	bf00      	nop
 800d93c:	3718      	adds	r7, #24
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	20008238 	.word	0x20008238
 800d948:	20008228 	.word	0x20008228
 800d94c:	20008234 	.word	0x20008234

0800d950 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d950:	b480      	push	{r7}
 800d952:	b085      	sub	sp, #20
 800d954:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d95a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d95c:	4b27      	ldr	r3, [pc, #156]	; (800d9fc <prvHeapInit+0xac>)
 800d95e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f003 0307 	and.w	r3, r3, #7
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00c      	beq.n	800d984 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	3307      	adds	r3, #7
 800d96e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f023 0307 	bic.w	r3, r3, #7
 800d976:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d978:	68ba      	ldr	r2, [r7, #8]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	1ad3      	subs	r3, r2, r3
 800d97e:	4a1f      	ldr	r2, [pc, #124]	; (800d9fc <prvHeapInit+0xac>)
 800d980:	4413      	add	r3, r2
 800d982:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d988:	4a1d      	ldr	r2, [pc, #116]	; (800da00 <prvHeapInit+0xb0>)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d98e:	4b1c      	ldr	r3, [pc, #112]	; (800da00 <prvHeapInit+0xb0>)
 800d990:	2200      	movs	r2, #0
 800d992:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	4413      	add	r3, r2
 800d99a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d99c:	2208      	movs	r2, #8
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	1a9b      	subs	r3, r3, r2
 800d9a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f023 0307 	bic.w	r3, r3, #7
 800d9aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	4a15      	ldr	r2, [pc, #84]	; (800da04 <prvHeapInit+0xb4>)
 800d9b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d9b2:	4b14      	ldr	r3, [pc, #80]	; (800da04 <prvHeapInit+0xb4>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d9ba:	4b12      	ldr	r3, [pc, #72]	; (800da04 <prvHeapInit+0xb4>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	1ad2      	subs	r2, r2, r3
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d9d0:	4b0c      	ldr	r3, [pc, #48]	; (800da04 <prvHeapInit+0xb4>)
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	4a0a      	ldr	r2, [pc, #40]	; (800da08 <prvHeapInit+0xb8>)
 800d9de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	4a09      	ldr	r2, [pc, #36]	; (800da0c <prvHeapInit+0xbc>)
 800d9e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d9e8:	4b09      	ldr	r3, [pc, #36]	; (800da10 <prvHeapInit+0xc0>)
 800d9ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d9ee:	601a      	str	r2, [r3, #0]
}
 800d9f0:	bf00      	nop
 800d9f2:	3714      	adds	r7, #20
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr
 800d9fc:	2000021c 	.word	0x2000021c
 800da00:	2000821c 	.word	0x2000821c
 800da04:	20008224 	.word	0x20008224
 800da08:	2000822c 	.word	0x2000822c
 800da0c:	20008228 	.word	0x20008228
 800da10:	20008238 	.word	0x20008238

0800da14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da1c:	4b28      	ldr	r3, [pc, #160]	; (800dac0 <prvInsertBlockIntoFreeList+0xac>)
 800da1e:	60fb      	str	r3, [r7, #12]
 800da20:	e002      	b.n	800da28 <prvInsertBlockIntoFreeList+0x14>
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	60fb      	str	r3, [r7, #12]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d8f7      	bhi.n	800da22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	68ba      	ldr	r2, [r7, #8]
 800da3c:	4413      	add	r3, r2
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	429a      	cmp	r2, r3
 800da42:	d108      	bne.n	800da56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	685a      	ldr	r2, [r3, #4]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	441a      	add	r2, r3
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	68ba      	ldr	r2, [r7, #8]
 800da60:	441a      	add	r2, r3
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	429a      	cmp	r2, r3
 800da68:	d118      	bne.n	800da9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	4b15      	ldr	r3, [pc, #84]	; (800dac4 <prvInsertBlockIntoFreeList+0xb0>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	429a      	cmp	r2, r3
 800da74:	d00d      	beq.n	800da92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	685a      	ldr	r2, [r3, #4]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	441a      	add	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	e008      	b.n	800daa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da92:	4b0c      	ldr	r3, [pc, #48]	; (800dac4 <prvInsertBlockIntoFreeList+0xb0>)
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	e003      	b.n	800daa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800daa4:	68fa      	ldr	r2, [r7, #12]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d002      	beq.n	800dab2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dab2:	bf00      	nop
 800dab4:	3714      	adds	r7, #20
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	2000821c 	.word	0x2000821c
 800dac4:	20008224 	.word	0x20008224

0800dac8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800dacc:	2200      	movs	r2, #0
 800dace:	490e      	ldr	r1, [pc, #56]	; (800db08 <MX_USB_HOST_Init+0x40>)
 800dad0:	480e      	ldr	r0, [pc, #56]	; (800db0c <MX_USB_HOST_Init+0x44>)
 800dad2:	f7fc f993 	bl	8009dfc <USBH_Init>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dadc:	f7f4 fb26 	bl	800212c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800dae0:	490b      	ldr	r1, [pc, #44]	; (800db10 <MX_USB_HOST_Init+0x48>)
 800dae2:	480a      	ldr	r0, [pc, #40]	; (800db0c <MX_USB_HOST_Init+0x44>)
 800dae4:	f7fc fa40 	bl	8009f68 <USBH_RegisterClass>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800daee:	f7f4 fb1d 	bl	800212c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800daf2:	4806      	ldr	r0, [pc, #24]	; (800db0c <MX_USB_HOST_Init+0x44>)
 800daf4:	f7fc fac4 	bl	800a080 <USBH_Start>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dafe:	f7f4 fb15 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800db02:	bf00      	nop
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	0800db15 	.word	0x0800db15
 800db0c:	2000856c 	.word	0x2000856c
 800db10:	2000001c 	.word	0x2000001c

0800db14 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800db14:	b480      	push	{r7}
 800db16:	b083      	sub	sp, #12
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	460b      	mov	r3, r1
 800db1e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800db20:	78fb      	ldrb	r3, [r7, #3]
 800db22:	3b01      	subs	r3, #1
 800db24:	2b04      	cmp	r3, #4
 800db26:	d819      	bhi.n	800db5c <USBH_UserProcess+0x48>
 800db28:	a201      	add	r2, pc, #4	; (adr r2, 800db30 <USBH_UserProcess+0x1c>)
 800db2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db2e:	bf00      	nop
 800db30:	0800db5d 	.word	0x0800db5d
 800db34:	0800db4d 	.word	0x0800db4d
 800db38:	0800db5d 	.word	0x0800db5d
 800db3c:	0800db55 	.word	0x0800db55
 800db40:	0800db45 	.word	0x0800db45
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800db44:	4b09      	ldr	r3, [pc, #36]	; (800db6c <USBH_UserProcess+0x58>)
 800db46:	2203      	movs	r2, #3
 800db48:	701a      	strb	r2, [r3, #0]
  break;
 800db4a:	e008      	b.n	800db5e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800db4c:	4b07      	ldr	r3, [pc, #28]	; (800db6c <USBH_UserProcess+0x58>)
 800db4e:	2202      	movs	r2, #2
 800db50:	701a      	strb	r2, [r3, #0]
  break;
 800db52:	e004      	b.n	800db5e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800db54:	4b05      	ldr	r3, [pc, #20]	; (800db6c <USBH_UserProcess+0x58>)
 800db56:	2201      	movs	r2, #1
 800db58:	701a      	strb	r2, [r3, #0]
  break;
 800db5a:	e000      	b.n	800db5e <USBH_UserProcess+0x4a>

  default:
  break;
 800db5c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800db5e:	bf00      	nop
 800db60:	370c      	adds	r7, #12
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop
 800db6c:	2000823c 	.word	0x2000823c

0800db70 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b08a      	sub	sp, #40	; 0x28
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db78:	f107 0314 	add.w	r3, r7, #20
 800db7c:	2200      	movs	r2, #0
 800db7e:	601a      	str	r2, [r3, #0]
 800db80:	605a      	str	r2, [r3, #4]
 800db82:	609a      	str	r2, [r3, #8]
 800db84:	60da      	str	r2, [r3, #12]
 800db86:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a24      	ldr	r2, [pc, #144]	; (800dc20 <HAL_HCD_MspInit+0xb0>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d141      	bne.n	800dc16 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800db92:	2300      	movs	r3, #0
 800db94:	613b      	str	r3, [r7, #16]
 800db96:	4b23      	ldr	r3, [pc, #140]	; (800dc24 <HAL_HCD_MspInit+0xb4>)
 800db98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db9a:	4a22      	ldr	r2, [pc, #136]	; (800dc24 <HAL_HCD_MspInit+0xb4>)
 800db9c:	f043 0302 	orr.w	r3, r3, #2
 800dba0:	6313      	str	r3, [r2, #48]	; 0x30
 800dba2:	4b20      	ldr	r3, [pc, #128]	; (800dc24 <HAL_HCD_MspInit+0xb4>)
 800dba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dba6:	f003 0302 	and.w	r3, r3, #2
 800dbaa:	613b      	str	r3, [r7, #16]
 800dbac:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800dbae:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800dbb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbb4:	2302      	movs	r3, #2
 800dbb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800dbc0:	230c      	movs	r3, #12
 800dbc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dbc4:	f107 0314 	add.w	r3, r7, #20
 800dbc8:	4619      	mov	r1, r3
 800dbca:	4817      	ldr	r0, [pc, #92]	; (800dc28 <HAL_HCD_MspInit+0xb8>)
 800dbcc:	f7f5 fafc 	bl	80031c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800dbd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dbd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800dbde:	f107 0314 	add.w	r3, r7, #20
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	4810      	ldr	r0, [pc, #64]	; (800dc28 <HAL_HCD_MspInit+0xb8>)
 800dbe6:	f7f5 faef 	bl	80031c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800dbea:	2300      	movs	r3, #0
 800dbec:	60fb      	str	r3, [r7, #12]
 800dbee:	4b0d      	ldr	r3, [pc, #52]	; (800dc24 <HAL_HCD_MspInit+0xb4>)
 800dbf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbf2:	4a0c      	ldr	r2, [pc, #48]	; (800dc24 <HAL_HCD_MspInit+0xb4>)
 800dbf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dbf8:	6313      	str	r3, [r2, #48]	; 0x30
 800dbfa:	4b0a      	ldr	r3, [pc, #40]	; (800dc24 <HAL_HCD_MspInit+0xb4>)
 800dbfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc02:	60fb      	str	r3, [r7, #12]
 800dc04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800dc06:	2200      	movs	r2, #0
 800dc08:	2105      	movs	r1, #5
 800dc0a:	204d      	movs	r0, #77	; 0x4d
 800dc0c:	f7f5 f8aa 	bl	8002d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800dc10:	204d      	movs	r0, #77	; 0x4d
 800dc12:	f7f5 f8c3 	bl	8002d9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800dc16:	bf00      	nop
 800dc18:	3728      	adds	r7, #40	; 0x28
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	40040000 	.word	0x40040000
 800dc24:	40023800 	.word	0x40023800
 800dc28:	40020400 	.word	0x40020400

0800dc2c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fc fecd 	bl	800a9da <USBH_LL_IncTimer>
}
 800dc40:	bf00      	nop
 800dc42:	3708      	adds	r7, #8
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fc ff11 	bl	800aa7e <USBH_LL_Connect>
}
 800dc5c:	bf00      	nop
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fc ff26 	bl	800aac4 <USBH_LL_Disconnect>
}
 800dc78:	bf00      	nop
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	460b      	mov	r3, r1
 800dc8a:	70fb      	strb	r3, [r7, #3]
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fc ff5b 	bl	800ab52 <USBH_LL_NotifyURBChange>
#endif
}
 800dc9c:	bf00      	nop
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fc febb 	bl	800aa2e <USBH_LL_PortEnabled>
}
 800dcb8:	bf00      	nop
 800dcba:	3708      	adds	r7, #8
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7fc fec7 	bl	800aa62 <USBH_LL_PortDisabled>
}
 800dcd4:	bf00      	nop
 800dcd6:	3708      	adds	r7, #8
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d132      	bne.n	800dd54 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800dcee:	4a1c      	ldr	r2, [pc, #112]	; (800dd60 <USBH_LL_Init+0x84>)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	4a19      	ldr	r2, [pc, #100]	; (800dd60 <USBH_LL_Init+0x84>)
 800dcfa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800dcfe:	4b18      	ldr	r3, [pc, #96]	; (800dd60 <USBH_LL_Init+0x84>)
 800dd00:	4a18      	ldr	r2, [pc, #96]	; (800dd64 <USBH_LL_Init+0x88>)
 800dd02:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800dd04:	4b16      	ldr	r3, [pc, #88]	; (800dd60 <USBH_LL_Init+0x84>)
 800dd06:	220c      	movs	r2, #12
 800dd08:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800dd0a:	4b15      	ldr	r3, [pc, #84]	; (800dd60 <USBH_LL_Init+0x84>)
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800dd10:	4b13      	ldr	r3, [pc, #76]	; (800dd60 <USBH_LL_Init+0x84>)
 800dd12:	2200      	movs	r2, #0
 800dd14:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800dd16:	4b12      	ldr	r3, [pc, #72]	; (800dd60 <USBH_LL_Init+0x84>)
 800dd18:	2202      	movs	r2, #2
 800dd1a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800dd1c:	4b10      	ldr	r3, [pc, #64]	; (800dd60 <USBH_LL_Init+0x84>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800dd22:	4b0f      	ldr	r3, [pc, #60]	; (800dd60 <USBH_LL_Init+0x84>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800dd28:	4b0d      	ldr	r3, [pc, #52]	; (800dd60 <USBH_LL_Init+0x84>)
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800dd2e:	4b0c      	ldr	r3, [pc, #48]	; (800dd60 <USBH_LL_Init+0x84>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800dd34:	480a      	ldr	r0, [pc, #40]	; (800dd60 <USBH_LL_Init+0x84>)
 800dd36:	f7f5 fc26 	bl	8003586 <HAL_HCD_Init>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d001      	beq.n	800dd44 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800dd40:	f7f4 f9f4 	bl	800212c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800dd44:	4806      	ldr	r0, [pc, #24]	; (800dd60 <USBH_LL_Init+0x84>)
 800dd46:	f7f6 f80a 	bl	8003d5e <HAL_HCD_GetCurrentFrame>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f7fc fe34 	bl	800a9bc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dd54:	2300      	movs	r3, #0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3708      	adds	r7, #8
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	20008950 	.word	0x20008950
 800dd64:	40040000 	.word	0x40040000

0800dd68 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd70:	2300      	movs	r3, #0
 800dd72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7f5 ff77 	bl	8003c72 <HAL_HCD_Start>
 800dd84:	4603      	mov	r3, r0
 800dd86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd88:	7bfb      	ldrb	r3, [r7, #15]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f000 f95c 	bl	800e048 <USBH_Get_USB_Status>
 800dd90:	4603      	mov	r3, r0
 800dd92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd94:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}

0800dd9e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b084      	sub	sp, #16
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dda6:	2300      	movs	r3, #0
 800dda8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7f5 ff7f 	bl	8003cb8 <HAL_HCD_Stop>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ddbe:	7bfb      	ldrb	r3, [r7, #15]
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f000 f941 	bl	800e048 <USBH_Get_USB_Status>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddca:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3710      	adds	r7, #16
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dddc:	2301      	movs	r3, #1
 800ddde:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7f5 ffc7 	bl	8003d7a <HAL_HCD_GetCurrentSpeed>
 800ddec:	4603      	mov	r3, r0
 800ddee:	2b02      	cmp	r3, #2
 800ddf0:	d00c      	beq.n	800de0c <USBH_LL_GetSpeed+0x38>
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d80d      	bhi.n	800de12 <USBH_LL_GetSpeed+0x3e>
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d002      	beq.n	800de00 <USBH_LL_GetSpeed+0x2c>
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d003      	beq.n	800de06 <USBH_LL_GetSpeed+0x32>
 800ddfe:	e008      	b.n	800de12 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800de00:	2300      	movs	r3, #0
 800de02:	73fb      	strb	r3, [r7, #15]
    break;
 800de04:	e008      	b.n	800de18 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800de06:	2301      	movs	r3, #1
 800de08:	73fb      	strb	r3, [r7, #15]
    break;
 800de0a:	e005      	b.n	800de18 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800de0c:	2302      	movs	r3, #2
 800de0e:	73fb      	strb	r3, [r7, #15]
    break;
 800de10:	e002      	b.n	800de18 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800de12:	2301      	movs	r3, #1
 800de14:	73fb      	strb	r3, [r7, #15]
    break;
 800de16:	bf00      	nop
  }
  return  speed;
 800de18:	7bfb      	ldrb	r3, [r7, #15]
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}

0800de22 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800de22:	b580      	push	{r7, lr}
 800de24:	b084      	sub	sp, #16
 800de26:	af00      	add	r7, sp, #0
 800de28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de2a:	2300      	movs	r3, #0
 800de2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de2e:	2300      	movs	r3, #0
 800de30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de38:	4618      	mov	r0, r3
 800de3a:	f7f5 ff5a 	bl	8003cf2 <HAL_HCD_ResetPort>
 800de3e:	4603      	mov	r3, r0
 800de40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de42:	7bfb      	ldrb	r3, [r7, #15]
 800de44:	4618      	mov	r0, r3
 800de46:	f000 f8ff 	bl	800e048 <USBH_Get_USB_Status>
 800de4a:	4603      	mov	r3, r0
 800de4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800de50:	4618      	mov	r0, r3
 800de52:	3710      	adds	r7, #16
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	460b      	mov	r3, r1
 800de62:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de6a:	78fa      	ldrb	r2, [r7, #3]
 800de6c:	4611      	mov	r1, r2
 800de6e:	4618      	mov	r0, r3
 800de70:	f7f5 ff61 	bl	8003d36 <HAL_HCD_HC_GetXferCount>
 800de74:	4603      	mov	r3, r0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3708      	adds	r7, #8
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800de7e:	b590      	push	{r4, r7, lr}
 800de80:	b089      	sub	sp, #36	; 0x24
 800de82:	af04      	add	r7, sp, #16
 800de84:	6078      	str	r0, [r7, #4]
 800de86:	4608      	mov	r0, r1
 800de88:	4611      	mov	r1, r2
 800de8a:	461a      	mov	r2, r3
 800de8c:	4603      	mov	r3, r0
 800de8e:	70fb      	strb	r3, [r7, #3]
 800de90:	460b      	mov	r3, r1
 800de92:	70bb      	strb	r3, [r7, #2]
 800de94:	4613      	mov	r3, r2
 800de96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de9c:	2300      	movs	r3, #0
 800de9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dea6:	787c      	ldrb	r4, [r7, #1]
 800dea8:	78ba      	ldrb	r2, [r7, #2]
 800deaa:	78f9      	ldrb	r1, [r7, #3]
 800deac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800deae:	9302      	str	r3, [sp, #8]
 800deb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800deb4:	9301      	str	r3, [sp, #4]
 800deb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	4623      	mov	r3, r4
 800debe:	f7f5 fbc4 	bl	800364a <HAL_HCD_HC_Init>
 800dec2:	4603      	mov	r3, r0
 800dec4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dec6:	7bfb      	ldrb	r3, [r7, #15]
 800dec8:	4618      	mov	r0, r3
 800deca:	f000 f8bd 	bl	800e048 <USBH_Get_USB_Status>
 800dece:	4603      	mov	r3, r0
 800ded0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ded2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3714      	adds	r7, #20
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd90      	pop	{r4, r7, pc}

0800dedc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	460b      	mov	r3, r1
 800dee6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dee8:	2300      	movs	r3, #0
 800deea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800deec:	2300      	movs	r3, #0
 800deee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800def6:	78fa      	ldrb	r2, [r7, #3]
 800def8:	4611      	mov	r1, r2
 800defa:	4618      	mov	r0, r3
 800defc:	f7f5 fc34 	bl	8003768 <HAL_HCD_HC_Halt>
 800df00:	4603      	mov	r3, r0
 800df02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800df04:	7bfb      	ldrb	r3, [r7, #15]
 800df06:	4618      	mov	r0, r3
 800df08:	f000 f89e 	bl	800e048 <USBH_Get_USB_Status>
 800df0c:	4603      	mov	r3, r0
 800df0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df10:	7bbb      	ldrb	r3, [r7, #14]
}
 800df12:	4618      	mov	r0, r3
 800df14:	3710      	adds	r7, #16
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800df1a:	b590      	push	{r4, r7, lr}
 800df1c:	b089      	sub	sp, #36	; 0x24
 800df1e:	af04      	add	r7, sp, #16
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	4608      	mov	r0, r1
 800df24:	4611      	mov	r1, r2
 800df26:	461a      	mov	r2, r3
 800df28:	4603      	mov	r3, r0
 800df2a:	70fb      	strb	r3, [r7, #3]
 800df2c:	460b      	mov	r3, r1
 800df2e:	70bb      	strb	r3, [r7, #2]
 800df30:	4613      	mov	r3, r2
 800df32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df34:	2300      	movs	r3, #0
 800df36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df38:	2300      	movs	r3, #0
 800df3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800df42:	787c      	ldrb	r4, [r7, #1]
 800df44:	78ba      	ldrb	r2, [r7, #2]
 800df46:	78f9      	ldrb	r1, [r7, #3]
 800df48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800df4c:	9303      	str	r3, [sp, #12]
 800df4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df50:	9302      	str	r3, [sp, #8]
 800df52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df54:	9301      	str	r3, [sp, #4]
 800df56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	4623      	mov	r3, r4
 800df5e:	f7f5 fc27 	bl	80037b0 <HAL_HCD_HC_SubmitRequest>
 800df62:	4603      	mov	r3, r0
 800df64:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800df66:	7bfb      	ldrb	r3, [r7, #15]
 800df68:	4618      	mov	r0, r3
 800df6a:	f000 f86d 	bl	800e048 <USBH_Get_USB_Status>
 800df6e:	4603      	mov	r3, r0
 800df70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df72:	7bbb      	ldrb	r3, [r7, #14]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3714      	adds	r7, #20
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd90      	pop	{r4, r7, pc}

0800df7c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	460b      	mov	r3, r1
 800df86:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df8e:	78fa      	ldrb	r2, [r7, #3]
 800df90:	4611      	mov	r1, r2
 800df92:	4618      	mov	r0, r3
 800df94:	f7f5 febb 	bl	8003d0e <HAL_HCD_HC_GetURBState>
 800df98:	4603      	mov	r3, r0
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3708      	adds	r7, #8
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b082      	sub	sp, #8
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
 800dfaa:	460b      	mov	r3, r1
 800dfac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d103      	bne.n	800dfc0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800dfb8:	78fb      	ldrb	r3, [r7, #3]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f000 f870 	bl	800e0a0 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800dfc0:	20c8      	movs	r0, #200	; 0xc8
 800dfc2:	f7f4 fdf3 	bl	8002bac <HAL_Delay>
  return USBH_OK;
 800dfc6:	2300      	movs	r3, #0
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b085      	sub	sp, #20
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	70fb      	strb	r3, [r7, #3]
 800dfdc:	4613      	mov	r3, r2
 800dfde:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dfe6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800dfe8:	78fb      	ldrb	r3, [r7, #3]
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	212c      	movs	r1, #44	; 0x2c
 800dfee:	fb01 f303 	mul.w	r3, r1, r3
 800dff2:	4413      	add	r3, r2
 800dff4:	333b      	adds	r3, #59	; 0x3b
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d009      	beq.n	800e010 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800dffc:	78fb      	ldrb	r3, [r7, #3]
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	212c      	movs	r1, #44	; 0x2c
 800e002:	fb01 f303 	mul.w	r3, r1, r3
 800e006:	4413      	add	r3, r2
 800e008:	3354      	adds	r3, #84	; 0x54
 800e00a:	78ba      	ldrb	r2, [r7, #2]
 800e00c:	701a      	strb	r2, [r3, #0]
 800e00e:	e008      	b.n	800e022 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e010:	78fb      	ldrb	r3, [r7, #3]
 800e012:	68fa      	ldr	r2, [r7, #12]
 800e014:	212c      	movs	r1, #44	; 0x2c
 800e016:	fb01 f303 	mul.w	r3, r1, r3
 800e01a:	4413      	add	r3, r2
 800e01c:	3355      	adds	r3, #85	; 0x55
 800e01e:	78ba      	ldrb	r2, [r7, #2]
 800e020:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e022:	2300      	movs	r3, #0
}
 800e024:	4618      	mov	r0, r3
 800e026:	3714      	adds	r7, #20
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f7f4 fdb7 	bl	8002bac <HAL_Delay>
}
 800e03e:	bf00      	nop
 800e040:	3708      	adds	r7, #8
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
	...

0800e048 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e048:	b480      	push	{r7}
 800e04a:	b085      	sub	sp, #20
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	4603      	mov	r3, r0
 800e050:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e052:	2300      	movs	r3, #0
 800e054:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e056:	79fb      	ldrb	r3, [r7, #7]
 800e058:	2b03      	cmp	r3, #3
 800e05a:	d817      	bhi.n	800e08c <USBH_Get_USB_Status+0x44>
 800e05c:	a201      	add	r2, pc, #4	; (adr r2, 800e064 <USBH_Get_USB_Status+0x1c>)
 800e05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e062:	bf00      	nop
 800e064:	0800e075 	.word	0x0800e075
 800e068:	0800e07b 	.word	0x0800e07b
 800e06c:	0800e081 	.word	0x0800e081
 800e070:	0800e087 	.word	0x0800e087
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e074:	2300      	movs	r3, #0
 800e076:	73fb      	strb	r3, [r7, #15]
    break;
 800e078:	e00b      	b.n	800e092 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e07a:	2302      	movs	r3, #2
 800e07c:	73fb      	strb	r3, [r7, #15]
    break;
 800e07e:	e008      	b.n	800e092 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e080:	2301      	movs	r3, #1
 800e082:	73fb      	strb	r3, [r7, #15]
    break;
 800e084:	e005      	b.n	800e092 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e086:	2302      	movs	r3, #2
 800e088:	73fb      	strb	r3, [r7, #15]
    break;
 800e08a:	e002      	b.n	800e092 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e08c:	2302      	movs	r3, #2
 800e08e:	73fb      	strb	r3, [r7, #15]
    break;
 800e090:	bf00      	nop
  }
  return usb_status;
 800e092:	7bfb      	ldrb	r3, [r7, #15]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3714      	adds	r7, #20
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e0aa:	79fb      	ldrb	r3, [r7, #7]
 800e0ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800e0ae:	79fb      	ldrb	r3, [r7, #7]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d102      	bne.n	800e0ba <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	73fb      	strb	r3, [r7, #15]
 800e0b8:	e001      	b.n	800e0be <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800e0be:	7bfb      	ldrb	r3, [r7, #15]
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	2110      	movs	r1, #16
 800e0c4:	4803      	ldr	r0, [pc, #12]	; (800e0d4 <MX_DriverVbusHS+0x34>)
 800e0c6:	f7f5 fa2b 	bl	8003520 <HAL_GPIO_WritePin>
}
 800e0ca:	bf00      	nop
 800e0cc:	3710      	adds	r7, #16
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	40020800 	.word	0x40020800

0800e0d8 <gcvt>:
 800e0d8:	b530      	push	{r4, r5, lr}
 800e0da:	2200      	movs	r2, #0
 800e0dc:	b085      	sub	sp, #20
 800e0de:	460c      	mov	r4, r1
 800e0e0:	4605      	mov	r5, r0
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	ec51 0b10 	vmov	r0, r1, d0
 800e0e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e0ec:	f7f2 fd06 	bl	8000afc <__aeabi_dcmplt>
 800e0f0:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e0f4:	4622      	mov	r2, r4
 800e0f6:	b118      	cbz	r0, 800e100 <gcvt+0x28>
 800e0f8:	232d      	movs	r3, #45	; 0x2d
 800e0fa:	f802 3b01 	strb.w	r3, [r2], #1
 800e0fe:	3d01      	subs	r5, #1
 800e100:	2300      	movs	r3, #0
 800e102:	4806      	ldr	r0, [pc, #24]	; (800e11c <gcvt+0x44>)
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	4629      	mov	r1, r5
 800e108:	2367      	movs	r3, #103	; 0x67
 800e10a:	6800      	ldr	r0, [r0, #0]
 800e10c:	f000 f9a0 	bl	800e450 <_gcvt>
 800e110:	2800      	cmp	r0, #0
 800e112:	bf14      	ite	ne
 800e114:	4620      	movne	r0, r4
 800e116:	2000      	moveq	r0, #0
 800e118:	b005      	add	sp, #20
 800e11a:	bd30      	pop	{r4, r5, pc}
 800e11c:	20000040 	.word	0x20000040

0800e120 <__errno>:
 800e120:	4b01      	ldr	r3, [pc, #4]	; (800e128 <__errno+0x8>)
 800e122:	6818      	ldr	r0, [r3, #0]
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop
 800e128:	20000040 	.word	0x20000040

0800e12c <__libc_init_array>:
 800e12c:	b570      	push	{r4, r5, r6, lr}
 800e12e:	4d0d      	ldr	r5, [pc, #52]	; (800e164 <__libc_init_array+0x38>)
 800e130:	4c0d      	ldr	r4, [pc, #52]	; (800e168 <__libc_init_array+0x3c>)
 800e132:	1b64      	subs	r4, r4, r5
 800e134:	10a4      	asrs	r4, r4, #2
 800e136:	2600      	movs	r6, #0
 800e138:	42a6      	cmp	r6, r4
 800e13a:	d109      	bne.n	800e150 <__libc_init_array+0x24>
 800e13c:	4d0b      	ldr	r5, [pc, #44]	; (800e16c <__libc_init_array+0x40>)
 800e13e:	4c0c      	ldr	r4, [pc, #48]	; (800e170 <__libc_init_array+0x44>)
 800e140:	f004 fdbc 	bl	8012cbc <_init>
 800e144:	1b64      	subs	r4, r4, r5
 800e146:	10a4      	asrs	r4, r4, #2
 800e148:	2600      	movs	r6, #0
 800e14a:	42a6      	cmp	r6, r4
 800e14c:	d105      	bne.n	800e15a <__libc_init_array+0x2e>
 800e14e:	bd70      	pop	{r4, r5, r6, pc}
 800e150:	f855 3b04 	ldr.w	r3, [r5], #4
 800e154:	4798      	blx	r3
 800e156:	3601      	adds	r6, #1
 800e158:	e7ee      	b.n	800e138 <__libc_init_array+0xc>
 800e15a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e15e:	4798      	blx	r3
 800e160:	3601      	adds	r6, #1
 800e162:	e7f2      	b.n	800e14a <__libc_init_array+0x1e>
 800e164:	080132c0 	.word	0x080132c0
 800e168:	080132c0 	.word	0x080132c0
 800e16c:	080132c0 	.word	0x080132c0
 800e170:	080132c4 	.word	0x080132c4

0800e174 <malloc>:
 800e174:	4b02      	ldr	r3, [pc, #8]	; (800e180 <malloc+0xc>)
 800e176:	4601      	mov	r1, r0
 800e178:	6818      	ldr	r0, [r3, #0]
 800e17a:	f000 b871 	b.w	800e260 <_malloc_r>
 800e17e:	bf00      	nop
 800e180:	20000040 	.word	0x20000040

0800e184 <free>:
 800e184:	4b02      	ldr	r3, [pc, #8]	; (800e190 <free+0xc>)
 800e186:	4601      	mov	r1, r0
 800e188:	6818      	ldr	r0, [r3, #0]
 800e18a:	f000 b819 	b.w	800e1c0 <_free_r>
 800e18e:	bf00      	nop
 800e190:	20000040 	.word	0x20000040

0800e194 <memcpy>:
 800e194:	440a      	add	r2, r1
 800e196:	4291      	cmp	r1, r2
 800e198:	f100 33ff 	add.w	r3, r0, #4294967295
 800e19c:	d100      	bne.n	800e1a0 <memcpy+0xc>
 800e19e:	4770      	bx	lr
 800e1a0:	b510      	push	{r4, lr}
 800e1a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1aa:	4291      	cmp	r1, r2
 800e1ac:	d1f9      	bne.n	800e1a2 <memcpy+0xe>
 800e1ae:	bd10      	pop	{r4, pc}

0800e1b0 <memset>:
 800e1b0:	4402      	add	r2, r0
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	d100      	bne.n	800e1ba <memset+0xa>
 800e1b8:	4770      	bx	lr
 800e1ba:	f803 1b01 	strb.w	r1, [r3], #1
 800e1be:	e7f9      	b.n	800e1b4 <memset+0x4>

0800e1c0 <_free_r>:
 800e1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1c2:	2900      	cmp	r1, #0
 800e1c4:	d048      	beq.n	800e258 <_free_r+0x98>
 800e1c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1ca:	9001      	str	r0, [sp, #4]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	f1a1 0404 	sub.w	r4, r1, #4
 800e1d2:	bfb8      	it	lt
 800e1d4:	18e4      	addlt	r4, r4, r3
 800e1d6:	f000 f9fb 	bl	800e5d0 <__malloc_lock>
 800e1da:	4a20      	ldr	r2, [pc, #128]	; (800e25c <_free_r+0x9c>)
 800e1dc:	9801      	ldr	r0, [sp, #4]
 800e1de:	6813      	ldr	r3, [r2, #0]
 800e1e0:	4615      	mov	r5, r2
 800e1e2:	b933      	cbnz	r3, 800e1f2 <_free_r+0x32>
 800e1e4:	6063      	str	r3, [r4, #4]
 800e1e6:	6014      	str	r4, [r2, #0]
 800e1e8:	b003      	add	sp, #12
 800e1ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1ee:	f000 b9f5 	b.w	800e5dc <__malloc_unlock>
 800e1f2:	42a3      	cmp	r3, r4
 800e1f4:	d90b      	bls.n	800e20e <_free_r+0x4e>
 800e1f6:	6821      	ldr	r1, [r4, #0]
 800e1f8:	1862      	adds	r2, r4, r1
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	bf04      	itt	eq
 800e1fe:	681a      	ldreq	r2, [r3, #0]
 800e200:	685b      	ldreq	r3, [r3, #4]
 800e202:	6063      	str	r3, [r4, #4]
 800e204:	bf04      	itt	eq
 800e206:	1852      	addeq	r2, r2, r1
 800e208:	6022      	streq	r2, [r4, #0]
 800e20a:	602c      	str	r4, [r5, #0]
 800e20c:	e7ec      	b.n	800e1e8 <_free_r+0x28>
 800e20e:	461a      	mov	r2, r3
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	b10b      	cbz	r3, 800e218 <_free_r+0x58>
 800e214:	42a3      	cmp	r3, r4
 800e216:	d9fa      	bls.n	800e20e <_free_r+0x4e>
 800e218:	6811      	ldr	r1, [r2, #0]
 800e21a:	1855      	adds	r5, r2, r1
 800e21c:	42a5      	cmp	r5, r4
 800e21e:	d10b      	bne.n	800e238 <_free_r+0x78>
 800e220:	6824      	ldr	r4, [r4, #0]
 800e222:	4421      	add	r1, r4
 800e224:	1854      	adds	r4, r2, r1
 800e226:	42a3      	cmp	r3, r4
 800e228:	6011      	str	r1, [r2, #0]
 800e22a:	d1dd      	bne.n	800e1e8 <_free_r+0x28>
 800e22c:	681c      	ldr	r4, [r3, #0]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	6053      	str	r3, [r2, #4]
 800e232:	4421      	add	r1, r4
 800e234:	6011      	str	r1, [r2, #0]
 800e236:	e7d7      	b.n	800e1e8 <_free_r+0x28>
 800e238:	d902      	bls.n	800e240 <_free_r+0x80>
 800e23a:	230c      	movs	r3, #12
 800e23c:	6003      	str	r3, [r0, #0]
 800e23e:	e7d3      	b.n	800e1e8 <_free_r+0x28>
 800e240:	6825      	ldr	r5, [r4, #0]
 800e242:	1961      	adds	r1, r4, r5
 800e244:	428b      	cmp	r3, r1
 800e246:	bf04      	itt	eq
 800e248:	6819      	ldreq	r1, [r3, #0]
 800e24a:	685b      	ldreq	r3, [r3, #4]
 800e24c:	6063      	str	r3, [r4, #4]
 800e24e:	bf04      	itt	eq
 800e250:	1949      	addeq	r1, r1, r5
 800e252:	6021      	streq	r1, [r4, #0]
 800e254:	6054      	str	r4, [r2, #4]
 800e256:	e7c7      	b.n	800e1e8 <_free_r+0x28>
 800e258:	b003      	add	sp, #12
 800e25a:	bd30      	pop	{r4, r5, pc}
 800e25c:	20008240 	.word	0x20008240

0800e260 <_malloc_r>:
 800e260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e262:	1ccd      	adds	r5, r1, #3
 800e264:	f025 0503 	bic.w	r5, r5, #3
 800e268:	3508      	adds	r5, #8
 800e26a:	2d0c      	cmp	r5, #12
 800e26c:	bf38      	it	cc
 800e26e:	250c      	movcc	r5, #12
 800e270:	2d00      	cmp	r5, #0
 800e272:	4606      	mov	r6, r0
 800e274:	db01      	blt.n	800e27a <_malloc_r+0x1a>
 800e276:	42a9      	cmp	r1, r5
 800e278:	d903      	bls.n	800e282 <_malloc_r+0x22>
 800e27a:	230c      	movs	r3, #12
 800e27c:	6033      	str	r3, [r6, #0]
 800e27e:	2000      	movs	r0, #0
 800e280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e282:	f000 f9a5 	bl	800e5d0 <__malloc_lock>
 800e286:	4921      	ldr	r1, [pc, #132]	; (800e30c <_malloc_r+0xac>)
 800e288:	680a      	ldr	r2, [r1, #0]
 800e28a:	4614      	mov	r4, r2
 800e28c:	b99c      	cbnz	r4, 800e2b6 <_malloc_r+0x56>
 800e28e:	4f20      	ldr	r7, [pc, #128]	; (800e310 <_malloc_r+0xb0>)
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	b923      	cbnz	r3, 800e29e <_malloc_r+0x3e>
 800e294:	4621      	mov	r1, r4
 800e296:	4630      	mov	r0, r6
 800e298:	f000 f83c 	bl	800e314 <_sbrk_r>
 800e29c:	6038      	str	r0, [r7, #0]
 800e29e:	4629      	mov	r1, r5
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	f000 f837 	bl	800e314 <_sbrk_r>
 800e2a6:	1c43      	adds	r3, r0, #1
 800e2a8:	d123      	bne.n	800e2f2 <_malloc_r+0x92>
 800e2aa:	230c      	movs	r3, #12
 800e2ac:	6033      	str	r3, [r6, #0]
 800e2ae:	4630      	mov	r0, r6
 800e2b0:	f000 f994 	bl	800e5dc <__malloc_unlock>
 800e2b4:	e7e3      	b.n	800e27e <_malloc_r+0x1e>
 800e2b6:	6823      	ldr	r3, [r4, #0]
 800e2b8:	1b5b      	subs	r3, r3, r5
 800e2ba:	d417      	bmi.n	800e2ec <_malloc_r+0x8c>
 800e2bc:	2b0b      	cmp	r3, #11
 800e2be:	d903      	bls.n	800e2c8 <_malloc_r+0x68>
 800e2c0:	6023      	str	r3, [r4, #0]
 800e2c2:	441c      	add	r4, r3
 800e2c4:	6025      	str	r5, [r4, #0]
 800e2c6:	e004      	b.n	800e2d2 <_malloc_r+0x72>
 800e2c8:	6863      	ldr	r3, [r4, #4]
 800e2ca:	42a2      	cmp	r2, r4
 800e2cc:	bf0c      	ite	eq
 800e2ce:	600b      	streq	r3, [r1, #0]
 800e2d0:	6053      	strne	r3, [r2, #4]
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	f000 f982 	bl	800e5dc <__malloc_unlock>
 800e2d8:	f104 000b 	add.w	r0, r4, #11
 800e2dc:	1d23      	adds	r3, r4, #4
 800e2de:	f020 0007 	bic.w	r0, r0, #7
 800e2e2:	1ac2      	subs	r2, r0, r3
 800e2e4:	d0cc      	beq.n	800e280 <_malloc_r+0x20>
 800e2e6:	1a1b      	subs	r3, r3, r0
 800e2e8:	50a3      	str	r3, [r4, r2]
 800e2ea:	e7c9      	b.n	800e280 <_malloc_r+0x20>
 800e2ec:	4622      	mov	r2, r4
 800e2ee:	6864      	ldr	r4, [r4, #4]
 800e2f0:	e7cc      	b.n	800e28c <_malloc_r+0x2c>
 800e2f2:	1cc4      	adds	r4, r0, #3
 800e2f4:	f024 0403 	bic.w	r4, r4, #3
 800e2f8:	42a0      	cmp	r0, r4
 800e2fa:	d0e3      	beq.n	800e2c4 <_malloc_r+0x64>
 800e2fc:	1a21      	subs	r1, r4, r0
 800e2fe:	4630      	mov	r0, r6
 800e300:	f000 f808 	bl	800e314 <_sbrk_r>
 800e304:	3001      	adds	r0, #1
 800e306:	d1dd      	bne.n	800e2c4 <_malloc_r+0x64>
 800e308:	e7cf      	b.n	800e2aa <_malloc_r+0x4a>
 800e30a:	bf00      	nop
 800e30c:	20008240 	.word	0x20008240
 800e310:	20008244 	.word	0x20008244

0800e314 <_sbrk_r>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	4d06      	ldr	r5, [pc, #24]	; (800e330 <_sbrk_r+0x1c>)
 800e318:	2300      	movs	r3, #0
 800e31a:	4604      	mov	r4, r0
 800e31c:	4608      	mov	r0, r1
 800e31e:	602b      	str	r3, [r5, #0]
 800e320:	f7f4 fb90 	bl	8002a44 <_sbrk>
 800e324:	1c43      	adds	r3, r0, #1
 800e326:	d102      	bne.n	800e32e <_sbrk_r+0x1a>
 800e328:	682b      	ldr	r3, [r5, #0]
 800e32a:	b103      	cbz	r3, 800e32e <_sbrk_r+0x1a>
 800e32c:	6023      	str	r3, [r4, #0]
 800e32e:	bd38      	pop	{r3, r4, r5, pc}
 800e330:	20008c54 	.word	0x20008c54

0800e334 <strcat>:
 800e334:	b510      	push	{r4, lr}
 800e336:	4602      	mov	r2, r0
 800e338:	7814      	ldrb	r4, [r2, #0]
 800e33a:	4613      	mov	r3, r2
 800e33c:	3201      	adds	r2, #1
 800e33e:	2c00      	cmp	r4, #0
 800e340:	d1fa      	bne.n	800e338 <strcat+0x4>
 800e342:	3b01      	subs	r3, #1
 800e344:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e348:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e34c:	2a00      	cmp	r2, #0
 800e34e:	d1f9      	bne.n	800e344 <strcat+0x10>
 800e350:	bd10      	pop	{r4, pc}

0800e352 <strcpy>:
 800e352:	4603      	mov	r3, r0
 800e354:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e358:	f803 2b01 	strb.w	r2, [r3], #1
 800e35c:	2a00      	cmp	r2, #0
 800e35e:	d1f9      	bne.n	800e354 <strcpy+0x2>
 800e360:	4770      	bx	lr

0800e362 <print_e>:
 800e362:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e364:	b087      	sub	sp, #28
 800e366:	ec43 2b10 	vmov	d0, r2, r3
 800e36a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e36c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800e370:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e372:	ab04      	add	r3, sp, #16
 800e374:	9301      	str	r3, [sp, #4]
 800e376:	ab03      	add	r3, sp, #12
 800e378:	9300      	str	r3, [sp, #0]
 800e37a:	1c62      	adds	r2, r4, #1
 800e37c:	ab05      	add	r3, sp, #20
 800e37e:	460f      	mov	r7, r1
 800e380:	2102      	movs	r1, #2
 800e382:	f000 fd89 	bl	800ee98 <_dtoa_r>
 800e386:	9a05      	ldr	r2, [sp, #20]
 800e388:	f242 730f 	movw	r3, #9999	; 0x270f
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d105      	bne.n	800e39c <print_e+0x3a>
 800e390:	4601      	mov	r1, r0
 800e392:	4638      	mov	r0, r7
 800e394:	f7ff ffdd 	bl	800e352 <strcpy>
 800e398:	b007      	add	sp, #28
 800e39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e39c:	463b      	mov	r3, r7
 800e39e:	7801      	ldrb	r1, [r0, #0]
 800e3a0:	f803 1b01 	strb.w	r1, [r3], #1
 800e3a4:	2c00      	cmp	r4, #0
 800e3a6:	bfc8      	it	gt
 800e3a8:	2501      	movgt	r5, #1
 800e3aa:	212e      	movs	r1, #46	; 0x2e
 800e3ac:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800e3b0:	b10f      	cbz	r7, 800e3b6 <print_e+0x54>
 800e3b2:	2c00      	cmp	r4, #0
 800e3b4:	dc37      	bgt.n	800e426 <print_e+0xc4>
 800e3b6:	2e67      	cmp	r6, #103	; 0x67
 800e3b8:	d046      	beq.n	800e448 <print_e+0xe6>
 800e3ba:	2e47      	cmp	r6, #71	; 0x47
 800e3bc:	d046      	beq.n	800e44c <print_e+0xea>
 800e3be:	212e      	movs	r1, #46	; 0x2e
 800e3c0:	2030      	movs	r0, #48	; 0x30
 800e3c2:	2c00      	cmp	r4, #0
 800e3c4:	dc38      	bgt.n	800e438 <print_e+0xd6>
 800e3c6:	1e51      	subs	r1, r2, #1
 800e3c8:	2900      	cmp	r1, #0
 800e3ca:	bfb8      	it	lt
 800e3cc:	f1c2 0201 	rsblt	r2, r2, #1
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	9105      	str	r1, [sp, #20]
 800e3d4:	bfbc      	itt	lt
 800e3d6:	212d      	movlt	r1, #45	; 0x2d
 800e3d8:	9205      	strlt	r2, [sp, #20]
 800e3da:	f800 6b02 	strb.w	r6, [r0], #2
 800e3de:	bfb8      	it	lt
 800e3e0:	7059      	strblt	r1, [r3, #1]
 800e3e2:	9905      	ldr	r1, [sp, #20]
 800e3e4:	bfa4      	itt	ge
 800e3e6:	222b      	movge	r2, #43	; 0x2b
 800e3e8:	705a      	strbge	r2, [r3, #1]
 800e3ea:	2963      	cmp	r1, #99	; 0x63
 800e3ec:	dd0b      	ble.n	800e406 <print_e+0xa4>
 800e3ee:	2264      	movs	r2, #100	; 0x64
 800e3f0:	fb91 f2f2 	sdiv	r2, r1, r2
 800e3f4:	f102 0430 	add.w	r4, r2, #48	; 0x30
 800e3f8:	1cd8      	adds	r0, r3, #3
 800e3fa:	709c      	strb	r4, [r3, #2]
 800e3fc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800e400:	fb03 1202 	mla	r2, r3, r2, r1
 800e404:	9205      	str	r2, [sp, #20]
 800e406:	9a05      	ldr	r2, [sp, #20]
 800e408:	230a      	movs	r3, #10
 800e40a:	fb92 f3f3 	sdiv	r3, r2, r3
 800e40e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e412:	7001      	strb	r1, [r0, #0]
 800e414:	f06f 0109 	mvn.w	r1, #9
 800e418:	fb01 2303 	mla	r3, r1, r3, r2
 800e41c:	3330      	adds	r3, #48	; 0x30
 800e41e:	7043      	strb	r3, [r0, #1]
 800e420:	2300      	movs	r3, #0
 800e422:	7083      	strb	r3, [r0, #2]
 800e424:	e7b8      	b.n	800e398 <print_e+0x36>
 800e426:	b10d      	cbz	r5, 800e42c <print_e+0xca>
 800e428:	f803 1b01 	strb.w	r1, [r3], #1
 800e42c:	7805      	ldrb	r5, [r0, #0]
 800e42e:	f803 5b01 	strb.w	r5, [r3], #1
 800e432:	3c01      	subs	r4, #1
 800e434:	2500      	movs	r5, #0
 800e436:	e7b9      	b.n	800e3ac <print_e+0x4a>
 800e438:	b10d      	cbz	r5, 800e43e <print_e+0xdc>
 800e43a:	f803 1b01 	strb.w	r1, [r3], #1
 800e43e:	f803 0b01 	strb.w	r0, [r3], #1
 800e442:	3c01      	subs	r4, #1
 800e444:	2500      	movs	r5, #0
 800e446:	e7bc      	b.n	800e3c2 <print_e+0x60>
 800e448:	2665      	movs	r6, #101	; 0x65
 800e44a:	e7bc      	b.n	800e3c6 <print_e+0x64>
 800e44c:	2645      	movs	r6, #69	; 0x45
 800e44e:	e7ba      	b.n	800e3c6 <print_e+0x64>

0800e450 <_gcvt>:
 800e450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e454:	ec55 4b10 	vmov	r4, r5, d0
 800e458:	b088      	sub	sp, #32
 800e45a:	4681      	mov	r9, r0
 800e45c:	4688      	mov	r8, r1
 800e45e:	4616      	mov	r6, r2
 800e460:	469a      	mov	sl, r3
 800e462:	ee10 0a10 	vmov	r0, s0
 800e466:	2200      	movs	r2, #0
 800e468:	2300      	movs	r3, #0
 800e46a:	4629      	mov	r1, r5
 800e46c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e46e:	f7f2 fb45 	bl	8000afc <__aeabi_dcmplt>
 800e472:	b110      	cbz	r0, 800e47a <_gcvt+0x2a>
 800e474:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e478:	461d      	mov	r5, r3
 800e47a:	2200      	movs	r2, #0
 800e47c:	2300      	movs	r3, #0
 800e47e:	4620      	mov	r0, r4
 800e480:	4629      	mov	r1, r5
 800e482:	f7f2 fb31 	bl	8000ae8 <__aeabi_dcmpeq>
 800e486:	b138      	cbz	r0, 800e498 <_gcvt+0x48>
 800e488:	2330      	movs	r3, #48	; 0x30
 800e48a:	7033      	strb	r3, [r6, #0]
 800e48c:	2300      	movs	r3, #0
 800e48e:	7073      	strb	r3, [r6, #1]
 800e490:	4630      	mov	r0, r6
 800e492:	b008      	add	sp, #32
 800e494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e498:	a34b      	add	r3, pc, #300	; (adr r3, 800e5c8 <_gcvt+0x178>)
 800e49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49e:	4620      	mov	r0, r4
 800e4a0:	4629      	mov	r1, r5
 800e4a2:	f7f2 fb35 	bl	8000b10 <__aeabi_dcmple>
 800e4a6:	b158      	cbz	r0, 800e4c0 <_gcvt+0x70>
 800e4a8:	f108 31ff 	add.w	r1, r8, #4294967295
 800e4ac:	9100      	str	r1, [sp, #0]
 800e4ae:	e9cd a701 	strd	sl, r7, [sp, #4]
 800e4b2:	4622      	mov	r2, r4
 800e4b4:	462b      	mov	r3, r5
 800e4b6:	4631      	mov	r1, r6
 800e4b8:	4648      	mov	r0, r9
 800e4ba:	f7ff ff52 	bl	800e362 <print_e>
 800e4be:	e7e7      	b.n	800e490 <_gcvt+0x40>
 800e4c0:	4640      	mov	r0, r8
 800e4c2:	f000 fc0f 	bl	800ece4 <_mprec_log10>
 800e4c6:	4622      	mov	r2, r4
 800e4c8:	ec51 0b10 	vmov	r0, r1, d0
 800e4cc:	462b      	mov	r3, r5
 800e4ce:	f7f2 fb1f 	bl	8000b10 <__aeabi_dcmple>
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	d1e8      	bne.n	800e4a8 <_gcvt+0x58>
 800e4d6:	ab07      	add	r3, sp, #28
 800e4d8:	9301      	str	r3, [sp, #4]
 800e4da:	ab06      	add	r3, sp, #24
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	4642      	mov	r2, r8
 800e4e0:	ab05      	add	r3, sp, #20
 800e4e2:	ec45 4b10 	vmov	d0, r4, r5
 800e4e6:	2102      	movs	r1, #2
 800e4e8:	4648      	mov	r0, r9
 800e4ea:	f000 fcd5 	bl	800ee98 <_dtoa_r>
 800e4ee:	9a05      	ldr	r2, [sp, #20]
 800e4f0:	f242 730f 	movw	r3, #9999	; 0x270f
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d00e      	beq.n	800e516 <_gcvt+0xc6>
 800e4f8:	4633      	mov	r3, r6
 800e4fa:	44b0      	add	r8, r6
 800e4fc:	4604      	mov	r4, r0
 800e4fe:	f810 5b01 	ldrb.w	r5, [r0], #1
 800e502:	9905      	ldr	r1, [sp, #20]
 800e504:	eba8 0203 	sub.w	r2, r8, r3
 800e508:	b10d      	cbz	r5, 800e50e <_gcvt+0xbe>
 800e50a:	2900      	cmp	r1, #0
 800e50c:	dc08      	bgt.n	800e520 <_gcvt+0xd0>
 800e50e:	2000      	movs	r0, #0
 800e510:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800e514:	e00d      	b.n	800e532 <_gcvt+0xe2>
 800e516:	4601      	mov	r1, r0
 800e518:	4630      	mov	r0, r6
 800e51a:	f7ff ff1a 	bl	800e352 <strcpy>
 800e51e:	e7b7      	b.n	800e490 <_gcvt+0x40>
 800e520:	3901      	subs	r1, #1
 800e522:	f803 5b01 	strb.w	r5, [r3], #1
 800e526:	9105      	str	r1, [sp, #20]
 800e528:	e7e8      	b.n	800e4fc <_gcvt+0xac>
 800e52a:	f803 cb01 	strb.w	ip, [r3], #1
 800e52e:	3a01      	subs	r2, #1
 800e530:	2001      	movs	r0, #1
 800e532:	2900      	cmp	r1, #0
 800e534:	460d      	mov	r5, r1
 800e536:	dc2a      	bgt.n	800e58e <_gcvt+0x13e>
 800e538:	b100      	cbz	r0, 800e53c <_gcvt+0xec>
 800e53a:	9105      	str	r1, [sp, #20]
 800e53c:	b90f      	cbnz	r7, 800e542 <_gcvt+0xf2>
 800e53e:	7821      	ldrb	r1, [r4, #0]
 800e540:	b311      	cbz	r1, 800e588 <_gcvt+0x138>
 800e542:	42b3      	cmp	r3, r6
 800e544:	bf04      	itt	eq
 800e546:	2130      	moveq	r1, #48	; 0x30
 800e548:	f803 1b01 	strbeq.w	r1, [r3], #1
 800e54c:	212e      	movs	r1, #46	; 0x2e
 800e54e:	7019      	strb	r1, [r3, #0]
 800e550:	9905      	ldr	r1, [sp, #20]
 800e552:	4618      	mov	r0, r3
 800e554:	2500      	movs	r5, #0
 800e556:	eba1 0c03 	sub.w	ip, r1, r3
 800e55a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800e55e:	eb1c 0f00 	cmn.w	ip, r0
 800e562:	d41c      	bmi.n	800e59e <_gcvt+0x14e>
 800e564:	2900      	cmp	r1, #0
 800e566:	f1c1 0000 	rsb	r0, r1, #0
 800e56a:	bfc8      	it	gt
 800e56c:	2000      	movgt	r0, #0
 800e56e:	f100 0c01 	add.w	ip, r0, #1
 800e572:	4463      	add	r3, ip
 800e574:	4401      	add	r1, r0
 800e576:	b105      	cbz	r5, 800e57a <_gcvt+0x12a>
 800e578:	9105      	str	r1, [sp, #20]
 800e57a:	1e61      	subs	r1, r4, #1
 800e57c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e580:	b108      	cbz	r0, 800e586 <_gcvt+0x136>
 800e582:	2a00      	cmp	r2, #0
 800e584:	dc0f      	bgt.n	800e5a6 <_gcvt+0x156>
 800e586:	b9df      	cbnz	r7, 800e5c0 <_gcvt+0x170>
 800e588:	2200      	movs	r2, #0
 800e58a:	701a      	strb	r2, [r3, #0]
 800e58c:	e780      	b.n	800e490 <_gcvt+0x40>
 800e58e:	2a00      	cmp	r2, #0
 800e590:	f101 31ff 	add.w	r1, r1, #4294967295
 800e594:	dcc9      	bgt.n	800e52a <_gcvt+0xda>
 800e596:	2800      	cmp	r0, #0
 800e598:	d0d0      	beq.n	800e53c <_gcvt+0xec>
 800e59a:	9505      	str	r5, [sp, #20]
 800e59c:	e7ce      	b.n	800e53c <_gcvt+0xec>
 800e59e:	f800 ef01 	strb.w	lr, [r0, #1]!
 800e5a2:	2501      	movs	r5, #1
 800e5a4:	e7db      	b.n	800e55e <_gcvt+0x10e>
 800e5a6:	f803 0b01 	strb.w	r0, [r3], #1
 800e5aa:	3a01      	subs	r2, #1
 800e5ac:	e7e6      	b.n	800e57c <_gcvt+0x12c>
 800e5ae:	f801 5b01 	strb.w	r5, [r1], #1
 800e5b2:	1a60      	subs	r0, r4, r1
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	dcfa      	bgt.n	800e5ae <_gcvt+0x15e>
 800e5b8:	2a00      	cmp	r2, #0
 800e5ba:	bfa8      	it	ge
 800e5bc:	189b      	addge	r3, r3, r2
 800e5be:	e7e3      	b.n	800e588 <_gcvt+0x138>
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	189c      	adds	r4, r3, r2
 800e5c4:	2530      	movs	r5, #48	; 0x30
 800e5c6:	e7f4      	b.n	800e5b2 <_gcvt+0x162>
 800e5c8:	eb1c432d 	.word	0xeb1c432d
 800e5cc:	3f1a36e2 	.word	0x3f1a36e2

0800e5d0 <__malloc_lock>:
 800e5d0:	4801      	ldr	r0, [pc, #4]	; (800e5d8 <__malloc_lock+0x8>)
 800e5d2:	f001 ba60 	b.w	800fa96 <__retarget_lock_acquire_recursive>
 800e5d6:	bf00      	nop
 800e5d8:	20008c5c 	.word	0x20008c5c

0800e5dc <__malloc_unlock>:
 800e5dc:	4801      	ldr	r0, [pc, #4]	; (800e5e4 <__malloc_unlock+0x8>)
 800e5de:	f001 ba5b 	b.w	800fa98 <__retarget_lock_release_recursive>
 800e5e2:	bf00      	nop
 800e5e4:	20008c5c 	.word	0x20008c5c

0800e5e8 <_Balloc>:
 800e5e8:	b570      	push	{r4, r5, r6, lr}
 800e5ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	460d      	mov	r5, r1
 800e5f0:	b976      	cbnz	r6, 800e610 <_Balloc+0x28>
 800e5f2:	2010      	movs	r0, #16
 800e5f4:	f7ff fdbe 	bl	800e174 <malloc>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	6260      	str	r0, [r4, #36]	; 0x24
 800e5fc:	b920      	cbnz	r0, 800e608 <_Balloc+0x20>
 800e5fe:	4b18      	ldr	r3, [pc, #96]	; (800e660 <_Balloc+0x78>)
 800e600:	4818      	ldr	r0, [pc, #96]	; (800e664 <_Balloc+0x7c>)
 800e602:	2166      	movs	r1, #102	; 0x66
 800e604:	f000 fb9c 	bl	800ed40 <__assert_func>
 800e608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e60c:	6006      	str	r6, [r0, #0]
 800e60e:	60c6      	str	r6, [r0, #12]
 800e610:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e612:	68f3      	ldr	r3, [r6, #12]
 800e614:	b183      	cbz	r3, 800e638 <_Balloc+0x50>
 800e616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e618:	68db      	ldr	r3, [r3, #12]
 800e61a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e61e:	b9b8      	cbnz	r0, 800e650 <_Balloc+0x68>
 800e620:	2101      	movs	r1, #1
 800e622:	fa01 f605 	lsl.w	r6, r1, r5
 800e626:	1d72      	adds	r2, r6, #5
 800e628:	0092      	lsls	r2, r2, #2
 800e62a:	4620      	mov	r0, r4
 800e62c:	f000 fb78 	bl	800ed20 <_calloc_r>
 800e630:	b160      	cbz	r0, 800e64c <_Balloc+0x64>
 800e632:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e636:	e00e      	b.n	800e656 <_Balloc+0x6e>
 800e638:	2221      	movs	r2, #33	; 0x21
 800e63a:	2104      	movs	r1, #4
 800e63c:	4620      	mov	r0, r4
 800e63e:	f000 fb6f 	bl	800ed20 <_calloc_r>
 800e642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e644:	60f0      	str	r0, [r6, #12]
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d1e4      	bne.n	800e616 <_Balloc+0x2e>
 800e64c:	2000      	movs	r0, #0
 800e64e:	bd70      	pop	{r4, r5, r6, pc}
 800e650:	6802      	ldr	r2, [r0, #0]
 800e652:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e656:	2300      	movs	r3, #0
 800e658:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e65c:	e7f7      	b.n	800e64e <_Balloc+0x66>
 800e65e:	bf00      	nop
 800e660:	08012d68 	.word	0x08012d68
 800e664:	08012d7f 	.word	0x08012d7f

0800e668 <_Bfree>:
 800e668:	b570      	push	{r4, r5, r6, lr}
 800e66a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e66c:	4605      	mov	r5, r0
 800e66e:	460c      	mov	r4, r1
 800e670:	b976      	cbnz	r6, 800e690 <_Bfree+0x28>
 800e672:	2010      	movs	r0, #16
 800e674:	f7ff fd7e 	bl	800e174 <malloc>
 800e678:	4602      	mov	r2, r0
 800e67a:	6268      	str	r0, [r5, #36]	; 0x24
 800e67c:	b920      	cbnz	r0, 800e688 <_Bfree+0x20>
 800e67e:	4b09      	ldr	r3, [pc, #36]	; (800e6a4 <_Bfree+0x3c>)
 800e680:	4809      	ldr	r0, [pc, #36]	; (800e6a8 <_Bfree+0x40>)
 800e682:	218a      	movs	r1, #138	; 0x8a
 800e684:	f000 fb5c 	bl	800ed40 <__assert_func>
 800e688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e68c:	6006      	str	r6, [r0, #0]
 800e68e:	60c6      	str	r6, [r0, #12]
 800e690:	b13c      	cbz	r4, 800e6a2 <_Bfree+0x3a>
 800e692:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e694:	6862      	ldr	r2, [r4, #4]
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e69c:	6021      	str	r1, [r4, #0]
 800e69e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e6a2:	bd70      	pop	{r4, r5, r6, pc}
 800e6a4:	08012d68 	.word	0x08012d68
 800e6a8:	08012d7f 	.word	0x08012d7f

0800e6ac <__multadd>:
 800e6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b0:	690e      	ldr	r6, [r1, #16]
 800e6b2:	4607      	mov	r7, r0
 800e6b4:	4698      	mov	r8, r3
 800e6b6:	460c      	mov	r4, r1
 800e6b8:	f101 0014 	add.w	r0, r1, #20
 800e6bc:	2300      	movs	r3, #0
 800e6be:	6805      	ldr	r5, [r0, #0]
 800e6c0:	b2a9      	uxth	r1, r5
 800e6c2:	fb02 8101 	mla	r1, r2, r1, r8
 800e6c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e6ca:	0c2d      	lsrs	r5, r5, #16
 800e6cc:	fb02 c505 	mla	r5, r2, r5, ip
 800e6d0:	b289      	uxth	r1, r1
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e6d8:	429e      	cmp	r6, r3
 800e6da:	f840 1b04 	str.w	r1, [r0], #4
 800e6de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e6e2:	dcec      	bgt.n	800e6be <__multadd+0x12>
 800e6e4:	f1b8 0f00 	cmp.w	r8, #0
 800e6e8:	d022      	beq.n	800e730 <__multadd+0x84>
 800e6ea:	68a3      	ldr	r3, [r4, #8]
 800e6ec:	42b3      	cmp	r3, r6
 800e6ee:	dc19      	bgt.n	800e724 <__multadd+0x78>
 800e6f0:	6861      	ldr	r1, [r4, #4]
 800e6f2:	4638      	mov	r0, r7
 800e6f4:	3101      	adds	r1, #1
 800e6f6:	f7ff ff77 	bl	800e5e8 <_Balloc>
 800e6fa:	4605      	mov	r5, r0
 800e6fc:	b928      	cbnz	r0, 800e70a <__multadd+0x5e>
 800e6fe:	4602      	mov	r2, r0
 800e700:	4b0d      	ldr	r3, [pc, #52]	; (800e738 <__multadd+0x8c>)
 800e702:	480e      	ldr	r0, [pc, #56]	; (800e73c <__multadd+0x90>)
 800e704:	21b5      	movs	r1, #181	; 0xb5
 800e706:	f000 fb1b 	bl	800ed40 <__assert_func>
 800e70a:	6922      	ldr	r2, [r4, #16]
 800e70c:	3202      	adds	r2, #2
 800e70e:	f104 010c 	add.w	r1, r4, #12
 800e712:	0092      	lsls	r2, r2, #2
 800e714:	300c      	adds	r0, #12
 800e716:	f7ff fd3d 	bl	800e194 <memcpy>
 800e71a:	4621      	mov	r1, r4
 800e71c:	4638      	mov	r0, r7
 800e71e:	f7ff ffa3 	bl	800e668 <_Bfree>
 800e722:	462c      	mov	r4, r5
 800e724:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e728:	3601      	adds	r6, #1
 800e72a:	f8c3 8014 	str.w	r8, [r3, #20]
 800e72e:	6126      	str	r6, [r4, #16]
 800e730:	4620      	mov	r0, r4
 800e732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e736:	bf00      	nop
 800e738:	08012ddf 	.word	0x08012ddf
 800e73c:	08012d7f 	.word	0x08012d7f

0800e740 <__hi0bits>:
 800e740:	0c03      	lsrs	r3, r0, #16
 800e742:	041b      	lsls	r3, r3, #16
 800e744:	b9d3      	cbnz	r3, 800e77c <__hi0bits+0x3c>
 800e746:	0400      	lsls	r0, r0, #16
 800e748:	2310      	movs	r3, #16
 800e74a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e74e:	bf04      	itt	eq
 800e750:	0200      	lsleq	r0, r0, #8
 800e752:	3308      	addeq	r3, #8
 800e754:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e758:	bf04      	itt	eq
 800e75a:	0100      	lsleq	r0, r0, #4
 800e75c:	3304      	addeq	r3, #4
 800e75e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e762:	bf04      	itt	eq
 800e764:	0080      	lsleq	r0, r0, #2
 800e766:	3302      	addeq	r3, #2
 800e768:	2800      	cmp	r0, #0
 800e76a:	db05      	blt.n	800e778 <__hi0bits+0x38>
 800e76c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e770:	f103 0301 	add.w	r3, r3, #1
 800e774:	bf08      	it	eq
 800e776:	2320      	moveq	r3, #32
 800e778:	4618      	mov	r0, r3
 800e77a:	4770      	bx	lr
 800e77c:	2300      	movs	r3, #0
 800e77e:	e7e4      	b.n	800e74a <__hi0bits+0xa>

0800e780 <__lo0bits>:
 800e780:	6803      	ldr	r3, [r0, #0]
 800e782:	f013 0207 	ands.w	r2, r3, #7
 800e786:	4601      	mov	r1, r0
 800e788:	d00b      	beq.n	800e7a2 <__lo0bits+0x22>
 800e78a:	07da      	lsls	r2, r3, #31
 800e78c:	d424      	bmi.n	800e7d8 <__lo0bits+0x58>
 800e78e:	0798      	lsls	r0, r3, #30
 800e790:	bf49      	itett	mi
 800e792:	085b      	lsrmi	r3, r3, #1
 800e794:	089b      	lsrpl	r3, r3, #2
 800e796:	2001      	movmi	r0, #1
 800e798:	600b      	strmi	r3, [r1, #0]
 800e79a:	bf5c      	itt	pl
 800e79c:	600b      	strpl	r3, [r1, #0]
 800e79e:	2002      	movpl	r0, #2
 800e7a0:	4770      	bx	lr
 800e7a2:	b298      	uxth	r0, r3
 800e7a4:	b9b0      	cbnz	r0, 800e7d4 <__lo0bits+0x54>
 800e7a6:	0c1b      	lsrs	r3, r3, #16
 800e7a8:	2010      	movs	r0, #16
 800e7aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e7ae:	bf04      	itt	eq
 800e7b0:	0a1b      	lsreq	r3, r3, #8
 800e7b2:	3008      	addeq	r0, #8
 800e7b4:	071a      	lsls	r2, r3, #28
 800e7b6:	bf04      	itt	eq
 800e7b8:	091b      	lsreq	r3, r3, #4
 800e7ba:	3004      	addeq	r0, #4
 800e7bc:	079a      	lsls	r2, r3, #30
 800e7be:	bf04      	itt	eq
 800e7c0:	089b      	lsreq	r3, r3, #2
 800e7c2:	3002      	addeq	r0, #2
 800e7c4:	07da      	lsls	r2, r3, #31
 800e7c6:	d403      	bmi.n	800e7d0 <__lo0bits+0x50>
 800e7c8:	085b      	lsrs	r3, r3, #1
 800e7ca:	f100 0001 	add.w	r0, r0, #1
 800e7ce:	d005      	beq.n	800e7dc <__lo0bits+0x5c>
 800e7d0:	600b      	str	r3, [r1, #0]
 800e7d2:	4770      	bx	lr
 800e7d4:	4610      	mov	r0, r2
 800e7d6:	e7e8      	b.n	800e7aa <__lo0bits+0x2a>
 800e7d8:	2000      	movs	r0, #0
 800e7da:	4770      	bx	lr
 800e7dc:	2020      	movs	r0, #32
 800e7de:	4770      	bx	lr

0800e7e0 <__i2b>:
 800e7e0:	b510      	push	{r4, lr}
 800e7e2:	460c      	mov	r4, r1
 800e7e4:	2101      	movs	r1, #1
 800e7e6:	f7ff feff 	bl	800e5e8 <_Balloc>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	b928      	cbnz	r0, 800e7fa <__i2b+0x1a>
 800e7ee:	4b05      	ldr	r3, [pc, #20]	; (800e804 <__i2b+0x24>)
 800e7f0:	4805      	ldr	r0, [pc, #20]	; (800e808 <__i2b+0x28>)
 800e7f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e7f6:	f000 faa3 	bl	800ed40 <__assert_func>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	6144      	str	r4, [r0, #20]
 800e7fe:	6103      	str	r3, [r0, #16]
 800e800:	bd10      	pop	{r4, pc}
 800e802:	bf00      	nop
 800e804:	08012ddf 	.word	0x08012ddf
 800e808:	08012d7f 	.word	0x08012d7f

0800e80c <__multiply>:
 800e80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e810:	4614      	mov	r4, r2
 800e812:	690a      	ldr	r2, [r1, #16]
 800e814:	6923      	ldr	r3, [r4, #16]
 800e816:	429a      	cmp	r2, r3
 800e818:	bfb8      	it	lt
 800e81a:	460b      	movlt	r3, r1
 800e81c:	460d      	mov	r5, r1
 800e81e:	bfbc      	itt	lt
 800e820:	4625      	movlt	r5, r4
 800e822:	461c      	movlt	r4, r3
 800e824:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e828:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e82c:	68ab      	ldr	r3, [r5, #8]
 800e82e:	6869      	ldr	r1, [r5, #4]
 800e830:	eb0a 0709 	add.w	r7, sl, r9
 800e834:	42bb      	cmp	r3, r7
 800e836:	b085      	sub	sp, #20
 800e838:	bfb8      	it	lt
 800e83a:	3101      	addlt	r1, #1
 800e83c:	f7ff fed4 	bl	800e5e8 <_Balloc>
 800e840:	b930      	cbnz	r0, 800e850 <__multiply+0x44>
 800e842:	4602      	mov	r2, r0
 800e844:	4b42      	ldr	r3, [pc, #264]	; (800e950 <__multiply+0x144>)
 800e846:	4843      	ldr	r0, [pc, #268]	; (800e954 <__multiply+0x148>)
 800e848:	f240 115d 	movw	r1, #349	; 0x15d
 800e84c:	f000 fa78 	bl	800ed40 <__assert_func>
 800e850:	f100 0614 	add.w	r6, r0, #20
 800e854:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e858:	4633      	mov	r3, r6
 800e85a:	2200      	movs	r2, #0
 800e85c:	4543      	cmp	r3, r8
 800e85e:	d31e      	bcc.n	800e89e <__multiply+0x92>
 800e860:	f105 0c14 	add.w	ip, r5, #20
 800e864:	f104 0314 	add.w	r3, r4, #20
 800e868:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e86c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e870:	9202      	str	r2, [sp, #8]
 800e872:	ebac 0205 	sub.w	r2, ip, r5
 800e876:	3a15      	subs	r2, #21
 800e878:	f022 0203 	bic.w	r2, r2, #3
 800e87c:	3204      	adds	r2, #4
 800e87e:	f105 0115 	add.w	r1, r5, #21
 800e882:	458c      	cmp	ip, r1
 800e884:	bf38      	it	cc
 800e886:	2204      	movcc	r2, #4
 800e888:	9201      	str	r2, [sp, #4]
 800e88a:	9a02      	ldr	r2, [sp, #8]
 800e88c:	9303      	str	r3, [sp, #12]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d808      	bhi.n	800e8a4 <__multiply+0x98>
 800e892:	2f00      	cmp	r7, #0
 800e894:	dc55      	bgt.n	800e942 <__multiply+0x136>
 800e896:	6107      	str	r7, [r0, #16]
 800e898:	b005      	add	sp, #20
 800e89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89e:	f843 2b04 	str.w	r2, [r3], #4
 800e8a2:	e7db      	b.n	800e85c <__multiply+0x50>
 800e8a4:	f8b3 a000 	ldrh.w	sl, [r3]
 800e8a8:	f1ba 0f00 	cmp.w	sl, #0
 800e8ac:	d020      	beq.n	800e8f0 <__multiply+0xe4>
 800e8ae:	f105 0e14 	add.w	lr, r5, #20
 800e8b2:	46b1      	mov	r9, r6
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e8ba:	f8d9 b000 	ldr.w	fp, [r9]
 800e8be:	b2a1      	uxth	r1, r4
 800e8c0:	fa1f fb8b 	uxth.w	fp, fp
 800e8c4:	fb0a b101 	mla	r1, sl, r1, fp
 800e8c8:	4411      	add	r1, r2
 800e8ca:	f8d9 2000 	ldr.w	r2, [r9]
 800e8ce:	0c24      	lsrs	r4, r4, #16
 800e8d0:	0c12      	lsrs	r2, r2, #16
 800e8d2:	fb0a 2404 	mla	r4, sl, r4, r2
 800e8d6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e8da:	b289      	uxth	r1, r1
 800e8dc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e8e0:	45f4      	cmp	ip, lr
 800e8e2:	f849 1b04 	str.w	r1, [r9], #4
 800e8e6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e8ea:	d8e4      	bhi.n	800e8b6 <__multiply+0xaa>
 800e8ec:	9901      	ldr	r1, [sp, #4]
 800e8ee:	5072      	str	r2, [r6, r1]
 800e8f0:	9a03      	ldr	r2, [sp, #12]
 800e8f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e8f6:	3304      	adds	r3, #4
 800e8f8:	f1b9 0f00 	cmp.w	r9, #0
 800e8fc:	d01f      	beq.n	800e93e <__multiply+0x132>
 800e8fe:	6834      	ldr	r4, [r6, #0]
 800e900:	f105 0114 	add.w	r1, r5, #20
 800e904:	46b6      	mov	lr, r6
 800e906:	f04f 0a00 	mov.w	sl, #0
 800e90a:	880a      	ldrh	r2, [r1, #0]
 800e90c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e910:	fb09 b202 	mla	r2, r9, r2, fp
 800e914:	4492      	add	sl, r2
 800e916:	b2a4      	uxth	r4, r4
 800e918:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e91c:	f84e 4b04 	str.w	r4, [lr], #4
 800e920:	f851 4b04 	ldr.w	r4, [r1], #4
 800e924:	f8be 2000 	ldrh.w	r2, [lr]
 800e928:	0c24      	lsrs	r4, r4, #16
 800e92a:	fb09 2404 	mla	r4, r9, r4, r2
 800e92e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e932:	458c      	cmp	ip, r1
 800e934:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e938:	d8e7      	bhi.n	800e90a <__multiply+0xfe>
 800e93a:	9a01      	ldr	r2, [sp, #4]
 800e93c:	50b4      	str	r4, [r6, r2]
 800e93e:	3604      	adds	r6, #4
 800e940:	e7a3      	b.n	800e88a <__multiply+0x7e>
 800e942:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e946:	2b00      	cmp	r3, #0
 800e948:	d1a5      	bne.n	800e896 <__multiply+0x8a>
 800e94a:	3f01      	subs	r7, #1
 800e94c:	e7a1      	b.n	800e892 <__multiply+0x86>
 800e94e:	bf00      	nop
 800e950:	08012ddf 	.word	0x08012ddf
 800e954:	08012d7f 	.word	0x08012d7f

0800e958 <__pow5mult>:
 800e958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e95c:	4615      	mov	r5, r2
 800e95e:	f012 0203 	ands.w	r2, r2, #3
 800e962:	4606      	mov	r6, r0
 800e964:	460f      	mov	r7, r1
 800e966:	d007      	beq.n	800e978 <__pow5mult+0x20>
 800e968:	4c25      	ldr	r4, [pc, #148]	; (800ea00 <__pow5mult+0xa8>)
 800e96a:	3a01      	subs	r2, #1
 800e96c:	2300      	movs	r3, #0
 800e96e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e972:	f7ff fe9b 	bl	800e6ac <__multadd>
 800e976:	4607      	mov	r7, r0
 800e978:	10ad      	asrs	r5, r5, #2
 800e97a:	d03d      	beq.n	800e9f8 <__pow5mult+0xa0>
 800e97c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e97e:	b97c      	cbnz	r4, 800e9a0 <__pow5mult+0x48>
 800e980:	2010      	movs	r0, #16
 800e982:	f7ff fbf7 	bl	800e174 <malloc>
 800e986:	4602      	mov	r2, r0
 800e988:	6270      	str	r0, [r6, #36]	; 0x24
 800e98a:	b928      	cbnz	r0, 800e998 <__pow5mult+0x40>
 800e98c:	4b1d      	ldr	r3, [pc, #116]	; (800ea04 <__pow5mult+0xac>)
 800e98e:	481e      	ldr	r0, [pc, #120]	; (800ea08 <__pow5mult+0xb0>)
 800e990:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e994:	f000 f9d4 	bl	800ed40 <__assert_func>
 800e998:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e99c:	6004      	str	r4, [r0, #0]
 800e99e:	60c4      	str	r4, [r0, #12]
 800e9a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e9a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e9a8:	b94c      	cbnz	r4, 800e9be <__pow5mult+0x66>
 800e9aa:	f240 2171 	movw	r1, #625	; 0x271
 800e9ae:	4630      	mov	r0, r6
 800e9b0:	f7ff ff16 	bl	800e7e0 <__i2b>
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	6003      	str	r3, [r0, #0]
 800e9be:	f04f 0900 	mov.w	r9, #0
 800e9c2:	07eb      	lsls	r3, r5, #31
 800e9c4:	d50a      	bpl.n	800e9dc <__pow5mult+0x84>
 800e9c6:	4639      	mov	r1, r7
 800e9c8:	4622      	mov	r2, r4
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	f7ff ff1e 	bl	800e80c <__multiply>
 800e9d0:	4639      	mov	r1, r7
 800e9d2:	4680      	mov	r8, r0
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	f7ff fe47 	bl	800e668 <_Bfree>
 800e9da:	4647      	mov	r7, r8
 800e9dc:	106d      	asrs	r5, r5, #1
 800e9de:	d00b      	beq.n	800e9f8 <__pow5mult+0xa0>
 800e9e0:	6820      	ldr	r0, [r4, #0]
 800e9e2:	b938      	cbnz	r0, 800e9f4 <__pow5mult+0x9c>
 800e9e4:	4622      	mov	r2, r4
 800e9e6:	4621      	mov	r1, r4
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	f7ff ff0f 	bl	800e80c <__multiply>
 800e9ee:	6020      	str	r0, [r4, #0]
 800e9f0:	f8c0 9000 	str.w	r9, [r0]
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	e7e4      	b.n	800e9c2 <__pow5mult+0x6a>
 800e9f8:	4638      	mov	r0, r7
 800e9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9fe:	bf00      	nop
 800ea00:	08012ee0 	.word	0x08012ee0
 800ea04:	08012d68 	.word	0x08012d68
 800ea08:	08012d7f 	.word	0x08012d7f

0800ea0c <__lshift>:
 800ea0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea10:	460c      	mov	r4, r1
 800ea12:	6849      	ldr	r1, [r1, #4]
 800ea14:	6923      	ldr	r3, [r4, #16]
 800ea16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea1a:	68a3      	ldr	r3, [r4, #8]
 800ea1c:	4607      	mov	r7, r0
 800ea1e:	4691      	mov	r9, r2
 800ea20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea24:	f108 0601 	add.w	r6, r8, #1
 800ea28:	42b3      	cmp	r3, r6
 800ea2a:	db0b      	blt.n	800ea44 <__lshift+0x38>
 800ea2c:	4638      	mov	r0, r7
 800ea2e:	f7ff fddb 	bl	800e5e8 <_Balloc>
 800ea32:	4605      	mov	r5, r0
 800ea34:	b948      	cbnz	r0, 800ea4a <__lshift+0x3e>
 800ea36:	4602      	mov	r2, r0
 800ea38:	4b28      	ldr	r3, [pc, #160]	; (800eadc <__lshift+0xd0>)
 800ea3a:	4829      	ldr	r0, [pc, #164]	; (800eae0 <__lshift+0xd4>)
 800ea3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ea40:	f000 f97e 	bl	800ed40 <__assert_func>
 800ea44:	3101      	adds	r1, #1
 800ea46:	005b      	lsls	r3, r3, #1
 800ea48:	e7ee      	b.n	800ea28 <__lshift+0x1c>
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	f100 0114 	add.w	r1, r0, #20
 800ea50:	f100 0210 	add.w	r2, r0, #16
 800ea54:	4618      	mov	r0, r3
 800ea56:	4553      	cmp	r3, sl
 800ea58:	db33      	blt.n	800eac2 <__lshift+0xb6>
 800ea5a:	6920      	ldr	r0, [r4, #16]
 800ea5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea60:	f104 0314 	add.w	r3, r4, #20
 800ea64:	f019 091f 	ands.w	r9, r9, #31
 800ea68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ea70:	d02b      	beq.n	800eaca <__lshift+0xbe>
 800ea72:	f1c9 0e20 	rsb	lr, r9, #32
 800ea76:	468a      	mov	sl, r1
 800ea78:	2200      	movs	r2, #0
 800ea7a:	6818      	ldr	r0, [r3, #0]
 800ea7c:	fa00 f009 	lsl.w	r0, r0, r9
 800ea80:	4302      	orrs	r2, r0
 800ea82:	f84a 2b04 	str.w	r2, [sl], #4
 800ea86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea8a:	459c      	cmp	ip, r3
 800ea8c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea90:	d8f3      	bhi.n	800ea7a <__lshift+0x6e>
 800ea92:	ebac 0304 	sub.w	r3, ip, r4
 800ea96:	3b15      	subs	r3, #21
 800ea98:	f023 0303 	bic.w	r3, r3, #3
 800ea9c:	3304      	adds	r3, #4
 800ea9e:	f104 0015 	add.w	r0, r4, #21
 800eaa2:	4584      	cmp	ip, r0
 800eaa4:	bf38      	it	cc
 800eaa6:	2304      	movcc	r3, #4
 800eaa8:	50ca      	str	r2, [r1, r3]
 800eaaa:	b10a      	cbz	r2, 800eab0 <__lshift+0xa4>
 800eaac:	f108 0602 	add.w	r6, r8, #2
 800eab0:	3e01      	subs	r6, #1
 800eab2:	4638      	mov	r0, r7
 800eab4:	612e      	str	r6, [r5, #16]
 800eab6:	4621      	mov	r1, r4
 800eab8:	f7ff fdd6 	bl	800e668 <_Bfree>
 800eabc:	4628      	mov	r0, r5
 800eabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac2:	f842 0f04 	str.w	r0, [r2, #4]!
 800eac6:	3301      	adds	r3, #1
 800eac8:	e7c5      	b.n	800ea56 <__lshift+0x4a>
 800eaca:	3904      	subs	r1, #4
 800eacc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ead0:	f841 2f04 	str.w	r2, [r1, #4]!
 800ead4:	459c      	cmp	ip, r3
 800ead6:	d8f9      	bhi.n	800eacc <__lshift+0xc0>
 800ead8:	e7ea      	b.n	800eab0 <__lshift+0xa4>
 800eada:	bf00      	nop
 800eadc:	08012ddf 	.word	0x08012ddf
 800eae0:	08012d7f 	.word	0x08012d7f

0800eae4 <__mcmp>:
 800eae4:	b530      	push	{r4, r5, lr}
 800eae6:	6902      	ldr	r2, [r0, #16]
 800eae8:	690c      	ldr	r4, [r1, #16]
 800eaea:	1b12      	subs	r2, r2, r4
 800eaec:	d10e      	bne.n	800eb0c <__mcmp+0x28>
 800eaee:	f100 0314 	add.w	r3, r0, #20
 800eaf2:	3114      	adds	r1, #20
 800eaf4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eaf8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eafc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eb00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eb04:	42a5      	cmp	r5, r4
 800eb06:	d003      	beq.n	800eb10 <__mcmp+0x2c>
 800eb08:	d305      	bcc.n	800eb16 <__mcmp+0x32>
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	4610      	mov	r0, r2
 800eb0e:	bd30      	pop	{r4, r5, pc}
 800eb10:	4283      	cmp	r3, r0
 800eb12:	d3f3      	bcc.n	800eafc <__mcmp+0x18>
 800eb14:	e7fa      	b.n	800eb0c <__mcmp+0x28>
 800eb16:	f04f 32ff 	mov.w	r2, #4294967295
 800eb1a:	e7f7      	b.n	800eb0c <__mcmp+0x28>

0800eb1c <__mdiff>:
 800eb1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb20:	460c      	mov	r4, r1
 800eb22:	4606      	mov	r6, r0
 800eb24:	4611      	mov	r1, r2
 800eb26:	4620      	mov	r0, r4
 800eb28:	4617      	mov	r7, r2
 800eb2a:	f7ff ffdb 	bl	800eae4 <__mcmp>
 800eb2e:	1e05      	subs	r5, r0, #0
 800eb30:	d110      	bne.n	800eb54 <__mdiff+0x38>
 800eb32:	4629      	mov	r1, r5
 800eb34:	4630      	mov	r0, r6
 800eb36:	f7ff fd57 	bl	800e5e8 <_Balloc>
 800eb3a:	b930      	cbnz	r0, 800eb4a <__mdiff+0x2e>
 800eb3c:	4b39      	ldr	r3, [pc, #228]	; (800ec24 <__mdiff+0x108>)
 800eb3e:	4602      	mov	r2, r0
 800eb40:	f240 2132 	movw	r1, #562	; 0x232
 800eb44:	4838      	ldr	r0, [pc, #224]	; (800ec28 <__mdiff+0x10c>)
 800eb46:	f000 f8fb 	bl	800ed40 <__assert_func>
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb54:	bfa4      	itt	ge
 800eb56:	463b      	movge	r3, r7
 800eb58:	4627      	movge	r7, r4
 800eb5a:	4630      	mov	r0, r6
 800eb5c:	6879      	ldr	r1, [r7, #4]
 800eb5e:	bfa6      	itte	ge
 800eb60:	461c      	movge	r4, r3
 800eb62:	2500      	movge	r5, #0
 800eb64:	2501      	movlt	r5, #1
 800eb66:	f7ff fd3f 	bl	800e5e8 <_Balloc>
 800eb6a:	b920      	cbnz	r0, 800eb76 <__mdiff+0x5a>
 800eb6c:	4b2d      	ldr	r3, [pc, #180]	; (800ec24 <__mdiff+0x108>)
 800eb6e:	4602      	mov	r2, r0
 800eb70:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eb74:	e7e6      	b.n	800eb44 <__mdiff+0x28>
 800eb76:	693e      	ldr	r6, [r7, #16]
 800eb78:	60c5      	str	r5, [r0, #12]
 800eb7a:	6925      	ldr	r5, [r4, #16]
 800eb7c:	f107 0114 	add.w	r1, r7, #20
 800eb80:	f104 0914 	add.w	r9, r4, #20
 800eb84:	f100 0e14 	add.w	lr, r0, #20
 800eb88:	f107 0210 	add.w	r2, r7, #16
 800eb8c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800eb90:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800eb94:	46f2      	mov	sl, lr
 800eb96:	2700      	movs	r7, #0
 800eb98:	f859 3b04 	ldr.w	r3, [r9], #4
 800eb9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eba0:	fa1f f883 	uxth.w	r8, r3
 800eba4:	fa17 f78b 	uxtah	r7, r7, fp
 800eba8:	0c1b      	lsrs	r3, r3, #16
 800ebaa:	eba7 0808 	sub.w	r8, r7, r8
 800ebae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ebb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ebb6:	fa1f f888 	uxth.w	r8, r8
 800ebba:	141f      	asrs	r7, r3, #16
 800ebbc:	454d      	cmp	r5, r9
 800ebbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ebc2:	f84a 3b04 	str.w	r3, [sl], #4
 800ebc6:	d8e7      	bhi.n	800eb98 <__mdiff+0x7c>
 800ebc8:	1b2b      	subs	r3, r5, r4
 800ebca:	3b15      	subs	r3, #21
 800ebcc:	f023 0303 	bic.w	r3, r3, #3
 800ebd0:	3304      	adds	r3, #4
 800ebd2:	3415      	adds	r4, #21
 800ebd4:	42a5      	cmp	r5, r4
 800ebd6:	bf38      	it	cc
 800ebd8:	2304      	movcc	r3, #4
 800ebda:	4419      	add	r1, r3
 800ebdc:	4473      	add	r3, lr
 800ebde:	469e      	mov	lr, r3
 800ebe0:	460d      	mov	r5, r1
 800ebe2:	4565      	cmp	r5, ip
 800ebe4:	d30e      	bcc.n	800ec04 <__mdiff+0xe8>
 800ebe6:	f10c 0203 	add.w	r2, ip, #3
 800ebea:	1a52      	subs	r2, r2, r1
 800ebec:	f022 0203 	bic.w	r2, r2, #3
 800ebf0:	3903      	subs	r1, #3
 800ebf2:	458c      	cmp	ip, r1
 800ebf4:	bf38      	it	cc
 800ebf6:	2200      	movcc	r2, #0
 800ebf8:	441a      	add	r2, r3
 800ebfa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ebfe:	b17b      	cbz	r3, 800ec20 <__mdiff+0x104>
 800ec00:	6106      	str	r6, [r0, #16]
 800ec02:	e7a5      	b.n	800eb50 <__mdiff+0x34>
 800ec04:	f855 8b04 	ldr.w	r8, [r5], #4
 800ec08:	fa17 f488 	uxtah	r4, r7, r8
 800ec0c:	1422      	asrs	r2, r4, #16
 800ec0e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ec12:	b2a4      	uxth	r4, r4
 800ec14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ec18:	f84e 4b04 	str.w	r4, [lr], #4
 800ec1c:	1417      	asrs	r7, r2, #16
 800ec1e:	e7e0      	b.n	800ebe2 <__mdiff+0xc6>
 800ec20:	3e01      	subs	r6, #1
 800ec22:	e7ea      	b.n	800ebfa <__mdiff+0xde>
 800ec24:	08012ddf 	.word	0x08012ddf
 800ec28:	08012d7f 	.word	0x08012d7f

0800ec2c <__d2b>:
 800ec2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec30:	4689      	mov	r9, r1
 800ec32:	2101      	movs	r1, #1
 800ec34:	ec57 6b10 	vmov	r6, r7, d0
 800ec38:	4690      	mov	r8, r2
 800ec3a:	f7ff fcd5 	bl	800e5e8 <_Balloc>
 800ec3e:	4604      	mov	r4, r0
 800ec40:	b930      	cbnz	r0, 800ec50 <__d2b+0x24>
 800ec42:	4602      	mov	r2, r0
 800ec44:	4b25      	ldr	r3, [pc, #148]	; (800ecdc <__d2b+0xb0>)
 800ec46:	4826      	ldr	r0, [pc, #152]	; (800ece0 <__d2b+0xb4>)
 800ec48:	f240 310a 	movw	r1, #778	; 0x30a
 800ec4c:	f000 f878 	bl	800ed40 <__assert_func>
 800ec50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ec54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec58:	bb35      	cbnz	r5, 800eca8 <__d2b+0x7c>
 800ec5a:	2e00      	cmp	r6, #0
 800ec5c:	9301      	str	r3, [sp, #4]
 800ec5e:	d028      	beq.n	800ecb2 <__d2b+0x86>
 800ec60:	4668      	mov	r0, sp
 800ec62:	9600      	str	r6, [sp, #0]
 800ec64:	f7ff fd8c 	bl	800e780 <__lo0bits>
 800ec68:	9900      	ldr	r1, [sp, #0]
 800ec6a:	b300      	cbz	r0, 800ecae <__d2b+0x82>
 800ec6c:	9a01      	ldr	r2, [sp, #4]
 800ec6e:	f1c0 0320 	rsb	r3, r0, #32
 800ec72:	fa02 f303 	lsl.w	r3, r2, r3
 800ec76:	430b      	orrs	r3, r1
 800ec78:	40c2      	lsrs	r2, r0
 800ec7a:	6163      	str	r3, [r4, #20]
 800ec7c:	9201      	str	r2, [sp, #4]
 800ec7e:	9b01      	ldr	r3, [sp, #4]
 800ec80:	61a3      	str	r3, [r4, #24]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	bf14      	ite	ne
 800ec86:	2202      	movne	r2, #2
 800ec88:	2201      	moveq	r2, #1
 800ec8a:	6122      	str	r2, [r4, #16]
 800ec8c:	b1d5      	cbz	r5, 800ecc4 <__d2b+0x98>
 800ec8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ec92:	4405      	add	r5, r0
 800ec94:	f8c9 5000 	str.w	r5, [r9]
 800ec98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec9c:	f8c8 0000 	str.w	r0, [r8]
 800eca0:	4620      	mov	r0, r4
 800eca2:	b003      	add	sp, #12
 800eca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecac:	e7d5      	b.n	800ec5a <__d2b+0x2e>
 800ecae:	6161      	str	r1, [r4, #20]
 800ecb0:	e7e5      	b.n	800ec7e <__d2b+0x52>
 800ecb2:	a801      	add	r0, sp, #4
 800ecb4:	f7ff fd64 	bl	800e780 <__lo0bits>
 800ecb8:	9b01      	ldr	r3, [sp, #4]
 800ecba:	6163      	str	r3, [r4, #20]
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	6122      	str	r2, [r4, #16]
 800ecc0:	3020      	adds	r0, #32
 800ecc2:	e7e3      	b.n	800ec8c <__d2b+0x60>
 800ecc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ecc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eccc:	f8c9 0000 	str.w	r0, [r9]
 800ecd0:	6918      	ldr	r0, [r3, #16]
 800ecd2:	f7ff fd35 	bl	800e740 <__hi0bits>
 800ecd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ecda:	e7df      	b.n	800ec9c <__d2b+0x70>
 800ecdc:	08012ddf 	.word	0x08012ddf
 800ece0:	08012d7f 	.word	0x08012d7f

0800ece4 <_mprec_log10>:
 800ece4:	2817      	cmp	r0, #23
 800ece6:	b5d0      	push	{r4, r6, r7, lr}
 800ece8:	4604      	mov	r4, r0
 800ecea:	dc07      	bgt.n	800ecfc <_mprec_log10+0x18>
 800ecec:	4809      	ldr	r0, [pc, #36]	; (800ed14 <_mprec_log10+0x30>)
 800ecee:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800ecf2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ecf6:	ec41 0b10 	vmov	d0, r0, r1
 800ecfa:	bdd0      	pop	{r4, r6, r7, pc}
 800ecfc:	4906      	ldr	r1, [pc, #24]	; (800ed18 <_mprec_log10+0x34>)
 800ecfe:	4f07      	ldr	r7, [pc, #28]	; (800ed1c <_mprec_log10+0x38>)
 800ed00:	2000      	movs	r0, #0
 800ed02:	2600      	movs	r6, #0
 800ed04:	4632      	mov	r2, r6
 800ed06:	463b      	mov	r3, r7
 800ed08:	f7f1 fc86 	bl	8000618 <__aeabi_dmul>
 800ed0c:	3c01      	subs	r4, #1
 800ed0e:	d1f9      	bne.n	800ed04 <_mprec_log10+0x20>
 800ed10:	e7f1      	b.n	800ecf6 <_mprec_log10+0x12>
 800ed12:	bf00      	nop
 800ed14:	08012e18 	.word	0x08012e18
 800ed18:	3ff00000 	.word	0x3ff00000
 800ed1c:	40240000 	.word	0x40240000

0800ed20 <_calloc_r>:
 800ed20:	b513      	push	{r0, r1, r4, lr}
 800ed22:	434a      	muls	r2, r1
 800ed24:	4611      	mov	r1, r2
 800ed26:	9201      	str	r2, [sp, #4]
 800ed28:	f7ff fa9a 	bl	800e260 <_malloc_r>
 800ed2c:	4604      	mov	r4, r0
 800ed2e:	b118      	cbz	r0, 800ed38 <_calloc_r+0x18>
 800ed30:	9a01      	ldr	r2, [sp, #4]
 800ed32:	2100      	movs	r1, #0
 800ed34:	f7ff fa3c 	bl	800e1b0 <memset>
 800ed38:	4620      	mov	r0, r4
 800ed3a:	b002      	add	sp, #8
 800ed3c:	bd10      	pop	{r4, pc}
	...

0800ed40 <__assert_func>:
 800ed40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed42:	4614      	mov	r4, r2
 800ed44:	461a      	mov	r2, r3
 800ed46:	4b09      	ldr	r3, [pc, #36]	; (800ed6c <__assert_func+0x2c>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4605      	mov	r5, r0
 800ed4c:	68d8      	ldr	r0, [r3, #12]
 800ed4e:	b14c      	cbz	r4, 800ed64 <__assert_func+0x24>
 800ed50:	4b07      	ldr	r3, [pc, #28]	; (800ed70 <__assert_func+0x30>)
 800ed52:	9100      	str	r1, [sp, #0]
 800ed54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed58:	4906      	ldr	r1, [pc, #24]	; (800ed74 <__assert_func+0x34>)
 800ed5a:	462b      	mov	r3, r5
 800ed5c:	f000 fe88 	bl	800fa70 <fiprintf>
 800ed60:	f001 fa48 	bl	80101f4 <abort>
 800ed64:	4b04      	ldr	r3, [pc, #16]	; (800ed78 <__assert_func+0x38>)
 800ed66:	461c      	mov	r4, r3
 800ed68:	e7f3      	b.n	800ed52 <__assert_func+0x12>
 800ed6a:	bf00      	nop
 800ed6c:	20000040 	.word	0x20000040
 800ed70:	08012eec 	.word	0x08012eec
 800ed74:	08012ef9 	.word	0x08012ef9
 800ed78:	08012f27 	.word	0x08012f27

0800ed7c <quorem>:
 800ed7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed80:	6903      	ldr	r3, [r0, #16]
 800ed82:	690c      	ldr	r4, [r1, #16]
 800ed84:	42a3      	cmp	r3, r4
 800ed86:	4607      	mov	r7, r0
 800ed88:	f2c0 8081 	blt.w	800ee8e <quorem+0x112>
 800ed8c:	3c01      	subs	r4, #1
 800ed8e:	f101 0814 	add.w	r8, r1, #20
 800ed92:	f100 0514 	add.w	r5, r0, #20
 800ed96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed9a:	9301      	str	r3, [sp, #4]
 800ed9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eda0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eda4:	3301      	adds	r3, #1
 800eda6:	429a      	cmp	r2, r3
 800eda8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800edac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800edb0:	fbb2 f6f3 	udiv	r6, r2, r3
 800edb4:	d331      	bcc.n	800ee1a <quorem+0x9e>
 800edb6:	f04f 0e00 	mov.w	lr, #0
 800edba:	4640      	mov	r0, r8
 800edbc:	46ac      	mov	ip, r5
 800edbe:	46f2      	mov	sl, lr
 800edc0:	f850 2b04 	ldr.w	r2, [r0], #4
 800edc4:	b293      	uxth	r3, r2
 800edc6:	fb06 e303 	mla	r3, r6, r3, lr
 800edca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800edce:	b29b      	uxth	r3, r3
 800edd0:	ebaa 0303 	sub.w	r3, sl, r3
 800edd4:	0c12      	lsrs	r2, r2, #16
 800edd6:	f8dc a000 	ldr.w	sl, [ip]
 800edda:	fb06 e202 	mla	r2, r6, r2, lr
 800edde:	fa13 f38a 	uxtah	r3, r3, sl
 800ede2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ede6:	fa1f fa82 	uxth.w	sl, r2
 800edea:	f8dc 2000 	ldr.w	r2, [ip]
 800edee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800edf2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800edf6:	b29b      	uxth	r3, r3
 800edf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edfc:	4581      	cmp	r9, r0
 800edfe:	f84c 3b04 	str.w	r3, [ip], #4
 800ee02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ee06:	d2db      	bcs.n	800edc0 <quorem+0x44>
 800ee08:	f855 300b 	ldr.w	r3, [r5, fp]
 800ee0c:	b92b      	cbnz	r3, 800ee1a <quorem+0x9e>
 800ee0e:	9b01      	ldr	r3, [sp, #4]
 800ee10:	3b04      	subs	r3, #4
 800ee12:	429d      	cmp	r5, r3
 800ee14:	461a      	mov	r2, r3
 800ee16:	d32e      	bcc.n	800ee76 <quorem+0xfa>
 800ee18:	613c      	str	r4, [r7, #16]
 800ee1a:	4638      	mov	r0, r7
 800ee1c:	f7ff fe62 	bl	800eae4 <__mcmp>
 800ee20:	2800      	cmp	r0, #0
 800ee22:	db24      	blt.n	800ee6e <quorem+0xf2>
 800ee24:	3601      	adds	r6, #1
 800ee26:	4628      	mov	r0, r5
 800ee28:	f04f 0c00 	mov.w	ip, #0
 800ee2c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ee30:	f8d0 e000 	ldr.w	lr, [r0]
 800ee34:	b293      	uxth	r3, r2
 800ee36:	ebac 0303 	sub.w	r3, ip, r3
 800ee3a:	0c12      	lsrs	r2, r2, #16
 800ee3c:	fa13 f38e 	uxtah	r3, r3, lr
 800ee40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ee44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee4e:	45c1      	cmp	r9, r8
 800ee50:	f840 3b04 	str.w	r3, [r0], #4
 800ee54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ee58:	d2e8      	bcs.n	800ee2c <quorem+0xb0>
 800ee5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee62:	b922      	cbnz	r2, 800ee6e <quorem+0xf2>
 800ee64:	3b04      	subs	r3, #4
 800ee66:	429d      	cmp	r5, r3
 800ee68:	461a      	mov	r2, r3
 800ee6a:	d30a      	bcc.n	800ee82 <quorem+0x106>
 800ee6c:	613c      	str	r4, [r7, #16]
 800ee6e:	4630      	mov	r0, r6
 800ee70:	b003      	add	sp, #12
 800ee72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee76:	6812      	ldr	r2, [r2, #0]
 800ee78:	3b04      	subs	r3, #4
 800ee7a:	2a00      	cmp	r2, #0
 800ee7c:	d1cc      	bne.n	800ee18 <quorem+0x9c>
 800ee7e:	3c01      	subs	r4, #1
 800ee80:	e7c7      	b.n	800ee12 <quorem+0x96>
 800ee82:	6812      	ldr	r2, [r2, #0]
 800ee84:	3b04      	subs	r3, #4
 800ee86:	2a00      	cmp	r2, #0
 800ee88:	d1f0      	bne.n	800ee6c <quorem+0xf0>
 800ee8a:	3c01      	subs	r4, #1
 800ee8c:	e7eb      	b.n	800ee66 <quorem+0xea>
 800ee8e:	2000      	movs	r0, #0
 800ee90:	e7ee      	b.n	800ee70 <quorem+0xf4>
 800ee92:	0000      	movs	r0, r0
 800ee94:	0000      	movs	r0, r0
	...

0800ee98 <_dtoa_r>:
 800ee98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee9c:	ed2d 8b02 	vpush	{d8}
 800eea0:	ec57 6b10 	vmov	r6, r7, d0
 800eea4:	b095      	sub	sp, #84	; 0x54
 800eea6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eea8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eeac:	9105      	str	r1, [sp, #20]
 800eeae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	9209      	str	r2, [sp, #36]	; 0x24
 800eeb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800eeb8:	b975      	cbnz	r5, 800eed8 <_dtoa_r+0x40>
 800eeba:	2010      	movs	r0, #16
 800eebc:	f7ff f95a 	bl	800e174 <malloc>
 800eec0:	4602      	mov	r2, r0
 800eec2:	6260      	str	r0, [r4, #36]	; 0x24
 800eec4:	b920      	cbnz	r0, 800eed0 <_dtoa_r+0x38>
 800eec6:	4bb2      	ldr	r3, [pc, #712]	; (800f190 <_dtoa_r+0x2f8>)
 800eec8:	21ea      	movs	r1, #234	; 0xea
 800eeca:	48b2      	ldr	r0, [pc, #712]	; (800f194 <_dtoa_r+0x2fc>)
 800eecc:	f7ff ff38 	bl	800ed40 <__assert_func>
 800eed0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eed4:	6005      	str	r5, [r0, #0]
 800eed6:	60c5      	str	r5, [r0, #12]
 800eed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eeda:	6819      	ldr	r1, [r3, #0]
 800eedc:	b151      	cbz	r1, 800eef4 <_dtoa_r+0x5c>
 800eede:	685a      	ldr	r2, [r3, #4]
 800eee0:	604a      	str	r2, [r1, #4]
 800eee2:	2301      	movs	r3, #1
 800eee4:	4093      	lsls	r3, r2
 800eee6:	608b      	str	r3, [r1, #8]
 800eee8:	4620      	mov	r0, r4
 800eeea:	f7ff fbbd 	bl	800e668 <_Bfree>
 800eeee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eef0:	2200      	movs	r2, #0
 800eef2:	601a      	str	r2, [r3, #0]
 800eef4:	1e3b      	subs	r3, r7, #0
 800eef6:	bfb9      	ittee	lt
 800eef8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eefc:	9303      	strlt	r3, [sp, #12]
 800eefe:	2300      	movge	r3, #0
 800ef00:	f8c8 3000 	strge.w	r3, [r8]
 800ef04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ef08:	4ba3      	ldr	r3, [pc, #652]	; (800f198 <_dtoa_r+0x300>)
 800ef0a:	bfbc      	itt	lt
 800ef0c:	2201      	movlt	r2, #1
 800ef0e:	f8c8 2000 	strlt.w	r2, [r8]
 800ef12:	ea33 0309 	bics.w	r3, r3, r9
 800ef16:	d11b      	bne.n	800ef50 <_dtoa_r+0xb8>
 800ef18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef1a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ef1e:	6013      	str	r3, [r2, #0]
 800ef20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef24:	4333      	orrs	r3, r6
 800ef26:	f000 857a 	beq.w	800fa1e <_dtoa_r+0xb86>
 800ef2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef2c:	b963      	cbnz	r3, 800ef48 <_dtoa_r+0xb0>
 800ef2e:	4b9b      	ldr	r3, [pc, #620]	; (800f19c <_dtoa_r+0x304>)
 800ef30:	e024      	b.n	800ef7c <_dtoa_r+0xe4>
 800ef32:	4b9b      	ldr	r3, [pc, #620]	; (800f1a0 <_dtoa_r+0x308>)
 800ef34:	9300      	str	r3, [sp, #0]
 800ef36:	3308      	adds	r3, #8
 800ef38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ef3a:	6013      	str	r3, [r2, #0]
 800ef3c:	9800      	ldr	r0, [sp, #0]
 800ef3e:	b015      	add	sp, #84	; 0x54
 800ef40:	ecbd 8b02 	vpop	{d8}
 800ef44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef48:	4b94      	ldr	r3, [pc, #592]	; (800f19c <_dtoa_r+0x304>)
 800ef4a:	9300      	str	r3, [sp, #0]
 800ef4c:	3303      	adds	r3, #3
 800ef4e:	e7f3      	b.n	800ef38 <_dtoa_r+0xa0>
 800ef50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef54:	2200      	movs	r2, #0
 800ef56:	ec51 0b17 	vmov	r0, r1, d7
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ef60:	f7f1 fdc2 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef64:	4680      	mov	r8, r0
 800ef66:	b158      	cbz	r0, 800ef80 <_dtoa_r+0xe8>
 800ef68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	6013      	str	r3, [r2, #0]
 800ef6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	f000 8551 	beq.w	800fa18 <_dtoa_r+0xb80>
 800ef76:	488b      	ldr	r0, [pc, #556]	; (800f1a4 <_dtoa_r+0x30c>)
 800ef78:	6018      	str	r0, [r3, #0]
 800ef7a:	1e43      	subs	r3, r0, #1
 800ef7c:	9300      	str	r3, [sp, #0]
 800ef7e:	e7dd      	b.n	800ef3c <_dtoa_r+0xa4>
 800ef80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ef84:	aa12      	add	r2, sp, #72	; 0x48
 800ef86:	a913      	add	r1, sp, #76	; 0x4c
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f7ff fe4f 	bl	800ec2c <__d2b>
 800ef8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ef92:	4683      	mov	fp, r0
 800ef94:	2d00      	cmp	r5, #0
 800ef96:	d07c      	beq.n	800f092 <_dtoa_r+0x1fa>
 800ef98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ef9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800efa2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800efa6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800efaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800efae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800efb2:	4b7d      	ldr	r3, [pc, #500]	; (800f1a8 <_dtoa_r+0x310>)
 800efb4:	2200      	movs	r2, #0
 800efb6:	4630      	mov	r0, r6
 800efb8:	4639      	mov	r1, r7
 800efba:	f7f1 f975 	bl	80002a8 <__aeabi_dsub>
 800efbe:	a36e      	add	r3, pc, #440	; (adr r3, 800f178 <_dtoa_r+0x2e0>)
 800efc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc4:	f7f1 fb28 	bl	8000618 <__aeabi_dmul>
 800efc8:	a36d      	add	r3, pc, #436	; (adr r3, 800f180 <_dtoa_r+0x2e8>)
 800efca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efce:	f7f1 f96d 	bl	80002ac <__adddf3>
 800efd2:	4606      	mov	r6, r0
 800efd4:	4628      	mov	r0, r5
 800efd6:	460f      	mov	r7, r1
 800efd8:	f7f1 fab4 	bl	8000544 <__aeabi_i2d>
 800efdc:	a36a      	add	r3, pc, #424	; (adr r3, 800f188 <_dtoa_r+0x2f0>)
 800efde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe2:	f7f1 fb19 	bl	8000618 <__aeabi_dmul>
 800efe6:	4602      	mov	r2, r0
 800efe8:	460b      	mov	r3, r1
 800efea:	4630      	mov	r0, r6
 800efec:	4639      	mov	r1, r7
 800efee:	f7f1 f95d 	bl	80002ac <__adddf3>
 800eff2:	4606      	mov	r6, r0
 800eff4:	460f      	mov	r7, r1
 800eff6:	f7f1 fdbf 	bl	8000b78 <__aeabi_d2iz>
 800effa:	2200      	movs	r2, #0
 800effc:	4682      	mov	sl, r0
 800effe:	2300      	movs	r3, #0
 800f000:	4630      	mov	r0, r6
 800f002:	4639      	mov	r1, r7
 800f004:	f7f1 fd7a 	bl	8000afc <__aeabi_dcmplt>
 800f008:	b148      	cbz	r0, 800f01e <_dtoa_r+0x186>
 800f00a:	4650      	mov	r0, sl
 800f00c:	f7f1 fa9a 	bl	8000544 <__aeabi_i2d>
 800f010:	4632      	mov	r2, r6
 800f012:	463b      	mov	r3, r7
 800f014:	f7f1 fd68 	bl	8000ae8 <__aeabi_dcmpeq>
 800f018:	b908      	cbnz	r0, 800f01e <_dtoa_r+0x186>
 800f01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f01e:	f1ba 0f16 	cmp.w	sl, #22
 800f022:	d854      	bhi.n	800f0ce <_dtoa_r+0x236>
 800f024:	4b61      	ldr	r3, [pc, #388]	; (800f1ac <_dtoa_r+0x314>)
 800f026:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f032:	f7f1 fd63 	bl	8000afc <__aeabi_dcmplt>
 800f036:	2800      	cmp	r0, #0
 800f038:	d04b      	beq.n	800f0d2 <_dtoa_r+0x23a>
 800f03a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f03e:	2300      	movs	r3, #0
 800f040:	930e      	str	r3, [sp, #56]	; 0x38
 800f042:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f044:	1b5d      	subs	r5, r3, r5
 800f046:	1e6b      	subs	r3, r5, #1
 800f048:	9304      	str	r3, [sp, #16]
 800f04a:	bf43      	ittte	mi
 800f04c:	2300      	movmi	r3, #0
 800f04e:	f1c5 0801 	rsbmi	r8, r5, #1
 800f052:	9304      	strmi	r3, [sp, #16]
 800f054:	f04f 0800 	movpl.w	r8, #0
 800f058:	f1ba 0f00 	cmp.w	sl, #0
 800f05c:	db3b      	blt.n	800f0d6 <_dtoa_r+0x23e>
 800f05e:	9b04      	ldr	r3, [sp, #16]
 800f060:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f064:	4453      	add	r3, sl
 800f066:	9304      	str	r3, [sp, #16]
 800f068:	2300      	movs	r3, #0
 800f06a:	9306      	str	r3, [sp, #24]
 800f06c:	9b05      	ldr	r3, [sp, #20]
 800f06e:	2b09      	cmp	r3, #9
 800f070:	d869      	bhi.n	800f146 <_dtoa_r+0x2ae>
 800f072:	2b05      	cmp	r3, #5
 800f074:	bfc4      	itt	gt
 800f076:	3b04      	subgt	r3, #4
 800f078:	9305      	strgt	r3, [sp, #20]
 800f07a:	9b05      	ldr	r3, [sp, #20]
 800f07c:	f1a3 0302 	sub.w	r3, r3, #2
 800f080:	bfcc      	ite	gt
 800f082:	2500      	movgt	r5, #0
 800f084:	2501      	movle	r5, #1
 800f086:	2b03      	cmp	r3, #3
 800f088:	d869      	bhi.n	800f15e <_dtoa_r+0x2c6>
 800f08a:	e8df f003 	tbb	[pc, r3]
 800f08e:	4e2c      	.short	0x4e2c
 800f090:	5a4c      	.short	0x5a4c
 800f092:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f096:	441d      	add	r5, r3
 800f098:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f09c:	2b20      	cmp	r3, #32
 800f09e:	bfc1      	itttt	gt
 800f0a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f0a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f0a8:	fa09 f303 	lslgt.w	r3, r9, r3
 800f0ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f0b0:	bfda      	itte	le
 800f0b2:	f1c3 0320 	rsble	r3, r3, #32
 800f0b6:	fa06 f003 	lslle.w	r0, r6, r3
 800f0ba:	4318      	orrgt	r0, r3
 800f0bc:	f7f1 fa32 	bl	8000524 <__aeabi_ui2d>
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	4606      	mov	r6, r0
 800f0c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f0c8:	3d01      	subs	r5, #1
 800f0ca:	9310      	str	r3, [sp, #64]	; 0x40
 800f0cc:	e771      	b.n	800efb2 <_dtoa_r+0x11a>
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e7b6      	b.n	800f040 <_dtoa_r+0x1a8>
 800f0d2:	900e      	str	r0, [sp, #56]	; 0x38
 800f0d4:	e7b5      	b.n	800f042 <_dtoa_r+0x1aa>
 800f0d6:	f1ca 0300 	rsb	r3, sl, #0
 800f0da:	9306      	str	r3, [sp, #24]
 800f0dc:	2300      	movs	r3, #0
 800f0de:	eba8 080a 	sub.w	r8, r8, sl
 800f0e2:	930d      	str	r3, [sp, #52]	; 0x34
 800f0e4:	e7c2      	b.n	800f06c <_dtoa_r+0x1d4>
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	9308      	str	r3, [sp, #32]
 800f0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	dc39      	bgt.n	800f164 <_dtoa_r+0x2cc>
 800f0f0:	f04f 0901 	mov.w	r9, #1
 800f0f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800f0f8:	464b      	mov	r3, r9
 800f0fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f0fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f100:	2200      	movs	r2, #0
 800f102:	6042      	str	r2, [r0, #4]
 800f104:	2204      	movs	r2, #4
 800f106:	f102 0614 	add.w	r6, r2, #20
 800f10a:	429e      	cmp	r6, r3
 800f10c:	6841      	ldr	r1, [r0, #4]
 800f10e:	d92f      	bls.n	800f170 <_dtoa_r+0x2d8>
 800f110:	4620      	mov	r0, r4
 800f112:	f7ff fa69 	bl	800e5e8 <_Balloc>
 800f116:	9000      	str	r0, [sp, #0]
 800f118:	2800      	cmp	r0, #0
 800f11a:	d14b      	bne.n	800f1b4 <_dtoa_r+0x31c>
 800f11c:	4b24      	ldr	r3, [pc, #144]	; (800f1b0 <_dtoa_r+0x318>)
 800f11e:	4602      	mov	r2, r0
 800f120:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f124:	e6d1      	b.n	800eeca <_dtoa_r+0x32>
 800f126:	2301      	movs	r3, #1
 800f128:	e7de      	b.n	800f0e8 <_dtoa_r+0x250>
 800f12a:	2300      	movs	r3, #0
 800f12c:	9308      	str	r3, [sp, #32]
 800f12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f130:	eb0a 0903 	add.w	r9, sl, r3
 800f134:	f109 0301 	add.w	r3, r9, #1
 800f138:	2b01      	cmp	r3, #1
 800f13a:	9301      	str	r3, [sp, #4]
 800f13c:	bfb8      	it	lt
 800f13e:	2301      	movlt	r3, #1
 800f140:	e7dd      	b.n	800f0fe <_dtoa_r+0x266>
 800f142:	2301      	movs	r3, #1
 800f144:	e7f2      	b.n	800f12c <_dtoa_r+0x294>
 800f146:	2501      	movs	r5, #1
 800f148:	2300      	movs	r3, #0
 800f14a:	9305      	str	r3, [sp, #20]
 800f14c:	9508      	str	r5, [sp, #32]
 800f14e:	f04f 39ff 	mov.w	r9, #4294967295
 800f152:	2200      	movs	r2, #0
 800f154:	f8cd 9004 	str.w	r9, [sp, #4]
 800f158:	2312      	movs	r3, #18
 800f15a:	9209      	str	r2, [sp, #36]	; 0x24
 800f15c:	e7cf      	b.n	800f0fe <_dtoa_r+0x266>
 800f15e:	2301      	movs	r3, #1
 800f160:	9308      	str	r3, [sp, #32]
 800f162:	e7f4      	b.n	800f14e <_dtoa_r+0x2b6>
 800f164:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f168:	f8cd 9004 	str.w	r9, [sp, #4]
 800f16c:	464b      	mov	r3, r9
 800f16e:	e7c6      	b.n	800f0fe <_dtoa_r+0x266>
 800f170:	3101      	adds	r1, #1
 800f172:	6041      	str	r1, [r0, #4]
 800f174:	0052      	lsls	r2, r2, #1
 800f176:	e7c6      	b.n	800f106 <_dtoa_r+0x26e>
 800f178:	636f4361 	.word	0x636f4361
 800f17c:	3fd287a7 	.word	0x3fd287a7
 800f180:	8b60c8b3 	.word	0x8b60c8b3
 800f184:	3fc68a28 	.word	0x3fc68a28
 800f188:	509f79fb 	.word	0x509f79fb
 800f18c:	3fd34413 	.word	0x3fd34413
 800f190:	08012d68 	.word	0x08012d68
 800f194:	08012f37 	.word	0x08012f37
 800f198:	7ff00000 	.word	0x7ff00000
 800f19c:	08012f31 	.word	0x08012f31
 800f1a0:	08012f28 	.word	0x08012f28
 800f1a4:	08012f36 	.word	0x08012f36
 800f1a8:	3ff80000 	.word	0x3ff80000
 800f1ac:	08012e18 	.word	0x08012e18
 800f1b0:	08012ddf 	.word	0x08012ddf
 800f1b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1b6:	9a00      	ldr	r2, [sp, #0]
 800f1b8:	601a      	str	r2, [r3, #0]
 800f1ba:	9b01      	ldr	r3, [sp, #4]
 800f1bc:	2b0e      	cmp	r3, #14
 800f1be:	f200 80ad 	bhi.w	800f31c <_dtoa_r+0x484>
 800f1c2:	2d00      	cmp	r5, #0
 800f1c4:	f000 80aa 	beq.w	800f31c <_dtoa_r+0x484>
 800f1c8:	f1ba 0f00 	cmp.w	sl, #0
 800f1cc:	dd36      	ble.n	800f23c <_dtoa_r+0x3a4>
 800f1ce:	4ac3      	ldr	r2, [pc, #780]	; (800f4dc <_dtoa_r+0x644>)
 800f1d0:	f00a 030f 	and.w	r3, sl, #15
 800f1d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f1d8:	ed93 7b00 	vldr	d7, [r3]
 800f1dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f1e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f1e4:	eeb0 8a47 	vmov.f32	s16, s14
 800f1e8:	eef0 8a67 	vmov.f32	s17, s15
 800f1ec:	d016      	beq.n	800f21c <_dtoa_r+0x384>
 800f1ee:	4bbc      	ldr	r3, [pc, #752]	; (800f4e0 <_dtoa_r+0x648>)
 800f1f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f1f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f1f8:	f7f1 fb38 	bl	800086c <__aeabi_ddiv>
 800f1fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f200:	f007 070f 	and.w	r7, r7, #15
 800f204:	2503      	movs	r5, #3
 800f206:	4eb6      	ldr	r6, [pc, #728]	; (800f4e0 <_dtoa_r+0x648>)
 800f208:	b957      	cbnz	r7, 800f220 <_dtoa_r+0x388>
 800f20a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f20e:	ec53 2b18 	vmov	r2, r3, d8
 800f212:	f7f1 fb2b 	bl	800086c <__aeabi_ddiv>
 800f216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f21a:	e029      	b.n	800f270 <_dtoa_r+0x3d8>
 800f21c:	2502      	movs	r5, #2
 800f21e:	e7f2      	b.n	800f206 <_dtoa_r+0x36e>
 800f220:	07f9      	lsls	r1, r7, #31
 800f222:	d508      	bpl.n	800f236 <_dtoa_r+0x39e>
 800f224:	ec51 0b18 	vmov	r0, r1, d8
 800f228:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f22c:	f7f1 f9f4 	bl	8000618 <__aeabi_dmul>
 800f230:	ec41 0b18 	vmov	d8, r0, r1
 800f234:	3501      	adds	r5, #1
 800f236:	107f      	asrs	r7, r7, #1
 800f238:	3608      	adds	r6, #8
 800f23a:	e7e5      	b.n	800f208 <_dtoa_r+0x370>
 800f23c:	f000 80a6 	beq.w	800f38c <_dtoa_r+0x4f4>
 800f240:	f1ca 0600 	rsb	r6, sl, #0
 800f244:	4ba5      	ldr	r3, [pc, #660]	; (800f4dc <_dtoa_r+0x644>)
 800f246:	4fa6      	ldr	r7, [pc, #664]	; (800f4e0 <_dtoa_r+0x648>)
 800f248:	f006 020f 	and.w	r2, r6, #15
 800f24c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f254:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f258:	f7f1 f9de 	bl	8000618 <__aeabi_dmul>
 800f25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f260:	1136      	asrs	r6, r6, #4
 800f262:	2300      	movs	r3, #0
 800f264:	2502      	movs	r5, #2
 800f266:	2e00      	cmp	r6, #0
 800f268:	f040 8085 	bne.w	800f376 <_dtoa_r+0x4de>
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d1d2      	bne.n	800f216 <_dtoa_r+0x37e>
 800f270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f272:	2b00      	cmp	r3, #0
 800f274:	f000 808c 	beq.w	800f390 <_dtoa_r+0x4f8>
 800f278:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f27c:	4b99      	ldr	r3, [pc, #612]	; (800f4e4 <_dtoa_r+0x64c>)
 800f27e:	2200      	movs	r2, #0
 800f280:	4630      	mov	r0, r6
 800f282:	4639      	mov	r1, r7
 800f284:	f7f1 fc3a 	bl	8000afc <__aeabi_dcmplt>
 800f288:	2800      	cmp	r0, #0
 800f28a:	f000 8081 	beq.w	800f390 <_dtoa_r+0x4f8>
 800f28e:	9b01      	ldr	r3, [sp, #4]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d07d      	beq.n	800f390 <_dtoa_r+0x4f8>
 800f294:	f1b9 0f00 	cmp.w	r9, #0
 800f298:	dd3c      	ble.n	800f314 <_dtoa_r+0x47c>
 800f29a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f29e:	9307      	str	r3, [sp, #28]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	4b91      	ldr	r3, [pc, #580]	; (800f4e8 <_dtoa_r+0x650>)
 800f2a4:	4630      	mov	r0, r6
 800f2a6:	4639      	mov	r1, r7
 800f2a8:	f7f1 f9b6 	bl	8000618 <__aeabi_dmul>
 800f2ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2b0:	3501      	adds	r5, #1
 800f2b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f2b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	f7f1 f942 	bl	8000544 <__aeabi_i2d>
 800f2c0:	4632      	mov	r2, r6
 800f2c2:	463b      	mov	r3, r7
 800f2c4:	f7f1 f9a8 	bl	8000618 <__aeabi_dmul>
 800f2c8:	4b88      	ldr	r3, [pc, #544]	; (800f4ec <_dtoa_r+0x654>)
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f7f0 ffee 	bl	80002ac <__adddf3>
 800f2d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f2d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2d8:	9303      	str	r3, [sp, #12]
 800f2da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d15c      	bne.n	800f39a <_dtoa_r+0x502>
 800f2e0:	4b83      	ldr	r3, [pc, #524]	; (800f4f0 <_dtoa_r+0x658>)
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	4630      	mov	r0, r6
 800f2e6:	4639      	mov	r1, r7
 800f2e8:	f7f0 ffde 	bl	80002a8 <__aeabi_dsub>
 800f2ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f2f0:	4606      	mov	r6, r0
 800f2f2:	460f      	mov	r7, r1
 800f2f4:	f7f1 fc20 	bl	8000b38 <__aeabi_dcmpgt>
 800f2f8:	2800      	cmp	r0, #0
 800f2fa:	f040 8296 	bne.w	800f82a <_dtoa_r+0x992>
 800f2fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f302:	4630      	mov	r0, r6
 800f304:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f308:	4639      	mov	r1, r7
 800f30a:	f7f1 fbf7 	bl	8000afc <__aeabi_dcmplt>
 800f30e:	2800      	cmp	r0, #0
 800f310:	f040 8288 	bne.w	800f824 <_dtoa_r+0x98c>
 800f314:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f318:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f31c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f31e:	2b00      	cmp	r3, #0
 800f320:	f2c0 8158 	blt.w	800f5d4 <_dtoa_r+0x73c>
 800f324:	f1ba 0f0e 	cmp.w	sl, #14
 800f328:	f300 8154 	bgt.w	800f5d4 <_dtoa_r+0x73c>
 800f32c:	4b6b      	ldr	r3, [pc, #428]	; (800f4dc <_dtoa_r+0x644>)
 800f32e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f332:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f338:	2b00      	cmp	r3, #0
 800f33a:	f280 80e3 	bge.w	800f504 <_dtoa_r+0x66c>
 800f33e:	9b01      	ldr	r3, [sp, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	f300 80df 	bgt.w	800f504 <_dtoa_r+0x66c>
 800f346:	f040 826d 	bne.w	800f824 <_dtoa_r+0x98c>
 800f34a:	4b69      	ldr	r3, [pc, #420]	; (800f4f0 <_dtoa_r+0x658>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	4640      	mov	r0, r8
 800f350:	4649      	mov	r1, r9
 800f352:	f7f1 f961 	bl	8000618 <__aeabi_dmul>
 800f356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f35a:	f7f1 fbe3 	bl	8000b24 <__aeabi_dcmpge>
 800f35e:	9e01      	ldr	r6, [sp, #4]
 800f360:	4637      	mov	r7, r6
 800f362:	2800      	cmp	r0, #0
 800f364:	f040 8243 	bne.w	800f7ee <_dtoa_r+0x956>
 800f368:	9d00      	ldr	r5, [sp, #0]
 800f36a:	2331      	movs	r3, #49	; 0x31
 800f36c:	f805 3b01 	strb.w	r3, [r5], #1
 800f370:	f10a 0a01 	add.w	sl, sl, #1
 800f374:	e23f      	b.n	800f7f6 <_dtoa_r+0x95e>
 800f376:	07f2      	lsls	r2, r6, #31
 800f378:	d505      	bpl.n	800f386 <_dtoa_r+0x4ee>
 800f37a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f37e:	f7f1 f94b 	bl	8000618 <__aeabi_dmul>
 800f382:	3501      	adds	r5, #1
 800f384:	2301      	movs	r3, #1
 800f386:	1076      	asrs	r6, r6, #1
 800f388:	3708      	adds	r7, #8
 800f38a:	e76c      	b.n	800f266 <_dtoa_r+0x3ce>
 800f38c:	2502      	movs	r5, #2
 800f38e:	e76f      	b.n	800f270 <_dtoa_r+0x3d8>
 800f390:	9b01      	ldr	r3, [sp, #4]
 800f392:	f8cd a01c 	str.w	sl, [sp, #28]
 800f396:	930c      	str	r3, [sp, #48]	; 0x30
 800f398:	e78d      	b.n	800f2b6 <_dtoa_r+0x41e>
 800f39a:	9900      	ldr	r1, [sp, #0]
 800f39c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f39e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f3a0:	4b4e      	ldr	r3, [pc, #312]	; (800f4dc <_dtoa_r+0x644>)
 800f3a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f3a6:	4401      	add	r1, r0
 800f3a8:	9102      	str	r1, [sp, #8]
 800f3aa:	9908      	ldr	r1, [sp, #32]
 800f3ac:	eeb0 8a47 	vmov.f32	s16, s14
 800f3b0:	eef0 8a67 	vmov.f32	s17, s15
 800f3b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f3bc:	2900      	cmp	r1, #0
 800f3be:	d045      	beq.n	800f44c <_dtoa_r+0x5b4>
 800f3c0:	494c      	ldr	r1, [pc, #304]	; (800f4f4 <_dtoa_r+0x65c>)
 800f3c2:	2000      	movs	r0, #0
 800f3c4:	f7f1 fa52 	bl	800086c <__aeabi_ddiv>
 800f3c8:	ec53 2b18 	vmov	r2, r3, d8
 800f3cc:	f7f0 ff6c 	bl	80002a8 <__aeabi_dsub>
 800f3d0:	9d00      	ldr	r5, [sp, #0]
 800f3d2:	ec41 0b18 	vmov	d8, r0, r1
 800f3d6:	4639      	mov	r1, r7
 800f3d8:	4630      	mov	r0, r6
 800f3da:	f7f1 fbcd 	bl	8000b78 <__aeabi_d2iz>
 800f3de:	900c      	str	r0, [sp, #48]	; 0x30
 800f3e0:	f7f1 f8b0 	bl	8000544 <__aeabi_i2d>
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	460b      	mov	r3, r1
 800f3e8:	4630      	mov	r0, r6
 800f3ea:	4639      	mov	r1, r7
 800f3ec:	f7f0 ff5c 	bl	80002a8 <__aeabi_dsub>
 800f3f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3f2:	3330      	adds	r3, #48	; 0x30
 800f3f4:	f805 3b01 	strb.w	r3, [r5], #1
 800f3f8:	ec53 2b18 	vmov	r2, r3, d8
 800f3fc:	4606      	mov	r6, r0
 800f3fe:	460f      	mov	r7, r1
 800f400:	f7f1 fb7c 	bl	8000afc <__aeabi_dcmplt>
 800f404:	2800      	cmp	r0, #0
 800f406:	d165      	bne.n	800f4d4 <_dtoa_r+0x63c>
 800f408:	4632      	mov	r2, r6
 800f40a:	463b      	mov	r3, r7
 800f40c:	4935      	ldr	r1, [pc, #212]	; (800f4e4 <_dtoa_r+0x64c>)
 800f40e:	2000      	movs	r0, #0
 800f410:	f7f0 ff4a 	bl	80002a8 <__aeabi_dsub>
 800f414:	ec53 2b18 	vmov	r2, r3, d8
 800f418:	f7f1 fb70 	bl	8000afc <__aeabi_dcmplt>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	f040 80b9 	bne.w	800f594 <_dtoa_r+0x6fc>
 800f422:	9b02      	ldr	r3, [sp, #8]
 800f424:	429d      	cmp	r5, r3
 800f426:	f43f af75 	beq.w	800f314 <_dtoa_r+0x47c>
 800f42a:	4b2f      	ldr	r3, [pc, #188]	; (800f4e8 <_dtoa_r+0x650>)
 800f42c:	ec51 0b18 	vmov	r0, r1, d8
 800f430:	2200      	movs	r2, #0
 800f432:	f7f1 f8f1 	bl	8000618 <__aeabi_dmul>
 800f436:	4b2c      	ldr	r3, [pc, #176]	; (800f4e8 <_dtoa_r+0x650>)
 800f438:	ec41 0b18 	vmov	d8, r0, r1
 800f43c:	2200      	movs	r2, #0
 800f43e:	4630      	mov	r0, r6
 800f440:	4639      	mov	r1, r7
 800f442:	f7f1 f8e9 	bl	8000618 <__aeabi_dmul>
 800f446:	4606      	mov	r6, r0
 800f448:	460f      	mov	r7, r1
 800f44a:	e7c4      	b.n	800f3d6 <_dtoa_r+0x53e>
 800f44c:	ec51 0b17 	vmov	r0, r1, d7
 800f450:	f7f1 f8e2 	bl	8000618 <__aeabi_dmul>
 800f454:	9b02      	ldr	r3, [sp, #8]
 800f456:	9d00      	ldr	r5, [sp, #0]
 800f458:	930c      	str	r3, [sp, #48]	; 0x30
 800f45a:	ec41 0b18 	vmov	d8, r0, r1
 800f45e:	4639      	mov	r1, r7
 800f460:	4630      	mov	r0, r6
 800f462:	f7f1 fb89 	bl	8000b78 <__aeabi_d2iz>
 800f466:	9011      	str	r0, [sp, #68]	; 0x44
 800f468:	f7f1 f86c 	bl	8000544 <__aeabi_i2d>
 800f46c:	4602      	mov	r2, r0
 800f46e:	460b      	mov	r3, r1
 800f470:	4630      	mov	r0, r6
 800f472:	4639      	mov	r1, r7
 800f474:	f7f0 ff18 	bl	80002a8 <__aeabi_dsub>
 800f478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f47a:	3330      	adds	r3, #48	; 0x30
 800f47c:	f805 3b01 	strb.w	r3, [r5], #1
 800f480:	9b02      	ldr	r3, [sp, #8]
 800f482:	429d      	cmp	r5, r3
 800f484:	4606      	mov	r6, r0
 800f486:	460f      	mov	r7, r1
 800f488:	f04f 0200 	mov.w	r2, #0
 800f48c:	d134      	bne.n	800f4f8 <_dtoa_r+0x660>
 800f48e:	4b19      	ldr	r3, [pc, #100]	; (800f4f4 <_dtoa_r+0x65c>)
 800f490:	ec51 0b18 	vmov	r0, r1, d8
 800f494:	f7f0 ff0a 	bl	80002ac <__adddf3>
 800f498:	4602      	mov	r2, r0
 800f49a:	460b      	mov	r3, r1
 800f49c:	4630      	mov	r0, r6
 800f49e:	4639      	mov	r1, r7
 800f4a0:	f7f1 fb4a 	bl	8000b38 <__aeabi_dcmpgt>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d175      	bne.n	800f594 <_dtoa_r+0x6fc>
 800f4a8:	ec53 2b18 	vmov	r2, r3, d8
 800f4ac:	4911      	ldr	r1, [pc, #68]	; (800f4f4 <_dtoa_r+0x65c>)
 800f4ae:	2000      	movs	r0, #0
 800f4b0:	f7f0 fefa 	bl	80002a8 <__aeabi_dsub>
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	4639      	mov	r1, r7
 800f4bc:	f7f1 fb1e 	bl	8000afc <__aeabi_dcmplt>
 800f4c0:	2800      	cmp	r0, #0
 800f4c2:	f43f af27 	beq.w	800f314 <_dtoa_r+0x47c>
 800f4c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4c8:	1e6b      	subs	r3, r5, #1
 800f4ca:	930c      	str	r3, [sp, #48]	; 0x30
 800f4cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f4d0:	2b30      	cmp	r3, #48	; 0x30
 800f4d2:	d0f8      	beq.n	800f4c6 <_dtoa_r+0x62e>
 800f4d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f4d8:	e04a      	b.n	800f570 <_dtoa_r+0x6d8>
 800f4da:	bf00      	nop
 800f4dc:	08012e18 	.word	0x08012e18
 800f4e0:	08012df0 	.word	0x08012df0
 800f4e4:	3ff00000 	.word	0x3ff00000
 800f4e8:	40240000 	.word	0x40240000
 800f4ec:	401c0000 	.word	0x401c0000
 800f4f0:	40140000 	.word	0x40140000
 800f4f4:	3fe00000 	.word	0x3fe00000
 800f4f8:	4baf      	ldr	r3, [pc, #700]	; (800f7b8 <_dtoa_r+0x920>)
 800f4fa:	f7f1 f88d 	bl	8000618 <__aeabi_dmul>
 800f4fe:	4606      	mov	r6, r0
 800f500:	460f      	mov	r7, r1
 800f502:	e7ac      	b.n	800f45e <_dtoa_r+0x5c6>
 800f504:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f508:	9d00      	ldr	r5, [sp, #0]
 800f50a:	4642      	mov	r2, r8
 800f50c:	464b      	mov	r3, r9
 800f50e:	4630      	mov	r0, r6
 800f510:	4639      	mov	r1, r7
 800f512:	f7f1 f9ab 	bl	800086c <__aeabi_ddiv>
 800f516:	f7f1 fb2f 	bl	8000b78 <__aeabi_d2iz>
 800f51a:	9002      	str	r0, [sp, #8]
 800f51c:	f7f1 f812 	bl	8000544 <__aeabi_i2d>
 800f520:	4642      	mov	r2, r8
 800f522:	464b      	mov	r3, r9
 800f524:	f7f1 f878 	bl	8000618 <__aeabi_dmul>
 800f528:	4602      	mov	r2, r0
 800f52a:	460b      	mov	r3, r1
 800f52c:	4630      	mov	r0, r6
 800f52e:	4639      	mov	r1, r7
 800f530:	f7f0 feba 	bl	80002a8 <__aeabi_dsub>
 800f534:	9e02      	ldr	r6, [sp, #8]
 800f536:	9f01      	ldr	r7, [sp, #4]
 800f538:	3630      	adds	r6, #48	; 0x30
 800f53a:	f805 6b01 	strb.w	r6, [r5], #1
 800f53e:	9e00      	ldr	r6, [sp, #0]
 800f540:	1bae      	subs	r6, r5, r6
 800f542:	42b7      	cmp	r7, r6
 800f544:	4602      	mov	r2, r0
 800f546:	460b      	mov	r3, r1
 800f548:	d137      	bne.n	800f5ba <_dtoa_r+0x722>
 800f54a:	f7f0 feaf 	bl	80002ac <__adddf3>
 800f54e:	4642      	mov	r2, r8
 800f550:	464b      	mov	r3, r9
 800f552:	4606      	mov	r6, r0
 800f554:	460f      	mov	r7, r1
 800f556:	f7f1 faef 	bl	8000b38 <__aeabi_dcmpgt>
 800f55a:	b9c8      	cbnz	r0, 800f590 <_dtoa_r+0x6f8>
 800f55c:	4642      	mov	r2, r8
 800f55e:	464b      	mov	r3, r9
 800f560:	4630      	mov	r0, r6
 800f562:	4639      	mov	r1, r7
 800f564:	f7f1 fac0 	bl	8000ae8 <__aeabi_dcmpeq>
 800f568:	b110      	cbz	r0, 800f570 <_dtoa_r+0x6d8>
 800f56a:	9b02      	ldr	r3, [sp, #8]
 800f56c:	07d9      	lsls	r1, r3, #31
 800f56e:	d40f      	bmi.n	800f590 <_dtoa_r+0x6f8>
 800f570:	4620      	mov	r0, r4
 800f572:	4659      	mov	r1, fp
 800f574:	f7ff f878 	bl	800e668 <_Bfree>
 800f578:	2300      	movs	r3, #0
 800f57a:	702b      	strb	r3, [r5, #0]
 800f57c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f57e:	f10a 0001 	add.w	r0, sl, #1
 800f582:	6018      	str	r0, [r3, #0]
 800f584:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f586:	2b00      	cmp	r3, #0
 800f588:	f43f acd8 	beq.w	800ef3c <_dtoa_r+0xa4>
 800f58c:	601d      	str	r5, [r3, #0]
 800f58e:	e4d5      	b.n	800ef3c <_dtoa_r+0xa4>
 800f590:	f8cd a01c 	str.w	sl, [sp, #28]
 800f594:	462b      	mov	r3, r5
 800f596:	461d      	mov	r5, r3
 800f598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f59c:	2a39      	cmp	r2, #57	; 0x39
 800f59e:	d108      	bne.n	800f5b2 <_dtoa_r+0x71a>
 800f5a0:	9a00      	ldr	r2, [sp, #0]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d1f7      	bne.n	800f596 <_dtoa_r+0x6fe>
 800f5a6:	9a07      	ldr	r2, [sp, #28]
 800f5a8:	9900      	ldr	r1, [sp, #0]
 800f5aa:	3201      	adds	r2, #1
 800f5ac:	9207      	str	r2, [sp, #28]
 800f5ae:	2230      	movs	r2, #48	; 0x30
 800f5b0:	700a      	strb	r2, [r1, #0]
 800f5b2:	781a      	ldrb	r2, [r3, #0]
 800f5b4:	3201      	adds	r2, #1
 800f5b6:	701a      	strb	r2, [r3, #0]
 800f5b8:	e78c      	b.n	800f4d4 <_dtoa_r+0x63c>
 800f5ba:	4b7f      	ldr	r3, [pc, #508]	; (800f7b8 <_dtoa_r+0x920>)
 800f5bc:	2200      	movs	r2, #0
 800f5be:	f7f1 f82b 	bl	8000618 <__aeabi_dmul>
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	4606      	mov	r6, r0
 800f5c8:	460f      	mov	r7, r1
 800f5ca:	f7f1 fa8d 	bl	8000ae8 <__aeabi_dcmpeq>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d09b      	beq.n	800f50a <_dtoa_r+0x672>
 800f5d2:	e7cd      	b.n	800f570 <_dtoa_r+0x6d8>
 800f5d4:	9a08      	ldr	r2, [sp, #32]
 800f5d6:	2a00      	cmp	r2, #0
 800f5d8:	f000 80c4 	beq.w	800f764 <_dtoa_r+0x8cc>
 800f5dc:	9a05      	ldr	r2, [sp, #20]
 800f5de:	2a01      	cmp	r2, #1
 800f5e0:	f300 80a8 	bgt.w	800f734 <_dtoa_r+0x89c>
 800f5e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f5e6:	2a00      	cmp	r2, #0
 800f5e8:	f000 80a0 	beq.w	800f72c <_dtoa_r+0x894>
 800f5ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f5f0:	9e06      	ldr	r6, [sp, #24]
 800f5f2:	4645      	mov	r5, r8
 800f5f4:	9a04      	ldr	r2, [sp, #16]
 800f5f6:	2101      	movs	r1, #1
 800f5f8:	441a      	add	r2, r3
 800f5fa:	4620      	mov	r0, r4
 800f5fc:	4498      	add	r8, r3
 800f5fe:	9204      	str	r2, [sp, #16]
 800f600:	f7ff f8ee 	bl	800e7e0 <__i2b>
 800f604:	4607      	mov	r7, r0
 800f606:	2d00      	cmp	r5, #0
 800f608:	dd0b      	ble.n	800f622 <_dtoa_r+0x78a>
 800f60a:	9b04      	ldr	r3, [sp, #16]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	dd08      	ble.n	800f622 <_dtoa_r+0x78a>
 800f610:	42ab      	cmp	r3, r5
 800f612:	9a04      	ldr	r2, [sp, #16]
 800f614:	bfa8      	it	ge
 800f616:	462b      	movge	r3, r5
 800f618:	eba8 0803 	sub.w	r8, r8, r3
 800f61c:	1aed      	subs	r5, r5, r3
 800f61e:	1ad3      	subs	r3, r2, r3
 800f620:	9304      	str	r3, [sp, #16]
 800f622:	9b06      	ldr	r3, [sp, #24]
 800f624:	b1fb      	cbz	r3, 800f666 <_dtoa_r+0x7ce>
 800f626:	9b08      	ldr	r3, [sp, #32]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	f000 809f 	beq.w	800f76c <_dtoa_r+0x8d4>
 800f62e:	2e00      	cmp	r6, #0
 800f630:	dd11      	ble.n	800f656 <_dtoa_r+0x7be>
 800f632:	4639      	mov	r1, r7
 800f634:	4632      	mov	r2, r6
 800f636:	4620      	mov	r0, r4
 800f638:	f7ff f98e 	bl	800e958 <__pow5mult>
 800f63c:	465a      	mov	r2, fp
 800f63e:	4601      	mov	r1, r0
 800f640:	4607      	mov	r7, r0
 800f642:	4620      	mov	r0, r4
 800f644:	f7ff f8e2 	bl	800e80c <__multiply>
 800f648:	4659      	mov	r1, fp
 800f64a:	9007      	str	r0, [sp, #28]
 800f64c:	4620      	mov	r0, r4
 800f64e:	f7ff f80b 	bl	800e668 <_Bfree>
 800f652:	9b07      	ldr	r3, [sp, #28]
 800f654:	469b      	mov	fp, r3
 800f656:	9b06      	ldr	r3, [sp, #24]
 800f658:	1b9a      	subs	r2, r3, r6
 800f65a:	d004      	beq.n	800f666 <_dtoa_r+0x7ce>
 800f65c:	4659      	mov	r1, fp
 800f65e:	4620      	mov	r0, r4
 800f660:	f7ff f97a 	bl	800e958 <__pow5mult>
 800f664:	4683      	mov	fp, r0
 800f666:	2101      	movs	r1, #1
 800f668:	4620      	mov	r0, r4
 800f66a:	f7ff f8b9 	bl	800e7e0 <__i2b>
 800f66e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f670:	2b00      	cmp	r3, #0
 800f672:	4606      	mov	r6, r0
 800f674:	dd7c      	ble.n	800f770 <_dtoa_r+0x8d8>
 800f676:	461a      	mov	r2, r3
 800f678:	4601      	mov	r1, r0
 800f67a:	4620      	mov	r0, r4
 800f67c:	f7ff f96c 	bl	800e958 <__pow5mult>
 800f680:	9b05      	ldr	r3, [sp, #20]
 800f682:	2b01      	cmp	r3, #1
 800f684:	4606      	mov	r6, r0
 800f686:	dd76      	ble.n	800f776 <_dtoa_r+0x8de>
 800f688:	2300      	movs	r3, #0
 800f68a:	9306      	str	r3, [sp, #24]
 800f68c:	6933      	ldr	r3, [r6, #16]
 800f68e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f692:	6918      	ldr	r0, [r3, #16]
 800f694:	f7ff f854 	bl	800e740 <__hi0bits>
 800f698:	f1c0 0020 	rsb	r0, r0, #32
 800f69c:	9b04      	ldr	r3, [sp, #16]
 800f69e:	4418      	add	r0, r3
 800f6a0:	f010 001f 	ands.w	r0, r0, #31
 800f6a4:	f000 8086 	beq.w	800f7b4 <_dtoa_r+0x91c>
 800f6a8:	f1c0 0320 	rsb	r3, r0, #32
 800f6ac:	2b04      	cmp	r3, #4
 800f6ae:	dd7f      	ble.n	800f7b0 <_dtoa_r+0x918>
 800f6b0:	f1c0 001c 	rsb	r0, r0, #28
 800f6b4:	9b04      	ldr	r3, [sp, #16]
 800f6b6:	4403      	add	r3, r0
 800f6b8:	4480      	add	r8, r0
 800f6ba:	4405      	add	r5, r0
 800f6bc:	9304      	str	r3, [sp, #16]
 800f6be:	f1b8 0f00 	cmp.w	r8, #0
 800f6c2:	dd05      	ble.n	800f6d0 <_dtoa_r+0x838>
 800f6c4:	4659      	mov	r1, fp
 800f6c6:	4642      	mov	r2, r8
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	f7ff f99f 	bl	800ea0c <__lshift>
 800f6ce:	4683      	mov	fp, r0
 800f6d0:	9b04      	ldr	r3, [sp, #16]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	dd05      	ble.n	800f6e2 <_dtoa_r+0x84a>
 800f6d6:	4631      	mov	r1, r6
 800f6d8:	461a      	mov	r2, r3
 800f6da:	4620      	mov	r0, r4
 800f6dc:	f7ff f996 	bl	800ea0c <__lshift>
 800f6e0:	4606      	mov	r6, r0
 800f6e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d069      	beq.n	800f7bc <_dtoa_r+0x924>
 800f6e8:	4631      	mov	r1, r6
 800f6ea:	4658      	mov	r0, fp
 800f6ec:	f7ff f9fa 	bl	800eae4 <__mcmp>
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	da63      	bge.n	800f7bc <_dtoa_r+0x924>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	4659      	mov	r1, fp
 800f6f8:	220a      	movs	r2, #10
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	f7fe ffd6 	bl	800e6ac <__multadd>
 800f700:	9b08      	ldr	r3, [sp, #32]
 800f702:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f706:	4683      	mov	fp, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	f000 818f 	beq.w	800fa2c <_dtoa_r+0xb94>
 800f70e:	4639      	mov	r1, r7
 800f710:	2300      	movs	r3, #0
 800f712:	220a      	movs	r2, #10
 800f714:	4620      	mov	r0, r4
 800f716:	f7fe ffc9 	bl	800e6ac <__multadd>
 800f71a:	f1b9 0f00 	cmp.w	r9, #0
 800f71e:	4607      	mov	r7, r0
 800f720:	f300 808e 	bgt.w	800f840 <_dtoa_r+0x9a8>
 800f724:	9b05      	ldr	r3, [sp, #20]
 800f726:	2b02      	cmp	r3, #2
 800f728:	dc50      	bgt.n	800f7cc <_dtoa_r+0x934>
 800f72a:	e089      	b.n	800f840 <_dtoa_r+0x9a8>
 800f72c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f72e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f732:	e75d      	b.n	800f5f0 <_dtoa_r+0x758>
 800f734:	9b01      	ldr	r3, [sp, #4]
 800f736:	1e5e      	subs	r6, r3, #1
 800f738:	9b06      	ldr	r3, [sp, #24]
 800f73a:	42b3      	cmp	r3, r6
 800f73c:	bfbf      	itttt	lt
 800f73e:	9b06      	ldrlt	r3, [sp, #24]
 800f740:	9606      	strlt	r6, [sp, #24]
 800f742:	1af2      	sublt	r2, r6, r3
 800f744:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f746:	bfb6      	itet	lt
 800f748:	189b      	addlt	r3, r3, r2
 800f74a:	1b9e      	subge	r6, r3, r6
 800f74c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f74e:	9b01      	ldr	r3, [sp, #4]
 800f750:	bfb8      	it	lt
 800f752:	2600      	movlt	r6, #0
 800f754:	2b00      	cmp	r3, #0
 800f756:	bfb5      	itete	lt
 800f758:	eba8 0503 	sublt.w	r5, r8, r3
 800f75c:	9b01      	ldrge	r3, [sp, #4]
 800f75e:	2300      	movlt	r3, #0
 800f760:	4645      	movge	r5, r8
 800f762:	e747      	b.n	800f5f4 <_dtoa_r+0x75c>
 800f764:	9e06      	ldr	r6, [sp, #24]
 800f766:	9f08      	ldr	r7, [sp, #32]
 800f768:	4645      	mov	r5, r8
 800f76a:	e74c      	b.n	800f606 <_dtoa_r+0x76e>
 800f76c:	9a06      	ldr	r2, [sp, #24]
 800f76e:	e775      	b.n	800f65c <_dtoa_r+0x7c4>
 800f770:	9b05      	ldr	r3, [sp, #20]
 800f772:	2b01      	cmp	r3, #1
 800f774:	dc18      	bgt.n	800f7a8 <_dtoa_r+0x910>
 800f776:	9b02      	ldr	r3, [sp, #8]
 800f778:	b9b3      	cbnz	r3, 800f7a8 <_dtoa_r+0x910>
 800f77a:	9b03      	ldr	r3, [sp, #12]
 800f77c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f780:	b9a3      	cbnz	r3, 800f7ac <_dtoa_r+0x914>
 800f782:	9b03      	ldr	r3, [sp, #12]
 800f784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f788:	0d1b      	lsrs	r3, r3, #20
 800f78a:	051b      	lsls	r3, r3, #20
 800f78c:	b12b      	cbz	r3, 800f79a <_dtoa_r+0x902>
 800f78e:	9b04      	ldr	r3, [sp, #16]
 800f790:	3301      	adds	r3, #1
 800f792:	9304      	str	r3, [sp, #16]
 800f794:	f108 0801 	add.w	r8, r8, #1
 800f798:	2301      	movs	r3, #1
 800f79a:	9306      	str	r3, [sp, #24]
 800f79c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f47f af74 	bne.w	800f68c <_dtoa_r+0x7f4>
 800f7a4:	2001      	movs	r0, #1
 800f7a6:	e779      	b.n	800f69c <_dtoa_r+0x804>
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	e7f6      	b.n	800f79a <_dtoa_r+0x902>
 800f7ac:	9b02      	ldr	r3, [sp, #8]
 800f7ae:	e7f4      	b.n	800f79a <_dtoa_r+0x902>
 800f7b0:	d085      	beq.n	800f6be <_dtoa_r+0x826>
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	301c      	adds	r0, #28
 800f7b6:	e77d      	b.n	800f6b4 <_dtoa_r+0x81c>
 800f7b8:	40240000 	.word	0x40240000
 800f7bc:	9b01      	ldr	r3, [sp, #4]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	dc38      	bgt.n	800f834 <_dtoa_r+0x99c>
 800f7c2:	9b05      	ldr	r3, [sp, #20]
 800f7c4:	2b02      	cmp	r3, #2
 800f7c6:	dd35      	ble.n	800f834 <_dtoa_r+0x99c>
 800f7c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f7cc:	f1b9 0f00 	cmp.w	r9, #0
 800f7d0:	d10d      	bne.n	800f7ee <_dtoa_r+0x956>
 800f7d2:	4631      	mov	r1, r6
 800f7d4:	464b      	mov	r3, r9
 800f7d6:	2205      	movs	r2, #5
 800f7d8:	4620      	mov	r0, r4
 800f7da:	f7fe ff67 	bl	800e6ac <__multadd>
 800f7de:	4601      	mov	r1, r0
 800f7e0:	4606      	mov	r6, r0
 800f7e2:	4658      	mov	r0, fp
 800f7e4:	f7ff f97e 	bl	800eae4 <__mcmp>
 800f7e8:	2800      	cmp	r0, #0
 800f7ea:	f73f adbd 	bgt.w	800f368 <_dtoa_r+0x4d0>
 800f7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7f0:	9d00      	ldr	r5, [sp, #0]
 800f7f2:	ea6f 0a03 	mvn.w	sl, r3
 800f7f6:	f04f 0800 	mov.w	r8, #0
 800f7fa:	4631      	mov	r1, r6
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f7fe ff33 	bl	800e668 <_Bfree>
 800f802:	2f00      	cmp	r7, #0
 800f804:	f43f aeb4 	beq.w	800f570 <_dtoa_r+0x6d8>
 800f808:	f1b8 0f00 	cmp.w	r8, #0
 800f80c:	d005      	beq.n	800f81a <_dtoa_r+0x982>
 800f80e:	45b8      	cmp	r8, r7
 800f810:	d003      	beq.n	800f81a <_dtoa_r+0x982>
 800f812:	4641      	mov	r1, r8
 800f814:	4620      	mov	r0, r4
 800f816:	f7fe ff27 	bl	800e668 <_Bfree>
 800f81a:	4639      	mov	r1, r7
 800f81c:	4620      	mov	r0, r4
 800f81e:	f7fe ff23 	bl	800e668 <_Bfree>
 800f822:	e6a5      	b.n	800f570 <_dtoa_r+0x6d8>
 800f824:	2600      	movs	r6, #0
 800f826:	4637      	mov	r7, r6
 800f828:	e7e1      	b.n	800f7ee <_dtoa_r+0x956>
 800f82a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f82c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f830:	4637      	mov	r7, r6
 800f832:	e599      	b.n	800f368 <_dtoa_r+0x4d0>
 800f834:	9b08      	ldr	r3, [sp, #32]
 800f836:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f000 80fd 	beq.w	800fa3a <_dtoa_r+0xba2>
 800f840:	2d00      	cmp	r5, #0
 800f842:	dd05      	ble.n	800f850 <_dtoa_r+0x9b8>
 800f844:	4639      	mov	r1, r7
 800f846:	462a      	mov	r2, r5
 800f848:	4620      	mov	r0, r4
 800f84a:	f7ff f8df 	bl	800ea0c <__lshift>
 800f84e:	4607      	mov	r7, r0
 800f850:	9b06      	ldr	r3, [sp, #24]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d05c      	beq.n	800f910 <_dtoa_r+0xa78>
 800f856:	6879      	ldr	r1, [r7, #4]
 800f858:	4620      	mov	r0, r4
 800f85a:	f7fe fec5 	bl	800e5e8 <_Balloc>
 800f85e:	4605      	mov	r5, r0
 800f860:	b928      	cbnz	r0, 800f86e <_dtoa_r+0x9d6>
 800f862:	4b80      	ldr	r3, [pc, #512]	; (800fa64 <_dtoa_r+0xbcc>)
 800f864:	4602      	mov	r2, r0
 800f866:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f86a:	f7ff bb2e 	b.w	800eeca <_dtoa_r+0x32>
 800f86e:	693a      	ldr	r2, [r7, #16]
 800f870:	3202      	adds	r2, #2
 800f872:	0092      	lsls	r2, r2, #2
 800f874:	f107 010c 	add.w	r1, r7, #12
 800f878:	300c      	adds	r0, #12
 800f87a:	f7fe fc8b 	bl	800e194 <memcpy>
 800f87e:	2201      	movs	r2, #1
 800f880:	4629      	mov	r1, r5
 800f882:	4620      	mov	r0, r4
 800f884:	f7ff f8c2 	bl	800ea0c <__lshift>
 800f888:	9b00      	ldr	r3, [sp, #0]
 800f88a:	3301      	adds	r3, #1
 800f88c:	9301      	str	r3, [sp, #4]
 800f88e:	9b00      	ldr	r3, [sp, #0]
 800f890:	444b      	add	r3, r9
 800f892:	9307      	str	r3, [sp, #28]
 800f894:	9b02      	ldr	r3, [sp, #8]
 800f896:	f003 0301 	and.w	r3, r3, #1
 800f89a:	46b8      	mov	r8, r7
 800f89c:	9306      	str	r3, [sp, #24]
 800f89e:	4607      	mov	r7, r0
 800f8a0:	9b01      	ldr	r3, [sp, #4]
 800f8a2:	4631      	mov	r1, r6
 800f8a4:	3b01      	subs	r3, #1
 800f8a6:	4658      	mov	r0, fp
 800f8a8:	9302      	str	r3, [sp, #8]
 800f8aa:	f7ff fa67 	bl	800ed7c <quorem>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	3330      	adds	r3, #48	; 0x30
 800f8b2:	9004      	str	r0, [sp, #16]
 800f8b4:	4641      	mov	r1, r8
 800f8b6:	4658      	mov	r0, fp
 800f8b8:	9308      	str	r3, [sp, #32]
 800f8ba:	f7ff f913 	bl	800eae4 <__mcmp>
 800f8be:	463a      	mov	r2, r7
 800f8c0:	4681      	mov	r9, r0
 800f8c2:	4631      	mov	r1, r6
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	f7ff f929 	bl	800eb1c <__mdiff>
 800f8ca:	68c2      	ldr	r2, [r0, #12]
 800f8cc:	9b08      	ldr	r3, [sp, #32]
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	bb02      	cbnz	r2, 800f914 <_dtoa_r+0xa7c>
 800f8d2:	4601      	mov	r1, r0
 800f8d4:	4658      	mov	r0, fp
 800f8d6:	f7ff f905 	bl	800eae4 <__mcmp>
 800f8da:	9b08      	ldr	r3, [sp, #32]
 800f8dc:	4602      	mov	r2, r0
 800f8de:	4629      	mov	r1, r5
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f8e6:	f7fe febf 	bl	800e668 <_Bfree>
 800f8ea:	9b05      	ldr	r3, [sp, #20]
 800f8ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8ee:	9d01      	ldr	r5, [sp, #4]
 800f8f0:	ea43 0102 	orr.w	r1, r3, r2
 800f8f4:	9b06      	ldr	r3, [sp, #24]
 800f8f6:	430b      	orrs	r3, r1
 800f8f8:	9b08      	ldr	r3, [sp, #32]
 800f8fa:	d10d      	bne.n	800f918 <_dtoa_r+0xa80>
 800f8fc:	2b39      	cmp	r3, #57	; 0x39
 800f8fe:	d029      	beq.n	800f954 <_dtoa_r+0xabc>
 800f900:	f1b9 0f00 	cmp.w	r9, #0
 800f904:	dd01      	ble.n	800f90a <_dtoa_r+0xa72>
 800f906:	9b04      	ldr	r3, [sp, #16]
 800f908:	3331      	adds	r3, #49	; 0x31
 800f90a:	9a02      	ldr	r2, [sp, #8]
 800f90c:	7013      	strb	r3, [r2, #0]
 800f90e:	e774      	b.n	800f7fa <_dtoa_r+0x962>
 800f910:	4638      	mov	r0, r7
 800f912:	e7b9      	b.n	800f888 <_dtoa_r+0x9f0>
 800f914:	2201      	movs	r2, #1
 800f916:	e7e2      	b.n	800f8de <_dtoa_r+0xa46>
 800f918:	f1b9 0f00 	cmp.w	r9, #0
 800f91c:	db06      	blt.n	800f92c <_dtoa_r+0xa94>
 800f91e:	9905      	ldr	r1, [sp, #20]
 800f920:	ea41 0909 	orr.w	r9, r1, r9
 800f924:	9906      	ldr	r1, [sp, #24]
 800f926:	ea59 0101 	orrs.w	r1, r9, r1
 800f92a:	d120      	bne.n	800f96e <_dtoa_r+0xad6>
 800f92c:	2a00      	cmp	r2, #0
 800f92e:	ddec      	ble.n	800f90a <_dtoa_r+0xa72>
 800f930:	4659      	mov	r1, fp
 800f932:	2201      	movs	r2, #1
 800f934:	4620      	mov	r0, r4
 800f936:	9301      	str	r3, [sp, #4]
 800f938:	f7ff f868 	bl	800ea0c <__lshift>
 800f93c:	4631      	mov	r1, r6
 800f93e:	4683      	mov	fp, r0
 800f940:	f7ff f8d0 	bl	800eae4 <__mcmp>
 800f944:	2800      	cmp	r0, #0
 800f946:	9b01      	ldr	r3, [sp, #4]
 800f948:	dc02      	bgt.n	800f950 <_dtoa_r+0xab8>
 800f94a:	d1de      	bne.n	800f90a <_dtoa_r+0xa72>
 800f94c:	07da      	lsls	r2, r3, #31
 800f94e:	d5dc      	bpl.n	800f90a <_dtoa_r+0xa72>
 800f950:	2b39      	cmp	r3, #57	; 0x39
 800f952:	d1d8      	bne.n	800f906 <_dtoa_r+0xa6e>
 800f954:	9a02      	ldr	r2, [sp, #8]
 800f956:	2339      	movs	r3, #57	; 0x39
 800f958:	7013      	strb	r3, [r2, #0]
 800f95a:	462b      	mov	r3, r5
 800f95c:	461d      	mov	r5, r3
 800f95e:	3b01      	subs	r3, #1
 800f960:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f964:	2a39      	cmp	r2, #57	; 0x39
 800f966:	d050      	beq.n	800fa0a <_dtoa_r+0xb72>
 800f968:	3201      	adds	r2, #1
 800f96a:	701a      	strb	r2, [r3, #0]
 800f96c:	e745      	b.n	800f7fa <_dtoa_r+0x962>
 800f96e:	2a00      	cmp	r2, #0
 800f970:	dd03      	ble.n	800f97a <_dtoa_r+0xae2>
 800f972:	2b39      	cmp	r3, #57	; 0x39
 800f974:	d0ee      	beq.n	800f954 <_dtoa_r+0xabc>
 800f976:	3301      	adds	r3, #1
 800f978:	e7c7      	b.n	800f90a <_dtoa_r+0xa72>
 800f97a:	9a01      	ldr	r2, [sp, #4]
 800f97c:	9907      	ldr	r1, [sp, #28]
 800f97e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f982:	428a      	cmp	r2, r1
 800f984:	d02a      	beq.n	800f9dc <_dtoa_r+0xb44>
 800f986:	4659      	mov	r1, fp
 800f988:	2300      	movs	r3, #0
 800f98a:	220a      	movs	r2, #10
 800f98c:	4620      	mov	r0, r4
 800f98e:	f7fe fe8d 	bl	800e6ac <__multadd>
 800f992:	45b8      	cmp	r8, r7
 800f994:	4683      	mov	fp, r0
 800f996:	f04f 0300 	mov.w	r3, #0
 800f99a:	f04f 020a 	mov.w	r2, #10
 800f99e:	4641      	mov	r1, r8
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	d107      	bne.n	800f9b4 <_dtoa_r+0xb1c>
 800f9a4:	f7fe fe82 	bl	800e6ac <__multadd>
 800f9a8:	4680      	mov	r8, r0
 800f9aa:	4607      	mov	r7, r0
 800f9ac:	9b01      	ldr	r3, [sp, #4]
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	9301      	str	r3, [sp, #4]
 800f9b2:	e775      	b.n	800f8a0 <_dtoa_r+0xa08>
 800f9b4:	f7fe fe7a 	bl	800e6ac <__multadd>
 800f9b8:	4639      	mov	r1, r7
 800f9ba:	4680      	mov	r8, r0
 800f9bc:	2300      	movs	r3, #0
 800f9be:	220a      	movs	r2, #10
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f7fe fe73 	bl	800e6ac <__multadd>
 800f9c6:	4607      	mov	r7, r0
 800f9c8:	e7f0      	b.n	800f9ac <_dtoa_r+0xb14>
 800f9ca:	f1b9 0f00 	cmp.w	r9, #0
 800f9ce:	9a00      	ldr	r2, [sp, #0]
 800f9d0:	bfcc      	ite	gt
 800f9d2:	464d      	movgt	r5, r9
 800f9d4:	2501      	movle	r5, #1
 800f9d6:	4415      	add	r5, r2
 800f9d8:	f04f 0800 	mov.w	r8, #0
 800f9dc:	4659      	mov	r1, fp
 800f9de:	2201      	movs	r2, #1
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	9301      	str	r3, [sp, #4]
 800f9e4:	f7ff f812 	bl	800ea0c <__lshift>
 800f9e8:	4631      	mov	r1, r6
 800f9ea:	4683      	mov	fp, r0
 800f9ec:	f7ff f87a 	bl	800eae4 <__mcmp>
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	dcb2      	bgt.n	800f95a <_dtoa_r+0xac2>
 800f9f4:	d102      	bne.n	800f9fc <_dtoa_r+0xb64>
 800f9f6:	9b01      	ldr	r3, [sp, #4]
 800f9f8:	07db      	lsls	r3, r3, #31
 800f9fa:	d4ae      	bmi.n	800f95a <_dtoa_r+0xac2>
 800f9fc:	462b      	mov	r3, r5
 800f9fe:	461d      	mov	r5, r3
 800fa00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa04:	2a30      	cmp	r2, #48	; 0x30
 800fa06:	d0fa      	beq.n	800f9fe <_dtoa_r+0xb66>
 800fa08:	e6f7      	b.n	800f7fa <_dtoa_r+0x962>
 800fa0a:	9a00      	ldr	r2, [sp, #0]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d1a5      	bne.n	800f95c <_dtoa_r+0xac4>
 800fa10:	f10a 0a01 	add.w	sl, sl, #1
 800fa14:	2331      	movs	r3, #49	; 0x31
 800fa16:	e779      	b.n	800f90c <_dtoa_r+0xa74>
 800fa18:	4b13      	ldr	r3, [pc, #76]	; (800fa68 <_dtoa_r+0xbd0>)
 800fa1a:	f7ff baaf 	b.w	800ef7c <_dtoa_r+0xe4>
 800fa1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	f47f aa86 	bne.w	800ef32 <_dtoa_r+0x9a>
 800fa26:	4b11      	ldr	r3, [pc, #68]	; (800fa6c <_dtoa_r+0xbd4>)
 800fa28:	f7ff baa8 	b.w	800ef7c <_dtoa_r+0xe4>
 800fa2c:	f1b9 0f00 	cmp.w	r9, #0
 800fa30:	dc03      	bgt.n	800fa3a <_dtoa_r+0xba2>
 800fa32:	9b05      	ldr	r3, [sp, #20]
 800fa34:	2b02      	cmp	r3, #2
 800fa36:	f73f aec9 	bgt.w	800f7cc <_dtoa_r+0x934>
 800fa3a:	9d00      	ldr	r5, [sp, #0]
 800fa3c:	4631      	mov	r1, r6
 800fa3e:	4658      	mov	r0, fp
 800fa40:	f7ff f99c 	bl	800ed7c <quorem>
 800fa44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fa48:	f805 3b01 	strb.w	r3, [r5], #1
 800fa4c:	9a00      	ldr	r2, [sp, #0]
 800fa4e:	1aaa      	subs	r2, r5, r2
 800fa50:	4591      	cmp	r9, r2
 800fa52:	ddba      	ble.n	800f9ca <_dtoa_r+0xb32>
 800fa54:	4659      	mov	r1, fp
 800fa56:	2300      	movs	r3, #0
 800fa58:	220a      	movs	r2, #10
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f7fe fe26 	bl	800e6ac <__multadd>
 800fa60:	4683      	mov	fp, r0
 800fa62:	e7eb      	b.n	800fa3c <_dtoa_r+0xba4>
 800fa64:	08012ddf 	.word	0x08012ddf
 800fa68:	08012f35 	.word	0x08012f35
 800fa6c:	08012f28 	.word	0x08012f28

0800fa70 <fiprintf>:
 800fa70:	b40e      	push	{r1, r2, r3}
 800fa72:	b503      	push	{r0, r1, lr}
 800fa74:	4601      	mov	r1, r0
 800fa76:	ab03      	add	r3, sp, #12
 800fa78:	4805      	ldr	r0, [pc, #20]	; (800fa90 <fiprintf+0x20>)
 800fa7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa7e:	6800      	ldr	r0, [r0, #0]
 800fa80:	9301      	str	r3, [sp, #4]
 800fa82:	f000 f833 	bl	800faec <_vfiprintf_r>
 800fa86:	b002      	add	sp, #8
 800fa88:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa8c:	b003      	add	sp, #12
 800fa8e:	4770      	bx	lr
 800fa90:	20000040 	.word	0x20000040

0800fa94 <__retarget_lock_init_recursive>:
 800fa94:	4770      	bx	lr

0800fa96 <__retarget_lock_acquire_recursive>:
 800fa96:	4770      	bx	lr

0800fa98 <__retarget_lock_release_recursive>:
 800fa98:	4770      	bx	lr

0800fa9a <__sfputc_r>:
 800fa9a:	6893      	ldr	r3, [r2, #8]
 800fa9c:	3b01      	subs	r3, #1
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	b410      	push	{r4}
 800faa2:	6093      	str	r3, [r2, #8]
 800faa4:	da08      	bge.n	800fab8 <__sfputc_r+0x1e>
 800faa6:	6994      	ldr	r4, [r2, #24]
 800faa8:	42a3      	cmp	r3, r4
 800faaa:	db01      	blt.n	800fab0 <__sfputc_r+0x16>
 800faac:	290a      	cmp	r1, #10
 800faae:	d103      	bne.n	800fab8 <__sfputc_r+0x1e>
 800fab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fab4:	f000 bade 	b.w	8010074 <__swbuf_r>
 800fab8:	6813      	ldr	r3, [r2, #0]
 800faba:	1c58      	adds	r0, r3, #1
 800fabc:	6010      	str	r0, [r2, #0]
 800fabe:	7019      	strb	r1, [r3, #0]
 800fac0:	4608      	mov	r0, r1
 800fac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fac6:	4770      	bx	lr

0800fac8 <__sfputs_r>:
 800fac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faca:	4606      	mov	r6, r0
 800facc:	460f      	mov	r7, r1
 800face:	4614      	mov	r4, r2
 800fad0:	18d5      	adds	r5, r2, r3
 800fad2:	42ac      	cmp	r4, r5
 800fad4:	d101      	bne.n	800fada <__sfputs_r+0x12>
 800fad6:	2000      	movs	r0, #0
 800fad8:	e007      	b.n	800faea <__sfputs_r+0x22>
 800fada:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fade:	463a      	mov	r2, r7
 800fae0:	4630      	mov	r0, r6
 800fae2:	f7ff ffda 	bl	800fa9a <__sfputc_r>
 800fae6:	1c43      	adds	r3, r0, #1
 800fae8:	d1f3      	bne.n	800fad2 <__sfputs_r+0xa>
 800faea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800faec <_vfiprintf_r>:
 800faec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf0:	460d      	mov	r5, r1
 800faf2:	b09d      	sub	sp, #116	; 0x74
 800faf4:	4614      	mov	r4, r2
 800faf6:	4698      	mov	r8, r3
 800faf8:	4606      	mov	r6, r0
 800fafa:	b118      	cbz	r0, 800fb04 <_vfiprintf_r+0x18>
 800fafc:	6983      	ldr	r3, [r0, #24]
 800fafe:	b90b      	cbnz	r3, 800fb04 <_vfiprintf_r+0x18>
 800fb00:	f000 fc9a 	bl	8010438 <__sinit>
 800fb04:	4b89      	ldr	r3, [pc, #548]	; (800fd2c <_vfiprintf_r+0x240>)
 800fb06:	429d      	cmp	r5, r3
 800fb08:	d11b      	bne.n	800fb42 <_vfiprintf_r+0x56>
 800fb0a:	6875      	ldr	r5, [r6, #4]
 800fb0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb0e:	07d9      	lsls	r1, r3, #31
 800fb10:	d405      	bmi.n	800fb1e <_vfiprintf_r+0x32>
 800fb12:	89ab      	ldrh	r3, [r5, #12]
 800fb14:	059a      	lsls	r2, r3, #22
 800fb16:	d402      	bmi.n	800fb1e <_vfiprintf_r+0x32>
 800fb18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb1a:	f7ff ffbc 	bl	800fa96 <__retarget_lock_acquire_recursive>
 800fb1e:	89ab      	ldrh	r3, [r5, #12]
 800fb20:	071b      	lsls	r3, r3, #28
 800fb22:	d501      	bpl.n	800fb28 <_vfiprintf_r+0x3c>
 800fb24:	692b      	ldr	r3, [r5, #16]
 800fb26:	b9eb      	cbnz	r3, 800fb64 <_vfiprintf_r+0x78>
 800fb28:	4629      	mov	r1, r5
 800fb2a:	4630      	mov	r0, r6
 800fb2c:	f000 faf4 	bl	8010118 <__swsetup_r>
 800fb30:	b1c0      	cbz	r0, 800fb64 <_vfiprintf_r+0x78>
 800fb32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb34:	07dc      	lsls	r4, r3, #31
 800fb36:	d50e      	bpl.n	800fb56 <_vfiprintf_r+0x6a>
 800fb38:	f04f 30ff 	mov.w	r0, #4294967295
 800fb3c:	b01d      	add	sp, #116	; 0x74
 800fb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb42:	4b7b      	ldr	r3, [pc, #492]	; (800fd30 <_vfiprintf_r+0x244>)
 800fb44:	429d      	cmp	r5, r3
 800fb46:	d101      	bne.n	800fb4c <_vfiprintf_r+0x60>
 800fb48:	68b5      	ldr	r5, [r6, #8]
 800fb4a:	e7df      	b.n	800fb0c <_vfiprintf_r+0x20>
 800fb4c:	4b79      	ldr	r3, [pc, #484]	; (800fd34 <_vfiprintf_r+0x248>)
 800fb4e:	429d      	cmp	r5, r3
 800fb50:	bf08      	it	eq
 800fb52:	68f5      	ldreq	r5, [r6, #12]
 800fb54:	e7da      	b.n	800fb0c <_vfiprintf_r+0x20>
 800fb56:	89ab      	ldrh	r3, [r5, #12]
 800fb58:	0598      	lsls	r0, r3, #22
 800fb5a:	d4ed      	bmi.n	800fb38 <_vfiprintf_r+0x4c>
 800fb5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb5e:	f7ff ff9b 	bl	800fa98 <__retarget_lock_release_recursive>
 800fb62:	e7e9      	b.n	800fb38 <_vfiprintf_r+0x4c>
 800fb64:	2300      	movs	r3, #0
 800fb66:	9309      	str	r3, [sp, #36]	; 0x24
 800fb68:	2320      	movs	r3, #32
 800fb6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb72:	2330      	movs	r3, #48	; 0x30
 800fb74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fd38 <_vfiprintf_r+0x24c>
 800fb78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb7c:	f04f 0901 	mov.w	r9, #1
 800fb80:	4623      	mov	r3, r4
 800fb82:	469a      	mov	sl, r3
 800fb84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb88:	b10a      	cbz	r2, 800fb8e <_vfiprintf_r+0xa2>
 800fb8a:	2a25      	cmp	r2, #37	; 0x25
 800fb8c:	d1f9      	bne.n	800fb82 <_vfiprintf_r+0x96>
 800fb8e:	ebba 0b04 	subs.w	fp, sl, r4
 800fb92:	d00b      	beq.n	800fbac <_vfiprintf_r+0xc0>
 800fb94:	465b      	mov	r3, fp
 800fb96:	4622      	mov	r2, r4
 800fb98:	4629      	mov	r1, r5
 800fb9a:	4630      	mov	r0, r6
 800fb9c:	f7ff ff94 	bl	800fac8 <__sfputs_r>
 800fba0:	3001      	adds	r0, #1
 800fba2:	f000 80aa 	beq.w	800fcfa <_vfiprintf_r+0x20e>
 800fba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fba8:	445a      	add	r2, fp
 800fbaa:	9209      	str	r2, [sp, #36]	; 0x24
 800fbac:	f89a 3000 	ldrb.w	r3, [sl]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f000 80a2 	beq.w	800fcfa <_vfiprintf_r+0x20e>
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbc0:	f10a 0a01 	add.w	sl, sl, #1
 800fbc4:	9304      	str	r3, [sp, #16]
 800fbc6:	9307      	str	r3, [sp, #28]
 800fbc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fbcc:	931a      	str	r3, [sp, #104]	; 0x68
 800fbce:	4654      	mov	r4, sl
 800fbd0:	2205      	movs	r2, #5
 800fbd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbd6:	4858      	ldr	r0, [pc, #352]	; (800fd38 <_vfiprintf_r+0x24c>)
 800fbd8:	f7f0 fb12 	bl	8000200 <memchr>
 800fbdc:	9a04      	ldr	r2, [sp, #16]
 800fbde:	b9d8      	cbnz	r0, 800fc18 <_vfiprintf_r+0x12c>
 800fbe0:	06d1      	lsls	r1, r2, #27
 800fbe2:	bf44      	itt	mi
 800fbe4:	2320      	movmi	r3, #32
 800fbe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbea:	0713      	lsls	r3, r2, #28
 800fbec:	bf44      	itt	mi
 800fbee:	232b      	movmi	r3, #43	; 0x2b
 800fbf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbf4:	f89a 3000 	ldrb.w	r3, [sl]
 800fbf8:	2b2a      	cmp	r3, #42	; 0x2a
 800fbfa:	d015      	beq.n	800fc28 <_vfiprintf_r+0x13c>
 800fbfc:	9a07      	ldr	r2, [sp, #28]
 800fbfe:	4654      	mov	r4, sl
 800fc00:	2000      	movs	r0, #0
 800fc02:	f04f 0c0a 	mov.w	ip, #10
 800fc06:	4621      	mov	r1, r4
 800fc08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc0c:	3b30      	subs	r3, #48	; 0x30
 800fc0e:	2b09      	cmp	r3, #9
 800fc10:	d94e      	bls.n	800fcb0 <_vfiprintf_r+0x1c4>
 800fc12:	b1b0      	cbz	r0, 800fc42 <_vfiprintf_r+0x156>
 800fc14:	9207      	str	r2, [sp, #28]
 800fc16:	e014      	b.n	800fc42 <_vfiprintf_r+0x156>
 800fc18:	eba0 0308 	sub.w	r3, r0, r8
 800fc1c:	fa09 f303 	lsl.w	r3, r9, r3
 800fc20:	4313      	orrs	r3, r2
 800fc22:	9304      	str	r3, [sp, #16]
 800fc24:	46a2      	mov	sl, r4
 800fc26:	e7d2      	b.n	800fbce <_vfiprintf_r+0xe2>
 800fc28:	9b03      	ldr	r3, [sp, #12]
 800fc2a:	1d19      	adds	r1, r3, #4
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	9103      	str	r1, [sp, #12]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	bfbb      	ittet	lt
 800fc34:	425b      	neglt	r3, r3
 800fc36:	f042 0202 	orrlt.w	r2, r2, #2
 800fc3a:	9307      	strge	r3, [sp, #28]
 800fc3c:	9307      	strlt	r3, [sp, #28]
 800fc3e:	bfb8      	it	lt
 800fc40:	9204      	strlt	r2, [sp, #16]
 800fc42:	7823      	ldrb	r3, [r4, #0]
 800fc44:	2b2e      	cmp	r3, #46	; 0x2e
 800fc46:	d10c      	bne.n	800fc62 <_vfiprintf_r+0x176>
 800fc48:	7863      	ldrb	r3, [r4, #1]
 800fc4a:	2b2a      	cmp	r3, #42	; 0x2a
 800fc4c:	d135      	bne.n	800fcba <_vfiprintf_r+0x1ce>
 800fc4e:	9b03      	ldr	r3, [sp, #12]
 800fc50:	1d1a      	adds	r2, r3, #4
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	9203      	str	r2, [sp, #12]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	bfb8      	it	lt
 800fc5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc5e:	3402      	adds	r4, #2
 800fc60:	9305      	str	r3, [sp, #20]
 800fc62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fd48 <_vfiprintf_r+0x25c>
 800fc66:	7821      	ldrb	r1, [r4, #0]
 800fc68:	2203      	movs	r2, #3
 800fc6a:	4650      	mov	r0, sl
 800fc6c:	f7f0 fac8 	bl	8000200 <memchr>
 800fc70:	b140      	cbz	r0, 800fc84 <_vfiprintf_r+0x198>
 800fc72:	2340      	movs	r3, #64	; 0x40
 800fc74:	eba0 000a 	sub.w	r0, r0, sl
 800fc78:	fa03 f000 	lsl.w	r0, r3, r0
 800fc7c:	9b04      	ldr	r3, [sp, #16]
 800fc7e:	4303      	orrs	r3, r0
 800fc80:	3401      	adds	r4, #1
 800fc82:	9304      	str	r3, [sp, #16]
 800fc84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc88:	482c      	ldr	r0, [pc, #176]	; (800fd3c <_vfiprintf_r+0x250>)
 800fc8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc8e:	2206      	movs	r2, #6
 800fc90:	f7f0 fab6 	bl	8000200 <memchr>
 800fc94:	2800      	cmp	r0, #0
 800fc96:	d03f      	beq.n	800fd18 <_vfiprintf_r+0x22c>
 800fc98:	4b29      	ldr	r3, [pc, #164]	; (800fd40 <_vfiprintf_r+0x254>)
 800fc9a:	bb1b      	cbnz	r3, 800fce4 <_vfiprintf_r+0x1f8>
 800fc9c:	9b03      	ldr	r3, [sp, #12]
 800fc9e:	3307      	adds	r3, #7
 800fca0:	f023 0307 	bic.w	r3, r3, #7
 800fca4:	3308      	adds	r3, #8
 800fca6:	9303      	str	r3, [sp, #12]
 800fca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcaa:	443b      	add	r3, r7
 800fcac:	9309      	str	r3, [sp, #36]	; 0x24
 800fcae:	e767      	b.n	800fb80 <_vfiprintf_r+0x94>
 800fcb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800fcb4:	460c      	mov	r4, r1
 800fcb6:	2001      	movs	r0, #1
 800fcb8:	e7a5      	b.n	800fc06 <_vfiprintf_r+0x11a>
 800fcba:	2300      	movs	r3, #0
 800fcbc:	3401      	adds	r4, #1
 800fcbe:	9305      	str	r3, [sp, #20]
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	f04f 0c0a 	mov.w	ip, #10
 800fcc6:	4620      	mov	r0, r4
 800fcc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fccc:	3a30      	subs	r2, #48	; 0x30
 800fcce:	2a09      	cmp	r2, #9
 800fcd0:	d903      	bls.n	800fcda <_vfiprintf_r+0x1ee>
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d0c5      	beq.n	800fc62 <_vfiprintf_r+0x176>
 800fcd6:	9105      	str	r1, [sp, #20]
 800fcd8:	e7c3      	b.n	800fc62 <_vfiprintf_r+0x176>
 800fcda:	fb0c 2101 	mla	r1, ip, r1, r2
 800fcde:	4604      	mov	r4, r0
 800fce0:	2301      	movs	r3, #1
 800fce2:	e7f0      	b.n	800fcc6 <_vfiprintf_r+0x1da>
 800fce4:	ab03      	add	r3, sp, #12
 800fce6:	9300      	str	r3, [sp, #0]
 800fce8:	462a      	mov	r2, r5
 800fcea:	4b16      	ldr	r3, [pc, #88]	; (800fd44 <_vfiprintf_r+0x258>)
 800fcec:	a904      	add	r1, sp, #16
 800fcee:	4630      	mov	r0, r6
 800fcf0:	f3af 8000 	nop.w
 800fcf4:	4607      	mov	r7, r0
 800fcf6:	1c78      	adds	r0, r7, #1
 800fcf8:	d1d6      	bne.n	800fca8 <_vfiprintf_r+0x1bc>
 800fcfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fcfc:	07d9      	lsls	r1, r3, #31
 800fcfe:	d405      	bmi.n	800fd0c <_vfiprintf_r+0x220>
 800fd00:	89ab      	ldrh	r3, [r5, #12]
 800fd02:	059a      	lsls	r2, r3, #22
 800fd04:	d402      	bmi.n	800fd0c <_vfiprintf_r+0x220>
 800fd06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd08:	f7ff fec6 	bl	800fa98 <__retarget_lock_release_recursive>
 800fd0c:	89ab      	ldrh	r3, [r5, #12]
 800fd0e:	065b      	lsls	r3, r3, #25
 800fd10:	f53f af12 	bmi.w	800fb38 <_vfiprintf_r+0x4c>
 800fd14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd16:	e711      	b.n	800fb3c <_vfiprintf_r+0x50>
 800fd18:	ab03      	add	r3, sp, #12
 800fd1a:	9300      	str	r3, [sp, #0]
 800fd1c:	462a      	mov	r2, r5
 800fd1e:	4b09      	ldr	r3, [pc, #36]	; (800fd44 <_vfiprintf_r+0x258>)
 800fd20:	a904      	add	r1, sp, #16
 800fd22:	4630      	mov	r0, r6
 800fd24:	f000 f880 	bl	800fe28 <_printf_i>
 800fd28:	e7e4      	b.n	800fcf4 <_vfiprintf_r+0x208>
 800fd2a:	bf00      	nop
 800fd2c:	08012fec 	.word	0x08012fec
 800fd30:	0801300c 	.word	0x0801300c
 800fd34:	08012fcc 	.word	0x08012fcc
 800fd38:	08012f96 	.word	0x08012f96
 800fd3c:	08012fa0 	.word	0x08012fa0
 800fd40:	00000000 	.word	0x00000000
 800fd44:	0800fac9 	.word	0x0800fac9
 800fd48:	08012f9c 	.word	0x08012f9c

0800fd4c <_printf_common>:
 800fd4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd50:	4616      	mov	r6, r2
 800fd52:	4699      	mov	r9, r3
 800fd54:	688a      	ldr	r2, [r1, #8]
 800fd56:	690b      	ldr	r3, [r1, #16]
 800fd58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	bfb8      	it	lt
 800fd60:	4613      	movlt	r3, r2
 800fd62:	6033      	str	r3, [r6, #0]
 800fd64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fd68:	4607      	mov	r7, r0
 800fd6a:	460c      	mov	r4, r1
 800fd6c:	b10a      	cbz	r2, 800fd72 <_printf_common+0x26>
 800fd6e:	3301      	adds	r3, #1
 800fd70:	6033      	str	r3, [r6, #0]
 800fd72:	6823      	ldr	r3, [r4, #0]
 800fd74:	0699      	lsls	r1, r3, #26
 800fd76:	bf42      	ittt	mi
 800fd78:	6833      	ldrmi	r3, [r6, #0]
 800fd7a:	3302      	addmi	r3, #2
 800fd7c:	6033      	strmi	r3, [r6, #0]
 800fd7e:	6825      	ldr	r5, [r4, #0]
 800fd80:	f015 0506 	ands.w	r5, r5, #6
 800fd84:	d106      	bne.n	800fd94 <_printf_common+0x48>
 800fd86:	f104 0a19 	add.w	sl, r4, #25
 800fd8a:	68e3      	ldr	r3, [r4, #12]
 800fd8c:	6832      	ldr	r2, [r6, #0]
 800fd8e:	1a9b      	subs	r3, r3, r2
 800fd90:	42ab      	cmp	r3, r5
 800fd92:	dc26      	bgt.n	800fde2 <_printf_common+0x96>
 800fd94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fd98:	1e13      	subs	r3, r2, #0
 800fd9a:	6822      	ldr	r2, [r4, #0]
 800fd9c:	bf18      	it	ne
 800fd9e:	2301      	movne	r3, #1
 800fda0:	0692      	lsls	r2, r2, #26
 800fda2:	d42b      	bmi.n	800fdfc <_printf_common+0xb0>
 800fda4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fda8:	4649      	mov	r1, r9
 800fdaa:	4638      	mov	r0, r7
 800fdac:	47c0      	blx	r8
 800fdae:	3001      	adds	r0, #1
 800fdb0:	d01e      	beq.n	800fdf0 <_printf_common+0xa4>
 800fdb2:	6823      	ldr	r3, [r4, #0]
 800fdb4:	68e5      	ldr	r5, [r4, #12]
 800fdb6:	6832      	ldr	r2, [r6, #0]
 800fdb8:	f003 0306 	and.w	r3, r3, #6
 800fdbc:	2b04      	cmp	r3, #4
 800fdbe:	bf08      	it	eq
 800fdc0:	1aad      	subeq	r5, r5, r2
 800fdc2:	68a3      	ldr	r3, [r4, #8]
 800fdc4:	6922      	ldr	r2, [r4, #16]
 800fdc6:	bf0c      	ite	eq
 800fdc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fdcc:	2500      	movne	r5, #0
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	bfc4      	itt	gt
 800fdd2:	1a9b      	subgt	r3, r3, r2
 800fdd4:	18ed      	addgt	r5, r5, r3
 800fdd6:	2600      	movs	r6, #0
 800fdd8:	341a      	adds	r4, #26
 800fdda:	42b5      	cmp	r5, r6
 800fddc:	d11a      	bne.n	800fe14 <_printf_common+0xc8>
 800fdde:	2000      	movs	r0, #0
 800fde0:	e008      	b.n	800fdf4 <_printf_common+0xa8>
 800fde2:	2301      	movs	r3, #1
 800fde4:	4652      	mov	r2, sl
 800fde6:	4649      	mov	r1, r9
 800fde8:	4638      	mov	r0, r7
 800fdea:	47c0      	blx	r8
 800fdec:	3001      	adds	r0, #1
 800fdee:	d103      	bne.n	800fdf8 <_printf_common+0xac>
 800fdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800fdf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdf8:	3501      	adds	r5, #1
 800fdfa:	e7c6      	b.n	800fd8a <_printf_common+0x3e>
 800fdfc:	18e1      	adds	r1, r4, r3
 800fdfe:	1c5a      	adds	r2, r3, #1
 800fe00:	2030      	movs	r0, #48	; 0x30
 800fe02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fe06:	4422      	add	r2, r4
 800fe08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fe0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fe10:	3302      	adds	r3, #2
 800fe12:	e7c7      	b.n	800fda4 <_printf_common+0x58>
 800fe14:	2301      	movs	r3, #1
 800fe16:	4622      	mov	r2, r4
 800fe18:	4649      	mov	r1, r9
 800fe1a:	4638      	mov	r0, r7
 800fe1c:	47c0      	blx	r8
 800fe1e:	3001      	adds	r0, #1
 800fe20:	d0e6      	beq.n	800fdf0 <_printf_common+0xa4>
 800fe22:	3601      	adds	r6, #1
 800fe24:	e7d9      	b.n	800fdda <_printf_common+0x8e>
	...

0800fe28 <_printf_i>:
 800fe28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe2c:	460c      	mov	r4, r1
 800fe2e:	4691      	mov	r9, r2
 800fe30:	7e27      	ldrb	r7, [r4, #24]
 800fe32:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fe34:	2f78      	cmp	r7, #120	; 0x78
 800fe36:	4680      	mov	r8, r0
 800fe38:	469a      	mov	sl, r3
 800fe3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe3e:	d807      	bhi.n	800fe50 <_printf_i+0x28>
 800fe40:	2f62      	cmp	r7, #98	; 0x62
 800fe42:	d80a      	bhi.n	800fe5a <_printf_i+0x32>
 800fe44:	2f00      	cmp	r7, #0
 800fe46:	f000 80d8 	beq.w	800fffa <_printf_i+0x1d2>
 800fe4a:	2f58      	cmp	r7, #88	; 0x58
 800fe4c:	f000 80a3 	beq.w	800ff96 <_printf_i+0x16e>
 800fe50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fe54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fe58:	e03a      	b.n	800fed0 <_printf_i+0xa8>
 800fe5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fe5e:	2b15      	cmp	r3, #21
 800fe60:	d8f6      	bhi.n	800fe50 <_printf_i+0x28>
 800fe62:	a001      	add	r0, pc, #4	; (adr r0, 800fe68 <_printf_i+0x40>)
 800fe64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fe68:	0800fec1 	.word	0x0800fec1
 800fe6c:	0800fed5 	.word	0x0800fed5
 800fe70:	0800fe51 	.word	0x0800fe51
 800fe74:	0800fe51 	.word	0x0800fe51
 800fe78:	0800fe51 	.word	0x0800fe51
 800fe7c:	0800fe51 	.word	0x0800fe51
 800fe80:	0800fed5 	.word	0x0800fed5
 800fe84:	0800fe51 	.word	0x0800fe51
 800fe88:	0800fe51 	.word	0x0800fe51
 800fe8c:	0800fe51 	.word	0x0800fe51
 800fe90:	0800fe51 	.word	0x0800fe51
 800fe94:	0800ffe1 	.word	0x0800ffe1
 800fe98:	0800ff05 	.word	0x0800ff05
 800fe9c:	0800ffc3 	.word	0x0800ffc3
 800fea0:	0800fe51 	.word	0x0800fe51
 800fea4:	0800fe51 	.word	0x0800fe51
 800fea8:	08010003 	.word	0x08010003
 800feac:	0800fe51 	.word	0x0800fe51
 800feb0:	0800ff05 	.word	0x0800ff05
 800feb4:	0800fe51 	.word	0x0800fe51
 800feb8:	0800fe51 	.word	0x0800fe51
 800febc:	0800ffcb 	.word	0x0800ffcb
 800fec0:	680b      	ldr	r3, [r1, #0]
 800fec2:	1d1a      	adds	r2, r3, #4
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	600a      	str	r2, [r1, #0]
 800fec8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fed0:	2301      	movs	r3, #1
 800fed2:	e0a3      	b.n	801001c <_printf_i+0x1f4>
 800fed4:	6825      	ldr	r5, [r4, #0]
 800fed6:	6808      	ldr	r0, [r1, #0]
 800fed8:	062e      	lsls	r6, r5, #24
 800feda:	f100 0304 	add.w	r3, r0, #4
 800fede:	d50a      	bpl.n	800fef6 <_printf_i+0xce>
 800fee0:	6805      	ldr	r5, [r0, #0]
 800fee2:	600b      	str	r3, [r1, #0]
 800fee4:	2d00      	cmp	r5, #0
 800fee6:	da03      	bge.n	800fef0 <_printf_i+0xc8>
 800fee8:	232d      	movs	r3, #45	; 0x2d
 800feea:	426d      	negs	r5, r5
 800feec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fef0:	485e      	ldr	r0, [pc, #376]	; (801006c <_printf_i+0x244>)
 800fef2:	230a      	movs	r3, #10
 800fef4:	e019      	b.n	800ff2a <_printf_i+0x102>
 800fef6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fefa:	6805      	ldr	r5, [r0, #0]
 800fefc:	600b      	str	r3, [r1, #0]
 800fefe:	bf18      	it	ne
 800ff00:	b22d      	sxthne	r5, r5
 800ff02:	e7ef      	b.n	800fee4 <_printf_i+0xbc>
 800ff04:	680b      	ldr	r3, [r1, #0]
 800ff06:	6825      	ldr	r5, [r4, #0]
 800ff08:	1d18      	adds	r0, r3, #4
 800ff0a:	6008      	str	r0, [r1, #0]
 800ff0c:	0628      	lsls	r0, r5, #24
 800ff0e:	d501      	bpl.n	800ff14 <_printf_i+0xec>
 800ff10:	681d      	ldr	r5, [r3, #0]
 800ff12:	e002      	b.n	800ff1a <_printf_i+0xf2>
 800ff14:	0669      	lsls	r1, r5, #25
 800ff16:	d5fb      	bpl.n	800ff10 <_printf_i+0xe8>
 800ff18:	881d      	ldrh	r5, [r3, #0]
 800ff1a:	4854      	ldr	r0, [pc, #336]	; (801006c <_printf_i+0x244>)
 800ff1c:	2f6f      	cmp	r7, #111	; 0x6f
 800ff1e:	bf0c      	ite	eq
 800ff20:	2308      	moveq	r3, #8
 800ff22:	230a      	movne	r3, #10
 800ff24:	2100      	movs	r1, #0
 800ff26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ff2a:	6866      	ldr	r6, [r4, #4]
 800ff2c:	60a6      	str	r6, [r4, #8]
 800ff2e:	2e00      	cmp	r6, #0
 800ff30:	bfa2      	ittt	ge
 800ff32:	6821      	ldrge	r1, [r4, #0]
 800ff34:	f021 0104 	bicge.w	r1, r1, #4
 800ff38:	6021      	strge	r1, [r4, #0]
 800ff3a:	b90d      	cbnz	r5, 800ff40 <_printf_i+0x118>
 800ff3c:	2e00      	cmp	r6, #0
 800ff3e:	d04d      	beq.n	800ffdc <_printf_i+0x1b4>
 800ff40:	4616      	mov	r6, r2
 800ff42:	fbb5 f1f3 	udiv	r1, r5, r3
 800ff46:	fb03 5711 	mls	r7, r3, r1, r5
 800ff4a:	5dc7      	ldrb	r7, [r0, r7]
 800ff4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff50:	462f      	mov	r7, r5
 800ff52:	42bb      	cmp	r3, r7
 800ff54:	460d      	mov	r5, r1
 800ff56:	d9f4      	bls.n	800ff42 <_printf_i+0x11a>
 800ff58:	2b08      	cmp	r3, #8
 800ff5a:	d10b      	bne.n	800ff74 <_printf_i+0x14c>
 800ff5c:	6823      	ldr	r3, [r4, #0]
 800ff5e:	07df      	lsls	r7, r3, #31
 800ff60:	d508      	bpl.n	800ff74 <_printf_i+0x14c>
 800ff62:	6923      	ldr	r3, [r4, #16]
 800ff64:	6861      	ldr	r1, [r4, #4]
 800ff66:	4299      	cmp	r1, r3
 800ff68:	bfde      	ittt	le
 800ff6a:	2330      	movle	r3, #48	; 0x30
 800ff6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff70:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff74:	1b92      	subs	r2, r2, r6
 800ff76:	6122      	str	r2, [r4, #16]
 800ff78:	f8cd a000 	str.w	sl, [sp]
 800ff7c:	464b      	mov	r3, r9
 800ff7e:	aa03      	add	r2, sp, #12
 800ff80:	4621      	mov	r1, r4
 800ff82:	4640      	mov	r0, r8
 800ff84:	f7ff fee2 	bl	800fd4c <_printf_common>
 800ff88:	3001      	adds	r0, #1
 800ff8a:	d14c      	bne.n	8010026 <_printf_i+0x1fe>
 800ff8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff90:	b004      	add	sp, #16
 800ff92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff96:	4835      	ldr	r0, [pc, #212]	; (801006c <_printf_i+0x244>)
 800ff98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ff9c:	6823      	ldr	r3, [r4, #0]
 800ff9e:	680e      	ldr	r6, [r1, #0]
 800ffa0:	061f      	lsls	r7, r3, #24
 800ffa2:	f856 5b04 	ldr.w	r5, [r6], #4
 800ffa6:	600e      	str	r6, [r1, #0]
 800ffa8:	d514      	bpl.n	800ffd4 <_printf_i+0x1ac>
 800ffaa:	07d9      	lsls	r1, r3, #31
 800ffac:	bf44      	itt	mi
 800ffae:	f043 0320 	orrmi.w	r3, r3, #32
 800ffb2:	6023      	strmi	r3, [r4, #0]
 800ffb4:	b91d      	cbnz	r5, 800ffbe <_printf_i+0x196>
 800ffb6:	6823      	ldr	r3, [r4, #0]
 800ffb8:	f023 0320 	bic.w	r3, r3, #32
 800ffbc:	6023      	str	r3, [r4, #0]
 800ffbe:	2310      	movs	r3, #16
 800ffc0:	e7b0      	b.n	800ff24 <_printf_i+0xfc>
 800ffc2:	6823      	ldr	r3, [r4, #0]
 800ffc4:	f043 0320 	orr.w	r3, r3, #32
 800ffc8:	6023      	str	r3, [r4, #0]
 800ffca:	2378      	movs	r3, #120	; 0x78
 800ffcc:	4828      	ldr	r0, [pc, #160]	; (8010070 <_printf_i+0x248>)
 800ffce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ffd2:	e7e3      	b.n	800ff9c <_printf_i+0x174>
 800ffd4:	065e      	lsls	r6, r3, #25
 800ffd6:	bf48      	it	mi
 800ffd8:	b2ad      	uxthmi	r5, r5
 800ffda:	e7e6      	b.n	800ffaa <_printf_i+0x182>
 800ffdc:	4616      	mov	r6, r2
 800ffde:	e7bb      	b.n	800ff58 <_printf_i+0x130>
 800ffe0:	680b      	ldr	r3, [r1, #0]
 800ffe2:	6826      	ldr	r6, [r4, #0]
 800ffe4:	6960      	ldr	r0, [r4, #20]
 800ffe6:	1d1d      	adds	r5, r3, #4
 800ffe8:	600d      	str	r5, [r1, #0]
 800ffea:	0635      	lsls	r5, r6, #24
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	d501      	bpl.n	800fff4 <_printf_i+0x1cc>
 800fff0:	6018      	str	r0, [r3, #0]
 800fff2:	e002      	b.n	800fffa <_printf_i+0x1d2>
 800fff4:	0671      	lsls	r1, r6, #25
 800fff6:	d5fb      	bpl.n	800fff0 <_printf_i+0x1c8>
 800fff8:	8018      	strh	r0, [r3, #0]
 800fffa:	2300      	movs	r3, #0
 800fffc:	6123      	str	r3, [r4, #16]
 800fffe:	4616      	mov	r6, r2
 8010000:	e7ba      	b.n	800ff78 <_printf_i+0x150>
 8010002:	680b      	ldr	r3, [r1, #0]
 8010004:	1d1a      	adds	r2, r3, #4
 8010006:	600a      	str	r2, [r1, #0]
 8010008:	681e      	ldr	r6, [r3, #0]
 801000a:	6862      	ldr	r2, [r4, #4]
 801000c:	2100      	movs	r1, #0
 801000e:	4630      	mov	r0, r6
 8010010:	f7f0 f8f6 	bl	8000200 <memchr>
 8010014:	b108      	cbz	r0, 801001a <_printf_i+0x1f2>
 8010016:	1b80      	subs	r0, r0, r6
 8010018:	6060      	str	r0, [r4, #4]
 801001a:	6863      	ldr	r3, [r4, #4]
 801001c:	6123      	str	r3, [r4, #16]
 801001e:	2300      	movs	r3, #0
 8010020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010024:	e7a8      	b.n	800ff78 <_printf_i+0x150>
 8010026:	6923      	ldr	r3, [r4, #16]
 8010028:	4632      	mov	r2, r6
 801002a:	4649      	mov	r1, r9
 801002c:	4640      	mov	r0, r8
 801002e:	47d0      	blx	sl
 8010030:	3001      	adds	r0, #1
 8010032:	d0ab      	beq.n	800ff8c <_printf_i+0x164>
 8010034:	6823      	ldr	r3, [r4, #0]
 8010036:	079b      	lsls	r3, r3, #30
 8010038:	d413      	bmi.n	8010062 <_printf_i+0x23a>
 801003a:	68e0      	ldr	r0, [r4, #12]
 801003c:	9b03      	ldr	r3, [sp, #12]
 801003e:	4298      	cmp	r0, r3
 8010040:	bfb8      	it	lt
 8010042:	4618      	movlt	r0, r3
 8010044:	e7a4      	b.n	800ff90 <_printf_i+0x168>
 8010046:	2301      	movs	r3, #1
 8010048:	4632      	mov	r2, r6
 801004a:	4649      	mov	r1, r9
 801004c:	4640      	mov	r0, r8
 801004e:	47d0      	blx	sl
 8010050:	3001      	adds	r0, #1
 8010052:	d09b      	beq.n	800ff8c <_printf_i+0x164>
 8010054:	3501      	adds	r5, #1
 8010056:	68e3      	ldr	r3, [r4, #12]
 8010058:	9903      	ldr	r1, [sp, #12]
 801005a:	1a5b      	subs	r3, r3, r1
 801005c:	42ab      	cmp	r3, r5
 801005e:	dcf2      	bgt.n	8010046 <_printf_i+0x21e>
 8010060:	e7eb      	b.n	801003a <_printf_i+0x212>
 8010062:	2500      	movs	r5, #0
 8010064:	f104 0619 	add.w	r6, r4, #25
 8010068:	e7f5      	b.n	8010056 <_printf_i+0x22e>
 801006a:	bf00      	nop
 801006c:	08012fa7 	.word	0x08012fa7
 8010070:	08012fb8 	.word	0x08012fb8

08010074 <__swbuf_r>:
 8010074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010076:	460e      	mov	r6, r1
 8010078:	4614      	mov	r4, r2
 801007a:	4605      	mov	r5, r0
 801007c:	b118      	cbz	r0, 8010086 <__swbuf_r+0x12>
 801007e:	6983      	ldr	r3, [r0, #24]
 8010080:	b90b      	cbnz	r3, 8010086 <__swbuf_r+0x12>
 8010082:	f000 f9d9 	bl	8010438 <__sinit>
 8010086:	4b21      	ldr	r3, [pc, #132]	; (801010c <__swbuf_r+0x98>)
 8010088:	429c      	cmp	r4, r3
 801008a:	d12b      	bne.n	80100e4 <__swbuf_r+0x70>
 801008c:	686c      	ldr	r4, [r5, #4]
 801008e:	69a3      	ldr	r3, [r4, #24]
 8010090:	60a3      	str	r3, [r4, #8]
 8010092:	89a3      	ldrh	r3, [r4, #12]
 8010094:	071a      	lsls	r2, r3, #28
 8010096:	d52f      	bpl.n	80100f8 <__swbuf_r+0x84>
 8010098:	6923      	ldr	r3, [r4, #16]
 801009a:	b36b      	cbz	r3, 80100f8 <__swbuf_r+0x84>
 801009c:	6923      	ldr	r3, [r4, #16]
 801009e:	6820      	ldr	r0, [r4, #0]
 80100a0:	1ac0      	subs	r0, r0, r3
 80100a2:	6963      	ldr	r3, [r4, #20]
 80100a4:	b2f6      	uxtb	r6, r6
 80100a6:	4283      	cmp	r3, r0
 80100a8:	4637      	mov	r7, r6
 80100aa:	dc04      	bgt.n	80100b6 <__swbuf_r+0x42>
 80100ac:	4621      	mov	r1, r4
 80100ae:	4628      	mov	r0, r5
 80100b0:	f000 f92e 	bl	8010310 <_fflush_r>
 80100b4:	bb30      	cbnz	r0, 8010104 <__swbuf_r+0x90>
 80100b6:	68a3      	ldr	r3, [r4, #8]
 80100b8:	3b01      	subs	r3, #1
 80100ba:	60a3      	str	r3, [r4, #8]
 80100bc:	6823      	ldr	r3, [r4, #0]
 80100be:	1c5a      	adds	r2, r3, #1
 80100c0:	6022      	str	r2, [r4, #0]
 80100c2:	701e      	strb	r6, [r3, #0]
 80100c4:	6963      	ldr	r3, [r4, #20]
 80100c6:	3001      	adds	r0, #1
 80100c8:	4283      	cmp	r3, r0
 80100ca:	d004      	beq.n	80100d6 <__swbuf_r+0x62>
 80100cc:	89a3      	ldrh	r3, [r4, #12]
 80100ce:	07db      	lsls	r3, r3, #31
 80100d0:	d506      	bpl.n	80100e0 <__swbuf_r+0x6c>
 80100d2:	2e0a      	cmp	r6, #10
 80100d4:	d104      	bne.n	80100e0 <__swbuf_r+0x6c>
 80100d6:	4621      	mov	r1, r4
 80100d8:	4628      	mov	r0, r5
 80100da:	f000 f919 	bl	8010310 <_fflush_r>
 80100de:	b988      	cbnz	r0, 8010104 <__swbuf_r+0x90>
 80100e0:	4638      	mov	r0, r7
 80100e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100e4:	4b0a      	ldr	r3, [pc, #40]	; (8010110 <__swbuf_r+0x9c>)
 80100e6:	429c      	cmp	r4, r3
 80100e8:	d101      	bne.n	80100ee <__swbuf_r+0x7a>
 80100ea:	68ac      	ldr	r4, [r5, #8]
 80100ec:	e7cf      	b.n	801008e <__swbuf_r+0x1a>
 80100ee:	4b09      	ldr	r3, [pc, #36]	; (8010114 <__swbuf_r+0xa0>)
 80100f0:	429c      	cmp	r4, r3
 80100f2:	bf08      	it	eq
 80100f4:	68ec      	ldreq	r4, [r5, #12]
 80100f6:	e7ca      	b.n	801008e <__swbuf_r+0x1a>
 80100f8:	4621      	mov	r1, r4
 80100fa:	4628      	mov	r0, r5
 80100fc:	f000 f80c 	bl	8010118 <__swsetup_r>
 8010100:	2800      	cmp	r0, #0
 8010102:	d0cb      	beq.n	801009c <__swbuf_r+0x28>
 8010104:	f04f 37ff 	mov.w	r7, #4294967295
 8010108:	e7ea      	b.n	80100e0 <__swbuf_r+0x6c>
 801010a:	bf00      	nop
 801010c:	08012fec 	.word	0x08012fec
 8010110:	0801300c 	.word	0x0801300c
 8010114:	08012fcc 	.word	0x08012fcc

08010118 <__swsetup_r>:
 8010118:	4b32      	ldr	r3, [pc, #200]	; (80101e4 <__swsetup_r+0xcc>)
 801011a:	b570      	push	{r4, r5, r6, lr}
 801011c:	681d      	ldr	r5, [r3, #0]
 801011e:	4606      	mov	r6, r0
 8010120:	460c      	mov	r4, r1
 8010122:	b125      	cbz	r5, 801012e <__swsetup_r+0x16>
 8010124:	69ab      	ldr	r3, [r5, #24]
 8010126:	b913      	cbnz	r3, 801012e <__swsetup_r+0x16>
 8010128:	4628      	mov	r0, r5
 801012a:	f000 f985 	bl	8010438 <__sinit>
 801012e:	4b2e      	ldr	r3, [pc, #184]	; (80101e8 <__swsetup_r+0xd0>)
 8010130:	429c      	cmp	r4, r3
 8010132:	d10f      	bne.n	8010154 <__swsetup_r+0x3c>
 8010134:	686c      	ldr	r4, [r5, #4]
 8010136:	89a3      	ldrh	r3, [r4, #12]
 8010138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801013c:	0719      	lsls	r1, r3, #28
 801013e:	d42c      	bmi.n	801019a <__swsetup_r+0x82>
 8010140:	06dd      	lsls	r5, r3, #27
 8010142:	d411      	bmi.n	8010168 <__swsetup_r+0x50>
 8010144:	2309      	movs	r3, #9
 8010146:	6033      	str	r3, [r6, #0]
 8010148:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801014c:	81a3      	strh	r3, [r4, #12]
 801014e:	f04f 30ff 	mov.w	r0, #4294967295
 8010152:	e03e      	b.n	80101d2 <__swsetup_r+0xba>
 8010154:	4b25      	ldr	r3, [pc, #148]	; (80101ec <__swsetup_r+0xd4>)
 8010156:	429c      	cmp	r4, r3
 8010158:	d101      	bne.n	801015e <__swsetup_r+0x46>
 801015a:	68ac      	ldr	r4, [r5, #8]
 801015c:	e7eb      	b.n	8010136 <__swsetup_r+0x1e>
 801015e:	4b24      	ldr	r3, [pc, #144]	; (80101f0 <__swsetup_r+0xd8>)
 8010160:	429c      	cmp	r4, r3
 8010162:	bf08      	it	eq
 8010164:	68ec      	ldreq	r4, [r5, #12]
 8010166:	e7e6      	b.n	8010136 <__swsetup_r+0x1e>
 8010168:	0758      	lsls	r0, r3, #29
 801016a:	d512      	bpl.n	8010192 <__swsetup_r+0x7a>
 801016c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801016e:	b141      	cbz	r1, 8010182 <__swsetup_r+0x6a>
 8010170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010174:	4299      	cmp	r1, r3
 8010176:	d002      	beq.n	801017e <__swsetup_r+0x66>
 8010178:	4630      	mov	r0, r6
 801017a:	f7fe f821 	bl	800e1c0 <_free_r>
 801017e:	2300      	movs	r3, #0
 8010180:	6363      	str	r3, [r4, #52]	; 0x34
 8010182:	89a3      	ldrh	r3, [r4, #12]
 8010184:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010188:	81a3      	strh	r3, [r4, #12]
 801018a:	2300      	movs	r3, #0
 801018c:	6063      	str	r3, [r4, #4]
 801018e:	6923      	ldr	r3, [r4, #16]
 8010190:	6023      	str	r3, [r4, #0]
 8010192:	89a3      	ldrh	r3, [r4, #12]
 8010194:	f043 0308 	orr.w	r3, r3, #8
 8010198:	81a3      	strh	r3, [r4, #12]
 801019a:	6923      	ldr	r3, [r4, #16]
 801019c:	b94b      	cbnz	r3, 80101b2 <__swsetup_r+0x9a>
 801019e:	89a3      	ldrh	r3, [r4, #12]
 80101a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80101a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101a8:	d003      	beq.n	80101b2 <__swsetup_r+0x9a>
 80101aa:	4621      	mov	r1, r4
 80101ac:	4630      	mov	r0, r6
 80101ae:	f000 fa05 	bl	80105bc <__smakebuf_r>
 80101b2:	89a0      	ldrh	r0, [r4, #12]
 80101b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101b8:	f010 0301 	ands.w	r3, r0, #1
 80101bc:	d00a      	beq.n	80101d4 <__swsetup_r+0xbc>
 80101be:	2300      	movs	r3, #0
 80101c0:	60a3      	str	r3, [r4, #8]
 80101c2:	6963      	ldr	r3, [r4, #20]
 80101c4:	425b      	negs	r3, r3
 80101c6:	61a3      	str	r3, [r4, #24]
 80101c8:	6923      	ldr	r3, [r4, #16]
 80101ca:	b943      	cbnz	r3, 80101de <__swsetup_r+0xc6>
 80101cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80101d0:	d1ba      	bne.n	8010148 <__swsetup_r+0x30>
 80101d2:	bd70      	pop	{r4, r5, r6, pc}
 80101d4:	0781      	lsls	r1, r0, #30
 80101d6:	bf58      	it	pl
 80101d8:	6963      	ldrpl	r3, [r4, #20]
 80101da:	60a3      	str	r3, [r4, #8]
 80101dc:	e7f4      	b.n	80101c8 <__swsetup_r+0xb0>
 80101de:	2000      	movs	r0, #0
 80101e0:	e7f7      	b.n	80101d2 <__swsetup_r+0xba>
 80101e2:	bf00      	nop
 80101e4:	20000040 	.word	0x20000040
 80101e8:	08012fec 	.word	0x08012fec
 80101ec:	0801300c 	.word	0x0801300c
 80101f0:	08012fcc 	.word	0x08012fcc

080101f4 <abort>:
 80101f4:	b508      	push	{r3, lr}
 80101f6:	2006      	movs	r0, #6
 80101f8:	f000 fa48 	bl	801068c <raise>
 80101fc:	2001      	movs	r0, #1
 80101fe:	f7f2 fba9 	bl	8002954 <_exit>
	...

08010204 <__sflush_r>:
 8010204:	898a      	ldrh	r2, [r1, #12]
 8010206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801020a:	4605      	mov	r5, r0
 801020c:	0710      	lsls	r0, r2, #28
 801020e:	460c      	mov	r4, r1
 8010210:	d458      	bmi.n	80102c4 <__sflush_r+0xc0>
 8010212:	684b      	ldr	r3, [r1, #4]
 8010214:	2b00      	cmp	r3, #0
 8010216:	dc05      	bgt.n	8010224 <__sflush_r+0x20>
 8010218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801021a:	2b00      	cmp	r3, #0
 801021c:	dc02      	bgt.n	8010224 <__sflush_r+0x20>
 801021e:	2000      	movs	r0, #0
 8010220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010226:	2e00      	cmp	r6, #0
 8010228:	d0f9      	beq.n	801021e <__sflush_r+0x1a>
 801022a:	2300      	movs	r3, #0
 801022c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010230:	682f      	ldr	r7, [r5, #0]
 8010232:	602b      	str	r3, [r5, #0]
 8010234:	d032      	beq.n	801029c <__sflush_r+0x98>
 8010236:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010238:	89a3      	ldrh	r3, [r4, #12]
 801023a:	075a      	lsls	r2, r3, #29
 801023c:	d505      	bpl.n	801024a <__sflush_r+0x46>
 801023e:	6863      	ldr	r3, [r4, #4]
 8010240:	1ac0      	subs	r0, r0, r3
 8010242:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010244:	b10b      	cbz	r3, 801024a <__sflush_r+0x46>
 8010246:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010248:	1ac0      	subs	r0, r0, r3
 801024a:	2300      	movs	r3, #0
 801024c:	4602      	mov	r2, r0
 801024e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010250:	6a21      	ldr	r1, [r4, #32]
 8010252:	4628      	mov	r0, r5
 8010254:	47b0      	blx	r6
 8010256:	1c43      	adds	r3, r0, #1
 8010258:	89a3      	ldrh	r3, [r4, #12]
 801025a:	d106      	bne.n	801026a <__sflush_r+0x66>
 801025c:	6829      	ldr	r1, [r5, #0]
 801025e:	291d      	cmp	r1, #29
 8010260:	d82c      	bhi.n	80102bc <__sflush_r+0xb8>
 8010262:	4a2a      	ldr	r2, [pc, #168]	; (801030c <__sflush_r+0x108>)
 8010264:	40ca      	lsrs	r2, r1
 8010266:	07d6      	lsls	r6, r2, #31
 8010268:	d528      	bpl.n	80102bc <__sflush_r+0xb8>
 801026a:	2200      	movs	r2, #0
 801026c:	6062      	str	r2, [r4, #4]
 801026e:	04d9      	lsls	r1, r3, #19
 8010270:	6922      	ldr	r2, [r4, #16]
 8010272:	6022      	str	r2, [r4, #0]
 8010274:	d504      	bpl.n	8010280 <__sflush_r+0x7c>
 8010276:	1c42      	adds	r2, r0, #1
 8010278:	d101      	bne.n	801027e <__sflush_r+0x7a>
 801027a:	682b      	ldr	r3, [r5, #0]
 801027c:	b903      	cbnz	r3, 8010280 <__sflush_r+0x7c>
 801027e:	6560      	str	r0, [r4, #84]	; 0x54
 8010280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010282:	602f      	str	r7, [r5, #0]
 8010284:	2900      	cmp	r1, #0
 8010286:	d0ca      	beq.n	801021e <__sflush_r+0x1a>
 8010288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801028c:	4299      	cmp	r1, r3
 801028e:	d002      	beq.n	8010296 <__sflush_r+0x92>
 8010290:	4628      	mov	r0, r5
 8010292:	f7fd ff95 	bl	800e1c0 <_free_r>
 8010296:	2000      	movs	r0, #0
 8010298:	6360      	str	r0, [r4, #52]	; 0x34
 801029a:	e7c1      	b.n	8010220 <__sflush_r+0x1c>
 801029c:	6a21      	ldr	r1, [r4, #32]
 801029e:	2301      	movs	r3, #1
 80102a0:	4628      	mov	r0, r5
 80102a2:	47b0      	blx	r6
 80102a4:	1c41      	adds	r1, r0, #1
 80102a6:	d1c7      	bne.n	8010238 <__sflush_r+0x34>
 80102a8:	682b      	ldr	r3, [r5, #0]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d0c4      	beq.n	8010238 <__sflush_r+0x34>
 80102ae:	2b1d      	cmp	r3, #29
 80102b0:	d001      	beq.n	80102b6 <__sflush_r+0xb2>
 80102b2:	2b16      	cmp	r3, #22
 80102b4:	d101      	bne.n	80102ba <__sflush_r+0xb6>
 80102b6:	602f      	str	r7, [r5, #0]
 80102b8:	e7b1      	b.n	801021e <__sflush_r+0x1a>
 80102ba:	89a3      	ldrh	r3, [r4, #12]
 80102bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102c0:	81a3      	strh	r3, [r4, #12]
 80102c2:	e7ad      	b.n	8010220 <__sflush_r+0x1c>
 80102c4:	690f      	ldr	r7, [r1, #16]
 80102c6:	2f00      	cmp	r7, #0
 80102c8:	d0a9      	beq.n	801021e <__sflush_r+0x1a>
 80102ca:	0793      	lsls	r3, r2, #30
 80102cc:	680e      	ldr	r6, [r1, #0]
 80102ce:	bf08      	it	eq
 80102d0:	694b      	ldreq	r3, [r1, #20]
 80102d2:	600f      	str	r7, [r1, #0]
 80102d4:	bf18      	it	ne
 80102d6:	2300      	movne	r3, #0
 80102d8:	eba6 0807 	sub.w	r8, r6, r7
 80102dc:	608b      	str	r3, [r1, #8]
 80102de:	f1b8 0f00 	cmp.w	r8, #0
 80102e2:	dd9c      	ble.n	801021e <__sflush_r+0x1a>
 80102e4:	6a21      	ldr	r1, [r4, #32]
 80102e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80102e8:	4643      	mov	r3, r8
 80102ea:	463a      	mov	r2, r7
 80102ec:	4628      	mov	r0, r5
 80102ee:	47b0      	blx	r6
 80102f0:	2800      	cmp	r0, #0
 80102f2:	dc06      	bgt.n	8010302 <__sflush_r+0xfe>
 80102f4:	89a3      	ldrh	r3, [r4, #12]
 80102f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102fa:	81a3      	strh	r3, [r4, #12]
 80102fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010300:	e78e      	b.n	8010220 <__sflush_r+0x1c>
 8010302:	4407      	add	r7, r0
 8010304:	eba8 0800 	sub.w	r8, r8, r0
 8010308:	e7e9      	b.n	80102de <__sflush_r+0xda>
 801030a:	bf00      	nop
 801030c:	20400001 	.word	0x20400001

08010310 <_fflush_r>:
 8010310:	b538      	push	{r3, r4, r5, lr}
 8010312:	690b      	ldr	r3, [r1, #16]
 8010314:	4605      	mov	r5, r0
 8010316:	460c      	mov	r4, r1
 8010318:	b913      	cbnz	r3, 8010320 <_fflush_r+0x10>
 801031a:	2500      	movs	r5, #0
 801031c:	4628      	mov	r0, r5
 801031e:	bd38      	pop	{r3, r4, r5, pc}
 8010320:	b118      	cbz	r0, 801032a <_fflush_r+0x1a>
 8010322:	6983      	ldr	r3, [r0, #24]
 8010324:	b90b      	cbnz	r3, 801032a <_fflush_r+0x1a>
 8010326:	f000 f887 	bl	8010438 <__sinit>
 801032a:	4b14      	ldr	r3, [pc, #80]	; (801037c <_fflush_r+0x6c>)
 801032c:	429c      	cmp	r4, r3
 801032e:	d11b      	bne.n	8010368 <_fflush_r+0x58>
 8010330:	686c      	ldr	r4, [r5, #4]
 8010332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d0ef      	beq.n	801031a <_fflush_r+0xa>
 801033a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801033c:	07d0      	lsls	r0, r2, #31
 801033e:	d404      	bmi.n	801034a <_fflush_r+0x3a>
 8010340:	0599      	lsls	r1, r3, #22
 8010342:	d402      	bmi.n	801034a <_fflush_r+0x3a>
 8010344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010346:	f7ff fba6 	bl	800fa96 <__retarget_lock_acquire_recursive>
 801034a:	4628      	mov	r0, r5
 801034c:	4621      	mov	r1, r4
 801034e:	f7ff ff59 	bl	8010204 <__sflush_r>
 8010352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010354:	07da      	lsls	r2, r3, #31
 8010356:	4605      	mov	r5, r0
 8010358:	d4e0      	bmi.n	801031c <_fflush_r+0xc>
 801035a:	89a3      	ldrh	r3, [r4, #12]
 801035c:	059b      	lsls	r3, r3, #22
 801035e:	d4dd      	bmi.n	801031c <_fflush_r+0xc>
 8010360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010362:	f7ff fb99 	bl	800fa98 <__retarget_lock_release_recursive>
 8010366:	e7d9      	b.n	801031c <_fflush_r+0xc>
 8010368:	4b05      	ldr	r3, [pc, #20]	; (8010380 <_fflush_r+0x70>)
 801036a:	429c      	cmp	r4, r3
 801036c:	d101      	bne.n	8010372 <_fflush_r+0x62>
 801036e:	68ac      	ldr	r4, [r5, #8]
 8010370:	e7df      	b.n	8010332 <_fflush_r+0x22>
 8010372:	4b04      	ldr	r3, [pc, #16]	; (8010384 <_fflush_r+0x74>)
 8010374:	429c      	cmp	r4, r3
 8010376:	bf08      	it	eq
 8010378:	68ec      	ldreq	r4, [r5, #12]
 801037a:	e7da      	b.n	8010332 <_fflush_r+0x22>
 801037c:	08012fec 	.word	0x08012fec
 8010380:	0801300c 	.word	0x0801300c
 8010384:	08012fcc 	.word	0x08012fcc

08010388 <std>:
 8010388:	2300      	movs	r3, #0
 801038a:	b510      	push	{r4, lr}
 801038c:	4604      	mov	r4, r0
 801038e:	e9c0 3300 	strd	r3, r3, [r0]
 8010392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010396:	6083      	str	r3, [r0, #8]
 8010398:	8181      	strh	r1, [r0, #12]
 801039a:	6643      	str	r3, [r0, #100]	; 0x64
 801039c:	81c2      	strh	r2, [r0, #14]
 801039e:	6183      	str	r3, [r0, #24]
 80103a0:	4619      	mov	r1, r3
 80103a2:	2208      	movs	r2, #8
 80103a4:	305c      	adds	r0, #92	; 0x5c
 80103a6:	f7fd ff03 	bl	800e1b0 <memset>
 80103aa:	4b05      	ldr	r3, [pc, #20]	; (80103c0 <std+0x38>)
 80103ac:	6263      	str	r3, [r4, #36]	; 0x24
 80103ae:	4b05      	ldr	r3, [pc, #20]	; (80103c4 <std+0x3c>)
 80103b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80103b2:	4b05      	ldr	r3, [pc, #20]	; (80103c8 <std+0x40>)
 80103b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80103b6:	4b05      	ldr	r3, [pc, #20]	; (80103cc <std+0x44>)
 80103b8:	6224      	str	r4, [r4, #32]
 80103ba:	6323      	str	r3, [r4, #48]	; 0x30
 80103bc:	bd10      	pop	{r4, pc}
 80103be:	bf00      	nop
 80103c0:	080106c5 	.word	0x080106c5
 80103c4:	080106e7 	.word	0x080106e7
 80103c8:	0801071f 	.word	0x0801071f
 80103cc:	08010743 	.word	0x08010743

080103d0 <_cleanup_r>:
 80103d0:	4901      	ldr	r1, [pc, #4]	; (80103d8 <_cleanup_r+0x8>)
 80103d2:	f000 b8af 	b.w	8010534 <_fwalk_reent>
 80103d6:	bf00      	nop
 80103d8:	08010311 	.word	0x08010311

080103dc <__sfmoreglue>:
 80103dc:	b570      	push	{r4, r5, r6, lr}
 80103de:	1e4a      	subs	r2, r1, #1
 80103e0:	2568      	movs	r5, #104	; 0x68
 80103e2:	4355      	muls	r5, r2
 80103e4:	460e      	mov	r6, r1
 80103e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80103ea:	f7fd ff39 	bl	800e260 <_malloc_r>
 80103ee:	4604      	mov	r4, r0
 80103f0:	b140      	cbz	r0, 8010404 <__sfmoreglue+0x28>
 80103f2:	2100      	movs	r1, #0
 80103f4:	e9c0 1600 	strd	r1, r6, [r0]
 80103f8:	300c      	adds	r0, #12
 80103fa:	60a0      	str	r0, [r4, #8]
 80103fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010400:	f7fd fed6 	bl	800e1b0 <memset>
 8010404:	4620      	mov	r0, r4
 8010406:	bd70      	pop	{r4, r5, r6, pc}

08010408 <__sfp_lock_acquire>:
 8010408:	4801      	ldr	r0, [pc, #4]	; (8010410 <__sfp_lock_acquire+0x8>)
 801040a:	f7ff bb44 	b.w	800fa96 <__retarget_lock_acquire_recursive>
 801040e:	bf00      	nop
 8010410:	20008c60 	.word	0x20008c60

08010414 <__sfp_lock_release>:
 8010414:	4801      	ldr	r0, [pc, #4]	; (801041c <__sfp_lock_release+0x8>)
 8010416:	f7ff bb3f 	b.w	800fa98 <__retarget_lock_release_recursive>
 801041a:	bf00      	nop
 801041c:	20008c60 	.word	0x20008c60

08010420 <__sinit_lock_acquire>:
 8010420:	4801      	ldr	r0, [pc, #4]	; (8010428 <__sinit_lock_acquire+0x8>)
 8010422:	f7ff bb38 	b.w	800fa96 <__retarget_lock_acquire_recursive>
 8010426:	bf00      	nop
 8010428:	20008c5b 	.word	0x20008c5b

0801042c <__sinit_lock_release>:
 801042c:	4801      	ldr	r0, [pc, #4]	; (8010434 <__sinit_lock_release+0x8>)
 801042e:	f7ff bb33 	b.w	800fa98 <__retarget_lock_release_recursive>
 8010432:	bf00      	nop
 8010434:	20008c5b 	.word	0x20008c5b

08010438 <__sinit>:
 8010438:	b510      	push	{r4, lr}
 801043a:	4604      	mov	r4, r0
 801043c:	f7ff fff0 	bl	8010420 <__sinit_lock_acquire>
 8010440:	69a3      	ldr	r3, [r4, #24]
 8010442:	b11b      	cbz	r3, 801044c <__sinit+0x14>
 8010444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010448:	f7ff bff0 	b.w	801042c <__sinit_lock_release>
 801044c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010450:	6523      	str	r3, [r4, #80]	; 0x50
 8010452:	4b13      	ldr	r3, [pc, #76]	; (80104a0 <__sinit+0x68>)
 8010454:	4a13      	ldr	r2, [pc, #76]	; (80104a4 <__sinit+0x6c>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	62a2      	str	r2, [r4, #40]	; 0x28
 801045a:	42a3      	cmp	r3, r4
 801045c:	bf04      	itt	eq
 801045e:	2301      	moveq	r3, #1
 8010460:	61a3      	streq	r3, [r4, #24]
 8010462:	4620      	mov	r0, r4
 8010464:	f000 f820 	bl	80104a8 <__sfp>
 8010468:	6060      	str	r0, [r4, #4]
 801046a:	4620      	mov	r0, r4
 801046c:	f000 f81c 	bl	80104a8 <__sfp>
 8010470:	60a0      	str	r0, [r4, #8]
 8010472:	4620      	mov	r0, r4
 8010474:	f000 f818 	bl	80104a8 <__sfp>
 8010478:	2200      	movs	r2, #0
 801047a:	60e0      	str	r0, [r4, #12]
 801047c:	2104      	movs	r1, #4
 801047e:	6860      	ldr	r0, [r4, #4]
 8010480:	f7ff ff82 	bl	8010388 <std>
 8010484:	68a0      	ldr	r0, [r4, #8]
 8010486:	2201      	movs	r2, #1
 8010488:	2109      	movs	r1, #9
 801048a:	f7ff ff7d 	bl	8010388 <std>
 801048e:	68e0      	ldr	r0, [r4, #12]
 8010490:	2202      	movs	r2, #2
 8010492:	2112      	movs	r1, #18
 8010494:	f7ff ff78 	bl	8010388 <std>
 8010498:	2301      	movs	r3, #1
 801049a:	61a3      	str	r3, [r4, #24]
 801049c:	e7d2      	b.n	8010444 <__sinit+0xc>
 801049e:	bf00      	nop
 80104a0:	08012d64 	.word	0x08012d64
 80104a4:	080103d1 	.word	0x080103d1

080104a8 <__sfp>:
 80104a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104aa:	4607      	mov	r7, r0
 80104ac:	f7ff ffac 	bl	8010408 <__sfp_lock_acquire>
 80104b0:	4b1e      	ldr	r3, [pc, #120]	; (801052c <__sfp+0x84>)
 80104b2:	681e      	ldr	r6, [r3, #0]
 80104b4:	69b3      	ldr	r3, [r6, #24]
 80104b6:	b913      	cbnz	r3, 80104be <__sfp+0x16>
 80104b8:	4630      	mov	r0, r6
 80104ba:	f7ff ffbd 	bl	8010438 <__sinit>
 80104be:	3648      	adds	r6, #72	; 0x48
 80104c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80104c4:	3b01      	subs	r3, #1
 80104c6:	d503      	bpl.n	80104d0 <__sfp+0x28>
 80104c8:	6833      	ldr	r3, [r6, #0]
 80104ca:	b30b      	cbz	r3, 8010510 <__sfp+0x68>
 80104cc:	6836      	ldr	r6, [r6, #0]
 80104ce:	e7f7      	b.n	80104c0 <__sfp+0x18>
 80104d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80104d4:	b9d5      	cbnz	r5, 801050c <__sfp+0x64>
 80104d6:	4b16      	ldr	r3, [pc, #88]	; (8010530 <__sfp+0x88>)
 80104d8:	60e3      	str	r3, [r4, #12]
 80104da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80104de:	6665      	str	r5, [r4, #100]	; 0x64
 80104e0:	f7ff fad8 	bl	800fa94 <__retarget_lock_init_recursive>
 80104e4:	f7ff ff96 	bl	8010414 <__sfp_lock_release>
 80104e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80104ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80104f0:	6025      	str	r5, [r4, #0]
 80104f2:	61a5      	str	r5, [r4, #24]
 80104f4:	2208      	movs	r2, #8
 80104f6:	4629      	mov	r1, r5
 80104f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80104fc:	f7fd fe58 	bl	800e1b0 <memset>
 8010500:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010504:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010508:	4620      	mov	r0, r4
 801050a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801050c:	3468      	adds	r4, #104	; 0x68
 801050e:	e7d9      	b.n	80104c4 <__sfp+0x1c>
 8010510:	2104      	movs	r1, #4
 8010512:	4638      	mov	r0, r7
 8010514:	f7ff ff62 	bl	80103dc <__sfmoreglue>
 8010518:	4604      	mov	r4, r0
 801051a:	6030      	str	r0, [r6, #0]
 801051c:	2800      	cmp	r0, #0
 801051e:	d1d5      	bne.n	80104cc <__sfp+0x24>
 8010520:	f7ff ff78 	bl	8010414 <__sfp_lock_release>
 8010524:	230c      	movs	r3, #12
 8010526:	603b      	str	r3, [r7, #0]
 8010528:	e7ee      	b.n	8010508 <__sfp+0x60>
 801052a:	bf00      	nop
 801052c:	08012d64 	.word	0x08012d64
 8010530:	ffff0001 	.word	0xffff0001

08010534 <_fwalk_reent>:
 8010534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010538:	4606      	mov	r6, r0
 801053a:	4688      	mov	r8, r1
 801053c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010540:	2700      	movs	r7, #0
 8010542:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010546:	f1b9 0901 	subs.w	r9, r9, #1
 801054a:	d505      	bpl.n	8010558 <_fwalk_reent+0x24>
 801054c:	6824      	ldr	r4, [r4, #0]
 801054e:	2c00      	cmp	r4, #0
 8010550:	d1f7      	bne.n	8010542 <_fwalk_reent+0xe>
 8010552:	4638      	mov	r0, r7
 8010554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010558:	89ab      	ldrh	r3, [r5, #12]
 801055a:	2b01      	cmp	r3, #1
 801055c:	d907      	bls.n	801056e <_fwalk_reent+0x3a>
 801055e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010562:	3301      	adds	r3, #1
 8010564:	d003      	beq.n	801056e <_fwalk_reent+0x3a>
 8010566:	4629      	mov	r1, r5
 8010568:	4630      	mov	r0, r6
 801056a:	47c0      	blx	r8
 801056c:	4307      	orrs	r7, r0
 801056e:	3568      	adds	r5, #104	; 0x68
 8010570:	e7e9      	b.n	8010546 <_fwalk_reent+0x12>

08010572 <__swhatbuf_r>:
 8010572:	b570      	push	{r4, r5, r6, lr}
 8010574:	460e      	mov	r6, r1
 8010576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801057a:	2900      	cmp	r1, #0
 801057c:	b096      	sub	sp, #88	; 0x58
 801057e:	4614      	mov	r4, r2
 8010580:	461d      	mov	r5, r3
 8010582:	da07      	bge.n	8010594 <__swhatbuf_r+0x22>
 8010584:	2300      	movs	r3, #0
 8010586:	602b      	str	r3, [r5, #0]
 8010588:	89b3      	ldrh	r3, [r6, #12]
 801058a:	061a      	lsls	r2, r3, #24
 801058c:	d410      	bmi.n	80105b0 <__swhatbuf_r+0x3e>
 801058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010592:	e00e      	b.n	80105b2 <__swhatbuf_r+0x40>
 8010594:	466a      	mov	r2, sp
 8010596:	f000 f8fb 	bl	8010790 <_fstat_r>
 801059a:	2800      	cmp	r0, #0
 801059c:	dbf2      	blt.n	8010584 <__swhatbuf_r+0x12>
 801059e:	9a01      	ldr	r2, [sp, #4]
 80105a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80105a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80105a8:	425a      	negs	r2, r3
 80105aa:	415a      	adcs	r2, r3
 80105ac:	602a      	str	r2, [r5, #0]
 80105ae:	e7ee      	b.n	801058e <__swhatbuf_r+0x1c>
 80105b0:	2340      	movs	r3, #64	; 0x40
 80105b2:	2000      	movs	r0, #0
 80105b4:	6023      	str	r3, [r4, #0]
 80105b6:	b016      	add	sp, #88	; 0x58
 80105b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080105bc <__smakebuf_r>:
 80105bc:	898b      	ldrh	r3, [r1, #12]
 80105be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80105c0:	079d      	lsls	r5, r3, #30
 80105c2:	4606      	mov	r6, r0
 80105c4:	460c      	mov	r4, r1
 80105c6:	d507      	bpl.n	80105d8 <__smakebuf_r+0x1c>
 80105c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80105cc:	6023      	str	r3, [r4, #0]
 80105ce:	6123      	str	r3, [r4, #16]
 80105d0:	2301      	movs	r3, #1
 80105d2:	6163      	str	r3, [r4, #20]
 80105d4:	b002      	add	sp, #8
 80105d6:	bd70      	pop	{r4, r5, r6, pc}
 80105d8:	ab01      	add	r3, sp, #4
 80105da:	466a      	mov	r2, sp
 80105dc:	f7ff ffc9 	bl	8010572 <__swhatbuf_r>
 80105e0:	9900      	ldr	r1, [sp, #0]
 80105e2:	4605      	mov	r5, r0
 80105e4:	4630      	mov	r0, r6
 80105e6:	f7fd fe3b 	bl	800e260 <_malloc_r>
 80105ea:	b948      	cbnz	r0, 8010600 <__smakebuf_r+0x44>
 80105ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105f0:	059a      	lsls	r2, r3, #22
 80105f2:	d4ef      	bmi.n	80105d4 <__smakebuf_r+0x18>
 80105f4:	f023 0303 	bic.w	r3, r3, #3
 80105f8:	f043 0302 	orr.w	r3, r3, #2
 80105fc:	81a3      	strh	r3, [r4, #12]
 80105fe:	e7e3      	b.n	80105c8 <__smakebuf_r+0xc>
 8010600:	4b0d      	ldr	r3, [pc, #52]	; (8010638 <__smakebuf_r+0x7c>)
 8010602:	62b3      	str	r3, [r6, #40]	; 0x28
 8010604:	89a3      	ldrh	r3, [r4, #12]
 8010606:	6020      	str	r0, [r4, #0]
 8010608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801060c:	81a3      	strh	r3, [r4, #12]
 801060e:	9b00      	ldr	r3, [sp, #0]
 8010610:	6163      	str	r3, [r4, #20]
 8010612:	9b01      	ldr	r3, [sp, #4]
 8010614:	6120      	str	r0, [r4, #16]
 8010616:	b15b      	cbz	r3, 8010630 <__smakebuf_r+0x74>
 8010618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801061c:	4630      	mov	r0, r6
 801061e:	f000 f8c9 	bl	80107b4 <_isatty_r>
 8010622:	b128      	cbz	r0, 8010630 <__smakebuf_r+0x74>
 8010624:	89a3      	ldrh	r3, [r4, #12]
 8010626:	f023 0303 	bic.w	r3, r3, #3
 801062a:	f043 0301 	orr.w	r3, r3, #1
 801062e:	81a3      	strh	r3, [r4, #12]
 8010630:	89a0      	ldrh	r0, [r4, #12]
 8010632:	4305      	orrs	r5, r0
 8010634:	81a5      	strh	r5, [r4, #12]
 8010636:	e7cd      	b.n	80105d4 <__smakebuf_r+0x18>
 8010638:	080103d1 	.word	0x080103d1

0801063c <_raise_r>:
 801063c:	291f      	cmp	r1, #31
 801063e:	b538      	push	{r3, r4, r5, lr}
 8010640:	4604      	mov	r4, r0
 8010642:	460d      	mov	r5, r1
 8010644:	d904      	bls.n	8010650 <_raise_r+0x14>
 8010646:	2316      	movs	r3, #22
 8010648:	6003      	str	r3, [r0, #0]
 801064a:	f04f 30ff 	mov.w	r0, #4294967295
 801064e:	bd38      	pop	{r3, r4, r5, pc}
 8010650:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010652:	b112      	cbz	r2, 801065a <_raise_r+0x1e>
 8010654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010658:	b94b      	cbnz	r3, 801066e <_raise_r+0x32>
 801065a:	4620      	mov	r0, r4
 801065c:	f000 f830 	bl	80106c0 <_getpid_r>
 8010660:	462a      	mov	r2, r5
 8010662:	4601      	mov	r1, r0
 8010664:	4620      	mov	r0, r4
 8010666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801066a:	f000 b817 	b.w	801069c <_kill_r>
 801066e:	2b01      	cmp	r3, #1
 8010670:	d00a      	beq.n	8010688 <_raise_r+0x4c>
 8010672:	1c59      	adds	r1, r3, #1
 8010674:	d103      	bne.n	801067e <_raise_r+0x42>
 8010676:	2316      	movs	r3, #22
 8010678:	6003      	str	r3, [r0, #0]
 801067a:	2001      	movs	r0, #1
 801067c:	e7e7      	b.n	801064e <_raise_r+0x12>
 801067e:	2400      	movs	r4, #0
 8010680:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010684:	4628      	mov	r0, r5
 8010686:	4798      	blx	r3
 8010688:	2000      	movs	r0, #0
 801068a:	e7e0      	b.n	801064e <_raise_r+0x12>

0801068c <raise>:
 801068c:	4b02      	ldr	r3, [pc, #8]	; (8010698 <raise+0xc>)
 801068e:	4601      	mov	r1, r0
 8010690:	6818      	ldr	r0, [r3, #0]
 8010692:	f7ff bfd3 	b.w	801063c <_raise_r>
 8010696:	bf00      	nop
 8010698:	20000040 	.word	0x20000040

0801069c <_kill_r>:
 801069c:	b538      	push	{r3, r4, r5, lr}
 801069e:	4d07      	ldr	r5, [pc, #28]	; (80106bc <_kill_r+0x20>)
 80106a0:	2300      	movs	r3, #0
 80106a2:	4604      	mov	r4, r0
 80106a4:	4608      	mov	r0, r1
 80106a6:	4611      	mov	r1, r2
 80106a8:	602b      	str	r3, [r5, #0]
 80106aa:	f7f2 f943 	bl	8002934 <_kill>
 80106ae:	1c43      	adds	r3, r0, #1
 80106b0:	d102      	bne.n	80106b8 <_kill_r+0x1c>
 80106b2:	682b      	ldr	r3, [r5, #0]
 80106b4:	b103      	cbz	r3, 80106b8 <_kill_r+0x1c>
 80106b6:	6023      	str	r3, [r4, #0]
 80106b8:	bd38      	pop	{r3, r4, r5, pc}
 80106ba:	bf00      	nop
 80106bc:	20008c54 	.word	0x20008c54

080106c0 <_getpid_r>:
 80106c0:	f7f2 b930 	b.w	8002924 <_getpid>

080106c4 <__sread>:
 80106c4:	b510      	push	{r4, lr}
 80106c6:	460c      	mov	r4, r1
 80106c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106cc:	f000 f894 	bl	80107f8 <_read_r>
 80106d0:	2800      	cmp	r0, #0
 80106d2:	bfab      	itete	ge
 80106d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80106d6:	89a3      	ldrhlt	r3, [r4, #12]
 80106d8:	181b      	addge	r3, r3, r0
 80106da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80106de:	bfac      	ite	ge
 80106e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80106e2:	81a3      	strhlt	r3, [r4, #12]
 80106e4:	bd10      	pop	{r4, pc}

080106e6 <__swrite>:
 80106e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106ea:	461f      	mov	r7, r3
 80106ec:	898b      	ldrh	r3, [r1, #12]
 80106ee:	05db      	lsls	r3, r3, #23
 80106f0:	4605      	mov	r5, r0
 80106f2:	460c      	mov	r4, r1
 80106f4:	4616      	mov	r6, r2
 80106f6:	d505      	bpl.n	8010704 <__swrite+0x1e>
 80106f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106fc:	2302      	movs	r3, #2
 80106fe:	2200      	movs	r2, #0
 8010700:	f000 f868 	bl	80107d4 <_lseek_r>
 8010704:	89a3      	ldrh	r3, [r4, #12]
 8010706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801070a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801070e:	81a3      	strh	r3, [r4, #12]
 8010710:	4632      	mov	r2, r6
 8010712:	463b      	mov	r3, r7
 8010714:	4628      	mov	r0, r5
 8010716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801071a:	f000 b817 	b.w	801074c <_write_r>

0801071e <__sseek>:
 801071e:	b510      	push	{r4, lr}
 8010720:	460c      	mov	r4, r1
 8010722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010726:	f000 f855 	bl	80107d4 <_lseek_r>
 801072a:	1c43      	adds	r3, r0, #1
 801072c:	89a3      	ldrh	r3, [r4, #12]
 801072e:	bf15      	itete	ne
 8010730:	6560      	strne	r0, [r4, #84]	; 0x54
 8010732:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010736:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801073a:	81a3      	strheq	r3, [r4, #12]
 801073c:	bf18      	it	ne
 801073e:	81a3      	strhne	r3, [r4, #12]
 8010740:	bd10      	pop	{r4, pc}

08010742 <__sclose>:
 8010742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010746:	f000 b813 	b.w	8010770 <_close_r>
	...

0801074c <_write_r>:
 801074c:	b538      	push	{r3, r4, r5, lr}
 801074e:	4d07      	ldr	r5, [pc, #28]	; (801076c <_write_r+0x20>)
 8010750:	4604      	mov	r4, r0
 8010752:	4608      	mov	r0, r1
 8010754:	4611      	mov	r1, r2
 8010756:	2200      	movs	r2, #0
 8010758:	602a      	str	r2, [r5, #0]
 801075a:	461a      	mov	r2, r3
 801075c:	f7f2 f921 	bl	80029a2 <_write>
 8010760:	1c43      	adds	r3, r0, #1
 8010762:	d102      	bne.n	801076a <_write_r+0x1e>
 8010764:	682b      	ldr	r3, [r5, #0]
 8010766:	b103      	cbz	r3, 801076a <_write_r+0x1e>
 8010768:	6023      	str	r3, [r4, #0]
 801076a:	bd38      	pop	{r3, r4, r5, pc}
 801076c:	20008c54 	.word	0x20008c54

08010770 <_close_r>:
 8010770:	b538      	push	{r3, r4, r5, lr}
 8010772:	4d06      	ldr	r5, [pc, #24]	; (801078c <_close_r+0x1c>)
 8010774:	2300      	movs	r3, #0
 8010776:	4604      	mov	r4, r0
 8010778:	4608      	mov	r0, r1
 801077a:	602b      	str	r3, [r5, #0]
 801077c:	f7f2 f92d 	bl	80029da <_close>
 8010780:	1c43      	adds	r3, r0, #1
 8010782:	d102      	bne.n	801078a <_close_r+0x1a>
 8010784:	682b      	ldr	r3, [r5, #0]
 8010786:	b103      	cbz	r3, 801078a <_close_r+0x1a>
 8010788:	6023      	str	r3, [r4, #0]
 801078a:	bd38      	pop	{r3, r4, r5, pc}
 801078c:	20008c54 	.word	0x20008c54

08010790 <_fstat_r>:
 8010790:	b538      	push	{r3, r4, r5, lr}
 8010792:	4d07      	ldr	r5, [pc, #28]	; (80107b0 <_fstat_r+0x20>)
 8010794:	2300      	movs	r3, #0
 8010796:	4604      	mov	r4, r0
 8010798:	4608      	mov	r0, r1
 801079a:	4611      	mov	r1, r2
 801079c:	602b      	str	r3, [r5, #0]
 801079e:	f7f2 f928 	bl	80029f2 <_fstat>
 80107a2:	1c43      	adds	r3, r0, #1
 80107a4:	d102      	bne.n	80107ac <_fstat_r+0x1c>
 80107a6:	682b      	ldr	r3, [r5, #0]
 80107a8:	b103      	cbz	r3, 80107ac <_fstat_r+0x1c>
 80107aa:	6023      	str	r3, [r4, #0]
 80107ac:	bd38      	pop	{r3, r4, r5, pc}
 80107ae:	bf00      	nop
 80107b0:	20008c54 	.word	0x20008c54

080107b4 <_isatty_r>:
 80107b4:	b538      	push	{r3, r4, r5, lr}
 80107b6:	4d06      	ldr	r5, [pc, #24]	; (80107d0 <_isatty_r+0x1c>)
 80107b8:	2300      	movs	r3, #0
 80107ba:	4604      	mov	r4, r0
 80107bc:	4608      	mov	r0, r1
 80107be:	602b      	str	r3, [r5, #0]
 80107c0:	f7f2 f927 	bl	8002a12 <_isatty>
 80107c4:	1c43      	adds	r3, r0, #1
 80107c6:	d102      	bne.n	80107ce <_isatty_r+0x1a>
 80107c8:	682b      	ldr	r3, [r5, #0]
 80107ca:	b103      	cbz	r3, 80107ce <_isatty_r+0x1a>
 80107cc:	6023      	str	r3, [r4, #0]
 80107ce:	bd38      	pop	{r3, r4, r5, pc}
 80107d0:	20008c54 	.word	0x20008c54

080107d4 <_lseek_r>:
 80107d4:	b538      	push	{r3, r4, r5, lr}
 80107d6:	4d07      	ldr	r5, [pc, #28]	; (80107f4 <_lseek_r+0x20>)
 80107d8:	4604      	mov	r4, r0
 80107da:	4608      	mov	r0, r1
 80107dc:	4611      	mov	r1, r2
 80107de:	2200      	movs	r2, #0
 80107e0:	602a      	str	r2, [r5, #0]
 80107e2:	461a      	mov	r2, r3
 80107e4:	f7f2 f920 	bl	8002a28 <_lseek>
 80107e8:	1c43      	adds	r3, r0, #1
 80107ea:	d102      	bne.n	80107f2 <_lseek_r+0x1e>
 80107ec:	682b      	ldr	r3, [r5, #0]
 80107ee:	b103      	cbz	r3, 80107f2 <_lseek_r+0x1e>
 80107f0:	6023      	str	r3, [r4, #0]
 80107f2:	bd38      	pop	{r3, r4, r5, pc}
 80107f4:	20008c54 	.word	0x20008c54

080107f8 <_read_r>:
 80107f8:	b538      	push	{r3, r4, r5, lr}
 80107fa:	4d07      	ldr	r5, [pc, #28]	; (8010818 <_read_r+0x20>)
 80107fc:	4604      	mov	r4, r0
 80107fe:	4608      	mov	r0, r1
 8010800:	4611      	mov	r1, r2
 8010802:	2200      	movs	r2, #0
 8010804:	602a      	str	r2, [r5, #0]
 8010806:	461a      	mov	r2, r3
 8010808:	f7f2 f8ae 	bl	8002968 <_read>
 801080c:	1c43      	adds	r3, r0, #1
 801080e:	d102      	bne.n	8010816 <_read_r+0x1e>
 8010810:	682b      	ldr	r3, [r5, #0]
 8010812:	b103      	cbz	r3, 8010816 <_read_r+0x1e>
 8010814:	6023      	str	r3, [r4, #0]
 8010816:	bd38      	pop	{r3, r4, r5, pc}
 8010818:	20008c54 	.word	0x20008c54
 801081c:	00000000 	.word	0x00000000

08010820 <cos>:
 8010820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010822:	ec53 2b10 	vmov	r2, r3, d0
 8010826:	4824      	ldr	r0, [pc, #144]	; (80108b8 <cos+0x98>)
 8010828:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801082c:	4281      	cmp	r1, r0
 801082e:	dc06      	bgt.n	801083e <cos+0x1e>
 8010830:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80108b0 <cos+0x90>
 8010834:	f001 fa2c 	bl	8011c90 <__kernel_cos>
 8010838:	ec51 0b10 	vmov	r0, r1, d0
 801083c:	e007      	b.n	801084e <cos+0x2e>
 801083e:	481f      	ldr	r0, [pc, #124]	; (80108bc <cos+0x9c>)
 8010840:	4281      	cmp	r1, r0
 8010842:	dd09      	ble.n	8010858 <cos+0x38>
 8010844:	ee10 0a10 	vmov	r0, s0
 8010848:	4619      	mov	r1, r3
 801084a:	f7ef fd2d 	bl	80002a8 <__aeabi_dsub>
 801084e:	ec41 0b10 	vmov	d0, r0, r1
 8010852:	b005      	add	sp, #20
 8010854:	f85d fb04 	ldr.w	pc, [sp], #4
 8010858:	4668      	mov	r0, sp
 801085a:	f000 ff59 	bl	8011710 <__ieee754_rem_pio2>
 801085e:	f000 0003 	and.w	r0, r0, #3
 8010862:	2801      	cmp	r0, #1
 8010864:	d007      	beq.n	8010876 <cos+0x56>
 8010866:	2802      	cmp	r0, #2
 8010868:	d012      	beq.n	8010890 <cos+0x70>
 801086a:	b9c0      	cbnz	r0, 801089e <cos+0x7e>
 801086c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010870:	ed9d 0b00 	vldr	d0, [sp]
 8010874:	e7de      	b.n	8010834 <cos+0x14>
 8010876:	ed9d 1b02 	vldr	d1, [sp, #8]
 801087a:	ed9d 0b00 	vldr	d0, [sp]
 801087e:	f001 fe0f 	bl	80124a0 <__kernel_sin>
 8010882:	ec53 2b10 	vmov	r2, r3, d0
 8010886:	ee10 0a10 	vmov	r0, s0
 801088a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801088e:	e7de      	b.n	801084e <cos+0x2e>
 8010890:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010894:	ed9d 0b00 	vldr	d0, [sp]
 8010898:	f001 f9fa 	bl	8011c90 <__kernel_cos>
 801089c:	e7f1      	b.n	8010882 <cos+0x62>
 801089e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108a2:	ed9d 0b00 	vldr	d0, [sp]
 80108a6:	2001      	movs	r0, #1
 80108a8:	f001 fdfa 	bl	80124a0 <__kernel_sin>
 80108ac:	e7c4      	b.n	8010838 <cos+0x18>
 80108ae:	bf00      	nop
	...
 80108b8:	3fe921fb 	.word	0x3fe921fb
 80108bc:	7fefffff 	.word	0x7fefffff

080108c0 <sin>:
 80108c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108c2:	ec53 2b10 	vmov	r2, r3, d0
 80108c6:	4826      	ldr	r0, [pc, #152]	; (8010960 <sin+0xa0>)
 80108c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80108cc:	4281      	cmp	r1, r0
 80108ce:	dc07      	bgt.n	80108e0 <sin+0x20>
 80108d0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010958 <sin+0x98>
 80108d4:	2000      	movs	r0, #0
 80108d6:	f001 fde3 	bl	80124a0 <__kernel_sin>
 80108da:	ec51 0b10 	vmov	r0, r1, d0
 80108de:	e007      	b.n	80108f0 <sin+0x30>
 80108e0:	4820      	ldr	r0, [pc, #128]	; (8010964 <sin+0xa4>)
 80108e2:	4281      	cmp	r1, r0
 80108e4:	dd09      	ble.n	80108fa <sin+0x3a>
 80108e6:	ee10 0a10 	vmov	r0, s0
 80108ea:	4619      	mov	r1, r3
 80108ec:	f7ef fcdc 	bl	80002a8 <__aeabi_dsub>
 80108f0:	ec41 0b10 	vmov	d0, r0, r1
 80108f4:	b005      	add	sp, #20
 80108f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80108fa:	4668      	mov	r0, sp
 80108fc:	f000 ff08 	bl	8011710 <__ieee754_rem_pio2>
 8010900:	f000 0003 	and.w	r0, r0, #3
 8010904:	2801      	cmp	r0, #1
 8010906:	d008      	beq.n	801091a <sin+0x5a>
 8010908:	2802      	cmp	r0, #2
 801090a:	d00d      	beq.n	8010928 <sin+0x68>
 801090c:	b9d0      	cbnz	r0, 8010944 <sin+0x84>
 801090e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010912:	ed9d 0b00 	vldr	d0, [sp]
 8010916:	2001      	movs	r0, #1
 8010918:	e7dd      	b.n	80108d6 <sin+0x16>
 801091a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801091e:	ed9d 0b00 	vldr	d0, [sp]
 8010922:	f001 f9b5 	bl	8011c90 <__kernel_cos>
 8010926:	e7d8      	b.n	80108da <sin+0x1a>
 8010928:	ed9d 1b02 	vldr	d1, [sp, #8]
 801092c:	ed9d 0b00 	vldr	d0, [sp]
 8010930:	2001      	movs	r0, #1
 8010932:	f001 fdb5 	bl	80124a0 <__kernel_sin>
 8010936:	ec53 2b10 	vmov	r2, r3, d0
 801093a:	ee10 0a10 	vmov	r0, s0
 801093e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010942:	e7d5      	b.n	80108f0 <sin+0x30>
 8010944:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010948:	ed9d 0b00 	vldr	d0, [sp]
 801094c:	f001 f9a0 	bl	8011c90 <__kernel_cos>
 8010950:	e7f1      	b.n	8010936 <sin+0x76>
 8010952:	bf00      	nop
 8010954:	f3af 8000 	nop.w
	...
 8010960:	3fe921fb 	.word	0x3fe921fb
 8010964:	7fefffff 	.word	0x7fefffff

08010968 <atan2>:
 8010968:	f000 b8e2 	b.w	8010b30 <__ieee754_atan2>

0801096c <pow>:
 801096c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010970:	ec59 8b10 	vmov	r8, r9, d0
 8010974:	ec57 6b11 	vmov	r6, r7, d1
 8010978:	f000 f9a6 	bl	8010cc8 <__ieee754_pow>
 801097c:	4b4e      	ldr	r3, [pc, #312]	; (8010ab8 <pow+0x14c>)
 801097e:	f993 3000 	ldrsb.w	r3, [r3]
 8010982:	3301      	adds	r3, #1
 8010984:	ec55 4b10 	vmov	r4, r5, d0
 8010988:	d015      	beq.n	80109b6 <pow+0x4a>
 801098a:	4632      	mov	r2, r6
 801098c:	463b      	mov	r3, r7
 801098e:	4630      	mov	r0, r6
 8010990:	4639      	mov	r1, r7
 8010992:	f7f0 f8db 	bl	8000b4c <__aeabi_dcmpun>
 8010996:	b970      	cbnz	r0, 80109b6 <pow+0x4a>
 8010998:	4642      	mov	r2, r8
 801099a:	464b      	mov	r3, r9
 801099c:	4640      	mov	r0, r8
 801099e:	4649      	mov	r1, r9
 80109a0:	f7f0 f8d4 	bl	8000b4c <__aeabi_dcmpun>
 80109a4:	2200      	movs	r2, #0
 80109a6:	2300      	movs	r3, #0
 80109a8:	b148      	cbz	r0, 80109be <pow+0x52>
 80109aa:	4630      	mov	r0, r6
 80109ac:	4639      	mov	r1, r7
 80109ae:	f7f0 f89b 	bl	8000ae8 <__aeabi_dcmpeq>
 80109b2:	2800      	cmp	r0, #0
 80109b4:	d17d      	bne.n	8010ab2 <pow+0x146>
 80109b6:	ec45 4b10 	vmov	d0, r4, r5
 80109ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109be:	4640      	mov	r0, r8
 80109c0:	4649      	mov	r1, r9
 80109c2:	f7f0 f891 	bl	8000ae8 <__aeabi_dcmpeq>
 80109c6:	b1e0      	cbz	r0, 8010a02 <pow+0x96>
 80109c8:	2200      	movs	r2, #0
 80109ca:	2300      	movs	r3, #0
 80109cc:	4630      	mov	r0, r6
 80109ce:	4639      	mov	r1, r7
 80109d0:	f7f0 f88a 	bl	8000ae8 <__aeabi_dcmpeq>
 80109d4:	2800      	cmp	r0, #0
 80109d6:	d16c      	bne.n	8010ab2 <pow+0x146>
 80109d8:	ec47 6b10 	vmov	d0, r6, r7
 80109dc:	f001 ffc9 	bl	8012972 <finite>
 80109e0:	2800      	cmp	r0, #0
 80109e2:	d0e8      	beq.n	80109b6 <pow+0x4a>
 80109e4:	2200      	movs	r2, #0
 80109e6:	2300      	movs	r3, #0
 80109e8:	4630      	mov	r0, r6
 80109ea:	4639      	mov	r1, r7
 80109ec:	f7f0 f886 	bl	8000afc <__aeabi_dcmplt>
 80109f0:	2800      	cmp	r0, #0
 80109f2:	d0e0      	beq.n	80109b6 <pow+0x4a>
 80109f4:	f7fd fb94 	bl	800e120 <__errno>
 80109f8:	2321      	movs	r3, #33	; 0x21
 80109fa:	6003      	str	r3, [r0, #0]
 80109fc:	2400      	movs	r4, #0
 80109fe:	4d2f      	ldr	r5, [pc, #188]	; (8010abc <pow+0x150>)
 8010a00:	e7d9      	b.n	80109b6 <pow+0x4a>
 8010a02:	ec45 4b10 	vmov	d0, r4, r5
 8010a06:	f001 ffb4 	bl	8012972 <finite>
 8010a0a:	bbb8      	cbnz	r0, 8010a7c <pow+0x110>
 8010a0c:	ec49 8b10 	vmov	d0, r8, r9
 8010a10:	f001 ffaf 	bl	8012972 <finite>
 8010a14:	b390      	cbz	r0, 8010a7c <pow+0x110>
 8010a16:	ec47 6b10 	vmov	d0, r6, r7
 8010a1a:	f001 ffaa 	bl	8012972 <finite>
 8010a1e:	b368      	cbz	r0, 8010a7c <pow+0x110>
 8010a20:	4622      	mov	r2, r4
 8010a22:	462b      	mov	r3, r5
 8010a24:	4620      	mov	r0, r4
 8010a26:	4629      	mov	r1, r5
 8010a28:	f7f0 f890 	bl	8000b4c <__aeabi_dcmpun>
 8010a2c:	b160      	cbz	r0, 8010a48 <pow+0xdc>
 8010a2e:	f7fd fb77 	bl	800e120 <__errno>
 8010a32:	2321      	movs	r3, #33	; 0x21
 8010a34:	6003      	str	r3, [r0, #0]
 8010a36:	2200      	movs	r2, #0
 8010a38:	2300      	movs	r3, #0
 8010a3a:	4610      	mov	r0, r2
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	f7ef ff15 	bl	800086c <__aeabi_ddiv>
 8010a42:	4604      	mov	r4, r0
 8010a44:	460d      	mov	r5, r1
 8010a46:	e7b6      	b.n	80109b6 <pow+0x4a>
 8010a48:	f7fd fb6a 	bl	800e120 <__errno>
 8010a4c:	2322      	movs	r3, #34	; 0x22
 8010a4e:	6003      	str	r3, [r0, #0]
 8010a50:	2200      	movs	r2, #0
 8010a52:	2300      	movs	r3, #0
 8010a54:	4640      	mov	r0, r8
 8010a56:	4649      	mov	r1, r9
 8010a58:	f7f0 f850 	bl	8000afc <__aeabi_dcmplt>
 8010a5c:	2400      	movs	r4, #0
 8010a5e:	b158      	cbz	r0, 8010a78 <pow+0x10c>
 8010a60:	ec47 6b10 	vmov	d0, r6, r7
 8010a64:	f002 f818 	bl	8012a98 <rint>
 8010a68:	4632      	mov	r2, r6
 8010a6a:	ec51 0b10 	vmov	r0, r1, d0
 8010a6e:	463b      	mov	r3, r7
 8010a70:	f7f0 f83a 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a74:	2800      	cmp	r0, #0
 8010a76:	d0c2      	beq.n	80109fe <pow+0x92>
 8010a78:	4d11      	ldr	r5, [pc, #68]	; (8010ac0 <pow+0x154>)
 8010a7a:	e79c      	b.n	80109b6 <pow+0x4a>
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	2300      	movs	r3, #0
 8010a80:	4620      	mov	r0, r4
 8010a82:	4629      	mov	r1, r5
 8010a84:	f7f0 f830 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a88:	2800      	cmp	r0, #0
 8010a8a:	d094      	beq.n	80109b6 <pow+0x4a>
 8010a8c:	ec49 8b10 	vmov	d0, r8, r9
 8010a90:	f001 ff6f 	bl	8012972 <finite>
 8010a94:	2800      	cmp	r0, #0
 8010a96:	d08e      	beq.n	80109b6 <pow+0x4a>
 8010a98:	ec47 6b10 	vmov	d0, r6, r7
 8010a9c:	f001 ff69 	bl	8012972 <finite>
 8010aa0:	2800      	cmp	r0, #0
 8010aa2:	d088      	beq.n	80109b6 <pow+0x4a>
 8010aa4:	f7fd fb3c 	bl	800e120 <__errno>
 8010aa8:	2322      	movs	r3, #34	; 0x22
 8010aaa:	6003      	str	r3, [r0, #0]
 8010aac:	2400      	movs	r4, #0
 8010aae:	2500      	movs	r5, #0
 8010ab0:	e781      	b.n	80109b6 <pow+0x4a>
 8010ab2:	4d04      	ldr	r5, [pc, #16]	; (8010ac4 <pow+0x158>)
 8010ab4:	2400      	movs	r4, #0
 8010ab6:	e77e      	b.n	80109b6 <pow+0x4a>
 8010ab8:	200000a4 	.word	0x200000a4
 8010abc:	fff00000 	.word	0xfff00000
 8010ac0:	7ff00000 	.word	0x7ff00000
 8010ac4:	3ff00000 	.word	0x3ff00000

08010ac8 <sqrt>:
 8010ac8:	b538      	push	{r3, r4, r5, lr}
 8010aca:	ed2d 8b02 	vpush	{d8}
 8010ace:	ec55 4b10 	vmov	r4, r5, d0
 8010ad2:	f001 f827 	bl	8011b24 <__ieee754_sqrt>
 8010ad6:	4b15      	ldr	r3, [pc, #84]	; (8010b2c <sqrt+0x64>)
 8010ad8:	eeb0 8a40 	vmov.f32	s16, s0
 8010adc:	eef0 8a60 	vmov.f32	s17, s1
 8010ae0:	f993 3000 	ldrsb.w	r3, [r3]
 8010ae4:	3301      	adds	r3, #1
 8010ae6:	d019      	beq.n	8010b1c <sqrt+0x54>
 8010ae8:	4622      	mov	r2, r4
 8010aea:	462b      	mov	r3, r5
 8010aec:	4620      	mov	r0, r4
 8010aee:	4629      	mov	r1, r5
 8010af0:	f7f0 f82c 	bl	8000b4c <__aeabi_dcmpun>
 8010af4:	b990      	cbnz	r0, 8010b1c <sqrt+0x54>
 8010af6:	2200      	movs	r2, #0
 8010af8:	2300      	movs	r3, #0
 8010afa:	4620      	mov	r0, r4
 8010afc:	4629      	mov	r1, r5
 8010afe:	f7ef fffd 	bl	8000afc <__aeabi_dcmplt>
 8010b02:	b158      	cbz	r0, 8010b1c <sqrt+0x54>
 8010b04:	f7fd fb0c 	bl	800e120 <__errno>
 8010b08:	2321      	movs	r3, #33	; 0x21
 8010b0a:	6003      	str	r3, [r0, #0]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	2300      	movs	r3, #0
 8010b10:	4610      	mov	r0, r2
 8010b12:	4619      	mov	r1, r3
 8010b14:	f7ef feaa 	bl	800086c <__aeabi_ddiv>
 8010b18:	ec41 0b18 	vmov	d8, r0, r1
 8010b1c:	eeb0 0a48 	vmov.f32	s0, s16
 8010b20:	eef0 0a68 	vmov.f32	s1, s17
 8010b24:	ecbd 8b02 	vpop	{d8}
 8010b28:	bd38      	pop	{r3, r4, r5, pc}
 8010b2a:	bf00      	nop
 8010b2c:	200000a4 	.word	0x200000a4

08010b30 <__ieee754_atan2>:
 8010b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b34:	ec57 6b11 	vmov	r6, r7, d1
 8010b38:	4273      	negs	r3, r6
 8010b3a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010cc0 <__ieee754_atan2+0x190>
 8010b3e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010b42:	4333      	orrs	r3, r6
 8010b44:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010b48:	4573      	cmp	r3, lr
 8010b4a:	ec51 0b10 	vmov	r0, r1, d0
 8010b4e:	ee11 8a10 	vmov	r8, s2
 8010b52:	d80a      	bhi.n	8010b6a <__ieee754_atan2+0x3a>
 8010b54:	4244      	negs	r4, r0
 8010b56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010b5a:	4304      	orrs	r4, r0
 8010b5c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010b60:	4574      	cmp	r4, lr
 8010b62:	ee10 9a10 	vmov	r9, s0
 8010b66:	468c      	mov	ip, r1
 8010b68:	d907      	bls.n	8010b7a <__ieee754_atan2+0x4a>
 8010b6a:	4632      	mov	r2, r6
 8010b6c:	463b      	mov	r3, r7
 8010b6e:	f7ef fb9d 	bl	80002ac <__adddf3>
 8010b72:	ec41 0b10 	vmov	d0, r0, r1
 8010b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b7a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010b7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010b82:	4334      	orrs	r4, r6
 8010b84:	d103      	bne.n	8010b8e <__ieee754_atan2+0x5e>
 8010b86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b8a:	f001 bd49 	b.w	8012620 <atan>
 8010b8e:	17bc      	asrs	r4, r7, #30
 8010b90:	f004 0402 	and.w	r4, r4, #2
 8010b94:	ea53 0909 	orrs.w	r9, r3, r9
 8010b98:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010b9c:	d107      	bne.n	8010bae <__ieee754_atan2+0x7e>
 8010b9e:	2c02      	cmp	r4, #2
 8010ba0:	d060      	beq.n	8010c64 <__ieee754_atan2+0x134>
 8010ba2:	2c03      	cmp	r4, #3
 8010ba4:	d1e5      	bne.n	8010b72 <__ieee754_atan2+0x42>
 8010ba6:	a142      	add	r1, pc, #264	; (adr r1, 8010cb0 <__ieee754_atan2+0x180>)
 8010ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bac:	e7e1      	b.n	8010b72 <__ieee754_atan2+0x42>
 8010bae:	ea52 0808 	orrs.w	r8, r2, r8
 8010bb2:	d106      	bne.n	8010bc2 <__ieee754_atan2+0x92>
 8010bb4:	f1bc 0f00 	cmp.w	ip, #0
 8010bb8:	da5f      	bge.n	8010c7a <__ieee754_atan2+0x14a>
 8010bba:	a13f      	add	r1, pc, #252	; (adr r1, 8010cb8 <__ieee754_atan2+0x188>)
 8010bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bc0:	e7d7      	b.n	8010b72 <__ieee754_atan2+0x42>
 8010bc2:	4572      	cmp	r2, lr
 8010bc4:	d10f      	bne.n	8010be6 <__ieee754_atan2+0xb6>
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	f104 34ff 	add.w	r4, r4, #4294967295
 8010bcc:	d107      	bne.n	8010bde <__ieee754_atan2+0xae>
 8010bce:	2c02      	cmp	r4, #2
 8010bd0:	d84c      	bhi.n	8010c6c <__ieee754_atan2+0x13c>
 8010bd2:	4b35      	ldr	r3, [pc, #212]	; (8010ca8 <__ieee754_atan2+0x178>)
 8010bd4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010bd8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8010bdc:	e7c9      	b.n	8010b72 <__ieee754_atan2+0x42>
 8010bde:	2c02      	cmp	r4, #2
 8010be0:	d848      	bhi.n	8010c74 <__ieee754_atan2+0x144>
 8010be2:	4b32      	ldr	r3, [pc, #200]	; (8010cac <__ieee754_atan2+0x17c>)
 8010be4:	e7f6      	b.n	8010bd4 <__ieee754_atan2+0xa4>
 8010be6:	4573      	cmp	r3, lr
 8010be8:	d0e4      	beq.n	8010bb4 <__ieee754_atan2+0x84>
 8010bea:	1a9b      	subs	r3, r3, r2
 8010bec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010bf0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010bf4:	da1e      	bge.n	8010c34 <__ieee754_atan2+0x104>
 8010bf6:	2f00      	cmp	r7, #0
 8010bf8:	da01      	bge.n	8010bfe <__ieee754_atan2+0xce>
 8010bfa:	323c      	adds	r2, #60	; 0x3c
 8010bfc:	db1e      	blt.n	8010c3c <__ieee754_atan2+0x10c>
 8010bfe:	4632      	mov	r2, r6
 8010c00:	463b      	mov	r3, r7
 8010c02:	f7ef fe33 	bl	800086c <__aeabi_ddiv>
 8010c06:	ec41 0b10 	vmov	d0, r0, r1
 8010c0a:	f001 fea9 	bl	8012960 <fabs>
 8010c0e:	f001 fd07 	bl	8012620 <atan>
 8010c12:	ec51 0b10 	vmov	r0, r1, d0
 8010c16:	2c01      	cmp	r4, #1
 8010c18:	d013      	beq.n	8010c42 <__ieee754_atan2+0x112>
 8010c1a:	2c02      	cmp	r4, #2
 8010c1c:	d015      	beq.n	8010c4a <__ieee754_atan2+0x11a>
 8010c1e:	2c00      	cmp	r4, #0
 8010c20:	d0a7      	beq.n	8010b72 <__ieee754_atan2+0x42>
 8010c22:	a319      	add	r3, pc, #100	; (adr r3, 8010c88 <__ieee754_atan2+0x158>)
 8010c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c28:	f7ef fb3e 	bl	80002a8 <__aeabi_dsub>
 8010c2c:	a318      	add	r3, pc, #96	; (adr r3, 8010c90 <__ieee754_atan2+0x160>)
 8010c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c32:	e014      	b.n	8010c5e <__ieee754_atan2+0x12e>
 8010c34:	a118      	add	r1, pc, #96	; (adr r1, 8010c98 <__ieee754_atan2+0x168>)
 8010c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c3a:	e7ec      	b.n	8010c16 <__ieee754_atan2+0xe6>
 8010c3c:	2000      	movs	r0, #0
 8010c3e:	2100      	movs	r1, #0
 8010c40:	e7e9      	b.n	8010c16 <__ieee754_atan2+0xe6>
 8010c42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c46:	4619      	mov	r1, r3
 8010c48:	e793      	b.n	8010b72 <__ieee754_atan2+0x42>
 8010c4a:	a30f      	add	r3, pc, #60	; (adr r3, 8010c88 <__ieee754_atan2+0x158>)
 8010c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c50:	f7ef fb2a 	bl	80002a8 <__aeabi_dsub>
 8010c54:	4602      	mov	r2, r0
 8010c56:	460b      	mov	r3, r1
 8010c58:	a10d      	add	r1, pc, #52	; (adr r1, 8010c90 <__ieee754_atan2+0x160>)
 8010c5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c5e:	f7ef fb23 	bl	80002a8 <__aeabi_dsub>
 8010c62:	e786      	b.n	8010b72 <__ieee754_atan2+0x42>
 8010c64:	a10a      	add	r1, pc, #40	; (adr r1, 8010c90 <__ieee754_atan2+0x160>)
 8010c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c6a:	e782      	b.n	8010b72 <__ieee754_atan2+0x42>
 8010c6c:	a10c      	add	r1, pc, #48	; (adr r1, 8010ca0 <__ieee754_atan2+0x170>)
 8010c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c72:	e77e      	b.n	8010b72 <__ieee754_atan2+0x42>
 8010c74:	2000      	movs	r0, #0
 8010c76:	2100      	movs	r1, #0
 8010c78:	e77b      	b.n	8010b72 <__ieee754_atan2+0x42>
 8010c7a:	a107      	add	r1, pc, #28	; (adr r1, 8010c98 <__ieee754_atan2+0x168>)
 8010c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c80:	e777      	b.n	8010b72 <__ieee754_atan2+0x42>
 8010c82:	bf00      	nop
 8010c84:	f3af 8000 	nop.w
 8010c88:	33145c07 	.word	0x33145c07
 8010c8c:	3ca1a626 	.word	0x3ca1a626
 8010c90:	54442d18 	.word	0x54442d18
 8010c94:	400921fb 	.word	0x400921fb
 8010c98:	54442d18 	.word	0x54442d18
 8010c9c:	3ff921fb 	.word	0x3ff921fb
 8010ca0:	54442d18 	.word	0x54442d18
 8010ca4:	3fe921fb 	.word	0x3fe921fb
 8010ca8:	08013030 	.word	0x08013030
 8010cac:	08013048 	.word	0x08013048
 8010cb0:	54442d18 	.word	0x54442d18
 8010cb4:	c00921fb 	.word	0xc00921fb
 8010cb8:	54442d18 	.word	0x54442d18
 8010cbc:	bff921fb 	.word	0xbff921fb
 8010cc0:	7ff00000 	.word	0x7ff00000
 8010cc4:	00000000 	.word	0x00000000

08010cc8 <__ieee754_pow>:
 8010cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ccc:	ed2d 8b06 	vpush	{d8-d10}
 8010cd0:	b08d      	sub	sp, #52	; 0x34
 8010cd2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010cd6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8010cda:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8010cde:	ea56 0100 	orrs.w	r1, r6, r0
 8010ce2:	ec53 2b10 	vmov	r2, r3, d0
 8010ce6:	f000 84d1 	beq.w	801168c <__ieee754_pow+0x9c4>
 8010cea:	497f      	ldr	r1, [pc, #508]	; (8010ee8 <__ieee754_pow+0x220>)
 8010cec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010cf0:	428c      	cmp	r4, r1
 8010cf2:	ee10 8a10 	vmov	r8, s0
 8010cf6:	4699      	mov	r9, r3
 8010cf8:	dc09      	bgt.n	8010d0e <__ieee754_pow+0x46>
 8010cfa:	d103      	bne.n	8010d04 <__ieee754_pow+0x3c>
 8010cfc:	b97a      	cbnz	r2, 8010d1e <__ieee754_pow+0x56>
 8010cfe:	42a6      	cmp	r6, r4
 8010d00:	dd02      	ble.n	8010d08 <__ieee754_pow+0x40>
 8010d02:	e00c      	b.n	8010d1e <__ieee754_pow+0x56>
 8010d04:	428e      	cmp	r6, r1
 8010d06:	dc02      	bgt.n	8010d0e <__ieee754_pow+0x46>
 8010d08:	428e      	cmp	r6, r1
 8010d0a:	d110      	bne.n	8010d2e <__ieee754_pow+0x66>
 8010d0c:	b178      	cbz	r0, 8010d2e <__ieee754_pow+0x66>
 8010d0e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010d12:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010d16:	ea54 0308 	orrs.w	r3, r4, r8
 8010d1a:	f000 84b7 	beq.w	801168c <__ieee754_pow+0x9c4>
 8010d1e:	4873      	ldr	r0, [pc, #460]	; (8010eec <__ieee754_pow+0x224>)
 8010d20:	b00d      	add	sp, #52	; 0x34
 8010d22:	ecbd 8b06 	vpop	{d8-d10}
 8010d26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d2a:	f001 bead 	b.w	8012a88 <nan>
 8010d2e:	f1b9 0f00 	cmp.w	r9, #0
 8010d32:	da36      	bge.n	8010da2 <__ieee754_pow+0xda>
 8010d34:	496e      	ldr	r1, [pc, #440]	; (8010ef0 <__ieee754_pow+0x228>)
 8010d36:	428e      	cmp	r6, r1
 8010d38:	dc51      	bgt.n	8010dde <__ieee754_pow+0x116>
 8010d3a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8010d3e:	428e      	cmp	r6, r1
 8010d40:	f340 84af 	ble.w	80116a2 <__ieee754_pow+0x9da>
 8010d44:	1531      	asrs	r1, r6, #20
 8010d46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010d4a:	2914      	cmp	r1, #20
 8010d4c:	dd0f      	ble.n	8010d6e <__ieee754_pow+0xa6>
 8010d4e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8010d52:	fa20 fc01 	lsr.w	ip, r0, r1
 8010d56:	fa0c f101 	lsl.w	r1, ip, r1
 8010d5a:	4281      	cmp	r1, r0
 8010d5c:	f040 84a1 	bne.w	80116a2 <__ieee754_pow+0x9da>
 8010d60:	f00c 0c01 	and.w	ip, ip, #1
 8010d64:	f1cc 0102 	rsb	r1, ip, #2
 8010d68:	9100      	str	r1, [sp, #0]
 8010d6a:	b180      	cbz	r0, 8010d8e <__ieee754_pow+0xc6>
 8010d6c:	e059      	b.n	8010e22 <__ieee754_pow+0x15a>
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	d155      	bne.n	8010e1e <__ieee754_pow+0x156>
 8010d72:	f1c1 0114 	rsb	r1, r1, #20
 8010d76:	fa46 fc01 	asr.w	ip, r6, r1
 8010d7a:	fa0c f101 	lsl.w	r1, ip, r1
 8010d7e:	42b1      	cmp	r1, r6
 8010d80:	f040 848c 	bne.w	801169c <__ieee754_pow+0x9d4>
 8010d84:	f00c 0c01 	and.w	ip, ip, #1
 8010d88:	f1cc 0102 	rsb	r1, ip, #2
 8010d8c:	9100      	str	r1, [sp, #0]
 8010d8e:	4959      	ldr	r1, [pc, #356]	; (8010ef4 <__ieee754_pow+0x22c>)
 8010d90:	428e      	cmp	r6, r1
 8010d92:	d12d      	bne.n	8010df0 <__ieee754_pow+0x128>
 8010d94:	2f00      	cmp	r7, #0
 8010d96:	da79      	bge.n	8010e8c <__ieee754_pow+0x1c4>
 8010d98:	4956      	ldr	r1, [pc, #344]	; (8010ef4 <__ieee754_pow+0x22c>)
 8010d9a:	2000      	movs	r0, #0
 8010d9c:	f7ef fd66 	bl	800086c <__aeabi_ddiv>
 8010da0:	e016      	b.n	8010dd0 <__ieee754_pow+0x108>
 8010da2:	2100      	movs	r1, #0
 8010da4:	9100      	str	r1, [sp, #0]
 8010da6:	2800      	cmp	r0, #0
 8010da8:	d13b      	bne.n	8010e22 <__ieee754_pow+0x15a>
 8010daa:	494f      	ldr	r1, [pc, #316]	; (8010ee8 <__ieee754_pow+0x220>)
 8010dac:	428e      	cmp	r6, r1
 8010dae:	d1ee      	bne.n	8010d8e <__ieee754_pow+0xc6>
 8010db0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010db4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010db8:	ea53 0308 	orrs.w	r3, r3, r8
 8010dbc:	f000 8466 	beq.w	801168c <__ieee754_pow+0x9c4>
 8010dc0:	4b4d      	ldr	r3, [pc, #308]	; (8010ef8 <__ieee754_pow+0x230>)
 8010dc2:	429c      	cmp	r4, r3
 8010dc4:	dd0d      	ble.n	8010de2 <__ieee754_pow+0x11a>
 8010dc6:	2f00      	cmp	r7, #0
 8010dc8:	f280 8464 	bge.w	8011694 <__ieee754_pow+0x9cc>
 8010dcc:	2000      	movs	r0, #0
 8010dce:	2100      	movs	r1, #0
 8010dd0:	ec41 0b10 	vmov	d0, r0, r1
 8010dd4:	b00d      	add	sp, #52	; 0x34
 8010dd6:	ecbd 8b06 	vpop	{d8-d10}
 8010dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dde:	2102      	movs	r1, #2
 8010de0:	e7e0      	b.n	8010da4 <__ieee754_pow+0xdc>
 8010de2:	2f00      	cmp	r7, #0
 8010de4:	daf2      	bge.n	8010dcc <__ieee754_pow+0x104>
 8010de6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8010dea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010dee:	e7ef      	b.n	8010dd0 <__ieee754_pow+0x108>
 8010df0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8010df4:	d104      	bne.n	8010e00 <__ieee754_pow+0x138>
 8010df6:	4610      	mov	r0, r2
 8010df8:	4619      	mov	r1, r3
 8010dfa:	f7ef fc0d 	bl	8000618 <__aeabi_dmul>
 8010dfe:	e7e7      	b.n	8010dd0 <__ieee754_pow+0x108>
 8010e00:	493e      	ldr	r1, [pc, #248]	; (8010efc <__ieee754_pow+0x234>)
 8010e02:	428f      	cmp	r7, r1
 8010e04:	d10d      	bne.n	8010e22 <__ieee754_pow+0x15a>
 8010e06:	f1b9 0f00 	cmp.w	r9, #0
 8010e0a:	db0a      	blt.n	8010e22 <__ieee754_pow+0x15a>
 8010e0c:	ec43 2b10 	vmov	d0, r2, r3
 8010e10:	b00d      	add	sp, #52	; 0x34
 8010e12:	ecbd 8b06 	vpop	{d8-d10}
 8010e16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e1a:	f000 be83 	b.w	8011b24 <__ieee754_sqrt>
 8010e1e:	2100      	movs	r1, #0
 8010e20:	9100      	str	r1, [sp, #0]
 8010e22:	ec43 2b10 	vmov	d0, r2, r3
 8010e26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e2a:	f001 fd99 	bl	8012960 <fabs>
 8010e2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e32:	ec51 0b10 	vmov	r0, r1, d0
 8010e36:	f1b8 0f00 	cmp.w	r8, #0
 8010e3a:	d12a      	bne.n	8010e92 <__ieee754_pow+0x1ca>
 8010e3c:	b12c      	cbz	r4, 8010e4a <__ieee754_pow+0x182>
 8010e3e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8010ef4 <__ieee754_pow+0x22c>
 8010e42:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8010e46:	45e6      	cmp	lr, ip
 8010e48:	d123      	bne.n	8010e92 <__ieee754_pow+0x1ca>
 8010e4a:	2f00      	cmp	r7, #0
 8010e4c:	da05      	bge.n	8010e5a <__ieee754_pow+0x192>
 8010e4e:	4602      	mov	r2, r0
 8010e50:	460b      	mov	r3, r1
 8010e52:	2000      	movs	r0, #0
 8010e54:	4927      	ldr	r1, [pc, #156]	; (8010ef4 <__ieee754_pow+0x22c>)
 8010e56:	f7ef fd09 	bl	800086c <__aeabi_ddiv>
 8010e5a:	f1b9 0f00 	cmp.w	r9, #0
 8010e5e:	dab7      	bge.n	8010dd0 <__ieee754_pow+0x108>
 8010e60:	9b00      	ldr	r3, [sp, #0]
 8010e62:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010e66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010e6a:	4323      	orrs	r3, r4
 8010e6c:	d108      	bne.n	8010e80 <__ieee754_pow+0x1b8>
 8010e6e:	4602      	mov	r2, r0
 8010e70:	460b      	mov	r3, r1
 8010e72:	4610      	mov	r0, r2
 8010e74:	4619      	mov	r1, r3
 8010e76:	f7ef fa17 	bl	80002a8 <__aeabi_dsub>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	e78d      	b.n	8010d9c <__ieee754_pow+0xd4>
 8010e80:	9b00      	ldr	r3, [sp, #0]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d1a4      	bne.n	8010dd0 <__ieee754_pow+0x108>
 8010e86:	4602      	mov	r2, r0
 8010e88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e8c:	4610      	mov	r0, r2
 8010e8e:	4619      	mov	r1, r3
 8010e90:	e79e      	b.n	8010dd0 <__ieee754_pow+0x108>
 8010e92:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8010e96:	f10c 35ff 	add.w	r5, ip, #4294967295
 8010e9a:	950a      	str	r5, [sp, #40]	; 0x28
 8010e9c:	9d00      	ldr	r5, [sp, #0]
 8010e9e:	46ac      	mov	ip, r5
 8010ea0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010ea2:	ea5c 0505 	orrs.w	r5, ip, r5
 8010ea6:	d0e4      	beq.n	8010e72 <__ieee754_pow+0x1aa>
 8010ea8:	4b15      	ldr	r3, [pc, #84]	; (8010f00 <__ieee754_pow+0x238>)
 8010eaa:	429e      	cmp	r6, r3
 8010eac:	f340 80fc 	ble.w	80110a8 <__ieee754_pow+0x3e0>
 8010eb0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010eb4:	429e      	cmp	r6, r3
 8010eb6:	4b10      	ldr	r3, [pc, #64]	; (8010ef8 <__ieee754_pow+0x230>)
 8010eb8:	dd07      	ble.n	8010eca <__ieee754_pow+0x202>
 8010eba:	429c      	cmp	r4, r3
 8010ebc:	dc0a      	bgt.n	8010ed4 <__ieee754_pow+0x20c>
 8010ebe:	2f00      	cmp	r7, #0
 8010ec0:	da84      	bge.n	8010dcc <__ieee754_pow+0x104>
 8010ec2:	a307      	add	r3, pc, #28	; (adr r3, 8010ee0 <__ieee754_pow+0x218>)
 8010ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec8:	e795      	b.n	8010df6 <__ieee754_pow+0x12e>
 8010eca:	429c      	cmp	r4, r3
 8010ecc:	dbf7      	blt.n	8010ebe <__ieee754_pow+0x1f6>
 8010ece:	4b09      	ldr	r3, [pc, #36]	; (8010ef4 <__ieee754_pow+0x22c>)
 8010ed0:	429c      	cmp	r4, r3
 8010ed2:	dd17      	ble.n	8010f04 <__ieee754_pow+0x23c>
 8010ed4:	2f00      	cmp	r7, #0
 8010ed6:	dcf4      	bgt.n	8010ec2 <__ieee754_pow+0x1fa>
 8010ed8:	e778      	b.n	8010dcc <__ieee754_pow+0x104>
 8010eda:	bf00      	nop
 8010edc:	f3af 8000 	nop.w
 8010ee0:	8800759c 	.word	0x8800759c
 8010ee4:	7e37e43c 	.word	0x7e37e43c
 8010ee8:	7ff00000 	.word	0x7ff00000
 8010eec:	08012f27 	.word	0x08012f27
 8010ef0:	433fffff 	.word	0x433fffff
 8010ef4:	3ff00000 	.word	0x3ff00000
 8010ef8:	3fefffff 	.word	0x3fefffff
 8010efc:	3fe00000 	.word	0x3fe00000
 8010f00:	41e00000 	.word	0x41e00000
 8010f04:	4b64      	ldr	r3, [pc, #400]	; (8011098 <__ieee754_pow+0x3d0>)
 8010f06:	2200      	movs	r2, #0
 8010f08:	f7ef f9ce 	bl	80002a8 <__aeabi_dsub>
 8010f0c:	a356      	add	r3, pc, #344	; (adr r3, 8011068 <__ieee754_pow+0x3a0>)
 8010f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f12:	4604      	mov	r4, r0
 8010f14:	460d      	mov	r5, r1
 8010f16:	f7ef fb7f 	bl	8000618 <__aeabi_dmul>
 8010f1a:	a355      	add	r3, pc, #340	; (adr r3, 8011070 <__ieee754_pow+0x3a8>)
 8010f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f20:	4606      	mov	r6, r0
 8010f22:	460f      	mov	r7, r1
 8010f24:	4620      	mov	r0, r4
 8010f26:	4629      	mov	r1, r5
 8010f28:	f7ef fb76 	bl	8000618 <__aeabi_dmul>
 8010f2c:	4b5b      	ldr	r3, [pc, #364]	; (801109c <__ieee754_pow+0x3d4>)
 8010f2e:	4682      	mov	sl, r0
 8010f30:	468b      	mov	fp, r1
 8010f32:	2200      	movs	r2, #0
 8010f34:	4620      	mov	r0, r4
 8010f36:	4629      	mov	r1, r5
 8010f38:	f7ef fb6e 	bl	8000618 <__aeabi_dmul>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	460b      	mov	r3, r1
 8010f40:	a14d      	add	r1, pc, #308	; (adr r1, 8011078 <__ieee754_pow+0x3b0>)
 8010f42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f46:	f7ef f9af 	bl	80002a8 <__aeabi_dsub>
 8010f4a:	4622      	mov	r2, r4
 8010f4c:	462b      	mov	r3, r5
 8010f4e:	f7ef fb63 	bl	8000618 <__aeabi_dmul>
 8010f52:	4602      	mov	r2, r0
 8010f54:	460b      	mov	r3, r1
 8010f56:	2000      	movs	r0, #0
 8010f58:	4951      	ldr	r1, [pc, #324]	; (80110a0 <__ieee754_pow+0x3d8>)
 8010f5a:	f7ef f9a5 	bl	80002a8 <__aeabi_dsub>
 8010f5e:	4622      	mov	r2, r4
 8010f60:	4680      	mov	r8, r0
 8010f62:	4689      	mov	r9, r1
 8010f64:	462b      	mov	r3, r5
 8010f66:	4620      	mov	r0, r4
 8010f68:	4629      	mov	r1, r5
 8010f6a:	f7ef fb55 	bl	8000618 <__aeabi_dmul>
 8010f6e:	4602      	mov	r2, r0
 8010f70:	460b      	mov	r3, r1
 8010f72:	4640      	mov	r0, r8
 8010f74:	4649      	mov	r1, r9
 8010f76:	f7ef fb4f 	bl	8000618 <__aeabi_dmul>
 8010f7a:	a341      	add	r3, pc, #260	; (adr r3, 8011080 <__ieee754_pow+0x3b8>)
 8010f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f80:	f7ef fb4a 	bl	8000618 <__aeabi_dmul>
 8010f84:	4602      	mov	r2, r0
 8010f86:	460b      	mov	r3, r1
 8010f88:	4650      	mov	r0, sl
 8010f8a:	4659      	mov	r1, fp
 8010f8c:	f7ef f98c 	bl	80002a8 <__aeabi_dsub>
 8010f90:	4602      	mov	r2, r0
 8010f92:	460b      	mov	r3, r1
 8010f94:	4680      	mov	r8, r0
 8010f96:	4689      	mov	r9, r1
 8010f98:	4630      	mov	r0, r6
 8010f9a:	4639      	mov	r1, r7
 8010f9c:	f7ef f986 	bl	80002ac <__adddf3>
 8010fa0:	2400      	movs	r4, #0
 8010fa2:	4632      	mov	r2, r6
 8010fa4:	463b      	mov	r3, r7
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	460d      	mov	r5, r1
 8010faa:	f7ef f97d 	bl	80002a8 <__aeabi_dsub>
 8010fae:	4602      	mov	r2, r0
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	4640      	mov	r0, r8
 8010fb4:	4649      	mov	r1, r9
 8010fb6:	f7ef f977 	bl	80002a8 <__aeabi_dsub>
 8010fba:	9b00      	ldr	r3, [sp, #0]
 8010fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010fbe:	3b01      	subs	r3, #1
 8010fc0:	4313      	orrs	r3, r2
 8010fc2:	4682      	mov	sl, r0
 8010fc4:	468b      	mov	fp, r1
 8010fc6:	f040 81f1 	bne.w	80113ac <__ieee754_pow+0x6e4>
 8010fca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011088 <__ieee754_pow+0x3c0>
 8010fce:	eeb0 8a47 	vmov.f32	s16, s14
 8010fd2:	eef0 8a67 	vmov.f32	s17, s15
 8010fd6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010fda:	2600      	movs	r6, #0
 8010fdc:	4632      	mov	r2, r6
 8010fde:	463b      	mov	r3, r7
 8010fe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010fe4:	f7ef f960 	bl	80002a8 <__aeabi_dsub>
 8010fe8:	4622      	mov	r2, r4
 8010fea:	462b      	mov	r3, r5
 8010fec:	f7ef fb14 	bl	8000618 <__aeabi_dmul>
 8010ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ff4:	4680      	mov	r8, r0
 8010ff6:	4689      	mov	r9, r1
 8010ff8:	4650      	mov	r0, sl
 8010ffa:	4659      	mov	r1, fp
 8010ffc:	f7ef fb0c 	bl	8000618 <__aeabi_dmul>
 8011000:	4602      	mov	r2, r0
 8011002:	460b      	mov	r3, r1
 8011004:	4640      	mov	r0, r8
 8011006:	4649      	mov	r1, r9
 8011008:	f7ef f950 	bl	80002ac <__adddf3>
 801100c:	4632      	mov	r2, r6
 801100e:	463b      	mov	r3, r7
 8011010:	4680      	mov	r8, r0
 8011012:	4689      	mov	r9, r1
 8011014:	4620      	mov	r0, r4
 8011016:	4629      	mov	r1, r5
 8011018:	f7ef fafe 	bl	8000618 <__aeabi_dmul>
 801101c:	460b      	mov	r3, r1
 801101e:	4604      	mov	r4, r0
 8011020:	460d      	mov	r5, r1
 8011022:	4602      	mov	r2, r0
 8011024:	4649      	mov	r1, r9
 8011026:	4640      	mov	r0, r8
 8011028:	f7ef f940 	bl	80002ac <__adddf3>
 801102c:	4b1d      	ldr	r3, [pc, #116]	; (80110a4 <__ieee754_pow+0x3dc>)
 801102e:	4299      	cmp	r1, r3
 8011030:	ec45 4b19 	vmov	d9, r4, r5
 8011034:	4606      	mov	r6, r0
 8011036:	460f      	mov	r7, r1
 8011038:	468b      	mov	fp, r1
 801103a:	f340 82fe 	ble.w	801163a <__ieee754_pow+0x972>
 801103e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011042:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011046:	4303      	orrs	r3, r0
 8011048:	f000 81f0 	beq.w	801142c <__ieee754_pow+0x764>
 801104c:	a310      	add	r3, pc, #64	; (adr r3, 8011090 <__ieee754_pow+0x3c8>)
 801104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011052:	ec51 0b18 	vmov	r0, r1, d8
 8011056:	f7ef fadf 	bl	8000618 <__aeabi_dmul>
 801105a:	a30d      	add	r3, pc, #52	; (adr r3, 8011090 <__ieee754_pow+0x3c8>)
 801105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011060:	e6cb      	b.n	8010dfa <__ieee754_pow+0x132>
 8011062:	bf00      	nop
 8011064:	f3af 8000 	nop.w
 8011068:	60000000 	.word	0x60000000
 801106c:	3ff71547 	.word	0x3ff71547
 8011070:	f85ddf44 	.word	0xf85ddf44
 8011074:	3e54ae0b 	.word	0x3e54ae0b
 8011078:	55555555 	.word	0x55555555
 801107c:	3fd55555 	.word	0x3fd55555
 8011080:	652b82fe 	.word	0x652b82fe
 8011084:	3ff71547 	.word	0x3ff71547
 8011088:	00000000 	.word	0x00000000
 801108c:	bff00000 	.word	0xbff00000
 8011090:	8800759c 	.word	0x8800759c
 8011094:	7e37e43c 	.word	0x7e37e43c
 8011098:	3ff00000 	.word	0x3ff00000
 801109c:	3fd00000 	.word	0x3fd00000
 80110a0:	3fe00000 	.word	0x3fe00000
 80110a4:	408fffff 	.word	0x408fffff
 80110a8:	4bd7      	ldr	r3, [pc, #860]	; (8011408 <__ieee754_pow+0x740>)
 80110aa:	ea03 0309 	and.w	r3, r3, r9
 80110ae:	2200      	movs	r2, #0
 80110b0:	b92b      	cbnz	r3, 80110be <__ieee754_pow+0x3f6>
 80110b2:	4bd6      	ldr	r3, [pc, #856]	; (801140c <__ieee754_pow+0x744>)
 80110b4:	f7ef fab0 	bl	8000618 <__aeabi_dmul>
 80110b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80110bc:	460c      	mov	r4, r1
 80110be:	1523      	asrs	r3, r4, #20
 80110c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80110c4:	4413      	add	r3, r2
 80110c6:	9309      	str	r3, [sp, #36]	; 0x24
 80110c8:	4bd1      	ldr	r3, [pc, #836]	; (8011410 <__ieee754_pow+0x748>)
 80110ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80110ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80110d2:	429c      	cmp	r4, r3
 80110d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80110d8:	dd08      	ble.n	80110ec <__ieee754_pow+0x424>
 80110da:	4bce      	ldr	r3, [pc, #824]	; (8011414 <__ieee754_pow+0x74c>)
 80110dc:	429c      	cmp	r4, r3
 80110de:	f340 8163 	ble.w	80113a8 <__ieee754_pow+0x6e0>
 80110e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110e4:	3301      	adds	r3, #1
 80110e6:	9309      	str	r3, [sp, #36]	; 0x24
 80110e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80110ec:	2400      	movs	r4, #0
 80110ee:	00e3      	lsls	r3, r4, #3
 80110f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80110f2:	4bc9      	ldr	r3, [pc, #804]	; (8011418 <__ieee754_pow+0x750>)
 80110f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80110f8:	ed93 7b00 	vldr	d7, [r3]
 80110fc:	4629      	mov	r1, r5
 80110fe:	ec53 2b17 	vmov	r2, r3, d7
 8011102:	eeb0 8a47 	vmov.f32	s16, s14
 8011106:	eef0 8a67 	vmov.f32	s17, s15
 801110a:	4682      	mov	sl, r0
 801110c:	f7ef f8cc 	bl	80002a8 <__aeabi_dsub>
 8011110:	4652      	mov	r2, sl
 8011112:	4606      	mov	r6, r0
 8011114:	460f      	mov	r7, r1
 8011116:	462b      	mov	r3, r5
 8011118:	ec51 0b18 	vmov	r0, r1, d8
 801111c:	f7ef f8c6 	bl	80002ac <__adddf3>
 8011120:	4602      	mov	r2, r0
 8011122:	460b      	mov	r3, r1
 8011124:	2000      	movs	r0, #0
 8011126:	49bd      	ldr	r1, [pc, #756]	; (801141c <__ieee754_pow+0x754>)
 8011128:	f7ef fba0 	bl	800086c <__aeabi_ddiv>
 801112c:	ec41 0b19 	vmov	d9, r0, r1
 8011130:	4602      	mov	r2, r0
 8011132:	460b      	mov	r3, r1
 8011134:	4630      	mov	r0, r6
 8011136:	4639      	mov	r1, r7
 8011138:	f7ef fa6e 	bl	8000618 <__aeabi_dmul>
 801113c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011140:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011144:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011148:	2300      	movs	r3, #0
 801114a:	9304      	str	r3, [sp, #16]
 801114c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011150:	46ab      	mov	fp, r5
 8011152:	106d      	asrs	r5, r5, #1
 8011154:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011158:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801115c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011160:	2200      	movs	r2, #0
 8011162:	4640      	mov	r0, r8
 8011164:	4649      	mov	r1, r9
 8011166:	4614      	mov	r4, r2
 8011168:	461d      	mov	r5, r3
 801116a:	f7ef fa55 	bl	8000618 <__aeabi_dmul>
 801116e:	4602      	mov	r2, r0
 8011170:	460b      	mov	r3, r1
 8011172:	4630      	mov	r0, r6
 8011174:	4639      	mov	r1, r7
 8011176:	f7ef f897 	bl	80002a8 <__aeabi_dsub>
 801117a:	ec53 2b18 	vmov	r2, r3, d8
 801117e:	4606      	mov	r6, r0
 8011180:	460f      	mov	r7, r1
 8011182:	4620      	mov	r0, r4
 8011184:	4629      	mov	r1, r5
 8011186:	f7ef f88f 	bl	80002a8 <__aeabi_dsub>
 801118a:	4602      	mov	r2, r0
 801118c:	460b      	mov	r3, r1
 801118e:	4650      	mov	r0, sl
 8011190:	4659      	mov	r1, fp
 8011192:	f7ef f889 	bl	80002a8 <__aeabi_dsub>
 8011196:	4642      	mov	r2, r8
 8011198:	464b      	mov	r3, r9
 801119a:	f7ef fa3d 	bl	8000618 <__aeabi_dmul>
 801119e:	4602      	mov	r2, r0
 80111a0:	460b      	mov	r3, r1
 80111a2:	4630      	mov	r0, r6
 80111a4:	4639      	mov	r1, r7
 80111a6:	f7ef f87f 	bl	80002a8 <__aeabi_dsub>
 80111aa:	ec53 2b19 	vmov	r2, r3, d9
 80111ae:	f7ef fa33 	bl	8000618 <__aeabi_dmul>
 80111b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80111b6:	ec41 0b18 	vmov	d8, r0, r1
 80111ba:	4610      	mov	r0, r2
 80111bc:	4619      	mov	r1, r3
 80111be:	f7ef fa2b 	bl	8000618 <__aeabi_dmul>
 80111c2:	a37d      	add	r3, pc, #500	; (adr r3, 80113b8 <__ieee754_pow+0x6f0>)
 80111c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c8:	4604      	mov	r4, r0
 80111ca:	460d      	mov	r5, r1
 80111cc:	f7ef fa24 	bl	8000618 <__aeabi_dmul>
 80111d0:	a37b      	add	r3, pc, #492	; (adr r3, 80113c0 <__ieee754_pow+0x6f8>)
 80111d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d6:	f7ef f869 	bl	80002ac <__adddf3>
 80111da:	4622      	mov	r2, r4
 80111dc:	462b      	mov	r3, r5
 80111de:	f7ef fa1b 	bl	8000618 <__aeabi_dmul>
 80111e2:	a379      	add	r3, pc, #484	; (adr r3, 80113c8 <__ieee754_pow+0x700>)
 80111e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e8:	f7ef f860 	bl	80002ac <__adddf3>
 80111ec:	4622      	mov	r2, r4
 80111ee:	462b      	mov	r3, r5
 80111f0:	f7ef fa12 	bl	8000618 <__aeabi_dmul>
 80111f4:	a376      	add	r3, pc, #472	; (adr r3, 80113d0 <__ieee754_pow+0x708>)
 80111f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111fa:	f7ef f857 	bl	80002ac <__adddf3>
 80111fe:	4622      	mov	r2, r4
 8011200:	462b      	mov	r3, r5
 8011202:	f7ef fa09 	bl	8000618 <__aeabi_dmul>
 8011206:	a374      	add	r3, pc, #464	; (adr r3, 80113d8 <__ieee754_pow+0x710>)
 8011208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120c:	f7ef f84e 	bl	80002ac <__adddf3>
 8011210:	4622      	mov	r2, r4
 8011212:	462b      	mov	r3, r5
 8011214:	f7ef fa00 	bl	8000618 <__aeabi_dmul>
 8011218:	a371      	add	r3, pc, #452	; (adr r3, 80113e0 <__ieee754_pow+0x718>)
 801121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801121e:	f7ef f845 	bl	80002ac <__adddf3>
 8011222:	4622      	mov	r2, r4
 8011224:	4606      	mov	r6, r0
 8011226:	460f      	mov	r7, r1
 8011228:	462b      	mov	r3, r5
 801122a:	4620      	mov	r0, r4
 801122c:	4629      	mov	r1, r5
 801122e:	f7ef f9f3 	bl	8000618 <__aeabi_dmul>
 8011232:	4602      	mov	r2, r0
 8011234:	460b      	mov	r3, r1
 8011236:	4630      	mov	r0, r6
 8011238:	4639      	mov	r1, r7
 801123a:	f7ef f9ed 	bl	8000618 <__aeabi_dmul>
 801123e:	4642      	mov	r2, r8
 8011240:	4604      	mov	r4, r0
 8011242:	460d      	mov	r5, r1
 8011244:	464b      	mov	r3, r9
 8011246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801124a:	f7ef f82f 	bl	80002ac <__adddf3>
 801124e:	ec53 2b18 	vmov	r2, r3, d8
 8011252:	f7ef f9e1 	bl	8000618 <__aeabi_dmul>
 8011256:	4622      	mov	r2, r4
 8011258:	462b      	mov	r3, r5
 801125a:	f7ef f827 	bl	80002ac <__adddf3>
 801125e:	4642      	mov	r2, r8
 8011260:	4682      	mov	sl, r0
 8011262:	468b      	mov	fp, r1
 8011264:	464b      	mov	r3, r9
 8011266:	4640      	mov	r0, r8
 8011268:	4649      	mov	r1, r9
 801126a:	f7ef f9d5 	bl	8000618 <__aeabi_dmul>
 801126e:	4b6c      	ldr	r3, [pc, #432]	; (8011420 <__ieee754_pow+0x758>)
 8011270:	2200      	movs	r2, #0
 8011272:	4606      	mov	r6, r0
 8011274:	460f      	mov	r7, r1
 8011276:	f7ef f819 	bl	80002ac <__adddf3>
 801127a:	4652      	mov	r2, sl
 801127c:	465b      	mov	r3, fp
 801127e:	f7ef f815 	bl	80002ac <__adddf3>
 8011282:	9c04      	ldr	r4, [sp, #16]
 8011284:	460d      	mov	r5, r1
 8011286:	4622      	mov	r2, r4
 8011288:	460b      	mov	r3, r1
 801128a:	4640      	mov	r0, r8
 801128c:	4649      	mov	r1, r9
 801128e:	f7ef f9c3 	bl	8000618 <__aeabi_dmul>
 8011292:	4b63      	ldr	r3, [pc, #396]	; (8011420 <__ieee754_pow+0x758>)
 8011294:	4680      	mov	r8, r0
 8011296:	4689      	mov	r9, r1
 8011298:	2200      	movs	r2, #0
 801129a:	4620      	mov	r0, r4
 801129c:	4629      	mov	r1, r5
 801129e:	f7ef f803 	bl	80002a8 <__aeabi_dsub>
 80112a2:	4632      	mov	r2, r6
 80112a4:	463b      	mov	r3, r7
 80112a6:	f7ee ffff 	bl	80002a8 <__aeabi_dsub>
 80112aa:	4602      	mov	r2, r0
 80112ac:	460b      	mov	r3, r1
 80112ae:	4650      	mov	r0, sl
 80112b0:	4659      	mov	r1, fp
 80112b2:	f7ee fff9 	bl	80002a8 <__aeabi_dsub>
 80112b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80112ba:	f7ef f9ad 	bl	8000618 <__aeabi_dmul>
 80112be:	4622      	mov	r2, r4
 80112c0:	4606      	mov	r6, r0
 80112c2:	460f      	mov	r7, r1
 80112c4:	462b      	mov	r3, r5
 80112c6:	ec51 0b18 	vmov	r0, r1, d8
 80112ca:	f7ef f9a5 	bl	8000618 <__aeabi_dmul>
 80112ce:	4602      	mov	r2, r0
 80112d0:	460b      	mov	r3, r1
 80112d2:	4630      	mov	r0, r6
 80112d4:	4639      	mov	r1, r7
 80112d6:	f7ee ffe9 	bl	80002ac <__adddf3>
 80112da:	4606      	mov	r6, r0
 80112dc:	460f      	mov	r7, r1
 80112de:	4602      	mov	r2, r0
 80112e0:	460b      	mov	r3, r1
 80112e2:	4640      	mov	r0, r8
 80112e4:	4649      	mov	r1, r9
 80112e6:	f7ee ffe1 	bl	80002ac <__adddf3>
 80112ea:	9c04      	ldr	r4, [sp, #16]
 80112ec:	a33e      	add	r3, pc, #248	; (adr r3, 80113e8 <__ieee754_pow+0x720>)
 80112ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f2:	4620      	mov	r0, r4
 80112f4:	460d      	mov	r5, r1
 80112f6:	f7ef f98f 	bl	8000618 <__aeabi_dmul>
 80112fa:	4642      	mov	r2, r8
 80112fc:	ec41 0b18 	vmov	d8, r0, r1
 8011300:	464b      	mov	r3, r9
 8011302:	4620      	mov	r0, r4
 8011304:	4629      	mov	r1, r5
 8011306:	f7ee ffcf 	bl	80002a8 <__aeabi_dsub>
 801130a:	4602      	mov	r2, r0
 801130c:	460b      	mov	r3, r1
 801130e:	4630      	mov	r0, r6
 8011310:	4639      	mov	r1, r7
 8011312:	f7ee ffc9 	bl	80002a8 <__aeabi_dsub>
 8011316:	a336      	add	r3, pc, #216	; (adr r3, 80113f0 <__ieee754_pow+0x728>)
 8011318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801131c:	f7ef f97c 	bl	8000618 <__aeabi_dmul>
 8011320:	a335      	add	r3, pc, #212	; (adr r3, 80113f8 <__ieee754_pow+0x730>)
 8011322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011326:	4606      	mov	r6, r0
 8011328:	460f      	mov	r7, r1
 801132a:	4620      	mov	r0, r4
 801132c:	4629      	mov	r1, r5
 801132e:	f7ef f973 	bl	8000618 <__aeabi_dmul>
 8011332:	4602      	mov	r2, r0
 8011334:	460b      	mov	r3, r1
 8011336:	4630      	mov	r0, r6
 8011338:	4639      	mov	r1, r7
 801133a:	f7ee ffb7 	bl	80002ac <__adddf3>
 801133e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011340:	4b38      	ldr	r3, [pc, #224]	; (8011424 <__ieee754_pow+0x75c>)
 8011342:	4413      	add	r3, r2
 8011344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011348:	f7ee ffb0 	bl	80002ac <__adddf3>
 801134c:	4682      	mov	sl, r0
 801134e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011350:	468b      	mov	fp, r1
 8011352:	f7ef f8f7 	bl	8000544 <__aeabi_i2d>
 8011356:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011358:	4b33      	ldr	r3, [pc, #204]	; (8011428 <__ieee754_pow+0x760>)
 801135a:	4413      	add	r3, r2
 801135c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011360:	4606      	mov	r6, r0
 8011362:	460f      	mov	r7, r1
 8011364:	4652      	mov	r2, sl
 8011366:	465b      	mov	r3, fp
 8011368:	ec51 0b18 	vmov	r0, r1, d8
 801136c:	f7ee ff9e 	bl	80002ac <__adddf3>
 8011370:	4642      	mov	r2, r8
 8011372:	464b      	mov	r3, r9
 8011374:	f7ee ff9a 	bl	80002ac <__adddf3>
 8011378:	4632      	mov	r2, r6
 801137a:	463b      	mov	r3, r7
 801137c:	f7ee ff96 	bl	80002ac <__adddf3>
 8011380:	9c04      	ldr	r4, [sp, #16]
 8011382:	4632      	mov	r2, r6
 8011384:	463b      	mov	r3, r7
 8011386:	4620      	mov	r0, r4
 8011388:	460d      	mov	r5, r1
 801138a:	f7ee ff8d 	bl	80002a8 <__aeabi_dsub>
 801138e:	4642      	mov	r2, r8
 8011390:	464b      	mov	r3, r9
 8011392:	f7ee ff89 	bl	80002a8 <__aeabi_dsub>
 8011396:	ec53 2b18 	vmov	r2, r3, d8
 801139a:	f7ee ff85 	bl	80002a8 <__aeabi_dsub>
 801139e:	4602      	mov	r2, r0
 80113a0:	460b      	mov	r3, r1
 80113a2:	4650      	mov	r0, sl
 80113a4:	4659      	mov	r1, fp
 80113a6:	e606      	b.n	8010fb6 <__ieee754_pow+0x2ee>
 80113a8:	2401      	movs	r4, #1
 80113aa:	e6a0      	b.n	80110ee <__ieee754_pow+0x426>
 80113ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011400 <__ieee754_pow+0x738>
 80113b0:	e60d      	b.n	8010fce <__ieee754_pow+0x306>
 80113b2:	bf00      	nop
 80113b4:	f3af 8000 	nop.w
 80113b8:	4a454eef 	.word	0x4a454eef
 80113bc:	3fca7e28 	.word	0x3fca7e28
 80113c0:	93c9db65 	.word	0x93c9db65
 80113c4:	3fcd864a 	.word	0x3fcd864a
 80113c8:	a91d4101 	.word	0xa91d4101
 80113cc:	3fd17460 	.word	0x3fd17460
 80113d0:	518f264d 	.word	0x518f264d
 80113d4:	3fd55555 	.word	0x3fd55555
 80113d8:	db6fabff 	.word	0xdb6fabff
 80113dc:	3fdb6db6 	.word	0x3fdb6db6
 80113e0:	33333303 	.word	0x33333303
 80113e4:	3fe33333 	.word	0x3fe33333
 80113e8:	e0000000 	.word	0xe0000000
 80113ec:	3feec709 	.word	0x3feec709
 80113f0:	dc3a03fd 	.word	0xdc3a03fd
 80113f4:	3feec709 	.word	0x3feec709
 80113f8:	145b01f5 	.word	0x145b01f5
 80113fc:	be3e2fe0 	.word	0xbe3e2fe0
 8011400:	00000000 	.word	0x00000000
 8011404:	3ff00000 	.word	0x3ff00000
 8011408:	7ff00000 	.word	0x7ff00000
 801140c:	43400000 	.word	0x43400000
 8011410:	0003988e 	.word	0x0003988e
 8011414:	000bb679 	.word	0x000bb679
 8011418:	08013060 	.word	0x08013060
 801141c:	3ff00000 	.word	0x3ff00000
 8011420:	40080000 	.word	0x40080000
 8011424:	08013080 	.word	0x08013080
 8011428:	08013070 	.word	0x08013070
 801142c:	a3b5      	add	r3, pc, #724	; (adr r3, 8011704 <__ieee754_pow+0xa3c>)
 801142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011432:	4640      	mov	r0, r8
 8011434:	4649      	mov	r1, r9
 8011436:	f7ee ff39 	bl	80002ac <__adddf3>
 801143a:	4622      	mov	r2, r4
 801143c:	ec41 0b1a 	vmov	d10, r0, r1
 8011440:	462b      	mov	r3, r5
 8011442:	4630      	mov	r0, r6
 8011444:	4639      	mov	r1, r7
 8011446:	f7ee ff2f 	bl	80002a8 <__aeabi_dsub>
 801144a:	4602      	mov	r2, r0
 801144c:	460b      	mov	r3, r1
 801144e:	ec51 0b1a 	vmov	r0, r1, d10
 8011452:	f7ef fb71 	bl	8000b38 <__aeabi_dcmpgt>
 8011456:	2800      	cmp	r0, #0
 8011458:	f47f adf8 	bne.w	801104c <__ieee754_pow+0x384>
 801145c:	4aa4      	ldr	r2, [pc, #656]	; (80116f0 <__ieee754_pow+0xa28>)
 801145e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011462:	4293      	cmp	r3, r2
 8011464:	f340 810b 	ble.w	801167e <__ieee754_pow+0x9b6>
 8011468:	151b      	asrs	r3, r3, #20
 801146a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801146e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011472:	fa4a f303 	asr.w	r3, sl, r3
 8011476:	445b      	add	r3, fp
 8011478:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801147c:	4e9d      	ldr	r6, [pc, #628]	; (80116f4 <__ieee754_pow+0xa2c>)
 801147e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011482:	4116      	asrs	r6, r2
 8011484:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011488:	2000      	movs	r0, #0
 801148a:	ea23 0106 	bic.w	r1, r3, r6
 801148e:	f1c2 0214 	rsb	r2, r2, #20
 8011492:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011496:	fa4a fa02 	asr.w	sl, sl, r2
 801149a:	f1bb 0f00 	cmp.w	fp, #0
 801149e:	4602      	mov	r2, r0
 80114a0:	460b      	mov	r3, r1
 80114a2:	4620      	mov	r0, r4
 80114a4:	4629      	mov	r1, r5
 80114a6:	bfb8      	it	lt
 80114a8:	f1ca 0a00 	rsblt	sl, sl, #0
 80114ac:	f7ee fefc 	bl	80002a8 <__aeabi_dsub>
 80114b0:	ec41 0b19 	vmov	d9, r0, r1
 80114b4:	4642      	mov	r2, r8
 80114b6:	464b      	mov	r3, r9
 80114b8:	ec51 0b19 	vmov	r0, r1, d9
 80114bc:	f7ee fef6 	bl	80002ac <__adddf3>
 80114c0:	2400      	movs	r4, #0
 80114c2:	a379      	add	r3, pc, #484	; (adr r3, 80116a8 <__ieee754_pow+0x9e0>)
 80114c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c8:	4620      	mov	r0, r4
 80114ca:	460d      	mov	r5, r1
 80114cc:	f7ef f8a4 	bl	8000618 <__aeabi_dmul>
 80114d0:	ec53 2b19 	vmov	r2, r3, d9
 80114d4:	4606      	mov	r6, r0
 80114d6:	460f      	mov	r7, r1
 80114d8:	4620      	mov	r0, r4
 80114da:	4629      	mov	r1, r5
 80114dc:	f7ee fee4 	bl	80002a8 <__aeabi_dsub>
 80114e0:	4602      	mov	r2, r0
 80114e2:	460b      	mov	r3, r1
 80114e4:	4640      	mov	r0, r8
 80114e6:	4649      	mov	r1, r9
 80114e8:	f7ee fede 	bl	80002a8 <__aeabi_dsub>
 80114ec:	a370      	add	r3, pc, #448	; (adr r3, 80116b0 <__ieee754_pow+0x9e8>)
 80114ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f2:	f7ef f891 	bl	8000618 <__aeabi_dmul>
 80114f6:	a370      	add	r3, pc, #448	; (adr r3, 80116b8 <__ieee754_pow+0x9f0>)
 80114f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fc:	4680      	mov	r8, r0
 80114fe:	4689      	mov	r9, r1
 8011500:	4620      	mov	r0, r4
 8011502:	4629      	mov	r1, r5
 8011504:	f7ef f888 	bl	8000618 <__aeabi_dmul>
 8011508:	4602      	mov	r2, r0
 801150a:	460b      	mov	r3, r1
 801150c:	4640      	mov	r0, r8
 801150e:	4649      	mov	r1, r9
 8011510:	f7ee fecc 	bl	80002ac <__adddf3>
 8011514:	4604      	mov	r4, r0
 8011516:	460d      	mov	r5, r1
 8011518:	4602      	mov	r2, r0
 801151a:	460b      	mov	r3, r1
 801151c:	4630      	mov	r0, r6
 801151e:	4639      	mov	r1, r7
 8011520:	f7ee fec4 	bl	80002ac <__adddf3>
 8011524:	4632      	mov	r2, r6
 8011526:	463b      	mov	r3, r7
 8011528:	4680      	mov	r8, r0
 801152a:	4689      	mov	r9, r1
 801152c:	f7ee febc 	bl	80002a8 <__aeabi_dsub>
 8011530:	4602      	mov	r2, r0
 8011532:	460b      	mov	r3, r1
 8011534:	4620      	mov	r0, r4
 8011536:	4629      	mov	r1, r5
 8011538:	f7ee feb6 	bl	80002a8 <__aeabi_dsub>
 801153c:	4642      	mov	r2, r8
 801153e:	4606      	mov	r6, r0
 8011540:	460f      	mov	r7, r1
 8011542:	464b      	mov	r3, r9
 8011544:	4640      	mov	r0, r8
 8011546:	4649      	mov	r1, r9
 8011548:	f7ef f866 	bl	8000618 <__aeabi_dmul>
 801154c:	a35c      	add	r3, pc, #368	; (adr r3, 80116c0 <__ieee754_pow+0x9f8>)
 801154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011552:	4604      	mov	r4, r0
 8011554:	460d      	mov	r5, r1
 8011556:	f7ef f85f 	bl	8000618 <__aeabi_dmul>
 801155a:	a35b      	add	r3, pc, #364	; (adr r3, 80116c8 <__ieee754_pow+0xa00>)
 801155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011560:	f7ee fea2 	bl	80002a8 <__aeabi_dsub>
 8011564:	4622      	mov	r2, r4
 8011566:	462b      	mov	r3, r5
 8011568:	f7ef f856 	bl	8000618 <__aeabi_dmul>
 801156c:	a358      	add	r3, pc, #352	; (adr r3, 80116d0 <__ieee754_pow+0xa08>)
 801156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011572:	f7ee fe9b 	bl	80002ac <__adddf3>
 8011576:	4622      	mov	r2, r4
 8011578:	462b      	mov	r3, r5
 801157a:	f7ef f84d 	bl	8000618 <__aeabi_dmul>
 801157e:	a356      	add	r3, pc, #344	; (adr r3, 80116d8 <__ieee754_pow+0xa10>)
 8011580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011584:	f7ee fe90 	bl	80002a8 <__aeabi_dsub>
 8011588:	4622      	mov	r2, r4
 801158a:	462b      	mov	r3, r5
 801158c:	f7ef f844 	bl	8000618 <__aeabi_dmul>
 8011590:	a353      	add	r3, pc, #332	; (adr r3, 80116e0 <__ieee754_pow+0xa18>)
 8011592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011596:	f7ee fe89 	bl	80002ac <__adddf3>
 801159a:	4622      	mov	r2, r4
 801159c:	462b      	mov	r3, r5
 801159e:	f7ef f83b 	bl	8000618 <__aeabi_dmul>
 80115a2:	4602      	mov	r2, r0
 80115a4:	460b      	mov	r3, r1
 80115a6:	4640      	mov	r0, r8
 80115a8:	4649      	mov	r1, r9
 80115aa:	f7ee fe7d 	bl	80002a8 <__aeabi_dsub>
 80115ae:	4604      	mov	r4, r0
 80115b0:	460d      	mov	r5, r1
 80115b2:	4602      	mov	r2, r0
 80115b4:	460b      	mov	r3, r1
 80115b6:	4640      	mov	r0, r8
 80115b8:	4649      	mov	r1, r9
 80115ba:	f7ef f82d 	bl	8000618 <__aeabi_dmul>
 80115be:	2200      	movs	r2, #0
 80115c0:	ec41 0b19 	vmov	d9, r0, r1
 80115c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80115c8:	4620      	mov	r0, r4
 80115ca:	4629      	mov	r1, r5
 80115cc:	f7ee fe6c 	bl	80002a8 <__aeabi_dsub>
 80115d0:	4602      	mov	r2, r0
 80115d2:	460b      	mov	r3, r1
 80115d4:	ec51 0b19 	vmov	r0, r1, d9
 80115d8:	f7ef f948 	bl	800086c <__aeabi_ddiv>
 80115dc:	4632      	mov	r2, r6
 80115de:	4604      	mov	r4, r0
 80115e0:	460d      	mov	r5, r1
 80115e2:	463b      	mov	r3, r7
 80115e4:	4640      	mov	r0, r8
 80115e6:	4649      	mov	r1, r9
 80115e8:	f7ef f816 	bl	8000618 <__aeabi_dmul>
 80115ec:	4632      	mov	r2, r6
 80115ee:	463b      	mov	r3, r7
 80115f0:	f7ee fe5c 	bl	80002ac <__adddf3>
 80115f4:	4602      	mov	r2, r0
 80115f6:	460b      	mov	r3, r1
 80115f8:	4620      	mov	r0, r4
 80115fa:	4629      	mov	r1, r5
 80115fc:	f7ee fe54 	bl	80002a8 <__aeabi_dsub>
 8011600:	4642      	mov	r2, r8
 8011602:	464b      	mov	r3, r9
 8011604:	f7ee fe50 	bl	80002a8 <__aeabi_dsub>
 8011608:	460b      	mov	r3, r1
 801160a:	4602      	mov	r2, r0
 801160c:	493a      	ldr	r1, [pc, #232]	; (80116f8 <__ieee754_pow+0xa30>)
 801160e:	2000      	movs	r0, #0
 8011610:	f7ee fe4a 	bl	80002a8 <__aeabi_dsub>
 8011614:	e9cd 0100 	strd	r0, r1, [sp]
 8011618:	9b01      	ldr	r3, [sp, #4]
 801161a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801161e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011622:	da2f      	bge.n	8011684 <__ieee754_pow+0x9bc>
 8011624:	4650      	mov	r0, sl
 8011626:	ed9d 0b00 	vldr	d0, [sp]
 801162a:	f001 fac1 	bl	8012bb0 <scalbn>
 801162e:	ec51 0b10 	vmov	r0, r1, d0
 8011632:	ec53 2b18 	vmov	r2, r3, d8
 8011636:	f7ff bbe0 	b.w	8010dfa <__ieee754_pow+0x132>
 801163a:	4b30      	ldr	r3, [pc, #192]	; (80116fc <__ieee754_pow+0xa34>)
 801163c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011640:	429e      	cmp	r6, r3
 8011642:	f77f af0b 	ble.w	801145c <__ieee754_pow+0x794>
 8011646:	4b2e      	ldr	r3, [pc, #184]	; (8011700 <__ieee754_pow+0xa38>)
 8011648:	440b      	add	r3, r1
 801164a:	4303      	orrs	r3, r0
 801164c:	d00b      	beq.n	8011666 <__ieee754_pow+0x99e>
 801164e:	a326      	add	r3, pc, #152	; (adr r3, 80116e8 <__ieee754_pow+0xa20>)
 8011650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011654:	ec51 0b18 	vmov	r0, r1, d8
 8011658:	f7ee ffde 	bl	8000618 <__aeabi_dmul>
 801165c:	a322      	add	r3, pc, #136	; (adr r3, 80116e8 <__ieee754_pow+0xa20>)
 801165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011662:	f7ff bbca 	b.w	8010dfa <__ieee754_pow+0x132>
 8011666:	4622      	mov	r2, r4
 8011668:	462b      	mov	r3, r5
 801166a:	f7ee fe1d 	bl	80002a8 <__aeabi_dsub>
 801166e:	4642      	mov	r2, r8
 8011670:	464b      	mov	r3, r9
 8011672:	f7ef fa57 	bl	8000b24 <__aeabi_dcmpge>
 8011676:	2800      	cmp	r0, #0
 8011678:	f43f aef0 	beq.w	801145c <__ieee754_pow+0x794>
 801167c:	e7e7      	b.n	801164e <__ieee754_pow+0x986>
 801167e:	f04f 0a00 	mov.w	sl, #0
 8011682:	e717      	b.n	80114b4 <__ieee754_pow+0x7ec>
 8011684:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011688:	4619      	mov	r1, r3
 801168a:	e7d2      	b.n	8011632 <__ieee754_pow+0x96a>
 801168c:	491a      	ldr	r1, [pc, #104]	; (80116f8 <__ieee754_pow+0xa30>)
 801168e:	2000      	movs	r0, #0
 8011690:	f7ff bb9e 	b.w	8010dd0 <__ieee754_pow+0x108>
 8011694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011698:	f7ff bb9a 	b.w	8010dd0 <__ieee754_pow+0x108>
 801169c:	9000      	str	r0, [sp, #0]
 801169e:	f7ff bb76 	b.w	8010d8e <__ieee754_pow+0xc6>
 80116a2:	2100      	movs	r1, #0
 80116a4:	f7ff bb60 	b.w	8010d68 <__ieee754_pow+0xa0>
 80116a8:	00000000 	.word	0x00000000
 80116ac:	3fe62e43 	.word	0x3fe62e43
 80116b0:	fefa39ef 	.word	0xfefa39ef
 80116b4:	3fe62e42 	.word	0x3fe62e42
 80116b8:	0ca86c39 	.word	0x0ca86c39
 80116bc:	be205c61 	.word	0xbe205c61
 80116c0:	72bea4d0 	.word	0x72bea4d0
 80116c4:	3e663769 	.word	0x3e663769
 80116c8:	c5d26bf1 	.word	0xc5d26bf1
 80116cc:	3ebbbd41 	.word	0x3ebbbd41
 80116d0:	af25de2c 	.word	0xaf25de2c
 80116d4:	3f11566a 	.word	0x3f11566a
 80116d8:	16bebd93 	.word	0x16bebd93
 80116dc:	3f66c16c 	.word	0x3f66c16c
 80116e0:	5555553e 	.word	0x5555553e
 80116e4:	3fc55555 	.word	0x3fc55555
 80116e8:	c2f8f359 	.word	0xc2f8f359
 80116ec:	01a56e1f 	.word	0x01a56e1f
 80116f0:	3fe00000 	.word	0x3fe00000
 80116f4:	000fffff 	.word	0x000fffff
 80116f8:	3ff00000 	.word	0x3ff00000
 80116fc:	4090cbff 	.word	0x4090cbff
 8011700:	3f6f3400 	.word	0x3f6f3400
 8011704:	652b82fe 	.word	0x652b82fe
 8011708:	3c971547 	.word	0x3c971547
 801170c:	00000000 	.word	0x00000000

08011710 <__ieee754_rem_pio2>:
 8011710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011714:	ed2d 8b02 	vpush	{d8}
 8011718:	ec55 4b10 	vmov	r4, r5, d0
 801171c:	4bca      	ldr	r3, [pc, #808]	; (8011a48 <__ieee754_rem_pio2+0x338>)
 801171e:	b08b      	sub	sp, #44	; 0x2c
 8011720:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011724:	4598      	cmp	r8, r3
 8011726:	4682      	mov	sl, r0
 8011728:	9502      	str	r5, [sp, #8]
 801172a:	dc08      	bgt.n	801173e <__ieee754_rem_pio2+0x2e>
 801172c:	2200      	movs	r2, #0
 801172e:	2300      	movs	r3, #0
 8011730:	ed80 0b00 	vstr	d0, [r0]
 8011734:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011738:	f04f 0b00 	mov.w	fp, #0
 801173c:	e028      	b.n	8011790 <__ieee754_rem_pio2+0x80>
 801173e:	4bc3      	ldr	r3, [pc, #780]	; (8011a4c <__ieee754_rem_pio2+0x33c>)
 8011740:	4598      	cmp	r8, r3
 8011742:	dc78      	bgt.n	8011836 <__ieee754_rem_pio2+0x126>
 8011744:	9b02      	ldr	r3, [sp, #8]
 8011746:	4ec2      	ldr	r6, [pc, #776]	; (8011a50 <__ieee754_rem_pio2+0x340>)
 8011748:	2b00      	cmp	r3, #0
 801174a:	ee10 0a10 	vmov	r0, s0
 801174e:	a3b0      	add	r3, pc, #704	; (adr r3, 8011a10 <__ieee754_rem_pio2+0x300>)
 8011750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011754:	4629      	mov	r1, r5
 8011756:	dd39      	ble.n	80117cc <__ieee754_rem_pio2+0xbc>
 8011758:	f7ee fda6 	bl	80002a8 <__aeabi_dsub>
 801175c:	45b0      	cmp	r8, r6
 801175e:	4604      	mov	r4, r0
 8011760:	460d      	mov	r5, r1
 8011762:	d01b      	beq.n	801179c <__ieee754_rem_pio2+0x8c>
 8011764:	a3ac      	add	r3, pc, #688	; (adr r3, 8011a18 <__ieee754_rem_pio2+0x308>)
 8011766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801176a:	f7ee fd9d 	bl	80002a8 <__aeabi_dsub>
 801176e:	4602      	mov	r2, r0
 8011770:	460b      	mov	r3, r1
 8011772:	e9ca 2300 	strd	r2, r3, [sl]
 8011776:	4620      	mov	r0, r4
 8011778:	4629      	mov	r1, r5
 801177a:	f7ee fd95 	bl	80002a8 <__aeabi_dsub>
 801177e:	a3a6      	add	r3, pc, #664	; (adr r3, 8011a18 <__ieee754_rem_pio2+0x308>)
 8011780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011784:	f7ee fd90 	bl	80002a8 <__aeabi_dsub>
 8011788:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801178c:	f04f 0b01 	mov.w	fp, #1
 8011790:	4658      	mov	r0, fp
 8011792:	b00b      	add	sp, #44	; 0x2c
 8011794:	ecbd 8b02 	vpop	{d8}
 8011798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801179c:	a3a0      	add	r3, pc, #640	; (adr r3, 8011a20 <__ieee754_rem_pio2+0x310>)
 801179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a2:	f7ee fd81 	bl	80002a8 <__aeabi_dsub>
 80117a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8011a28 <__ieee754_rem_pio2+0x318>)
 80117a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ac:	4604      	mov	r4, r0
 80117ae:	460d      	mov	r5, r1
 80117b0:	f7ee fd7a 	bl	80002a8 <__aeabi_dsub>
 80117b4:	4602      	mov	r2, r0
 80117b6:	460b      	mov	r3, r1
 80117b8:	e9ca 2300 	strd	r2, r3, [sl]
 80117bc:	4620      	mov	r0, r4
 80117be:	4629      	mov	r1, r5
 80117c0:	f7ee fd72 	bl	80002a8 <__aeabi_dsub>
 80117c4:	a398      	add	r3, pc, #608	; (adr r3, 8011a28 <__ieee754_rem_pio2+0x318>)
 80117c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ca:	e7db      	b.n	8011784 <__ieee754_rem_pio2+0x74>
 80117cc:	f7ee fd6e 	bl	80002ac <__adddf3>
 80117d0:	45b0      	cmp	r8, r6
 80117d2:	4604      	mov	r4, r0
 80117d4:	460d      	mov	r5, r1
 80117d6:	d016      	beq.n	8011806 <__ieee754_rem_pio2+0xf6>
 80117d8:	a38f      	add	r3, pc, #572	; (adr r3, 8011a18 <__ieee754_rem_pio2+0x308>)
 80117da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117de:	f7ee fd65 	bl	80002ac <__adddf3>
 80117e2:	4602      	mov	r2, r0
 80117e4:	460b      	mov	r3, r1
 80117e6:	e9ca 2300 	strd	r2, r3, [sl]
 80117ea:	4620      	mov	r0, r4
 80117ec:	4629      	mov	r1, r5
 80117ee:	f7ee fd5b 	bl	80002a8 <__aeabi_dsub>
 80117f2:	a389      	add	r3, pc, #548	; (adr r3, 8011a18 <__ieee754_rem_pio2+0x308>)
 80117f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f8:	f7ee fd58 	bl	80002ac <__adddf3>
 80117fc:	f04f 3bff 	mov.w	fp, #4294967295
 8011800:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011804:	e7c4      	b.n	8011790 <__ieee754_rem_pio2+0x80>
 8011806:	a386      	add	r3, pc, #536	; (adr r3, 8011a20 <__ieee754_rem_pio2+0x310>)
 8011808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180c:	f7ee fd4e 	bl	80002ac <__adddf3>
 8011810:	a385      	add	r3, pc, #532	; (adr r3, 8011a28 <__ieee754_rem_pio2+0x318>)
 8011812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011816:	4604      	mov	r4, r0
 8011818:	460d      	mov	r5, r1
 801181a:	f7ee fd47 	bl	80002ac <__adddf3>
 801181e:	4602      	mov	r2, r0
 8011820:	460b      	mov	r3, r1
 8011822:	e9ca 2300 	strd	r2, r3, [sl]
 8011826:	4620      	mov	r0, r4
 8011828:	4629      	mov	r1, r5
 801182a:	f7ee fd3d 	bl	80002a8 <__aeabi_dsub>
 801182e:	a37e      	add	r3, pc, #504	; (adr r3, 8011a28 <__ieee754_rem_pio2+0x318>)
 8011830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011834:	e7e0      	b.n	80117f8 <__ieee754_rem_pio2+0xe8>
 8011836:	4b87      	ldr	r3, [pc, #540]	; (8011a54 <__ieee754_rem_pio2+0x344>)
 8011838:	4598      	cmp	r8, r3
 801183a:	f300 80d9 	bgt.w	80119f0 <__ieee754_rem_pio2+0x2e0>
 801183e:	f001 f88f 	bl	8012960 <fabs>
 8011842:	ec55 4b10 	vmov	r4, r5, d0
 8011846:	ee10 0a10 	vmov	r0, s0
 801184a:	a379      	add	r3, pc, #484	; (adr r3, 8011a30 <__ieee754_rem_pio2+0x320>)
 801184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011850:	4629      	mov	r1, r5
 8011852:	f7ee fee1 	bl	8000618 <__aeabi_dmul>
 8011856:	4b80      	ldr	r3, [pc, #512]	; (8011a58 <__ieee754_rem_pio2+0x348>)
 8011858:	2200      	movs	r2, #0
 801185a:	f7ee fd27 	bl	80002ac <__adddf3>
 801185e:	f7ef f98b 	bl	8000b78 <__aeabi_d2iz>
 8011862:	4683      	mov	fp, r0
 8011864:	f7ee fe6e 	bl	8000544 <__aeabi_i2d>
 8011868:	4602      	mov	r2, r0
 801186a:	460b      	mov	r3, r1
 801186c:	ec43 2b18 	vmov	d8, r2, r3
 8011870:	a367      	add	r3, pc, #412	; (adr r3, 8011a10 <__ieee754_rem_pio2+0x300>)
 8011872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011876:	f7ee fecf 	bl	8000618 <__aeabi_dmul>
 801187a:	4602      	mov	r2, r0
 801187c:	460b      	mov	r3, r1
 801187e:	4620      	mov	r0, r4
 8011880:	4629      	mov	r1, r5
 8011882:	f7ee fd11 	bl	80002a8 <__aeabi_dsub>
 8011886:	a364      	add	r3, pc, #400	; (adr r3, 8011a18 <__ieee754_rem_pio2+0x308>)
 8011888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188c:	4606      	mov	r6, r0
 801188e:	460f      	mov	r7, r1
 8011890:	ec51 0b18 	vmov	r0, r1, d8
 8011894:	f7ee fec0 	bl	8000618 <__aeabi_dmul>
 8011898:	f1bb 0f1f 	cmp.w	fp, #31
 801189c:	4604      	mov	r4, r0
 801189e:	460d      	mov	r5, r1
 80118a0:	dc0d      	bgt.n	80118be <__ieee754_rem_pio2+0x1ae>
 80118a2:	4b6e      	ldr	r3, [pc, #440]	; (8011a5c <__ieee754_rem_pio2+0x34c>)
 80118a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80118a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118ac:	4543      	cmp	r3, r8
 80118ae:	d006      	beq.n	80118be <__ieee754_rem_pio2+0x1ae>
 80118b0:	4622      	mov	r2, r4
 80118b2:	462b      	mov	r3, r5
 80118b4:	4630      	mov	r0, r6
 80118b6:	4639      	mov	r1, r7
 80118b8:	f7ee fcf6 	bl	80002a8 <__aeabi_dsub>
 80118bc:	e00f      	b.n	80118de <__ieee754_rem_pio2+0x1ce>
 80118be:	462b      	mov	r3, r5
 80118c0:	4622      	mov	r2, r4
 80118c2:	4630      	mov	r0, r6
 80118c4:	4639      	mov	r1, r7
 80118c6:	f7ee fcef 	bl	80002a8 <__aeabi_dsub>
 80118ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80118ce:	9303      	str	r3, [sp, #12]
 80118d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80118d4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80118d8:	f1b8 0f10 	cmp.w	r8, #16
 80118dc:	dc02      	bgt.n	80118e4 <__ieee754_rem_pio2+0x1d4>
 80118de:	e9ca 0100 	strd	r0, r1, [sl]
 80118e2:	e039      	b.n	8011958 <__ieee754_rem_pio2+0x248>
 80118e4:	a34e      	add	r3, pc, #312	; (adr r3, 8011a20 <__ieee754_rem_pio2+0x310>)
 80118e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ea:	ec51 0b18 	vmov	r0, r1, d8
 80118ee:	f7ee fe93 	bl	8000618 <__aeabi_dmul>
 80118f2:	4604      	mov	r4, r0
 80118f4:	460d      	mov	r5, r1
 80118f6:	4602      	mov	r2, r0
 80118f8:	460b      	mov	r3, r1
 80118fa:	4630      	mov	r0, r6
 80118fc:	4639      	mov	r1, r7
 80118fe:	f7ee fcd3 	bl	80002a8 <__aeabi_dsub>
 8011902:	4602      	mov	r2, r0
 8011904:	460b      	mov	r3, r1
 8011906:	4680      	mov	r8, r0
 8011908:	4689      	mov	r9, r1
 801190a:	4630      	mov	r0, r6
 801190c:	4639      	mov	r1, r7
 801190e:	f7ee fccb 	bl	80002a8 <__aeabi_dsub>
 8011912:	4622      	mov	r2, r4
 8011914:	462b      	mov	r3, r5
 8011916:	f7ee fcc7 	bl	80002a8 <__aeabi_dsub>
 801191a:	a343      	add	r3, pc, #268	; (adr r3, 8011a28 <__ieee754_rem_pio2+0x318>)
 801191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011920:	4604      	mov	r4, r0
 8011922:	460d      	mov	r5, r1
 8011924:	ec51 0b18 	vmov	r0, r1, d8
 8011928:	f7ee fe76 	bl	8000618 <__aeabi_dmul>
 801192c:	4622      	mov	r2, r4
 801192e:	462b      	mov	r3, r5
 8011930:	f7ee fcba 	bl	80002a8 <__aeabi_dsub>
 8011934:	4602      	mov	r2, r0
 8011936:	460b      	mov	r3, r1
 8011938:	4604      	mov	r4, r0
 801193a:	460d      	mov	r5, r1
 801193c:	4640      	mov	r0, r8
 801193e:	4649      	mov	r1, r9
 8011940:	f7ee fcb2 	bl	80002a8 <__aeabi_dsub>
 8011944:	9a03      	ldr	r2, [sp, #12]
 8011946:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801194a:	1ad3      	subs	r3, r2, r3
 801194c:	2b31      	cmp	r3, #49	; 0x31
 801194e:	dc24      	bgt.n	801199a <__ieee754_rem_pio2+0x28a>
 8011950:	e9ca 0100 	strd	r0, r1, [sl]
 8011954:	4646      	mov	r6, r8
 8011956:	464f      	mov	r7, r9
 8011958:	e9da 8900 	ldrd	r8, r9, [sl]
 801195c:	4630      	mov	r0, r6
 801195e:	4642      	mov	r2, r8
 8011960:	464b      	mov	r3, r9
 8011962:	4639      	mov	r1, r7
 8011964:	f7ee fca0 	bl	80002a8 <__aeabi_dsub>
 8011968:	462b      	mov	r3, r5
 801196a:	4622      	mov	r2, r4
 801196c:	f7ee fc9c 	bl	80002a8 <__aeabi_dsub>
 8011970:	9b02      	ldr	r3, [sp, #8]
 8011972:	2b00      	cmp	r3, #0
 8011974:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011978:	f6bf af0a 	bge.w	8011790 <__ieee754_rem_pio2+0x80>
 801197c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011980:	f8ca 3004 	str.w	r3, [sl, #4]
 8011984:	f8ca 8000 	str.w	r8, [sl]
 8011988:	f8ca 0008 	str.w	r0, [sl, #8]
 801198c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011990:	f8ca 300c 	str.w	r3, [sl, #12]
 8011994:	f1cb 0b00 	rsb	fp, fp, #0
 8011998:	e6fa      	b.n	8011790 <__ieee754_rem_pio2+0x80>
 801199a:	a327      	add	r3, pc, #156	; (adr r3, 8011a38 <__ieee754_rem_pio2+0x328>)
 801199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a0:	ec51 0b18 	vmov	r0, r1, d8
 80119a4:	f7ee fe38 	bl	8000618 <__aeabi_dmul>
 80119a8:	4604      	mov	r4, r0
 80119aa:	460d      	mov	r5, r1
 80119ac:	4602      	mov	r2, r0
 80119ae:	460b      	mov	r3, r1
 80119b0:	4640      	mov	r0, r8
 80119b2:	4649      	mov	r1, r9
 80119b4:	f7ee fc78 	bl	80002a8 <__aeabi_dsub>
 80119b8:	4602      	mov	r2, r0
 80119ba:	460b      	mov	r3, r1
 80119bc:	4606      	mov	r6, r0
 80119be:	460f      	mov	r7, r1
 80119c0:	4640      	mov	r0, r8
 80119c2:	4649      	mov	r1, r9
 80119c4:	f7ee fc70 	bl	80002a8 <__aeabi_dsub>
 80119c8:	4622      	mov	r2, r4
 80119ca:	462b      	mov	r3, r5
 80119cc:	f7ee fc6c 	bl	80002a8 <__aeabi_dsub>
 80119d0:	a31b      	add	r3, pc, #108	; (adr r3, 8011a40 <__ieee754_rem_pio2+0x330>)
 80119d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d6:	4604      	mov	r4, r0
 80119d8:	460d      	mov	r5, r1
 80119da:	ec51 0b18 	vmov	r0, r1, d8
 80119de:	f7ee fe1b 	bl	8000618 <__aeabi_dmul>
 80119e2:	4622      	mov	r2, r4
 80119e4:	462b      	mov	r3, r5
 80119e6:	f7ee fc5f 	bl	80002a8 <__aeabi_dsub>
 80119ea:	4604      	mov	r4, r0
 80119ec:	460d      	mov	r5, r1
 80119ee:	e75f      	b.n	80118b0 <__ieee754_rem_pio2+0x1a0>
 80119f0:	4b1b      	ldr	r3, [pc, #108]	; (8011a60 <__ieee754_rem_pio2+0x350>)
 80119f2:	4598      	cmp	r8, r3
 80119f4:	dd36      	ble.n	8011a64 <__ieee754_rem_pio2+0x354>
 80119f6:	ee10 2a10 	vmov	r2, s0
 80119fa:	462b      	mov	r3, r5
 80119fc:	4620      	mov	r0, r4
 80119fe:	4629      	mov	r1, r5
 8011a00:	f7ee fc52 	bl	80002a8 <__aeabi_dsub>
 8011a04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011a08:	e9ca 0100 	strd	r0, r1, [sl]
 8011a0c:	e694      	b.n	8011738 <__ieee754_rem_pio2+0x28>
 8011a0e:	bf00      	nop
 8011a10:	54400000 	.word	0x54400000
 8011a14:	3ff921fb 	.word	0x3ff921fb
 8011a18:	1a626331 	.word	0x1a626331
 8011a1c:	3dd0b461 	.word	0x3dd0b461
 8011a20:	1a600000 	.word	0x1a600000
 8011a24:	3dd0b461 	.word	0x3dd0b461
 8011a28:	2e037073 	.word	0x2e037073
 8011a2c:	3ba3198a 	.word	0x3ba3198a
 8011a30:	6dc9c883 	.word	0x6dc9c883
 8011a34:	3fe45f30 	.word	0x3fe45f30
 8011a38:	2e000000 	.word	0x2e000000
 8011a3c:	3ba3198a 	.word	0x3ba3198a
 8011a40:	252049c1 	.word	0x252049c1
 8011a44:	397b839a 	.word	0x397b839a
 8011a48:	3fe921fb 	.word	0x3fe921fb
 8011a4c:	4002d97b 	.word	0x4002d97b
 8011a50:	3ff921fb 	.word	0x3ff921fb
 8011a54:	413921fb 	.word	0x413921fb
 8011a58:	3fe00000 	.word	0x3fe00000
 8011a5c:	08013090 	.word	0x08013090
 8011a60:	7fefffff 	.word	0x7fefffff
 8011a64:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011a68:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8011a6c:	ee10 0a10 	vmov	r0, s0
 8011a70:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8011a74:	ee10 6a10 	vmov	r6, s0
 8011a78:	460f      	mov	r7, r1
 8011a7a:	f7ef f87d 	bl	8000b78 <__aeabi_d2iz>
 8011a7e:	f7ee fd61 	bl	8000544 <__aeabi_i2d>
 8011a82:	4602      	mov	r2, r0
 8011a84:	460b      	mov	r3, r1
 8011a86:	4630      	mov	r0, r6
 8011a88:	4639      	mov	r1, r7
 8011a8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011a8e:	f7ee fc0b 	bl	80002a8 <__aeabi_dsub>
 8011a92:	4b22      	ldr	r3, [pc, #136]	; (8011b1c <__ieee754_rem_pio2+0x40c>)
 8011a94:	2200      	movs	r2, #0
 8011a96:	f7ee fdbf 	bl	8000618 <__aeabi_dmul>
 8011a9a:	460f      	mov	r7, r1
 8011a9c:	4606      	mov	r6, r0
 8011a9e:	f7ef f86b 	bl	8000b78 <__aeabi_d2iz>
 8011aa2:	f7ee fd4f 	bl	8000544 <__aeabi_i2d>
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	4630      	mov	r0, r6
 8011aac:	4639      	mov	r1, r7
 8011aae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011ab2:	f7ee fbf9 	bl	80002a8 <__aeabi_dsub>
 8011ab6:	4b19      	ldr	r3, [pc, #100]	; (8011b1c <__ieee754_rem_pio2+0x40c>)
 8011ab8:	2200      	movs	r2, #0
 8011aba:	f7ee fdad 	bl	8000618 <__aeabi_dmul>
 8011abe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011ac2:	ad04      	add	r5, sp, #16
 8011ac4:	f04f 0803 	mov.w	r8, #3
 8011ac8:	46a9      	mov	r9, r5
 8011aca:	2600      	movs	r6, #0
 8011acc:	2700      	movs	r7, #0
 8011ace:	4632      	mov	r2, r6
 8011ad0:	463b      	mov	r3, r7
 8011ad2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011ad6:	46c3      	mov	fp, r8
 8011ad8:	3d08      	subs	r5, #8
 8011ada:	f108 38ff 	add.w	r8, r8, #4294967295
 8011ade:	f7ef f803 	bl	8000ae8 <__aeabi_dcmpeq>
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	d1f3      	bne.n	8011ace <__ieee754_rem_pio2+0x3be>
 8011ae6:	4b0e      	ldr	r3, [pc, #56]	; (8011b20 <__ieee754_rem_pio2+0x410>)
 8011ae8:	9301      	str	r3, [sp, #4]
 8011aea:	2302      	movs	r3, #2
 8011aec:	9300      	str	r3, [sp, #0]
 8011aee:	4622      	mov	r2, r4
 8011af0:	465b      	mov	r3, fp
 8011af2:	4651      	mov	r1, sl
 8011af4:	4648      	mov	r0, r9
 8011af6:	f000 f993 	bl	8011e20 <__kernel_rem_pio2>
 8011afa:	9b02      	ldr	r3, [sp, #8]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	4683      	mov	fp, r0
 8011b00:	f6bf ae46 	bge.w	8011790 <__ieee754_rem_pio2+0x80>
 8011b04:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011b08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011b0c:	f8ca 3004 	str.w	r3, [sl, #4]
 8011b10:	f8da 300c 	ldr.w	r3, [sl, #12]
 8011b14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011b18:	e73a      	b.n	8011990 <__ieee754_rem_pio2+0x280>
 8011b1a:	bf00      	nop
 8011b1c:	41700000 	.word	0x41700000
 8011b20:	08013110 	.word	0x08013110

08011b24 <__ieee754_sqrt>:
 8011b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b28:	ec55 4b10 	vmov	r4, r5, d0
 8011b2c:	4e56      	ldr	r6, [pc, #344]	; (8011c88 <__ieee754_sqrt+0x164>)
 8011b2e:	43ae      	bics	r6, r5
 8011b30:	ee10 0a10 	vmov	r0, s0
 8011b34:	ee10 3a10 	vmov	r3, s0
 8011b38:	4629      	mov	r1, r5
 8011b3a:	462a      	mov	r2, r5
 8011b3c:	d110      	bne.n	8011b60 <__ieee754_sqrt+0x3c>
 8011b3e:	ee10 2a10 	vmov	r2, s0
 8011b42:	462b      	mov	r3, r5
 8011b44:	f7ee fd68 	bl	8000618 <__aeabi_dmul>
 8011b48:	4602      	mov	r2, r0
 8011b4a:	460b      	mov	r3, r1
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	4629      	mov	r1, r5
 8011b50:	f7ee fbac 	bl	80002ac <__adddf3>
 8011b54:	4604      	mov	r4, r0
 8011b56:	460d      	mov	r5, r1
 8011b58:	ec45 4b10 	vmov	d0, r4, r5
 8011b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b60:	2d00      	cmp	r5, #0
 8011b62:	dc10      	bgt.n	8011b86 <__ieee754_sqrt+0x62>
 8011b64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011b68:	4330      	orrs	r0, r6
 8011b6a:	d0f5      	beq.n	8011b58 <__ieee754_sqrt+0x34>
 8011b6c:	b15d      	cbz	r5, 8011b86 <__ieee754_sqrt+0x62>
 8011b6e:	ee10 2a10 	vmov	r2, s0
 8011b72:	462b      	mov	r3, r5
 8011b74:	ee10 0a10 	vmov	r0, s0
 8011b78:	f7ee fb96 	bl	80002a8 <__aeabi_dsub>
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	460b      	mov	r3, r1
 8011b80:	f7ee fe74 	bl	800086c <__aeabi_ddiv>
 8011b84:	e7e6      	b.n	8011b54 <__ieee754_sqrt+0x30>
 8011b86:	1509      	asrs	r1, r1, #20
 8011b88:	d076      	beq.n	8011c78 <__ieee754_sqrt+0x154>
 8011b8a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011b8e:	07ce      	lsls	r6, r1, #31
 8011b90:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8011b94:	bf5e      	ittt	pl
 8011b96:	0fda      	lsrpl	r2, r3, #31
 8011b98:	005b      	lslpl	r3, r3, #1
 8011b9a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8011b9e:	0fda      	lsrs	r2, r3, #31
 8011ba0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8011ba4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8011ba8:	2000      	movs	r0, #0
 8011baa:	106d      	asrs	r5, r5, #1
 8011bac:	005b      	lsls	r3, r3, #1
 8011bae:	f04f 0e16 	mov.w	lr, #22
 8011bb2:	4684      	mov	ip, r0
 8011bb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011bb8:	eb0c 0401 	add.w	r4, ip, r1
 8011bbc:	4294      	cmp	r4, r2
 8011bbe:	bfde      	ittt	le
 8011bc0:	1b12      	suble	r2, r2, r4
 8011bc2:	eb04 0c01 	addle.w	ip, r4, r1
 8011bc6:	1840      	addle	r0, r0, r1
 8011bc8:	0052      	lsls	r2, r2, #1
 8011bca:	f1be 0e01 	subs.w	lr, lr, #1
 8011bce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011bd2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011bd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011bda:	d1ed      	bne.n	8011bb8 <__ieee754_sqrt+0x94>
 8011bdc:	4671      	mov	r1, lr
 8011bde:	2720      	movs	r7, #32
 8011be0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011be4:	4562      	cmp	r2, ip
 8011be6:	eb04 060e 	add.w	r6, r4, lr
 8011bea:	dc02      	bgt.n	8011bf2 <__ieee754_sqrt+0xce>
 8011bec:	d113      	bne.n	8011c16 <__ieee754_sqrt+0xf2>
 8011bee:	429e      	cmp	r6, r3
 8011bf0:	d811      	bhi.n	8011c16 <__ieee754_sqrt+0xf2>
 8011bf2:	2e00      	cmp	r6, #0
 8011bf4:	eb06 0e04 	add.w	lr, r6, r4
 8011bf8:	da43      	bge.n	8011c82 <__ieee754_sqrt+0x15e>
 8011bfa:	f1be 0f00 	cmp.w	lr, #0
 8011bfe:	db40      	blt.n	8011c82 <__ieee754_sqrt+0x15e>
 8011c00:	f10c 0801 	add.w	r8, ip, #1
 8011c04:	eba2 020c 	sub.w	r2, r2, ip
 8011c08:	429e      	cmp	r6, r3
 8011c0a:	bf88      	it	hi
 8011c0c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011c10:	1b9b      	subs	r3, r3, r6
 8011c12:	4421      	add	r1, r4
 8011c14:	46c4      	mov	ip, r8
 8011c16:	0052      	lsls	r2, r2, #1
 8011c18:	3f01      	subs	r7, #1
 8011c1a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011c1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011c22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011c26:	d1dd      	bne.n	8011be4 <__ieee754_sqrt+0xc0>
 8011c28:	4313      	orrs	r3, r2
 8011c2a:	d006      	beq.n	8011c3a <__ieee754_sqrt+0x116>
 8011c2c:	1c4c      	adds	r4, r1, #1
 8011c2e:	bf13      	iteet	ne
 8011c30:	3101      	addne	r1, #1
 8011c32:	3001      	addeq	r0, #1
 8011c34:	4639      	moveq	r1, r7
 8011c36:	f021 0101 	bicne.w	r1, r1, #1
 8011c3a:	1043      	asrs	r3, r0, #1
 8011c3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011c40:	0849      	lsrs	r1, r1, #1
 8011c42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011c46:	07c2      	lsls	r2, r0, #31
 8011c48:	bf48      	it	mi
 8011c4a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8011c4e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8011c52:	460c      	mov	r4, r1
 8011c54:	463d      	mov	r5, r7
 8011c56:	e77f      	b.n	8011b58 <__ieee754_sqrt+0x34>
 8011c58:	0ada      	lsrs	r2, r3, #11
 8011c5a:	3815      	subs	r0, #21
 8011c5c:	055b      	lsls	r3, r3, #21
 8011c5e:	2a00      	cmp	r2, #0
 8011c60:	d0fa      	beq.n	8011c58 <__ieee754_sqrt+0x134>
 8011c62:	02d7      	lsls	r7, r2, #11
 8011c64:	d50a      	bpl.n	8011c7c <__ieee754_sqrt+0x158>
 8011c66:	f1c1 0420 	rsb	r4, r1, #32
 8011c6a:	fa23 f404 	lsr.w	r4, r3, r4
 8011c6e:	1e4d      	subs	r5, r1, #1
 8011c70:	408b      	lsls	r3, r1
 8011c72:	4322      	orrs	r2, r4
 8011c74:	1b41      	subs	r1, r0, r5
 8011c76:	e788      	b.n	8011b8a <__ieee754_sqrt+0x66>
 8011c78:	4608      	mov	r0, r1
 8011c7a:	e7f0      	b.n	8011c5e <__ieee754_sqrt+0x13a>
 8011c7c:	0052      	lsls	r2, r2, #1
 8011c7e:	3101      	adds	r1, #1
 8011c80:	e7ef      	b.n	8011c62 <__ieee754_sqrt+0x13e>
 8011c82:	46e0      	mov	r8, ip
 8011c84:	e7be      	b.n	8011c04 <__ieee754_sqrt+0xe0>
 8011c86:	bf00      	nop
 8011c88:	7ff00000 	.word	0x7ff00000
 8011c8c:	00000000 	.word	0x00000000

08011c90 <__kernel_cos>:
 8011c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c94:	ec57 6b10 	vmov	r6, r7, d0
 8011c98:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011c9c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011ca0:	ed8d 1b00 	vstr	d1, [sp]
 8011ca4:	da07      	bge.n	8011cb6 <__kernel_cos+0x26>
 8011ca6:	ee10 0a10 	vmov	r0, s0
 8011caa:	4639      	mov	r1, r7
 8011cac:	f7ee ff64 	bl	8000b78 <__aeabi_d2iz>
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	f000 8088 	beq.w	8011dc6 <__kernel_cos+0x136>
 8011cb6:	4632      	mov	r2, r6
 8011cb8:	463b      	mov	r3, r7
 8011cba:	4630      	mov	r0, r6
 8011cbc:	4639      	mov	r1, r7
 8011cbe:	f7ee fcab 	bl	8000618 <__aeabi_dmul>
 8011cc2:	4b51      	ldr	r3, [pc, #324]	; (8011e08 <__kernel_cos+0x178>)
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	4604      	mov	r4, r0
 8011cc8:	460d      	mov	r5, r1
 8011cca:	f7ee fca5 	bl	8000618 <__aeabi_dmul>
 8011cce:	a340      	add	r3, pc, #256	; (adr r3, 8011dd0 <__kernel_cos+0x140>)
 8011cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd4:	4682      	mov	sl, r0
 8011cd6:	468b      	mov	fp, r1
 8011cd8:	4620      	mov	r0, r4
 8011cda:	4629      	mov	r1, r5
 8011cdc:	f7ee fc9c 	bl	8000618 <__aeabi_dmul>
 8011ce0:	a33d      	add	r3, pc, #244	; (adr r3, 8011dd8 <__kernel_cos+0x148>)
 8011ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce6:	f7ee fae1 	bl	80002ac <__adddf3>
 8011cea:	4622      	mov	r2, r4
 8011cec:	462b      	mov	r3, r5
 8011cee:	f7ee fc93 	bl	8000618 <__aeabi_dmul>
 8011cf2:	a33b      	add	r3, pc, #236	; (adr r3, 8011de0 <__kernel_cos+0x150>)
 8011cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf8:	f7ee fad6 	bl	80002a8 <__aeabi_dsub>
 8011cfc:	4622      	mov	r2, r4
 8011cfe:	462b      	mov	r3, r5
 8011d00:	f7ee fc8a 	bl	8000618 <__aeabi_dmul>
 8011d04:	a338      	add	r3, pc, #224	; (adr r3, 8011de8 <__kernel_cos+0x158>)
 8011d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d0a:	f7ee facf 	bl	80002ac <__adddf3>
 8011d0e:	4622      	mov	r2, r4
 8011d10:	462b      	mov	r3, r5
 8011d12:	f7ee fc81 	bl	8000618 <__aeabi_dmul>
 8011d16:	a336      	add	r3, pc, #216	; (adr r3, 8011df0 <__kernel_cos+0x160>)
 8011d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d1c:	f7ee fac4 	bl	80002a8 <__aeabi_dsub>
 8011d20:	4622      	mov	r2, r4
 8011d22:	462b      	mov	r3, r5
 8011d24:	f7ee fc78 	bl	8000618 <__aeabi_dmul>
 8011d28:	a333      	add	r3, pc, #204	; (adr r3, 8011df8 <__kernel_cos+0x168>)
 8011d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d2e:	f7ee fabd 	bl	80002ac <__adddf3>
 8011d32:	4622      	mov	r2, r4
 8011d34:	462b      	mov	r3, r5
 8011d36:	f7ee fc6f 	bl	8000618 <__aeabi_dmul>
 8011d3a:	4622      	mov	r2, r4
 8011d3c:	462b      	mov	r3, r5
 8011d3e:	f7ee fc6b 	bl	8000618 <__aeabi_dmul>
 8011d42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d46:	4604      	mov	r4, r0
 8011d48:	460d      	mov	r5, r1
 8011d4a:	4630      	mov	r0, r6
 8011d4c:	4639      	mov	r1, r7
 8011d4e:	f7ee fc63 	bl	8000618 <__aeabi_dmul>
 8011d52:	460b      	mov	r3, r1
 8011d54:	4602      	mov	r2, r0
 8011d56:	4629      	mov	r1, r5
 8011d58:	4620      	mov	r0, r4
 8011d5a:	f7ee faa5 	bl	80002a8 <__aeabi_dsub>
 8011d5e:	4b2b      	ldr	r3, [pc, #172]	; (8011e0c <__kernel_cos+0x17c>)
 8011d60:	4598      	cmp	r8, r3
 8011d62:	4606      	mov	r6, r0
 8011d64:	460f      	mov	r7, r1
 8011d66:	dc10      	bgt.n	8011d8a <__kernel_cos+0xfa>
 8011d68:	4602      	mov	r2, r0
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	4650      	mov	r0, sl
 8011d6e:	4659      	mov	r1, fp
 8011d70:	f7ee fa9a 	bl	80002a8 <__aeabi_dsub>
 8011d74:	460b      	mov	r3, r1
 8011d76:	4926      	ldr	r1, [pc, #152]	; (8011e10 <__kernel_cos+0x180>)
 8011d78:	4602      	mov	r2, r0
 8011d7a:	2000      	movs	r0, #0
 8011d7c:	f7ee fa94 	bl	80002a8 <__aeabi_dsub>
 8011d80:	ec41 0b10 	vmov	d0, r0, r1
 8011d84:	b003      	add	sp, #12
 8011d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d8a:	4b22      	ldr	r3, [pc, #136]	; (8011e14 <__kernel_cos+0x184>)
 8011d8c:	4920      	ldr	r1, [pc, #128]	; (8011e10 <__kernel_cos+0x180>)
 8011d8e:	4598      	cmp	r8, r3
 8011d90:	bfcc      	ite	gt
 8011d92:	4d21      	ldrgt	r5, [pc, #132]	; (8011e18 <__kernel_cos+0x188>)
 8011d94:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011d98:	2400      	movs	r4, #0
 8011d9a:	4622      	mov	r2, r4
 8011d9c:	462b      	mov	r3, r5
 8011d9e:	2000      	movs	r0, #0
 8011da0:	f7ee fa82 	bl	80002a8 <__aeabi_dsub>
 8011da4:	4622      	mov	r2, r4
 8011da6:	4680      	mov	r8, r0
 8011da8:	4689      	mov	r9, r1
 8011daa:	462b      	mov	r3, r5
 8011dac:	4650      	mov	r0, sl
 8011dae:	4659      	mov	r1, fp
 8011db0:	f7ee fa7a 	bl	80002a8 <__aeabi_dsub>
 8011db4:	4632      	mov	r2, r6
 8011db6:	463b      	mov	r3, r7
 8011db8:	f7ee fa76 	bl	80002a8 <__aeabi_dsub>
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	460b      	mov	r3, r1
 8011dc0:	4640      	mov	r0, r8
 8011dc2:	4649      	mov	r1, r9
 8011dc4:	e7da      	b.n	8011d7c <__kernel_cos+0xec>
 8011dc6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011e00 <__kernel_cos+0x170>
 8011dca:	e7db      	b.n	8011d84 <__kernel_cos+0xf4>
 8011dcc:	f3af 8000 	nop.w
 8011dd0:	be8838d4 	.word	0xbe8838d4
 8011dd4:	bda8fae9 	.word	0xbda8fae9
 8011dd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8011ddc:	3e21ee9e 	.word	0x3e21ee9e
 8011de0:	809c52ad 	.word	0x809c52ad
 8011de4:	3e927e4f 	.word	0x3e927e4f
 8011de8:	19cb1590 	.word	0x19cb1590
 8011dec:	3efa01a0 	.word	0x3efa01a0
 8011df0:	16c15177 	.word	0x16c15177
 8011df4:	3f56c16c 	.word	0x3f56c16c
 8011df8:	5555554c 	.word	0x5555554c
 8011dfc:	3fa55555 	.word	0x3fa55555
 8011e00:	00000000 	.word	0x00000000
 8011e04:	3ff00000 	.word	0x3ff00000
 8011e08:	3fe00000 	.word	0x3fe00000
 8011e0c:	3fd33332 	.word	0x3fd33332
 8011e10:	3ff00000 	.word	0x3ff00000
 8011e14:	3fe90000 	.word	0x3fe90000
 8011e18:	3fd20000 	.word	0x3fd20000
 8011e1c:	00000000 	.word	0x00000000

08011e20 <__kernel_rem_pio2>:
 8011e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e24:	ed2d 8b02 	vpush	{d8}
 8011e28:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011e2c:	f112 0f14 	cmn.w	r2, #20
 8011e30:	9308      	str	r3, [sp, #32]
 8011e32:	9101      	str	r1, [sp, #4]
 8011e34:	4bc6      	ldr	r3, [pc, #792]	; (8012150 <__kernel_rem_pio2+0x330>)
 8011e36:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8011e38:	9009      	str	r0, [sp, #36]	; 0x24
 8011e3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e3e:	9304      	str	r3, [sp, #16]
 8011e40:	9b08      	ldr	r3, [sp, #32]
 8011e42:	f103 33ff 	add.w	r3, r3, #4294967295
 8011e46:	bfa8      	it	ge
 8011e48:	1ed4      	subge	r4, r2, #3
 8011e4a:	9306      	str	r3, [sp, #24]
 8011e4c:	bfb2      	itee	lt
 8011e4e:	2400      	movlt	r4, #0
 8011e50:	2318      	movge	r3, #24
 8011e52:	fb94 f4f3 	sdivge	r4, r4, r3
 8011e56:	f06f 0317 	mvn.w	r3, #23
 8011e5a:	fb04 3303 	mla	r3, r4, r3, r3
 8011e5e:	eb03 0a02 	add.w	sl, r3, r2
 8011e62:	9b04      	ldr	r3, [sp, #16]
 8011e64:	9a06      	ldr	r2, [sp, #24]
 8011e66:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012140 <__kernel_rem_pio2+0x320>
 8011e6a:	eb03 0802 	add.w	r8, r3, r2
 8011e6e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011e70:	1aa7      	subs	r7, r4, r2
 8011e72:	ae20      	add	r6, sp, #128	; 0x80
 8011e74:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011e78:	2500      	movs	r5, #0
 8011e7a:	4545      	cmp	r5, r8
 8011e7c:	dd18      	ble.n	8011eb0 <__kernel_rem_pio2+0x90>
 8011e7e:	9b08      	ldr	r3, [sp, #32]
 8011e80:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011e84:	aa20      	add	r2, sp, #128	; 0x80
 8011e86:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8012140 <__kernel_rem_pio2+0x320>
 8011e8a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011e8e:	f1c3 0301 	rsb	r3, r3, #1
 8011e92:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8011e96:	9307      	str	r3, [sp, #28]
 8011e98:	9b07      	ldr	r3, [sp, #28]
 8011e9a:	9a04      	ldr	r2, [sp, #16]
 8011e9c:	4443      	add	r3, r8
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	db2f      	blt.n	8011f02 <__kernel_rem_pio2+0xe2>
 8011ea2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011ea6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011eaa:	462f      	mov	r7, r5
 8011eac:	2600      	movs	r6, #0
 8011eae:	e01b      	b.n	8011ee8 <__kernel_rem_pio2+0xc8>
 8011eb0:	42ef      	cmn	r7, r5
 8011eb2:	d407      	bmi.n	8011ec4 <__kernel_rem_pio2+0xa4>
 8011eb4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011eb8:	f7ee fb44 	bl	8000544 <__aeabi_i2d>
 8011ebc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011ec0:	3501      	adds	r5, #1
 8011ec2:	e7da      	b.n	8011e7a <__kernel_rem_pio2+0x5a>
 8011ec4:	ec51 0b18 	vmov	r0, r1, d8
 8011ec8:	e7f8      	b.n	8011ebc <__kernel_rem_pio2+0x9c>
 8011eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ece:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011ed2:	f7ee fba1 	bl	8000618 <__aeabi_dmul>
 8011ed6:	4602      	mov	r2, r0
 8011ed8:	460b      	mov	r3, r1
 8011eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ede:	f7ee f9e5 	bl	80002ac <__adddf3>
 8011ee2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ee6:	3601      	adds	r6, #1
 8011ee8:	9b06      	ldr	r3, [sp, #24]
 8011eea:	429e      	cmp	r6, r3
 8011eec:	f1a7 0708 	sub.w	r7, r7, #8
 8011ef0:	ddeb      	ble.n	8011eca <__kernel_rem_pio2+0xaa>
 8011ef2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011ef6:	3508      	adds	r5, #8
 8011ef8:	ecab 7b02 	vstmia	fp!, {d7}
 8011efc:	f108 0801 	add.w	r8, r8, #1
 8011f00:	e7ca      	b.n	8011e98 <__kernel_rem_pio2+0x78>
 8011f02:	9b04      	ldr	r3, [sp, #16]
 8011f04:	aa0c      	add	r2, sp, #48	; 0x30
 8011f06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011f0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f0c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011f0e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011f12:	9c04      	ldr	r4, [sp, #16]
 8011f14:	930a      	str	r3, [sp, #40]	; 0x28
 8011f16:	ab98      	add	r3, sp, #608	; 0x260
 8011f18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011f1c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011f20:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8011f24:	f8cd b008 	str.w	fp, [sp, #8]
 8011f28:	4625      	mov	r5, r4
 8011f2a:	2d00      	cmp	r5, #0
 8011f2c:	dc78      	bgt.n	8012020 <__kernel_rem_pio2+0x200>
 8011f2e:	ec47 6b10 	vmov	d0, r6, r7
 8011f32:	4650      	mov	r0, sl
 8011f34:	f000 fe3c 	bl	8012bb0 <scalbn>
 8011f38:	ec57 6b10 	vmov	r6, r7, d0
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011f42:	ee10 0a10 	vmov	r0, s0
 8011f46:	4639      	mov	r1, r7
 8011f48:	f7ee fb66 	bl	8000618 <__aeabi_dmul>
 8011f4c:	ec41 0b10 	vmov	d0, r0, r1
 8011f50:	f000 fd1a 	bl	8012988 <floor>
 8011f54:	4b7f      	ldr	r3, [pc, #508]	; (8012154 <__kernel_rem_pio2+0x334>)
 8011f56:	ec51 0b10 	vmov	r0, r1, d0
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	f7ee fb5c 	bl	8000618 <__aeabi_dmul>
 8011f60:	4602      	mov	r2, r0
 8011f62:	460b      	mov	r3, r1
 8011f64:	4630      	mov	r0, r6
 8011f66:	4639      	mov	r1, r7
 8011f68:	f7ee f99e 	bl	80002a8 <__aeabi_dsub>
 8011f6c:	460f      	mov	r7, r1
 8011f6e:	4606      	mov	r6, r0
 8011f70:	f7ee fe02 	bl	8000b78 <__aeabi_d2iz>
 8011f74:	9007      	str	r0, [sp, #28]
 8011f76:	f7ee fae5 	bl	8000544 <__aeabi_i2d>
 8011f7a:	4602      	mov	r2, r0
 8011f7c:	460b      	mov	r3, r1
 8011f7e:	4630      	mov	r0, r6
 8011f80:	4639      	mov	r1, r7
 8011f82:	f7ee f991 	bl	80002a8 <__aeabi_dsub>
 8011f86:	f1ba 0f00 	cmp.w	sl, #0
 8011f8a:	4606      	mov	r6, r0
 8011f8c:	460f      	mov	r7, r1
 8011f8e:	dd70      	ble.n	8012072 <__kernel_rem_pio2+0x252>
 8011f90:	1e62      	subs	r2, r4, #1
 8011f92:	ab0c      	add	r3, sp, #48	; 0x30
 8011f94:	9d07      	ldr	r5, [sp, #28]
 8011f96:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011f9a:	f1ca 0118 	rsb	r1, sl, #24
 8011f9e:	fa40 f301 	asr.w	r3, r0, r1
 8011fa2:	441d      	add	r5, r3
 8011fa4:	408b      	lsls	r3, r1
 8011fa6:	1ac0      	subs	r0, r0, r3
 8011fa8:	ab0c      	add	r3, sp, #48	; 0x30
 8011faa:	9507      	str	r5, [sp, #28]
 8011fac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011fb0:	f1ca 0317 	rsb	r3, sl, #23
 8011fb4:	fa40 f303 	asr.w	r3, r0, r3
 8011fb8:	9302      	str	r3, [sp, #8]
 8011fba:	9b02      	ldr	r3, [sp, #8]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	dd66      	ble.n	801208e <__kernel_rem_pio2+0x26e>
 8011fc0:	9b07      	ldr	r3, [sp, #28]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	9307      	str	r3, [sp, #28]
 8011fc8:	4615      	mov	r5, r2
 8011fca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011fce:	4294      	cmp	r4, r2
 8011fd0:	f300 8099 	bgt.w	8012106 <__kernel_rem_pio2+0x2e6>
 8011fd4:	f1ba 0f00 	cmp.w	sl, #0
 8011fd8:	dd07      	ble.n	8011fea <__kernel_rem_pio2+0x1ca>
 8011fda:	f1ba 0f01 	cmp.w	sl, #1
 8011fde:	f000 80a5 	beq.w	801212c <__kernel_rem_pio2+0x30c>
 8011fe2:	f1ba 0f02 	cmp.w	sl, #2
 8011fe6:	f000 80c1 	beq.w	801216c <__kernel_rem_pio2+0x34c>
 8011fea:	9b02      	ldr	r3, [sp, #8]
 8011fec:	2b02      	cmp	r3, #2
 8011fee:	d14e      	bne.n	801208e <__kernel_rem_pio2+0x26e>
 8011ff0:	4632      	mov	r2, r6
 8011ff2:	463b      	mov	r3, r7
 8011ff4:	4958      	ldr	r1, [pc, #352]	; (8012158 <__kernel_rem_pio2+0x338>)
 8011ff6:	2000      	movs	r0, #0
 8011ff8:	f7ee f956 	bl	80002a8 <__aeabi_dsub>
 8011ffc:	4606      	mov	r6, r0
 8011ffe:	460f      	mov	r7, r1
 8012000:	2d00      	cmp	r5, #0
 8012002:	d044      	beq.n	801208e <__kernel_rem_pio2+0x26e>
 8012004:	4650      	mov	r0, sl
 8012006:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012148 <__kernel_rem_pio2+0x328>
 801200a:	f000 fdd1 	bl	8012bb0 <scalbn>
 801200e:	4630      	mov	r0, r6
 8012010:	4639      	mov	r1, r7
 8012012:	ec53 2b10 	vmov	r2, r3, d0
 8012016:	f7ee f947 	bl	80002a8 <__aeabi_dsub>
 801201a:	4606      	mov	r6, r0
 801201c:	460f      	mov	r7, r1
 801201e:	e036      	b.n	801208e <__kernel_rem_pio2+0x26e>
 8012020:	4b4e      	ldr	r3, [pc, #312]	; (801215c <__kernel_rem_pio2+0x33c>)
 8012022:	2200      	movs	r2, #0
 8012024:	4630      	mov	r0, r6
 8012026:	4639      	mov	r1, r7
 8012028:	f7ee faf6 	bl	8000618 <__aeabi_dmul>
 801202c:	f7ee fda4 	bl	8000b78 <__aeabi_d2iz>
 8012030:	f7ee fa88 	bl	8000544 <__aeabi_i2d>
 8012034:	4b4a      	ldr	r3, [pc, #296]	; (8012160 <__kernel_rem_pio2+0x340>)
 8012036:	2200      	movs	r2, #0
 8012038:	4680      	mov	r8, r0
 801203a:	4689      	mov	r9, r1
 801203c:	f7ee faec 	bl	8000618 <__aeabi_dmul>
 8012040:	4602      	mov	r2, r0
 8012042:	460b      	mov	r3, r1
 8012044:	4630      	mov	r0, r6
 8012046:	4639      	mov	r1, r7
 8012048:	f7ee f92e 	bl	80002a8 <__aeabi_dsub>
 801204c:	f7ee fd94 	bl	8000b78 <__aeabi_d2iz>
 8012050:	9b02      	ldr	r3, [sp, #8]
 8012052:	f843 0b04 	str.w	r0, [r3], #4
 8012056:	3d01      	subs	r5, #1
 8012058:	9302      	str	r3, [sp, #8]
 801205a:	ab70      	add	r3, sp, #448	; 0x1c0
 801205c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012064:	4640      	mov	r0, r8
 8012066:	4649      	mov	r1, r9
 8012068:	f7ee f920 	bl	80002ac <__adddf3>
 801206c:	4606      	mov	r6, r0
 801206e:	460f      	mov	r7, r1
 8012070:	e75b      	b.n	8011f2a <__kernel_rem_pio2+0x10a>
 8012072:	d105      	bne.n	8012080 <__kernel_rem_pio2+0x260>
 8012074:	1e63      	subs	r3, r4, #1
 8012076:	aa0c      	add	r2, sp, #48	; 0x30
 8012078:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801207c:	15c3      	asrs	r3, r0, #23
 801207e:	e79b      	b.n	8011fb8 <__kernel_rem_pio2+0x198>
 8012080:	4b38      	ldr	r3, [pc, #224]	; (8012164 <__kernel_rem_pio2+0x344>)
 8012082:	2200      	movs	r2, #0
 8012084:	f7ee fd4e 	bl	8000b24 <__aeabi_dcmpge>
 8012088:	2800      	cmp	r0, #0
 801208a:	d139      	bne.n	8012100 <__kernel_rem_pio2+0x2e0>
 801208c:	9002      	str	r0, [sp, #8]
 801208e:	2200      	movs	r2, #0
 8012090:	2300      	movs	r3, #0
 8012092:	4630      	mov	r0, r6
 8012094:	4639      	mov	r1, r7
 8012096:	f7ee fd27 	bl	8000ae8 <__aeabi_dcmpeq>
 801209a:	2800      	cmp	r0, #0
 801209c:	f000 80b4 	beq.w	8012208 <__kernel_rem_pio2+0x3e8>
 80120a0:	f104 3bff 	add.w	fp, r4, #4294967295
 80120a4:	465b      	mov	r3, fp
 80120a6:	2200      	movs	r2, #0
 80120a8:	9904      	ldr	r1, [sp, #16]
 80120aa:	428b      	cmp	r3, r1
 80120ac:	da65      	bge.n	801217a <__kernel_rem_pio2+0x35a>
 80120ae:	2a00      	cmp	r2, #0
 80120b0:	d07b      	beq.n	80121aa <__kernel_rem_pio2+0x38a>
 80120b2:	ab0c      	add	r3, sp, #48	; 0x30
 80120b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80120b8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	f000 80a0 	beq.w	8012202 <__kernel_rem_pio2+0x3e2>
 80120c2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8012148 <__kernel_rem_pio2+0x328>
 80120c6:	4650      	mov	r0, sl
 80120c8:	f000 fd72 	bl	8012bb0 <scalbn>
 80120cc:	4f23      	ldr	r7, [pc, #140]	; (801215c <__kernel_rem_pio2+0x33c>)
 80120ce:	ec55 4b10 	vmov	r4, r5, d0
 80120d2:	46d8      	mov	r8, fp
 80120d4:	2600      	movs	r6, #0
 80120d6:	f1b8 0f00 	cmp.w	r8, #0
 80120da:	f280 80cf 	bge.w	801227c <__kernel_rem_pio2+0x45c>
 80120de:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8012140 <__kernel_rem_pio2+0x320>
 80120e2:	465f      	mov	r7, fp
 80120e4:	f04f 0800 	mov.w	r8, #0
 80120e8:	2f00      	cmp	r7, #0
 80120ea:	f2c0 80fd 	blt.w	80122e8 <__kernel_rem_pio2+0x4c8>
 80120ee:	ab70      	add	r3, sp, #448	; 0x1c0
 80120f0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8012168 <__kernel_rem_pio2+0x348>
 80120f4:	ec55 4b18 	vmov	r4, r5, d8
 80120f8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80120fc:	2600      	movs	r6, #0
 80120fe:	e0e5      	b.n	80122cc <__kernel_rem_pio2+0x4ac>
 8012100:	2302      	movs	r3, #2
 8012102:	9302      	str	r3, [sp, #8]
 8012104:	e75c      	b.n	8011fc0 <__kernel_rem_pio2+0x1a0>
 8012106:	f8db 3000 	ldr.w	r3, [fp]
 801210a:	b955      	cbnz	r5, 8012122 <__kernel_rem_pio2+0x302>
 801210c:	b123      	cbz	r3, 8012118 <__kernel_rem_pio2+0x2f8>
 801210e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012112:	f8cb 3000 	str.w	r3, [fp]
 8012116:	2301      	movs	r3, #1
 8012118:	3201      	adds	r2, #1
 801211a:	f10b 0b04 	add.w	fp, fp, #4
 801211e:	461d      	mov	r5, r3
 8012120:	e755      	b.n	8011fce <__kernel_rem_pio2+0x1ae>
 8012122:	1acb      	subs	r3, r1, r3
 8012124:	f8cb 3000 	str.w	r3, [fp]
 8012128:	462b      	mov	r3, r5
 801212a:	e7f5      	b.n	8012118 <__kernel_rem_pio2+0x2f8>
 801212c:	1e62      	subs	r2, r4, #1
 801212e:	ab0c      	add	r3, sp, #48	; 0x30
 8012130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012134:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012138:	a90c      	add	r1, sp, #48	; 0x30
 801213a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801213e:	e754      	b.n	8011fea <__kernel_rem_pio2+0x1ca>
	...
 801214c:	3ff00000 	.word	0x3ff00000
 8012150:	08013258 	.word	0x08013258
 8012154:	40200000 	.word	0x40200000
 8012158:	3ff00000 	.word	0x3ff00000
 801215c:	3e700000 	.word	0x3e700000
 8012160:	41700000 	.word	0x41700000
 8012164:	3fe00000 	.word	0x3fe00000
 8012168:	08013218 	.word	0x08013218
 801216c:	1e62      	subs	r2, r4, #1
 801216e:	ab0c      	add	r3, sp, #48	; 0x30
 8012170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012174:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012178:	e7de      	b.n	8012138 <__kernel_rem_pio2+0x318>
 801217a:	a90c      	add	r1, sp, #48	; 0x30
 801217c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012180:	3b01      	subs	r3, #1
 8012182:	430a      	orrs	r2, r1
 8012184:	e790      	b.n	80120a8 <__kernel_rem_pio2+0x288>
 8012186:	3301      	adds	r3, #1
 8012188:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801218c:	2900      	cmp	r1, #0
 801218e:	d0fa      	beq.n	8012186 <__kernel_rem_pio2+0x366>
 8012190:	9a08      	ldr	r2, [sp, #32]
 8012192:	18e3      	adds	r3, r4, r3
 8012194:	18a6      	adds	r6, r4, r2
 8012196:	aa20      	add	r2, sp, #128	; 0x80
 8012198:	1c65      	adds	r5, r4, #1
 801219a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801219e:	9302      	str	r3, [sp, #8]
 80121a0:	9b02      	ldr	r3, [sp, #8]
 80121a2:	42ab      	cmp	r3, r5
 80121a4:	da04      	bge.n	80121b0 <__kernel_rem_pio2+0x390>
 80121a6:	461c      	mov	r4, r3
 80121a8:	e6b5      	b.n	8011f16 <__kernel_rem_pio2+0xf6>
 80121aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80121ac:	2301      	movs	r3, #1
 80121ae:	e7eb      	b.n	8012188 <__kernel_rem_pio2+0x368>
 80121b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80121b6:	f7ee f9c5 	bl	8000544 <__aeabi_i2d>
 80121ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80121be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121c0:	46b3      	mov	fp, r6
 80121c2:	461c      	mov	r4, r3
 80121c4:	2700      	movs	r7, #0
 80121c6:	f04f 0800 	mov.w	r8, #0
 80121ca:	f04f 0900 	mov.w	r9, #0
 80121ce:	9b06      	ldr	r3, [sp, #24]
 80121d0:	429f      	cmp	r7, r3
 80121d2:	dd06      	ble.n	80121e2 <__kernel_rem_pio2+0x3c2>
 80121d4:	ab70      	add	r3, sp, #448	; 0x1c0
 80121d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80121da:	e9c3 8900 	strd	r8, r9, [r3]
 80121de:	3501      	adds	r5, #1
 80121e0:	e7de      	b.n	80121a0 <__kernel_rem_pio2+0x380>
 80121e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80121e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80121ea:	f7ee fa15 	bl	8000618 <__aeabi_dmul>
 80121ee:	4602      	mov	r2, r0
 80121f0:	460b      	mov	r3, r1
 80121f2:	4640      	mov	r0, r8
 80121f4:	4649      	mov	r1, r9
 80121f6:	f7ee f859 	bl	80002ac <__adddf3>
 80121fa:	3701      	adds	r7, #1
 80121fc:	4680      	mov	r8, r0
 80121fe:	4689      	mov	r9, r1
 8012200:	e7e5      	b.n	80121ce <__kernel_rem_pio2+0x3ae>
 8012202:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012206:	e754      	b.n	80120b2 <__kernel_rem_pio2+0x292>
 8012208:	ec47 6b10 	vmov	d0, r6, r7
 801220c:	f1ca 0000 	rsb	r0, sl, #0
 8012210:	f000 fcce 	bl	8012bb0 <scalbn>
 8012214:	ec57 6b10 	vmov	r6, r7, d0
 8012218:	4b9f      	ldr	r3, [pc, #636]	; (8012498 <__kernel_rem_pio2+0x678>)
 801221a:	ee10 0a10 	vmov	r0, s0
 801221e:	2200      	movs	r2, #0
 8012220:	4639      	mov	r1, r7
 8012222:	f7ee fc7f 	bl	8000b24 <__aeabi_dcmpge>
 8012226:	b300      	cbz	r0, 801226a <__kernel_rem_pio2+0x44a>
 8012228:	4b9c      	ldr	r3, [pc, #624]	; (801249c <__kernel_rem_pio2+0x67c>)
 801222a:	2200      	movs	r2, #0
 801222c:	4630      	mov	r0, r6
 801222e:	4639      	mov	r1, r7
 8012230:	f7ee f9f2 	bl	8000618 <__aeabi_dmul>
 8012234:	f7ee fca0 	bl	8000b78 <__aeabi_d2iz>
 8012238:	4605      	mov	r5, r0
 801223a:	f7ee f983 	bl	8000544 <__aeabi_i2d>
 801223e:	4b96      	ldr	r3, [pc, #600]	; (8012498 <__kernel_rem_pio2+0x678>)
 8012240:	2200      	movs	r2, #0
 8012242:	f7ee f9e9 	bl	8000618 <__aeabi_dmul>
 8012246:	460b      	mov	r3, r1
 8012248:	4602      	mov	r2, r0
 801224a:	4639      	mov	r1, r7
 801224c:	4630      	mov	r0, r6
 801224e:	f7ee f82b 	bl	80002a8 <__aeabi_dsub>
 8012252:	f7ee fc91 	bl	8000b78 <__aeabi_d2iz>
 8012256:	f104 0b01 	add.w	fp, r4, #1
 801225a:	ab0c      	add	r3, sp, #48	; 0x30
 801225c:	f10a 0a18 	add.w	sl, sl, #24
 8012260:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012264:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8012268:	e72b      	b.n	80120c2 <__kernel_rem_pio2+0x2a2>
 801226a:	4630      	mov	r0, r6
 801226c:	4639      	mov	r1, r7
 801226e:	f7ee fc83 	bl	8000b78 <__aeabi_d2iz>
 8012272:	ab0c      	add	r3, sp, #48	; 0x30
 8012274:	46a3      	mov	fp, r4
 8012276:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801227a:	e722      	b.n	80120c2 <__kernel_rem_pio2+0x2a2>
 801227c:	ab70      	add	r3, sp, #448	; 0x1c0
 801227e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8012282:	ab0c      	add	r3, sp, #48	; 0x30
 8012284:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012288:	f7ee f95c 	bl	8000544 <__aeabi_i2d>
 801228c:	4622      	mov	r2, r4
 801228e:	462b      	mov	r3, r5
 8012290:	f7ee f9c2 	bl	8000618 <__aeabi_dmul>
 8012294:	4632      	mov	r2, r6
 8012296:	e9c9 0100 	strd	r0, r1, [r9]
 801229a:	463b      	mov	r3, r7
 801229c:	4620      	mov	r0, r4
 801229e:	4629      	mov	r1, r5
 80122a0:	f7ee f9ba 	bl	8000618 <__aeabi_dmul>
 80122a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80122a8:	4604      	mov	r4, r0
 80122aa:	460d      	mov	r5, r1
 80122ac:	e713      	b.n	80120d6 <__kernel_rem_pio2+0x2b6>
 80122ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80122b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80122b6:	f7ee f9af 	bl	8000618 <__aeabi_dmul>
 80122ba:	4602      	mov	r2, r0
 80122bc:	460b      	mov	r3, r1
 80122be:	4620      	mov	r0, r4
 80122c0:	4629      	mov	r1, r5
 80122c2:	f7ed fff3 	bl	80002ac <__adddf3>
 80122c6:	3601      	adds	r6, #1
 80122c8:	4604      	mov	r4, r0
 80122ca:	460d      	mov	r5, r1
 80122cc:	9b04      	ldr	r3, [sp, #16]
 80122ce:	429e      	cmp	r6, r3
 80122d0:	dc01      	bgt.n	80122d6 <__kernel_rem_pio2+0x4b6>
 80122d2:	45b0      	cmp	r8, r6
 80122d4:	daeb      	bge.n	80122ae <__kernel_rem_pio2+0x48e>
 80122d6:	ab48      	add	r3, sp, #288	; 0x120
 80122d8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80122dc:	e9c3 4500 	strd	r4, r5, [r3]
 80122e0:	3f01      	subs	r7, #1
 80122e2:	f108 0801 	add.w	r8, r8, #1
 80122e6:	e6ff      	b.n	80120e8 <__kernel_rem_pio2+0x2c8>
 80122e8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80122ea:	2b02      	cmp	r3, #2
 80122ec:	dc0b      	bgt.n	8012306 <__kernel_rem_pio2+0x4e6>
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	dc6e      	bgt.n	80123d0 <__kernel_rem_pio2+0x5b0>
 80122f2:	d045      	beq.n	8012380 <__kernel_rem_pio2+0x560>
 80122f4:	9b07      	ldr	r3, [sp, #28]
 80122f6:	f003 0007 	and.w	r0, r3, #7
 80122fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80122fe:	ecbd 8b02 	vpop	{d8}
 8012302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012306:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012308:	2b03      	cmp	r3, #3
 801230a:	d1f3      	bne.n	80122f4 <__kernel_rem_pio2+0x4d4>
 801230c:	ab48      	add	r3, sp, #288	; 0x120
 801230e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8012312:	46d0      	mov	r8, sl
 8012314:	46d9      	mov	r9, fp
 8012316:	f1b9 0f00 	cmp.w	r9, #0
 801231a:	f1a8 0808 	sub.w	r8, r8, #8
 801231e:	dc64      	bgt.n	80123ea <__kernel_rem_pio2+0x5ca>
 8012320:	465c      	mov	r4, fp
 8012322:	2c01      	cmp	r4, #1
 8012324:	f1aa 0a08 	sub.w	sl, sl, #8
 8012328:	dc7e      	bgt.n	8012428 <__kernel_rem_pio2+0x608>
 801232a:	2000      	movs	r0, #0
 801232c:	2100      	movs	r1, #0
 801232e:	f1bb 0f01 	cmp.w	fp, #1
 8012332:	f300 8097 	bgt.w	8012464 <__kernel_rem_pio2+0x644>
 8012336:	9b02      	ldr	r3, [sp, #8]
 8012338:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801233c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012340:	2b00      	cmp	r3, #0
 8012342:	f040 8099 	bne.w	8012478 <__kernel_rem_pio2+0x658>
 8012346:	9b01      	ldr	r3, [sp, #4]
 8012348:	e9c3 5600 	strd	r5, r6, [r3]
 801234c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8012350:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012354:	e7ce      	b.n	80122f4 <__kernel_rem_pio2+0x4d4>
 8012356:	ab48      	add	r3, sp, #288	; 0x120
 8012358:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012360:	f7ed ffa4 	bl	80002ac <__adddf3>
 8012364:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012368:	f1bb 0f00 	cmp.w	fp, #0
 801236c:	daf3      	bge.n	8012356 <__kernel_rem_pio2+0x536>
 801236e:	9b02      	ldr	r3, [sp, #8]
 8012370:	b113      	cbz	r3, 8012378 <__kernel_rem_pio2+0x558>
 8012372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012376:	4619      	mov	r1, r3
 8012378:	9b01      	ldr	r3, [sp, #4]
 801237a:	e9c3 0100 	strd	r0, r1, [r3]
 801237e:	e7b9      	b.n	80122f4 <__kernel_rem_pio2+0x4d4>
 8012380:	2000      	movs	r0, #0
 8012382:	2100      	movs	r1, #0
 8012384:	e7f0      	b.n	8012368 <__kernel_rem_pio2+0x548>
 8012386:	ab48      	add	r3, sp, #288	; 0x120
 8012388:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012390:	f7ed ff8c 	bl	80002ac <__adddf3>
 8012394:	3c01      	subs	r4, #1
 8012396:	2c00      	cmp	r4, #0
 8012398:	daf5      	bge.n	8012386 <__kernel_rem_pio2+0x566>
 801239a:	9b02      	ldr	r3, [sp, #8]
 801239c:	b1e3      	cbz	r3, 80123d8 <__kernel_rem_pio2+0x5b8>
 801239e:	4602      	mov	r2, r0
 80123a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123a4:	9c01      	ldr	r4, [sp, #4]
 80123a6:	e9c4 2300 	strd	r2, r3, [r4]
 80123aa:	4602      	mov	r2, r0
 80123ac:	460b      	mov	r3, r1
 80123ae:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80123b2:	f7ed ff79 	bl	80002a8 <__aeabi_dsub>
 80123b6:	ad4a      	add	r5, sp, #296	; 0x128
 80123b8:	2401      	movs	r4, #1
 80123ba:	45a3      	cmp	fp, r4
 80123bc:	da0f      	bge.n	80123de <__kernel_rem_pio2+0x5be>
 80123be:	9b02      	ldr	r3, [sp, #8]
 80123c0:	b113      	cbz	r3, 80123c8 <__kernel_rem_pio2+0x5a8>
 80123c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123c6:	4619      	mov	r1, r3
 80123c8:	9b01      	ldr	r3, [sp, #4]
 80123ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80123ce:	e791      	b.n	80122f4 <__kernel_rem_pio2+0x4d4>
 80123d0:	465c      	mov	r4, fp
 80123d2:	2000      	movs	r0, #0
 80123d4:	2100      	movs	r1, #0
 80123d6:	e7de      	b.n	8012396 <__kernel_rem_pio2+0x576>
 80123d8:	4602      	mov	r2, r0
 80123da:	460b      	mov	r3, r1
 80123dc:	e7e2      	b.n	80123a4 <__kernel_rem_pio2+0x584>
 80123de:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80123e2:	f7ed ff63 	bl	80002ac <__adddf3>
 80123e6:	3401      	adds	r4, #1
 80123e8:	e7e7      	b.n	80123ba <__kernel_rem_pio2+0x59a>
 80123ea:	e9d8 4500 	ldrd	r4, r5, [r8]
 80123ee:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80123f2:	4620      	mov	r0, r4
 80123f4:	4632      	mov	r2, r6
 80123f6:	463b      	mov	r3, r7
 80123f8:	4629      	mov	r1, r5
 80123fa:	f7ed ff57 	bl	80002ac <__adddf3>
 80123fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012402:	4602      	mov	r2, r0
 8012404:	460b      	mov	r3, r1
 8012406:	4620      	mov	r0, r4
 8012408:	4629      	mov	r1, r5
 801240a:	f7ed ff4d 	bl	80002a8 <__aeabi_dsub>
 801240e:	4632      	mov	r2, r6
 8012410:	463b      	mov	r3, r7
 8012412:	f7ed ff4b 	bl	80002ac <__adddf3>
 8012416:	ed9d 7b04 	vldr	d7, [sp, #16]
 801241a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801241e:	ed88 7b00 	vstr	d7, [r8]
 8012422:	f109 39ff 	add.w	r9, r9, #4294967295
 8012426:	e776      	b.n	8012316 <__kernel_rem_pio2+0x4f6>
 8012428:	e9da 8900 	ldrd	r8, r9, [sl]
 801242c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012430:	4640      	mov	r0, r8
 8012432:	4632      	mov	r2, r6
 8012434:	463b      	mov	r3, r7
 8012436:	4649      	mov	r1, r9
 8012438:	f7ed ff38 	bl	80002ac <__adddf3>
 801243c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012440:	4602      	mov	r2, r0
 8012442:	460b      	mov	r3, r1
 8012444:	4640      	mov	r0, r8
 8012446:	4649      	mov	r1, r9
 8012448:	f7ed ff2e 	bl	80002a8 <__aeabi_dsub>
 801244c:	4632      	mov	r2, r6
 801244e:	463b      	mov	r3, r7
 8012450:	f7ed ff2c 	bl	80002ac <__adddf3>
 8012454:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012458:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801245c:	ed8a 7b00 	vstr	d7, [sl]
 8012460:	3c01      	subs	r4, #1
 8012462:	e75e      	b.n	8012322 <__kernel_rem_pio2+0x502>
 8012464:	ab48      	add	r3, sp, #288	; 0x120
 8012466:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801246e:	f7ed ff1d 	bl	80002ac <__adddf3>
 8012472:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012476:	e75a      	b.n	801232e <__kernel_rem_pio2+0x50e>
 8012478:	9b01      	ldr	r3, [sp, #4]
 801247a:	9a01      	ldr	r2, [sp, #4]
 801247c:	601d      	str	r5, [r3, #0]
 801247e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8012482:	605c      	str	r4, [r3, #4]
 8012484:	609f      	str	r7, [r3, #8]
 8012486:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801248a:	60d3      	str	r3, [r2, #12]
 801248c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012490:	6110      	str	r0, [r2, #16]
 8012492:	6153      	str	r3, [r2, #20]
 8012494:	e72e      	b.n	80122f4 <__kernel_rem_pio2+0x4d4>
 8012496:	bf00      	nop
 8012498:	41700000 	.word	0x41700000
 801249c:	3e700000 	.word	0x3e700000

080124a0 <__kernel_sin>:
 80124a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124a4:	ed2d 8b04 	vpush	{d8-d9}
 80124a8:	eeb0 8a41 	vmov.f32	s16, s2
 80124ac:	eef0 8a61 	vmov.f32	s17, s3
 80124b0:	ec55 4b10 	vmov	r4, r5, d0
 80124b4:	b083      	sub	sp, #12
 80124b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80124ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80124be:	9001      	str	r0, [sp, #4]
 80124c0:	da06      	bge.n	80124d0 <__kernel_sin+0x30>
 80124c2:	ee10 0a10 	vmov	r0, s0
 80124c6:	4629      	mov	r1, r5
 80124c8:	f7ee fb56 	bl	8000b78 <__aeabi_d2iz>
 80124cc:	2800      	cmp	r0, #0
 80124ce:	d051      	beq.n	8012574 <__kernel_sin+0xd4>
 80124d0:	4622      	mov	r2, r4
 80124d2:	462b      	mov	r3, r5
 80124d4:	4620      	mov	r0, r4
 80124d6:	4629      	mov	r1, r5
 80124d8:	f7ee f89e 	bl	8000618 <__aeabi_dmul>
 80124dc:	4682      	mov	sl, r0
 80124de:	468b      	mov	fp, r1
 80124e0:	4602      	mov	r2, r0
 80124e2:	460b      	mov	r3, r1
 80124e4:	4620      	mov	r0, r4
 80124e6:	4629      	mov	r1, r5
 80124e8:	f7ee f896 	bl	8000618 <__aeabi_dmul>
 80124ec:	a341      	add	r3, pc, #260	; (adr r3, 80125f4 <__kernel_sin+0x154>)
 80124ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f2:	4680      	mov	r8, r0
 80124f4:	4689      	mov	r9, r1
 80124f6:	4650      	mov	r0, sl
 80124f8:	4659      	mov	r1, fp
 80124fa:	f7ee f88d 	bl	8000618 <__aeabi_dmul>
 80124fe:	a33f      	add	r3, pc, #252	; (adr r3, 80125fc <__kernel_sin+0x15c>)
 8012500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012504:	f7ed fed0 	bl	80002a8 <__aeabi_dsub>
 8012508:	4652      	mov	r2, sl
 801250a:	465b      	mov	r3, fp
 801250c:	f7ee f884 	bl	8000618 <__aeabi_dmul>
 8012510:	a33c      	add	r3, pc, #240	; (adr r3, 8012604 <__kernel_sin+0x164>)
 8012512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012516:	f7ed fec9 	bl	80002ac <__adddf3>
 801251a:	4652      	mov	r2, sl
 801251c:	465b      	mov	r3, fp
 801251e:	f7ee f87b 	bl	8000618 <__aeabi_dmul>
 8012522:	a33a      	add	r3, pc, #232	; (adr r3, 801260c <__kernel_sin+0x16c>)
 8012524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012528:	f7ed febe 	bl	80002a8 <__aeabi_dsub>
 801252c:	4652      	mov	r2, sl
 801252e:	465b      	mov	r3, fp
 8012530:	f7ee f872 	bl	8000618 <__aeabi_dmul>
 8012534:	a337      	add	r3, pc, #220	; (adr r3, 8012614 <__kernel_sin+0x174>)
 8012536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801253a:	f7ed feb7 	bl	80002ac <__adddf3>
 801253e:	9b01      	ldr	r3, [sp, #4]
 8012540:	4606      	mov	r6, r0
 8012542:	460f      	mov	r7, r1
 8012544:	b9eb      	cbnz	r3, 8012582 <__kernel_sin+0xe2>
 8012546:	4602      	mov	r2, r0
 8012548:	460b      	mov	r3, r1
 801254a:	4650      	mov	r0, sl
 801254c:	4659      	mov	r1, fp
 801254e:	f7ee f863 	bl	8000618 <__aeabi_dmul>
 8012552:	a325      	add	r3, pc, #148	; (adr r3, 80125e8 <__kernel_sin+0x148>)
 8012554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012558:	f7ed fea6 	bl	80002a8 <__aeabi_dsub>
 801255c:	4642      	mov	r2, r8
 801255e:	464b      	mov	r3, r9
 8012560:	f7ee f85a 	bl	8000618 <__aeabi_dmul>
 8012564:	4602      	mov	r2, r0
 8012566:	460b      	mov	r3, r1
 8012568:	4620      	mov	r0, r4
 801256a:	4629      	mov	r1, r5
 801256c:	f7ed fe9e 	bl	80002ac <__adddf3>
 8012570:	4604      	mov	r4, r0
 8012572:	460d      	mov	r5, r1
 8012574:	ec45 4b10 	vmov	d0, r4, r5
 8012578:	b003      	add	sp, #12
 801257a:	ecbd 8b04 	vpop	{d8-d9}
 801257e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012582:	4b1b      	ldr	r3, [pc, #108]	; (80125f0 <__kernel_sin+0x150>)
 8012584:	ec51 0b18 	vmov	r0, r1, d8
 8012588:	2200      	movs	r2, #0
 801258a:	f7ee f845 	bl	8000618 <__aeabi_dmul>
 801258e:	4632      	mov	r2, r6
 8012590:	ec41 0b19 	vmov	d9, r0, r1
 8012594:	463b      	mov	r3, r7
 8012596:	4640      	mov	r0, r8
 8012598:	4649      	mov	r1, r9
 801259a:	f7ee f83d 	bl	8000618 <__aeabi_dmul>
 801259e:	4602      	mov	r2, r0
 80125a0:	460b      	mov	r3, r1
 80125a2:	ec51 0b19 	vmov	r0, r1, d9
 80125a6:	f7ed fe7f 	bl	80002a8 <__aeabi_dsub>
 80125aa:	4652      	mov	r2, sl
 80125ac:	465b      	mov	r3, fp
 80125ae:	f7ee f833 	bl	8000618 <__aeabi_dmul>
 80125b2:	ec53 2b18 	vmov	r2, r3, d8
 80125b6:	f7ed fe77 	bl	80002a8 <__aeabi_dsub>
 80125ba:	a30b      	add	r3, pc, #44	; (adr r3, 80125e8 <__kernel_sin+0x148>)
 80125bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c0:	4606      	mov	r6, r0
 80125c2:	460f      	mov	r7, r1
 80125c4:	4640      	mov	r0, r8
 80125c6:	4649      	mov	r1, r9
 80125c8:	f7ee f826 	bl	8000618 <__aeabi_dmul>
 80125cc:	4602      	mov	r2, r0
 80125ce:	460b      	mov	r3, r1
 80125d0:	4630      	mov	r0, r6
 80125d2:	4639      	mov	r1, r7
 80125d4:	f7ed fe6a 	bl	80002ac <__adddf3>
 80125d8:	4602      	mov	r2, r0
 80125da:	460b      	mov	r3, r1
 80125dc:	4620      	mov	r0, r4
 80125de:	4629      	mov	r1, r5
 80125e0:	f7ed fe62 	bl	80002a8 <__aeabi_dsub>
 80125e4:	e7c4      	b.n	8012570 <__kernel_sin+0xd0>
 80125e6:	bf00      	nop
 80125e8:	55555549 	.word	0x55555549
 80125ec:	3fc55555 	.word	0x3fc55555
 80125f0:	3fe00000 	.word	0x3fe00000
 80125f4:	5acfd57c 	.word	0x5acfd57c
 80125f8:	3de5d93a 	.word	0x3de5d93a
 80125fc:	8a2b9ceb 	.word	0x8a2b9ceb
 8012600:	3e5ae5e6 	.word	0x3e5ae5e6
 8012604:	57b1fe7d 	.word	0x57b1fe7d
 8012608:	3ec71de3 	.word	0x3ec71de3
 801260c:	19c161d5 	.word	0x19c161d5
 8012610:	3f2a01a0 	.word	0x3f2a01a0
 8012614:	1110f8a6 	.word	0x1110f8a6
 8012618:	3f811111 	.word	0x3f811111
 801261c:	00000000 	.word	0x00000000

08012620 <atan>:
 8012620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012624:	ec55 4b10 	vmov	r4, r5, d0
 8012628:	4bc3      	ldr	r3, [pc, #780]	; (8012938 <atan+0x318>)
 801262a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801262e:	429e      	cmp	r6, r3
 8012630:	46ab      	mov	fp, r5
 8012632:	dd18      	ble.n	8012666 <atan+0x46>
 8012634:	4bc1      	ldr	r3, [pc, #772]	; (801293c <atan+0x31c>)
 8012636:	429e      	cmp	r6, r3
 8012638:	dc01      	bgt.n	801263e <atan+0x1e>
 801263a:	d109      	bne.n	8012650 <atan+0x30>
 801263c:	b144      	cbz	r4, 8012650 <atan+0x30>
 801263e:	4622      	mov	r2, r4
 8012640:	462b      	mov	r3, r5
 8012642:	4620      	mov	r0, r4
 8012644:	4629      	mov	r1, r5
 8012646:	f7ed fe31 	bl	80002ac <__adddf3>
 801264a:	4604      	mov	r4, r0
 801264c:	460d      	mov	r5, r1
 801264e:	e006      	b.n	801265e <atan+0x3e>
 8012650:	f1bb 0f00 	cmp.w	fp, #0
 8012654:	f300 8131 	bgt.w	80128ba <atan+0x29a>
 8012658:	a59b      	add	r5, pc, #620	; (adr r5, 80128c8 <atan+0x2a8>)
 801265a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801265e:	ec45 4b10 	vmov	d0, r4, r5
 8012662:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012666:	4bb6      	ldr	r3, [pc, #728]	; (8012940 <atan+0x320>)
 8012668:	429e      	cmp	r6, r3
 801266a:	dc14      	bgt.n	8012696 <atan+0x76>
 801266c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012670:	429e      	cmp	r6, r3
 8012672:	dc0d      	bgt.n	8012690 <atan+0x70>
 8012674:	a396      	add	r3, pc, #600	; (adr r3, 80128d0 <atan+0x2b0>)
 8012676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801267a:	ee10 0a10 	vmov	r0, s0
 801267e:	4629      	mov	r1, r5
 8012680:	f7ed fe14 	bl	80002ac <__adddf3>
 8012684:	4baf      	ldr	r3, [pc, #700]	; (8012944 <atan+0x324>)
 8012686:	2200      	movs	r2, #0
 8012688:	f7ee fa56 	bl	8000b38 <__aeabi_dcmpgt>
 801268c:	2800      	cmp	r0, #0
 801268e:	d1e6      	bne.n	801265e <atan+0x3e>
 8012690:	f04f 3aff 	mov.w	sl, #4294967295
 8012694:	e02b      	b.n	80126ee <atan+0xce>
 8012696:	f000 f963 	bl	8012960 <fabs>
 801269a:	4bab      	ldr	r3, [pc, #684]	; (8012948 <atan+0x328>)
 801269c:	429e      	cmp	r6, r3
 801269e:	ec55 4b10 	vmov	r4, r5, d0
 80126a2:	f300 80bf 	bgt.w	8012824 <atan+0x204>
 80126a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80126aa:	429e      	cmp	r6, r3
 80126ac:	f300 80a0 	bgt.w	80127f0 <atan+0x1d0>
 80126b0:	ee10 2a10 	vmov	r2, s0
 80126b4:	ee10 0a10 	vmov	r0, s0
 80126b8:	462b      	mov	r3, r5
 80126ba:	4629      	mov	r1, r5
 80126bc:	f7ed fdf6 	bl	80002ac <__adddf3>
 80126c0:	4ba0      	ldr	r3, [pc, #640]	; (8012944 <atan+0x324>)
 80126c2:	2200      	movs	r2, #0
 80126c4:	f7ed fdf0 	bl	80002a8 <__aeabi_dsub>
 80126c8:	2200      	movs	r2, #0
 80126ca:	4606      	mov	r6, r0
 80126cc:	460f      	mov	r7, r1
 80126ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80126d2:	4620      	mov	r0, r4
 80126d4:	4629      	mov	r1, r5
 80126d6:	f7ed fde9 	bl	80002ac <__adddf3>
 80126da:	4602      	mov	r2, r0
 80126dc:	460b      	mov	r3, r1
 80126de:	4630      	mov	r0, r6
 80126e0:	4639      	mov	r1, r7
 80126e2:	f7ee f8c3 	bl	800086c <__aeabi_ddiv>
 80126e6:	f04f 0a00 	mov.w	sl, #0
 80126ea:	4604      	mov	r4, r0
 80126ec:	460d      	mov	r5, r1
 80126ee:	4622      	mov	r2, r4
 80126f0:	462b      	mov	r3, r5
 80126f2:	4620      	mov	r0, r4
 80126f4:	4629      	mov	r1, r5
 80126f6:	f7ed ff8f 	bl	8000618 <__aeabi_dmul>
 80126fa:	4602      	mov	r2, r0
 80126fc:	460b      	mov	r3, r1
 80126fe:	4680      	mov	r8, r0
 8012700:	4689      	mov	r9, r1
 8012702:	f7ed ff89 	bl	8000618 <__aeabi_dmul>
 8012706:	a374      	add	r3, pc, #464	; (adr r3, 80128d8 <atan+0x2b8>)
 8012708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801270c:	4606      	mov	r6, r0
 801270e:	460f      	mov	r7, r1
 8012710:	f7ed ff82 	bl	8000618 <__aeabi_dmul>
 8012714:	a372      	add	r3, pc, #456	; (adr r3, 80128e0 <atan+0x2c0>)
 8012716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801271a:	f7ed fdc7 	bl	80002ac <__adddf3>
 801271e:	4632      	mov	r2, r6
 8012720:	463b      	mov	r3, r7
 8012722:	f7ed ff79 	bl	8000618 <__aeabi_dmul>
 8012726:	a370      	add	r3, pc, #448	; (adr r3, 80128e8 <atan+0x2c8>)
 8012728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272c:	f7ed fdbe 	bl	80002ac <__adddf3>
 8012730:	4632      	mov	r2, r6
 8012732:	463b      	mov	r3, r7
 8012734:	f7ed ff70 	bl	8000618 <__aeabi_dmul>
 8012738:	a36d      	add	r3, pc, #436	; (adr r3, 80128f0 <atan+0x2d0>)
 801273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801273e:	f7ed fdb5 	bl	80002ac <__adddf3>
 8012742:	4632      	mov	r2, r6
 8012744:	463b      	mov	r3, r7
 8012746:	f7ed ff67 	bl	8000618 <__aeabi_dmul>
 801274a:	a36b      	add	r3, pc, #428	; (adr r3, 80128f8 <atan+0x2d8>)
 801274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012750:	f7ed fdac 	bl	80002ac <__adddf3>
 8012754:	4632      	mov	r2, r6
 8012756:	463b      	mov	r3, r7
 8012758:	f7ed ff5e 	bl	8000618 <__aeabi_dmul>
 801275c:	a368      	add	r3, pc, #416	; (adr r3, 8012900 <atan+0x2e0>)
 801275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012762:	f7ed fda3 	bl	80002ac <__adddf3>
 8012766:	4642      	mov	r2, r8
 8012768:	464b      	mov	r3, r9
 801276a:	f7ed ff55 	bl	8000618 <__aeabi_dmul>
 801276e:	a366      	add	r3, pc, #408	; (adr r3, 8012908 <atan+0x2e8>)
 8012770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012774:	4680      	mov	r8, r0
 8012776:	4689      	mov	r9, r1
 8012778:	4630      	mov	r0, r6
 801277a:	4639      	mov	r1, r7
 801277c:	f7ed ff4c 	bl	8000618 <__aeabi_dmul>
 8012780:	a363      	add	r3, pc, #396	; (adr r3, 8012910 <atan+0x2f0>)
 8012782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012786:	f7ed fd8f 	bl	80002a8 <__aeabi_dsub>
 801278a:	4632      	mov	r2, r6
 801278c:	463b      	mov	r3, r7
 801278e:	f7ed ff43 	bl	8000618 <__aeabi_dmul>
 8012792:	a361      	add	r3, pc, #388	; (adr r3, 8012918 <atan+0x2f8>)
 8012794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012798:	f7ed fd86 	bl	80002a8 <__aeabi_dsub>
 801279c:	4632      	mov	r2, r6
 801279e:	463b      	mov	r3, r7
 80127a0:	f7ed ff3a 	bl	8000618 <__aeabi_dmul>
 80127a4:	a35e      	add	r3, pc, #376	; (adr r3, 8012920 <atan+0x300>)
 80127a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127aa:	f7ed fd7d 	bl	80002a8 <__aeabi_dsub>
 80127ae:	4632      	mov	r2, r6
 80127b0:	463b      	mov	r3, r7
 80127b2:	f7ed ff31 	bl	8000618 <__aeabi_dmul>
 80127b6:	a35c      	add	r3, pc, #368	; (adr r3, 8012928 <atan+0x308>)
 80127b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127bc:	f7ed fd74 	bl	80002a8 <__aeabi_dsub>
 80127c0:	4632      	mov	r2, r6
 80127c2:	463b      	mov	r3, r7
 80127c4:	f7ed ff28 	bl	8000618 <__aeabi_dmul>
 80127c8:	4602      	mov	r2, r0
 80127ca:	460b      	mov	r3, r1
 80127cc:	4640      	mov	r0, r8
 80127ce:	4649      	mov	r1, r9
 80127d0:	f7ed fd6c 	bl	80002ac <__adddf3>
 80127d4:	4622      	mov	r2, r4
 80127d6:	462b      	mov	r3, r5
 80127d8:	f7ed ff1e 	bl	8000618 <__aeabi_dmul>
 80127dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80127e0:	4602      	mov	r2, r0
 80127e2:	460b      	mov	r3, r1
 80127e4:	d14b      	bne.n	801287e <atan+0x25e>
 80127e6:	4620      	mov	r0, r4
 80127e8:	4629      	mov	r1, r5
 80127ea:	f7ed fd5d 	bl	80002a8 <__aeabi_dsub>
 80127ee:	e72c      	b.n	801264a <atan+0x2a>
 80127f0:	ee10 0a10 	vmov	r0, s0
 80127f4:	4b53      	ldr	r3, [pc, #332]	; (8012944 <atan+0x324>)
 80127f6:	2200      	movs	r2, #0
 80127f8:	4629      	mov	r1, r5
 80127fa:	f7ed fd55 	bl	80002a8 <__aeabi_dsub>
 80127fe:	4b51      	ldr	r3, [pc, #324]	; (8012944 <atan+0x324>)
 8012800:	4606      	mov	r6, r0
 8012802:	460f      	mov	r7, r1
 8012804:	2200      	movs	r2, #0
 8012806:	4620      	mov	r0, r4
 8012808:	4629      	mov	r1, r5
 801280a:	f7ed fd4f 	bl	80002ac <__adddf3>
 801280e:	4602      	mov	r2, r0
 8012810:	460b      	mov	r3, r1
 8012812:	4630      	mov	r0, r6
 8012814:	4639      	mov	r1, r7
 8012816:	f7ee f829 	bl	800086c <__aeabi_ddiv>
 801281a:	f04f 0a01 	mov.w	sl, #1
 801281e:	4604      	mov	r4, r0
 8012820:	460d      	mov	r5, r1
 8012822:	e764      	b.n	80126ee <atan+0xce>
 8012824:	4b49      	ldr	r3, [pc, #292]	; (801294c <atan+0x32c>)
 8012826:	429e      	cmp	r6, r3
 8012828:	da1d      	bge.n	8012866 <atan+0x246>
 801282a:	ee10 0a10 	vmov	r0, s0
 801282e:	4b48      	ldr	r3, [pc, #288]	; (8012950 <atan+0x330>)
 8012830:	2200      	movs	r2, #0
 8012832:	4629      	mov	r1, r5
 8012834:	f7ed fd38 	bl	80002a8 <__aeabi_dsub>
 8012838:	4b45      	ldr	r3, [pc, #276]	; (8012950 <atan+0x330>)
 801283a:	4606      	mov	r6, r0
 801283c:	460f      	mov	r7, r1
 801283e:	2200      	movs	r2, #0
 8012840:	4620      	mov	r0, r4
 8012842:	4629      	mov	r1, r5
 8012844:	f7ed fee8 	bl	8000618 <__aeabi_dmul>
 8012848:	4b3e      	ldr	r3, [pc, #248]	; (8012944 <atan+0x324>)
 801284a:	2200      	movs	r2, #0
 801284c:	f7ed fd2e 	bl	80002ac <__adddf3>
 8012850:	4602      	mov	r2, r0
 8012852:	460b      	mov	r3, r1
 8012854:	4630      	mov	r0, r6
 8012856:	4639      	mov	r1, r7
 8012858:	f7ee f808 	bl	800086c <__aeabi_ddiv>
 801285c:	f04f 0a02 	mov.w	sl, #2
 8012860:	4604      	mov	r4, r0
 8012862:	460d      	mov	r5, r1
 8012864:	e743      	b.n	80126ee <atan+0xce>
 8012866:	462b      	mov	r3, r5
 8012868:	ee10 2a10 	vmov	r2, s0
 801286c:	4939      	ldr	r1, [pc, #228]	; (8012954 <atan+0x334>)
 801286e:	2000      	movs	r0, #0
 8012870:	f7ed fffc 	bl	800086c <__aeabi_ddiv>
 8012874:	f04f 0a03 	mov.w	sl, #3
 8012878:	4604      	mov	r4, r0
 801287a:	460d      	mov	r5, r1
 801287c:	e737      	b.n	80126ee <atan+0xce>
 801287e:	4b36      	ldr	r3, [pc, #216]	; (8012958 <atan+0x338>)
 8012880:	4e36      	ldr	r6, [pc, #216]	; (801295c <atan+0x33c>)
 8012882:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012886:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801288a:	e9da 2300 	ldrd	r2, r3, [sl]
 801288e:	f7ed fd0b 	bl	80002a8 <__aeabi_dsub>
 8012892:	4622      	mov	r2, r4
 8012894:	462b      	mov	r3, r5
 8012896:	f7ed fd07 	bl	80002a8 <__aeabi_dsub>
 801289a:	4602      	mov	r2, r0
 801289c:	460b      	mov	r3, r1
 801289e:	e9d6 0100 	ldrd	r0, r1, [r6]
 80128a2:	f7ed fd01 	bl	80002a8 <__aeabi_dsub>
 80128a6:	f1bb 0f00 	cmp.w	fp, #0
 80128aa:	4604      	mov	r4, r0
 80128ac:	460d      	mov	r5, r1
 80128ae:	f6bf aed6 	bge.w	801265e <atan+0x3e>
 80128b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128b6:	461d      	mov	r5, r3
 80128b8:	e6d1      	b.n	801265e <atan+0x3e>
 80128ba:	a51d      	add	r5, pc, #116	; (adr r5, 8012930 <atan+0x310>)
 80128bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80128c0:	e6cd      	b.n	801265e <atan+0x3e>
 80128c2:	bf00      	nop
 80128c4:	f3af 8000 	nop.w
 80128c8:	54442d18 	.word	0x54442d18
 80128cc:	bff921fb 	.word	0xbff921fb
 80128d0:	8800759c 	.word	0x8800759c
 80128d4:	7e37e43c 	.word	0x7e37e43c
 80128d8:	e322da11 	.word	0xe322da11
 80128dc:	3f90ad3a 	.word	0x3f90ad3a
 80128e0:	24760deb 	.word	0x24760deb
 80128e4:	3fa97b4b 	.word	0x3fa97b4b
 80128e8:	a0d03d51 	.word	0xa0d03d51
 80128ec:	3fb10d66 	.word	0x3fb10d66
 80128f0:	c54c206e 	.word	0xc54c206e
 80128f4:	3fb745cd 	.word	0x3fb745cd
 80128f8:	920083ff 	.word	0x920083ff
 80128fc:	3fc24924 	.word	0x3fc24924
 8012900:	5555550d 	.word	0x5555550d
 8012904:	3fd55555 	.word	0x3fd55555
 8012908:	2c6a6c2f 	.word	0x2c6a6c2f
 801290c:	bfa2b444 	.word	0xbfa2b444
 8012910:	52defd9a 	.word	0x52defd9a
 8012914:	3fadde2d 	.word	0x3fadde2d
 8012918:	af749a6d 	.word	0xaf749a6d
 801291c:	3fb3b0f2 	.word	0x3fb3b0f2
 8012920:	fe231671 	.word	0xfe231671
 8012924:	3fbc71c6 	.word	0x3fbc71c6
 8012928:	9998ebc4 	.word	0x9998ebc4
 801292c:	3fc99999 	.word	0x3fc99999
 8012930:	54442d18 	.word	0x54442d18
 8012934:	3ff921fb 	.word	0x3ff921fb
 8012938:	440fffff 	.word	0x440fffff
 801293c:	7ff00000 	.word	0x7ff00000
 8012940:	3fdbffff 	.word	0x3fdbffff
 8012944:	3ff00000 	.word	0x3ff00000
 8012948:	3ff2ffff 	.word	0x3ff2ffff
 801294c:	40038000 	.word	0x40038000
 8012950:	3ff80000 	.word	0x3ff80000
 8012954:	bff00000 	.word	0xbff00000
 8012958:	08013288 	.word	0x08013288
 801295c:	08013268 	.word	0x08013268

08012960 <fabs>:
 8012960:	ec51 0b10 	vmov	r0, r1, d0
 8012964:	ee10 2a10 	vmov	r2, s0
 8012968:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801296c:	ec43 2b10 	vmov	d0, r2, r3
 8012970:	4770      	bx	lr

08012972 <finite>:
 8012972:	b082      	sub	sp, #8
 8012974:	ed8d 0b00 	vstr	d0, [sp]
 8012978:	9801      	ldr	r0, [sp, #4]
 801297a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801297e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012982:	0fc0      	lsrs	r0, r0, #31
 8012984:	b002      	add	sp, #8
 8012986:	4770      	bx	lr

08012988 <floor>:
 8012988:	ec51 0b10 	vmov	r0, r1, d0
 801298c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012990:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012994:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012998:	2e13      	cmp	r6, #19
 801299a:	ee10 5a10 	vmov	r5, s0
 801299e:	ee10 8a10 	vmov	r8, s0
 80129a2:	460c      	mov	r4, r1
 80129a4:	dc32      	bgt.n	8012a0c <floor+0x84>
 80129a6:	2e00      	cmp	r6, #0
 80129a8:	da14      	bge.n	80129d4 <floor+0x4c>
 80129aa:	a333      	add	r3, pc, #204	; (adr r3, 8012a78 <floor+0xf0>)
 80129ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b0:	f7ed fc7c 	bl	80002ac <__adddf3>
 80129b4:	2200      	movs	r2, #0
 80129b6:	2300      	movs	r3, #0
 80129b8:	f7ee f8be 	bl	8000b38 <__aeabi_dcmpgt>
 80129bc:	b138      	cbz	r0, 80129ce <floor+0x46>
 80129be:	2c00      	cmp	r4, #0
 80129c0:	da57      	bge.n	8012a72 <floor+0xea>
 80129c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80129c6:	431d      	orrs	r5, r3
 80129c8:	d001      	beq.n	80129ce <floor+0x46>
 80129ca:	4c2d      	ldr	r4, [pc, #180]	; (8012a80 <floor+0xf8>)
 80129cc:	2500      	movs	r5, #0
 80129ce:	4621      	mov	r1, r4
 80129d0:	4628      	mov	r0, r5
 80129d2:	e025      	b.n	8012a20 <floor+0x98>
 80129d4:	4f2b      	ldr	r7, [pc, #172]	; (8012a84 <floor+0xfc>)
 80129d6:	4137      	asrs	r7, r6
 80129d8:	ea01 0307 	and.w	r3, r1, r7
 80129dc:	4303      	orrs	r3, r0
 80129de:	d01f      	beq.n	8012a20 <floor+0x98>
 80129e0:	a325      	add	r3, pc, #148	; (adr r3, 8012a78 <floor+0xf0>)
 80129e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e6:	f7ed fc61 	bl	80002ac <__adddf3>
 80129ea:	2200      	movs	r2, #0
 80129ec:	2300      	movs	r3, #0
 80129ee:	f7ee f8a3 	bl	8000b38 <__aeabi_dcmpgt>
 80129f2:	2800      	cmp	r0, #0
 80129f4:	d0eb      	beq.n	80129ce <floor+0x46>
 80129f6:	2c00      	cmp	r4, #0
 80129f8:	bfbe      	ittt	lt
 80129fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80129fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8012a02:	19a4      	addlt	r4, r4, r6
 8012a04:	ea24 0407 	bic.w	r4, r4, r7
 8012a08:	2500      	movs	r5, #0
 8012a0a:	e7e0      	b.n	80129ce <floor+0x46>
 8012a0c:	2e33      	cmp	r6, #51	; 0x33
 8012a0e:	dd0b      	ble.n	8012a28 <floor+0xa0>
 8012a10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012a14:	d104      	bne.n	8012a20 <floor+0x98>
 8012a16:	ee10 2a10 	vmov	r2, s0
 8012a1a:	460b      	mov	r3, r1
 8012a1c:	f7ed fc46 	bl	80002ac <__adddf3>
 8012a20:	ec41 0b10 	vmov	d0, r0, r1
 8012a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a28:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a30:	fa23 f707 	lsr.w	r7, r3, r7
 8012a34:	4207      	tst	r7, r0
 8012a36:	d0f3      	beq.n	8012a20 <floor+0x98>
 8012a38:	a30f      	add	r3, pc, #60	; (adr r3, 8012a78 <floor+0xf0>)
 8012a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3e:	f7ed fc35 	bl	80002ac <__adddf3>
 8012a42:	2200      	movs	r2, #0
 8012a44:	2300      	movs	r3, #0
 8012a46:	f7ee f877 	bl	8000b38 <__aeabi_dcmpgt>
 8012a4a:	2800      	cmp	r0, #0
 8012a4c:	d0bf      	beq.n	80129ce <floor+0x46>
 8012a4e:	2c00      	cmp	r4, #0
 8012a50:	da02      	bge.n	8012a58 <floor+0xd0>
 8012a52:	2e14      	cmp	r6, #20
 8012a54:	d103      	bne.n	8012a5e <floor+0xd6>
 8012a56:	3401      	adds	r4, #1
 8012a58:	ea25 0507 	bic.w	r5, r5, r7
 8012a5c:	e7b7      	b.n	80129ce <floor+0x46>
 8012a5e:	2301      	movs	r3, #1
 8012a60:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012a64:	fa03 f606 	lsl.w	r6, r3, r6
 8012a68:	4435      	add	r5, r6
 8012a6a:	4545      	cmp	r5, r8
 8012a6c:	bf38      	it	cc
 8012a6e:	18e4      	addcc	r4, r4, r3
 8012a70:	e7f2      	b.n	8012a58 <floor+0xd0>
 8012a72:	2500      	movs	r5, #0
 8012a74:	462c      	mov	r4, r5
 8012a76:	e7aa      	b.n	80129ce <floor+0x46>
 8012a78:	8800759c 	.word	0x8800759c
 8012a7c:	7e37e43c 	.word	0x7e37e43c
 8012a80:	bff00000 	.word	0xbff00000
 8012a84:	000fffff 	.word	0x000fffff

08012a88 <nan>:
 8012a88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012a90 <nan+0x8>
 8012a8c:	4770      	bx	lr
 8012a8e:	bf00      	nop
 8012a90:	00000000 	.word	0x00000000
 8012a94:	7ff80000 	.word	0x7ff80000

08012a98 <rint>:
 8012a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a9a:	ec51 0b10 	vmov	r0, r1, d0
 8012a9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012aa2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012aa6:	2e13      	cmp	r6, #19
 8012aa8:	ee10 4a10 	vmov	r4, s0
 8012aac:	460b      	mov	r3, r1
 8012aae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012ab2:	dc58      	bgt.n	8012b66 <rint+0xce>
 8012ab4:	2e00      	cmp	r6, #0
 8012ab6:	da2b      	bge.n	8012b10 <rint+0x78>
 8012ab8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012abc:	4302      	orrs	r2, r0
 8012abe:	d023      	beq.n	8012b08 <rint+0x70>
 8012ac0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012ac4:	4302      	orrs	r2, r0
 8012ac6:	4254      	negs	r4, r2
 8012ac8:	4314      	orrs	r4, r2
 8012aca:	0c4b      	lsrs	r3, r1, #17
 8012acc:	0b24      	lsrs	r4, r4, #12
 8012ace:	045b      	lsls	r3, r3, #17
 8012ad0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012ad4:	ea44 0103 	orr.w	r1, r4, r3
 8012ad8:	4b32      	ldr	r3, [pc, #200]	; (8012ba4 <rint+0x10c>)
 8012ada:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012ade:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012ae2:	4602      	mov	r2, r0
 8012ae4:	460b      	mov	r3, r1
 8012ae6:	4630      	mov	r0, r6
 8012ae8:	4639      	mov	r1, r7
 8012aea:	f7ed fbdf 	bl	80002ac <__adddf3>
 8012aee:	e9cd 0100 	strd	r0, r1, [sp]
 8012af2:	463b      	mov	r3, r7
 8012af4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012af8:	4632      	mov	r2, r6
 8012afa:	f7ed fbd5 	bl	80002a8 <__aeabi_dsub>
 8012afe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012b02:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012b06:	4639      	mov	r1, r7
 8012b08:	ec41 0b10 	vmov	d0, r0, r1
 8012b0c:	b003      	add	sp, #12
 8012b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b10:	4a25      	ldr	r2, [pc, #148]	; (8012ba8 <rint+0x110>)
 8012b12:	4132      	asrs	r2, r6
 8012b14:	ea01 0702 	and.w	r7, r1, r2
 8012b18:	4307      	orrs	r7, r0
 8012b1a:	d0f5      	beq.n	8012b08 <rint+0x70>
 8012b1c:	0851      	lsrs	r1, r2, #1
 8012b1e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8012b22:	4314      	orrs	r4, r2
 8012b24:	d00c      	beq.n	8012b40 <rint+0xa8>
 8012b26:	ea23 0201 	bic.w	r2, r3, r1
 8012b2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012b2e:	2e13      	cmp	r6, #19
 8012b30:	fa43 f606 	asr.w	r6, r3, r6
 8012b34:	bf0c      	ite	eq
 8012b36:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012b3a:	2400      	movne	r4, #0
 8012b3c:	ea42 0306 	orr.w	r3, r2, r6
 8012b40:	4918      	ldr	r1, [pc, #96]	; (8012ba4 <rint+0x10c>)
 8012b42:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012b46:	4622      	mov	r2, r4
 8012b48:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	4629      	mov	r1, r5
 8012b50:	f7ed fbac 	bl	80002ac <__adddf3>
 8012b54:	e9cd 0100 	strd	r0, r1, [sp]
 8012b58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b5c:	4622      	mov	r2, r4
 8012b5e:	462b      	mov	r3, r5
 8012b60:	f7ed fba2 	bl	80002a8 <__aeabi_dsub>
 8012b64:	e7d0      	b.n	8012b08 <rint+0x70>
 8012b66:	2e33      	cmp	r6, #51	; 0x33
 8012b68:	dd07      	ble.n	8012b7a <rint+0xe2>
 8012b6a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012b6e:	d1cb      	bne.n	8012b08 <rint+0x70>
 8012b70:	ee10 2a10 	vmov	r2, s0
 8012b74:	f7ed fb9a 	bl	80002ac <__adddf3>
 8012b78:	e7c6      	b.n	8012b08 <rint+0x70>
 8012b7a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8012b7e:	f04f 36ff 	mov.w	r6, #4294967295
 8012b82:	40d6      	lsrs	r6, r2
 8012b84:	4230      	tst	r0, r6
 8012b86:	d0bf      	beq.n	8012b08 <rint+0x70>
 8012b88:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8012b8c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8012b90:	bf1f      	itttt	ne
 8012b92:	ea24 0101 	bicne.w	r1, r4, r1
 8012b96:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012b9a:	fa44 f202 	asrne.w	r2, r4, r2
 8012b9e:	ea41 0402 	orrne.w	r4, r1, r2
 8012ba2:	e7cd      	b.n	8012b40 <rint+0xa8>
 8012ba4:	080132a8 	.word	0x080132a8
 8012ba8:	000fffff 	.word	0x000fffff
 8012bac:	00000000 	.word	0x00000000

08012bb0 <scalbn>:
 8012bb0:	b570      	push	{r4, r5, r6, lr}
 8012bb2:	ec55 4b10 	vmov	r4, r5, d0
 8012bb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012bba:	4606      	mov	r6, r0
 8012bbc:	462b      	mov	r3, r5
 8012bbe:	b99a      	cbnz	r2, 8012be8 <scalbn+0x38>
 8012bc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012bc4:	4323      	orrs	r3, r4
 8012bc6:	d036      	beq.n	8012c36 <scalbn+0x86>
 8012bc8:	4b39      	ldr	r3, [pc, #228]	; (8012cb0 <scalbn+0x100>)
 8012bca:	4629      	mov	r1, r5
 8012bcc:	ee10 0a10 	vmov	r0, s0
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	f7ed fd21 	bl	8000618 <__aeabi_dmul>
 8012bd6:	4b37      	ldr	r3, [pc, #220]	; (8012cb4 <scalbn+0x104>)
 8012bd8:	429e      	cmp	r6, r3
 8012bda:	4604      	mov	r4, r0
 8012bdc:	460d      	mov	r5, r1
 8012bde:	da10      	bge.n	8012c02 <scalbn+0x52>
 8012be0:	a32b      	add	r3, pc, #172	; (adr r3, 8012c90 <scalbn+0xe0>)
 8012be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be6:	e03a      	b.n	8012c5e <scalbn+0xae>
 8012be8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012bec:	428a      	cmp	r2, r1
 8012bee:	d10c      	bne.n	8012c0a <scalbn+0x5a>
 8012bf0:	ee10 2a10 	vmov	r2, s0
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	4629      	mov	r1, r5
 8012bf8:	f7ed fb58 	bl	80002ac <__adddf3>
 8012bfc:	4604      	mov	r4, r0
 8012bfe:	460d      	mov	r5, r1
 8012c00:	e019      	b.n	8012c36 <scalbn+0x86>
 8012c02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012c06:	460b      	mov	r3, r1
 8012c08:	3a36      	subs	r2, #54	; 0x36
 8012c0a:	4432      	add	r2, r6
 8012c0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012c10:	428a      	cmp	r2, r1
 8012c12:	dd08      	ble.n	8012c26 <scalbn+0x76>
 8012c14:	2d00      	cmp	r5, #0
 8012c16:	a120      	add	r1, pc, #128	; (adr r1, 8012c98 <scalbn+0xe8>)
 8012c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c1c:	da1c      	bge.n	8012c58 <scalbn+0xa8>
 8012c1e:	a120      	add	r1, pc, #128	; (adr r1, 8012ca0 <scalbn+0xf0>)
 8012c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c24:	e018      	b.n	8012c58 <scalbn+0xa8>
 8012c26:	2a00      	cmp	r2, #0
 8012c28:	dd08      	ble.n	8012c3c <scalbn+0x8c>
 8012c2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012c2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012c32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012c36:	ec45 4b10 	vmov	d0, r4, r5
 8012c3a:	bd70      	pop	{r4, r5, r6, pc}
 8012c3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012c40:	da19      	bge.n	8012c76 <scalbn+0xc6>
 8012c42:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012c46:	429e      	cmp	r6, r3
 8012c48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012c4c:	dd0a      	ble.n	8012c64 <scalbn+0xb4>
 8012c4e:	a112      	add	r1, pc, #72	; (adr r1, 8012c98 <scalbn+0xe8>)
 8012c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d1e2      	bne.n	8012c1e <scalbn+0x6e>
 8012c58:	a30f      	add	r3, pc, #60	; (adr r3, 8012c98 <scalbn+0xe8>)
 8012c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5e:	f7ed fcdb 	bl	8000618 <__aeabi_dmul>
 8012c62:	e7cb      	b.n	8012bfc <scalbn+0x4c>
 8012c64:	a10a      	add	r1, pc, #40	; (adr r1, 8012c90 <scalbn+0xe0>)
 8012c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d0b8      	beq.n	8012be0 <scalbn+0x30>
 8012c6e:	a10e      	add	r1, pc, #56	; (adr r1, 8012ca8 <scalbn+0xf8>)
 8012c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c74:	e7b4      	b.n	8012be0 <scalbn+0x30>
 8012c76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012c7a:	3236      	adds	r2, #54	; 0x36
 8012c7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012c80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012c84:	4620      	mov	r0, r4
 8012c86:	4b0c      	ldr	r3, [pc, #48]	; (8012cb8 <scalbn+0x108>)
 8012c88:	2200      	movs	r2, #0
 8012c8a:	e7e8      	b.n	8012c5e <scalbn+0xae>
 8012c8c:	f3af 8000 	nop.w
 8012c90:	c2f8f359 	.word	0xc2f8f359
 8012c94:	01a56e1f 	.word	0x01a56e1f
 8012c98:	8800759c 	.word	0x8800759c
 8012c9c:	7e37e43c 	.word	0x7e37e43c
 8012ca0:	8800759c 	.word	0x8800759c
 8012ca4:	fe37e43c 	.word	0xfe37e43c
 8012ca8:	c2f8f359 	.word	0xc2f8f359
 8012cac:	81a56e1f 	.word	0x81a56e1f
 8012cb0:	43500000 	.word	0x43500000
 8012cb4:	ffff3cb0 	.word	0xffff3cb0
 8012cb8:	3c900000 	.word	0x3c900000

08012cbc <_init>:
 8012cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cbe:	bf00      	nop
 8012cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cc2:	bc08      	pop	{r3}
 8012cc4:	469e      	mov	lr, r3
 8012cc6:	4770      	bx	lr

08012cc8 <_fini>:
 8012cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cca:	bf00      	nop
 8012ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cce:	bc08      	pop	{r3}
 8012cd0:	469e      	mov	lr, r3
 8012cd2:	4770      	bx	lr
