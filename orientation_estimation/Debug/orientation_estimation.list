
orientation_estimation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012aa4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08012c58  08012c58  00022c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013238  08013238  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  08013238  08013238  00023238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013240  08013240  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013240  08013240  00023240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013244  08013244  00023244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08013248  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a8  2**0
                  CONTENTS
 10 .bss          00008b3c  200000a8  200000a8  000300a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20008be4  20008be4  000300a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003359e  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000628c  00000000  00000000  00063676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002338  00000000  00000000  00069908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002108  00000000  00000000  0006bc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cff2  00000000  00000000  0006dd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b5a2  00000000  00000000  0009ad3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6338  00000000  00000000  000c62dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001bc614  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000aa50  00000000  00000000  001bc668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012c3c 	.word	0x08012c3c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	08012c3c 	.word	0x08012c3c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	0000      	movs	r0, r0
	...

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b0e4      	sub	sp, #400	; 0x190
 8000eec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eee:	f001 fdd7 	bl	8002aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef2:	f000 fd3b 	bl	800196c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef6:	f000 ffa9 	bl	8001e4c <MX_GPIO_Init>
  MX_CRC_Init();
 8000efa:	f000 fda1 	bl	8001a40 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000efe:	f000 fdb3 	bl	8001a68 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000f02:	f000 ff53 	bl	8001dac <MX_FMC_Init>
  MX_I2C3_Init();
 8000f06:	f000 fde1 	bl	8001acc <MX_I2C3_Init>
  MX_LTDC_Init();
 8000f0a:	f000 fe1f 	bl	8001b4c <MX_LTDC_Init>
  MX_SPI5_Init();
 8000f0e:	f000 fe9d 	bl	8001c4c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000f12:	f000 fed1 	bl	8001cb8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f16:	f000 ff1f 	bl	8001d58 <MX_USART1_UART_Init>

  ///////////////////////////
  //change
  ///////////////////////////

  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1e:	48ba      	ldr	r0, [pc, #744]	; (8001208 <main+0x320>)
 8000f20:	f002 fad3 	bl	80034ca <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000f24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f28:	48b7      	ldr	r0, [pc, #732]	; (8001208 <main+0x320>)
 8000f2a:	f002 face 	bl	80034ca <HAL_GPIO_TogglePin>

  // Register holds configuration bit setup for registers
  uint8_t reg[1];

  // Gyroscope
  reg[0]=0xC0;
 8000f2e:	23c0      	movs	r3, #192	; 0xc0
 8000f30:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG1_G, 1, reg, 1, 0x100);
 8000f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f38:	9302      	str	r3, [sp, #8]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	2210      	movs	r2, #16
 8000f48:	21d6      	movs	r1, #214	; 0xd6
 8000f4a:	48b0      	ldr	r0, [pc, #704]	; (800120c <main+0x324>)
 8000f4c:	f004 f98c 	bl	8005268 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG2_G, 1, reg, 1, 0x100);
 8000f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	2211      	movs	r2, #17
 8000f6a:	21d6      	movs	r1, #214	; 0xd6
 8000f6c:	48a7      	ldr	r0, [pc, #668]	; (800120c <main+0x324>)
 8000f6e:	f004 f97b 	bl	8005268 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG3_G, 1, reg, 1, 0x100);
 8000f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	2212      	movs	r2, #18
 8000f8c:	21d6      	movs	r1, #214	; 0xd6
 8000f8e:	489f      	ldr	r0, [pc, #636]	; (800120c <main+0x324>)
 8000f90:	f004 f96a 	bl	8005268 <HAL_I2C_Mem_Write>
  reg[0]=0x38;
 8000f94:	2338      	movs	r3, #56	; 0x38
 8000f96:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG4, 1, reg, 1, 0x100);
 8000f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	221e      	movs	r2, #30
 8000fae:	21d6      	movs	r1, #214	; 0xd6
 8000fb0:	4896      	ldr	r0, [pc, #600]	; (800120c <main+0x324>)
 8000fb2:	f004 f959 	bl	8005268 <HAL_I2C_Mem_Write>


  // Accelerometer
  reg[0]=0x38;
 8000fb6:	2338      	movs	r3, #56	; 0x38
 8000fb8:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG5_XL, 1, reg, 1, 0x100);
 8000fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	221f      	movs	r2, #31
 8000fd0:	21d6      	movs	r1, #214	; 0xd6
 8000fd2:	488e      	ldr	r0, [pc, #568]	; (800120c <main+0x324>)
 8000fd4:	f004 f948 	bl	8005268 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG6_XL, 1, reg, 1, 0x100);
 8000fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	21d6      	movs	r1, #214	; 0xd6
 8000ff4:	4885      	ldr	r0, [pc, #532]	; (800120c <main+0x324>)
 8000ff6:	f004 f937 	bl	8005268 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG7_XL, 1, reg, 1, 0x100);
 8001000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2301      	movs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	2221      	movs	r2, #33	; 0x21
 8001014:	21d6      	movs	r1, #214	; 0xd6
 8001016:	487d      	ldr	r0, [pc, #500]	; (800120c <main+0x324>)
 8001018:	f004 f926 	bl	8005268 <HAL_I2C_Mem_Write>


  // Magnetometer
  reg[0]=0x1C;
 800101c:	231c      	movs	r3, #28
 800101e:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG1_M, 1, reg, 1, 0x100);
 8001022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2301      	movs	r3, #1
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	2220      	movs	r2, #32
 8001036:	213c      	movs	r1, #60	; 0x3c
 8001038:	4874      	ldr	r0, [pc, #464]	; (800120c <main+0x324>)
 800103a:	f004 f915 	bl	8005268 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG2_M, 1, reg, 1, 0x100);
 8001044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	2301      	movs	r3, #1
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	2221      	movs	r2, #33	; 0x21
 8001058:	213c      	movs	r1, #60	; 0x3c
 800105a:	486c      	ldr	r0, [pc, #432]	; (800120c <main+0x324>)
 800105c:	f004 f904 	bl	8005268 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG3_M, 1, reg, 1, 0x100);
 8001066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2301      	movs	r3, #1
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	2222      	movs	r2, #34	; 0x22
 800107a:	213c      	movs	r1, #60	; 0x3c
 800107c:	4863      	ldr	r0, [pc, #396]	; (800120c <main+0x324>)
 800107e:	f004 f8f3 	bl	8005268 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8001082:	2300      	movs	r3, #0
 8001084:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG4_M, 1, reg, 1, 0x100);
 8001088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	2223      	movs	r2, #35	; 0x23
 800109c:	213c      	movs	r1, #60	; 0x3c
 800109e:	485b      	ldr	r0, [pc, #364]	; (800120c <main+0x324>)
 80010a0:	f004 f8e2 	bl	8005268 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG5_M, 1, reg, 1, 0x100);
 80010aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	2301      	movs	r3, #1
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	2224      	movs	r2, #36	; 0x24
 80010be:	213c      	movs	r1, #60	; 0x3c
 80010c0:	4852      	ldr	r0, [pc, #328]	; (800120c <main+0x324>)
 80010c2:	f004 f8d1 	bl	8005268 <HAL_I2C_Mem_Write>

  double a[3], g[3], m[3];
  uint8_t recieve[6];
  uint8_t buf[50];
  int16_t i = 0, g_data[3],a_data[3], m_data[3];
 80010c6:	2300      	movs	r3, #0
 80010c8:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80010cc:	4b50      	ldr	r3, [pc, #320]	; (8001210 <main+0x328>)
 80010ce:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80010d2:	461d      	mov	r5, r3
 80010d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010e0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f00a fbfa 	bl	800b8e0 <osThreadCreate>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a49      	ldr	r2, [pc, #292]	; (8001214 <main+0x32c>)
 80010f0:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  char st[50]="";
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	3304      	adds	r3, #4
 80010fa:	222e      	movs	r2, #46	; 0x2e
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00d f816 	bl	800e130 <memset>
	  char st1[50]="";
 8001104:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	3304      	adds	r3, #4
 800110e:	222e      	movs	r2, #46	; 0x2e
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f00d f80c 	bl	800e130 <memset>
	  char st2[50]="";
 8001118:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	3304      	adds	r3, #4
 8001122:	222e      	movs	r2, #46	; 0x2e
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f00d f802 	bl	800e130 <memset>

	  // Receive gyroscope data

	  	  HAL_I2C_Mem_Read(&hi2c3, IMU_GYRO_ACC, 0x18, 1, recieve, 6, 0x100);
 800112c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2306      	movs	r3, #6
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	2218      	movs	r2, #24
 8001140:	21d6      	movs	r1, #214	; 0xd6
 8001142:	4832      	ldr	r0, [pc, #200]	; (800120c <main+0x324>)
 8001144:	f004 f98a 	bl	800545c <HAL_I2C_Mem_Read>
	  	  for(i = 0;i<3;i++)
 8001148:	2300      	movs	r3, #0
 800114a:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 800114e:	e03f      	b.n	80011d0 <main+0x2e8>
	  	  {
	  		  g_data[i]=(recieve[2*i+1]<<8)|recieve[2*i];
 8001150:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	3301      	adds	r3, #1
 8001158:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800115c:	4413      	add	r3, r2
 800115e:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b219      	sxth	r1, r3
 8001166:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001170:	4413      	add	r3, r2
 8001172:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001176:	b21a      	sxth	r2, r3
 8001178:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800117c:	430a      	orrs	r2, r1
 800117e:	b212      	sxth	r2, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8001186:	440b      	add	r3, r1
 8001188:	f823 2c94 	strh.w	r2, [r3, #-148]
	  		  g[i] = (double)g_data[i]*0.007477;//(245/32768)
 800118c:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001196:	4413      	add	r3, r2
 8001198:	f933 3c94 	ldrsh.w	r3, [r3, #-148]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9d1 	bl	8000544 <__aeabi_i2d>
 80011a2:	f9b7 417e 	ldrsh.w	r4, [r7, #382]	; 0x17e
 80011a6:	a316      	add	r3, pc, #88	; (adr r3, 8001200 <main+0x318>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff fa34 	bl	8000618 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	00e1      	lsls	r1, r4, #3
 80011b6:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 80011ba:	4401      	add	r1, r0
 80011bc:	3938      	subs	r1, #56	; 0x38
 80011be:	e9c1 2300 	strd	r2, r3, [r1]
	  	  for(i = 0;i<3;i++)
 80011c2:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	3301      	adds	r3, #1
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 80011d0:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	ddbb      	ble.n	8001150 <main+0x268>
	  	  }

	  	  // Receive accelerometer data

	  	  HAL_I2C_Mem_Read(&hi2c3, IMU_GYRO_ACC, 0x28, 1, recieve, 6, 0x100);
 80011d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011dc:	9302      	str	r3, [sp, #8]
 80011de:	2306      	movs	r3, #6
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	2228      	movs	r2, #40	; 0x28
 80011ec:	21d6      	movs	r1, #214	; 0xd6
 80011ee:	4807      	ldr	r0, [pc, #28]	; (800120c <main+0x324>)
 80011f0:	f004 f934 	bl	800545c <HAL_I2C_Mem_Read>
	  	  for(i = 0;i<3;i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 80011fa:	e04d      	b.n	8001298 <main+0x3b0>
 80011fc:	f3af 8000 	nop.w
 8001200:	e78e1933 	.word	0xe78e1933
 8001204:	3f7ea033 	.word	0x3f7ea033
 8001208:	40021800 	.word	0x40021800
 800120c:	20008244 	.word	0x20008244
 8001210:	08012c74 	.word	0x08012c74
 8001214:	20008240 	.word	0x20008240
	  	  {
	  		  a_data[i]=(recieve[2*i+1]<<8)|recieve[2*i];
 8001218:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	3301      	adds	r3, #1
 8001220:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001224:	4413      	add	r3, r2
 8001226:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	b219      	sxth	r1, r3
 800122e:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001238:	4413      	add	r3, r2
 800123a:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800123e:	b21a      	sxth	r2, r3
 8001240:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001244:	430a      	orrs	r2, r1
 8001246:	b212      	sxth	r2, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 800124e:	440b      	add	r3, r1
 8001250:	f823 2c9c 	strh.w	r2, [r3, #-156]
	  	  	  a[i] = (double)a_data[i]/16384;//(2/32768)
 8001254:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800125e:	4413      	add	r3, r2
 8001260:	f933 3c9c 	ldrsh.w	r3, [r3, #-156]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f96d 	bl	8000544 <__aeabi_i2d>
 800126a:	f9b7 417e 	ldrsh.w	r4, [r7, #382]	; 0x17e
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4ba9      	ldr	r3, [pc, #676]	; (8001518 <main+0x630>)
 8001274:	f7ff fafa 	bl	800086c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	00e1      	lsls	r1, r4, #3
 800127e:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8001282:	4401      	add	r1, r0
 8001284:	3920      	subs	r1, #32
 8001286:	e9c1 2300 	strd	r2, r3, [r1]
	  	  for(i = 0;i<3;i++)
 800128a:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800128e:	b29b      	uxth	r3, r3
 8001290:	3301      	adds	r3, #1
 8001292:	b29b      	uxth	r3, r3
 8001294:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 8001298:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800129c:	2b02      	cmp	r3, #2
 800129e:	ddbb      	ble.n	8001218 <main+0x330>
	  	  }

	  	  // Receive magnetometer data

	  	  HAL_I2C_Mem_Read(&hi2c3, IMU_MAG, 0x28, 1, recieve, 6, 0x100);
 80012a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	2306      	movs	r3, #6
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	2228      	movs	r2, #40	; 0x28
 80012b4:	213c      	movs	r1, #60	; 0x3c
 80012b6:	4899      	ldr	r0, [pc, #612]	; (800151c <main+0x634>)
 80012b8:	f004 f8d0 	bl	800545c <HAL_I2C_Mem_Read>
	  	  for(i = 0;i<3;i++)
 80012bc:	2300      	movs	r3, #0
 80012be:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 80012c2:	e03f      	b.n	8001344 <main+0x45c>
	  	  {
	  		  m_data[i]=(recieve[2*i+1]<<8)|recieve[2*i];
 80012c4:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	3301      	adds	r3, #1
 80012cc:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80012d0:	4413      	add	r3, r2
 80012d2:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b219      	sxth	r1, r3
 80012da:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80012e4:	4413      	add	r3, r2
 80012e6:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80012f0:	430a      	orrs	r2, r1
 80012f2:	b212      	sxth	r2, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80012fa:	440b      	add	r3, r1
 80012fc:	f823 2ca4 	strh.w	r2, [r3, #-164]
	  		  m[i] = (double)m_data[i]*0.0001221;//(4/32768)
 8001300:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800130a:	4413      	add	r3, r2
 800130c:	f933 3ca4 	ldrsh.w	r3, [r3, #-164]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f917 	bl	8000544 <__aeabi_i2d>
 8001316:	f9b7 417e 	ldrsh.w	r4, [r7, #382]	; 0x17e
 800131a:	a37d      	add	r3, pc, #500	; (adr r3, 8001510 <main+0x628>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff f97a 	bl	8000618 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	00e1      	lsls	r1, r4, #3
 800132a:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 800132e:	4401      	add	r1, r0
 8001330:	3950      	subs	r1, #80	; 0x50
 8001332:	e9c1 2300 	strd	r2, r3, [r1]
	  	  for(i = 0;i<3;i++)
 8001336:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800133a:	b29b      	uxth	r3, r3
 800133c:	3301      	adds	r3, #1
 800133e:	b29b      	uxth	r3, r3
 8001340:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 8001344:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001348:	2b02      	cmp	r3, #2
 800134a:	ddbb      	ble.n	80012c4 <main+0x3dc>
//
//	  strcpy((char*)buf, st2);
//	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);

	  // Call CF
	  CF(g[0], g[1], g[2], a[0], a[1], a[2], m[0], m[1], m[2]);
 800134c:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 8001350:	ed97 1b54 	vldr	d1, [r7, #336]	; 0x150
 8001354:	ed97 2b56 	vldr	d2, [r7, #344]	; 0x158
 8001358:	ed97 3b58 	vldr	d3, [r7, #352]	; 0x160
 800135c:	ed97 4b5a 	vldr	d4, [r7, #360]	; 0x168
 8001360:	ed97 5b5c 	vldr	d5, [r7, #368]	; 0x170
 8001364:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8001368:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 800136c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001370:	e9cd 2300 	strd	r2, r3, [sp]
 8001374:	f000 f914 	bl	80015a0 <CF>

	  // Send CF yaw (y), pitch (p), roll (r) via UART to PC to be visualized
	  strcat(st1, "y");
 8001378:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800137c:	4618      	mov	r0, r3
 800137e:	f7fe ff37 	bl	80001f0 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800138a:	4413      	add	r3, r2
 800138c:	4964      	ldr	r1, [pc, #400]	; (8001520 <main+0x638>)
 800138e:	461a      	mov	r2, r3
 8001390:	460b      	mov	r3, r1
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	8013      	strh	r3, [r2, #0]
	  double_to_char(yaw_cf/10, buffer);
 8001396:	4b63      	ldr	r3, [pc, #396]	; (8001524 <main+0x63c>)
 8001398:	e9d3 0100 	ldrd	r0, r1, [r3]
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b61      	ldr	r3, [pc, #388]	; (8001528 <main+0x640>)
 80013a2:	f7ff fa63 	bl	800086c <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	ec43 2b17 	vmov	d7, r2, r3
 80013ae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013b2:	4618      	mov	r0, r3
 80013b4:	eeb0 0a47 	vmov.f32	s0, s14
 80013b8:	eef0 0a67 	vmov.f32	s1, s15
 80013bc:	f000 f8c2 	bl	8001544 <double_to_char>
	  strcat(st1, buffer);
 80013c0:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80013c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f00c ff72 	bl	800e2b4 <strcat>
	  strcat(st1, "y");
 80013d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7fe ff0b 	bl	80001f0 <strlen>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013e2:	4413      	add	r3, r2
 80013e4:	494e      	ldr	r1, [pc, #312]	; (8001520 <main+0x638>)
 80013e6:	461a      	mov	r2, r3
 80013e8:	460b      	mov	r3, r1
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	8013      	strh	r3, [r2, #0]

	  strcat(st1, "p");
 80013ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe fefc 	bl	80001f0 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001400:	4413      	add	r3, r2
 8001402:	494a      	ldr	r1, [pc, #296]	; (800152c <main+0x644>)
 8001404:	461a      	mov	r2, r3
 8001406:	460b      	mov	r3, r1
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	8013      	strh	r3, [r2, #0]
	  double_to_char(pitch_cf, buffer);
 800140c:	4b48      	ldr	r3, [pc, #288]	; (8001530 <main+0x648>)
 800140e:	ed93 7b00 	vldr	d7, [r3]
 8001412:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001416:	4618      	mov	r0, r3
 8001418:	eeb0 0a47 	vmov.f32	s0, s14
 800141c:	eef0 0a67 	vmov.f32	s1, s15
 8001420:	f000 f890 	bl	8001544 <double_to_char>
	  strcat(st1, buffer);
 8001424:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001428:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f00c ff40 	bl	800e2b4 <strcat>
	  strcat(st1, "p");
 8001434:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe fed9 	bl	80001f0 <strlen>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001446:	4413      	add	r3, r2
 8001448:	4938      	ldr	r1, [pc, #224]	; (800152c <main+0x644>)
 800144a:	461a      	mov	r2, r3
 800144c:	460b      	mov	r3, r1
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	8013      	strh	r3, [r2, #0]

	  strcat(st1, "r");
 8001452:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe feca 	bl	80001f0 <strlen>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001464:	4413      	add	r3, r2
 8001466:	4933      	ldr	r1, [pc, #204]	; (8001534 <main+0x64c>)
 8001468:	461a      	mov	r2, r3
 800146a:	460b      	mov	r3, r1
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	8013      	strh	r3, [r2, #0]
	  double_to_char(roll_cf, buffer);
 8001470:	4b31      	ldr	r3, [pc, #196]	; (8001538 <main+0x650>)
 8001472:	ed93 7b00 	vldr	d7, [r3]
 8001476:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800147a:	4618      	mov	r0, r3
 800147c:	eeb0 0a47 	vmov.f32	s0, s14
 8001480:	eef0 0a67 	vmov.f32	s1, s15
 8001484:	f000 f85e 	bl	8001544 <double_to_char>
	  strcat(st1, buffer);
 8001488:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800148c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f00c ff0e 	bl	800e2b4 <strcat>
	  strcat(st1, "r");
 8001498:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe fea7 	bl	80001f0 <strlen>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014aa:	4413      	add	r3, r2
 80014ac:	4921      	ldr	r1, [pc, #132]	; (8001534 <main+0x64c>)
 80014ae:	461a      	mov	r2, r3
 80014b0:	460b      	mov	r3, r1
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	8013      	strh	r3, [r2, #0]

	  strcat(st1, "\n");
 80014b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe fe98 	bl	80001f0 <strlen>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014c8:	4413      	add	r3, r2
 80014ca:	491c      	ldr	r1, [pc, #112]	; (800153c <main+0x654>)
 80014cc:	461a      	mov	r2, r3
 80014ce:	460b      	mov	r3, r1
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	8013      	strh	r3, [r2, #0]
	  strcpy((char*)buf, st1);
 80014d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f00c fef7 	bl	800e2d2 <strcpy>
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80014e4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe fe81 	bl	80001f0 <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	4811      	ldr	r0, [pc, #68]	; (8001540 <main+0x658>)
 80014fc:	f006 fd01 	bl	8007f02 <HAL_UART_Transmit>

	  // Sample period
	  HAL_Delay(delay_ms);
 8001500:	2314      	movs	r3, #20
 8001502:	4618      	mov	r0, r3
 8001504:	f001 fb0e 	bl	8002b24 <HAL_Delay>
  {
 8001508:	e5f3      	b.n	80010f2 <main+0x20a>
 800150a:	bf00      	nop
 800150c:	f3af 8000 	nop.w
 8001510:	0380be01 	.word	0x0380be01
 8001514:	3f2000ff 	.word	0x3f2000ff
 8001518:	40d00000 	.word	0x40d00000
 800151c:	20008244 	.word	0x20008244
 8001520:	08012c64 	.word	0x08012c64
 8001524:	200000d8 	.word	0x200000d8
 8001528:	40240000 	.word	0x40240000
 800152c:	08012c68 	.word	0x08012c68
 8001530:	200000c8 	.word	0x200000c8
 8001534:	08012c6c 	.word	0x08012c6c
 8001538:	200000d0 	.word	0x200000d0
 800153c:	08012c70 	.word	0x08012c70
 8001540:	200083a0 	.word	0x200083a0

08001544 <double_to_char>:
  }
  /* USER CODE END 3 */
}

// Function to convert double variables to a char
void double_to_char(double f,char * buffer){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	ed87 0b02 	vstr	d0, [r7, #8]
 800154e:	6078      	str	r0, [r7, #4]
    gcvt(f, 10, buffer);
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	200a      	movs	r0, #10
 8001554:	ed97 0b02 	vldr	d0, [r7, #8]
 8001558:	f00c fd7e 	bl	800e058 <gcvt>
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	0000      	movs	r0, r0
	...

08001568 <RAD_TO_DEG>:

// Receives radian angle and returns degree angle
double RAD_TO_DEG(double RAD){
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	ed87 0b00 	vstr	d0, [r7]
    return (RAD * (180/3.14159265359));
 8001572:	a309      	add	r3, pc, #36	; (adr r3, 8001598 <RAD_TO_DEG+0x30>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800157c:	f7ff f84c 	bl	8000618 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	ec43 2b17 	vmov	d7, r2, r3
}
 8001588:	eeb0 0a47 	vmov.f32	s0, s14
 800158c:	eef0 0a67 	vmov.f32	s1, s15
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	1a63bfe5 	.word	0x1a63bfe5
 800159c:	404ca5dc 	.word	0x404ca5dc

080015a0 <CF>:
double DEG_TO_RAD(double DEG){
    return (DEG * (3.14159265359/180));
}

// Complementary filter implementation
void CF(double wx, double wy, double wz, double ax, double ay, double az, double mx, double my, double mz){
 80015a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a4:	b0a2      	sub	sp, #136	; 0x88
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
 80015ac:	ed87 1b0e 	vstr	d1, [r7, #56]	; 0x38
 80015b0:	ed87 2b0c 	vstr	d2, [r7, #48]	; 0x30
 80015b4:	ed87 3b0a 	vstr	d3, [r7, #40]	; 0x28
 80015b8:	ed87 4b08 	vstr	d4, [r7, #32]
 80015bc:	ed87 5b06 	vstr	d5, [r7, #24]
 80015c0:	ed87 6b04 	vstr	d6, [r7, #16]
 80015c4:	ed87 7b02 	vstr	d7, [r7, #8]

    // Calculate pitch and roll measured by accelerometer
	double a_pitch_cf = RAD_TO_DEG(atan2(-ax, sqrt(pow(ay, 2) + pow(az, 2))));
 80015c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	ed9f 1bd2 	vldr	d1, [pc, #840]	; 8001920 <CF+0x380>
 80015d8:	ed97 0b08 	vldr	d0, [r7, #32]
 80015dc:	f00f f986 	bl	80108ec <pow>
 80015e0:	ec59 8b10 	vmov	r8, r9, d0
 80015e4:	ed9f 1bce 	vldr	d1, [pc, #824]	; 8001920 <CF+0x380>
 80015e8:	ed97 0b06 	vldr	d0, [r7, #24]
 80015ec:	f00f f97e 	bl	80108ec <pow>
 80015f0:	ec53 2b10 	vmov	r2, r3, d0
 80015f4:	4640      	mov	r0, r8
 80015f6:	4649      	mov	r1, r9
 80015f8:	f7fe fe58 	bl	80002ac <__adddf3>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	ec43 2b17 	vmov	d7, r2, r3
 8001604:	eeb0 0a47 	vmov.f32	s0, s14
 8001608:	eef0 0a67 	vmov.f32	s1, s15
 800160c:	f00f fa1c 	bl	8010a48 <sqrt>
 8001610:	eeb0 7a40 	vmov.f32	s14, s0
 8001614:	eef0 7a60 	vmov.f32	s15, s1
 8001618:	eeb0 1a47 	vmov.f32	s2, s14
 800161c:	eef0 1a67 	vmov.f32	s3, s15
 8001620:	ed97 0b00 	vldr	d0, [r7]
 8001624:	f00f f960 	bl	80108e8 <atan2>
 8001628:	eeb0 7a40 	vmov.f32	s14, s0
 800162c:	eef0 7a60 	vmov.f32	s15, s1
 8001630:	eeb0 0a47 	vmov.f32	s0, s14
 8001634:	eef0 0a67 	vmov.f32	s1, s15
 8001638:	f7ff ff96 	bl	8001568 <RAD_TO_DEG>
 800163c:	ed87 0b20 	vstr	d0, [r7, #128]	; 0x80
	double a_roll_cf = RAD_TO_DEG(atan2(ay, az));
 8001640:	ed97 1b06 	vldr	d1, [r7, #24]
 8001644:	ed97 0b08 	vldr	d0, [r7, #32]
 8001648:	f00f f94e 	bl	80108e8 <atan2>
 800164c:	eeb0 7a40 	vmov.f32	s14, s0
 8001650:	eef0 7a60 	vmov.f32	s15, s1
 8001654:	eeb0 0a47 	vmov.f32	s0, s14
 8001658:	eef0 0a67 	vmov.f32	s1, s15
 800165c:	f7ff ff84 	bl	8001568 <RAD_TO_DEG>
 8001660:	ed87 0b1e 	vstr	d0, [r7, #120]	; 0x78

    // Calculate yaw measured by magnetometer
	double Mx_cf = mx * cos(a_pitch_cf) + mz * sin(a_pitch_cf);
 8001664:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 8001668:	f00f f89a 	bl	80107a0 <cos>
 800166c:	ec51 0b10 	vmov	r0, r1, d0
 8001670:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001674:	f7fe ffd0 	bl	8000618 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4690      	mov	r8, r2
 800167e:	4699      	mov	r9, r3
 8001680:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 8001684:	f00f f8dc 	bl	8010840 <sin>
 8001688:	ec51 0b10 	vmov	r0, r1, d0
 800168c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001690:	f7fe ffc2 	bl	8000618 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4640      	mov	r0, r8
 800169a:	4649      	mov	r1, r9
 800169c:	f7fe fe06 	bl	80002ac <__adddf3>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double My_cf = mx * sin(a_roll_cf) * sin(a_pitch_cf) + my * cos(a_roll_cf) - mz * sin(a_roll_cf) * cos(a_pitch_cf);
 80016a8:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 80016ac:	f00f f8c8 	bl	8010840 <sin>
 80016b0:	ec51 0b10 	vmov	r0, r1, d0
 80016b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016b8:	f7fe ffae 	bl	8000618 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4690      	mov	r8, r2
 80016c2:	4699      	mov	r9, r3
 80016c4:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 80016c8:	f00f f8ba 	bl	8010840 <sin>
 80016cc:	ec53 2b10 	vmov	r2, r3, d0
 80016d0:	4640      	mov	r0, r8
 80016d2:	4649      	mov	r1, r9
 80016d4:	f7fe ffa0 	bl	8000618 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4690      	mov	r8, r2
 80016de:	4699      	mov	r9, r3
 80016e0:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 80016e4:	f00f f85c 	bl	80107a0 <cos>
 80016e8:	ec51 0b10 	vmov	r0, r1, d0
 80016ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016f0:	f7fe ff92 	bl	8000618 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4640      	mov	r0, r8
 80016fa:	4649      	mov	r1, r9
 80016fc:	f7fe fdd6 	bl	80002ac <__adddf3>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4690      	mov	r8, r2
 8001706:	4699      	mov	r9, r3
 8001708:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 800170c:	f00f f898 	bl	8010840 <sin>
 8001710:	ec51 0b10 	vmov	r0, r1, d0
 8001714:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001718:	f7fe ff7e 	bl	8000618 <__aeabi_dmul>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4692      	mov	sl, r2
 8001722:	469b      	mov	fp, r3
 8001724:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 8001728:	f00f f83a 	bl	80107a0 <cos>
 800172c:	ec53 2b10 	vmov	r2, r3, d0
 8001730:	4650      	mov	r0, sl
 8001732:	4659      	mov	r1, fp
 8001734:	f7fe ff70 	bl	8000618 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4640      	mov	r0, r8
 800173e:	4649      	mov	r1, r9
 8001740:	f7fe fdb2 	bl	80002a8 <__aeabi_dsub>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double m_yaw_cf = RAD_TO_DEG(atan2(-My_cf, Mx_cf));
 800174c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800174e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001750:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001754:	ed97 1b1c 	vldr	d1, [r7, #112]	; 0x70
 8001758:	ec45 4b10 	vmov	d0, r4, r5
 800175c:	f00f f8c4 	bl	80108e8 <atan2>
 8001760:	eeb0 7a40 	vmov.f32	s14, s0
 8001764:	eef0 7a60 	vmov.f32	s15, s1
 8001768:	eeb0 0a47 	vmov.f32	s0, s14
 800176c:	eef0 0a67 	vmov.f32	s1, s15
 8001770:	f7ff fefa 	bl	8001568 <RAD_TO_DEG>
 8001774:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60

    // Calculate pitch, roll and yaw measured by gyroscope
    double g_pitch_cf = RAD_TO_DEG(wy * DT_cf);
 8001778:	4b6b      	ldr	r3, [pc, #428]	; (8001928 <CF+0x388>)
 800177a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800177e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001782:	f7fe ff49 	bl	8000618 <__aeabi_dmul>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	ec43 2b17 	vmov	d7, r2, r3
 800178e:	eeb0 0a47 	vmov.f32	s0, s14
 8001792:	eef0 0a67 	vmov.f32	s1, s15
 8001796:	f7ff fee7 	bl	8001568 <RAD_TO_DEG>
 800179a:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
    double g_roll_cf = RAD_TO_DEG(wx * DT_cf);
 800179e:	4b62      	ldr	r3, [pc, #392]	; (8001928 <CF+0x388>)
 80017a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017a8:	f7fe ff36 	bl	8000618 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	ec43 2b17 	vmov	d7, r2, r3
 80017b4:	eeb0 0a47 	vmov.f32	s0, s14
 80017b8:	eef0 0a67 	vmov.f32	s1, s15
 80017bc:	f7ff fed4 	bl	8001568 <RAD_TO_DEG>
 80017c0:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    double g_yaw_cf = RAD_TO_DEG(wz * DT_cf);
 80017c4:	4b58      	ldr	r3, [pc, #352]	; (8001928 <CF+0x388>)
 80017c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017ce:	f7fe ff23 	bl	8000618 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	ec43 2b17 	vmov	d7, r2, r3
 80017da:	eeb0 0a47 	vmov.f32	s0, s14
 80017de:	eef0 0a67 	vmov.f32	s1, s15
 80017e2:	f7ff fec1 	bl	8001568 <RAD_TO_DEG>
 80017e6:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48

    // Update CF pitch, roll and yaw using previous pitch, roll and yaw and values above
    pitch_cf = weight_cf * (pitch_cf + g_pitch_cf * DT_cf) + (1 - weight_cf) * a_pitch_cf;
 80017ea:	4b4f      	ldr	r3, [pc, #316]	; (8001928 <CF+0x388>)
 80017ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017f4:	f7fe ff10 	bl	8000618 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	4b4a      	ldr	r3, [pc, #296]	; (800192c <CF+0x38c>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe fd51 	bl	80002ac <__adddf3>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <CF+0x390>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe fefe 	bl	8000618 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4614      	mov	r4, r2
 8001822:	461d      	mov	r5, r3
 8001824:	4b42      	ldr	r3, [pc, #264]	; (8001930 <CF+0x390>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f04f 0000 	mov.w	r0, #0
 800182e:	4941      	ldr	r1, [pc, #260]	; (8001934 <CF+0x394>)
 8001830:	f7fe fd3a 	bl	80002a8 <__aeabi_dsub>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001840:	f7fe feea 	bl	8000618 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4620      	mov	r0, r4
 800184a:	4629      	mov	r1, r5
 800184c:	f7fe fd2e 	bl	80002ac <__adddf3>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4935      	ldr	r1, [pc, #212]	; (800192c <CF+0x38c>)
 8001856:	e9c1 2300 	strd	r2, r3, [r1]
    roll_cf = weight_cf * (roll_cf + g_roll_cf * DT_cf) + (1 - weight_cf) * a_roll_cf;
 800185a:	4b33      	ldr	r3, [pc, #204]	; (8001928 <CF+0x388>)
 800185c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001860:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001864:	f7fe fed8 	bl	8000618 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	4b31      	ldr	r3, [pc, #196]	; (8001938 <CF+0x398>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe fd19 	bl	80002ac <__adddf3>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <CF+0x390>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe fec6 	bl	8000618 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4614      	mov	r4, r2
 8001892:	461d      	mov	r5, r3
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <CF+0x390>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f04f 0000 	mov.w	r0, #0
 800189e:	4925      	ldr	r1, [pc, #148]	; (8001934 <CF+0x394>)
 80018a0:	f7fe fd02 	bl	80002a8 <__aeabi_dsub>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80018b0:	f7fe feb2 	bl	8000618 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe fcf6 	bl	80002ac <__adddf3>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	491c      	ldr	r1, [pc, #112]	; (8001938 <CF+0x398>)
 80018c6:	e9c1 2300 	strd	r2, r3, [r1]
    yaw_cf = weight_cf * (yaw_cf + g_yaw_cf * DT_cf) + (1 - weight_cf) * m_yaw_cf;
 80018ca:	4b17      	ldr	r3, [pc, #92]	; (8001928 <CF+0x388>)
 80018cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018d4:	f7fe fea0 	bl	8000618 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	4b16      	ldr	r3, [pc, #88]	; (800193c <CF+0x39c>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe fce1 	bl	80002ac <__adddf3>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <CF+0x390>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fe8e 	bl	8000618 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4614      	mov	r4, r2
 8001902:	461d      	mov	r5, r3
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <CF+0x390>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f04f 0000 	mov.w	r0, #0
 800190e:	4909      	ldr	r1, [pc, #36]	; (8001934 <CF+0x394>)
 8001910:	f7fe fcca 	bl	80002a8 <__aeabi_dsub>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	e010      	b.n	8001940 <CF+0x3a0>
 800191e:	bf00      	nop
 8001920:	00000000 	.word	0x00000000
 8001924:	40000000 	.word	0x40000000
 8001928:	20000008 	.word	0x20000008
 800192c:	200000c8 	.word	0x200000c8
 8001930:	20000000 	.word	0x20000000
 8001934:	3ff00000 	.word	0x3ff00000
 8001938:	200000d0 	.word	0x200000d0
 800193c:	200000d8 	.word	0x200000d8
 8001940:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001944:	f7fe fe68 	bl	8000618 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe fcac 	bl	80002ac <__adddf3>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4903      	ldr	r1, [pc, #12]	; (8001968 <CF+0x3c8>)
 800195a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800195e:	bf00      	nop
 8001960:	3788      	adds	r7, #136	; 0x88
 8001962:	46bd      	mov	sp, r7
 8001964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001968:	200000d8 	.word	0x200000d8

0800196c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b094      	sub	sp, #80	; 0x50
 8001970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001972:	f107 0320 	add.w	r3, r7, #32
 8001976:	2230      	movs	r2, #48	; 0x30
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f00c fbd8 	bl	800e130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <SystemClock_Config+0xcc>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	4a27      	ldr	r2, [pc, #156]	; (8001a38 <SystemClock_Config+0xcc>)
 800199a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199e:	6413      	str	r3, [r2, #64]	; 0x40
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <SystemClock_Config+0xcc>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <SystemClock_Config+0xd0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019b8:	4a20      	ldr	r2, [pc, #128]	; (8001a3c <SystemClock_Config+0xd0>)
 80019ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <SystemClock_Config+0xd0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019cc:	2301      	movs	r3, #1
 80019ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d6:	2302      	movs	r3, #2
 80019d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019e0:	2304      	movs	r3, #4
 80019e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019e4:	2348      	movs	r3, #72	; 0x48
 80019e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019ec:	2303      	movs	r3, #3
 80019ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f107 0320 	add.w	r3, r7, #32
 80019f4:	4618      	mov	r0, r3
 80019f6:	f004 fe95 	bl	8006724 <HAL_RCC_OscConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a00:	f000 fb50 	bl	80020a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a04:	230f      	movs	r3, #15
 8001a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	2102      	movs	r1, #2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f005 f8f7 	bl	8006c14 <HAL_RCC_ClockConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a2c:	f000 fb3a 	bl	80020a4 <Error_Handler>
  }
}
 8001a30:	bf00      	nop
 8001a32:	3750      	adds	r7, #80	; 0x50
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40007000 	.word	0x40007000

08001a40 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <MX_CRC_Init+0x20>)
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <MX_CRC_Init+0x24>)
 8001a48:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_CRC_Init+0x20>)
 8001a4c:	f001 f970 	bl	8002d30 <HAL_CRC_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001a56:	f000 fb25 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200082f0 	.word	0x200082f0
 8001a64:	40023000 	.word	0x40023000

08001a68 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a6e:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <MX_DMA2D_Init+0x60>)
 8001a70:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a9c:	4809      	ldr	r0, [pc, #36]	; (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a9e:	f001 f963 	bl	8002d68 <HAL_DMA2D_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001aa8:	f000 fafc 	bl	80020a4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001aac:	2101      	movs	r1, #1
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001ab0:	f001 fab4 	bl	800301c <HAL_DMA2D_ConfigLayer>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001aba:	f000 faf3 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000842c 	.word	0x2000842c
 8001ac8:	4002b000 	.word	0x4002b000

08001acc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_I2C3_Init+0x74>)
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <MX_I2C3_Init+0x78>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_I2C3_Init+0x74>)
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <MX_I2C3_Init+0x7c>)
 8001ada:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_I2C3_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_I2C3_Init+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <MX_I2C3_Init+0x74>)
 8001aea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_I2C3_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_I2C3_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_I2C3_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_I2C3_Init+0x74>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b08:	480d      	ldr	r0, [pc, #52]	; (8001b40 <MX_I2C3_Init+0x74>)
 8001b0a:	f003 fa69 	bl	8004fe0 <HAL_I2C_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b14:	f000 fac6 	bl	80020a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4809      	ldr	r0, [pc, #36]	; (8001b40 <MX_I2C3_Init+0x74>)
 8001b1c:	f004 fa1f 	bl	8005f5e <HAL_I2CEx_ConfigAnalogFilter>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001b26:	f000 fabd 	bl	80020a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4804      	ldr	r0, [pc, #16]	; (8001b40 <MX_I2C3_Init+0x74>)
 8001b2e:	f004 fa52 	bl	8005fd6 <HAL_I2CEx_ConfigDigitalFilter>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001b38:	f000 fab4 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20008244 	.word	0x20008244
 8001b44:	40005c00 	.word	0x40005c00
 8001b48:	000186a0 	.word	0x000186a0

08001b4c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	; 0x38
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2234      	movs	r2, #52	; 0x34
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f00c fae9 	bl	800e130 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001b5e:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001b60:	4a39      	ldr	r2, [pc, #228]	; (8001c48 <MX_LTDC_Init+0xfc>)
 8001b62:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b64:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b6a:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b70:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b76:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001b7c:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001b7e:	2209      	movs	r2, #9
 8001b80:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001b88:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001b8a:	221d      	movs	r2, #29
 8001b8c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001b90:	2203      	movs	r2, #3
 8001b92:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001b94:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001b96:	f240 120d 	movw	r2, #269	; 0x10d
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001b9e:	f240 1243 	movw	r2, #323	; 0x143
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001ba6:	f240 1217 	movw	r2, #279	; 0x117
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001bae:	f240 1247 	movw	r2, #327	; 0x147
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001bcc:	481d      	ldr	r0, [pc, #116]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001bce:	f004 fa41 	bl	8006054 <HAL_LTDC_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001bd8:	f000 fa64 	bl	80020a4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001be0:	23f0      	movs	r3, #240	; 0xf0
 8001be2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001be8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001bec:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001bf2:	23ff      	movs	r3, #255	; 0xff
 8001bf4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001bfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bfe:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001c00:	2307      	movs	r3, #7
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001c04:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001c0a:	23f0      	movs	r3, #240	; 0xf0
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001c0e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_LTDC_Init+0xf8>)
 8001c2e:	f004 fba3 	bl	8006378 <HAL_LTDC_ConfigLayer>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001c38:	f000 fa34 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	3738      	adds	r7, #56	; 0x38
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200082f8 	.word	0x200082f8
 8001c48:	40016800 	.word	0x40016800

08001c4c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c52:	4a18      	ldr	r2, [pc, #96]	; (8001cb4 <MX_SPI5_Init+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c5c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c80:	2218      	movs	r2, #24
 8001c82:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c98:	220a      	movs	r2, #10
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c9c:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <MX_SPI5_Init+0x64>)
 8001c9e:	f005 fbd9 	bl	8007454 <HAL_SPI_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ca8:	f000 f9fc 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20008298 	.word	0x20008298
 8001cb4:	40015000 	.word	0x40015000

08001cb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ccc:	463b      	mov	r3, r7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001cd6:	4a1f      	ldr	r2, [pc, #124]	; (8001d54 <MX_TIM1_Init+0x9c>)
 8001cd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001ce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d00:	4813      	ldr	r0, [pc, #76]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001d02:	f005 fc30 	bl	8007566 <HAL_TIM_Base_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d0c:	f000 f9ca 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d16:	f107 0308 	add.w	r3, r7, #8
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480c      	ldr	r0, [pc, #48]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001d1e:	f005 fde9 	bl	80078f4 <HAL_TIM_ConfigClockSource>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d28:	f000 f9bc 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d34:	463b      	mov	r3, r7
 8001d36:	4619      	mov	r1, r3
 8001d38:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_TIM1_Init+0x98>)
 8001d3a:	f006 f805 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d44:	f000 f9ae 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200083e4 	.word	0x200083e4
 8001d54:	40010000 	.word	0x40010000

08001d58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <MX_USART1_UART_Init+0x50>)
 8001d60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d7e:	220c      	movs	r2, #12
 8001d80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_USART1_UART_Init+0x4c>)
 8001d90:	f006 f86a 	bl	8007e68 <HAL_UART_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d9a:	f000 f983 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200083a0 	.word	0x200083a0
 8001da8:	40011000 	.word	0x40011000

08001dac <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
 8001dc0:	615a      	str	r2, [r3, #20]
 8001dc2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <MX_FMC_Init+0x98>)
 8001dc6:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <MX_FMC_Init+0x9c>)
 8001dc8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001dca:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <MX_FMC_Init+0x98>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <MX_FMC_Init+0x98>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <MX_FMC_Init+0x98>)
 8001dd8:	2204      	movs	r2, #4
 8001dda:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <MX_FMC_Init+0x98>)
 8001dde:	2210      	movs	r2, #16
 8001de0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <MX_FMC_Init+0x98>)
 8001de4:	2240      	movs	r2, #64	; 0x40
 8001de6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001de8:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <MX_FMC_Init+0x98>)
 8001dea:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001dee:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <MX_FMC_Init+0x98>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <MX_FMC_Init+0x98>)
 8001df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dfc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <MX_FMC_Init+0x98>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <MX_FMC_Init+0x98>)
 8001e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001e10:	2307      	movs	r3, #7
 8001e12:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001e14:	2304      	movs	r3, #4
 8001e16:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001e18:	2307      	movs	r3, #7
 8001e1a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001e20:	2302      	movs	r3, #2
 8001e22:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_FMC_Init+0x98>)
 8001e2e:	f005 fadd 	bl	80073ec <HAL_SDRAM_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001e38:	f000 f934 	bl	80020a4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001e3c:	bf00      	nop
 8001e3e:	3720      	adds	r7, #32
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	2000846c 	.word	0x2000846c
 8001e48:	a0000140 	.word	0xa0000140

08001e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08e      	sub	sp, #56	; 0x38
 8001e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
 8001e66:	4b7b      	ldr	r3, [pc, #492]	; (8002054 <MX_GPIO_Init+0x208>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a7a      	ldr	r2, [pc, #488]	; (8002054 <MX_GPIO_Init+0x208>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b78      	ldr	r3, [pc, #480]	; (8002054 <MX_GPIO_Init+0x208>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	623b      	str	r3, [r7, #32]
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	4b74      	ldr	r3, [pc, #464]	; (8002054 <MX_GPIO_Init+0x208>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a73      	ldr	r2, [pc, #460]	; (8002054 <MX_GPIO_Init+0x208>)
 8001e88:	f043 0320 	orr.w	r3, r3, #32
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b71      	ldr	r3, [pc, #452]	; (8002054 <MX_GPIO_Init+0x208>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	4b6d      	ldr	r3, [pc, #436]	; (8002054 <MX_GPIO_Init+0x208>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a6c      	ldr	r2, [pc, #432]	; (8002054 <MX_GPIO_Init+0x208>)
 8001ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b6a      	ldr	r3, [pc, #424]	; (8002054 <MX_GPIO_Init+0x208>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	4b66      	ldr	r3, [pc, #408]	; (8002054 <MX_GPIO_Init+0x208>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a65      	ldr	r2, [pc, #404]	; (8002054 <MX_GPIO_Init+0x208>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b63      	ldr	r3, [pc, #396]	; (8002054 <MX_GPIO_Init+0x208>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <MX_GPIO_Init+0x208>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a5e      	ldr	r2, [pc, #376]	; (8002054 <MX_GPIO_Init+0x208>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b5c      	ldr	r3, [pc, #368]	; (8002054 <MX_GPIO_Init+0x208>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b58      	ldr	r3, [pc, #352]	; (8002054 <MX_GPIO_Init+0x208>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a57      	ldr	r2, [pc, #348]	; (8002054 <MX_GPIO_Init+0x208>)
 8001ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b55      	ldr	r3, [pc, #340]	; (8002054 <MX_GPIO_Init+0x208>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	4b51      	ldr	r3, [pc, #324]	; (8002054 <MX_GPIO_Init+0x208>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a50      	ldr	r2, [pc, #320]	; (8002054 <MX_GPIO_Init+0x208>)
 8001f14:	f043 0310 	orr.w	r3, r3, #16
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b4e      	ldr	r3, [pc, #312]	; (8002054 <MX_GPIO_Init+0x208>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <MX_GPIO_Init+0x208>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a49      	ldr	r2, [pc, #292]	; (8002054 <MX_GPIO_Init+0x208>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b47      	ldr	r3, [pc, #284]	; (8002054 <MX_GPIO_Init+0x208>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2116      	movs	r1, #22
 8001f46:	4844      	ldr	r0, [pc, #272]	; (8002058 <MX_GPIO_Init+0x20c>)
 8001f48:	f001 faa6 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2180      	movs	r1, #128	; 0x80
 8001f50:	4842      	ldr	r0, [pc, #264]	; (800205c <MX_GPIO_Init+0x210>)
 8001f52:	f001 faa1 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001f5c:	4840      	ldr	r0, [pc, #256]	; (8002060 <MX_GPIO_Init+0x214>)
 8001f5e:	f001 fa9b 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001f68:	483e      	ldr	r0, [pc, #248]	; (8002064 <MX_GPIO_Init+0x218>)
 8001f6a:	f001 fa95 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001f6e:	2316      	movs	r3, #22
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f82:	4619      	mov	r1, r3
 8001f84:	4834      	ldr	r0, [pc, #208]	; (8002058 <MX_GPIO_Init+0x20c>)
 8001f86:	f001 f8db 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001f8a:	f248 0307 	movw	r3, #32775	; 0x8007
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f90:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	482e      	ldr	r0, [pc, #184]	; (800205c <MX_GPIO_Init+0x210>)
 8001fa2:	f001 f8cd 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4827      	ldr	r0, [pc, #156]	; (800205c <MX_GPIO_Init+0x210>)
 8001fbe:	f001 f8bf 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fc6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4820      	ldr	r0, [pc, #128]	; (8002058 <MX_GPIO_Init+0x20c>)
 8001fd8:	f001 f8b2 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fec:	4619      	mov	r1, r3
 8001fee:	481e      	ldr	r0, [pc, #120]	; (8002068 <MX_GPIO_Init+0x21c>)
 8001ff0:	f001 f8a6 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001ff4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002006:	4619      	mov	r1, r3
 8002008:	4815      	ldr	r0, [pc, #84]	; (8002060 <MX_GPIO_Init+0x214>)
 800200a:	f001 f899 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800200e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002014:	2301      	movs	r3, #1
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002024:	4619      	mov	r1, r3
 8002026:	480e      	ldr	r0, [pc, #56]	; (8002060 <MX_GPIO_Init+0x214>)
 8002028:	f001 f88a 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800202c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002042:	4619      	mov	r1, r3
 8002044:	4807      	ldr	r0, [pc, #28]	; (8002064 <MX_GPIO_Init+0x218>)
 8002046:	f001 f87b 	bl	8003140 <HAL_GPIO_Init>

}
 800204a:	bf00      	nop
 800204c:	3738      	adds	r7, #56	; 0x38
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	40020800 	.word	0x40020800
 800205c:	40020000 	.word	0x40020000
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40021800 	.word	0x40021800
 8002068:	40020400 	.word	0x40020400

0800206c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002074:	f00b fce8 	bl	800da48 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002078:	2001      	movs	r0, #1
 800207a:	f009 fc7d 	bl	800b978 <osDelay>
 800207e:	e7fb      	b.n	8002078 <StartDefaultTask+0xc>

08002080 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002092:	f000 fd27 	bl	8002ae4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40001000 	.word	0x40001000

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ac:	e7fe      	b.n	80020ac <Error_Handler+0x8>
	...

080020b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_MspInit+0x54>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a11      	ldr	r2, [pc, #68]	; (8002104 <HAL_MspInit+0x54>)
 80020c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HAL_MspInit+0x54>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_MspInit+0x54>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_MspInit+0x54>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_MspInit+0x54>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	210f      	movs	r1, #15
 80020f2:	f06f 0001 	mvn.w	r0, #1
 80020f6:	f000 fdf1 	bl	8002cdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800

08002108 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <HAL_CRC_MspInit+0x3c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d10d      	bne.n	8002136 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_CRC_MspInit+0x40>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a09      	ldr	r2, [pc, #36]	; (8002148 <HAL_CRC_MspInit+0x40>)
 8002124:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <HAL_CRC_MspInit+0x40>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023000 	.word	0x40023000
 8002148:	40023800 	.word	0x40023800

0800214c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0e      	ldr	r2, [pc, #56]	; (8002194 <HAL_DMA2D_MspInit+0x48>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d115      	bne.n	800218a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <HAL_DMA2D_MspInit+0x4c>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <HAL_DMA2D_MspInit+0x4c>)
 8002168:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_DMA2D_MspInit+0x4c>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2105      	movs	r1, #5
 800217e:	205a      	movs	r0, #90	; 0x5a
 8002180:	f000 fdac 	bl	8002cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002184:	205a      	movs	r0, #90	; 0x5a
 8002186:	f000 fdc5 	bl	8002d14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	4002b000 	.word	0x4002b000
 8002198:	40023800 	.word	0x40023800

0800219c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a29      	ldr	r2, [pc, #164]	; (8002260 <HAL_I2C_MspInit+0xc4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d14b      	bne.n	8002256 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b28      	ldr	r3, [pc, #160]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a27      	ldr	r2, [pc, #156]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b25      	ldr	r3, [pc, #148]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a20      	ldr	r2, [pc, #128]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80021f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021fc:	2312      	movs	r3, #18
 80021fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002200:	2301      	movs	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002208:	2304      	movs	r3, #4
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4619      	mov	r1, r3
 8002212:	4815      	ldr	r0, [pc, #84]	; (8002268 <HAL_I2C_MspInit+0xcc>)
 8002214:	f000 ff94 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800221e:	2312      	movs	r3, #18
 8002220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002222:	2301      	movs	r3, #1
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800222a:	2304      	movs	r3, #4
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	480d      	ldr	r0, [pc, #52]	; (800226c <HAL_I2C_MspInit+0xd0>)
 8002236:	f000 ff83 	bl	8003140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a08      	ldr	r2, [pc, #32]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 8002244:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002256:	bf00      	nop
 8002258:	3728      	adds	r7, #40	; 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40005c00 	.word	0x40005c00
 8002264:	40023800 	.word	0x40023800
 8002268:	40020800 	.word	0x40020800
 800226c:	40020000 	.word	0x40020000

08002270 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b09a      	sub	sp, #104	; 0x68
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228c:	2230      	movs	r2, #48	; 0x30
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f00b ff4d 	bl	800e130 <memset>
  if(hltdc->Instance==LTDC)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a85      	ldr	r2, [pc, #532]	; (80024b0 <HAL_LTDC_MspInit+0x240>)
 800229c:	4293      	cmp	r3, r2
 800229e:	f040 8102 	bne.w	80024a6 <HAL_LTDC_MspInit+0x236>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80022a2:	2308      	movs	r3, #8
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80022a6:	2332      	movs	r3, #50	; 0x32
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80022aa:	2302      	movs	r3, #2
 80022ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80022ae:	2300      	movs	r3, #0
 80022b0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b6:	4618      	mov	r0, r3
 80022b8:	f004 feda 	bl	8007070 <HAL_RCCEx_PeriphCLKConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80022c2:	f7ff feef 	bl	80020a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
 80022ca:	4b7a      	ldr	r3, [pc, #488]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	4a79      	ldr	r2, [pc, #484]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 80022d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022d4:	6453      	str	r3, [r2, #68]	; 0x44
 80022d6:	4b77      	ldr	r3, [pc, #476]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022de:	623b      	str	r3, [r7, #32]
 80022e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	4b73      	ldr	r3, [pc, #460]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a72      	ldr	r2, [pc, #456]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 80022ec:	f043 0320 	orr.w	r3, r3, #32
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b70      	ldr	r3, [pc, #448]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	4b6c      	ldr	r3, [pc, #432]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a6b      	ldr	r2, [pc, #428]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b69      	ldr	r3, [pc, #420]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	4b65      	ldr	r3, [pc, #404]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a64      	ldr	r2, [pc, #400]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b62      	ldr	r3, [pc, #392]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	4b5e      	ldr	r3, [pc, #376]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a5d      	ldr	r2, [pc, #372]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 8002340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b5b      	ldr	r3, [pc, #364]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	4b57      	ldr	r3, [pc, #348]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a56      	ldr	r2, [pc, #344]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b54      	ldr	r3, [pc, #336]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	4b50      	ldr	r3, [pc, #320]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a4f      	ldr	r2, [pc, #316]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 8002378:	f043 0308 	orr.w	r3, r3, #8
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b4d      	ldr	r3, [pc, #308]	; (80024b4 <HAL_LTDC_MspInit+0x244>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800238a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800238e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002398:	2300      	movs	r3, #0
 800239a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800239c:	230e      	movs	r3, #14
 800239e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80023a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023a4:	4619      	mov	r1, r3
 80023a6:	4844      	ldr	r0, [pc, #272]	; (80024b8 <HAL_LTDC_MspInit+0x248>)
 80023a8:	f000 feca 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80023ac:	f641 0358 	movw	r3, #6232	; 0x1858
 80023b0:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	2300      	movs	r3, #0
 80023bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023be:	230e      	movs	r3, #14
 80023c0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023c6:	4619      	mov	r1, r3
 80023c8:	483c      	ldr	r0, [pc, #240]	; (80024bc <HAL_LTDC_MspInit+0x24c>)
 80023ca:	f000 feb9 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80023ce:	2303      	movs	r3, #3
 80023d0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80023de:	2309      	movs	r3, #9
 80023e0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023e6:	4619      	mov	r1, r3
 80023e8:	4835      	ldr	r0, [pc, #212]	; (80024c0 <HAL_LTDC_MspInit+0x250>)
 80023ea:	f000 fea9 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80023ee:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80023f2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002400:	230e      	movs	r3, #14
 8002402:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002404:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002408:	4619      	mov	r1, r3
 800240a:	482d      	ldr	r0, [pc, #180]	; (80024c0 <HAL_LTDC_MspInit+0x250>)
 800240c:	f000 fe98 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002410:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002414:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2300      	movs	r3, #0
 8002420:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002422:	230e      	movs	r3, #14
 8002424:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002426:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800242a:	4619      	mov	r1, r3
 800242c:	4825      	ldr	r0, [pc, #148]	; (80024c4 <HAL_LTDC_MspInit+0x254>)
 800242e:	f000 fe87 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002432:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002436:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2302      	movs	r3, #2
 800243a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002444:	230e      	movs	r3, #14
 8002446:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002448:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800244c:	4619      	mov	r1, r3
 800244e:	481e      	ldr	r0, [pc, #120]	; (80024c8 <HAL_LTDC_MspInit+0x258>)
 8002450:	f000 fe76 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002454:	2348      	movs	r3, #72	; 0x48
 8002456:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002460:	2300      	movs	r3, #0
 8002462:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002464:	230e      	movs	r3, #14
 8002466:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002468:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800246c:	4619      	mov	r1, r3
 800246e:	4817      	ldr	r0, [pc, #92]	; (80024cc <HAL_LTDC_MspInit+0x25c>)
 8002470:	f000 fe66 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002474:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002478:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002486:	2309      	movs	r3, #9
 8002488:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800248a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800248e:	4619      	mov	r1, r3
 8002490:	480c      	ldr	r0, [pc, #48]	; (80024c4 <HAL_LTDC_MspInit+0x254>)
 8002492:	f000 fe55 	bl	8003140 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2105      	movs	r1, #5
 800249a:	2058      	movs	r0, #88	; 0x58
 800249c:	f000 fc1e 	bl	8002cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80024a0:	2058      	movs	r0, #88	; 0x58
 80024a2:	f000 fc37 	bl	8002d14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80024a6:	bf00      	nop
 80024a8:	3768      	adds	r7, #104	; 0x68
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40016800 	.word	0x40016800
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40021400 	.word	0x40021400
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020400 	.word	0x40020400
 80024c4:	40021800 	.word	0x40021800
 80024c8:	40020800 	.word	0x40020800
 80024cc:	40020c00 	.word	0x40020c00

080024d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a19      	ldr	r2, [pc, #100]	; (8002554 <HAL_SPI_MspInit+0x84>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d12c      	bne.n	800254c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_SPI_MspInit+0x88>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_SPI_MspInit+0x88>)
 80024fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_SPI_MspInit+0x88>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_SPI_MspInit+0x88>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a10      	ldr	r2, [pc, #64]	; (8002558 <HAL_SPI_MspInit+0x88>)
 8002518:	f043 0320 	orr.w	r3, r3, #32
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_SPI_MspInit+0x88>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800252a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800252e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800253c:	2305      	movs	r3, #5
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	4619      	mov	r1, r3
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <HAL_SPI_MspInit+0x8c>)
 8002548:	f000 fdfa 	bl	8003140 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800254c:	bf00      	nop
 800254e:	3728      	adds	r7, #40	; 0x28
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40015000 	.word	0x40015000
 8002558:	40023800 	.word	0x40023800
 800255c:	40021400 	.word	0x40021400

08002560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0b      	ldr	r2, [pc, #44]	; (800259c <HAL_TIM_Base_MspInit+0x3c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10d      	bne.n	800258e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_TIM_Base_MspInit+0x40>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_TIM_Base_MspInit+0x40>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6453      	str	r3, [r2, #68]	; 0x44
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <HAL_TIM_Base_MspInit+0x40>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40010000 	.word	0x40010000
 80025a0:	40023800 	.word	0x40023800

080025a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a19      	ldr	r2, [pc, #100]	; (8002628 <HAL_UART_MspInit+0x84>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d12c      	bne.n	8002620 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	4b18      	ldr	r3, [pc, #96]	; (800262c <HAL_UART_MspInit+0x88>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	4a17      	ldr	r2, [pc, #92]	; (800262c <HAL_UART_MspInit+0x88>)
 80025d0:	f043 0310 	orr.w	r3, r3, #16
 80025d4:	6453      	str	r3, [r2, #68]	; 0x44
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_UART_MspInit+0x88>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_UART_MspInit+0x88>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_UART_MspInit+0x88>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_UART_MspInit+0x88>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80025fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260c:	2303      	movs	r3, #3
 800260e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002610:	2307      	movs	r3, #7
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	4619      	mov	r1, r3
 800261a:	4805      	ldr	r0, [pc, #20]	; (8002630 <HAL_UART_MspInit+0x8c>)
 800261c:	f000 fd90 	bl	8003140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002620:	bf00      	nop
 8002622:	3728      	adds	r7, #40	; 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40011000 	.word	0x40011000
 800262c:	40023800 	.word	0x40023800
 8002630:	40020000 	.word	0x40020000

08002634 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002648:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <HAL_FMC_MspInit+0x104>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d16f      	bne.n	8002730 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002650:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_FMC_MspInit+0x104>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	4b38      	ldr	r3, [pc, #224]	; (800273c <HAL_FMC_MspInit+0x108>)
 800265c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265e:	4a37      	ldr	r2, [pc, #220]	; (800273c <HAL_FMC_MspInit+0x108>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6393      	str	r3, [r2, #56]	; 0x38
 8002666:	4b35      	ldr	r3, [pc, #212]	; (800273c <HAL_FMC_MspInit+0x108>)
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002672:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002676:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	2303      	movs	r3, #3
 8002682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002684:	230c      	movs	r3, #12
 8002686:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	4619      	mov	r1, r3
 800268c:	482c      	ldr	r0, [pc, #176]	; (8002740 <HAL_FMC_MspInit+0x10c>)
 800268e:	f000 fd57 	bl	8003140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002692:	2301      	movs	r3, #1
 8002694:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269e:	2303      	movs	r3, #3
 80026a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026a2:	230c      	movs	r3, #12
 80026a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4826      	ldr	r0, [pc, #152]	; (8002744 <HAL_FMC_MspInit+0x110>)
 80026ac:	f000 fd48 	bl	8003140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80026b0:	f248 1333 	movw	r3, #33075	; 0x8133
 80026b4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026c2:	230c      	movs	r3, #12
 80026c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	4619      	mov	r1, r3
 80026ca:	481f      	ldr	r0, [pc, #124]	; (8002748 <HAL_FMC_MspInit+0x114>)
 80026cc:	f000 fd38 	bl	8003140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80026d0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80026d4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026de:	2303      	movs	r3, #3
 80026e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026e2:	230c      	movs	r3, #12
 80026e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	4619      	mov	r1, r3
 80026ea:	4818      	ldr	r0, [pc, #96]	; (800274c <HAL_FMC_MspInit+0x118>)
 80026ec:	f000 fd28 	bl	8003140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80026f0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80026f4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002702:	230c      	movs	r3, #12
 8002704:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	4619      	mov	r1, r3
 800270a:	4811      	ldr	r0, [pc, #68]	; (8002750 <HAL_FMC_MspInit+0x11c>)
 800270c:	f000 fd18 	bl	8003140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002710:	2360      	movs	r3, #96	; 0x60
 8002712:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271c:	2303      	movs	r3, #3
 800271e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002720:	230c      	movs	r3, #12
 8002722:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	4619      	mov	r1, r3
 8002728:	480a      	ldr	r0, [pc, #40]	; (8002754 <HAL_FMC_MspInit+0x120>)
 800272a:	f000 fd09 	bl	8003140 <HAL_GPIO_Init>
 800272e:	e000      	b.n	8002732 <HAL_FMC_MspInit+0xfe>
    return;
 8002730:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	200000e0 	.word	0x200000e0
 800273c:	40023800 	.word	0x40023800
 8002740:	40021400 	.word	0x40021400
 8002744:	40020800 	.word	0x40020800
 8002748:	40021800 	.word	0x40021800
 800274c:	40021000 	.word	0x40021000
 8002750:	40020c00 	.word	0x40020c00
 8002754:	40020400 	.word	0x40020400

08002758 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002760:	f7ff ff68 	bl	8002634 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08c      	sub	sp, #48	; 0x30
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800277c:	2200      	movs	r2, #0
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	2036      	movs	r0, #54	; 0x36
 8002782:	f000 faab 	bl	8002cdc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002786:	2036      	movs	r0, #54	; 0x36
 8002788:	f000 fac4 	bl	8002d14 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <HAL_InitTick+0xa4>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	4a1e      	ldr	r2, [pc, #120]	; (8002810 <HAL_InitTick+0xa4>)
 8002796:	f043 0310 	orr.w	r3, r3, #16
 800279a:	6413      	str	r3, [r2, #64]	; 0x40
 800279c:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <HAL_InitTick+0xa4>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027a8:	f107 0210 	add.w	r2, r7, #16
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	4611      	mov	r1, r2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f004 fc2a 	bl	800700c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80027b8:	f004 fc00 	bl	8006fbc <HAL_RCC_GetPCLK1Freq>
 80027bc:	4603      	mov	r3, r0
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	4a13      	ldr	r2, [pc, #76]	; (8002814 <HAL_InitTick+0xa8>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	0c9b      	lsrs	r3, r3, #18
 80027cc:	3b01      	subs	r3, #1
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <HAL_InitTick+0xac>)
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <HAL_InitTick+0xb0>)
 80027d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_InitTick+0xac>)
 80027d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80027de:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <HAL_InitTick+0xac>)
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <HAL_InitTick+0xac>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_InitTick+0xac>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80027f0:	4809      	ldr	r0, [pc, #36]	; (8002818 <HAL_InitTick+0xac>)
 80027f2:	f004 feb8 	bl	8007566 <HAL_TIM_Base_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d104      	bne.n	8002806 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80027fc:	4806      	ldr	r0, [pc, #24]	; (8002818 <HAL_InitTick+0xac>)
 80027fe:	f004 ff01 	bl	8007604 <HAL_TIM_Base_Start_IT>
 8002802:	4603      	mov	r3, r0
 8002804:	e000      	b.n	8002808 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
}
 8002808:	4618      	mov	r0, r3
 800280a:	3730      	adds	r7, #48	; 0x30
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40023800 	.word	0x40023800
 8002814:	431bde83 	.word	0x431bde83
 8002818:	200084a0 	.word	0x200084a0
 800281c:	40001000 	.word	0x40001000

08002820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002824:	e7fe      	b.n	8002824 <NMI_Handler+0x4>

08002826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800282a:	e7fe      	b.n	800282a <HardFault_Handler+0x4>

0800282c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002830:	e7fe      	b.n	8002830 <MemManage_Handler+0x4>

08002832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002836:	e7fe      	b.n	8002836 <BusFault_Handler+0x4>

08002838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800283c:	e7fe      	b.n	800283c <UsageFault_Handler+0x4>

0800283e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <TIM6_DAC_IRQHandler+0x10>)
 8002852:	f004 ff47 	bl	80076e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200084a0 	.word	0x200084a0

08002860 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <OTG_HS_IRQHandler+0x10>)
 8002866:	f001 f8b5 	bl	80039d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200088d0 	.word	0x200088d0

08002874 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <LTDC_IRQHandler+0x10>)
 800287a:	f003 fcbb 	bl	80061f4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200082f8 	.word	0x200082f8

08002888 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <DMA2D_IRQHandler+0x10>)
 800288e:	f000 fab4 	bl	8002dfa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2000842c 	.word	0x2000842c

0800289c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
	return 1;
 80028a0:	2301      	movs	r3, #1
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <_kill>:

int _kill(int pid, int sig)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028b6:	f00b fbf3 	bl	800e0a0 <__errno>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2216      	movs	r2, #22
 80028be:	601a      	str	r2, [r3, #0]
	return -1;
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_exit>:

void _exit (int status)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ffe7 	bl	80028ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80028de:	e7fe      	b.n	80028de <_exit+0x12>

080028e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	e00a      	b.n	8002908 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028f2:	f3af 8000 	nop.w
 80028f6:	4601      	mov	r1, r0
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	60ba      	str	r2, [r7, #8]
 80028fe:	b2ca      	uxtb	r2, r1
 8002900:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3301      	adds	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	dbf0      	blt.n	80028f2 <_read+0x12>
	}

return len;
 8002910:	687b      	ldr	r3, [r7, #4]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e009      	b.n	8002940 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	60ba      	str	r2, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3301      	adds	r3, #1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	dbf1      	blt.n	800292c <_write+0x12>
	}
	return len;
 8002948:	687b      	ldr	r3, [r7, #4]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <_close>:

int _close(int file)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
	return -1;
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800297a:	605a      	str	r2, [r3, #4]
	return 0;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <_isatty>:

int _isatty(int file)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
	return 1;
 8002992:	2301      	movs	r3, #1
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
	return 0;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c4:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <_sbrk+0x5c>)
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <_sbrk+0x60>)
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d102      	bne.n	80029de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <_sbrk+0x64>)
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <_sbrk+0x68>)
 80029dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <_sbrk+0x64>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d207      	bcs.n	80029fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029ec:	f00b fb58 	bl	800e0a0 <__errno>
 80029f0:	4603      	mov	r3, r0
 80029f2:	220c      	movs	r2, #12
 80029f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	e009      	b.n	8002a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <_sbrk+0x64>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <_sbrk+0x64>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <_sbrk+0x64>)
 8002a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20030000 	.word	0x20030000
 8002a1c:	00000400 	.word	0x00000400
 8002a20:	200000e4 	.word	0x200000e4
 8002a24:	20008be8 	.word	0x20008be8

08002a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <SystemInit+0x20>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <SystemInit+0x20>)
 8002a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a84 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a50:	480d      	ldr	r0, [pc, #52]	; (8002a88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a52:	490e      	ldr	r1, [pc, #56]	; (8002a8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a54:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a58:	e002      	b.n	8002a60 <LoopCopyDataInit>

08002a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a5e:	3304      	adds	r3, #4

08002a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a64:	d3f9      	bcc.n	8002a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a66:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a68:	4c0b      	ldr	r4, [pc, #44]	; (8002a98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a6c:	e001      	b.n	8002a72 <LoopFillZerobss>

08002a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a70:	3204      	adds	r2, #4

08002a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a74:	d3fb      	bcc.n	8002a6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a76:	f7ff ffd7 	bl	8002a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a7a:	f00b fb17 	bl	800e0ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a7e:	f7fe fa33 	bl	8000ee8 <main>
  bx  lr    
 8002a82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002a84:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a8c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002a90:	08013248 	.word	0x08013248
  ldr r2, =_sbss
 8002a94:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002a98:	20008be4 	.word	0x20008be4

08002a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a9c:	e7fe      	b.n	8002a9c <ADC_IRQHandler>
	...

08002aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <HAL_Init+0x40>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0d      	ldr	r2, [pc, #52]	; (8002ae0 <HAL_Init+0x40>)
 8002aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_Init+0x40>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <HAL_Init+0x40>)
 8002ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002abc:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_Init+0x40>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <HAL_Init+0x40>)
 8002ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac8:	2003      	movs	r0, #3
 8002aca:	f000 f8fc 	bl	8002cc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7ff fe4c 	bl	800276c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ad4:	f7ff faec 	bl	80020b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023c00 	.word	0x40023c00

08002ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x20>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_IncTick+0x24>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_IncTick+0x24>)
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000018 	.word	0x20000018
 8002b08:	200084e8 	.word	0x200084e8

08002b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_GetTick+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	200084e8 	.word	0x200084e8

08002b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b2c:	f7ff ffee 	bl	8002b0c <HAL_GetTick>
 8002b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d005      	beq.n	8002b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_Delay+0x44>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b4a:	bf00      	nop
 8002b4c:	f7ff ffde 	bl	8002b0c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d8f7      	bhi.n	8002b4c <HAL_Delay+0x28>
  {
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000018 	.word	0x20000018

08002b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b9e:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	60d3      	str	r3, [r2, #12]
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <__NVIC_GetPriorityGrouping+0x18>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	f003 0307 	and.w	r3, r3, #7
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	db0b      	blt.n	8002bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	f003 021f 	and.w	r2, r3, #31
 8002be8:	4907      	ldr	r1, [pc, #28]	; (8002c08 <__NVIC_EnableIRQ+0x38>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	e000e100 	.word	0xe000e100

08002c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	6039      	str	r1, [r7, #0]
 8002c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	db0a      	blt.n	8002c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	490c      	ldr	r1, [pc, #48]	; (8002c58 <__NVIC_SetPriority+0x4c>)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	0112      	lsls	r2, r2, #4
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	440b      	add	r3, r1
 8002c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c34:	e00a      	b.n	8002c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	4908      	ldr	r1, [pc, #32]	; (8002c5c <__NVIC_SetPriority+0x50>)
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	3b04      	subs	r3, #4
 8002c44:	0112      	lsls	r2, r2, #4
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	440b      	add	r3, r1
 8002c4a:	761a      	strb	r2, [r3, #24]
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000e100 	.word	0xe000e100
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b089      	sub	sp, #36	; 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f1c3 0307 	rsb	r3, r3, #7
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	bf28      	it	cs
 8002c7e:	2304      	movcs	r3, #4
 8002c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3304      	adds	r3, #4
 8002c86:	2b06      	cmp	r3, #6
 8002c88:	d902      	bls.n	8002c90 <NVIC_EncodePriority+0x30>
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3b03      	subs	r3, #3
 8002c8e:	e000      	b.n	8002c92 <NVIC_EncodePriority+0x32>
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c94:	f04f 32ff 	mov.w	r2, #4294967295
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	43d9      	mvns	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb8:	4313      	orrs	r3, r2
         );
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3724      	adds	r7, #36	; 0x24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ff4c 	bl	8002b6c <__NVIC_SetPriorityGrouping>
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cee:	f7ff ff61 	bl	8002bb4 <__NVIC_GetPriorityGrouping>
 8002cf2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	6978      	ldr	r0, [r7, #20]
 8002cfa:	f7ff ffb1 	bl	8002c60 <NVIC_EncodePriority>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d04:	4611      	mov	r1, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ff80 	bl	8002c0c <__NVIC_SetPriority>
}
 8002d0c:	bf00      	nop
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ff54 	bl	8002bd0 <__NVIC_EnableIRQ>
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e00e      	b.n	8002d60 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	795b      	ldrb	r3, [r3, #5]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d105      	bne.n	8002d58 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff f9d8 	bl	8002108 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e03b      	b.n	8002df2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff f9dc 	bl	800214c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db8:	f023 0107 	bic.w	r1, r3, #7
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002dd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	68d1      	ldr	r1, [r2, #12]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	430b      	orrs	r3, r1
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d026      	beq.n	8002e6a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d021      	beq.n	8002e6a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e34:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	f043 0201 	orr.w	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2201      	movs	r2, #1
 8002e48:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d026      	beq.n	8002ec2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d021      	beq.n	8002ec2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e8c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2220      	movs	r2, #32
 8002e94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	f043 0202 	orr.w	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d026      	beq.n	8002f1a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d021      	beq.n	8002f1a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2208      	movs	r2, #8
 8002eec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	f043 0204 	orr.w	r2, r3, #4
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2204      	movs	r2, #4
 8002efe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00e      	beq.n	8002f4c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2204      	movs	r2, #4
 8002f44:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f853 	bl	8002ff2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d024      	beq.n	8002fa0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01f      	beq.n	8002fa0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2202      	movs	r2, #2
 8002f76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01f      	beq.n	8002fea <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01a      	beq.n	8002fea <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fc2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f80e 	bl	8003006 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_DMA2D_ConfigLayer+0x20>
 8003038:	2302      	movs	r3, #2
 800303a:	e079      	b.n	8003130 <HAL_DMA2D_ConfigLayer+0x114>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	3318      	adds	r3, #24
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003066:	4b35      	ldr	r3, [pc, #212]	; (800313c <HAL_DMA2D_ConfigLayer+0x120>)
 8003068:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b0a      	cmp	r3, #10
 8003070:	d003      	beq.n	800307a <HAL_DMA2D_ConfigLayer+0x5e>
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b09      	cmp	r3, #9
 8003078:	d107      	bne.n	800308a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	e005      	b.n	8003096 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	061b      	lsls	r3, r3, #24
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d120      	bne.n	80030de <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	ea02 0103 	and.w	r1, r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b0a      	cmp	r3, #10
 80030c4:	d003      	beq.n	80030ce <HAL_DMA2D_ConfigLayer+0xb2>
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b09      	cmp	r3, #9
 80030cc:	d127      	bne.n	800311e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
 80030dc:	e01f      	b.n	800311e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	ea02 0103 	and.w	r1, r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b0a      	cmp	r3, #10
 8003106:	d003      	beq.n	8003110 <HAL_DMA2D_ConfigLayer+0xf4>
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b09      	cmp	r3, #9
 800310e:	d106      	bne.n	800311e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800311c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	371c      	adds	r7, #28
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	ff03000f 	.word	0xff03000f

08003140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	; 0x24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003152:	2300      	movs	r3, #0
 8003154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	e177      	b.n	800344c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800315c:	2201      	movs	r2, #1
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	429a      	cmp	r2, r3
 8003176:	f040 8166 	bne.w	8003446 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d005      	beq.n	8003192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800318e:	2b02      	cmp	r3, #2
 8003190:	d130      	bne.n	80031f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2203      	movs	r2, #3
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c8:	2201      	movs	r2, #1
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 0201 	and.w	r2, r3, #1
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d017      	beq.n	8003230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2203      	movs	r2, #3
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d123      	bne.n	8003284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	08da      	lsrs	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3208      	adds	r2, #8
 8003244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	220f      	movs	r2, #15
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	08da      	lsrs	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3208      	adds	r2, #8
 800327e:	69b9      	ldr	r1, [r7, #24]
 8003280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	2203      	movs	r2, #3
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 0203 	and.w	r2, r3, #3
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80c0 	beq.w	8003446 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	4b66      	ldr	r3, [pc, #408]	; (8003464 <HAL_GPIO_Init+0x324>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	4a65      	ldr	r2, [pc, #404]	; (8003464 <HAL_GPIO_Init+0x324>)
 80032d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d4:	6453      	str	r3, [r2, #68]	; 0x44
 80032d6:	4b63      	ldr	r3, [pc, #396]	; (8003464 <HAL_GPIO_Init+0x324>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032e2:	4a61      	ldr	r2, [pc, #388]	; (8003468 <HAL_GPIO_Init+0x328>)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	3302      	adds	r3, #2
 80032ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	220f      	movs	r2, #15
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a58      	ldr	r2, [pc, #352]	; (800346c <HAL_GPIO_Init+0x32c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d037      	beq.n	800337e <HAL_GPIO_Init+0x23e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a57      	ldr	r2, [pc, #348]	; (8003470 <HAL_GPIO_Init+0x330>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d031      	beq.n	800337a <HAL_GPIO_Init+0x23a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a56      	ldr	r2, [pc, #344]	; (8003474 <HAL_GPIO_Init+0x334>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d02b      	beq.n	8003376 <HAL_GPIO_Init+0x236>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a55      	ldr	r2, [pc, #340]	; (8003478 <HAL_GPIO_Init+0x338>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d025      	beq.n	8003372 <HAL_GPIO_Init+0x232>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a54      	ldr	r2, [pc, #336]	; (800347c <HAL_GPIO_Init+0x33c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01f      	beq.n	800336e <HAL_GPIO_Init+0x22e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a53      	ldr	r2, [pc, #332]	; (8003480 <HAL_GPIO_Init+0x340>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d019      	beq.n	800336a <HAL_GPIO_Init+0x22a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a52      	ldr	r2, [pc, #328]	; (8003484 <HAL_GPIO_Init+0x344>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <HAL_GPIO_Init+0x226>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a51      	ldr	r2, [pc, #324]	; (8003488 <HAL_GPIO_Init+0x348>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00d      	beq.n	8003362 <HAL_GPIO_Init+0x222>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a50      	ldr	r2, [pc, #320]	; (800348c <HAL_GPIO_Init+0x34c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d007      	beq.n	800335e <HAL_GPIO_Init+0x21e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4f      	ldr	r2, [pc, #316]	; (8003490 <HAL_GPIO_Init+0x350>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d101      	bne.n	800335a <HAL_GPIO_Init+0x21a>
 8003356:	2309      	movs	r3, #9
 8003358:	e012      	b.n	8003380 <HAL_GPIO_Init+0x240>
 800335a:	230a      	movs	r3, #10
 800335c:	e010      	b.n	8003380 <HAL_GPIO_Init+0x240>
 800335e:	2308      	movs	r3, #8
 8003360:	e00e      	b.n	8003380 <HAL_GPIO_Init+0x240>
 8003362:	2307      	movs	r3, #7
 8003364:	e00c      	b.n	8003380 <HAL_GPIO_Init+0x240>
 8003366:	2306      	movs	r3, #6
 8003368:	e00a      	b.n	8003380 <HAL_GPIO_Init+0x240>
 800336a:	2305      	movs	r3, #5
 800336c:	e008      	b.n	8003380 <HAL_GPIO_Init+0x240>
 800336e:	2304      	movs	r3, #4
 8003370:	e006      	b.n	8003380 <HAL_GPIO_Init+0x240>
 8003372:	2303      	movs	r3, #3
 8003374:	e004      	b.n	8003380 <HAL_GPIO_Init+0x240>
 8003376:	2302      	movs	r3, #2
 8003378:	e002      	b.n	8003380 <HAL_GPIO_Init+0x240>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_GPIO_Init+0x240>
 800337e:	2300      	movs	r3, #0
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	f002 0203 	and.w	r2, r2, #3
 8003386:	0092      	lsls	r2, r2, #2
 8003388:	4093      	lsls	r3, r2
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003390:	4935      	ldr	r1, [pc, #212]	; (8003468 <HAL_GPIO_Init+0x328>)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	089b      	lsrs	r3, r3, #2
 8003396:	3302      	adds	r3, #2
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800339e:	4b3d      	ldr	r3, [pc, #244]	; (8003494 <HAL_GPIO_Init+0x354>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033c2:	4a34      	ldr	r2, [pc, #208]	; (8003494 <HAL_GPIO_Init+0x354>)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033c8:	4b32      	ldr	r3, [pc, #200]	; (8003494 <HAL_GPIO_Init+0x354>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033ec:	4a29      	ldr	r2, [pc, #164]	; (8003494 <HAL_GPIO_Init+0x354>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033f2:	4b28      	ldr	r3, [pc, #160]	; (8003494 <HAL_GPIO_Init+0x354>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003416:	4a1f      	ldr	r2, [pc, #124]	; (8003494 <HAL_GPIO_Init+0x354>)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <HAL_GPIO_Init+0x354>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <HAL_GPIO_Init+0x354>)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3301      	adds	r3, #1
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	2b0f      	cmp	r3, #15
 8003450:	f67f ae84 	bls.w	800315c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3724      	adds	r7, #36	; 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800
 8003468:	40013800 	.word	0x40013800
 800346c:	40020000 	.word	0x40020000
 8003470:	40020400 	.word	0x40020400
 8003474:	40020800 	.word	0x40020800
 8003478:	40020c00 	.word	0x40020c00
 800347c:	40021000 	.word	0x40021000
 8003480:	40021400 	.word	0x40021400
 8003484:	40021800 	.word	0x40021800
 8003488:	40021c00 	.word	0x40021c00
 800348c:	40022000 	.word	0x40022000
 8003490:	40022400 	.word	0x40022400
 8003494:	40013c00 	.word	0x40013c00

08003498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
 80034a4:	4613      	mov	r3, r2
 80034a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a8:	787b      	ldrb	r3, [r7, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034b4:	e003      	b.n	80034be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	041a      	lsls	r2, r3, #16
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	619a      	str	r2, [r3, #24]
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b085      	sub	sp, #20
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034dc:	887a      	ldrh	r2, [r7, #2]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4013      	ands	r3, r2
 80034e2:	041a      	lsls	r2, r3, #16
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	43d9      	mvns	r1, r3
 80034e8:	887b      	ldrh	r3, [r7, #2]
 80034ea:	400b      	ands	r3, r1
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	619a      	str	r2, [r3, #24]
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80034fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003500:	b08f      	sub	sp, #60	; 0x3c
 8003502:	af0a      	add	r7, sp, #40	; 0x28
 8003504:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e054      	b.n	80035ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f00a fae0 	bl	800daf0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2203      	movs	r2, #3
 8003534:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f005 f904 	bl	800875c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	603b      	str	r3, [r7, #0]
 800355a:	687e      	ldr	r6, [r7, #4]
 800355c:	466d      	mov	r5, sp
 800355e:	f106 0410 	add.w	r4, r6, #16
 8003562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800356a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800356e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003572:	1d33      	adds	r3, r6, #4
 8003574:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003576:	6838      	ldr	r0, [r7, #0]
 8003578:	f005 f87e 	bl	8008678 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2101      	movs	r1, #1
 8003582:	4618      	mov	r0, r3
 8003584:	f005 f8fb 	bl	800877e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	603b      	str	r3, [r7, #0]
 800358e:	687e      	ldr	r6, [r7, #4]
 8003590:	466d      	mov	r5, sp
 8003592:	f106 0410 	add.w	r4, r6, #16
 8003596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800359a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800359c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800359e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80035a6:	1d33      	adds	r3, r6, #4
 80035a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035aa:	6838      	ldr	r0, [r7, #0]
 80035ac:	f005 fa62 	bl	8008a74 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80035c2:	b590      	push	{r4, r7, lr}
 80035c4:	b089      	sub	sp, #36	; 0x24
 80035c6:	af04      	add	r7, sp, #16
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	4608      	mov	r0, r1
 80035cc:	4611      	mov	r1, r2
 80035ce:	461a      	mov	r2, r3
 80035d0:	4603      	mov	r3, r0
 80035d2:	70fb      	strb	r3, [r7, #3]
 80035d4:	460b      	mov	r3, r1
 80035d6:	70bb      	strb	r3, [r7, #2]
 80035d8:	4613      	mov	r3, r2
 80035da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_HCD_HC_Init+0x28>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e076      	b.n	80036d8 <HAL_HCD_HC_Init+0x116>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	212c      	movs	r1, #44	; 0x2c
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	333d      	adds	r3, #61	; 0x3d
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	212c      	movs	r1, #44	; 0x2c
 800360a:	fb01 f303 	mul.w	r3, r1, r3
 800360e:	4413      	add	r3, r2
 8003610:	3338      	adds	r3, #56	; 0x38
 8003612:	787a      	ldrb	r2, [r7, #1]
 8003614:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	212c      	movs	r1, #44	; 0x2c
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	4413      	add	r3, r2
 8003622:	3340      	adds	r3, #64	; 0x40
 8003624:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003626:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	212c      	movs	r1, #44	; 0x2c
 800362e:	fb01 f303 	mul.w	r3, r1, r3
 8003632:	4413      	add	r3, r2
 8003634:	3339      	adds	r3, #57	; 0x39
 8003636:	78fa      	ldrb	r2, [r7, #3]
 8003638:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	333f      	adds	r3, #63	; 0x3f
 8003648:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800364c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	78ba      	ldrb	r2, [r7, #2]
 8003652:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003656:	b2d0      	uxtb	r0, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	212c      	movs	r1, #44	; 0x2c
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	4413      	add	r3, r2
 8003662:	333a      	adds	r3, #58	; 0x3a
 8003664:	4602      	mov	r2, r0
 8003666:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003668:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800366c:	2b00      	cmp	r3, #0
 800366e:	da09      	bge.n	8003684 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	212c      	movs	r1, #44	; 0x2c
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	4413      	add	r3, r2
 800367c:	333b      	adds	r3, #59	; 0x3b
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e008      	b.n	8003696 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	212c      	movs	r1, #44	; 0x2c
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	4413      	add	r3, r2
 8003690:	333b      	adds	r3, #59	; 0x3b
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	212c      	movs	r1, #44	; 0x2c
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	333c      	adds	r3, #60	; 0x3c
 80036a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	787c      	ldrb	r4, [r7, #1]
 80036b0:	78ba      	ldrb	r2, [r7, #2]
 80036b2:	78f9      	ldrb	r1, [r7, #3]
 80036b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036b6:	9302      	str	r3, [sp, #8]
 80036b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	4623      	mov	r3, r4
 80036c6:	f005 fb4f 	bl	8008d68 <USB_HC_Init>
 80036ca:	4603      	mov	r3, r0
 80036cc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd90      	pop	{r4, r7, pc}

080036e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_HCD_HC_Halt+0x1e>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e00f      	b.n	800371e <HAL_HCD_HC_Halt+0x3e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f005 fd8b 	bl	800922a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800371c:	7bfb      	ldrb	r3, [r7, #15]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	461a      	mov	r2, r3
 8003736:	4603      	mov	r3, r0
 8003738:	70fb      	strb	r3, [r7, #3]
 800373a:	460b      	mov	r3, r1
 800373c:	70bb      	strb	r3, [r7, #2]
 800373e:	4613      	mov	r3, r2
 8003740:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	212c      	movs	r1, #44	; 0x2c
 8003748:	fb01 f303 	mul.w	r3, r1, r3
 800374c:	4413      	add	r3, r2
 800374e:	333b      	adds	r3, #59	; 0x3b
 8003750:	78ba      	ldrb	r2, [r7, #2]
 8003752:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	212c      	movs	r1, #44	; 0x2c
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	333f      	adds	r3, #63	; 0x3f
 8003762:	787a      	ldrb	r2, [r7, #1]
 8003764:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003766:	7c3b      	ldrb	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d112      	bne.n	8003792 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	3342      	adds	r3, #66	; 0x42
 800377a:	2203      	movs	r2, #3
 800377c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	212c      	movs	r1, #44	; 0x2c
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	333d      	adds	r3, #61	; 0x3d
 800378c:	7f3a      	ldrb	r2, [r7, #28]
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	e008      	b.n	80037a4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	212c      	movs	r1, #44	; 0x2c
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	4413      	add	r3, r2
 800379e:	3342      	adds	r3, #66	; 0x42
 80037a0:	2202      	movs	r2, #2
 80037a2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80037a4:	787b      	ldrb	r3, [r7, #1]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	f200 80c6 	bhi.w	8003938 <HAL_HCD_HC_SubmitRequest+0x210>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	08003925 	.word	0x08003925
 80037bc:	08003829 	.word	0x08003829
 80037c0:	080038a7 	.word	0x080038a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80037c4:	7c3b      	ldrb	r3, [r7, #16]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	f040 80b8 	bne.w	800393c <HAL_HCD_HC_SubmitRequest+0x214>
 80037cc:	78bb      	ldrb	r3, [r7, #2]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f040 80b4 	bne.w	800393c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80037d4:	8b3b      	ldrh	r3, [r7, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d108      	bne.n	80037ec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	212c      	movs	r1, #44	; 0x2c
 80037e0:	fb01 f303 	mul.w	r3, r1, r3
 80037e4:	4413      	add	r3, r2
 80037e6:	3355      	adds	r3, #85	; 0x55
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	212c      	movs	r1, #44	; 0x2c
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	3355      	adds	r3, #85	; 0x55
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	212c      	movs	r1, #44	; 0x2c
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	4413      	add	r3, r2
 800380c:	3342      	adds	r3, #66	; 0x42
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003812:	e093      	b.n	800393c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	212c      	movs	r1, #44	; 0x2c
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	4413      	add	r3, r2
 8003820:	3342      	adds	r3, #66	; 0x42
 8003822:	2202      	movs	r2, #2
 8003824:	701a      	strb	r2, [r3, #0]
      break;
 8003826:	e089      	b.n	800393c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003828:	78bb      	ldrb	r3, [r7, #2]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11d      	bne.n	800386a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	3355      	adds	r3, #85	; 0x55
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	212c      	movs	r1, #44	; 0x2c
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	3342      	adds	r3, #66	; 0x42
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003854:	e073      	b.n	800393e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	3342      	adds	r3, #66	; 0x42
 8003864:	2202      	movs	r2, #2
 8003866:	701a      	strb	r2, [r3, #0]
      break;
 8003868:	e069      	b.n	800393e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	212c      	movs	r1, #44	; 0x2c
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	4413      	add	r3, r2
 8003876:	3354      	adds	r3, #84	; 0x54
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	3342      	adds	r3, #66	; 0x42
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
      break;
 8003890:	e055      	b.n	800393e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3342      	adds	r3, #66	; 0x42
 80038a0:	2202      	movs	r2, #2
 80038a2:	701a      	strb	r2, [r3, #0]
      break;
 80038a4:	e04b      	b.n	800393e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80038a6:	78bb      	ldrb	r3, [r7, #2]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d11d      	bne.n	80038e8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3355      	adds	r3, #85	; 0x55
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d109      	bne.n	80038d4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	212c      	movs	r1, #44	; 0x2c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	3342      	adds	r3, #66	; 0x42
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80038d2:	e034      	b.n	800393e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3342      	adds	r3, #66	; 0x42
 80038e2:	2202      	movs	r2, #2
 80038e4:	701a      	strb	r2, [r3, #0]
      break;
 80038e6:	e02a      	b.n	800393e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	3354      	adds	r3, #84	; 0x54
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3342      	adds	r3, #66	; 0x42
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
      break;
 800390e:	e016      	b.n	800393e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	3342      	adds	r3, #66	; 0x42
 800391e:	2202      	movs	r2, #2
 8003920:	701a      	strb	r2, [r3, #0]
      break;
 8003922:	e00c      	b.n	800393e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	3342      	adds	r3, #66	; 0x42
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
      break;
 8003936:	e002      	b.n	800393e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003938:	bf00      	nop
 800393a:	e000      	b.n	800393e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800393c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	212c      	movs	r1, #44	; 0x2c
 8003944:	fb01 f303 	mul.w	r3, r1, r3
 8003948:	4413      	add	r3, r2
 800394a:	3344      	adds	r3, #68	; 0x44
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	8b3a      	ldrh	r2, [r7, #24]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	202c      	movs	r0, #44	; 0x2c
 8003958:	fb00 f303 	mul.w	r3, r0, r3
 800395c:	440b      	add	r3, r1
 800395e:	334c      	adds	r3, #76	; 0x4c
 8003960:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	212c      	movs	r1, #44	; 0x2c
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	4413      	add	r3, r2
 800396e:	3360      	adds	r3, #96	; 0x60
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	212c      	movs	r1, #44	; 0x2c
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4413      	add	r3, r2
 8003980:	3350      	adds	r3, #80	; 0x50
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	212c      	movs	r1, #44	; 0x2c
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	3339      	adds	r3, #57	; 0x39
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	212c      	movs	r1, #44	; 0x2c
 800399e:	fb01 f303 	mul.w	r3, r1, r3
 80039a2:	4413      	add	r3, r2
 80039a4:	3361      	adds	r3, #97	; 0x61
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	222c      	movs	r2, #44	; 0x2c
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	3338      	adds	r3, #56	; 0x38
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	18d1      	adds	r1, r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	f005 fade 	bl	8008f84 <USB_HC_StartXfer>
 80039c8:	4603      	mov	r3, r0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop

080039d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f005 f801 	bl	80089f2 <USB_GetMode>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	f040 80f6 	bne.w	8003be4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f004 ffe5 	bl	80089cc <USB_ReadInterrupts>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80ec 	beq.w	8003be2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f004 ffdc 	bl	80089cc <USB_ReadInterrupts>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a1e:	d104      	bne.n	8003a2a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f004 ffcc 	bl	80089cc <USB_ReadInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a3e:	d104      	bne.n	8003a4a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f004 ffbc 	bl	80089cc <USB_ReadInterrupts>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a5e:	d104      	bne.n	8003a6a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f004 ffac 	bl	80089cc <USB_ReadInterrupts>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d103      	bne.n	8003a86 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2202      	movs	r2, #2
 8003a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f004 ff9e 	bl	80089cc <USB_ReadInterrupts>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a9a:	d11c      	bne.n	8003ad6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003aa4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003ab6:	2110      	movs	r1, #16
 8003ab8:	6938      	ldr	r0, [r7, #16]
 8003aba:	f004 fead 	bl	8008818 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003abe:	6938      	ldr	r0, [r7, #16]
 8003ac0:	f004 fece 	bl	8008860 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4618      	mov	r0, r3
 8003acc:	f005 f886 	bl	8008bdc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f00a f887 	bl	800dbe4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f004 ff76 	bl	80089cc <USB_ReadInterrupts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aea:	d102      	bne.n	8003af2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f001 fa03 	bl	8004ef8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f004 ff68 	bl	80089cc <USB_ReadInterrupts>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d106      	bne.n	8003b14 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f00a f850 	bl	800dbac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2208      	movs	r2, #8
 8003b12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f004 ff57 	bl	80089cc <USB_ReadInterrupts>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d101      	bne.n	8003b2c <HAL_HCD_IRQHandler+0x158>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <HAL_HCD_IRQHandler+0x15a>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d012      	beq.n	8003b58 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0210 	bic.w	r2, r2, #16
 8003b40:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f001 f906 	bl	8004d54 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0210 	orr.w	r2, r2, #16
 8003b56:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f004 ff35 	bl	80089cc <USB_ReadInterrupts>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b6c:	d13a      	bne.n	8003be4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f005 fb48 	bl	8009208 <USB_HC_ReadInterrupt>
 8003b78:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	e025      	b.n	8003bcc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d018      	beq.n	8003bc6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003baa:	d106      	bne.n	8003bba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8ab 	bl	8003d0e <HCD_HC_IN_IRQHandler>
 8003bb8:	e005      	b.n	8003bc6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fcc6 	bl	8004552 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d3d4      	bcc.n	8003b80 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bde:	615a      	str	r2, [r3, #20]
 8003be0:	e000      	b.n	8003be4 <HAL_HCD_IRQHandler+0x210>
      return;
 8003be2:	bf00      	nop
    }
  }
}
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_HCD_Start+0x16>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e013      	b.n	8003c28 <HAL_HCD_Start+0x3e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f005 f848 	bl	8008ca4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f004 fd8e 	bl	800873a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_HCD_Stop+0x16>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e00d      	b.n	8003c62 <HAL_HCD_Stop+0x32>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f005 fc42 	bl	80094dc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f004 ffea 	bl	8008c50 <USB_ResetPort>
 8003c7c:	4603      	mov	r3, r0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	212c      	movs	r1, #44	; 0x2c
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3360      	adds	r3, #96	; 0x60
 8003ca0:	781b      	ldrb	r3, [r3, #0]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	212c      	movs	r1, #44	; 0x2c
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3350      	adds	r3, #80	; 0x50
 8003cc8:	681b      	ldr	r3, [r3, #0]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f005 f82e 	bl	8008d44 <USB_GetCurrentFrame>
 8003ce8:	4603      	mov	r3, r0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f005 f809 	bl	8008d16 <USB_GetHostSpeed>
 8003d04:	4603      	mov	r3, r0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b086      	sub	sp, #24
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	460b      	mov	r3, r1
 8003d18:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d119      	bne.n	8003d72 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	0151      	lsls	r1, r2, #5
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	440a      	add	r2, r1
 8003d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d6a:	f043 0302 	orr.w	r3, r3, #2
 8003d6e:	60d3      	str	r3, [r2, #12]
 8003d70:	e101      	b.n	8003f76 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d88:	d12b      	bne.n	8003de2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d96:	461a      	mov	r2, r3
 8003d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	212c      	movs	r1, #44	; 0x2c
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	3361      	adds	r3, #97	; 0x61
 8003dac:	2207      	movs	r2, #7
 8003dae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	0151      	lsls	r1, r2, #5
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	440a      	add	r2, r1
 8003dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dca:	f043 0302 	orr.w	r3, r3, #2
 8003dce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f005 fa25 	bl	800922a <USB_HC_Halt>
 8003de0:	e0c9      	b.n	8003f76 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d109      	bne.n	8003e0c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e04:	461a      	mov	r2, r3
 8003e06:	2320      	movs	r3, #32
 8003e08:	6093      	str	r3, [r2, #8]
 8003e0a:	e0b4      	b.n	8003f76 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d133      	bne.n	8003e8a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	0151      	lsls	r1, r2, #5
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	440a      	add	r2, r1
 8003e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e3c:	f043 0302 	orr.w	r3, r3, #2
 8003e40:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	212c      	movs	r1, #44	; 0x2c
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3361      	adds	r3, #97	; 0x61
 8003e50:	2205      	movs	r2, #5
 8003e52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e60:	461a      	mov	r2, r3
 8003e62:	2310      	movs	r3, #16
 8003e64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e72:	461a      	mov	r2, r3
 8003e74:	2308      	movs	r3, #8
 8003e76:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	4611      	mov	r1, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f005 f9d1 	bl	800922a <USB_HC_Halt>
 8003e88:	e075      	b.n	8003f76 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea0:	d134      	bne.n	8003f0c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	0151      	lsls	r1, r2, #5
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	440a      	add	r2, r1
 8003eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ebc:	f043 0302 	orr.w	r3, r3, #2
 8003ec0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	3361      	adds	r3, #97	; 0x61
 8003ed0:	2208      	movs	r2, #8
 8003ed2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2310      	movs	r3, #16
 8003ee4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ef8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	4611      	mov	r1, r2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f005 f990 	bl	800922a <USB_HC_Halt>
 8003f0a:	e034      	b.n	8003f76 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d129      	bne.n	8003f76 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	0151      	lsls	r1, r2, #5
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	440a      	add	r2, r1
 8003f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f3c:	f043 0302 	orr.w	r3, r3, #2
 8003f40:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	212c      	movs	r1, #44	; 0x2c
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3361      	adds	r3, #97	; 0x61
 8003f50:	2206      	movs	r2, #6
 8003f52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f005 f963 	bl	800922a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f70:	461a      	mov	r2, r3
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8c:	d122      	bne.n	8003fd4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	0151      	lsls	r1, r2, #5
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	440a      	add	r2, r1
 8003fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fa8:	f043 0302 	orr.w	r3, r3, #2
 8003fac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f005 f936 	bl	800922a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fd0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003fd2:	e2ba      	b.n	800454a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	f040 811b 	bne.w	8004222 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d019      	beq.n	8004028 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	212c      	movs	r1, #44	; 0x2c
 8003ffa:	fb01 f303 	mul.w	r3, r1, r3
 8003ffe:	4413      	add	r3, r2
 8004000:	3348      	adds	r3, #72	; 0x48
 8004002:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	0159      	lsls	r1, r3, #5
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	440b      	add	r3, r1
 800400c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004016:	1ad2      	subs	r2, r2, r3
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	202c      	movs	r0, #44	; 0x2c
 800401e:	fb00 f303 	mul.w	r3, r0, r3
 8004022:	440b      	add	r3, r1
 8004024:	3350      	adds	r3, #80	; 0x50
 8004026:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	212c      	movs	r1, #44	; 0x2c
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	4413      	add	r3, r2
 8004034:	3361      	adds	r3, #97	; 0x61
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	212c      	movs	r1, #44	; 0x2c
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	4413      	add	r3, r2
 8004046:	335c      	adds	r3, #92	; 0x5c
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4413      	add	r3, r2
 8004054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004058:	461a      	mov	r2, r3
 800405a:	2301      	movs	r3, #1
 800405c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	212c      	movs	r1, #44	; 0x2c
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	4413      	add	r3, r2
 800406a:	333f      	adds	r3, #63	; 0x3f
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	212c      	movs	r1, #44	; 0x2c
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	4413      	add	r3, r2
 800407e:	333f      	adds	r3, #63	; 0x3f
 8004080:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004082:	2b02      	cmp	r3, #2
 8004084:	d121      	bne.n	80040ca <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4413      	add	r3, r2
 800408e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	0151      	lsls	r1, r2, #5
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	440a      	add	r2, r1
 800409c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040a0:	f043 0302 	orr.w	r3, r3, #2
 80040a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	4611      	mov	r1, r2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f005 f8ba 	bl	800922a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c2:	461a      	mov	r2, r3
 80040c4:	2310      	movs	r3, #16
 80040c6:	6093      	str	r3, [r2, #8]
 80040c8:	e066      	b.n	8004198 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	212c      	movs	r1, #44	; 0x2c
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	333f      	adds	r3, #63	; 0x3f
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d127      	bne.n	800412e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	0151      	lsls	r1, r2, #5
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	440a      	add	r2, r1
 80040f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040fc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	212c      	movs	r1, #44	; 0x2c
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	4413      	add	r3, r2
 800410a:	3360      	adds	r3, #96	; 0x60
 800410c:	2201      	movs	r2, #1
 800410e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	b2d9      	uxtb	r1, r3
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	202c      	movs	r0, #44	; 0x2c
 800411a:	fb00 f303 	mul.w	r3, r0, r3
 800411e:	4413      	add	r3, r2
 8004120:	3360      	adds	r3, #96	; 0x60
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f009 fd6a 	bl	800dc00 <HAL_HCD_HC_NotifyURBChange_Callback>
 800412c:	e034      	b.n	8004198 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	212c      	movs	r1, #44	; 0x2c
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	4413      	add	r3, r2
 800413a:	333f      	adds	r3, #63	; 0x3f
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d12a      	bne.n	8004198 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	212c      	movs	r1, #44	; 0x2c
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	3360      	adds	r3, #96	; 0x60
 8004150:	2201      	movs	r2, #1
 8004152:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	212c      	movs	r1, #44	; 0x2c
 800415a:	fb01 f303 	mul.w	r3, r1, r3
 800415e:	4413      	add	r3, r2
 8004160:	3354      	adds	r3, #84	; 0x54
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	f083 0301 	eor.w	r3, r3, #1
 8004168:	b2d8      	uxtb	r0, r3
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	212c      	movs	r1, #44	; 0x2c
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	4413      	add	r3, r2
 8004176:	3354      	adds	r3, #84	; 0x54
 8004178:	4602      	mov	r2, r0
 800417a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	b2d9      	uxtb	r1, r3
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	202c      	movs	r0, #44	; 0x2c
 8004186:	fb00 f303 	mul.w	r3, r0, r3
 800418a:	4413      	add	r3, r2
 800418c:	3360      	adds	r3, #96	; 0x60
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f009 fd34 	bl	800dc00 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d12b      	bne.n	80041f8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	212c      	movs	r1, #44	; 0x2c
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	4413      	add	r3, r2
 80041ac:	3348      	adds	r3, #72	; 0x48
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	202c      	movs	r0, #44	; 0x2c
 80041b6:	fb00 f202 	mul.w	r2, r0, r2
 80041ba:	440a      	add	r2, r1
 80041bc:	3240      	adds	r2, #64	; 0x40
 80041be:	8812      	ldrh	r2, [r2, #0]
 80041c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 81be 	beq.w	800454a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	212c      	movs	r1, #44	; 0x2c
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	4413      	add	r3, r2
 80041da:	3354      	adds	r3, #84	; 0x54
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	f083 0301 	eor.w	r3, r3, #1
 80041e2:	b2d8      	uxtb	r0, r3
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	212c      	movs	r1, #44	; 0x2c
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	3354      	adds	r3, #84	; 0x54
 80041f2:	4602      	mov	r2, r0
 80041f4:	701a      	strb	r2, [r3, #0]
}
 80041f6:	e1a8      	b.n	800454a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	3354      	adds	r3, #84	; 0x54
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	f083 0301 	eor.w	r3, r3, #1
 800420c:	b2d8      	uxtb	r0, r3
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	212c      	movs	r1, #44	; 0x2c
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	4413      	add	r3, r2
 800421a:	3354      	adds	r3, #84	; 0x54
 800421c:	4602      	mov	r2, r0
 800421e:	701a      	strb	r2, [r3, #0]
}
 8004220:	e193      	b.n	800454a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4413      	add	r3, r2
 800422a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b02      	cmp	r3, #2
 8004236:	f040 8106 	bne.w	8004446 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4413      	add	r3, r2
 8004242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	440a      	add	r2, r1
 8004250:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004254:	f023 0302 	bic.w	r3, r3, #2
 8004258:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	212c      	movs	r1, #44	; 0x2c
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	4413      	add	r3, r2
 8004266:	3361      	adds	r3, #97	; 0x61
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d109      	bne.n	8004282 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	212c      	movs	r1, #44	; 0x2c
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	4413      	add	r3, r2
 800427a:	3360      	adds	r3, #96	; 0x60
 800427c:	2201      	movs	r2, #1
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	e0c9      	b.n	8004416 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	3361      	adds	r3, #97	; 0x61
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b05      	cmp	r3, #5
 8004294:	d109      	bne.n	80042aa <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	212c      	movs	r1, #44	; 0x2c
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	3360      	adds	r3, #96	; 0x60
 80042a4:	2205      	movs	r2, #5
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e0b5      	b.n	8004416 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	212c      	movs	r1, #44	; 0x2c
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	3361      	adds	r3, #97	; 0x61
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b06      	cmp	r3, #6
 80042bc:	d009      	beq.n	80042d2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	212c      	movs	r1, #44	; 0x2c
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	4413      	add	r3, r2
 80042ca:	3361      	adds	r3, #97	; 0x61
 80042cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d150      	bne.n	8004374 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	212c      	movs	r1, #44	; 0x2c
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	4413      	add	r3, r2
 80042de:	335c      	adds	r3, #92	; 0x5c
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	202c      	movs	r0, #44	; 0x2c
 80042ea:	fb00 f303 	mul.w	r3, r0, r3
 80042ee:	440b      	add	r3, r1
 80042f0:	335c      	adds	r3, #92	; 0x5c
 80042f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	212c      	movs	r1, #44	; 0x2c
 80042fa:	fb01 f303 	mul.w	r3, r1, r3
 80042fe:	4413      	add	r3, r2
 8004300:	335c      	adds	r3, #92	; 0x5c
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d912      	bls.n	800432e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	212c      	movs	r1, #44	; 0x2c
 800430e:	fb01 f303 	mul.w	r3, r1, r3
 8004312:	4413      	add	r3, r2
 8004314:	335c      	adds	r3, #92	; 0x5c
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	212c      	movs	r1, #44	; 0x2c
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	4413      	add	r3, r2
 8004326:	3360      	adds	r3, #96	; 0x60
 8004328:	2204      	movs	r2, #4
 800432a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800432c:	e073      	b.n	8004416 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	212c      	movs	r1, #44	; 0x2c
 8004334:	fb01 f303 	mul.w	r3, r1, r3
 8004338:	4413      	add	r3, r2
 800433a:	3360      	adds	r3, #96	; 0x60
 800433c:	2202      	movs	r2, #2
 800433e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4413      	add	r3, r2
 8004348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004356:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800435e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4413      	add	r3, r2
 8004368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436c:	461a      	mov	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004372:	e050      	b.n	8004416 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	212c      	movs	r1, #44	; 0x2c
 800437a:	fb01 f303 	mul.w	r3, r1, r3
 800437e:	4413      	add	r3, r2
 8004380:	3361      	adds	r3, #97	; 0x61
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d122      	bne.n	80043ce <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	212c      	movs	r1, #44	; 0x2c
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	4413      	add	r3, r2
 8004394:	3360      	adds	r3, #96	; 0x60
 8004396:	2202      	movs	r2, #2
 8004398:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043b0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043b8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c6:	461a      	mov	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	e023      	b.n	8004416 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	212c      	movs	r1, #44	; 0x2c
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	3361      	adds	r3, #97	; 0x61
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b07      	cmp	r3, #7
 80043e0:	d119      	bne.n	8004416 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	212c      	movs	r1, #44	; 0x2c
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	4413      	add	r3, r2
 80043ee:	335c      	adds	r3, #92	; 0x5c
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	202c      	movs	r0, #44	; 0x2c
 80043fa:	fb00 f303 	mul.w	r3, r0, r3
 80043fe:	440b      	add	r3, r1
 8004400:	335c      	adds	r3, #92	; 0x5c
 8004402:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	212c      	movs	r1, #44	; 0x2c
 800440a:	fb01 f303 	mul.w	r3, r1, r3
 800440e:	4413      	add	r3, r2
 8004410:	3360      	adds	r3, #96	; 0x60
 8004412:	2204      	movs	r2, #4
 8004414:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4413      	add	r3, r2
 800441e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004422:	461a      	mov	r2, r3
 8004424:	2302      	movs	r3, #2
 8004426:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	b2d9      	uxtb	r1, r3
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	202c      	movs	r0, #44	; 0x2c
 8004432:	fb00 f303 	mul.w	r3, r0, r3
 8004436:	4413      	add	r3, r2
 8004438:	3360      	adds	r3, #96	; 0x60
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f009 fbde 	bl	800dc00 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004444:	e081      	b.n	800454a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4413      	add	r3, r2
 800444e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b10      	cmp	r3, #16
 800445a:	d176      	bne.n	800454a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	212c      	movs	r1, #44	; 0x2c
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	4413      	add	r3, r2
 8004468:	333f      	adds	r3, #63	; 0x3f
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b03      	cmp	r3, #3
 800446e:	d121      	bne.n	80044b4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	212c      	movs	r1, #44	; 0x2c
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	4413      	add	r3, r2
 800447c:	335c      	adds	r3, #92	; 0x5c
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4413      	add	r3, r2
 800448a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	0151      	lsls	r1, r2, #5
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	440a      	add	r2, r1
 8004498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800449c:	f043 0302 	orr.w	r3, r3, #2
 80044a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	4611      	mov	r1, r2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f004 febc 	bl	800922a <USB_HC_Halt>
 80044b2:	e041      	b.n	8004538 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	212c      	movs	r1, #44	; 0x2c
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	4413      	add	r3, r2
 80044c0:	333f      	adds	r3, #63	; 0x3f
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d009      	beq.n	80044dc <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	212c      	movs	r1, #44	; 0x2c
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	333f      	adds	r3, #63	; 0x3f
 80044d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d12d      	bne.n	8004538 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	212c      	movs	r1, #44	; 0x2c
 80044e2:	fb01 f303 	mul.w	r3, r1, r3
 80044e6:	4413      	add	r3, r2
 80044e8:	335c      	adds	r3, #92	; 0x5c
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d120      	bne.n	8004538 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	212c      	movs	r1, #44	; 0x2c
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	4413      	add	r3, r2
 8004502:	3361      	adds	r3, #97	; 0x61
 8004504:	2203      	movs	r2, #3
 8004506:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4413      	add	r3, r2
 8004510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	440a      	add	r2, r1
 800451e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004522:	f043 0302 	orr.w	r3, r3, #2
 8004526:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f004 fe79 	bl	800922a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004544:	461a      	mov	r2, r3
 8004546:	2310      	movs	r3, #16
 8004548:	6093      	str	r3, [r2, #8]
}
 800454a:	bf00      	nop
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b088      	sub	sp, #32
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	460b      	mov	r3, r1
 800455c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	4413      	add	r3, r2
 8004574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b04      	cmp	r3, #4
 8004580:	d119      	bne.n	80045b6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	4413      	add	r3, r2
 800458a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458e:	461a      	mov	r2, r3
 8004590:	2304      	movs	r3, #4
 8004592:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	4413      	add	r3, r2
 800459c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	0151      	lsls	r1, r2, #5
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	440a      	add	r2, r1
 80045aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045ae:	f043 0302 	orr.w	r3, r3, #2
 80045b2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80045b4:	e3ca      	b.n	8004d4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d13e      	bne.n	800464a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d8:	461a      	mov	r2, r3
 80045da:	2320      	movs	r3, #32
 80045dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	212c      	movs	r1, #44	; 0x2c
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	4413      	add	r3, r2
 80045ea:	333d      	adds	r3, #61	; 0x3d
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	f040 83ac 	bne.w	8004d4c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	212c      	movs	r1, #44	; 0x2c
 80045fa:	fb01 f303 	mul.w	r3, r1, r3
 80045fe:	4413      	add	r3, r2
 8004600:	333d      	adds	r3, #61	; 0x3d
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	212c      	movs	r1, #44	; 0x2c
 800460c:	fb01 f303 	mul.w	r3, r1, r3
 8004610:	4413      	add	r3, r2
 8004612:	3360      	adds	r3, #96	; 0x60
 8004614:	2202      	movs	r2, #2
 8004616:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	4413      	add	r3, r2
 8004620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	0151      	lsls	r1, r2, #5
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	440a      	add	r2, r1
 800462e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004632:	f043 0302 	orr.w	r3, r3, #2
 8004636:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f004 fdf1 	bl	800922a <USB_HC_Halt>
}
 8004648:	e380      	b.n	8004d4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	4413      	add	r3, r2
 8004652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004660:	d122      	bne.n	80046a8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	4413      	add	r3, r2
 800466a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	0151      	lsls	r1, r2, #5
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	440a      	add	r2, r1
 8004678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800467c:	f043 0302 	orr.w	r3, r3, #2
 8004680:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f004 fdcc 	bl	800922a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	4413      	add	r3, r2
 800469a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469e:	461a      	mov	r2, r3
 80046a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046a4:	6093      	str	r3, [r2, #8]
}
 80046a6:	e351      	b.n	8004d4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d150      	bne.n	8004760 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	212c      	movs	r1, #44	; 0x2c
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	4413      	add	r3, r2
 80046ca:	335c      	adds	r3, #92	; 0x5c
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	2b40      	cmp	r3, #64	; 0x40
 80046e4:	d111      	bne.n	800470a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	212c      	movs	r1, #44	; 0x2c
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	333d      	adds	r3, #61	; 0x3d
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004704:	461a      	mov	r2, r3
 8004706:	2340      	movs	r3, #64	; 0x40
 8004708:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	4413      	add	r3, r2
 8004712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	0151      	lsls	r1, r2, #5
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	440a      	add	r2, r1
 8004720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004724:	f043 0302 	orr.w	r3, r3, #2
 8004728:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	4611      	mov	r1, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f004 fd78 	bl	800922a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	4413      	add	r3, r2
 8004742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004746:	461a      	mov	r2, r3
 8004748:	2301      	movs	r3, #1
 800474a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	212c      	movs	r1, #44	; 0x2c
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	4413      	add	r3, r2
 8004758:	3361      	adds	r3, #97	; 0x61
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
}
 800475e:	e2f5      	b.n	8004d4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	4413      	add	r3, r2
 8004768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004772:	2b40      	cmp	r3, #64	; 0x40
 8004774:	d13c      	bne.n	80047f0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	212c      	movs	r1, #44	; 0x2c
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	4413      	add	r3, r2
 8004782:	3361      	adds	r3, #97	; 0x61
 8004784:	2204      	movs	r2, #4
 8004786:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	212c      	movs	r1, #44	; 0x2c
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	4413      	add	r3, r2
 8004794:	333d      	adds	r3, #61	; 0x3d
 8004796:	2201      	movs	r2, #1
 8004798:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	212c      	movs	r1, #44	; 0x2c
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	4413      	add	r3, r2
 80047a6:	335c      	adds	r3, #92	; 0x5c
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	0151      	lsls	r1, r2, #5
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	440a      	add	r2, r1
 80047c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047c6:	f043 0302 	orr.w	r3, r3, #2
 80047ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	4611      	mov	r1, r2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f004 fd27 	bl	800922a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e8:	461a      	mov	r2, r3
 80047ea:	2340      	movs	r3, #64	; 0x40
 80047ec:	6093      	str	r3, [r2, #8]
}
 80047ee:	e2ad      	b.n	8004d4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b08      	cmp	r3, #8
 8004804:	d12a      	bne.n	800485c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	4413      	add	r3, r2
 800480e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004812:	461a      	mov	r2, r3
 8004814:	2308      	movs	r3, #8
 8004816:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	440a      	add	r2, r1
 800482e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004832:	f043 0302 	orr.w	r3, r3, #2
 8004836:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f004 fcf1 	bl	800922a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	212c      	movs	r1, #44	; 0x2c
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	4413      	add	r3, r2
 8004854:	3361      	adds	r3, #97	; 0x61
 8004856:	2205      	movs	r2, #5
 8004858:	701a      	strb	r2, [r3, #0]
}
 800485a:	e277      	b.n	8004d4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	4413      	add	r3, r2
 8004864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	2b10      	cmp	r3, #16
 8004870:	d150      	bne.n	8004914 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	212c      	movs	r1, #44	; 0x2c
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	4413      	add	r3, r2
 800487e:	335c      	adds	r3, #92	; 0x5c
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	212c      	movs	r1, #44	; 0x2c
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	4413      	add	r3, r2
 8004890:	3361      	adds	r3, #97	; 0x61
 8004892:	2203      	movs	r2, #3
 8004894:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	212c      	movs	r1, #44	; 0x2c
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	4413      	add	r3, r2
 80048a2:	333d      	adds	r3, #61	; 0x3d
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d112      	bne.n	80048d0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	212c      	movs	r1, #44	; 0x2c
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	4413      	add	r3, r2
 80048b6:	333c      	adds	r3, #60	; 0x3c
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d108      	bne.n	80048d0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	212c      	movs	r1, #44	; 0x2c
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	4413      	add	r3, r2
 80048ca:	333d      	adds	r3, #61	; 0x3d
 80048cc:	2201      	movs	r2, #1
 80048ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	0151      	lsls	r1, r2, #5
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	440a      	add	r2, r1
 80048e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048ea:	f043 0302 	orr.w	r3, r3, #2
 80048ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	4611      	mov	r1, r2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f004 fc95 	bl	800922a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	4413      	add	r3, r2
 8004908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490c:	461a      	mov	r2, r3
 800490e:	2310      	movs	r3, #16
 8004910:	6093      	str	r3, [r2, #8]
}
 8004912:	e21b      	b.n	8004d4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	4413      	add	r3, r2
 800491c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004926:	2b80      	cmp	r3, #128	; 0x80
 8004928:	d174      	bne.n	8004a14 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d121      	bne.n	8004976 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	212c      	movs	r1, #44	; 0x2c
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	4413      	add	r3, r2
 800493e:	3361      	adds	r3, #97	; 0x61
 8004940:	2206      	movs	r2, #6
 8004942:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	4413      	add	r3, r2
 800494c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	0151      	lsls	r1, r2, #5
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	440a      	add	r2, r1
 800495a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800495e:	f043 0302 	orr.w	r3, r3, #2
 8004962:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f004 fc5b 	bl	800922a <USB_HC_Halt>
 8004974:	e044      	b.n	8004a00 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	212c      	movs	r1, #44	; 0x2c
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	335c      	adds	r3, #92	; 0x5c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	202c      	movs	r0, #44	; 0x2c
 800498e:	fb00 f303 	mul.w	r3, r0, r3
 8004992:	440b      	add	r3, r1
 8004994:	335c      	adds	r3, #92	; 0x5c
 8004996:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	212c      	movs	r1, #44	; 0x2c
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	335c      	adds	r3, #92	; 0x5c
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d920      	bls.n	80049ee <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	212c      	movs	r1, #44	; 0x2c
 80049b2:	fb01 f303 	mul.w	r3, r1, r3
 80049b6:	4413      	add	r3, r2
 80049b8:	335c      	adds	r3, #92	; 0x5c
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	212c      	movs	r1, #44	; 0x2c
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
 80049c8:	4413      	add	r3, r2
 80049ca:	3360      	adds	r3, #96	; 0x60
 80049cc:	2204      	movs	r2, #4
 80049ce:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	b2d9      	uxtb	r1, r3
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	202c      	movs	r0, #44	; 0x2c
 80049da:	fb00 f303 	mul.w	r3, r0, r3
 80049de:	4413      	add	r3, r2
 80049e0:	3360      	adds	r3, #96	; 0x60
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f009 f90a 	bl	800dc00 <HAL_HCD_HC_NotifyURBChange_Callback>
 80049ec:	e008      	b.n	8004a00 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	212c      	movs	r1, #44	; 0x2c
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	4413      	add	r3, r2
 80049fa:	3360      	adds	r3, #96	; 0x60
 80049fc:	2202      	movs	r2, #2
 80049fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	6093      	str	r3, [r2, #8]
}
 8004a12:	e19b      	b.n	8004d4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2a:	d134      	bne.n	8004a96 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a46:	f043 0302 	orr.w	r3, r3, #2
 8004a4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f004 fbe7 	bl	800922a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2310      	movs	r3, #16
 8004a6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	212c      	movs	r1, #44	; 0x2c
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3361      	adds	r3, #97	; 0x61
 8004a90:	2208      	movs	r2, #8
 8004a92:	701a      	strb	r2, [r3, #0]
}
 8004a94:	e15a      	b.n	8004d4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	f040 814f 	bne.w	8004d4c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	0151      	lsls	r1, r2, #5
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ac8:	f023 0302 	bic.w	r3, r3, #2
 8004acc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	212c      	movs	r1, #44	; 0x2c
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	3361      	adds	r3, #97	; 0x61
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d17d      	bne.n	8004bde <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	212c      	movs	r1, #44	; 0x2c
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	3360      	adds	r3, #96	; 0x60
 8004af0:	2201      	movs	r2, #1
 8004af2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	212c      	movs	r1, #44	; 0x2c
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	4413      	add	r3, r2
 8004b00:	333f      	adds	r3, #63	; 0x3f
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d00a      	beq.n	8004b1e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	212c      	movs	r1, #44	; 0x2c
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	333f      	adds	r3, #63	; 0x3f
 8004b16:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	f040 8100 	bne.w	8004d1e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d113      	bne.n	8004b4e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	212c      	movs	r1, #44	; 0x2c
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	4413      	add	r3, r2
 8004b32:	3355      	adds	r3, #85	; 0x55
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	f083 0301 	eor.w	r3, r3, #1
 8004b3a:	b2d8      	uxtb	r0, r3
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	212c      	movs	r1, #44	; 0x2c
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	4413      	add	r3, r2
 8004b48:	3355      	adds	r3, #85	; 0x55
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	f040 80e3 	bne.w	8004d1e <HCD_HC_OUT_IRQHandler+0x7cc>
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	212c      	movs	r1, #44	; 0x2c
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	4413      	add	r3, r2
 8004b64:	334c      	adds	r3, #76	; 0x4c
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80d8 	beq.w	8004d1e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	212c      	movs	r1, #44	; 0x2c
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	4413      	add	r3, r2
 8004b7a:	334c      	adds	r3, #76	; 0x4c
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	202c      	movs	r0, #44	; 0x2c
 8004b84:	fb00 f202 	mul.w	r2, r0, r2
 8004b88:	440a      	add	r2, r1
 8004b8a:	3240      	adds	r2, #64	; 0x40
 8004b8c:	8812      	ldrh	r2, [r2, #0]
 8004b8e:	4413      	add	r3, r2
 8004b90:	3b01      	subs	r3, #1
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	202c      	movs	r0, #44	; 0x2c
 8004b98:	fb00 f202 	mul.w	r2, r0, r2
 8004b9c:	440a      	add	r2, r1
 8004b9e:	3240      	adds	r2, #64	; 0x40
 8004ba0:	8812      	ldrh	r2, [r2, #0]
 8004ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 80b5 	beq.w	8004d1e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	212c      	movs	r1, #44	; 0x2c
 8004bba:	fb01 f303 	mul.w	r3, r1, r3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3355      	adds	r3, #85	; 0x55
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	f083 0301 	eor.w	r3, r3, #1
 8004bc8:	b2d8      	uxtb	r0, r3
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	212c      	movs	r1, #44	; 0x2c
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3355      	adds	r3, #85	; 0x55
 8004bd8:	4602      	mov	r2, r0
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	e09f      	b.n	8004d1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	212c      	movs	r1, #44	; 0x2c
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	4413      	add	r3, r2
 8004bea:	3361      	adds	r3, #97	; 0x61
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d109      	bne.n	8004c06 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	212c      	movs	r1, #44	; 0x2c
 8004bf8:	fb01 f303 	mul.w	r3, r1, r3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3360      	adds	r3, #96	; 0x60
 8004c00:	2202      	movs	r2, #2
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	e08b      	b.n	8004d1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	212c      	movs	r1, #44	; 0x2c
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	3361      	adds	r3, #97	; 0x61
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d109      	bne.n	8004c2e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	212c      	movs	r1, #44	; 0x2c
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	4413      	add	r3, r2
 8004c26:	3360      	adds	r3, #96	; 0x60
 8004c28:	2202      	movs	r2, #2
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	e077      	b.n	8004d1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	212c      	movs	r1, #44	; 0x2c
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	4413      	add	r3, r2
 8004c3a:	3361      	adds	r3, #97	; 0x61
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d109      	bne.n	8004c56 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	212c      	movs	r1, #44	; 0x2c
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3360      	adds	r3, #96	; 0x60
 8004c50:	2205      	movs	r2, #5
 8004c52:	701a      	strb	r2, [r3, #0]
 8004c54:	e063      	b.n	8004d1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	212c      	movs	r1, #44	; 0x2c
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	4413      	add	r3, r2
 8004c62:	3361      	adds	r3, #97	; 0x61
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b06      	cmp	r3, #6
 8004c68:	d009      	beq.n	8004c7e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	212c      	movs	r1, #44	; 0x2c
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	3361      	adds	r3, #97	; 0x61
 8004c78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d14f      	bne.n	8004d1e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	212c      	movs	r1, #44	; 0x2c
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	4413      	add	r3, r2
 8004c8a:	335c      	adds	r3, #92	; 0x5c
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	202c      	movs	r0, #44	; 0x2c
 8004c96:	fb00 f303 	mul.w	r3, r0, r3
 8004c9a:	440b      	add	r3, r1
 8004c9c:	335c      	adds	r3, #92	; 0x5c
 8004c9e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	212c      	movs	r1, #44	; 0x2c
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	4413      	add	r3, r2
 8004cac:	335c      	adds	r3, #92	; 0x5c
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d912      	bls.n	8004cda <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	212c      	movs	r1, #44	; 0x2c
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	335c      	adds	r3, #92	; 0x5c
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	212c      	movs	r1, #44	; 0x2c
 8004ccc:	fb01 f303 	mul.w	r3, r1, r3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3360      	adds	r3, #96	; 0x60
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	e021      	b.n	8004d1e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	212c      	movs	r1, #44	; 0x2c
 8004ce0:	fb01 f303 	mul.w	r3, r1, r3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3360      	adds	r3, #96	; 0x60
 8004ce8:	2202      	movs	r2, #2
 8004cea:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d02:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d0a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d18:	461a      	mov	r2, r3
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	b2d9      	uxtb	r1, r3
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	202c      	movs	r0, #44	; 0x2c
 8004d3a:	fb00 f303 	mul.w	r3, r0, r3
 8004d3e:	4413      	add	r3, r2
 8004d40:	3360      	adds	r3, #96	; 0x60
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	461a      	mov	r2, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f008 ff5a 	bl	800dc00 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004d4c:	bf00      	nop
 8004d4e:	3720      	adds	r7, #32
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08a      	sub	sp, #40	; 0x28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	0c5b      	lsrs	r3, r3, #17
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	091b      	lsrs	r3, r3, #4
 8004d84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d88:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d004      	beq.n	8004d9a <HCD_RXQLVL_IRQHandler+0x46>
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b05      	cmp	r3, #5
 8004d94:	f000 80a9 	beq.w	8004eea <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004d98:	e0aa      	b.n	8004ef0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 80a6 	beq.w	8004eee <HCD_RXQLVL_IRQHandler+0x19a>
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	212c      	movs	r1, #44	; 0x2c
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	4413      	add	r3, r2
 8004dae:	3344      	adds	r3, #68	; 0x44
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 809b 	beq.w	8004eee <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	212c      	movs	r1, #44	; 0x2c
 8004dbe:	fb01 f303 	mul.w	r3, r1, r3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3350      	adds	r3, #80	; 0x50
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	441a      	add	r2, r3
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	202c      	movs	r0, #44	; 0x2c
 8004dd2:	fb00 f303 	mul.w	r3, r0, r3
 8004dd6:	440b      	add	r3, r1
 8004dd8:	334c      	adds	r3, #76	; 0x4c
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d87a      	bhi.n	8004ed6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	212c      	movs	r1, #44	; 0x2c
 8004dea:	fb01 f303 	mul.w	r3, r1, r3
 8004dee:	4413      	add	r3, r2
 8004df0:	3344      	adds	r3, #68	; 0x44
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	b292      	uxth	r2, r2
 8004df8:	4619      	mov	r1, r3
 8004dfa:	f003 fd8f 	bl	800891c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	212c      	movs	r1, #44	; 0x2c
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	4413      	add	r3, r2
 8004e0a:	3344      	adds	r3, #68	; 0x44
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	441a      	add	r2, r3
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	202c      	movs	r0, #44	; 0x2c
 8004e18:	fb00 f303 	mul.w	r3, r0, r3
 8004e1c:	440b      	add	r3, r1
 8004e1e:	3344      	adds	r3, #68	; 0x44
 8004e20:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	212c      	movs	r1, #44	; 0x2c
 8004e28:	fb01 f303 	mul.w	r3, r1, r3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	3350      	adds	r3, #80	; 0x50
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	441a      	add	r2, r3
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	202c      	movs	r0, #44	; 0x2c
 8004e3c:	fb00 f303 	mul.w	r3, r0, r3
 8004e40:	440b      	add	r3, r1
 8004e42:	3350      	adds	r3, #80	; 0x50
 8004e44:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	0cdb      	lsrs	r3, r3, #19
 8004e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e5a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	212c      	movs	r1, #44	; 0x2c
 8004e62:	fb01 f303 	mul.w	r3, r1, r3
 8004e66:	4413      	add	r3, r2
 8004e68:	3340      	adds	r3, #64	; 0x40
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d13c      	bne.n	8004eee <HCD_RXQLVL_IRQHandler+0x19a>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d039      	beq.n	8004eee <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e90:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e98:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	212c      	movs	r1, #44	; 0x2c
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	3354      	adds	r3, #84	; 0x54
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f083 0301 	eor.w	r3, r3, #1
 8004ec0:	b2d8      	uxtb	r0, r3
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	212c      	movs	r1, #44	; 0x2c
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	4413      	add	r3, r2
 8004ece:	3354      	adds	r3, #84	; 0x54
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	701a      	strb	r2, [r3, #0]
      break;
 8004ed4:	e00b      	b.n	8004eee <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	212c      	movs	r1, #44	; 0x2c
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	3360      	adds	r3, #96	; 0x60
 8004ee4:	2204      	movs	r2, #4
 8004ee6:	701a      	strb	r2, [r3, #0]
      break;
 8004ee8:	e001      	b.n	8004eee <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004eea:	bf00      	nop
 8004eec:	e000      	b.n	8004ef0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004eee:	bf00      	nop
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	3728      	adds	r7, #40	; 0x28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f24:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d10b      	bne.n	8004f48 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d102      	bne.n	8004f40 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f008 fe44 	bl	800dbc8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f043 0302 	orr.w	r3, r3, #2
 8004f46:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d132      	bne.n	8004fb8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f043 0308 	orr.w	r3, r3, #8
 8004f58:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d126      	bne.n	8004fb2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d113      	bne.n	8004f94 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004f72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f76:	d106      	bne.n	8004f86 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2102      	movs	r1, #2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f003 fe2c 	bl	8008bdc <USB_InitFSLSPClkSel>
 8004f84:	e011      	b.n	8004faa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f003 fe25 	bl	8008bdc <USB_InitFSLSPClkSel>
 8004f92:	e00a      	b.n	8004faa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d106      	bne.n	8004faa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004fa8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f008 fe3a 	bl	800dc24 <HAL_HCD_PortEnabled_Callback>
 8004fb0:	e002      	b.n	8004fb8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f008 fe44 	bl	800dc40 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d103      	bne.n	8004fca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f043 0320 	orr.w	r3, r3, #32
 8004fc8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	6013      	str	r3, [r2, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e12b      	b.n	800524a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fd f8c8 	bl	800219c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2224      	movs	r2, #36	; 0x24
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005044:	f001 ffba 	bl	8006fbc <HAL_RCC_GetPCLK1Freq>
 8005048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4a81      	ldr	r2, [pc, #516]	; (8005254 <HAL_I2C_Init+0x274>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d807      	bhi.n	8005064 <HAL_I2C_Init+0x84>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4a80      	ldr	r2, [pc, #512]	; (8005258 <HAL_I2C_Init+0x278>)
 8005058:	4293      	cmp	r3, r2
 800505a:	bf94      	ite	ls
 800505c:	2301      	movls	r3, #1
 800505e:	2300      	movhi	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	e006      	b.n	8005072 <HAL_I2C_Init+0x92>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4a7d      	ldr	r2, [pc, #500]	; (800525c <HAL_I2C_Init+0x27c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	bf94      	ite	ls
 800506c:	2301      	movls	r3, #1
 800506e:	2300      	movhi	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e0e7      	b.n	800524a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4a78      	ldr	r2, [pc, #480]	; (8005260 <HAL_I2C_Init+0x280>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	0c9b      	lsrs	r3, r3, #18
 8005084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	4a6a      	ldr	r2, [pc, #424]	; (8005254 <HAL_I2C_Init+0x274>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d802      	bhi.n	80050b4 <HAL_I2C_Init+0xd4>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	3301      	adds	r3, #1
 80050b2:	e009      	b.n	80050c8 <HAL_I2C_Init+0xe8>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	4a69      	ldr	r2, [pc, #420]	; (8005264 <HAL_I2C_Init+0x284>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	099b      	lsrs	r3, r3, #6
 80050c6:	3301      	adds	r3, #1
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	430b      	orrs	r3, r1
 80050ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	495c      	ldr	r1, [pc, #368]	; (8005254 <HAL_I2C_Init+0x274>)
 80050e4:	428b      	cmp	r3, r1
 80050e6:	d819      	bhi.n	800511c <HAL_I2C_Init+0x13c>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	1e59      	subs	r1, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80050f6:	1c59      	adds	r1, r3, #1
 80050f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050fc:	400b      	ands	r3, r1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <HAL_I2C_Init+0x138>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1e59      	subs	r1, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005110:	3301      	adds	r3, #1
 8005112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005116:	e051      	b.n	80051bc <HAL_I2C_Init+0x1dc>
 8005118:	2304      	movs	r3, #4
 800511a:	e04f      	b.n	80051bc <HAL_I2C_Init+0x1dc>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d111      	bne.n	8005148 <HAL_I2C_Init+0x168>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	1e58      	subs	r0, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6859      	ldr	r1, [r3, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	440b      	add	r3, r1
 8005132:	fbb0 f3f3 	udiv	r3, r0, r3
 8005136:	3301      	adds	r3, #1
 8005138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800513c:	2b00      	cmp	r3, #0
 800513e:	bf0c      	ite	eq
 8005140:	2301      	moveq	r3, #1
 8005142:	2300      	movne	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	e012      	b.n	800516e <HAL_I2C_Init+0x18e>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	1e58      	subs	r0, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6859      	ldr	r1, [r3, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	0099      	lsls	r1, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	fbb0 f3f3 	udiv	r3, r0, r3
 800515e:	3301      	adds	r3, #1
 8005160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005164:	2b00      	cmp	r3, #0
 8005166:	bf0c      	ite	eq
 8005168:	2301      	moveq	r3, #1
 800516a:	2300      	movne	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_I2C_Init+0x196>
 8005172:	2301      	movs	r3, #1
 8005174:	e022      	b.n	80051bc <HAL_I2C_Init+0x1dc>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10e      	bne.n	800519c <HAL_I2C_Init+0x1bc>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1e58      	subs	r0, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6859      	ldr	r1, [r3, #4]
 8005186:	460b      	mov	r3, r1
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	440b      	add	r3, r1
 800518c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005190:	3301      	adds	r3, #1
 8005192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519a:	e00f      	b.n	80051bc <HAL_I2C_Init+0x1dc>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1e58      	subs	r0, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6859      	ldr	r1, [r3, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	0099      	lsls	r1, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80051b2:	3301      	adds	r3, #1
 80051b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	6809      	ldr	r1, [r1, #0]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6911      	ldr	r1, [r2, #16]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68d2      	ldr	r2, [r2, #12]
 80051f6:	4311      	orrs	r1, r2
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695a      	ldr	r2, [r3, #20]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	000186a0 	.word	0x000186a0
 8005258:	001e847f 	.word	0x001e847f
 800525c:	003d08ff 	.word	0x003d08ff
 8005260:	431bde83 	.word	0x431bde83
 8005264:	10624dd3 	.word	0x10624dd3

08005268 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	4608      	mov	r0, r1
 8005272:	4611      	mov	r1, r2
 8005274:	461a      	mov	r2, r3
 8005276:	4603      	mov	r3, r0
 8005278:	817b      	strh	r3, [r7, #10]
 800527a:	460b      	mov	r3, r1
 800527c:	813b      	strh	r3, [r7, #8]
 800527e:	4613      	mov	r3, r2
 8005280:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005282:	f7fd fc43 	bl	8002b0c <HAL_GetTick>
 8005286:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b20      	cmp	r3, #32
 8005292:	f040 80d9 	bne.w	8005448 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	2319      	movs	r3, #25
 800529c:	2201      	movs	r2, #1
 800529e:	496d      	ldr	r1, [pc, #436]	; (8005454 <HAL_I2C_Mem_Write+0x1ec>)
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 fc7f 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052ac:	2302      	movs	r3, #2
 80052ae:	e0cc      	b.n	800544a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_I2C_Mem_Write+0x56>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e0c5      	b.n	800544a <HAL_I2C_Mem_Write+0x1e2>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d007      	beq.n	80052e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2221      	movs	r2, #33	; 0x21
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2240      	movs	r2, #64	; 0x40
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a3a      	ldr	r2, [r7, #32]
 800530e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005314:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a4d      	ldr	r2, [pc, #308]	; (8005458 <HAL_I2C_Mem_Write+0x1f0>)
 8005324:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005326:	88f8      	ldrh	r0, [r7, #6]
 8005328:	893a      	ldrh	r2, [r7, #8]
 800532a:	8979      	ldrh	r1, [r7, #10]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	9301      	str	r3, [sp, #4]
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	4603      	mov	r3, r0
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 fab6 	bl	80058a8 <I2C_RequestMemoryWrite>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d052      	beq.n	80053e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e081      	b.n	800544a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 fd00 	bl	8005d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00d      	beq.n	8005372 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2b04      	cmp	r3, #4
 800535c:	d107      	bne.n	800536e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e06b      	b.n	800544a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	781a      	ldrb	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d11b      	bne.n	80053e8 <HAL_I2C_Mem_Write+0x180>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d017      	beq.n	80053e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	781a      	ldrb	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1aa      	bne.n	8005346 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fcec 	bl	8005dd2 <I2C_WaitOnBTFFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00d      	beq.n	800541c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	2b04      	cmp	r3, #4
 8005406:	d107      	bne.n	8005418 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005416:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e016      	b.n	800544a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	e000      	b.n	800544a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005448:	2302      	movs	r3, #2
  }
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	00100002 	.word	0x00100002
 8005458:	ffff0000 	.word	0xffff0000

0800545c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08c      	sub	sp, #48	; 0x30
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	4608      	mov	r0, r1
 8005466:	4611      	mov	r1, r2
 8005468:	461a      	mov	r2, r3
 800546a:	4603      	mov	r3, r0
 800546c:	817b      	strh	r3, [r7, #10]
 800546e:	460b      	mov	r3, r1
 8005470:	813b      	strh	r3, [r7, #8]
 8005472:	4613      	mov	r3, r2
 8005474:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005476:	f7fd fb49 	bl	8002b0c <HAL_GetTick>
 800547a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b20      	cmp	r3, #32
 8005486:	f040 8208 	bne.w	800589a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	2319      	movs	r3, #25
 8005490:	2201      	movs	r2, #1
 8005492:	497b      	ldr	r1, [pc, #492]	; (8005680 <HAL_I2C_Mem_Read+0x224>)
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 fb85 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80054a0:	2302      	movs	r3, #2
 80054a2:	e1fb      	b.n	800589c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_I2C_Mem_Read+0x56>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e1f4      	b.n	800589c <HAL_I2C_Mem_Read+0x440>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d007      	beq.n	80054d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2222      	movs	r2, #34	; 0x22
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2240      	movs	r2, #64	; 0x40
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005502:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005508:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4a5b      	ldr	r2, [pc, #364]	; (8005684 <HAL_I2C_Mem_Read+0x228>)
 8005518:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800551a:	88f8      	ldrh	r0, [r7, #6]
 800551c:	893a      	ldrh	r2, [r7, #8]
 800551e:	8979      	ldrh	r1, [r7, #10]
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	9301      	str	r3, [sp, #4]
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	4603      	mov	r3, r0
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 fa52 	bl	80059d4 <I2C_RequestMemoryRead>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e1b0      	b.n	800589c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553e:	2b00      	cmp	r3, #0
 8005540:	d113      	bne.n	800556a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005542:	2300      	movs	r3, #0
 8005544:	623b      	str	r3, [r7, #32]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	623b      	str	r3, [r7, #32]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	623b      	str	r3, [r7, #32]
 8005556:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	e184      	b.n	8005874 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556e:	2b01      	cmp	r3, #1
 8005570:	d11b      	bne.n	80055aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005580:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	e164      	b.n	8005874 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d11b      	bne.n	80055ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d2:	2300      	movs	r3, #0
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	e144      	b.n	8005874 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005600:	e138      	b.n	8005874 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005606:	2b03      	cmp	r3, #3
 8005608:	f200 80f1 	bhi.w	80057ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005610:	2b01      	cmp	r3, #1
 8005612:	d123      	bne.n	800565c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005616:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 fc1b 	bl	8005e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e139      	b.n	800589c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b01      	subs	r3, #1
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	855a      	strh	r2, [r3, #42]	; 0x2a
 800565a:	e10b      	b.n	8005874 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005660:	2b02      	cmp	r3, #2
 8005662:	d14e      	bne.n	8005702 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	2200      	movs	r2, #0
 800566c:	4906      	ldr	r1, [pc, #24]	; (8005688 <HAL_I2C_Mem_Read+0x22c>)
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 fa98 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e10e      	b.n	800589c <HAL_I2C_Mem_Read+0x440>
 800567e:	bf00      	nop
 8005680:	00100002 	.word	0x00100002
 8005684:	ffff0000 	.word	0xffff0000
 8005688:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691a      	ldr	r2, [r3, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005700:	e0b8      	b.n	8005874 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	2200      	movs	r2, #0
 800570a:	4966      	ldr	r1, [pc, #408]	; (80058a4 <HAL_I2C_Mem_Read+0x448>)
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fa49 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0bf      	b.n	800589c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	2200      	movs	r2, #0
 8005766:	494f      	ldr	r1, [pc, #316]	; (80058a4 <HAL_I2C_Mem_Read+0x448>)
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fa1b 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e091      	b.n	800589c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057ec:	e042      	b.n	8005874 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fb2e 	bl	8005e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e04c      	b.n	800589c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b04      	cmp	r3, #4
 8005840:	d118      	bne.n	8005874 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005878:	2b00      	cmp	r3, #0
 800587a:	f47f aec2 	bne.w	8005602 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	e000      	b.n	800589c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800589a:	2302      	movs	r3, #2
  }
}
 800589c:	4618      	mov	r0, r3
 800589e:	3728      	adds	r7, #40	; 0x28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	00010004 	.word	0x00010004

080058a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	461a      	mov	r2, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	817b      	strh	r3, [r7, #10]
 80058ba:	460b      	mov	r3, r1
 80058bc:	813b      	strh	r3, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	2200      	movs	r2, #0
 80058da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f960 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00d      	beq.n	8005906 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f8:	d103      	bne.n	8005902 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005900:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e05f      	b.n	80059c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005906:	897b      	ldrh	r3, [r7, #10]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005914:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	6a3a      	ldr	r2, [r7, #32]
 800591a:	492d      	ldr	r1, [pc, #180]	; (80059d0 <I2C_RequestMemoryWrite+0x128>)
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f998 	bl	8005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e04c      	b.n	80059c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005944:	6a39      	ldr	r1, [r7, #32]
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 fa02 	bl	8005d50 <I2C_WaitOnTXEFlagUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00d      	beq.n	800596e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	2b04      	cmp	r3, #4
 8005958:	d107      	bne.n	800596a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005968:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e02b      	b.n	80059c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d105      	bne.n	8005980 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005974:	893b      	ldrh	r3, [r7, #8]
 8005976:	b2da      	uxtb	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	611a      	str	r2, [r3, #16]
 800597e:	e021      	b.n	80059c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005980:	893b      	ldrh	r3, [r7, #8]
 8005982:	0a1b      	lsrs	r3, r3, #8
 8005984:	b29b      	uxth	r3, r3
 8005986:	b2da      	uxtb	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800598e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005990:	6a39      	ldr	r1, [r7, #32]
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 f9dc 	bl	8005d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00d      	beq.n	80059ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d107      	bne.n	80059b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e005      	b.n	80059c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ba:	893b      	ldrh	r3, [r7, #8]
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	00010002 	.word	0x00010002

080059d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af02      	add	r7, sp, #8
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	4608      	mov	r0, r1
 80059de:	4611      	mov	r1, r2
 80059e0:	461a      	mov	r2, r3
 80059e2:	4603      	mov	r3, r0
 80059e4:	817b      	strh	r3, [r7, #10]
 80059e6:	460b      	mov	r3, r1
 80059e8:	813b      	strh	r3, [r7, #8]
 80059ea:	4613      	mov	r3, r2
 80059ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f8c2 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00d      	beq.n	8005a42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a34:	d103      	bne.n	8005a3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e0aa      	b.n	8005b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a42:	897b      	ldrh	r3, [r7, #10]
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	6a3a      	ldr	r2, [r7, #32]
 8005a56:	4952      	ldr	r1, [pc, #328]	; (8005ba0 <I2C_RequestMemoryRead+0x1cc>)
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f8fa 	bl	8005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e097      	b.n	8005b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a80:	6a39      	ldr	r1, [r7, #32]
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 f964 	bl	8005d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00d      	beq.n	8005aaa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d107      	bne.n	8005aa6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e076      	b.n	8005b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d105      	bne.n	8005abc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ab0:	893b      	ldrh	r3, [r7, #8]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	611a      	str	r2, [r3, #16]
 8005aba:	e021      	b.n	8005b00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005abc:	893b      	ldrh	r3, [r7, #8]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005acc:	6a39      	ldr	r1, [r7, #32]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 f93e 	bl	8005d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00d      	beq.n	8005af6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d107      	bne.n	8005af2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005af0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e050      	b.n	8005b98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005af6:	893b      	ldrh	r3, [r7, #8]
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b02:	6a39      	ldr	r1, [r7, #32]
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f923 	bl	8005d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00d      	beq.n	8005b2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d107      	bne.n	8005b28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e035      	b.n	8005b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f82b 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00d      	beq.n	8005b70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b62:	d103      	bne.n	8005b6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e013      	b.n	8005b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b70:	897b      	ldrh	r3, [r7, #10]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	6a3a      	ldr	r2, [r7, #32]
 8005b84:	4906      	ldr	r1, [pc, #24]	; (8005ba0 <I2C_RequestMemoryRead+0x1cc>)
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f863 	bl	8005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	00010002 	.word	0x00010002

08005ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bb4:	e025      	b.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d021      	beq.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bbe:	f7fc ffa5 	bl	8002b0c <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d302      	bcc.n	8005bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d116      	bne.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	f043 0220 	orr.w	r2, r3, #32
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e023      	b.n	8005c4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	0c1b      	lsrs	r3, r3, #16
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d10d      	bne.n	8005c28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	43da      	mvns	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4013      	ands	r3, r2
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	bf0c      	ite	eq
 8005c1e:	2301      	moveq	r3, #1
 8005c20:	2300      	movne	r3, #0
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	e00c      	b.n	8005c42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	43da      	mvns	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4013      	ands	r3, r2
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bf0c      	ite	eq
 8005c3a:	2301      	moveq	r3, #1
 8005c3c:	2300      	movne	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d0b6      	beq.n	8005bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b084      	sub	sp, #16
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	60f8      	str	r0, [r7, #12]
 8005c5a:	60b9      	str	r1, [r7, #8]
 8005c5c:	607a      	str	r2, [r7, #4]
 8005c5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c60:	e051      	b.n	8005d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c70:	d123      	bne.n	8005cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	f043 0204 	orr.w	r2, r3, #4
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e046      	b.n	8005d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d021      	beq.n	8005d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc2:	f7fc ff23 	bl	8002b0c <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d302      	bcc.n	8005cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d116      	bne.n	8005d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	f043 0220 	orr.w	r2, r3, #32
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e020      	b.n	8005d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	0c1b      	lsrs	r3, r3, #16
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d10c      	bne.n	8005d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	43da      	mvns	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bf14      	ite	ne
 8005d22:	2301      	movne	r3, #1
 8005d24:	2300      	moveq	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	e00b      	b.n	8005d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	43da      	mvns	r2, r3
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	4013      	ands	r3, r2
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bf14      	ite	ne
 8005d3c:	2301      	movne	r3, #1
 8005d3e:	2300      	moveq	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d18d      	bne.n	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d5c:	e02d      	b.n	8005dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f8ce 	bl	8005f00 <I2C_IsAcknowledgeFailed>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e02d      	b.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d021      	beq.n	8005dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d76:	f7fc fec9 	bl	8002b0c <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d302      	bcc.n	8005d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d116      	bne.n	8005dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f043 0220 	orr.w	r2, r3, #32
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e007      	b.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc4:	2b80      	cmp	r3, #128	; 0x80
 8005dc6:	d1ca      	bne.n	8005d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dde:	e02d      	b.n	8005e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 f88d 	bl	8005f00 <I2C_IsAcknowledgeFailed>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e02d      	b.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d021      	beq.n	8005e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df8:	f7fc fe88 	bl	8002b0c <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d302      	bcc.n	8005e0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d116      	bne.n	8005e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	f043 0220 	orr.w	r2, r3, #32
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e007      	b.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d1ca      	bne.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e60:	e042      	b.n	8005ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	2b10      	cmp	r3, #16
 8005e6e:	d119      	bne.n	8005ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0210 	mvn.w	r2, #16
 8005e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e029      	b.n	8005ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea4:	f7fc fe32 	bl	8002b0c <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d302      	bcc.n	8005eba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d116      	bne.n	8005ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	f043 0220 	orr.w	r2, r3, #32
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e007      	b.n	8005ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b40      	cmp	r3, #64	; 0x40
 8005ef4:	d1b5      	bne.n	8005e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f16:	d11b      	bne.n	8005f50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	f043 0204 	orr.w	r2, r3, #4
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d129      	bne.n	8005fc8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2224      	movs	r2, #36	; 0x24
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0201 	bic.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0210 	bic.w	r2, r2, #16
 8005f9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0201 	orr.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	e000      	b.n	8005fca <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005fc8:	2302      	movs	r3, #2
  }
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b085      	sub	sp, #20
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	d12a      	bne.n	8006046 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2224      	movs	r2, #36	; 0x24
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0201 	bic.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006010:	89fb      	ldrh	r3, [r7, #14]
 8006012:	f023 030f 	bic.w	r3, r3, #15
 8006016:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	b29a      	uxth	r2, r3
 800601c:	89fb      	ldrh	r3, [r7, #14]
 800601e:	4313      	orrs	r3, r2
 8006020:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	89fa      	ldrh	r2, [r7, #14]
 8006028:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 0201 	orr.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	e000      	b.n	8006048 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006046:	2302      	movs	r3, #2
  }
}
 8006048:	4618      	mov	r0, r3
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e0bf      	b.n	80061e6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d106      	bne.n	8006080 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fc f8f8 	bl	8002270 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006096:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6999      	ldr	r1, [r3, #24]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060ac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6899      	ldr	r1, [r3, #8]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	4b4a      	ldr	r3, [pc, #296]	; (80061f0 <HAL_LTDC_Init+0x19c>)
 80060c8:	400b      	ands	r3, r1
 80060ca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	041b      	lsls	r3, r3, #16
 80060d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6899      	ldr	r1, [r3, #8]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68d9      	ldr	r1, [r3, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	4b3e      	ldr	r3, [pc, #248]	; (80061f0 <HAL_LTDC_Init+0x19c>)
 80060f6:	400b      	ands	r3, r1
 80060f8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	041b      	lsls	r3, r3, #16
 8006100:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68d9      	ldr	r1, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1a      	ldr	r2, [r3, #32]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6919      	ldr	r1, [r3, #16]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b33      	ldr	r3, [pc, #204]	; (80061f0 <HAL_LTDC_Init+0x19c>)
 8006124:	400b      	ands	r3, r1
 8006126:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	041b      	lsls	r3, r3, #16
 800612e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6919      	ldr	r1, [r3, #16]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	431a      	orrs	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6959      	ldr	r1, [r3, #20]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	4b27      	ldr	r3, [pc, #156]	; (80061f0 <HAL_LTDC_Init+0x19c>)
 8006152:	400b      	ands	r3, r1
 8006154:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	041b      	lsls	r3, r3, #16
 800615c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6959      	ldr	r1, [r3, #20]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006184:	041b      	lsls	r3, r3, #16
 8006186:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006196:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0206 	orr.w	r2, r2, #6
 80061c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0201 	orr.w	r2, r2, #1
 80061d2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	f000f800 	.word	0xf000f800

080061f4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d023      	beq.n	800625e <HAL_LTDC_IRQHandler+0x6a>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01e      	beq.n	800625e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0204 	bic.w	r2, r2, #4
 800622e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2204      	movs	r2, #4
 8006236:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800623e:	f043 0201 	orr.w	r2, r3, #1
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2204      	movs	r2, #4
 800624c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f86f 	bl	800633c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d023      	beq.n	80062b0 <HAL_LTDC_IRQHandler+0xbc>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01e      	beq.n	80062b0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0202 	bic.w	r2, r2, #2
 8006280:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2202      	movs	r2, #2
 8006288:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006290:	f043 0202 	orr.w	r2, r3, #2
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2204      	movs	r2, #4
 800629e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f846 	bl	800633c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d01b      	beq.n	80062f2 <HAL_LTDC_IRQHandler+0xfe>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d016      	beq.n	80062f2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0201 	bic.w	r2, r2, #1
 80062d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2201      	movs	r2, #1
 80062da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f82f 	bl	8006350 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f003 0308 	and.w	r3, r3, #8
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01b      	beq.n	8006334 <HAL_LTDC_IRQHandler+0x140>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d016      	beq.n	8006334 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0208 	bic.w	r2, r2, #8
 8006314:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2208      	movs	r2, #8
 800631c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f818 	bl	8006364 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006334:	bf00      	nop
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006378:	b5b0      	push	{r4, r5, r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800638a:	2b01      	cmp	r3, #1
 800638c:	d101      	bne.n	8006392 <HAL_LTDC_ConfigLayer+0x1a>
 800638e:	2302      	movs	r3, #2
 8006390:	e02c      	b.n	80063ec <HAL_LTDC_ConfigLayer+0x74>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2202      	movs	r2, #2
 800639e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2134      	movs	r1, #52	; 0x34
 80063a8:	fb01 f303 	mul.w	r3, r1, r3
 80063ac:	4413      	add	r3, r2
 80063ae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	4614      	mov	r4, r2
 80063b6:	461d      	mov	r5, r3
 80063b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	68b9      	ldr	r1, [r7, #8]
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f811 	bl	80063f4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2201      	movs	r2, #1
 80063d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bdb0      	pop	{r4, r5, r7, pc}

080063f4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b089      	sub	sp, #36	; 0x24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	0c1b      	lsrs	r3, r3, #16
 800640c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006410:	4413      	add	r3, r2
 8006412:	041b      	lsls	r3, r3, #16
 8006414:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	01db      	lsls	r3, r3, #7
 8006420:	4413      	add	r3, r2
 8006422:	3384      	adds	r3, #132	; 0x84
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	6812      	ldr	r2, [r2, #0]
 800642a:	4611      	mov	r1, r2
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	01d2      	lsls	r2, r2, #7
 8006430:	440a      	add	r2, r1
 8006432:	3284      	adds	r2, #132	; 0x84
 8006434:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006438:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	0c1b      	lsrs	r3, r3, #16
 8006446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800644a:	4413      	add	r3, r2
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4619      	mov	r1, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	01db      	lsls	r3, r3, #7
 8006458:	440b      	add	r3, r1
 800645a:	3384      	adds	r3, #132	; 0x84
 800645c:	4619      	mov	r1, r3
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	4313      	orrs	r3, r2
 8006462:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006472:	4413      	add	r3, r2
 8006474:	041b      	lsls	r3, r3, #16
 8006476:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	01db      	lsls	r3, r3, #7
 8006482:	4413      	add	r3, r2
 8006484:	3384      	adds	r3, #132	; 0x84
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	6812      	ldr	r2, [r2, #0]
 800648c:	4611      	mov	r1, r2
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	01d2      	lsls	r2, r2, #7
 8006492:	440a      	add	r2, r1
 8006494:	3284      	adds	r2, #132	; 0x84
 8006496:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800649a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064aa:	4413      	add	r3, r2
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4619      	mov	r1, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	01db      	lsls	r3, r3, #7
 80064b8:	440b      	add	r3, r1
 80064ba:	3384      	adds	r3, #132	; 0x84
 80064bc:	4619      	mov	r1, r3
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	01db      	lsls	r3, r3, #7
 80064ce:	4413      	add	r3, r2
 80064d0:	3384      	adds	r3, #132	; 0x84
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	4611      	mov	r1, r2
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	01d2      	lsls	r2, r2, #7
 80064de:	440a      	add	r2, r1
 80064e0:	3284      	adds	r2, #132	; 0x84
 80064e2:	f023 0307 	bic.w	r3, r3, #7
 80064e6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	461a      	mov	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	01db      	lsls	r3, r3, #7
 80064f2:	4413      	add	r3, r2
 80064f4:	3384      	adds	r3, #132	; 0x84
 80064f6:	461a      	mov	r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800650e:	041b      	lsls	r3, r3, #16
 8006510:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	061b      	lsls	r3, r3, #24
 8006518:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	01db      	lsls	r3, r3, #7
 8006524:	4413      	add	r3, r2
 8006526:	3384      	adds	r3, #132	; 0x84
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	01db      	lsls	r3, r3, #7
 8006534:	4413      	add	r3, r2
 8006536:	3384      	adds	r3, #132	; 0x84
 8006538:	461a      	mov	r2, r3
 800653a:	2300      	movs	r3, #0
 800653c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006544:	461a      	mov	r2, r3
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	431a      	orrs	r2, r3
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	431a      	orrs	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4619      	mov	r1, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	01db      	lsls	r3, r3, #7
 8006558:	440b      	add	r3, r1
 800655a:	3384      	adds	r3, #132	; 0x84
 800655c:	4619      	mov	r1, r3
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	01db      	lsls	r3, r3, #7
 800656e:	4413      	add	r3, r2
 8006570:	3384      	adds	r3, #132	; 0x84
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	6812      	ldr	r2, [r2, #0]
 8006578:	4611      	mov	r1, r2
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	01d2      	lsls	r2, r2, #7
 800657e:	440a      	add	r2, r1
 8006580:	3284      	adds	r2, #132	; 0x84
 8006582:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006586:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	01db      	lsls	r3, r3, #7
 8006592:	4413      	add	r3, r2
 8006594:	3384      	adds	r3, #132	; 0x84
 8006596:	461a      	mov	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	01db      	lsls	r3, r3, #7
 80065a8:	4413      	add	r3, r2
 80065aa:	3384      	adds	r3, #132	; 0x84
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	6812      	ldr	r2, [r2, #0]
 80065b2:	4611      	mov	r1, r2
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	01d2      	lsls	r2, r2, #7
 80065b8:	440a      	add	r2, r1
 80065ba:	3284      	adds	r2, #132	; 0x84
 80065bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80065c0:	f023 0307 	bic.w	r3, r3, #7
 80065c4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	69da      	ldr	r2, [r3, #28]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	68f9      	ldr	r1, [r7, #12]
 80065d0:	6809      	ldr	r1, [r1, #0]
 80065d2:	4608      	mov	r0, r1
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	01c9      	lsls	r1, r1, #7
 80065d8:	4401      	add	r1, r0
 80065da:	3184      	adds	r1, #132	; 0x84
 80065dc:	4313      	orrs	r3, r2
 80065de:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	461a      	mov	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	01db      	lsls	r3, r3, #7
 80065ea:	4413      	add	r3, r2
 80065ec:	3384      	adds	r3, #132	; 0x84
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	01db      	lsls	r3, r3, #7
 80065fa:	4413      	add	r3, r2
 80065fc:	3384      	adds	r3, #132	; 0x84
 80065fe:	461a      	mov	r2, r3
 8006600:	2300      	movs	r3, #0
 8006602:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	01db      	lsls	r3, r3, #7
 800660e:	4413      	add	r3, r2
 8006610:	3384      	adds	r3, #132	; 0x84
 8006612:	461a      	mov	r2, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d102      	bne.n	8006628 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006622:	2304      	movs	r3, #4
 8006624:	61fb      	str	r3, [r7, #28]
 8006626:	e01b      	b.n	8006660 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d102      	bne.n	8006636 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006630:	2303      	movs	r3, #3
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	e014      	b.n	8006660 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b04      	cmp	r3, #4
 800663c:	d00b      	beq.n	8006656 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006642:	2b02      	cmp	r3, #2
 8006644:	d007      	beq.n	8006656 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800664a:	2b03      	cmp	r3, #3
 800664c:	d003      	beq.n	8006656 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006652:	2b07      	cmp	r3, #7
 8006654:	d102      	bne.n	800665c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006656:	2302      	movs	r3, #2
 8006658:	61fb      	str	r3, [r7, #28]
 800665a:	e001      	b.n	8006660 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800665c:	2301      	movs	r3, #1
 800665e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	01db      	lsls	r3, r3, #7
 800666a:	4413      	add	r3, r2
 800666c:	3384      	adds	r3, #132	; 0x84
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	4611      	mov	r1, r2
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	01d2      	lsls	r2, r2, #7
 800667a:	440a      	add	r2, r1
 800667c:	3284      	adds	r2, #132	; 0x84
 800667e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006682:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	69fa      	ldr	r2, [r7, #28]
 800668a:	fb02 f303 	mul.w	r3, r2, r3
 800668e:	041a      	lsls	r2, r3, #16
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6859      	ldr	r1, [r3, #4]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	1acb      	subs	r3, r1, r3
 800669a:	69f9      	ldr	r1, [r7, #28]
 800669c:	fb01 f303 	mul.w	r3, r1, r3
 80066a0:	3303      	adds	r3, #3
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	6809      	ldr	r1, [r1, #0]
 80066a6:	4608      	mov	r0, r1
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	01c9      	lsls	r1, r1, #7
 80066ac:	4401      	add	r1, r0
 80066ae:	3184      	adds	r1, #132	; 0x84
 80066b0:	4313      	orrs	r3, r2
 80066b2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	461a      	mov	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	01db      	lsls	r3, r3, #7
 80066be:	4413      	add	r3, r2
 80066c0:	3384      	adds	r3, #132	; 0x84
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	6812      	ldr	r2, [r2, #0]
 80066c8:	4611      	mov	r1, r2
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	01d2      	lsls	r2, r2, #7
 80066ce:	440a      	add	r2, r1
 80066d0:	3284      	adds	r2, #132	; 0x84
 80066d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066d6:	f023 0307 	bic.w	r3, r3, #7
 80066da:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	01db      	lsls	r3, r3, #7
 80066e6:	4413      	add	r3, r2
 80066e8:	3384      	adds	r3, #132	; 0x84
 80066ea:	461a      	mov	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	461a      	mov	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	01db      	lsls	r3, r3, #7
 80066fc:	4413      	add	r3, r2
 80066fe:	3384      	adds	r3, #132	; 0x84
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	6812      	ldr	r2, [r2, #0]
 8006706:	4611      	mov	r1, r2
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	01d2      	lsls	r2, r2, #7
 800670c:	440a      	add	r2, r1
 800670e:	3284      	adds	r2, #132	; 0x84
 8006710:	f043 0301 	orr.w	r3, r3, #1
 8006714:	6013      	str	r3, [r2, #0]
}
 8006716:	bf00      	nop
 8006718:	3724      	adds	r7, #36	; 0x24
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
	...

08006724 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e264      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d075      	beq.n	800682e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006742:	4ba3      	ldr	r3, [pc, #652]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 030c 	and.w	r3, r3, #12
 800674a:	2b04      	cmp	r3, #4
 800674c:	d00c      	beq.n	8006768 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800674e:	4ba0      	ldr	r3, [pc, #640]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006756:	2b08      	cmp	r3, #8
 8006758:	d112      	bne.n	8006780 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800675a:	4b9d      	ldr	r3, [pc, #628]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006766:	d10b      	bne.n	8006780 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006768:	4b99      	ldr	r3, [pc, #612]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d05b      	beq.n	800682c <HAL_RCC_OscConfig+0x108>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d157      	bne.n	800682c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e23f      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006788:	d106      	bne.n	8006798 <HAL_RCC_OscConfig+0x74>
 800678a:	4b91      	ldr	r3, [pc, #580]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a90      	ldr	r2, [pc, #576]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	e01d      	b.n	80067d4 <HAL_RCC_OscConfig+0xb0>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067a0:	d10c      	bne.n	80067bc <HAL_RCC_OscConfig+0x98>
 80067a2:	4b8b      	ldr	r3, [pc, #556]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a8a      	ldr	r2, [pc, #552]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	4b88      	ldr	r3, [pc, #544]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a87      	ldr	r2, [pc, #540]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	e00b      	b.n	80067d4 <HAL_RCC_OscConfig+0xb0>
 80067bc:	4b84      	ldr	r3, [pc, #528]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a83      	ldr	r2, [pc, #524]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	4b81      	ldr	r3, [pc, #516]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a80      	ldr	r2, [pc, #512]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d013      	beq.n	8006804 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067dc:	f7fc f996 	bl	8002b0c <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067e4:	f7fc f992 	bl	8002b0c <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b64      	cmp	r3, #100	; 0x64
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e204      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f6:	4b76      	ldr	r3, [pc, #472]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0f0      	beq.n	80067e4 <HAL_RCC_OscConfig+0xc0>
 8006802:	e014      	b.n	800682e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006804:	f7fc f982 	bl	8002b0c <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800680c:	f7fc f97e 	bl	8002b0c <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b64      	cmp	r3, #100	; 0x64
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e1f0      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800681e:	4b6c      	ldr	r3, [pc, #432]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f0      	bne.n	800680c <HAL_RCC_OscConfig+0xe8>
 800682a:	e000      	b.n	800682e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800682c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d063      	beq.n	8006902 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800683a:	4b65      	ldr	r3, [pc, #404]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 030c 	and.w	r3, r3, #12
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006846:	4b62      	ldr	r3, [pc, #392]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800684e:	2b08      	cmp	r3, #8
 8006850:	d11c      	bne.n	800688c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006852:	4b5f      	ldr	r3, [pc, #380]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d116      	bne.n	800688c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800685e:	4b5c      	ldr	r3, [pc, #368]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <HAL_RCC_OscConfig+0x152>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d001      	beq.n	8006876 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e1c4      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006876:	4b56      	ldr	r3, [pc, #344]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	4952      	ldr	r1, [pc, #328]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006886:	4313      	orrs	r3, r2
 8006888:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800688a:	e03a      	b.n	8006902 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d020      	beq.n	80068d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006894:	4b4f      	ldr	r3, [pc, #316]	; (80069d4 <HAL_RCC_OscConfig+0x2b0>)
 8006896:	2201      	movs	r2, #1
 8006898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689a:	f7fc f937 	bl	8002b0c <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068a2:	f7fc f933 	bl	8002b0c <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e1a5      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b4:	4b46      	ldr	r3, [pc, #280]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c0:	4b43      	ldr	r3, [pc, #268]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	4940      	ldr	r1, [pc, #256]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	600b      	str	r3, [r1, #0]
 80068d4:	e015      	b.n	8006902 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068d6:	4b3f      	ldr	r3, [pc, #252]	; (80069d4 <HAL_RCC_OscConfig+0x2b0>)
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068dc:	f7fc f916 	bl	8002b0c <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068e4:	f7fc f912 	bl	8002b0c <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e184      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068f6:	4b36      	ldr	r3, [pc, #216]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1f0      	bne.n	80068e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0308 	and.w	r3, r3, #8
 800690a:	2b00      	cmp	r3, #0
 800690c:	d030      	beq.n	8006970 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d016      	beq.n	8006944 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006916:	4b30      	ldr	r3, [pc, #192]	; (80069d8 <HAL_RCC_OscConfig+0x2b4>)
 8006918:	2201      	movs	r2, #1
 800691a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800691c:	f7fc f8f6 	bl	8002b0c <HAL_GetTick>
 8006920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006924:	f7fc f8f2 	bl	8002b0c <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e164      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006936:	4b26      	ldr	r3, [pc, #152]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0f0      	beq.n	8006924 <HAL_RCC_OscConfig+0x200>
 8006942:	e015      	b.n	8006970 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006944:	4b24      	ldr	r3, [pc, #144]	; (80069d8 <HAL_RCC_OscConfig+0x2b4>)
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800694a:	f7fc f8df 	bl	8002b0c <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006952:	f7fc f8db 	bl	8002b0c <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e14d      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006964:	4b1a      	ldr	r3, [pc, #104]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1f0      	bne.n	8006952 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 80a0 	beq.w	8006abe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800697e:	2300      	movs	r3, #0
 8006980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006982:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10f      	bne.n	80069ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]
 8006992:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	4a0e      	ldr	r2, [pc, #56]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 8006998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800699c:	6413      	str	r3, [r2, #64]	; 0x40
 800699e:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <HAL_RCC_OscConfig+0x2ac>)
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069a6:	60bb      	str	r3, [r7, #8]
 80069a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069aa:	2301      	movs	r3, #1
 80069ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ae:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <HAL_RCC_OscConfig+0x2b8>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d121      	bne.n	80069fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ba:	4b08      	ldr	r3, [pc, #32]	; (80069dc <HAL_RCC_OscConfig+0x2b8>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a07      	ldr	r2, [pc, #28]	; (80069dc <HAL_RCC_OscConfig+0x2b8>)
 80069c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069c6:	f7fc f8a1 	bl	8002b0c <HAL_GetTick>
 80069ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069cc:	e011      	b.n	80069f2 <HAL_RCC_OscConfig+0x2ce>
 80069ce:	bf00      	nop
 80069d0:	40023800 	.word	0x40023800
 80069d4:	42470000 	.word	0x42470000
 80069d8:	42470e80 	.word	0x42470e80
 80069dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069e0:	f7fc f894 	bl	8002b0c <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e106      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f2:	4b85      	ldr	r3, [pc, #532]	; (8006c08 <HAL_RCC_OscConfig+0x4e4>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f0      	beq.n	80069e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d106      	bne.n	8006a14 <HAL_RCC_OscConfig+0x2f0>
 8006a06:	4b81      	ldr	r3, [pc, #516]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	4a80      	ldr	r2, [pc, #512]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a0c:	f043 0301 	orr.w	r3, r3, #1
 8006a10:	6713      	str	r3, [r2, #112]	; 0x70
 8006a12:	e01c      	b.n	8006a4e <HAL_RCC_OscConfig+0x32a>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	2b05      	cmp	r3, #5
 8006a1a:	d10c      	bne.n	8006a36 <HAL_RCC_OscConfig+0x312>
 8006a1c:	4b7b      	ldr	r3, [pc, #492]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a20:	4a7a      	ldr	r2, [pc, #488]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a22:	f043 0304 	orr.w	r3, r3, #4
 8006a26:	6713      	str	r3, [r2, #112]	; 0x70
 8006a28:	4b78      	ldr	r3, [pc, #480]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2c:	4a77      	ldr	r2, [pc, #476]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	6713      	str	r3, [r2, #112]	; 0x70
 8006a34:	e00b      	b.n	8006a4e <HAL_RCC_OscConfig+0x32a>
 8006a36:	4b75      	ldr	r3, [pc, #468]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3a:	4a74      	ldr	r2, [pc, #464]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a3c:	f023 0301 	bic.w	r3, r3, #1
 8006a40:	6713      	str	r3, [r2, #112]	; 0x70
 8006a42:	4b72      	ldr	r3, [pc, #456]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a46:	4a71      	ldr	r2, [pc, #452]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a48:	f023 0304 	bic.w	r3, r3, #4
 8006a4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d015      	beq.n	8006a82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a56:	f7fc f859 	bl	8002b0c <HAL_GetTick>
 8006a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a5c:	e00a      	b.n	8006a74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a5e:	f7fc f855 	bl	8002b0c <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d901      	bls.n	8006a74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e0c5      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a74:	4b65      	ldr	r3, [pc, #404]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0ee      	beq.n	8006a5e <HAL_RCC_OscConfig+0x33a>
 8006a80:	e014      	b.n	8006aac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a82:	f7fc f843 	bl	8002b0c <HAL_GetTick>
 8006a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a88:	e00a      	b.n	8006aa0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a8a:	f7fc f83f 	bl	8002b0c <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e0af      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aa0:	4b5a      	ldr	r3, [pc, #360]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1ee      	bne.n	8006a8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d105      	bne.n	8006abe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ab2:	4b56      	ldr	r3, [pc, #344]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	4a55      	ldr	r2, [pc, #340]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006abc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 809b 	beq.w	8006bfe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ac8:	4b50      	ldr	r3, [pc, #320]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 030c 	and.w	r3, r3, #12
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d05c      	beq.n	8006b8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d141      	bne.n	8006b60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006adc:	4b4c      	ldr	r3, [pc, #304]	; (8006c10 <HAL_RCC_OscConfig+0x4ec>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae2:	f7fc f813 	bl	8002b0c <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae8:	e008      	b.n	8006afc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aea:	f7fc f80f 	bl	8002b0c <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e081      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006afc:	4b43      	ldr	r3, [pc, #268]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1f0      	bne.n	8006aea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	69da      	ldr	r2, [r3, #28]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	431a      	orrs	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	019b      	lsls	r3, r3, #6
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1e:	085b      	lsrs	r3, r3, #1
 8006b20:	3b01      	subs	r3, #1
 8006b22:	041b      	lsls	r3, r3, #16
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	061b      	lsls	r3, r3, #24
 8006b2c:	4937      	ldr	r1, [pc, #220]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b32:	4b37      	ldr	r3, [pc, #220]	; (8006c10 <HAL_RCC_OscConfig+0x4ec>)
 8006b34:	2201      	movs	r2, #1
 8006b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b38:	f7fb ffe8 	bl	8002b0c <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b40:	f7fb ffe4 	bl	8002b0c <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e056      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b52:	4b2e      	ldr	r3, [pc, #184]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0f0      	beq.n	8006b40 <HAL_RCC_OscConfig+0x41c>
 8006b5e:	e04e      	b.n	8006bfe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b60:	4b2b      	ldr	r3, [pc, #172]	; (8006c10 <HAL_RCC_OscConfig+0x4ec>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b66:	f7fb ffd1 	bl	8002b0c <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b6e:	f7fb ffcd 	bl	8002b0c <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e03f      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b80:	4b22      	ldr	r3, [pc, #136]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f0      	bne.n	8006b6e <HAL_RCC_OscConfig+0x44a>
 8006b8c:	e037      	b.n	8006bfe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e032      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b9a:	4b1c      	ldr	r3, [pc, #112]	; (8006c0c <HAL_RCC_OscConfig+0x4e8>)
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d028      	beq.n	8006bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d121      	bne.n	8006bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d11a      	bne.n	8006bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bca:	4013      	ands	r3, r2
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bd0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d111      	bne.n	8006bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	3b01      	subs	r3, #1
 8006be4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d107      	bne.n	8006bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d001      	beq.n	8006bfe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e000      	b.n	8006c00 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3718      	adds	r7, #24
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	40007000 	.word	0x40007000
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	42470060 	.word	0x42470060

08006c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e0cc      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c28:	4b68      	ldr	r3, [pc, #416]	; (8006dcc <HAL_RCC_ClockConfig+0x1b8>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 030f 	and.w	r3, r3, #15
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d90c      	bls.n	8006c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c36:	4b65      	ldr	r3, [pc, #404]	; (8006dcc <HAL_RCC_ClockConfig+0x1b8>)
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c3e:	4b63      	ldr	r3, [pc, #396]	; (8006dcc <HAL_RCC_ClockConfig+0x1b8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 030f 	and.w	r3, r3, #15
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d001      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e0b8      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d020      	beq.n	8006c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c68:	4b59      	ldr	r3, [pc, #356]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	4a58      	ldr	r2, [pc, #352]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c80:	4b53      	ldr	r3, [pc, #332]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	4a52      	ldr	r2, [pc, #328]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c8c:	4b50      	ldr	r3, [pc, #320]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	494d      	ldr	r1, [pc, #308]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d044      	beq.n	8006d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d107      	bne.n	8006cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cb2:	4b47      	ldr	r3, [pc, #284]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d119      	bne.n	8006cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e07f      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d003      	beq.n	8006cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d107      	bne.n	8006ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cd2:	4b3f      	ldr	r3, [pc, #252]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d109      	bne.n	8006cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e06f      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ce2:	4b3b      	ldr	r3, [pc, #236]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e067      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cf2:	4b37      	ldr	r3, [pc, #220]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f023 0203 	bic.w	r2, r3, #3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	4934      	ldr	r1, [pc, #208]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d04:	f7fb ff02 	bl	8002b0c <HAL_GetTick>
 8006d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d0a:	e00a      	b.n	8006d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d0c:	f7fb fefe 	bl	8002b0c <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e04f      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d22:	4b2b      	ldr	r3, [pc, #172]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 020c 	and.w	r2, r3, #12
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d1eb      	bne.n	8006d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d34:	4b25      	ldr	r3, [pc, #148]	; (8006dcc <HAL_RCC_ClockConfig+0x1b8>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d20c      	bcs.n	8006d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d42:	4b22      	ldr	r3, [pc, #136]	; (8006dcc <HAL_RCC_ClockConfig+0x1b8>)
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4a:	4b20      	ldr	r3, [pc, #128]	; (8006dcc <HAL_RCC_ClockConfig+0x1b8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d001      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e032      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d68:	4b19      	ldr	r3, [pc, #100]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	4916      	ldr	r1, [pc, #88]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0308 	and.w	r3, r3, #8
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d009      	beq.n	8006d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d86:	4b12      	ldr	r3, [pc, #72]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	490e      	ldr	r1, [pc, #56]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d9a:	f000 f821 	bl	8006de0 <HAL_RCC_GetSysClockFreq>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	091b      	lsrs	r3, r3, #4
 8006da6:	f003 030f 	and.w	r3, r3, #15
 8006daa:	490a      	ldr	r1, [pc, #40]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8006dac:	5ccb      	ldrb	r3, [r1, r3]
 8006dae:	fa22 f303 	lsr.w	r3, r2, r3
 8006db2:	4a09      	ldr	r2, [pc, #36]	; (8006dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8006db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006db6:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <HAL_RCC_ClockConfig+0x1c8>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fb fcd6 	bl	800276c <HAL_InitTick>

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	40023c00 	.word	0x40023c00
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	08012ccc 	.word	0x08012ccc
 8006dd8:	20000010 	.word	0x20000010
 8006ddc:	20000014 	.word	0x20000014

08006de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006de0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	607b      	str	r3, [r7, #4]
 8006dec:	2300      	movs	r3, #0
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	2300      	movs	r3, #0
 8006df2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006df8:	4b67      	ldr	r3, [pc, #412]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f003 030c 	and.w	r3, r3, #12
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d00d      	beq.n	8006e20 <HAL_RCC_GetSysClockFreq+0x40>
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	f200 80bd 	bhi.w	8006f84 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <HAL_RCC_GetSysClockFreq+0x34>
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d003      	beq.n	8006e1a <HAL_RCC_GetSysClockFreq+0x3a>
 8006e12:	e0b7      	b.n	8006f84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e14:	4b61      	ldr	r3, [pc, #388]	; (8006f9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e16:	60bb      	str	r3, [r7, #8]
       break;
 8006e18:	e0b7      	b.n	8006f8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e1a:	4b61      	ldr	r3, [pc, #388]	; (8006fa0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006e1c:	60bb      	str	r3, [r7, #8]
      break;
 8006e1e:	e0b4      	b.n	8006f8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e20:	4b5d      	ldr	r3, [pc, #372]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e2a:	4b5b      	ldr	r3, [pc, #364]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d04d      	beq.n	8006ed2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e36:	4b58      	ldr	r3, [pc, #352]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	099b      	lsrs	r3, r3, #6
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f04f 0300 	mov.w	r3, #0
 8006e42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e46:	f04f 0100 	mov.w	r1, #0
 8006e4a:	ea02 0800 	and.w	r8, r2, r0
 8006e4e:	ea03 0901 	and.w	r9, r3, r1
 8006e52:	4640      	mov	r0, r8
 8006e54:	4649      	mov	r1, r9
 8006e56:	f04f 0200 	mov.w	r2, #0
 8006e5a:	f04f 0300 	mov.w	r3, #0
 8006e5e:	014b      	lsls	r3, r1, #5
 8006e60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e64:	0142      	lsls	r2, r0, #5
 8006e66:	4610      	mov	r0, r2
 8006e68:	4619      	mov	r1, r3
 8006e6a:	ebb0 0008 	subs.w	r0, r0, r8
 8006e6e:	eb61 0109 	sbc.w	r1, r1, r9
 8006e72:	f04f 0200 	mov.w	r2, #0
 8006e76:	f04f 0300 	mov.w	r3, #0
 8006e7a:	018b      	lsls	r3, r1, #6
 8006e7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e80:	0182      	lsls	r2, r0, #6
 8006e82:	1a12      	subs	r2, r2, r0
 8006e84:	eb63 0301 	sbc.w	r3, r3, r1
 8006e88:	f04f 0000 	mov.w	r0, #0
 8006e8c:	f04f 0100 	mov.w	r1, #0
 8006e90:	00d9      	lsls	r1, r3, #3
 8006e92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e96:	00d0      	lsls	r0, r2, #3
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	eb12 0208 	adds.w	r2, r2, r8
 8006ea0:	eb43 0309 	adc.w	r3, r3, r9
 8006ea4:	f04f 0000 	mov.w	r0, #0
 8006ea8:	f04f 0100 	mov.w	r1, #0
 8006eac:	0259      	lsls	r1, r3, #9
 8006eae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006eb2:	0250      	lsls	r0, r2, #9
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4610      	mov	r0, r2
 8006eba:	4619      	mov	r1, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	f7f9 fe80 	bl	8000bc8 <__aeabi_uldivmod>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4613      	mov	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	e04a      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ed2:	4b31      	ldr	r3, [pc, #196]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	099b      	lsrs	r3, r3, #6
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ee2:	f04f 0100 	mov.w	r1, #0
 8006ee6:	ea02 0400 	and.w	r4, r2, r0
 8006eea:	ea03 0501 	and.w	r5, r3, r1
 8006eee:	4620      	mov	r0, r4
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	014b      	lsls	r3, r1, #5
 8006efc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f00:	0142      	lsls	r2, r0, #5
 8006f02:	4610      	mov	r0, r2
 8006f04:	4619      	mov	r1, r3
 8006f06:	1b00      	subs	r0, r0, r4
 8006f08:	eb61 0105 	sbc.w	r1, r1, r5
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	018b      	lsls	r3, r1, #6
 8006f16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f1a:	0182      	lsls	r2, r0, #6
 8006f1c:	1a12      	subs	r2, r2, r0
 8006f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8006f22:	f04f 0000 	mov.w	r0, #0
 8006f26:	f04f 0100 	mov.w	r1, #0
 8006f2a:	00d9      	lsls	r1, r3, #3
 8006f2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f30:	00d0      	lsls	r0, r2, #3
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	1912      	adds	r2, r2, r4
 8006f38:	eb45 0303 	adc.w	r3, r5, r3
 8006f3c:	f04f 0000 	mov.w	r0, #0
 8006f40:	f04f 0100 	mov.w	r1, #0
 8006f44:	0299      	lsls	r1, r3, #10
 8006f46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006f4a:	0290      	lsls	r0, r2, #10
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4610      	mov	r0, r2
 8006f52:	4619      	mov	r1, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f04f 0300 	mov.w	r3, #0
 8006f5c:	f7f9 fe34 	bl	8000bc8 <__aeabi_uldivmod>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4613      	mov	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f68:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	0c1b      	lsrs	r3, r3, #16
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	3301      	adds	r3, #1
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f80:	60bb      	str	r3, [r7, #8]
      break;
 8006f82:	e002      	b.n	8006f8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f84:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006f86:	60bb      	str	r3, [r7, #8]
      break;
 8006f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006f96:	bf00      	nop
 8006f98:	40023800 	.word	0x40023800
 8006f9c:	00f42400 	.word	0x00f42400
 8006fa0:	007a1200 	.word	0x007a1200

08006fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fa8:	4b03      	ldr	r3, [pc, #12]	; (8006fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006faa:	681b      	ldr	r3, [r3, #0]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	20000010 	.word	0x20000010

08006fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006fc0:	f7ff fff0 	bl	8006fa4 <HAL_RCC_GetHCLKFreq>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	0a9b      	lsrs	r3, r3, #10
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	4903      	ldr	r1, [pc, #12]	; (8006fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fd2:	5ccb      	ldrb	r3, [r1, r3]
 8006fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	40023800 	.word	0x40023800
 8006fe0:	08012cdc 	.word	0x08012cdc

08006fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006fe8:	f7ff ffdc 	bl	8006fa4 <HAL_RCC_GetHCLKFreq>
 8006fec:	4602      	mov	r2, r0
 8006fee:	4b05      	ldr	r3, [pc, #20]	; (8007004 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	0b5b      	lsrs	r3, r3, #13
 8006ff4:	f003 0307 	and.w	r3, r3, #7
 8006ff8:	4903      	ldr	r1, [pc, #12]	; (8007008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ffa:	5ccb      	ldrb	r3, [r1, r3]
 8006ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007000:	4618      	mov	r0, r3
 8007002:	bd80      	pop	{r7, pc}
 8007004:	40023800 	.word	0x40023800
 8007008:	08012cdc 	.word	0x08012cdc

0800700c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	220f      	movs	r2, #15
 800701a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800701c:	4b12      	ldr	r3, [pc, #72]	; (8007068 <HAL_RCC_GetClockConfig+0x5c>)
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f003 0203 	and.w	r2, r3, #3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007028:	4b0f      	ldr	r3, [pc, #60]	; (8007068 <HAL_RCC_GetClockConfig+0x5c>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007034:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <HAL_RCC_GetClockConfig+0x5c>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007040:	4b09      	ldr	r3, [pc, #36]	; (8007068 <HAL_RCC_GetClockConfig+0x5c>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	08db      	lsrs	r3, r3, #3
 8007046:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800704e:	4b07      	ldr	r3, [pc, #28]	; (800706c <HAL_RCC_GetClockConfig+0x60>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 020f 	and.w	r2, r3, #15
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	601a      	str	r2, [r3, #0]
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40023800 	.word	0x40023800
 800706c:	40023c00 	.word	0x40023c00

08007070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10b      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007094:	2b00      	cmp	r3, #0
 8007096:	d105      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d075      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80070a4:	4bad      	ldr	r3, [pc, #692]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070aa:	f7fb fd2f 	bl	8002b0c <HAL_GetTick>
 80070ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070b0:	e008      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070b2:	f7fb fd2b 	bl	8002b0c <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d901      	bls.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e18b      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070c4:	4ba6      	ldr	r3, [pc, #664]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1f0      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d009      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	019a      	lsls	r2, r3, #6
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	071b      	lsls	r3, r3, #28
 80070e8:	499d      	ldr	r1, [pc, #628]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01f      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80070fc:	4b98      	ldr	r3, [pc, #608]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80070fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007102:	0f1b      	lsrs	r3, r3, #28
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	019a      	lsls	r2, r3, #6
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	061b      	lsls	r3, r3, #24
 8007116:	431a      	orrs	r2, r3
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	071b      	lsls	r3, r3, #28
 800711c:	4990      	ldr	r1, [pc, #576]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800711e:	4313      	orrs	r3, r2
 8007120:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007124:	4b8e      	ldr	r3, [pc, #568]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800712a:	f023 021f 	bic.w	r2, r3, #31
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	3b01      	subs	r3, #1
 8007134:	498a      	ldr	r1, [pc, #552]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007136:	4313      	orrs	r3, r2
 8007138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00d      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	019a      	lsls	r2, r3, #6
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	061b      	lsls	r3, r3, #24
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	071b      	lsls	r3, r3, #28
 800715c:	4980      	ldr	r1, [pc, #512]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800715e:	4313      	orrs	r3, r2
 8007160:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007164:	4b7d      	ldr	r3, [pc, #500]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007166:	2201      	movs	r2, #1
 8007168:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800716a:	f7fb fccf 	bl	8002b0c <HAL_GetTick>
 800716e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007170:	e008      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007172:	f7fb fccb 	bl	8002b0c <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e12b      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007184:	4b76      	ldr	r3, [pc, #472]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0f0      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d105      	bne.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d079      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80071a8:	4b6e      	ldr	r3, [pc, #440]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071ae:	f7fb fcad 	bl	8002b0c <HAL_GetTick>
 80071b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071b4:	e008      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80071b6:	f7fb fca9 	bl	8002b0c <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d901      	bls.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e109      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071c8:	4b65      	ldr	r3, [pc, #404]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071d4:	d0ef      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0304 	and.w	r3, r3, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d020      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071e2:	4b5f      	ldr	r3, [pc, #380]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e8:	0f1b      	lsrs	r3, r3, #28
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	019a      	lsls	r2, r3, #6
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	061b      	lsls	r3, r3, #24
 80071fc:	431a      	orrs	r2, r3
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	071b      	lsls	r3, r3, #28
 8007202:	4957      	ldr	r1, [pc, #348]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007204:	4313      	orrs	r3, r2
 8007206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800720a:	4b55      	ldr	r3, [pc, #340]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800720c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007210:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	3b01      	subs	r3, #1
 800721a:	021b      	lsls	r3, r3, #8
 800721c:	4950      	ldr	r1, [pc, #320]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800721e:	4313      	orrs	r3, r2
 8007220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d01e      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007230:	4b4b      	ldr	r3, [pc, #300]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007236:	0e1b      	lsrs	r3, r3, #24
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	019a      	lsls	r2, r3, #6
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	061b      	lsls	r3, r3, #24
 8007248:	431a      	orrs	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	071b      	lsls	r3, r3, #28
 8007250:	4943      	ldr	r1, [pc, #268]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007252:	4313      	orrs	r3, r2
 8007254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007258:	4b41      	ldr	r3, [pc, #260]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800725a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800725e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	493e      	ldr	r1, [pc, #248]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007268:	4313      	orrs	r3, r2
 800726a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800726e:	4b3d      	ldr	r3, [pc, #244]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007270:	2201      	movs	r2, #1
 8007272:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007274:	f7fb fc4a 	bl	8002b0c <HAL_GetTick>
 8007278:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800727a:	e008      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800727c:	f7fb fc46 	bl	8002b0c <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d901      	bls.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e0a6      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800728e:	4b34      	ldr	r3, [pc, #208]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800729a:	d1ef      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0320 	and.w	r3, r3, #32
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 808d 	beq.w	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072aa:	2300      	movs	r3, #0
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	4b2c      	ldr	r3, [pc, #176]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	4a2b      	ldr	r2, [pc, #172]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072b8:	6413      	str	r3, [r2, #64]	; 0x40
 80072ba:	4b29      	ldr	r3, [pc, #164]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80072c6:	4b28      	ldr	r3, [pc, #160]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a27      	ldr	r2, [pc, #156]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80072cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072d2:	f7fb fc1b 	bl	8002b0c <HAL_GetTick>
 80072d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80072d8:	e008      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80072da:	f7fb fc17 	bl	8002b0c <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d901      	bls.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e077      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80072ec:	4b1e      	ldr	r3, [pc, #120]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0f0      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072f8:	4b19      	ldr	r3, [pc, #100]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007300:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d039      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	429a      	cmp	r2, r3
 8007314:	d032      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007316:	4b12      	ldr	r3, [pc, #72]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800731e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007320:	4b12      	ldr	r3, [pc, #72]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007322:	2201      	movs	r2, #1
 8007324:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007326:	4b11      	ldr	r3, [pc, #68]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800732c:	4a0c      	ldr	r2, [pc, #48]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007332:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b01      	cmp	r3, #1
 800733c:	d11e      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800733e:	f7fb fbe5 	bl	8002b0c <HAL_GetTick>
 8007342:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007344:	e014      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007346:	f7fb fbe1 	bl	8002b0c <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	f241 3288 	movw	r2, #5000	; 0x1388
 8007354:	4293      	cmp	r3, r2
 8007356:	d90b      	bls.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e03f      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800735c:	42470068 	.word	0x42470068
 8007360:	40023800 	.word	0x40023800
 8007364:	42470070 	.word	0x42470070
 8007368:	40007000 	.word	0x40007000
 800736c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007370:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0e4      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007384:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007388:	d10d      	bne.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800738a:	4b16      	ldr	r3, [pc, #88]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800739a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800739e:	4911      	ldr	r1, [pc, #68]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	608b      	str	r3, [r1, #8]
 80073a4:	e005      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80073a6:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	4a0e      	ldr	r2, [pc, #56]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073b0:	6093      	str	r3, [r2, #8]
 80073b2:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073be:	4909      	ldr	r1, [pc, #36]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0310 	and.w	r3, r3, #16
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d004      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80073d6:	4b04      	ldr	r3, [pc, #16]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80073d8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	40023800 	.word	0x40023800
 80073e8:	424711e0 	.word	0x424711e0

080073ec <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e025      	b.n	800744c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7fb f99f 	bl	8002758 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2202      	movs	r2, #2
 800741e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3304      	adds	r3, #4
 800742a:	4619      	mov	r1, r3
 800742c:	4610      	mov	r0, r2
 800742e:	f001 f831 	bl	8008494 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6818      	ldr	r0, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	461a      	mov	r2, r3
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	f001 f89c 	bl	800857a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e07b      	b.n	800755e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	2b00      	cmp	r3, #0
 800746c:	d108      	bne.n	8007480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007476:	d009      	beq.n	800748c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	61da      	str	r2, [r3, #28]
 800747e:	e005      	b.n	800748c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fb f812 	bl	80024d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	431a      	orrs	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007510:	ea42 0103 	orr.w	r1, r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007518:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	0c1b      	lsrs	r3, r3, #16
 800752a:	f003 0104 	and.w	r1, r3, #4
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	f003 0210 	and.w	r2, r3, #16
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69da      	ldr	r2, [r3, #28]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800754c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b082      	sub	sp, #8
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e041      	b.n	80075fc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d106      	bne.n	8007592 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7fa ffe7 	bl	8002560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2202      	movs	r2, #2
 8007596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3304      	adds	r3, #4
 80075a2:	4619      	mov	r1, r3
 80075a4:	4610      	mov	r0, r2
 80075a6:	f000 fa95 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b01      	cmp	r3, #1
 8007616:	d001      	beq.n	800761c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e04e      	b.n	80076ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f042 0201 	orr.w	r2, r2, #1
 8007632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a23      	ldr	r2, [pc, #140]	; (80076c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d022      	beq.n	8007684 <HAL_TIM_Base_Start_IT+0x80>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007646:	d01d      	beq.n	8007684 <HAL_TIM_Base_Start_IT+0x80>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1f      	ldr	r2, [pc, #124]	; (80076cc <HAL_TIM_Base_Start_IT+0xc8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d018      	beq.n	8007684 <HAL_TIM_Base_Start_IT+0x80>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1e      	ldr	r2, [pc, #120]	; (80076d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d013      	beq.n	8007684 <HAL_TIM_Base_Start_IT+0x80>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1c      	ldr	r2, [pc, #112]	; (80076d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00e      	beq.n	8007684 <HAL_TIM_Base_Start_IT+0x80>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1b      	ldr	r2, [pc, #108]	; (80076d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d009      	beq.n	8007684 <HAL_TIM_Base_Start_IT+0x80>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a19      	ldr	r2, [pc, #100]	; (80076dc <HAL_TIM_Base_Start_IT+0xd8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d004      	beq.n	8007684 <HAL_TIM_Base_Start_IT+0x80>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a18      	ldr	r2, [pc, #96]	; (80076e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d111      	bne.n	80076a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 0307 	and.w	r3, r3, #7
 800768e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b06      	cmp	r3, #6
 8007694:	d010      	beq.n	80076b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f042 0201 	orr.w	r2, r2, #1
 80076a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a6:	e007      	b.n	80076b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0201 	orr.w	r2, r2, #1
 80076b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40010000 	.word	0x40010000
 80076cc:	40000400 	.word	0x40000400
 80076d0:	40000800 	.word	0x40000800
 80076d4:	40000c00 	.word	0x40000c00
 80076d8:	40010400 	.word	0x40010400
 80076dc:	40014000 	.word	0x40014000
 80076e0:	40001800 	.word	0x40001800

080076e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d122      	bne.n	8007740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b02      	cmp	r3, #2
 8007706:	d11b      	bne.n	8007740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f06f 0202 	mvn.w	r2, #2
 8007710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	f003 0303 	and.w	r3, r3, #3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f9b5 	bl	8007a96 <HAL_TIM_IC_CaptureCallback>
 800772c:	e005      	b.n	800773a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f9a7 	bl	8007a82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f9b8 	bl	8007aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b04      	cmp	r3, #4
 800774c:	d122      	bne.n	8007794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b04      	cmp	r3, #4
 800775a:	d11b      	bne.n	8007794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0204 	mvn.w	r2, #4
 8007764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2202      	movs	r2, #2
 800776a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f98b 	bl	8007a96 <HAL_TIM_IC_CaptureCallback>
 8007780:	e005      	b.n	800778e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f97d 	bl	8007a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f98e 	bl	8007aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0308 	and.w	r3, r3, #8
 800779e:	2b08      	cmp	r3, #8
 80077a0:	d122      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f003 0308 	and.w	r3, r3, #8
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	d11b      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f06f 0208 	mvn.w	r2, #8
 80077b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2204      	movs	r2, #4
 80077be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f961 	bl	8007a96 <HAL_TIM_IC_CaptureCallback>
 80077d4:	e005      	b.n	80077e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f953 	bl	8007a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f964 	bl	8007aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0310 	and.w	r3, r3, #16
 80077f2:	2b10      	cmp	r3, #16
 80077f4:	d122      	bne.n	800783c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0310 	and.w	r3, r3, #16
 8007800:	2b10      	cmp	r3, #16
 8007802:	d11b      	bne.n	800783c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0210 	mvn.w	r2, #16
 800780c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2208      	movs	r2, #8
 8007812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f937 	bl	8007a96 <HAL_TIM_IC_CaptureCallback>
 8007828:	e005      	b.n	8007836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f929 	bl	8007a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f93a 	bl	8007aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b01      	cmp	r3, #1
 8007848:	d10e      	bne.n	8007868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b01      	cmp	r3, #1
 8007856:	d107      	bne.n	8007868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f06f 0201 	mvn.w	r2, #1
 8007860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fa fc0c 	bl	8002080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007872:	2b80      	cmp	r3, #128	; 0x80
 8007874:	d10e      	bne.n	8007894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007880:	2b80      	cmp	r3, #128	; 0x80
 8007882:	d107      	bne.n	8007894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800788c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fae0 	bl	8007e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d10e      	bne.n	80078c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ac:	2b40      	cmp	r3, #64	; 0x40
 80078ae:	d107      	bne.n	80078c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f8ff 	bl	8007abe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	f003 0320 	and.w	r3, r3, #32
 80078ca:	2b20      	cmp	r3, #32
 80078cc:	d10e      	bne.n	80078ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f003 0320 	and.w	r3, r3, #32
 80078d8:	2b20      	cmp	r3, #32
 80078da:	d107      	bne.n	80078ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f06f 0220 	mvn.w	r2, #32
 80078e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 faaa 	bl	8007e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078ec:	bf00      	nop
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007908:	2b01      	cmp	r3, #1
 800790a:	d101      	bne.n	8007910 <HAL_TIM_ConfigClockSource+0x1c>
 800790c:	2302      	movs	r3, #2
 800790e:	e0b4      	b.n	8007a7a <HAL_TIM_ConfigClockSource+0x186>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800792e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007948:	d03e      	beq.n	80079c8 <HAL_TIM_ConfigClockSource+0xd4>
 800794a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800794e:	f200 8087 	bhi.w	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007956:	f000 8086 	beq.w	8007a66 <HAL_TIM_ConfigClockSource+0x172>
 800795a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795e:	d87f      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007960:	2b70      	cmp	r3, #112	; 0x70
 8007962:	d01a      	beq.n	800799a <HAL_TIM_ConfigClockSource+0xa6>
 8007964:	2b70      	cmp	r3, #112	; 0x70
 8007966:	d87b      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007968:	2b60      	cmp	r3, #96	; 0x60
 800796a:	d050      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x11a>
 800796c:	2b60      	cmp	r3, #96	; 0x60
 800796e:	d877      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007970:	2b50      	cmp	r3, #80	; 0x50
 8007972:	d03c      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0xfa>
 8007974:	2b50      	cmp	r3, #80	; 0x50
 8007976:	d873      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007978:	2b40      	cmp	r3, #64	; 0x40
 800797a:	d058      	beq.n	8007a2e <HAL_TIM_ConfigClockSource+0x13a>
 800797c:	2b40      	cmp	r3, #64	; 0x40
 800797e:	d86f      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007980:	2b30      	cmp	r3, #48	; 0x30
 8007982:	d064      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x15a>
 8007984:	2b30      	cmp	r3, #48	; 0x30
 8007986:	d86b      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007988:	2b20      	cmp	r3, #32
 800798a:	d060      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x15a>
 800798c:	2b20      	cmp	r3, #32
 800798e:	d867      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d05c      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x15a>
 8007994:	2b10      	cmp	r3, #16
 8007996:	d05a      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x15a>
 8007998:	e062      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	6899      	ldr	r1, [r3, #8]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f000 f9ad 	bl	8007d08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	609a      	str	r2, [r3, #8]
      break;
 80079c6:	e04f      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	6899      	ldr	r1, [r3, #8]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f000 f996 	bl	8007d08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689a      	ldr	r2, [r3, #8]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079ea:	609a      	str	r2, [r3, #8]
      break;
 80079ec:	e03c      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	6859      	ldr	r1, [r3, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f000 f90a 	bl	8007c14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2150      	movs	r1, #80	; 0x50
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 f963 	bl	8007cd2 <TIM_ITRx_SetConfig>
      break;
 8007a0c:	e02c      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	6859      	ldr	r1, [r3, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f000 f929 	bl	8007c72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2160      	movs	r1, #96	; 0x60
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 f953 	bl	8007cd2 <TIM_ITRx_SetConfig>
      break;
 8007a2c:	e01c      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	6859      	ldr	r1, [r3, #4]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f000 f8ea 	bl	8007c14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2140      	movs	r1, #64	; 0x40
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f943 	bl	8007cd2 <TIM_ITRx_SetConfig>
      break;
 8007a4c:	e00c      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f000 f93a 	bl	8007cd2 <TIM_ITRx_SetConfig>
      break;
 8007a5e:	e003      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]
      break;
 8007a64:	e000      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
	...

08007ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a40      	ldr	r2, [pc, #256]	; (8007be8 <TIM_Base_SetConfig+0x114>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d013      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af2:	d00f      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a3d      	ldr	r2, [pc, #244]	; (8007bec <TIM_Base_SetConfig+0x118>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00b      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a3c      	ldr	r2, [pc, #240]	; (8007bf0 <TIM_Base_SetConfig+0x11c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d007      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a3b      	ldr	r2, [pc, #236]	; (8007bf4 <TIM_Base_SetConfig+0x120>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d003      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a3a      	ldr	r2, [pc, #232]	; (8007bf8 <TIM_Base_SetConfig+0x124>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d108      	bne.n	8007b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a2f      	ldr	r2, [pc, #188]	; (8007be8 <TIM_Base_SetConfig+0x114>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d02b      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b34:	d027      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2c      	ldr	r2, [pc, #176]	; (8007bec <TIM_Base_SetConfig+0x118>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d023      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a2b      	ldr	r2, [pc, #172]	; (8007bf0 <TIM_Base_SetConfig+0x11c>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d01f      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a2a      	ldr	r2, [pc, #168]	; (8007bf4 <TIM_Base_SetConfig+0x120>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d01b      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a29      	ldr	r2, [pc, #164]	; (8007bf8 <TIM_Base_SetConfig+0x124>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d017      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a28      	ldr	r2, [pc, #160]	; (8007bfc <TIM_Base_SetConfig+0x128>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d013      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a27      	ldr	r2, [pc, #156]	; (8007c00 <TIM_Base_SetConfig+0x12c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d00f      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a26      	ldr	r2, [pc, #152]	; (8007c04 <TIM_Base_SetConfig+0x130>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d00b      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a25      	ldr	r2, [pc, #148]	; (8007c08 <TIM_Base_SetConfig+0x134>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d007      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a24      	ldr	r2, [pc, #144]	; (8007c0c <TIM_Base_SetConfig+0x138>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d003      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a23      	ldr	r2, [pc, #140]	; (8007c10 <TIM_Base_SetConfig+0x13c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d108      	bne.n	8007b98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a0a      	ldr	r2, [pc, #40]	; (8007be8 <TIM_Base_SetConfig+0x114>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d003      	beq.n	8007bcc <TIM_Base_SetConfig+0xf8>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a0c      	ldr	r2, [pc, #48]	; (8007bf8 <TIM_Base_SetConfig+0x124>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d103      	bne.n	8007bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	691a      	ldr	r2, [r3, #16]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	615a      	str	r2, [r3, #20]
}
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	40010000 	.word	0x40010000
 8007bec:	40000400 	.word	0x40000400
 8007bf0:	40000800 	.word	0x40000800
 8007bf4:	40000c00 	.word	0x40000c00
 8007bf8:	40010400 	.word	0x40010400
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	40014400 	.word	0x40014400
 8007c04:	40014800 	.word	0x40014800
 8007c08:	40001800 	.word	0x40001800
 8007c0c:	40001c00 	.word	0x40001c00
 8007c10:	40002000 	.word	0x40002000

08007c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	f023 0201 	bic.w	r2, r3, #1
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f023 030a 	bic.w	r3, r3, #10
 8007c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	621a      	str	r2, [r3, #32]
}
 8007c66:	bf00      	nop
 8007c68:	371c      	adds	r7, #28
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b087      	sub	sp, #28
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	f023 0210 	bic.w	r2, r3, #16
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	031b      	lsls	r3, r3, #12
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	011b      	lsls	r3, r3, #4
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	621a      	str	r2, [r3, #32]
}
 8007cc6:	bf00      	nop
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b085      	sub	sp, #20
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	f043 0307 	orr.w	r3, r3, #7
 8007cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	609a      	str	r2, [r3, #8]
}
 8007cfc:	bf00      	nop
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	021a      	lsls	r2, r3, #8
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	609a      	str	r2, [r3, #8]
}
 8007d3c:	bf00      	nop
 8007d3e:	371c      	adds	r7, #28
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d101      	bne.n	8007d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e05a      	b.n	8007e16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a21      	ldr	r2, [pc, #132]	; (8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d022      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dac:	d01d      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a1d      	ldr	r2, [pc, #116]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d018      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a1b      	ldr	r2, [pc, #108]	; (8007e2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d013      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a1a      	ldr	r2, [pc, #104]	; (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00e      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a18      	ldr	r2, [pc, #96]	; (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d009      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a17      	ldr	r2, [pc, #92]	; (8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d004      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a15      	ldr	r2, [pc, #84]	; (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d10c      	bne.n	8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	40010000 	.word	0x40010000
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800
 8007e30:	40000c00 	.word	0x40000c00
 8007e34:	40010400 	.word	0x40010400
 8007e38:	40014000 	.word	0x40014000
 8007e3c:	40001800 	.word	0x40001800

08007e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e03f      	b.n	8007efa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d106      	bne.n	8007e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7fa fb88 	bl	80025a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2224      	movs	r2, #36	; 0x24
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68da      	ldr	r2, [r3, #12]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f929 	bl	8008104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	691a      	ldr	r2, [r3, #16]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695a      	ldr	r2, [r3, #20]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68da      	ldr	r2, [r3, #12]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b08a      	sub	sp, #40	; 0x28
 8007f06:	af02      	add	r7, sp, #8
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	603b      	str	r3, [r7, #0]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b20      	cmp	r3, #32
 8007f20:	d17c      	bne.n	800801c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d002      	beq.n	8007f2e <HAL_UART_Transmit+0x2c>
 8007f28:	88fb      	ldrh	r3, [r7, #6]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e075      	b.n	800801e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d101      	bne.n	8007f40 <HAL_UART_Transmit+0x3e>
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	e06e      	b.n	800801e <HAL_UART_Transmit+0x11c>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2221      	movs	r2, #33	; 0x21
 8007f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f56:	f7fa fdd9 	bl	8002b0c <HAL_GetTick>
 8007f5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	88fa      	ldrh	r2, [r7, #6]
 8007f60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	88fa      	ldrh	r2, [r7, #6]
 8007f66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f70:	d108      	bne.n	8007f84 <HAL_UART_Transmit+0x82>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d104      	bne.n	8007f84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	61bb      	str	r3, [r7, #24]
 8007f82:	e003      	b.n	8007f8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f94:	e02a      	b.n	8007fec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2180      	movs	r1, #128	; 0x80
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 f840 	bl	8008026 <UART_WaitOnFlagUntilTimeout>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e036      	b.n	800801e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10b      	bne.n	8007fce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	3302      	adds	r3, #2
 8007fca:	61bb      	str	r3, [r7, #24]
 8007fcc:	e007      	b.n	8007fde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	781a      	ldrb	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1cf      	bne.n	8007f96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2140      	movs	r1, #64	; 0x40
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 f810 	bl	8008026 <UART_WaitOnFlagUntilTimeout>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e006      	b.n	800801e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2220      	movs	r2, #32
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	e000      	b.n	800801e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800801c:	2302      	movs	r3, #2
  }
}
 800801e:	4618      	mov	r0, r3
 8008020:	3720      	adds	r7, #32
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b090      	sub	sp, #64	; 0x40
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	603b      	str	r3, [r7, #0]
 8008032:	4613      	mov	r3, r2
 8008034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008036:	e050      	b.n	80080da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800803a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803e:	d04c      	beq.n	80080da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <UART_WaitOnFlagUntilTimeout+0x30>
 8008046:	f7fa fd61 	bl	8002b0c <HAL_GetTick>
 800804a:	4602      	mov	r2, r0
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008052:	429a      	cmp	r2, r3
 8008054:	d241      	bcs.n	80080da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	330c      	adds	r3, #12
 800805c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	e853 3f00 	ldrex	r3, [r3]
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800806c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	330c      	adds	r3, #12
 8008074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008076:	637a      	str	r2, [r7, #52]	; 0x34
 8008078:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800807c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e5      	bne.n	8008056 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3314      	adds	r3, #20
 8008090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	613b      	str	r3, [r7, #16]
   return(result);
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f023 0301 	bic.w	r3, r3, #1
 80080a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3314      	adds	r3, #20
 80080a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080aa:	623a      	str	r2, [r7, #32]
 80080ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	69f9      	ldr	r1, [r7, #28]
 80080b0:	6a3a      	ldr	r2, [r7, #32]
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e5      	bne.n	800808a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2220      	movs	r2, #32
 80080ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e00f      	b.n	80080fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	4013      	ands	r3, r2
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	bf0c      	ite	eq
 80080ea:	2301      	moveq	r3, #1
 80080ec:	2300      	movne	r3, #0
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	461a      	mov	r2, r3
 80080f2:	79fb      	ldrb	r3, [r7, #7]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d09f      	beq.n	8008038 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3740      	adds	r7, #64	; 0x40
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008108:	b09f      	sub	sp, #124	; 0x7c
 800810a:	af00      	add	r7, sp, #0
 800810c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800810e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811a:	68d9      	ldr	r1, [r3, #12]
 800811c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	ea40 0301 	orr.w	r3, r0, r1
 8008124:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	431a      	orrs	r2, r3
 8008130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	431a      	orrs	r2, r3
 8008136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	4313      	orrs	r3, r2
 800813c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800813e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008148:	f021 010c 	bic.w	r1, r1, #12
 800814c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008152:	430b      	orrs	r3, r1
 8008154:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008162:	6999      	ldr	r1, [r3, #24]
 8008164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	ea40 0301 	orr.w	r3, r0, r1
 800816c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800816e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	4bc5      	ldr	r3, [pc, #788]	; (8008488 <UART_SetConfig+0x384>)
 8008174:	429a      	cmp	r2, r3
 8008176:	d004      	beq.n	8008182 <UART_SetConfig+0x7e>
 8008178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	4bc3      	ldr	r3, [pc, #780]	; (800848c <UART_SetConfig+0x388>)
 800817e:	429a      	cmp	r2, r3
 8008180:	d103      	bne.n	800818a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008182:	f7fe ff2f 	bl	8006fe4 <HAL_RCC_GetPCLK2Freq>
 8008186:	6778      	str	r0, [r7, #116]	; 0x74
 8008188:	e002      	b.n	8008190 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800818a:	f7fe ff17 	bl	8006fbc <HAL_RCC_GetPCLK1Freq>
 800818e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008198:	f040 80b6 	bne.w	8008308 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800819c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800819e:	461c      	mov	r4, r3
 80081a0:	f04f 0500 	mov.w	r5, #0
 80081a4:	4622      	mov	r2, r4
 80081a6:	462b      	mov	r3, r5
 80081a8:	1891      	adds	r1, r2, r2
 80081aa:	6439      	str	r1, [r7, #64]	; 0x40
 80081ac:	415b      	adcs	r3, r3
 80081ae:	647b      	str	r3, [r7, #68]	; 0x44
 80081b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081b4:	1912      	adds	r2, r2, r4
 80081b6:	eb45 0303 	adc.w	r3, r5, r3
 80081ba:	f04f 0000 	mov.w	r0, #0
 80081be:	f04f 0100 	mov.w	r1, #0
 80081c2:	00d9      	lsls	r1, r3, #3
 80081c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081c8:	00d0      	lsls	r0, r2, #3
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	1911      	adds	r1, r2, r4
 80081d0:	6639      	str	r1, [r7, #96]	; 0x60
 80081d2:	416b      	adcs	r3, r5
 80081d4:	667b      	str	r3, [r7, #100]	; 0x64
 80081d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	461a      	mov	r2, r3
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	1891      	adds	r1, r2, r2
 80081e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80081e4:	415b      	adcs	r3, r3
 80081e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80081f0:	f7f8 fcea 	bl	8000bc8 <__aeabi_uldivmod>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4ba5      	ldr	r3, [pc, #660]	; (8008490 <UART_SetConfig+0x38c>)
 80081fa:	fba3 2302 	umull	r2, r3, r3, r2
 80081fe:	095b      	lsrs	r3, r3, #5
 8008200:	011e      	lsls	r6, r3, #4
 8008202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008204:	461c      	mov	r4, r3
 8008206:	f04f 0500 	mov.w	r5, #0
 800820a:	4622      	mov	r2, r4
 800820c:	462b      	mov	r3, r5
 800820e:	1891      	adds	r1, r2, r2
 8008210:	6339      	str	r1, [r7, #48]	; 0x30
 8008212:	415b      	adcs	r3, r3
 8008214:	637b      	str	r3, [r7, #52]	; 0x34
 8008216:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800821a:	1912      	adds	r2, r2, r4
 800821c:	eb45 0303 	adc.w	r3, r5, r3
 8008220:	f04f 0000 	mov.w	r0, #0
 8008224:	f04f 0100 	mov.w	r1, #0
 8008228:	00d9      	lsls	r1, r3, #3
 800822a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800822e:	00d0      	lsls	r0, r2, #3
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	1911      	adds	r1, r2, r4
 8008236:	65b9      	str	r1, [r7, #88]	; 0x58
 8008238:	416b      	adcs	r3, r5
 800823a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800823c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	461a      	mov	r2, r3
 8008242:	f04f 0300 	mov.w	r3, #0
 8008246:	1891      	adds	r1, r2, r2
 8008248:	62b9      	str	r1, [r7, #40]	; 0x28
 800824a:	415b      	adcs	r3, r3
 800824c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800824e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008252:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008256:	f7f8 fcb7 	bl	8000bc8 <__aeabi_uldivmod>
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	4b8c      	ldr	r3, [pc, #560]	; (8008490 <UART_SetConfig+0x38c>)
 8008260:	fba3 1302 	umull	r1, r3, r3, r2
 8008264:	095b      	lsrs	r3, r3, #5
 8008266:	2164      	movs	r1, #100	; 0x64
 8008268:	fb01 f303 	mul.w	r3, r1, r3
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	3332      	adds	r3, #50	; 0x32
 8008272:	4a87      	ldr	r2, [pc, #540]	; (8008490 <UART_SetConfig+0x38c>)
 8008274:	fba2 2303 	umull	r2, r3, r2, r3
 8008278:	095b      	lsrs	r3, r3, #5
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008280:	441e      	add	r6, r3
 8008282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008284:	4618      	mov	r0, r3
 8008286:	f04f 0100 	mov.w	r1, #0
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	1894      	adds	r4, r2, r2
 8008290:	623c      	str	r4, [r7, #32]
 8008292:	415b      	adcs	r3, r3
 8008294:	627b      	str	r3, [r7, #36]	; 0x24
 8008296:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800829a:	1812      	adds	r2, r2, r0
 800829c:	eb41 0303 	adc.w	r3, r1, r3
 80082a0:	f04f 0400 	mov.w	r4, #0
 80082a4:	f04f 0500 	mov.w	r5, #0
 80082a8:	00dd      	lsls	r5, r3, #3
 80082aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80082ae:	00d4      	lsls	r4, r2, #3
 80082b0:	4622      	mov	r2, r4
 80082b2:	462b      	mov	r3, r5
 80082b4:	1814      	adds	r4, r2, r0
 80082b6:	653c      	str	r4, [r7, #80]	; 0x50
 80082b8:	414b      	adcs	r3, r1
 80082ba:	657b      	str	r3, [r7, #84]	; 0x54
 80082bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	461a      	mov	r2, r3
 80082c2:	f04f 0300 	mov.w	r3, #0
 80082c6:	1891      	adds	r1, r2, r2
 80082c8:	61b9      	str	r1, [r7, #24]
 80082ca:	415b      	adcs	r3, r3
 80082cc:	61fb      	str	r3, [r7, #28]
 80082ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80082d6:	f7f8 fc77 	bl	8000bc8 <__aeabi_uldivmod>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	4b6c      	ldr	r3, [pc, #432]	; (8008490 <UART_SetConfig+0x38c>)
 80082e0:	fba3 1302 	umull	r1, r3, r3, r2
 80082e4:	095b      	lsrs	r3, r3, #5
 80082e6:	2164      	movs	r1, #100	; 0x64
 80082e8:	fb01 f303 	mul.w	r3, r1, r3
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	3332      	adds	r3, #50	; 0x32
 80082f2:	4a67      	ldr	r2, [pc, #412]	; (8008490 <UART_SetConfig+0x38c>)
 80082f4:	fba2 2303 	umull	r2, r3, r2, r3
 80082f8:	095b      	lsrs	r3, r3, #5
 80082fa:	f003 0207 	and.w	r2, r3, #7
 80082fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4432      	add	r2, r6
 8008304:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008306:	e0b9      	b.n	800847c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008308:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800830a:	461c      	mov	r4, r3
 800830c:	f04f 0500 	mov.w	r5, #0
 8008310:	4622      	mov	r2, r4
 8008312:	462b      	mov	r3, r5
 8008314:	1891      	adds	r1, r2, r2
 8008316:	6139      	str	r1, [r7, #16]
 8008318:	415b      	adcs	r3, r3
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008320:	1912      	adds	r2, r2, r4
 8008322:	eb45 0303 	adc.w	r3, r5, r3
 8008326:	f04f 0000 	mov.w	r0, #0
 800832a:	f04f 0100 	mov.w	r1, #0
 800832e:	00d9      	lsls	r1, r3, #3
 8008330:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008334:	00d0      	lsls	r0, r2, #3
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	eb12 0804 	adds.w	r8, r2, r4
 800833e:	eb43 0905 	adc.w	r9, r3, r5
 8008342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	4618      	mov	r0, r3
 8008348:	f04f 0100 	mov.w	r1, #0
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	008b      	lsls	r3, r1, #2
 8008356:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800835a:	0082      	lsls	r2, r0, #2
 800835c:	4640      	mov	r0, r8
 800835e:	4649      	mov	r1, r9
 8008360:	f7f8 fc32 	bl	8000bc8 <__aeabi_uldivmod>
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	4b49      	ldr	r3, [pc, #292]	; (8008490 <UART_SetConfig+0x38c>)
 800836a:	fba3 2302 	umull	r2, r3, r3, r2
 800836e:	095b      	lsrs	r3, r3, #5
 8008370:	011e      	lsls	r6, r3, #4
 8008372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008374:	4618      	mov	r0, r3
 8008376:	f04f 0100 	mov.w	r1, #0
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	1894      	adds	r4, r2, r2
 8008380:	60bc      	str	r4, [r7, #8]
 8008382:	415b      	adcs	r3, r3
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800838a:	1812      	adds	r2, r2, r0
 800838c:	eb41 0303 	adc.w	r3, r1, r3
 8008390:	f04f 0400 	mov.w	r4, #0
 8008394:	f04f 0500 	mov.w	r5, #0
 8008398:	00dd      	lsls	r5, r3, #3
 800839a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800839e:	00d4      	lsls	r4, r2, #3
 80083a0:	4622      	mov	r2, r4
 80083a2:	462b      	mov	r3, r5
 80083a4:	1814      	adds	r4, r2, r0
 80083a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80083a8:	414b      	adcs	r3, r1
 80083aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f04f 0100 	mov.w	r1, #0
 80083b6:	f04f 0200 	mov.w	r2, #0
 80083ba:	f04f 0300 	mov.w	r3, #0
 80083be:	008b      	lsls	r3, r1, #2
 80083c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083c4:	0082      	lsls	r2, r0, #2
 80083c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80083ca:	f7f8 fbfd 	bl	8000bc8 <__aeabi_uldivmod>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4b2f      	ldr	r3, [pc, #188]	; (8008490 <UART_SetConfig+0x38c>)
 80083d4:	fba3 1302 	umull	r1, r3, r3, r2
 80083d8:	095b      	lsrs	r3, r3, #5
 80083da:	2164      	movs	r1, #100	; 0x64
 80083dc:	fb01 f303 	mul.w	r3, r1, r3
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	3332      	adds	r3, #50	; 0x32
 80083e6:	4a2a      	ldr	r2, [pc, #168]	; (8008490 <UART_SetConfig+0x38c>)
 80083e8:	fba2 2303 	umull	r2, r3, r2, r3
 80083ec:	095b      	lsrs	r3, r3, #5
 80083ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083f2:	441e      	add	r6, r3
 80083f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083f6:	4618      	mov	r0, r3
 80083f8:	f04f 0100 	mov.w	r1, #0
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	1894      	adds	r4, r2, r2
 8008402:	603c      	str	r4, [r7, #0]
 8008404:	415b      	adcs	r3, r3
 8008406:	607b      	str	r3, [r7, #4]
 8008408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800840c:	1812      	adds	r2, r2, r0
 800840e:	eb41 0303 	adc.w	r3, r1, r3
 8008412:	f04f 0400 	mov.w	r4, #0
 8008416:	f04f 0500 	mov.w	r5, #0
 800841a:	00dd      	lsls	r5, r3, #3
 800841c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008420:	00d4      	lsls	r4, r2, #3
 8008422:	4622      	mov	r2, r4
 8008424:	462b      	mov	r3, r5
 8008426:	eb12 0a00 	adds.w	sl, r2, r0
 800842a:	eb43 0b01 	adc.w	fp, r3, r1
 800842e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	4618      	mov	r0, r3
 8008434:	f04f 0100 	mov.w	r1, #0
 8008438:	f04f 0200 	mov.w	r2, #0
 800843c:	f04f 0300 	mov.w	r3, #0
 8008440:	008b      	lsls	r3, r1, #2
 8008442:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008446:	0082      	lsls	r2, r0, #2
 8008448:	4650      	mov	r0, sl
 800844a:	4659      	mov	r1, fp
 800844c:	f7f8 fbbc 	bl	8000bc8 <__aeabi_uldivmod>
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	4b0e      	ldr	r3, [pc, #56]	; (8008490 <UART_SetConfig+0x38c>)
 8008456:	fba3 1302 	umull	r1, r3, r3, r2
 800845a:	095b      	lsrs	r3, r3, #5
 800845c:	2164      	movs	r1, #100	; 0x64
 800845e:	fb01 f303 	mul.w	r3, r1, r3
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	011b      	lsls	r3, r3, #4
 8008466:	3332      	adds	r3, #50	; 0x32
 8008468:	4a09      	ldr	r2, [pc, #36]	; (8008490 <UART_SetConfig+0x38c>)
 800846a:	fba2 2303 	umull	r2, r3, r2, r3
 800846e:	095b      	lsrs	r3, r3, #5
 8008470:	f003 020f 	and.w	r2, r3, #15
 8008474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4432      	add	r2, r6
 800847a:	609a      	str	r2, [r3, #8]
}
 800847c:	bf00      	nop
 800847e:	377c      	adds	r7, #124	; 0x7c
 8008480:	46bd      	mov	sp, r7
 8008482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008486:	bf00      	nop
 8008488:	40011000 	.word	0x40011000
 800848c:	40011400 	.word	0x40011400
 8008490:	51eb851f 	.word	0x51eb851f

08008494 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80084a2:	2300      	movs	r3, #0
 80084a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d029      	beq.n	8008502 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80084ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084be:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80084c8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80084ce:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80084d4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80084da:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80084e0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80084e6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80084ec:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80084f2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	e034      	b.n	800856c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800850e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008518:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800851e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	4313      	orrs	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008532:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008536:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008540:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008546:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800854c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008552:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008558:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	4313      	orrs	r3, r2
 800855e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800857a:	b480      	push	{r7}
 800857c:	b087      	sub	sp, #28
 800857e:	af00      	add	r7, sp, #0
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d02e      	beq.n	80085f2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80085a0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80085b0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80085ba:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80085c4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80085ce:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	3b01      	subs	r3, #1
 80085d6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80085d8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	3b01      	subs	r3, #1
 80085e0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80085e2:	4313      	orrs	r3, r2
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	609a      	str	r2, [r3, #8]
 80085f0:	e03b      	b.n	800866a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008602:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	3b01      	subs	r3, #1
 800860a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	3b01      	subs	r3, #1
 8008612:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008614:	4313      	orrs	r3, r2
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	4313      	orrs	r3, r2
 800861a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008628:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	3b01      	subs	r3, #1
 8008636:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008638:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	3b01      	subs	r3, #1
 8008640:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008642:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	3b01      	subs	r3, #1
 800864a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800864c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	3b01      	subs	r3, #1
 8008654:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008656:	4313      	orrs	r3, r2
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	4313      	orrs	r3, r2
 800865c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008678:	b084      	sub	sp, #16
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	f107 001c 	add.w	r0, r7, #28
 8008686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	2b01      	cmp	r3, #1
 800868e:	d122      	bne.n	80086d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80086a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80086b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d105      	bne.n	80086ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f9a0 	bl	8008a10 <USB_CoreReset>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]
 80086d4:	e01a      	b.n	800870c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f994 	bl	8008a10 <USB_CoreReset>
 80086e8:	4603      	mov	r3, r0
 80086ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80086ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d106      	bne.n	8008700 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	639a      	str	r2, [r3, #56]	; 0x38
 80086fe:	e005      	b.n	800870c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008704:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	2b01      	cmp	r3, #1
 8008710:	d10b      	bne.n	800872a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f043 0206 	orr.w	r2, r3, #6
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f043 0220 	orr.w	r2, r3, #32
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800872a:	7bfb      	ldrb	r3, [r7, #15]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008736:	b004      	add	sp, #16
 8008738:	4770      	bx	lr

0800873a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f043 0201 	orr.w	r2, r3, #1
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f023 0201 	bic.w	r2, r3, #1
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	460b      	mov	r3, r1
 8008788:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d115      	bne.n	80087cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80087ac:	2001      	movs	r0, #1
 80087ae:	f7fa f9b9 	bl	8002b24 <HAL_Delay>
      ms++;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3301      	adds	r3, #1
 80087b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f91a 	bl	80089f2 <USB_GetMode>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d01e      	beq.n	8008802 <USB_SetCurrentMode+0x84>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b31      	cmp	r3, #49	; 0x31
 80087c8:	d9f0      	bls.n	80087ac <USB_SetCurrentMode+0x2e>
 80087ca:	e01a      	b.n	8008802 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80087cc:	78fb      	ldrb	r3, [r7, #3]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d115      	bne.n	80087fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80087de:	2001      	movs	r0, #1
 80087e0:	f7fa f9a0 	bl	8002b24 <HAL_Delay>
      ms++;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	3301      	adds	r3, #1
 80087e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f901 	bl	80089f2 <USB_GetMode>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d005      	beq.n	8008802 <USB_SetCurrentMode+0x84>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2b31      	cmp	r3, #49	; 0x31
 80087fa:	d9f0      	bls.n	80087de <USB_SetCurrentMode+0x60>
 80087fc:	e001      	b.n	8008802 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e005      	b.n	800880e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2b32      	cmp	r3, #50	; 0x32
 8008806:	d101      	bne.n	800880c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e000      	b.n	800880e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
	...

08008818 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	019b      	lsls	r3, r3, #6
 800882a:	f043 0220 	orr.w	r2, r3, #32
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3301      	adds	r3, #1
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	4a08      	ldr	r2, [pc, #32]	; (800885c <USB_FlushTxFifo+0x44>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d901      	bls.n	8008842 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e006      	b.n	8008850 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	f003 0320 	and.w	r3, r3, #32
 800884a:	2b20      	cmp	r3, #32
 800884c:	d0f1      	beq.n	8008832 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	00030d40 	.word	0x00030d40

08008860 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2210      	movs	r2, #16
 8008870:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	3301      	adds	r3, #1
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	4a08      	ldr	r2, [pc, #32]	; (800889c <USB_FlushRxFifo+0x3c>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d901      	bls.n	8008882 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e006      	b.n	8008890 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	f003 0310 	and.w	r3, r3, #16
 800888a:	2b10      	cmp	r3, #16
 800888c:	d0f1      	beq.n	8008872 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	00030d40 	.word	0x00030d40

080088a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b089      	sub	sp, #36	; 0x24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	4611      	mov	r1, r2
 80088ac:	461a      	mov	r2, r3
 80088ae:	460b      	mov	r3, r1
 80088b0:	71fb      	strb	r3, [r7, #7]
 80088b2:	4613      	mov	r3, r2
 80088b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80088be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d123      	bne.n	800890e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80088c6:	88bb      	ldrh	r3, [r7, #4]
 80088c8:	3303      	adds	r3, #3
 80088ca:	089b      	lsrs	r3, r3, #2
 80088cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80088ce:	2300      	movs	r3, #0
 80088d0:	61bb      	str	r3, [r7, #24]
 80088d2:	e018      	b.n	8008906 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088d4:	79fb      	ldrb	r3, [r7, #7]
 80088d6:	031a      	lsls	r2, r3, #12
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e0:	461a      	mov	r2, r3
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	3301      	adds	r3, #1
 80088ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	3301      	adds	r3, #1
 80088f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	3301      	adds	r3, #1
 80088f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	3301      	adds	r3, #1
 80088fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	3301      	adds	r3, #1
 8008904:	61bb      	str	r3, [r7, #24]
 8008906:	69ba      	ldr	r2, [r7, #24]
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	429a      	cmp	r2, r3
 800890c:	d3e2      	bcc.n	80088d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3724      	adds	r7, #36	; 0x24
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800891c:	b480      	push	{r7}
 800891e:	b08b      	sub	sp, #44	; 0x2c
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	4613      	mov	r3, r2
 8008928:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008932:	88fb      	ldrh	r3, [r7, #6]
 8008934:	089b      	lsrs	r3, r3, #2
 8008936:	b29b      	uxth	r3, r3
 8008938:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800893a:	88fb      	ldrh	r3, [r7, #6]
 800893c:	f003 0303 	and.w	r3, r3, #3
 8008940:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008942:	2300      	movs	r3, #0
 8008944:	623b      	str	r3, [r7, #32]
 8008946:	e014      	b.n	8008972 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	601a      	str	r2, [r3, #0]
    pDest++;
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	3301      	adds	r3, #1
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	3301      	adds	r3, #1
 800895e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	3301      	adds	r3, #1
 8008964:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	3301      	adds	r3, #1
 800896a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	3301      	adds	r3, #1
 8008970:	623b      	str	r3, [r7, #32]
 8008972:	6a3a      	ldr	r2, [r7, #32]
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	429a      	cmp	r2, r3
 8008978:	d3e6      	bcc.n	8008948 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800897a:	8bfb      	ldrh	r3, [r7, #30]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01e      	beq.n	80089be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800898a:	461a      	mov	r2, r3
 800898c:	f107 0310 	add.w	r3, r7, #16
 8008990:	6812      	ldr	r2, [r2, #0]
 8008992:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	b2db      	uxtb	r3, r3
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	fa22 f303 	lsr.w	r3, r2, r3
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a4:	701a      	strb	r2, [r3, #0]
      i++;
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	3301      	adds	r3, #1
 80089aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	3301      	adds	r3, #1
 80089b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80089b2:	8bfb      	ldrh	r3, [r7, #30]
 80089b4:	3b01      	subs	r3, #1
 80089b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80089b8:	8bfb      	ldrh	r3, [r7, #30]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1ea      	bne.n	8008994 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	372c      	adds	r7, #44	; 0x2c
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	4013      	ands	r3, r2
 80089e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80089e4:	68fb      	ldr	r3, [r7, #12]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	f003 0301 	and.w	r3, r3, #1
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
	...

08008a10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	60fb      	str	r3, [r7, #12]
 8008a22:	4a13      	ldr	r2, [pc, #76]	; (8008a70 <USB_CoreReset+0x60>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d901      	bls.n	8008a2c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e01a      	b.n	8008a62 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	daf3      	bge.n	8008a1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	f043 0201 	orr.w	r2, r3, #1
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	3301      	adds	r3, #1
 8008a48:	60fb      	str	r3, [r7, #12]
 8008a4a:	4a09      	ldr	r2, [pc, #36]	; (8008a70 <USB_CoreReset+0x60>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d901      	bls.n	8008a54 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e006      	b.n	8008a62 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d0f1      	beq.n	8008a44 <USB_CoreReset+0x34>

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	00030d40 	.word	0x00030d40

08008a74 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a74:	b084      	sub	sp, #16
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	f107 001c 	add.w	r0, r7, #28
 8008a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a90:	461a      	mov	r2, r3
 8008a92:	2300      	movs	r3, #0
 8008a94:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d018      	beq.n	8008af8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d10a      	bne.n	8008ae2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ada:	f043 0304 	orr.w	r3, r3, #4
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	e014      	b.n	8008b0c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008af0:	f023 0304 	bic.w	r3, r3, #4
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	e009      	b.n	8008b0c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b06:	f023 0304 	bic.w	r3, r3, #4
 8008b0a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008b0c:	2110      	movs	r1, #16
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7ff fe82 	bl	8008818 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff fea3 	bl	8008860 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60fb      	str	r3, [r7, #12]
 8008b1e:	e015      	b.n	8008b4c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b32:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	015a      	lsls	r2, r3, #5
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b40:	461a      	mov	r2, r3
 8008b42:	2300      	movs	r3, #0
 8008b44:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d3e5      	bcc.n	8008b20 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b60:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00b      	beq.n	8008b86 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b74:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a13      	ldr	r2, [pc, #76]	; (8008bc8 <USB_HostInit+0x154>)
 8008b7a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a13      	ldr	r2, [pc, #76]	; (8008bcc <USB_HostInit+0x158>)
 8008b80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008b84:	e009      	b.n	8008b9a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2280      	movs	r2, #128	; 0x80
 8008b8a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a10      	ldr	r2, [pc, #64]	; (8008bd0 <USB_HostInit+0x15c>)
 8008b90:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a0f      	ldr	r2, [pc, #60]	; (8008bd4 <USB_HostInit+0x160>)
 8008b96:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d105      	bne.n	8008bac <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	f043 0210 	orr.w	r2, r3, #16
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	699a      	ldr	r2, [r3, #24]
 8008bb0:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <USB_HostInit+0x164>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bc4:	b004      	add	sp, #16
 8008bc6:	4770      	bx	lr
 8008bc8:	01000200 	.word	0x01000200
 8008bcc:	00e00300 	.word	0x00e00300
 8008bd0:	00600080 	.word	0x00600080
 8008bd4:	004000e0 	.word	0x004000e0
 8008bd8:	a3200008 	.word	0xa3200008

08008bdc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008bfa:	f023 0303 	bic.w	r3, r3, #3
 8008bfe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	68f9      	ldr	r1, [r7, #12]
 8008c10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008c14:	4313      	orrs	r3, r2
 8008c16:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008c18:	78fb      	ldrb	r3, [r7, #3]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d107      	bne.n	8008c2e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c24:	461a      	mov	r2, r3
 8008c26:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008c2a:	6053      	str	r3, [r2, #4]
 8008c2c:	e009      	b.n	8008c42 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008c2e:	78fb      	ldrb	r3, [r7, #3]
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d106      	bne.n	8008c42 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008c40:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008c70:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008c80:	2064      	movs	r0, #100	; 0x64
 8008c82:	f7f9 ff4f 	bl	8002b24 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c92:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008c94:	200a      	movs	r0, #10
 8008c96:	f7f9 ff45 	bl	8002b24 <HAL_Delay>

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008cc8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d109      	bne.n	8008ce8 <USB_DriveVbus+0x44>
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d106      	bne.n	8008ce8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008ce2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ce6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cf2:	d109      	bne.n	8008d08 <USB_DriveVbus+0x64>
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d106      	bne.n	8008d08 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d06:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008d22:	2300      	movs	r3, #0
 8008d24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	0c5b      	lsrs	r3, r3, #17
 8008d34:	f003 0303 	and.w	r3, r3, #3
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	b29b      	uxth	r3, r3
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
	...

08008d68 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	4608      	mov	r0, r1
 8008d72:	4611      	mov	r1, r2
 8008d74:	461a      	mov	r2, r3
 8008d76:	4603      	mov	r3, r0
 8008d78:	70fb      	strb	r3, [r7, #3]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	70bb      	strb	r3, [r7, #2]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008d8a:	78fb      	ldrb	r3, [r7, #3]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d96:	461a      	mov	r2, r3
 8008d98:	f04f 33ff 	mov.w	r3, #4294967295
 8008d9c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008d9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d87e      	bhi.n	8008ea4 <USB_HC_Init+0x13c>
 8008da6:	a201      	add	r2, pc, #4	; (adr r2, 8008dac <USB_HC_Init+0x44>)
 8008da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dac:	08008dbd 	.word	0x08008dbd
 8008db0:	08008e67 	.word	0x08008e67
 8008db4:	08008dbd 	.word	0x08008dbd
 8008db8:	08008e29 	.word	0x08008e29
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008dbc:	78fb      	ldrb	r3, [r7, #3]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dc8:	461a      	mov	r2, r3
 8008dca:	f240 439d 	movw	r3, #1181	; 0x49d
 8008dce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008dd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	da10      	bge.n	8008dfa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008dd8:	78fb      	ldrb	r3, [r7, #3]
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	78fa      	ldrb	r2, [r7, #3]
 8008de8:	0151      	lsls	r1, r2, #5
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	440a      	add	r2, r1
 8008dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008df6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008df8:	e057      	b.n	8008eaa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d051      	beq.n	8008eaa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008e06:	78fb      	ldrb	r3, [r7, #3]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	78fa      	ldrb	r2, [r7, #3]
 8008e16:	0151      	lsls	r1, r2, #5
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	440a      	add	r2, r1
 8008e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008e24:	60d3      	str	r3, [r2, #12]
      break;
 8008e26:	e040      	b.n	8008eaa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e28:	78fb      	ldrb	r3, [r7, #3]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e34:	461a      	mov	r2, r3
 8008e36:	f240 639d 	movw	r3, #1693	; 0x69d
 8008e3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008e3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	da34      	bge.n	8008eae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008e44:	78fb      	ldrb	r3, [r7, #3]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	78fa      	ldrb	r2, [r7, #3]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e62:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008e64:	e023      	b.n	8008eae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e66:	78fb      	ldrb	r3, [r7, #3]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e72:	461a      	mov	r2, r3
 8008e74:	f240 2325 	movw	r3, #549	; 0x225
 8008e78:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008e7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	da17      	bge.n	8008eb2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008e82:	78fb      	ldrb	r3, [r7, #3]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	78fa      	ldrb	r2, [r7, #3]
 8008e92:	0151      	lsls	r1, r2, #5
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	440a      	add	r2, r1
 8008e98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e9c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008ea0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008ea2:	e006      	b.n	8008eb2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	77fb      	strb	r3, [r7, #31]
      break;
 8008ea8:	e004      	b.n	8008eb4 <USB_HC_Init+0x14c>
      break;
 8008eaa:	bf00      	nop
 8008eac:	e002      	b.n	8008eb4 <USB_HC_Init+0x14c>
      break;
 8008eae:	bf00      	nop
 8008eb0:	e000      	b.n	8008eb4 <USB_HC_Init+0x14c>
      break;
 8008eb2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eba:	699a      	ldr	r2, [r3, #24]
 8008ebc:	78fb      	ldrb	r3, [r7, #3]
 8008ebe:	f003 030f 	and.w	r3, r3, #15
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec8:	6939      	ldr	r1, [r7, #16]
 8008eca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008ede:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	da03      	bge.n	8008eee <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008eea:	61bb      	str	r3, [r7, #24]
 8008eec:	e001      	b.n	8008ef2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7ff ff0f 	bl	8008d16 <USB_GetHostSpeed>
 8008ef8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008efa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d106      	bne.n	8008f10 <USB_HC_Init+0x1a8>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d003      	beq.n	8008f10 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008f08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f0c:	617b      	str	r3, [r7, #20]
 8008f0e:	e001      	b.n	8008f14 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f14:	787b      	ldrb	r3, [r7, #1]
 8008f16:	059b      	lsls	r3, r3, #22
 8008f18:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008f1c:	78bb      	ldrb	r3, [r7, #2]
 8008f1e:	02db      	lsls	r3, r3, #11
 8008f20:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f24:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008f26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f2a:	049b      	lsls	r3, r3, #18
 8008f2c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008f30:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008f32:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f34:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008f38:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	0159      	lsls	r1, r3, #5
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	440b      	add	r3, r1
 8008f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f4a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f50:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008f52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d10f      	bne.n	8008f7a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	78fa      	ldrb	r2, [r7, #3]
 8008f6a:	0151      	lsls	r1, r2, #5
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	440a      	add	r2, r1
 8008f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f78:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008f7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3720      	adds	r7, #32
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b08c      	sub	sp, #48	; 0x30
 8008f88:	af02      	add	r7, sp, #8
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	785b      	ldrb	r3, [r3, #1]
 8008f9a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fa0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d02d      	beq.n	800900a <USB_HC_StartXfer+0x86>
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	791b      	ldrb	r3, [r3, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d129      	bne.n	800900a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008fb6:	79fb      	ldrb	r3, [r7, #7]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d117      	bne.n	8008fec <USB_HC_StartXfer+0x68>
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	79db      	ldrb	r3, [r3, #7]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d003      	beq.n	8008fcc <USB_HC_StartXfer+0x48>
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	79db      	ldrb	r3, [r3, #7]
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d10f      	bne.n	8008fec <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	015a      	lsls	r2, r3, #5
 8008fd0:	6a3b      	ldr	r3, [r7, #32]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	69fa      	ldr	r2, [r7, #28]
 8008fdc:	0151      	lsls	r1, r2, #5
 8008fde:	6a3a      	ldr	r2, [r7, #32]
 8008fe0:	440a      	add	r2, r1
 8008fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fea:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008fec:	79fb      	ldrb	r3, [r7, #7]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10b      	bne.n	800900a <USB_HC_StartXfer+0x86>
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	795b      	ldrb	r3, [r3, #5]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d107      	bne.n	800900a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	785b      	ldrb	r3, [r3, #1]
 8008ffe:	4619      	mov	r1, r3
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 fa2f 	bl	8009464 <USB_DoPing>
      return HAL_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	e0f8      	b.n	80091fc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d018      	beq.n	8009044 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	8912      	ldrh	r2, [r2, #8]
 800901a:	4413      	add	r3, r2
 800901c:	3b01      	subs	r3, #1
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	8912      	ldrh	r2, [r2, #8]
 8009022:	fbb3 f3f2 	udiv	r3, r3, r2
 8009026:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009028:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800902a:	8b7b      	ldrh	r3, [r7, #26]
 800902c:	429a      	cmp	r2, r3
 800902e:	d90b      	bls.n	8009048 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009030:	8b7b      	ldrh	r3, [r7, #26]
 8009032:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009034:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	8912      	ldrh	r2, [r2, #8]
 800903a:	fb02 f203 	mul.w	r2, r2, r3
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	611a      	str	r2, [r3, #16]
 8009042:	e001      	b.n	8009048 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009044:	2301      	movs	r3, #1
 8009046:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	78db      	ldrb	r3, [r3, #3]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d007      	beq.n	8009060 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009050:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	8912      	ldrh	r2, [r2, #8]
 8009056:	fb02 f203 	mul.w	r2, r2, r3
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	611a      	str	r2, [r3, #16]
 800905e:	e003      	b.n	8009068 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	695a      	ldr	r2, [r3, #20]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009070:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009072:	04d9      	lsls	r1, r3, #19
 8009074:	4b63      	ldr	r3, [pc, #396]	; (8009204 <USB_HC_StartXfer+0x280>)
 8009076:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009078:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	7a9b      	ldrb	r3, [r3, #10]
 800907e:	075b      	lsls	r3, r3, #29
 8009080:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009084:	69f9      	ldr	r1, [r7, #28]
 8009086:	0148      	lsls	r0, r1, #5
 8009088:	6a39      	ldr	r1, [r7, #32]
 800908a:	4401      	add	r1, r0
 800908c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009090:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009092:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009094:	79fb      	ldrb	r3, [r7, #7]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d009      	beq.n	80090ae <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	68d9      	ldr	r1, [r3, #12]
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	015a      	lsls	r2, r3, #5
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	4413      	add	r3, r2
 80090a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090aa:	460a      	mov	r2, r1
 80090ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	bf0c      	ite	eq
 80090be:	2301      	moveq	r3, #1
 80090c0:	2300      	movne	r3, #0
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	015a      	lsls	r2, r3, #5
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	4413      	add	r3, r2
 80090ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	69fa      	ldr	r2, [r7, #28]
 80090d6:	0151      	lsls	r1, r2, #5
 80090d8:	6a3a      	ldr	r2, [r7, #32]
 80090da:	440a      	add	r2, r1
 80090dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	7e7b      	ldrb	r3, [r7, #25]
 80090f6:	075b      	lsls	r3, r3, #29
 80090f8:	69f9      	ldr	r1, [r7, #28]
 80090fa:	0148      	lsls	r0, r1, #5
 80090fc:	6a39      	ldr	r1, [r7, #32]
 80090fe:	4401      	add	r1, r0
 8009100:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009104:	4313      	orrs	r3, r2
 8009106:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	4413      	add	r3, r2
 8009110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800911e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	78db      	ldrb	r3, [r3, #3]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d004      	beq.n	8009132 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800912e:	613b      	str	r3, [r7, #16]
 8009130:	e003      	b.n	800913a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009138:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009140:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	4413      	add	r3, r2
 800914a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800914e:	461a      	mov	r2, r3
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009154:	79fb      	ldrb	r3, [r7, #7]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	e04e      	b.n	80091fc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	78db      	ldrb	r3, [r3, #3]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d149      	bne.n	80091fa <USB_HC_StartXfer+0x276>
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d045      	beq.n	80091fa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	79db      	ldrb	r3, [r3, #7]
 8009172:	2b03      	cmp	r3, #3
 8009174:	d830      	bhi.n	80091d8 <USB_HC_StartXfer+0x254>
 8009176:	a201      	add	r2, pc, #4	; (adr r2, 800917c <USB_HC_StartXfer+0x1f8>)
 8009178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917c:	0800918d 	.word	0x0800918d
 8009180:	080091b1 	.word	0x080091b1
 8009184:	0800918d 	.word	0x0800918d
 8009188:	080091b1 	.word	0x080091b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	3303      	adds	r3, #3
 8009192:	089b      	lsrs	r3, r3, #2
 8009194:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009196:	8afa      	ldrh	r2, [r7, #22]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	b29b      	uxth	r3, r3
 800919e:	429a      	cmp	r2, r3
 80091a0:	d91c      	bls.n	80091dc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	f043 0220 	orr.w	r2, r3, #32
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80091ae:	e015      	b.n	80091dc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	695b      	ldr	r3, [r3, #20]
 80091b4:	3303      	adds	r3, #3
 80091b6:	089b      	lsrs	r3, r3, #2
 80091b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80091ba:	8afa      	ldrh	r2, [r7, #22]
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d90a      	bls.n	80091e0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80091d6:	e003      	b.n	80091e0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80091d8:	bf00      	nop
 80091da:	e002      	b.n	80091e2 <USB_HC_StartXfer+0x25e>
        break;
 80091dc:	bf00      	nop
 80091de:	e000      	b.n	80091e2 <USB_HC_StartXfer+0x25e>
        break;
 80091e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	68d9      	ldr	r1, [r3, #12]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	785a      	ldrb	r2, [r3, #1]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2000      	movs	r0, #0
 80091f2:	9000      	str	r0, [sp, #0]
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7ff fb53 	bl	80088a0 <USB_WritePacket>
  }

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3728      	adds	r7, #40	; 0x28
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	1ff80000 	.word	0x1ff80000

08009208 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	b29b      	uxth	r3, r3
}
 800921e:	4618      	mov	r0, r3
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800922a:	b480      	push	{r7}
 800922c:	b089      	sub	sp, #36	; 0x24
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	460b      	mov	r3, r1
 8009234:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800923a:	78fb      	ldrb	r3, [r7, #3]
 800923c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	4413      	add	r3, r2
 800924a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	0c9b      	lsrs	r3, r3, #18
 8009252:	f003 0303 	and.w	r3, r3, #3
 8009256:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	4413      	add	r3, r2
 8009260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	0fdb      	lsrs	r3, r3, #31
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f003 0320 	and.w	r3, r3, #32
 8009276:	2b20      	cmp	r3, #32
 8009278:	d104      	bne.n	8009284 <USB_HC_Halt+0x5a>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	e0e8      	b.n	8009456 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <USB_HC_Halt+0x66>
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2b02      	cmp	r3, #2
 800928e:	d173      	bne.n	8009378 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	4413      	add	r3, r2
 8009298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	0151      	lsls	r1, r2, #5
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	440a      	add	r2, r1
 80092a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f003 0320 	and.w	r3, r3, #32
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f040 80cb 	bne.w	8009454 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d143      	bne.n	8009352 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	0151      	lsls	r1, r2, #5
 80092dc:	69ba      	ldr	r2, [r7, #24]
 80092de:	440a      	add	r2, r1
 80092e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	0151      	lsls	r1, r2, #5
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	440a      	add	r2, r1
 8009300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009308:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	4413      	add	r3, r2
 8009312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	0151      	lsls	r1, r2, #5
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	440a      	add	r2, r1
 8009320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009324:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009328:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	3301      	adds	r3, #1
 800932e:	61fb      	str	r3, [r7, #28]
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009336:	d81d      	bhi.n	8009374 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	015a      	lsls	r2, r3, #5
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	4413      	add	r3, r2
 8009340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800934a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800934e:	d0ec      	beq.n	800932a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009350:	e080      	b.n	8009454 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	015a      	lsls	r2, r3, #5
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	4413      	add	r3, r2
 800935a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	0151      	lsls	r1, r2, #5
 8009364:	69ba      	ldr	r2, [r7, #24]
 8009366:	440a      	add	r2, r1
 8009368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800936c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009370:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009372:	e06f      	b.n	8009454 <USB_HC_Halt+0x22a>
            break;
 8009374:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009376:	e06d      	b.n	8009454 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	4413      	add	r3, r2
 8009380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	0151      	lsls	r1, r2, #5
 800938a:	69ba      	ldr	r2, [r7, #24]
 800938c:	440a      	add	r2, r1
 800938e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009392:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009396:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d143      	bne.n	8009430 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	0151      	lsls	r1, r2, #5
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	440a      	add	r2, r1
 80093be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	0151      	lsls	r1, r2, #5
 80093da:	69ba      	ldr	r2, [r7, #24]
 80093dc:	440a      	add	r2, r1
 80093de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	0151      	lsls	r1, r2, #5
 80093fa:	69ba      	ldr	r2, [r7, #24]
 80093fc:	440a      	add	r2, r1
 80093fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009402:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009406:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	3301      	adds	r3, #1
 800940c:	61fb      	str	r3, [r7, #28]
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009414:	d81d      	bhi.n	8009452 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	4413      	add	r3, r2
 800941e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800942c:	d0ec      	beq.n	8009408 <USB_HC_Halt+0x1de>
 800942e:	e011      	b.n	8009454 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	4413      	add	r3, r2
 8009438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	0151      	lsls	r1, r2, #5
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	440a      	add	r2, r1
 8009446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800944a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	e000      	b.n	8009454 <USB_HC_Halt+0x22a>
          break;
 8009452:	bf00      	nop
    }
  }

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3724      	adds	r7, #36	; 0x24
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
	...

08009464 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009478:	2301      	movs	r3, #1
 800947a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	04da      	lsls	r2, r3, #19
 8009480:	4b15      	ldr	r3, [pc, #84]	; (80094d8 <USB_DoPing+0x74>)
 8009482:	4013      	ands	r3, r2
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	0151      	lsls	r1, r2, #5
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	440a      	add	r2, r1
 800948c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009490:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009494:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	4413      	add	r3, r2
 800949e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094ac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094b4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094c2:	461a      	mov	r2, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	371c      	adds	r7, #28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	1ff80000 	.word	0x1ff80000

080094dc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7ff f935 	bl	800875c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80094f2:	2110      	movs	r1, #16
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff f98f 	bl	8008818 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff f9b0 	bl	8008860 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009500:	2300      	movs	r3, #0
 8009502:	613b      	str	r3, [r7, #16]
 8009504:	e01f      	b.n	8009546 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	015a      	lsls	r2, r3, #5
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	4413      	add	r3, r2
 800950e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800951c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009524:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800952c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	4413      	add	r3, r2
 8009536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800953a:	461a      	mov	r2, r3
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	3301      	adds	r3, #1
 8009544:	613b      	str	r3, [r7, #16]
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	2b0f      	cmp	r3, #15
 800954a:	d9dc      	bls.n	8009506 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800954c:	2300      	movs	r3, #0
 800954e:	613b      	str	r3, [r7, #16]
 8009550:	e034      	b.n	80095bc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	4413      	add	r3, r2
 800955a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009568:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009570:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009578:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	015a      	lsls	r2, r3, #5
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4413      	add	r3, r2
 8009582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009586:	461a      	mov	r2, r3
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	3301      	adds	r3, #1
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009598:	d80c      	bhi.n	80095b4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095b0:	d0ec      	beq.n	800958c <USB_StopHost+0xb0>
 80095b2:	e000      	b.n	80095b6 <USB_StopHost+0xda>
        break;
 80095b4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	3301      	adds	r3, #1
 80095ba:	613b      	str	r3, [r7, #16]
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	2b0f      	cmp	r3, #15
 80095c0:	d9c7      	bls.n	8009552 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095c8:	461a      	mov	r2, r3
 80095ca:	f04f 33ff 	mov.w	r3, #4294967295
 80095ce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f04f 32ff 	mov.w	r2, #4294967295
 80095d6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7ff f8ae 	bl	800873a <USB_EnableGlobalInt>

  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80095e8:	b590      	push	{r4, r7, lr}
 80095ea:	b089      	sub	sp, #36	; 0x24
 80095ec:	af04      	add	r7, sp, #16
 80095ee:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80095f0:	2301      	movs	r3, #1
 80095f2:	2202      	movs	r2, #2
 80095f4:	2102      	movs	r1, #2
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fcb8 	bl	8009f6c <USBH_FindInterface>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	2bff      	cmp	r3, #255	; 0xff
 8009604:	d002      	beq.n	800960c <USBH_CDC_InterfaceInit+0x24>
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d901      	bls.n	8009610 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800960c:	2302      	movs	r3, #2
 800960e:	e13d      	b.n	800988c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fc8d 	bl	8009f34 <USBH_SelectInterface>
 800961a:	4603      	mov	r3, r0
 800961c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800961e:	7bbb      	ldrb	r3, [r7, #14]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009624:	2302      	movs	r3, #2
 8009626:	e131      	b.n	800988c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800962e:	2050      	movs	r0, #80	; 0x50
 8009630:	f004 fd60 	bl	800e0f4 <malloc>
 8009634:	4603      	mov	r3, r0
 8009636:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009648:	2302      	movs	r3, #2
 800964a:	e11f      	b.n	800988c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800964c:	2250      	movs	r2, #80	; 0x50
 800964e:	2100      	movs	r1, #0
 8009650:	68b8      	ldr	r0, [r7, #8]
 8009652:	f004 fd6d 	bl	800e130 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	211a      	movs	r1, #26
 800965c:	fb01 f303 	mul.w	r3, r1, r3
 8009660:	4413      	add	r3, r2
 8009662:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	b25b      	sxtb	r3, r3
 800966a:	2b00      	cmp	r3, #0
 800966c:	da15      	bge.n	800969a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	211a      	movs	r1, #26
 8009674:	fb01 f303 	mul.w	r3, r1, r3
 8009678:	4413      	add	r3, r2
 800967a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800967e:	781a      	ldrb	r2, [r3, #0]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	211a      	movs	r1, #26
 800968a:	fb01 f303 	mul.w	r3, r1, r3
 800968e:	4413      	add	r3, r2
 8009690:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009694:	881a      	ldrh	r2, [r3, #0]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	785b      	ldrb	r3, [r3, #1]
 800969e:	4619      	mov	r1, r3
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f002 f890 	bl	800b7c6 <USBH_AllocPipe>
 80096a6:	4603      	mov	r3, r0
 80096a8:	461a      	mov	r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	7819      	ldrb	r1, [r3, #0]
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	7858      	ldrb	r0, [r3, #1]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	8952      	ldrh	r2, [r2, #10]
 80096c6:	9202      	str	r2, [sp, #8]
 80096c8:	2203      	movs	r2, #3
 80096ca:	9201      	str	r2, [sp, #4]
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	4623      	mov	r3, r4
 80096d0:	4602      	mov	r2, r0
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f002 f848 	bl	800b768 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2200      	movs	r2, #0
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f004 fc35 	bl	800df50 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80096e6:	2300      	movs	r3, #0
 80096e8:	2200      	movs	r2, #0
 80096ea:	210a      	movs	r1, #10
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fc3d 	bl	8009f6c <USBH_FindInterface>
 80096f2:	4603      	mov	r3, r0
 80096f4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	2bff      	cmp	r3, #255	; 0xff
 80096fa:	d002      	beq.n	8009702 <USBH_CDC_InterfaceInit+0x11a>
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d901      	bls.n	8009706 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009702:	2302      	movs	r3, #2
 8009704:	e0c2      	b.n	800988c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009706:	7bfb      	ldrb	r3, [r7, #15]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	211a      	movs	r1, #26
 800970c:	fb01 f303 	mul.w	r3, r1, r3
 8009710:	4413      	add	r3, r2
 8009712:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	b25b      	sxtb	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	da16      	bge.n	800974c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	211a      	movs	r1, #26
 8009724:	fb01 f303 	mul.w	r3, r1, r3
 8009728:	4413      	add	r3, r2
 800972a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800972e:	781a      	ldrb	r2, [r3, #0]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	211a      	movs	r1, #26
 800973a:	fb01 f303 	mul.w	r3, r1, r3
 800973e:	4413      	add	r3, r2
 8009740:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009744:	881a      	ldrh	r2, [r3, #0]
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	835a      	strh	r2, [r3, #26]
 800974a:	e015      	b.n	8009778 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	211a      	movs	r1, #26
 8009752:	fb01 f303 	mul.w	r3, r1, r3
 8009756:	4413      	add	r3, r2
 8009758:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800975c:	781a      	ldrb	r2, [r3, #0]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	211a      	movs	r1, #26
 8009768:	fb01 f303 	mul.w	r3, r1, r3
 800976c:	4413      	add	r3, r2
 800976e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009772:	881a      	ldrh	r2, [r3, #0]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	211a      	movs	r1, #26
 800977e:	fb01 f303 	mul.w	r3, r1, r3
 8009782:	4413      	add	r3, r2
 8009784:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	b25b      	sxtb	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	da16      	bge.n	80097be <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	211a      	movs	r1, #26
 8009796:	fb01 f303 	mul.w	r3, r1, r3
 800979a:	4413      	add	r3, r2
 800979c:	f203 3356 	addw	r3, r3, #854	; 0x356
 80097a0:	781a      	ldrb	r2, [r3, #0]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	211a      	movs	r1, #26
 80097ac:	fb01 f303 	mul.w	r3, r1, r3
 80097b0:	4413      	add	r3, r2
 80097b2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80097b6:	881a      	ldrh	r2, [r3, #0]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	835a      	strh	r2, [r3, #26]
 80097bc:	e015      	b.n	80097ea <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	211a      	movs	r1, #26
 80097c4:	fb01 f303 	mul.w	r3, r1, r3
 80097c8:	4413      	add	r3, r2
 80097ca:	f203 3356 	addw	r3, r3, #854	; 0x356
 80097ce:	781a      	ldrb	r2, [r3, #0]
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	211a      	movs	r1, #26
 80097da:	fb01 f303 	mul.w	r3, r1, r3
 80097de:	4413      	add	r3, r2
 80097e0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80097e4:	881a      	ldrh	r2, [r3, #0]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	7b9b      	ldrb	r3, [r3, #14]
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f001 ffe8 	bl	800b7c6 <USBH_AllocPipe>
 80097f6:	4603      	mov	r3, r0
 80097f8:	461a      	mov	r2, r3
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	7bdb      	ldrb	r3, [r3, #15]
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f001 ffde 	bl	800b7c6 <USBH_AllocPipe>
 800980a:	4603      	mov	r3, r0
 800980c:	461a      	mov	r2, r3
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	7b59      	ldrb	r1, [r3, #13]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	7b98      	ldrb	r0, [r3, #14]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	8b12      	ldrh	r2, [r2, #24]
 800982a:	9202      	str	r2, [sp, #8]
 800982c:	2202      	movs	r2, #2
 800982e:	9201      	str	r2, [sp, #4]
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	4623      	mov	r3, r4
 8009834:	4602      	mov	r2, r0
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f001 ff96 	bl	800b768 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	7b19      	ldrb	r1, [r3, #12]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	7bd8      	ldrb	r0, [r3, #15]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	8b52      	ldrh	r2, [r2, #26]
 8009854:	9202      	str	r2, [sp, #8]
 8009856:	2202      	movs	r2, #2
 8009858:	9201      	str	r2, [sp, #4]
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	4623      	mov	r3, r4
 800985e:	4602      	mov	r2, r0
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f001 ff81 	bl	800b768 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	7b5b      	ldrb	r3, [r3, #13]
 8009872:	2200      	movs	r2, #0
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f004 fb6a 	bl	800df50 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	7b1b      	ldrb	r3, [r3, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	4619      	mov	r1, r3
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f004 fb63 	bl	800df50 <USBH_LL_SetToggle>

  return USBH_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	bd90      	pop	{r4, r7, pc}

08009894 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098a2:	69db      	ldr	r3, [r3, #28]
 80098a4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00e      	beq.n	80098cc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	4619      	mov	r1, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f001 ff76 	bl	800b7a6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f001 ffa1 	bl	800b808 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	7b1b      	ldrb	r3, [r3, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00e      	beq.n	80098f2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	7b1b      	ldrb	r3, [r3, #12]
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f001 ff63 	bl	800b7a6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	7b1b      	ldrb	r3, [r3, #12]
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 ff8e 	bl	800b808 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	7b5b      	ldrb	r3, [r3, #13]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00e      	beq.n	8009918 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	7b5b      	ldrb	r3, [r3, #13]
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f001 ff50 	bl	800b7a6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	7b5b      	ldrb	r3, [r3, #13]
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f001 ff7b 	bl	800b808 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00b      	beq.n	800993c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	4618      	mov	r0, r3
 800992e:	f004 fbe9 	bl	800e104 <free>
    phost->pActiveClass->pData = 0U;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009938:	2200      	movs	r2, #0
 800993a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3340      	adds	r3, #64	; 0x40
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f8b1 	bl	8009ac6 <GetLineCoding>
 8009964:	4603      	mov	r3, r0
 8009966:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009968:	7afb      	ldrb	r3, [r7, #11]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d105      	bne.n	800997a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009974:	2102      	movs	r1, #2
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800997a:	7afb      	ldrb	r3, [r7, #11]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800998c:	2301      	movs	r3, #1
 800998e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800999a:	69db      	ldr	r3, [r3, #28]
 800999c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80099a4:	2b04      	cmp	r3, #4
 80099a6:	d877      	bhi.n	8009a98 <USBH_CDC_Process+0x114>
 80099a8:	a201      	add	r2, pc, #4	; (adr r2, 80099b0 <USBH_CDC_Process+0x2c>)
 80099aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ae:	bf00      	nop
 80099b0:	080099c5 	.word	0x080099c5
 80099b4:	080099cb 	.word	0x080099cb
 80099b8:	080099fb 	.word	0x080099fb
 80099bc:	08009a6f 	.word	0x08009a6f
 80099c0:	08009a7d 	.word	0x08009a7d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73fb      	strb	r3, [r7, #15]
      break;
 80099c8:	e06d      	b.n	8009aa6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f897 	bl	8009b04 <SetLineCoding>
 80099d6:	4603      	mov	r3, r0
 80099d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d104      	bne.n	80099ea <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80099e8:	e058      	b.n	8009a9c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80099ea:	7bbb      	ldrb	r3, [r7, #14]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d055      	beq.n	8009a9c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	2204      	movs	r2, #4
 80099f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80099f8:	e050      	b.n	8009a9c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	3340      	adds	r3, #64	; 0x40
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f860 	bl	8009ac6 <GetLineCoding>
 8009a06:	4603      	mov	r3, r0
 8009a08:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d126      	bne.n	8009a5e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a22:	791b      	ldrb	r3, [r3, #4]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d13b      	bne.n	8009aa0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a32:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d133      	bne.n	8009aa0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a42:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d12b      	bne.n	8009aa0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a50:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d124      	bne.n	8009aa0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f982 	bl	8009d60 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009a5c:	e020      	b.n	8009aa0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009a5e:	7bbb      	ldrb	r3, [r7, #14]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d01d      	beq.n	8009aa0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2204      	movs	r2, #4
 8009a68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009a6c:	e018      	b.n	8009aa0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f867 	bl	8009b42 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f8f6 	bl	8009c66 <CDC_ProcessReception>
      break;
 8009a7a:	e014      	b.n	8009aa6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f001 f951 	bl	800ad26 <USBH_ClrFeature>
 8009a84:	4603      	mov	r3, r0
 8009a86:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10a      	bne.n	8009aa4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009a96:	e005      	b.n	8009aa4 <USBH_CDC_Process+0x120>

    default:
      break;
 8009a98:	bf00      	nop
 8009a9a:	e004      	b.n	8009aa6 <USBH_CDC_Process+0x122>
      break;
 8009a9c:	bf00      	nop
 8009a9e:	e002      	b.n	8009aa6 <USBH_CDC_Process+0x122>
      break;
 8009aa0:	bf00      	nop
 8009aa2:	e000      	b.n	8009aa6 <USBH_CDC_Process+0x122>
      break;
 8009aa4:	bf00      	nop

  }

  return status;
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	22a1      	movs	r2, #161	; 0xa1
 8009ad4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2221      	movs	r2, #33	; 0x21
 8009ada:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2207      	movs	r2, #7
 8009aec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2207      	movs	r2, #7
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f001 faf6 	bl	800b0e6 <USBH_CtlReq>
 8009afa:	4603      	mov	r3, r0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2221      	movs	r2, #33	; 0x21
 8009b12:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2220      	movs	r2, #32
 8009b18:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2207      	movs	r2, #7
 8009b2a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2207      	movs	r2, #7
 8009b30:	4619      	mov	r1, r3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f001 fad7 	bl	800b0e6 <USBH_CtlReq>
 8009b38:	4603      	mov	r3, r0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b086      	sub	sp, #24
 8009b46:	af02      	add	r7, sp, #8
 8009b48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009b54:	2300      	movs	r3, #0
 8009b56:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d002      	beq.n	8009b68 <CDC_ProcessTransmission+0x26>
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d023      	beq.n	8009bae <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009b66:	e07a      	b.n	8009c5e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	8b12      	ldrh	r2, [r2, #24]
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d90b      	bls.n	8009b8c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	69d9      	ldr	r1, [r3, #28]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	8b1a      	ldrh	r2, [r3, #24]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	7b5b      	ldrb	r3, [r3, #13]
 8009b80:	2001      	movs	r0, #1
 8009b82:	9000      	str	r0, [sp, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f001 fdac 	bl	800b6e2 <USBH_BulkSendData>
 8009b8a:	e00b      	b.n	8009ba4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	7b5b      	ldrb	r3, [r3, #13]
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	9000      	str	r0, [sp, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f001 fd9f 	bl	800b6e2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009bac:	e057      	b.n	8009c5e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	7b5b      	ldrb	r3, [r3, #13]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f004 f9a1 	bl	800defc <USBH_LL_GetURBState>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009bbe:	7afb      	ldrb	r3, [r7, #11]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d136      	bne.n	8009c32 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	8b12      	ldrh	r2, [r2, #24]
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d90e      	bls.n	8009bee <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	8b12      	ldrh	r2, [r2, #24]
 8009bd8:	1a9a      	subs	r2, r3, r2
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	69db      	ldr	r3, [r3, #28]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	8b12      	ldrh	r2, [r2, #24]
 8009be6:	441a      	add	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	61da      	str	r2, [r3, #28]
 8009bec:	e002      	b.n	8009bf4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d004      	beq.n	8009c06 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009c04:	e006      	b.n	8009c14 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f892 	bl	8009d38 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2204      	movs	r2, #4
 8009c18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c28:	2200      	movs	r2, #0
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	f001 fee0 	bl	800b9f0 <osMessagePut>
      break;
 8009c30:	e014      	b.n	8009c5c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8009c32:	7afb      	ldrb	r3, [r7, #11]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d111      	bne.n	8009c5c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2204      	movs	r2, #4
 8009c44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c54:	2200      	movs	r2, #0
 8009c56:	4619      	mov	r1, r3
 8009c58:	f001 feca 	bl	800b9f0 <osMessagePut>
      break;
 8009c5c:	bf00      	nop
  }
}
 8009c5e:	bf00      	nop
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b086      	sub	sp, #24
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009c82:	2b03      	cmp	r3, #3
 8009c84:	d002      	beq.n	8009c8c <CDC_ProcessReception+0x26>
 8009c86:	2b04      	cmp	r3, #4
 8009c88:	d00e      	beq.n	8009ca8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009c8a:	e051      	b.n	8009d30 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	6a19      	ldr	r1, [r3, #32]
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	8b5a      	ldrh	r2, [r3, #26]
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	7b1b      	ldrb	r3, [r3, #12]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 fd47 	bl	800b72c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2204      	movs	r2, #4
 8009ca2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009ca6:	e043      	b.n	8009d30 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	7b1b      	ldrb	r3, [r3, #12]
 8009cac:	4619      	mov	r1, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f004 f924 	bl	800defc <USBH_LL_GetURBState>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009cb8:	7cfb      	ldrb	r3, [r7, #19]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d137      	bne.n	8009d2e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	7b1b      	ldrb	r3, [r3, #12]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f004 f887 	bl	800ddd8 <USBH_LL_GetLastXferSize>
 8009cca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d016      	beq.n	8009d04 <CDC_ProcessReception+0x9e>
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	8b5b      	ldrh	r3, [r3, #26]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d910      	bls.n	8009d04 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	1ad2      	subs	r2, r2, r3
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	6a1a      	ldr	r2, [r3, #32]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	441a      	add	r2, r3
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2203      	movs	r2, #3
 8009cfe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8009d02:	e006      	b.n	8009d12 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f81d 	bl	8009d4c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2204      	movs	r2, #4
 8009d16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009d26:	2200      	movs	r2, #0
 8009d28:	4619      	mov	r1, r3
 8009d2a:	f001 fe61 	bl	800b9f0 <osMessagePut>
      break;
 8009d2e:	bf00      	nop
  }
}
 8009d30:	bf00      	nop
 8009d32:	3718      	adds	r7, #24
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009d74:	b5b0      	push	{r4, r5, r7, lr}
 8009d76:	b090      	sub	sp, #64	; 0x40
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009d88:	2302      	movs	r3, #2
 8009d8a:	e04d      	b.n	8009e28 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	79fa      	ldrb	r2, [r7, #7]
 8009d90:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f000 f847 	bl	8009e38 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d003      	beq.n	8009dd8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8009dd8:	4b15      	ldr	r3, [pc, #84]	; (8009e30 <USBH_Init+0xbc>)
 8009dda:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8009dde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8009de4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009de8:	2100      	movs	r1, #0
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 fdd8 	bl	800b9a0 <osMessageCreate>
 8009df0:	4602      	mov	r2, r0
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8009df8:	4b0e      	ldr	r3, [pc, #56]	; (8009e34 <USBH_Init+0xc0>)
 8009dfa:	f107 0414 	add.w	r4, r7, #20
 8009dfe:	461d      	mov	r5, r3
 8009e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009e08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8009e0c:	f107 0314 	add.w	r3, r7, #20
 8009e10:	68f9      	ldr	r1, [r7, #12]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f001 fd64 	bl	800b8e0 <osThreadCreate>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f003 ff1b 	bl	800dc5c <USBH_LL_Init>

  return USBH_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3740      	adds	r7, #64	; 0x40
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8009e30:	08012ca0 	.word	0x08012ca0
 8009e34:	08012cb0 	.word	0x08012cb0

08009e38 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009e40:	2300      	movs	r3, #0
 8009e42:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009e44:	2300      	movs	r3, #0
 8009e46:	60fb      	str	r3, [r7, #12]
 8009e48:	e009      	b.n	8009e5e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	33e0      	adds	r3, #224	; 0xe0
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	2200      	movs	r2, #0
 8009e56:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	60fb      	str	r3, [r7, #12]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2b0e      	cmp	r3, #14
 8009e62:	d9f2      	bls.n	8009e4a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009e64:	2300      	movs	r3, #0
 8009e66:	60fb      	str	r3, [r7, #12]
 8009e68:	e009      	b.n	8009e7e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009e74:	2200      	movs	r2, #0
 8009e76:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	60fb      	str	r3, [r7, #12]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e84:	d3f1      	bcc.n	8009e6a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2240      	movs	r2, #64	; 0x40
 8009eaa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3714      	adds	r7, #20
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d016      	beq.n	8009f22 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10e      	bne.n	8009f1c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009f04:	1c59      	adds	r1, r3, #1
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	33de      	adds	r3, #222	; 0xde
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	73fb      	strb	r3, [r7, #15]
 8009f1a:	e004      	b.n	8009f26 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	73fb      	strb	r3, [r7, #15]
 8009f20:	e001      	b.n	8009f26 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009f22:	2302      	movs	r3, #2
 8009f24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009f4a:	78fa      	ldrb	r2, [r7, #3]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d204      	bcs.n	8009f5a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	78fa      	ldrb	r2, [r7, #3]
 8009f54:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009f58:	e001      	b.n	8009f5e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3714      	adds	r7, #20
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b087      	sub	sp, #28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	4608      	mov	r0, r1
 8009f76:	4611      	mov	r1, r2
 8009f78:	461a      	mov	r2, r3
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	70fb      	strb	r3, [r7, #3]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	70bb      	strb	r3, [r7, #2]
 8009f82:	4613      	mov	r3, r2
 8009f84:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009f94:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f96:	e025      	b.n	8009fe4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009f98:	7dfb      	ldrb	r3, [r7, #23]
 8009f9a:	221a      	movs	r2, #26
 8009f9c:	fb02 f303 	mul.w	r3, r2, r3
 8009fa0:	3308      	adds	r3, #8
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	3302      	adds	r3, #2
 8009fa8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	795b      	ldrb	r3, [r3, #5]
 8009fae:	78fa      	ldrb	r2, [r7, #3]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d002      	beq.n	8009fba <USBH_FindInterface+0x4e>
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	2bff      	cmp	r3, #255	; 0xff
 8009fb8:	d111      	bne.n	8009fde <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009fbe:	78ba      	ldrb	r2, [r7, #2]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d002      	beq.n	8009fca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009fc4:	78bb      	ldrb	r3, [r7, #2]
 8009fc6:	2bff      	cmp	r3, #255	; 0xff
 8009fc8:	d109      	bne.n	8009fde <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009fce:	787a      	ldrb	r2, [r7, #1]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d002      	beq.n	8009fda <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009fd4:	787b      	ldrb	r3, [r7, #1]
 8009fd6:	2bff      	cmp	r3, #255	; 0xff
 8009fd8:	d101      	bne.n	8009fde <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
 8009fdc:	e006      	b.n	8009fec <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009fde:	7dfb      	ldrb	r3, [r7, #23]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009fe4:	7dfb      	ldrb	r3, [r7, #23]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d9d6      	bls.n	8009f98 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009fea:	23ff      	movs	r3, #255	; 0xff
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	371c      	adds	r7, #28
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f003 fe71 	bl	800dce8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a006:	2101      	movs	r1, #1
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f003 ff8a 	bl	800df22 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af04      	add	r7, sp, #16
 800a01e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a020:	2302      	movs	r3, #2
 800a022:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a024:	2300      	movs	r3, #0
 800a026:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	2b01      	cmp	r3, #1
 800a032:	d102      	bne.n	800a03a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2203      	movs	r2, #3
 800a038:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	2b0b      	cmp	r3, #11
 800a042:	f200 823c 	bhi.w	800a4be <USBH_Process+0x4a6>
 800a046:	a201      	add	r2, pc, #4	; (adr r2, 800a04c <USBH_Process+0x34>)
 800a048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04c:	0800a07d 	.word	0x0800a07d
 800a050:	0800a0cb 	.word	0x0800a0cb
 800a054:	0800a14f 	.word	0x0800a14f
 800a058:	0800a43d 	.word	0x0800a43d
 800a05c:	0800a4bf 	.word	0x0800a4bf
 800a060:	0800a20f 	.word	0x0800a20f
 800a064:	0800a3c7 	.word	0x0800a3c7
 800a068:	0800a261 	.word	0x0800a261
 800a06c:	0800a29d 	.word	0x0800a29d
 800a070:	0800a2d7 	.word	0x0800a2d7
 800a074:	0800a31f 	.word	0x0800a31f
 800a078:	0800a425 	.word	0x0800a425
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 821c 	beq.w	800a4c2 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a090:	20c8      	movs	r0, #200	; 0xc8
 800a092:	f003 ff8d 	bl	800dfb0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f003 fe83 	bl	800dda2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	f001 fc94 	bl	800b9f0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a0c8:	e1fb      	b.n	800a4c2 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d107      	bne.n	800a0e4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2202      	movs	r2, #2
 800a0e0:	701a      	strb	r2, [r3, #0]
 800a0e2:	e025      	b.n	800a130 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a0ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0ee:	d914      	bls.n	800a11a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a106:	2b03      	cmp	r3, #3
 800a108:	d903      	bls.n	800a112 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	220d      	movs	r2, #13
 800a10e:	701a      	strb	r2, [r3, #0]
 800a110:	e00e      	b.n	800a130 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	701a      	strb	r2, [r3, #0]
 800a118:	e00a      	b.n	800a130 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a120:	f103 020a 	add.w	r2, r3, #10
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a12a:	200a      	movs	r0, #10
 800a12c:	f003 ff40 	bl	800dfb0 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a144:	2200      	movs	r2, #0
 800a146:	4619      	mov	r1, r3
 800a148:	f001 fc52 	bl	800b9f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a14c:	e1c0      	b.n	800a4d0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a154:	2b00      	cmp	r3, #0
 800a156:	d005      	beq.n	800a164 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a15e:	2104      	movs	r1, #4
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a164:	2064      	movs	r0, #100	; 0x64
 800a166:	f003 ff23 	bl	800dfb0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f003 fdf2 	bl	800dd54 <USBH_LL_GetSpeed>
 800a170:	4603      	mov	r3, r0
 800a172:	461a      	mov	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2205      	movs	r2, #5
 800a17e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a180:	2100      	movs	r1, #0
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f001 fb1f 	bl	800b7c6 <USBH_AllocPipe>
 800a188:	4603      	mov	r3, r0
 800a18a:	461a      	mov	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a190:	2180      	movs	r1, #128	; 0x80
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f001 fb17 	bl	800b7c6 <USBH_AllocPipe>
 800a198:	4603      	mov	r3, r0
 800a19a:	461a      	mov	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	7919      	ldrb	r1, [r3, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a1b4:	b292      	uxth	r2, r2
 800a1b6:	9202      	str	r2, [sp, #8]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	9201      	str	r2, [sp, #4]
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2280      	movs	r2, #128	; 0x80
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f001 fad0 	bl	800b768 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	7959      	ldrb	r1, [r3, #5]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a1dc:	b292      	uxth	r2, r2
 800a1de:	9202      	str	r2, [sp, #8]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	9201      	str	r2, [sp, #4]
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f001 fabc 	bl	800b768 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a204:	2200      	movs	r2, #0
 800a206:	4619      	mov	r1, r3
 800a208:	f001 fbf2 	bl	800b9f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a20c:	e160      	b.n	800a4d0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f964 	bl	800a4dc <USBH_HandleEnum>
 800a214:	4603      	mov	r3, r0
 800a216:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a218:	7bbb      	ldrb	r3, [r7, #14]
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f040 8152 	bne.w	800a4c6 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a230:	2b01      	cmp	r3, #1
 800a232:	d103      	bne.n	800a23c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2208      	movs	r2, #8
 800a238:	701a      	strb	r2, [r3, #0]
 800a23a:	e002      	b.n	800a242 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2207      	movs	r2, #7
 800a240:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2205      	movs	r2, #5
 800a246:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a256:	2200      	movs	r2, #0
 800a258:	4619      	mov	r1, r3
 800a25a:	f001 fbc9 	bl	800b9f0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a25e:	e132      	b.n	800a4c6 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a266:	2b00      	cmp	r3, #0
 800a268:	f000 812f 	beq.w	800a4ca <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a272:	2101      	movs	r1, #1
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2208      	movs	r2, #8
 800a27c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2205      	movs	r2, #5
 800a282:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a292:	2200      	movs	r2, #0
 800a294:	4619      	mov	r1, r3
 800a296:	f001 fbab 	bl	800b9f0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a29a:	e116      	b.n	800a4ca <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fcf6 	bl	800ac98 <USBH_SetCfg>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d102      	bne.n	800a2b8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2209      	movs	r2, #9
 800a2b6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	f001 fb8e 	bl	800b9f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a2d4:	e0fc      	b.n	800a4d0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a2dc:	f003 0320 	and.w	r3, r3, #32
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00a      	beq.n	800a2fa <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a2e4:	2101      	movs	r1, #1
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fcf9 	bl	800acde <USBH_SetFeature>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d106      	bne.n	800a300 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	220a      	movs	r2, #10
 800a2f6:	701a      	strb	r2, [r3, #0]
 800a2f8:	e002      	b.n	800a300 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	220a      	movs	r2, #10
 800a2fe:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a314:	2200      	movs	r2, #0
 800a316:	4619      	mov	r1, r3
 800a318:	f001 fb6a 	bl	800b9f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a31c:	e0d8      	b.n	800a4d0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a324:	2b00      	cmp	r3, #0
 800a326:	d03f      	beq.n	800a3a8 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a330:	2300      	movs	r3, #0
 800a332:	73fb      	strb	r3, [r7, #15]
 800a334:	e016      	b.n	800a364 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a336:	7bfa      	ldrb	r2, [r7, #15]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	32de      	adds	r2, #222	; 0xde
 800a33c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a340:	791a      	ldrb	r2, [r3, #4]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a348:	429a      	cmp	r2, r3
 800a34a:	d108      	bne.n	800a35e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a34c:	7bfa      	ldrb	r2, [r7, #15]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	32de      	adds	r2, #222	; 0xde
 800a352:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a35c:	e005      	b.n	800a36a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
 800a360:	3301      	adds	r3, #1
 800a362:	73fb      	strb	r3, [r7, #15]
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d0e5      	beq.n	800a336 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a370:	2b00      	cmp	r3, #0
 800a372:	d016      	beq.n	800a3a2 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	4798      	blx	r3
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d109      	bne.n	800a39a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2206      	movs	r2, #6
 800a38a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a392:	2103      	movs	r1, #3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	4798      	blx	r3
 800a398:	e006      	b.n	800a3a8 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	220d      	movs	r2, #13
 800a39e:	701a      	strb	r2, [r3, #0]
 800a3a0:	e002      	b.n	800a3a8 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	220d      	movs	r2, #13
 800a3a6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2205      	movs	r2, #5
 800a3ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a3bc:	2200      	movs	r2, #0
 800a3be:	4619      	mov	r1, r3
 800a3c0:	f001 fb16 	bl	800b9f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a3c4:	e084      	b.n	800a4d0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d017      	beq.n	800a400 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	4798      	blx	r3
 800a3dc:	4603      	mov	r3, r0
 800a3de:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a3e0:	7bbb      	ldrb	r3, [r7, #14]
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d103      	bne.n	800a3f0 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	220b      	movs	r2, #11
 800a3ec:	701a      	strb	r2, [r3, #0]
 800a3ee:	e00a      	b.n	800a406 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800a3f0:	7bbb      	ldrb	r3, [r7, #14]
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d106      	bne.n	800a406 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	220d      	movs	r2, #13
 800a3fc:	701a      	strb	r2, [r3, #0]
 800a3fe:	e002      	b.n	800a406 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	220d      	movs	r2, #13
 800a404:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2205      	movs	r2, #5
 800a40a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a41a:	2200      	movs	r2, #0
 800a41c:	4619      	mov	r1, r3
 800a41e:	f001 fae7 	bl	800b9f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a422:	e055      	b.n	800a4d0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d04f      	beq.n	800a4ce <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	4798      	blx	r3
      }
      break;
 800a43a:	e048      	b.n	800a4ce <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7ff fcf7 	bl	8009e38 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a450:	2b00      	cmp	r3, #0
 800a452:	d009      	beq.n	800a468 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d005      	beq.n	800a47e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a478:	2105      	movs	r1, #5
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b01      	cmp	r3, #1
 800a488:	d107      	bne.n	800a49a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7ff fdb0 	bl	8009ff8 <USBH_Start>
 800a498:	e002      	b.n	800a4a0 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f003 fc24 	bl	800dce8 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	f001 fa9a 	bl	800b9f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a4bc:	e008      	b.n	800a4d0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a4be:	bf00      	nop
 800a4c0:	e006      	b.n	800a4d0 <USBH_Process+0x4b8>
      break;
 800a4c2:	bf00      	nop
 800a4c4:	e004      	b.n	800a4d0 <USBH_Process+0x4b8>
      break;
 800a4c6:	bf00      	nop
 800a4c8:	e002      	b.n	800a4d0 <USBH_Process+0x4b8>
    break;
 800a4ca:	bf00      	nop
 800a4cc:	e000      	b.n	800a4d0 <USBH_Process+0x4b8>
      break;
 800a4ce:	bf00      	nop
  }
  return USBH_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop

0800a4dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b088      	sub	sp, #32
 800a4e0:	af04      	add	r7, sp, #16
 800a4e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	785b      	ldrb	r3, [r3, #1]
 800a4f0:	2b07      	cmp	r3, #7
 800a4f2:	f200 8208 	bhi.w	800a906 <USBH_HandleEnum+0x42a>
 800a4f6:	a201      	add	r2, pc, #4	; (adr r2, 800a4fc <USBH_HandleEnum+0x20>)
 800a4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fc:	0800a51d 	.word	0x0800a51d
 800a500:	0800a5db 	.word	0x0800a5db
 800a504:	0800a645 	.word	0x0800a645
 800a508:	0800a6d3 	.word	0x0800a6d3
 800a50c:	0800a73d 	.word	0x0800a73d
 800a510:	0800a7ad 	.word	0x0800a7ad
 800a514:	0800a849 	.word	0x0800a849
 800a518:	0800a8c7 	.word	0x0800a8c7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a51c:	2108      	movs	r1, #8
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 faea 	bl	800aaf8 <USBH_Get_DevDesc>
 800a524:	4603      	mov	r3, r0
 800a526:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a528:	7bbb      	ldrb	r3, [r7, #14]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d130      	bne.n	800a590 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	7919      	ldrb	r1, [r3, #4]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a552:	b292      	uxth	r2, r2
 800a554:	9202      	str	r2, [sp, #8]
 800a556:	2200      	movs	r2, #0
 800a558:	9201      	str	r2, [sp, #4]
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	4603      	mov	r3, r0
 800a55e:	2280      	movs	r2, #128	; 0x80
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f001 f901 	bl	800b768 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	7959      	ldrb	r1, [r3, #5]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a57a:	b292      	uxth	r2, r2
 800a57c:	9202      	str	r2, [sp, #8]
 800a57e:	2200      	movs	r2, #0
 800a580:	9201      	str	r2, [sp, #4]
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	4603      	mov	r3, r0
 800a586:	2200      	movs	r2, #0
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f001 f8ed 	bl	800b768 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a58e:	e1bc      	b.n	800a90a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a590:	7bbb      	ldrb	r3, [r7, #14]
 800a592:	2b03      	cmp	r3, #3
 800a594:	f040 81b9 	bne.w	800a90a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a59e:	3301      	adds	r3, #1
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a5ae:	2b03      	cmp	r3, #3
 800a5b0:	d903      	bls.n	800a5ba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	220d      	movs	r2, #13
 800a5b6:	701a      	strb	r2, [r3, #0]
      break;
 800a5b8:	e1a7      	b.n	800a90a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	795b      	ldrb	r3, [r3, #5]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f001 f921 	bl	800b808 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	791b      	ldrb	r3, [r3, #4]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f001 f91b 	bl	800b808 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	701a      	strb	r2, [r3, #0]
      break;
 800a5d8:	e197      	b.n	800a90a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a5da:	2112      	movs	r1, #18
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 fa8b 	bl	800aaf8 <USBH_Get_DevDesc>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5e6:	7bbb      	ldrb	r3, [r7, #14]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d103      	bne.n	800a5f4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2202      	movs	r2, #2
 800a5f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a5f2:	e18c      	b.n	800a90e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5f4:	7bbb      	ldrb	r3, [r7, #14]
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	f040 8189 	bne.w	800a90e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a602:	3301      	adds	r3, #1
 800a604:	b2da      	uxtb	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a612:	2b03      	cmp	r3, #3
 800a614:	d903      	bls.n	800a61e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	220d      	movs	r2, #13
 800a61a:	701a      	strb	r2, [r3, #0]
      break;
 800a61c:	e177      	b.n	800a90e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	795b      	ldrb	r3, [r3, #5]
 800a622:	4619      	mov	r1, r3
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f001 f8ef 	bl	800b808 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	791b      	ldrb	r3, [r3, #4]
 800a62e:	4619      	mov	r1, r3
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f001 f8e9 	bl	800b808 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	701a      	strb	r2, [r3, #0]
      break;
 800a642:	e164      	b.n	800a90e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a644:	2101      	movs	r1, #1
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fb02 	bl	800ac50 <USBH_SetAddress>
 800a64c:	4603      	mov	r3, r0
 800a64e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a650:	7bbb      	ldrb	r3, [r7, #14]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d132      	bne.n	800a6bc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a656:	2002      	movs	r0, #2
 800a658:	f003 fcaa 	bl	800dfb0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2203      	movs	r2, #3
 800a668:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	7919      	ldrb	r1, [r3, #4]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a67e:	b292      	uxth	r2, r2
 800a680:	9202      	str	r2, [sp, #8]
 800a682:	2200      	movs	r2, #0
 800a684:	9201      	str	r2, [sp, #4]
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	4603      	mov	r3, r0
 800a68a:	2280      	movs	r2, #128	; 0x80
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f001 f86b 	bl	800b768 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	7959      	ldrb	r1, [r3, #5]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a6a6:	b292      	uxth	r2, r2
 800a6a8:	9202      	str	r2, [sp, #8]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	9201      	str	r2, [sp, #4]
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f001 f857 	bl	800b768 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a6ba:	e12a      	b.n	800a912 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6bc:	7bbb      	ldrb	r3, [r7, #14]
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	f040 8127 	bne.w	800a912 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	220d      	movs	r2, #13
 800a6c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	705a      	strb	r2, [r3, #1]
      break;
 800a6d0:	e11f      	b.n	800a912 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a6d2:	2109      	movs	r1, #9
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fa37 	bl	800ab48 <USBH_Get_CfgDesc>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6de:	7bbb      	ldrb	r3, [r7, #14]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d103      	bne.n	800a6ec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2204      	movs	r2, #4
 800a6e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a6ea:	e114      	b.n	800a916 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6ec:	7bbb      	ldrb	r3, [r7, #14]
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	f040 8111 	bne.w	800a916 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a70a:	2b03      	cmp	r3, #3
 800a70c:	d903      	bls.n	800a716 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	220d      	movs	r2, #13
 800a712:	701a      	strb	r2, [r3, #0]
      break;
 800a714:	e0ff      	b.n	800a916 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	795b      	ldrb	r3, [r3, #5]
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f001 f873 	bl	800b808 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	791b      	ldrb	r3, [r3, #4]
 800a726:	4619      	mov	r1, r3
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f001 f86d 	bl	800b808 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	701a      	strb	r2, [r3, #0]
      break;
 800a73a:	e0ec      	b.n	800a916 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a742:	4619      	mov	r1, r3
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 f9ff 	bl	800ab48 <USBH_Get_CfgDesc>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a74e:	7bbb      	ldrb	r3, [r7, #14]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d103      	bne.n	800a75c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2205      	movs	r2, #5
 800a758:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a75a:	e0de      	b.n	800a91a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
 800a75e:	2b03      	cmp	r3, #3
 800a760:	f040 80db 	bne.w	800a91a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a76a:	3301      	adds	r3, #1
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	d903      	bls.n	800a786 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	220d      	movs	r2, #13
 800a782:	701a      	strb	r2, [r3, #0]
      break;
 800a784:	e0c9      	b.n	800a91a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	795b      	ldrb	r3, [r3, #5]
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f001 f83b 	bl	800b808 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	791b      	ldrb	r3, [r3, #4]
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f001 f835 	bl	800b808 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	701a      	strb	r2, [r3, #0]
      break;
 800a7aa:	e0b6      	b.n	800a91a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d036      	beq.n	800a824 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a7c2:	23ff      	movs	r3, #255	; 0xff
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f9e3 	bl	800ab90 <USBH_Get_StringDesc>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a7ce:	7bbb      	ldrb	r3, [r7, #14]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d111      	bne.n	800a7f8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2206      	movs	r2, #6
 800a7d8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2205      	movs	r2, #5
 800a7de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	f001 f8fd 	bl	800b9f0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a7f6:	e092      	b.n	800a91e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7f8:	7bbb      	ldrb	r3, [r7, #14]
 800a7fa:	2b03      	cmp	r3, #3
 800a7fc:	f040 808f 	bne.w	800a91e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2206      	movs	r2, #6
 800a804:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2205      	movs	r2, #5
 800a80a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a81a:	2200      	movs	r2, #0
 800a81c:	4619      	mov	r1, r3
 800a81e:	f001 f8e7 	bl	800b9f0 <osMessagePut>
      break;
 800a822:	e07c      	b.n	800a91e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2206      	movs	r2, #6
 800a828:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2205      	movs	r2, #5
 800a82e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a83e:	2200      	movs	r2, #0
 800a840:	4619      	mov	r1, r3
 800a842:	f001 f8d5 	bl	800b9f0 <osMessagePut>
      break;
 800a846:	e06a      	b.n	800a91e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d027      	beq.n	800a8a2 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a85e:	23ff      	movs	r3, #255	; 0xff
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f995 	bl	800ab90 <USBH_Get_StringDesc>
 800a866:	4603      	mov	r3, r0
 800a868:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a86a:	7bbb      	ldrb	r3, [r7, #14]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d103      	bne.n	800a878 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2207      	movs	r2, #7
 800a874:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a876:	e054      	b.n	800a922 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	2b03      	cmp	r3, #3
 800a87c:	d151      	bne.n	800a922 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2207      	movs	r2, #7
 800a882:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2205      	movs	r2, #5
 800a888:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a898:	2200      	movs	r2, #0
 800a89a:	4619      	mov	r1, r3
 800a89c:	f001 f8a8 	bl	800b9f0 <osMessagePut>
      break;
 800a8a0:	e03f      	b.n	800a922 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2207      	movs	r2, #7
 800a8a6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2205      	movs	r2, #5
 800a8ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8bc:	2200      	movs	r2, #0
 800a8be:	4619      	mov	r1, r3
 800a8c0:	f001 f896 	bl	800b9f0 <osMessagePut>
      break;
 800a8c4:	e02d      	b.n	800a922 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d017      	beq.n	800a900 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a8dc:	23ff      	movs	r3, #255	; 0xff
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f956 	bl	800ab90 <USBH_Get_StringDesc>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a8e8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d102      	bne.n	800a8f4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a8f2:	e018      	b.n	800a926 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8f4:	7bbb      	ldrb	r3, [r7, #14]
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d115      	bne.n	800a926 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a8fe:	e012      	b.n	800a926 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	73fb      	strb	r3, [r7, #15]
      break;
 800a904:	e00f      	b.n	800a926 <USBH_HandleEnum+0x44a>

    default:
      break;
 800a906:	bf00      	nop
 800a908:	e00e      	b.n	800a928 <USBH_HandleEnum+0x44c>
      break;
 800a90a:	bf00      	nop
 800a90c:	e00c      	b.n	800a928 <USBH_HandleEnum+0x44c>
      break;
 800a90e:	bf00      	nop
 800a910:	e00a      	b.n	800a928 <USBH_HandleEnum+0x44c>
      break;
 800a912:	bf00      	nop
 800a914:	e008      	b.n	800a928 <USBH_HandleEnum+0x44c>
      break;
 800a916:	bf00      	nop
 800a918:	e006      	b.n	800a928 <USBH_HandleEnum+0x44c>
      break;
 800a91a:	bf00      	nop
 800a91c:	e004      	b.n	800a928 <USBH_HandleEnum+0x44c>
      break;
 800a91e:	bf00      	nop
 800a920:	e002      	b.n	800a928 <USBH_HandleEnum+0x44c>
      break;
 800a922:	bf00      	nop
 800a924:	e000      	b.n	800a928 <USBH_HandleEnum+0x44c>
      break;
 800a926:	bf00      	nop
  }
  return Status;
 800a928:	7bfb      	ldrb	r3, [r7, #15]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop

0800a934 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a946:	bf00      	nop
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b082      	sub	sp, #8
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f804 	bl	800a976 <USBH_HandleSof>
}
 800a96e:	bf00      	nop
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b082      	sub	sp, #8
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b0b      	cmp	r3, #11
 800a986:	d10a      	bne.n	800a99e <USBH_HandleSof+0x28>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d005      	beq.n	800a99e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	4798      	blx	r3
  }
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	f001 f80f 	bl	800b9f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a9d2:	bf00      	nop
}
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a9ea:	bf00      	nop
}
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b082      	sub	sp, #8
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	f000 ffdf 	bl	800b9f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f003 f95e 	bl	800dd1e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	791b      	ldrb	r3, [r3, #4]
 800aa66:	4619      	mov	r1, r3
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fecd 	bl	800b808 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	795b      	ldrb	r3, [r3, #5]
 800aa72:	4619      	mov	r1, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fec7 	bl	800b808 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa8e:	2200      	movs	r2, #0
 800aa90:	4619      	mov	r1, r3
 800aa92:	f000 ffad 	bl	800b9f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800aaae:	f107 030c 	add.w	r3, r7, #12
 800aab2:	f04f 32ff 	mov.w	r2, #4294967295
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 ffda 	bl	800ba70 <osMessageGet>
    if (event.status == osEventMessage)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2b10      	cmp	r3, #16
 800aac0:	d1f2      	bne.n	800aaa8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f7ff faa8 	bl	800a018 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800aac8:	e7ee      	b.n	800aaa8 <USBH_Process_OS+0x8>

0800aaca <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b082      	sub	sp, #8
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aae6:	2200      	movs	r2, #0
 800aae8:	4619      	mov	r1, r3
 800aaea:	f000 ff81 	bl	800b9f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af02      	add	r7, sp, #8
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	460b      	mov	r3, r1
 800ab02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ab0a:	78fb      	ldrb	r3, [r7, #3]
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	4613      	mov	r3, r2
 800ab12:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab16:	2100      	movs	r1, #0
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 f864 	bl	800abe6 <USBH_GetDescriptor>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	73fb      	strb	r3, [r7, #15]
 800ab22:	7bfb      	ldrb	r3, [r7, #15]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10a      	bne.n	800ab3e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ab34:	78fa      	ldrb	r2, [r7, #3]
 800ab36:	b292      	uxth	r2, r2
 800ab38:	4619      	mov	r1, r3
 800ab3a:	f000 f918 	bl	800ad6e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af02      	add	r7, sp, #8
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	460b      	mov	r3, r1
 800ab52:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	331c      	adds	r3, #28
 800ab58:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ab5a:	887b      	ldrh	r3, [r7, #2]
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab64:	2100      	movs	r1, #0
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f83d 	bl	800abe6 <USBH_GetDescriptor>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	72fb      	strb	r3, [r7, #11]
 800ab70:	7afb      	ldrb	r3, [r7, #11]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d107      	bne.n	800ab86 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ab7c:	887a      	ldrh	r2, [r7, #2]
 800ab7e:	68f9      	ldr	r1, [r7, #12]
 800ab80:	4618      	mov	r0, r3
 800ab82:	f000 f964 	bl	800ae4e <USBH_ParseCfgDesc>
  }

  return status;
 800ab86:	7afb      	ldrb	r3, [r7, #11]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b088      	sub	sp, #32
 800ab94:	af02      	add	r7, sp, #8
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	607a      	str	r2, [r7, #4]
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	72fb      	strb	r3, [r7, #11]
 800aba0:	4613      	mov	r3, r2
 800aba2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800aba4:	7afb      	ldrb	r3, [r7, #11]
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800abac:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800abb4:	893b      	ldrh	r3, [r7, #8]
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	460b      	mov	r3, r1
 800abba:	2100      	movs	r1, #0
 800abbc:	68f8      	ldr	r0, [r7, #12]
 800abbe:	f000 f812 	bl	800abe6 <USBH_GetDescriptor>
 800abc2:	4603      	mov	r3, r0
 800abc4:	75fb      	strb	r3, [r7, #23]
 800abc6:	7dfb      	ldrb	r3, [r7, #23]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d107      	bne.n	800abdc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800abd2:	893a      	ldrh	r2, [r7, #8]
 800abd4:	6879      	ldr	r1, [r7, #4]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 fa37 	bl	800b04a <USBH_ParseStringDesc>
  }

  return status;
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b084      	sub	sp, #16
 800abea:	af00      	add	r7, sp, #0
 800abec:	60f8      	str	r0, [r7, #12]
 800abee:	607b      	str	r3, [r7, #4]
 800abf0:	460b      	mov	r3, r1
 800abf2:	72fb      	strb	r3, [r7, #11]
 800abf4:	4613      	mov	r3, r2
 800abf6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	789b      	ldrb	r3, [r3, #2]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d11c      	bne.n	800ac3a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ac00:	7afb      	ldrb	r3, [r7, #11]
 800ac02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac06:	b2da      	uxtb	r2, r3
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2206      	movs	r2, #6
 800ac10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	893a      	ldrh	r2, [r7, #8]
 800ac16:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ac18:	893b      	ldrh	r3, [r7, #8]
 800ac1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ac1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac22:	d104      	bne.n	800ac2e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f240 4209 	movw	r2, #1033	; 0x409
 800ac2a:	829a      	strh	r2, [r3, #20]
 800ac2c:	e002      	b.n	800ac34 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	8b3a      	ldrh	r2, [r7, #24]
 800ac38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ac3a:	8b3b      	ldrh	r3, [r7, #24]
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	6879      	ldr	r1, [r7, #4]
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f000 fa50 	bl	800b0e6 <USBH_CtlReq>
 800ac46:	4603      	mov	r3, r0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	789b      	ldrb	r3, [r3, #2]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d10f      	bne.n	800ac84 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2205      	movs	r2, #5
 800ac6e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ac70:	78fb      	ldrb	r3, [r7, #3]
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ac84:	2200      	movs	r2, #0
 800ac86:	2100      	movs	r1, #0
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fa2c 	bl	800b0e6 <USBH_CtlReq>
 800ac8e:	4603      	mov	r3, r0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	789b      	ldrb	r3, [r3, #2]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d10e      	bne.n	800acca <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2209      	movs	r2, #9
 800acb6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	887a      	ldrh	r2, [r7, #2]
 800acbc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800acca:	2200      	movs	r2, #0
 800accc:	2100      	movs	r1, #0
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fa09 	bl	800b0e6 <USBH_CtlReq>
 800acd4:	4603      	mov	r3, r0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b082      	sub	sp, #8
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	460b      	mov	r3, r1
 800ace8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	789b      	ldrb	r3, [r3, #2]
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d10f      	bne.n	800ad12 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2203      	movs	r2, #3
 800acfc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800acfe:	78fb      	ldrb	r3, [r7, #3]
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ad12:	2200      	movs	r2, #0
 800ad14:	2100      	movs	r1, #0
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f9e5 	bl	800b0e6 <USBH_CtlReq>
 800ad1c:	4603      	mov	r3, r0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	789b      	ldrb	r3, [r3, #2]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d10f      	bne.n	800ad5a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2202      	movs	r2, #2
 800ad3e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ad4c:	78fb      	ldrb	r3, [r7, #3]
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f9c1 	bl	800b0e6 <USBH_CtlReq>
 800ad64:	4603      	mov	r3, r0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b085      	sub	sp, #20
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	60f8      	str	r0, [r7, #12]
 800ad76:	60b9      	str	r1, [r7, #8]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	781a      	ldrb	r2, [r3, #0]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	785a      	ldrb	r2, [r3, #1]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	3302      	adds	r3, #2
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	3303      	adds	r3, #3
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	021b      	lsls	r3, r3, #8
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	4313      	orrs	r3, r2
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	791a      	ldrb	r2, [r3, #4]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	795a      	ldrb	r2, [r3, #5]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	799a      	ldrb	r2, [r3, #6]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	79da      	ldrb	r2, [r3, #7]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800adc8:	88fb      	ldrh	r3, [r7, #6]
 800adca:	2b08      	cmp	r3, #8
 800adcc:	d939      	bls.n	800ae42 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	3308      	adds	r3, #8
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	b29a      	uxth	r2, r3
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	3309      	adds	r3, #9
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	b29b      	uxth	r3, r3
 800adde:	021b      	lsls	r3, r3, #8
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	4313      	orrs	r3, r2
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	330a      	adds	r3, #10
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	330b      	adds	r3, #11
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	021b      	lsls	r3, r3, #8
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	4313      	orrs	r3, r2
 800ae00:	b29a      	uxth	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	330c      	adds	r3, #12
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	330d      	adds	r3, #13
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	021b      	lsls	r3, r3, #8
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	7b9a      	ldrb	r2, [r3, #14]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	7bda      	ldrb	r2, [r3, #15]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	7c1a      	ldrb	r2, [r3, #16]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	7c5a      	ldrb	r2, [r3, #17]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	745a      	strb	r2, [r3, #17]
  }
}
 800ae42:	bf00      	nop
 800ae44:	3714      	adds	r7, #20
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b08a      	sub	sp, #40	; 0x28
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	60f8      	str	r0, [r7, #12]
 800ae56:	60b9      	str	r1, [r7, #8]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ae60:	2300      	movs	r3, #0
 800ae62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ae66:	2300      	movs	r3, #0
 800ae68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	781a      	ldrb	r2, [r3, #0]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	785a      	ldrb	r2, [r3, #1]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	3302      	adds	r3, #2
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	3303      	adds	r3, #3
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	021b      	lsls	r3, r3, #8
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	4313      	orrs	r3, r2
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	791a      	ldrb	r2, [r3, #4]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	795a      	ldrb	r2, [r3, #5]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	799a      	ldrb	r2, [r3, #6]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	79da      	ldrb	r2, [r3, #7]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	7a1a      	ldrb	r2, [r3, #8]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800aec4:	88fb      	ldrh	r3, [r7, #6]
 800aec6:	2b09      	cmp	r3, #9
 800aec8:	d95f      	bls.n	800af8a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800aeca:	2309      	movs	r3, #9
 800aecc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800aece:	2300      	movs	r3, #0
 800aed0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aed2:	e051      	b.n	800af78 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aed4:	f107 0316 	add.w	r3, r7, #22
 800aed8:	4619      	mov	r1, r3
 800aeda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aedc:	f000 f8e8 	bl	800b0b0 <USBH_GetNextDesc>
 800aee0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800aee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee4:	785b      	ldrb	r3, [r3, #1]
 800aee6:	2b04      	cmp	r3, #4
 800aee8:	d146      	bne.n	800af78 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800aeea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aeee:	221a      	movs	r2, #26
 800aef0:	fb02 f303 	mul.w	r3, r2, r3
 800aef4:	3308      	adds	r3, #8
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	4413      	add	r3, r2
 800aefa:	3302      	adds	r3, #2
 800aefc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aefe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af00:	69f8      	ldr	r0, [r7, #28]
 800af02:	f000 f846 	bl	800af92 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800af06:	2300      	movs	r3, #0
 800af08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800af10:	e022      	b.n	800af58 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800af12:	f107 0316 	add.w	r3, r7, #22
 800af16:	4619      	mov	r1, r3
 800af18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af1a:	f000 f8c9 	bl	800b0b0 <USBH_GetNextDesc>
 800af1e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	785b      	ldrb	r3, [r3, #1]
 800af24:	2b05      	cmp	r3, #5
 800af26:	d117      	bne.n	800af58 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800af28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af2c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800af30:	3201      	adds	r2, #1
 800af32:	00d2      	lsls	r2, r2, #3
 800af34:	211a      	movs	r1, #26
 800af36:	fb01 f303 	mul.w	r3, r1, r3
 800af3a:	4413      	add	r3, r2
 800af3c:	3308      	adds	r3, #8
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	4413      	add	r3, r2
 800af42:	3304      	adds	r3, #4
 800af44:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800af46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af48:	69b8      	ldr	r0, [r7, #24]
 800af4a:	f000 f851 	bl	800aff0 <USBH_ParseEPDesc>
            ep_ix++;
 800af4e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800af52:	3301      	adds	r3, #1
 800af54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	791b      	ldrb	r3, [r3, #4]
 800af5c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800af60:	429a      	cmp	r2, r3
 800af62:	d204      	bcs.n	800af6e <USBH_ParseCfgDesc+0x120>
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	885a      	ldrh	r2, [r3, #2]
 800af68:	8afb      	ldrh	r3, [r7, #22]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d8d1      	bhi.n	800af12 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800af6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af72:	3301      	adds	r3, #1
 800af74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800af78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d804      	bhi.n	800af8a <USBH_ParseCfgDesc+0x13c>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	885a      	ldrh	r2, [r3, #2]
 800af84:	8afb      	ldrh	r3, [r7, #22]
 800af86:	429a      	cmp	r2, r3
 800af88:	d8a4      	bhi.n	800aed4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800af8a:	bf00      	nop
 800af8c:	3728      	adds	r7, #40	; 0x28
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800af92:	b480      	push	{r7}
 800af94:	b083      	sub	sp, #12
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	781a      	ldrb	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	785a      	ldrb	r2, [r3, #1]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	789a      	ldrb	r2, [r3, #2]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	78da      	ldrb	r2, [r3, #3]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	791a      	ldrb	r2, [r3, #4]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	795a      	ldrb	r2, [r3, #5]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	799a      	ldrb	r2, [r3, #6]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	79da      	ldrb	r2, [r3, #7]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	7a1a      	ldrb	r2, [r3, #8]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	721a      	strb	r2, [r3, #8]
}
 800afe4:	bf00      	nop
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	781a      	ldrb	r2, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	785a      	ldrb	r2, [r3, #1]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	789a      	ldrb	r2, [r3, #2]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	78da      	ldrb	r2, [r3, #3]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	3304      	adds	r3, #4
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	b29a      	uxth	r2, r3
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	3305      	adds	r3, #5
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	021b      	lsls	r3, r3, #8
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	4313      	orrs	r3, r2
 800b030:	b29a      	uxth	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	799a      	ldrb	r2, [r3, #6]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	719a      	strb	r2, [r3, #6]
}
 800b03e:	bf00      	nop
 800b040:	370c      	adds	r7, #12
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b04a:	b480      	push	{r7}
 800b04c:	b087      	sub	sp, #28
 800b04e:	af00      	add	r7, sp, #0
 800b050:	60f8      	str	r0, [r7, #12]
 800b052:	60b9      	str	r1, [r7, #8]
 800b054:	4613      	mov	r3, r2
 800b056:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	3301      	adds	r3, #1
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	2b03      	cmp	r3, #3
 800b060:	d120      	bne.n	800b0a4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	1e9a      	subs	r2, r3, #2
 800b068:	88fb      	ldrh	r3, [r7, #6]
 800b06a:	4293      	cmp	r3, r2
 800b06c:	bf28      	it	cs
 800b06e:	4613      	movcs	r3, r2
 800b070:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3302      	adds	r3, #2
 800b076:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b078:	2300      	movs	r3, #0
 800b07a:	82fb      	strh	r3, [r7, #22]
 800b07c:	e00b      	b.n	800b096 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b07e:	8afb      	ldrh	r3, [r7, #22]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	4413      	add	r3, r2
 800b084:	781a      	ldrb	r2, [r3, #0]
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	3301      	adds	r3, #1
 800b08e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b090:	8afb      	ldrh	r3, [r7, #22]
 800b092:	3302      	adds	r3, #2
 800b094:	82fb      	strh	r3, [r7, #22]
 800b096:	8afa      	ldrh	r2, [r7, #22]
 800b098:	8abb      	ldrh	r3, [r7, #20]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d3ef      	bcc.n	800b07e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	701a      	strb	r2, [r3, #0]
  }
}
 800b0a4:	bf00      	nop
 800b0a6:	371c      	adds	r7, #28
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	881a      	ldrh	r2, [r3, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	4413      	add	r3, r2
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b086      	sub	sp, #24
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	60f8      	str	r0, [r7, #12]
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	789b      	ldrb	r3, [r3, #2]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d002      	beq.n	800b106 <USBH_CtlReq+0x20>
 800b100:	2b02      	cmp	r3, #2
 800b102:	d01d      	beq.n	800b140 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b104:	e043      	b.n	800b18e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	88fa      	ldrh	r2, [r7, #6]
 800b110:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2201      	movs	r2, #1
 800b116:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2202      	movs	r2, #2
 800b11c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b11e:	2301      	movs	r3, #1
 800b120:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2203      	movs	r2, #3
 800b126:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b136:	2200      	movs	r2, #0
 800b138:	4619      	mov	r1, r3
 800b13a:	f000 fc59 	bl	800b9f0 <osMessagePut>
      break;
 800b13e:	e026      	b.n	800b18e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f000 f829 	bl	800b198 <USBH_HandleControl>
 800b146:	4603      	mov	r3, r0
 800b148:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b14a:	7dfb      	ldrb	r3, [r7, #23]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <USBH_CtlReq+0x70>
 800b150:	7dfb      	ldrb	r3, [r7, #23]
 800b152:	2b03      	cmp	r3, #3
 800b154:	d106      	bne.n	800b164 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2201      	movs	r2, #1
 800b15a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	761a      	strb	r2, [r3, #24]
 800b162:	e005      	b.n	800b170 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b164:	7dfb      	ldrb	r3, [r7, #23]
 800b166:	2b02      	cmp	r3, #2
 800b168:	d102      	bne.n	800b170 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2201      	movs	r2, #1
 800b16e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2203      	movs	r2, #3
 800b174:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b184:	2200      	movs	r2, #0
 800b186:	4619      	mov	r1, r3
 800b188:	f000 fc32 	bl	800b9f0 <osMessagePut>
      break;
 800b18c:	bf00      	nop
  }
  return status;
 800b18e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3718      	adds	r7, #24
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af02      	add	r7, sp, #8
 800b19e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	7e1b      	ldrb	r3, [r3, #24]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	2b0a      	cmp	r3, #10
 800b1b0:	f200 8229 	bhi.w	800b606 <USBH_HandleControl+0x46e>
 800b1b4:	a201      	add	r2, pc, #4	; (adr r2, 800b1bc <USBH_HandleControl+0x24>)
 800b1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ba:	bf00      	nop
 800b1bc:	0800b1e9 	.word	0x0800b1e9
 800b1c0:	0800b203 	.word	0x0800b203
 800b1c4:	0800b2a5 	.word	0x0800b2a5
 800b1c8:	0800b2cb 	.word	0x0800b2cb
 800b1cc:	0800b357 	.word	0x0800b357
 800b1d0:	0800b381 	.word	0x0800b381
 800b1d4:	0800b443 	.word	0x0800b443
 800b1d8:	0800b465 	.word	0x0800b465
 800b1dc:	0800b4f7 	.word	0x0800b4f7
 800b1e0:	0800b51d 	.word	0x0800b51d
 800b1e4:	0800b5af 	.word	0x0800b5af
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f103 0110 	add.w	r1, r3, #16
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	795b      	ldrb	r3, [r3, #5]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fa17 	bl	800b628 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2202      	movs	r2, #2
 800b1fe:	761a      	strb	r2, [r3, #24]
      break;
 800b200:	e20c      	b.n	800b61c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	795b      	ldrb	r3, [r3, #5]
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f002 fe77 	bl	800defc <USBH_LL_GetURBState>
 800b20e:	4603      	mov	r3, r0
 800b210:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b212:	7bbb      	ldrb	r3, [r7, #14]
 800b214:	2b01      	cmp	r3, #1
 800b216:	d12c      	bne.n	800b272 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	7c1b      	ldrb	r3, [r3, #16]
 800b21c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b220:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	8adb      	ldrh	r3, [r3, #22]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00a      	beq.n	800b240 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b22a:	7b7b      	ldrb	r3, [r7, #13]
 800b22c:	2b80      	cmp	r3, #128	; 0x80
 800b22e:	d103      	bne.n	800b238 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2203      	movs	r2, #3
 800b234:	761a      	strb	r2, [r3, #24]
 800b236:	e00d      	b.n	800b254 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2205      	movs	r2, #5
 800b23c:	761a      	strb	r2, [r3, #24]
 800b23e:	e009      	b.n	800b254 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b240:	7b7b      	ldrb	r3, [r7, #13]
 800b242:	2b80      	cmp	r3, #128	; 0x80
 800b244:	d103      	bne.n	800b24e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2209      	movs	r2, #9
 800b24a:	761a      	strb	r2, [r3, #24]
 800b24c:	e002      	b.n	800b254 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2207      	movs	r2, #7
 800b252:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2203      	movs	r2, #3
 800b258:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b268:	2200      	movs	r2, #0
 800b26a:	4619      	mov	r1, r3
 800b26c:	f000 fbc0 	bl	800b9f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b270:	e1cb      	b.n	800b60a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b272:	7bbb      	ldrb	r3, [r7, #14]
 800b274:	2b04      	cmp	r3, #4
 800b276:	d003      	beq.n	800b280 <USBH_HandleControl+0xe8>
 800b278:	7bbb      	ldrb	r3, [r7, #14]
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	f040 81c5 	bne.w	800b60a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	220b      	movs	r2, #11
 800b284:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2203      	movs	r2, #3
 800b28a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b29a:	2200      	movs	r2, #0
 800b29c:	4619      	mov	r1, r3
 800b29e:	f000 fba7 	bl	800b9f0 <osMessagePut>
      break;
 800b2a2:	e1b2      	b.n	800b60a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6899      	ldr	r1, [r3, #8]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	899a      	ldrh	r2, [r3, #12]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	791b      	ldrb	r3, [r3, #4]
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f9f2 	bl	800b6a6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2204      	movs	r2, #4
 800b2c6:	761a      	strb	r2, [r3, #24]
      break;
 800b2c8:	e1a8      	b.n	800b61c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	791b      	ldrb	r3, [r3, #4]
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f002 fe13 	bl	800defc <USBH_LL_GetURBState>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b2da:	7bbb      	ldrb	r3, [r7, #14]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d110      	bne.n	800b302 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2209      	movs	r2, #9
 800b2e4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2203      	movs	r2, #3
 800b2ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	f000 fb77 	bl	800b9f0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	2b05      	cmp	r3, #5
 800b306:	d110      	bne.n	800b32a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b308:	2303      	movs	r3, #3
 800b30a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2203      	movs	r2, #3
 800b310:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b320:	2200      	movs	r2, #0
 800b322:	4619      	mov	r1, r3
 800b324:	f000 fb64 	bl	800b9f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b328:	e171      	b.n	800b60e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b32a:	7bbb      	ldrb	r3, [r7, #14]
 800b32c:	2b04      	cmp	r3, #4
 800b32e:	f040 816e 	bne.w	800b60e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	220b      	movs	r2, #11
 800b336:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2203      	movs	r2, #3
 800b33c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b34c:	2200      	movs	r2, #0
 800b34e:	4619      	mov	r1, r3
 800b350:	f000 fb4e 	bl	800b9f0 <osMessagePut>
      break;
 800b354:	e15b      	b.n	800b60e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6899      	ldr	r1, [r3, #8]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	899a      	ldrh	r2, [r3, #12]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	795b      	ldrb	r3, [r3, #5]
 800b362:	2001      	movs	r0, #1
 800b364:	9000      	str	r0, [sp, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 f978 	bl	800b65c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b372:	b29a      	uxth	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2206      	movs	r2, #6
 800b37c:	761a      	strb	r2, [r3, #24]
      break;
 800b37e:	e14d      	b.n	800b61c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	795b      	ldrb	r3, [r3, #5]
 800b384:	4619      	mov	r1, r3
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f002 fdb8 	bl	800defc <USBH_LL_GetURBState>
 800b38c:	4603      	mov	r3, r0
 800b38e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b390:	7bbb      	ldrb	r3, [r7, #14]
 800b392:	2b01      	cmp	r3, #1
 800b394:	d111      	bne.n	800b3ba <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2207      	movs	r2, #7
 800b39a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2203      	movs	r2, #3
 800b3a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	f000 fb1c 	bl	800b9f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b3b8:	e12b      	b.n	800b612 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b3ba:	7bbb      	ldrb	r3, [r7, #14]
 800b3bc:	2b05      	cmp	r3, #5
 800b3be:	d113      	bne.n	800b3e8 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	220c      	movs	r2, #12
 800b3c4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b3c6:	2303      	movs	r3, #3
 800b3c8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2203      	movs	r2, #3
 800b3ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b3de:	2200      	movs	r2, #0
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	f000 fb05 	bl	800b9f0 <osMessagePut>
      break;
 800b3e6:	e114      	b.n	800b612 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b3e8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d111      	bne.n	800b412 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2205      	movs	r2, #5
 800b3f2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2203      	movs	r2, #3
 800b3f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b408:	2200      	movs	r2, #0
 800b40a:	4619      	mov	r1, r3
 800b40c:	f000 faf0 	bl	800b9f0 <osMessagePut>
      break;
 800b410:	e0ff      	b.n	800b612 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b412:	7bbb      	ldrb	r3, [r7, #14]
 800b414:	2b04      	cmp	r3, #4
 800b416:	f040 80fc 	bne.w	800b612 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	220b      	movs	r2, #11
 800b41e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b420:	2302      	movs	r3, #2
 800b422:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2203      	movs	r2, #3
 800b428:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b438:	2200      	movs	r2, #0
 800b43a:	4619      	mov	r1, r3
 800b43c:	f000 fad8 	bl	800b9f0 <osMessagePut>
      break;
 800b440:	e0e7      	b.n	800b612 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	791b      	ldrb	r3, [r3, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	2100      	movs	r1, #0
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f92b 	bl	800b6a6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b456:	b29a      	uxth	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2208      	movs	r2, #8
 800b460:	761a      	strb	r2, [r3, #24]

      break;
 800b462:	e0db      	b.n	800b61c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	791b      	ldrb	r3, [r3, #4]
 800b468:	4619      	mov	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f002 fd46 	bl	800defc <USBH_LL_GetURBState>
 800b470:	4603      	mov	r3, r0
 800b472:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b474:	7bbb      	ldrb	r3, [r7, #14]
 800b476:	2b01      	cmp	r3, #1
 800b478:	d113      	bne.n	800b4a2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	220d      	movs	r2, #13
 800b47e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b480:	2300      	movs	r3, #0
 800b482:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2203      	movs	r2, #3
 800b488:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b498:	2200      	movs	r2, #0
 800b49a:	4619      	mov	r1, r3
 800b49c:	f000 faa8 	bl	800b9f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b4a0:	e0b9      	b.n	800b616 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b4a2:	7bbb      	ldrb	r3, [r7, #14]
 800b4a4:	2b04      	cmp	r3, #4
 800b4a6:	d111      	bne.n	800b4cc <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	220b      	movs	r2, #11
 800b4ac:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2203      	movs	r2, #3
 800b4b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	f000 fa93 	bl	800b9f0 <osMessagePut>
      break;
 800b4ca:	e0a4      	b.n	800b616 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b4cc:	7bbb      	ldrb	r3, [r7, #14]
 800b4ce:	2b05      	cmp	r3, #5
 800b4d0:	f040 80a1 	bne.w	800b616 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2203      	movs	r2, #3
 800b4dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	f000 fa7e 	bl	800b9f0 <osMessagePut>
      break;
 800b4f4:	e08f      	b.n	800b616 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	795b      	ldrb	r3, [r3, #5]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	9200      	str	r2, [sp, #0]
 800b4fe:	2200      	movs	r2, #0
 800b500:	2100      	movs	r1, #0
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 f8aa 	bl	800b65c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b50e:	b29a      	uxth	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	220a      	movs	r2, #10
 800b518:	761a      	strb	r2, [r3, #24]
      break;
 800b51a:	e07f      	b.n	800b61c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	795b      	ldrb	r3, [r3, #5]
 800b520:	4619      	mov	r1, r3
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f002 fcea 	bl	800defc <USBH_LL_GetURBState>
 800b528:	4603      	mov	r3, r0
 800b52a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b52c:	7bbb      	ldrb	r3, [r7, #14]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d113      	bne.n	800b55a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	220d      	movs	r2, #13
 800b53a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2203      	movs	r2, #3
 800b540:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b550:	2200      	movs	r2, #0
 800b552:	4619      	mov	r1, r3
 800b554:	f000 fa4c 	bl	800b9f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b558:	e05f      	b.n	800b61a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b55a:	7bbb      	ldrb	r3, [r7, #14]
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d111      	bne.n	800b584 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2209      	movs	r2, #9
 800b564:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2203      	movs	r2, #3
 800b56a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b57a:	2200      	movs	r2, #0
 800b57c:	4619      	mov	r1, r3
 800b57e:	f000 fa37 	bl	800b9f0 <osMessagePut>
      break;
 800b582:	e04a      	b.n	800b61a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800b584:	7bbb      	ldrb	r3, [r7, #14]
 800b586:	2b04      	cmp	r3, #4
 800b588:	d147      	bne.n	800b61a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	220b      	movs	r2, #11
 800b58e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2203      	movs	r2, #3
 800b594:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	f000 fa22 	bl	800b9f0 <osMessagePut>
      break;
 800b5ac:	e035      	b.n	800b61a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	7e5b      	ldrb	r3, [r3, #25]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	765a      	strb	r2, [r3, #25]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	7e5b      	ldrb	r3, [r3, #25]
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d806      	bhi.n	800b5d0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b5ce:	e025      	b.n	800b61c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5d6:	2106      	movs	r1, #6
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	795b      	ldrb	r3, [r3, #5]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f90d 	bl	800b808 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	791b      	ldrb	r3, [r3, #4]
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 f907 	bl	800b808 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b600:	2302      	movs	r3, #2
 800b602:	73fb      	strb	r3, [r7, #15]
      break;
 800b604:	e00a      	b.n	800b61c <USBH_HandleControl+0x484>

    default:
      break;
 800b606:	bf00      	nop
 800b608:	e008      	b.n	800b61c <USBH_HandleControl+0x484>
      break;
 800b60a:	bf00      	nop
 800b60c:	e006      	b.n	800b61c <USBH_HandleControl+0x484>
      break;
 800b60e:	bf00      	nop
 800b610:	e004      	b.n	800b61c <USBH_HandleControl+0x484>
      break;
 800b612:	bf00      	nop
 800b614:	e002      	b.n	800b61c <USBH_HandleControl+0x484>
      break;
 800b616:	bf00      	nop
 800b618:	e000      	b.n	800b61c <USBH_HandleControl+0x484>
      break;
 800b61a:	bf00      	nop
  }

  return status;
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop

0800b628 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b088      	sub	sp, #32
 800b62c:	af04      	add	r7, sp, #16
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	4613      	mov	r3, r2
 800b634:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b636:	79f9      	ldrb	r1, [r7, #7]
 800b638:	2300      	movs	r3, #0
 800b63a:	9303      	str	r3, [sp, #12]
 800b63c:	2308      	movs	r3, #8
 800b63e:	9302      	str	r3, [sp, #8]
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	9301      	str	r3, [sp, #4]
 800b644:	2300      	movs	r3, #0
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	2300      	movs	r3, #0
 800b64a:	2200      	movs	r2, #0
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f002 fc24 	bl	800de9a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b088      	sub	sp, #32
 800b660:	af04      	add	r7, sp, #16
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	4611      	mov	r1, r2
 800b668:	461a      	mov	r2, r3
 800b66a:	460b      	mov	r3, r1
 800b66c:	80fb      	strh	r3, [r7, #6]
 800b66e:	4613      	mov	r3, r2
 800b670:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b67c:	2300      	movs	r3, #0
 800b67e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b680:	7979      	ldrb	r1, [r7, #5]
 800b682:	7e3b      	ldrb	r3, [r7, #24]
 800b684:	9303      	str	r3, [sp, #12]
 800b686:	88fb      	ldrh	r3, [r7, #6]
 800b688:	9302      	str	r3, [sp, #8]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	9301      	str	r3, [sp, #4]
 800b68e:	2301      	movs	r3, #1
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	2300      	movs	r3, #0
 800b694:	2200      	movs	r2, #0
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f002 fbff 	bl	800de9a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b69c:	2300      	movs	r3, #0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b088      	sub	sp, #32
 800b6aa:	af04      	add	r7, sp, #16
 800b6ac:	60f8      	str	r0, [r7, #12]
 800b6ae:	60b9      	str	r1, [r7, #8]
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	80fb      	strh	r3, [r7, #6]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b6bc:	7979      	ldrb	r1, [r7, #5]
 800b6be:	2300      	movs	r3, #0
 800b6c0:	9303      	str	r3, [sp, #12]
 800b6c2:	88fb      	ldrh	r3, [r7, #6]
 800b6c4:	9302      	str	r3, [sp, #8]
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	9301      	str	r3, [sp, #4]
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f002 fbe1 	bl	800de9a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b6d8:	2300      	movs	r3, #0

}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b088      	sub	sp, #32
 800b6e6:	af04      	add	r7, sp, #16
 800b6e8:	60f8      	str	r0, [r7, #12]
 800b6ea:	60b9      	str	r1, [r7, #8]
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	80fb      	strh	r3, [r7, #6]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d001      	beq.n	800b706 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b702:	2300      	movs	r3, #0
 800b704:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b706:	7979      	ldrb	r1, [r7, #5]
 800b708:	7e3b      	ldrb	r3, [r7, #24]
 800b70a:	9303      	str	r3, [sp, #12]
 800b70c:	88fb      	ldrh	r3, [r7, #6]
 800b70e:	9302      	str	r3, [sp, #8]
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	9301      	str	r3, [sp, #4]
 800b714:	2301      	movs	r3, #1
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	2302      	movs	r3, #2
 800b71a:	2200      	movs	r2, #0
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f002 fbbc 	bl	800de9a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b088      	sub	sp, #32
 800b730:	af04      	add	r7, sp, #16
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	4611      	mov	r1, r2
 800b738:	461a      	mov	r2, r3
 800b73a:	460b      	mov	r3, r1
 800b73c:	80fb      	strh	r3, [r7, #6]
 800b73e:	4613      	mov	r3, r2
 800b740:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b742:	7979      	ldrb	r1, [r7, #5]
 800b744:	2300      	movs	r3, #0
 800b746:	9303      	str	r3, [sp, #12]
 800b748:	88fb      	ldrh	r3, [r7, #6]
 800b74a:	9302      	str	r3, [sp, #8]
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	9301      	str	r3, [sp, #4]
 800b750:	2301      	movs	r3, #1
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	2302      	movs	r3, #2
 800b756:	2201      	movs	r2, #1
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f002 fb9e 	bl	800de9a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af04      	add	r7, sp, #16
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	4608      	mov	r0, r1
 800b772:	4611      	mov	r1, r2
 800b774:	461a      	mov	r2, r3
 800b776:	4603      	mov	r3, r0
 800b778:	70fb      	strb	r3, [r7, #3]
 800b77a:	460b      	mov	r3, r1
 800b77c:	70bb      	strb	r3, [r7, #2]
 800b77e:	4613      	mov	r3, r2
 800b780:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b782:	7878      	ldrb	r0, [r7, #1]
 800b784:	78ba      	ldrb	r2, [r7, #2]
 800b786:	78f9      	ldrb	r1, [r7, #3]
 800b788:	8b3b      	ldrh	r3, [r7, #24]
 800b78a:	9302      	str	r3, [sp, #8]
 800b78c:	7d3b      	ldrb	r3, [r7, #20]
 800b78e:	9301      	str	r3, [sp, #4]
 800b790:	7c3b      	ldrb	r3, [r7, #16]
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	4603      	mov	r3, r0
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f002 fb31 	bl	800ddfe <USBH_LL_OpenPipe>

  return USBH_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b7b2:	78fb      	ldrb	r3, [r7, #3]
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f002 fb50 	bl	800de5c <USBH_LL_ClosePipe>

  return USBH_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b084      	sub	sp, #16
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f836 	bl	800b844 <USBH_GetFreePipe>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b7dc:	89fb      	ldrh	r3, [r7, #14]
 800b7de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d00a      	beq.n	800b7fc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b7e6:	78fa      	ldrb	r2, [r7, #3]
 800b7e8:	89fb      	ldrh	r3, [r7, #14]
 800b7ea:	f003 030f 	and.w	r3, r3, #15
 800b7ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	33e0      	adds	r3, #224	; 0xe0
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	440b      	add	r3, r1
 800b7fa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b7fc:	89fb      	ldrh	r3, [r7, #14]
 800b7fe:	b2db      	uxtb	r3, r3
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	460b      	mov	r3, r1
 800b812:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b814:	78fb      	ldrb	r3, [r7, #3]
 800b816:	2b0a      	cmp	r3, #10
 800b818:	d80d      	bhi.n	800b836 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b81a:	78fb      	ldrb	r3, [r7, #3]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	33e0      	adds	r3, #224	; 0xe0
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	4413      	add	r3, r2
 800b824:	685a      	ldr	r2, [r3, #4]
 800b826:	78fb      	ldrb	r3, [r7, #3]
 800b828:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b82c:	6879      	ldr	r1, [r7, #4]
 800b82e:	33e0      	adds	r3, #224	; 0xe0
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	440b      	add	r3, r1
 800b834:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b84c:	2300      	movs	r3, #0
 800b84e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b850:	2300      	movs	r3, #0
 800b852:	73fb      	strb	r3, [r7, #15]
 800b854:	e00f      	b.n	800b876 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b856:	7bfb      	ldrb	r3, [r7, #15]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	33e0      	adds	r3, #224	; 0xe0
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b866:	2b00      	cmp	r3, #0
 800b868:	d102      	bne.n	800b870 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b86a:	7bfb      	ldrb	r3, [r7, #15]
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	e007      	b.n	800b880 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b870:	7bfb      	ldrb	r3, [r7, #15]
 800b872:	3301      	adds	r3, #1
 800b874:	73fb      	strb	r3, [r7, #15]
 800b876:	7bfb      	ldrb	r3, [r7, #15]
 800b878:	2b0a      	cmp	r3, #10
 800b87a:	d9ec      	bls.n	800b856 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b87c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	4603      	mov	r3, r0
 800b894:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b896:	2300      	movs	r3, #0
 800b898:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b89a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b89e:	2b84      	cmp	r3, #132	; 0x84
 800b8a0:	d005      	beq.n	800b8ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b8a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	3303      	adds	r3, #3
 800b8ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3714      	adds	r7, #20
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8c2:	f3ef 8305 	mrs	r3, IPSR
 800b8c6:	607b      	str	r3, [r7, #4]
  return(result);
 800b8c8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	bf14      	ite	ne
 800b8ce:	2301      	movne	r3, #1
 800b8d0:	2300      	moveq	r3, #0
 800b8d2:	b2db      	uxtb	r3, r3
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8e2:	b089      	sub	sp, #36	; 0x24
 800b8e4:	af04      	add	r7, sp, #16
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	695b      	ldr	r3, [r3, #20]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d020      	beq.n	800b934 <osThreadCreate+0x54>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	699b      	ldr	r3, [r3, #24]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d01c      	beq.n	800b934 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	685c      	ldr	r4, [r3, #4]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681d      	ldr	r5, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	691e      	ldr	r6, [r3, #16]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7ff ffbd 	bl	800b88c <makeFreeRtosPriority>
 800b912:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	695b      	ldr	r3, [r3, #20]
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b91c:	9202      	str	r2, [sp, #8]
 800b91e:	9301      	str	r3, [sp, #4]
 800b920:	9100      	str	r1, [sp, #0]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	4632      	mov	r2, r6
 800b926:	4629      	mov	r1, r5
 800b928:	4620      	mov	r0, r4
 800b92a:	f000 ff0d 	bl	800c748 <xTaskCreateStatic>
 800b92e:	4603      	mov	r3, r0
 800b930:	60fb      	str	r3, [r7, #12]
 800b932:	e01c      	b.n	800b96e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685c      	ldr	r4, [r3, #4]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b940:	b29e      	uxth	r6, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b948:	4618      	mov	r0, r3
 800b94a:	f7ff ff9f 	bl	800b88c <makeFreeRtosPriority>
 800b94e:	4602      	mov	r2, r0
 800b950:	f107 030c 	add.w	r3, r7, #12
 800b954:	9301      	str	r3, [sp, #4]
 800b956:	9200      	str	r2, [sp, #0]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	4632      	mov	r2, r6
 800b95c:	4629      	mov	r1, r5
 800b95e:	4620      	mov	r0, r4
 800b960:	f000 ff4f 	bl	800c802 <xTaskCreate>
 800b964:	4603      	mov	r3, r0
 800b966:	2b01      	cmp	r3, #1
 800b968:	d001      	beq.n	800b96e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b96a:	2300      	movs	r3, #0
 800b96c:	e000      	b.n	800b970 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b96e:	68fb      	ldr	r3, [r7, #12]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b978 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <osDelay+0x16>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	e000      	b.n	800b990 <osDelay+0x18>
 800b98e:	2301      	movs	r3, #1
 800b990:	4618      	mov	r0, r3
 800b992:	f001 f877 	bl	800ca84 <vTaskDelay>
  
  return osOK;
 800b996:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b9a0:	b590      	push	{r4, r7, lr}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af02      	add	r7, sp, #8
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d011      	beq.n	800b9d6 <osMessageCreate+0x36>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00d      	beq.n	800b9d6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6818      	ldr	r0, [r3, #0]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6859      	ldr	r1, [r3, #4]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	689a      	ldr	r2, [r3, #8]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	2400      	movs	r4, #0
 800b9cc:	9400      	str	r4, [sp, #0]
 800b9ce:	f000 f9df 	bl	800bd90 <xQueueGenericCreateStatic>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	e008      	b.n	800b9e8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6818      	ldr	r0, [r3, #0]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	f000 fa4d 	bl	800be80 <xQueueGenericCreate>
 800b9e6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd90      	pop	{r4, r7, pc}

0800b9f0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <osMessagePut+0x1e>
    ticks = 1;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ba0e:	f7ff ff55 	bl	800b8bc <inHandlerMode>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d018      	beq.n	800ba4a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ba18:	f107 0210 	add.w	r2, r7, #16
 800ba1c:	f107 0108 	add.w	r1, r7, #8
 800ba20:	2300      	movs	r3, #0
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f000 fb84 	bl	800c130 <xQueueGenericSendFromISR>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d001      	beq.n	800ba32 <osMessagePut+0x42>
      return osErrorOS;
 800ba2e:	23ff      	movs	r3, #255	; 0xff
 800ba30:	e018      	b.n	800ba64 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d014      	beq.n	800ba62 <osMessagePut+0x72>
 800ba38:	4b0c      	ldr	r3, [pc, #48]	; (800ba6c <osMessagePut+0x7c>)
 800ba3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	f3bf 8f4f 	dsb	sy
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	e00b      	b.n	800ba62 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ba4a:	f107 0108 	add.w	r1, r7, #8
 800ba4e:	2300      	movs	r3, #0
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f000 fa6e 	bl	800bf34 <xQueueGenericSend>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d001      	beq.n	800ba62 <osMessagePut+0x72>
      return osErrorOS;
 800ba5e:	23ff      	movs	r3, #255	; 0xff
 800ba60:	e000      	b.n	800ba64 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3718      	adds	r7, #24
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	e000ed04 	.word	0xe000ed04

0800ba70 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ba70:	b590      	push	{r4, r7, lr}
 800ba72:	b08b      	sub	sp, #44	; 0x2c
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ba80:	2300      	movs	r3, #0
 800ba82:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10a      	bne.n	800baa0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ba8a:	2380      	movs	r3, #128	; 0x80
 800ba8c:	617b      	str	r3, [r7, #20]
    return event;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	461c      	mov	r4, r3
 800ba92:	f107 0314 	add.w	r3, r7, #20
 800ba96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ba9e:	e054      	b.n	800bb4a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800baa0:	2300      	movs	r3, #0
 800baa2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baae:	d103      	bne.n	800bab8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bab0:	f04f 33ff 	mov.w	r3, #4294967295
 800bab4:	627b      	str	r3, [r7, #36]	; 0x24
 800bab6:	e009      	b.n	800bacc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d006      	beq.n	800bacc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d101      	bne.n	800bacc <osMessageGet+0x5c>
      ticks = 1;
 800bac8:	2301      	movs	r3, #1
 800baca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bacc:	f7ff fef6 	bl	800b8bc <inHandlerMode>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d01c      	beq.n	800bb10 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bad6:	f107 0220 	add.w	r2, r7, #32
 800bada:	f107 0314 	add.w	r3, r7, #20
 800bade:	3304      	adds	r3, #4
 800bae0:	4619      	mov	r1, r3
 800bae2:	68b8      	ldr	r0, [r7, #8]
 800bae4:	f000 fca0 	bl	800c428 <xQueueReceiveFromISR>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b01      	cmp	r3, #1
 800baec:	d102      	bne.n	800baf4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800baee:	2310      	movs	r3, #16
 800baf0:	617b      	str	r3, [r7, #20]
 800baf2:	e001      	b.n	800baf8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800baf8:	6a3b      	ldr	r3, [r7, #32]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d01d      	beq.n	800bb3a <osMessageGet+0xca>
 800bafe:	4b15      	ldr	r3, [pc, #84]	; (800bb54 <osMessageGet+0xe4>)
 800bb00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb04:	601a      	str	r2, [r3, #0]
 800bb06:	f3bf 8f4f 	dsb	sy
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	e014      	b.n	800bb3a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bb10:	f107 0314 	add.w	r3, r7, #20
 800bb14:	3304      	adds	r3, #4
 800bb16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb18:	4619      	mov	r1, r3
 800bb1a:	68b8      	ldr	r0, [r7, #8]
 800bb1c:	f000 fba4 	bl	800c268 <xQueueReceive>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d102      	bne.n	800bb2c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bb26:	2310      	movs	r3, #16
 800bb28:	617b      	str	r3, [r7, #20]
 800bb2a:	e006      	b.n	800bb3a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <osMessageGet+0xc6>
 800bb32:	2300      	movs	r3, #0
 800bb34:	e000      	b.n	800bb38 <osMessageGet+0xc8>
 800bb36:	2340      	movs	r3, #64	; 0x40
 800bb38:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	461c      	mov	r4, r3
 800bb3e:	f107 0314 	add.w	r3, r7, #20
 800bb42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	372c      	adds	r7, #44	; 0x2c
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd90      	pop	{r4, r7, pc}
 800bb52:	bf00      	nop
 800bb54:	e000ed04 	.word	0xe000ed04

0800bb58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f103 0208 	add.w	r2, r3, #8
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f103 0208 	add.w	r2, r3, #8
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f103 0208 	add.w	r2, r3, #8
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb8c:	bf00      	nop
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bba6:	bf00      	nop
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr

0800bbb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b085      	sub	sp, #20
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
 800bbba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	689a      	ldr	r2, [r3, #8]
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	1c5a      	adds	r2, r3, #1
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	601a      	str	r2, [r3, #0]
}
 800bbee:	bf00      	nop
 800bbf0:	3714      	adds	r7, #20
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bbfa:	b480      	push	{r7}
 800bbfc:	b085      	sub	sp, #20
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc10:	d103      	bne.n	800bc1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	691b      	ldr	r3, [r3, #16]
 800bc16:	60fb      	str	r3, [r7, #12]
 800bc18:	e00c      	b.n	800bc34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	3308      	adds	r3, #8
 800bc1e:	60fb      	str	r3, [r7, #12]
 800bc20:	e002      	b.n	800bc28 <vListInsert+0x2e>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	60fb      	str	r3, [r7, #12]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68ba      	ldr	r2, [r7, #8]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d2f6      	bcs.n	800bc22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	685a      	ldr	r2, [r3, #4]
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	683a      	ldr	r2, [r7, #0]
 800bc42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	683a      	ldr	r2, [r7, #0]
 800bc4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	601a      	str	r2, [r3, #0]
}
 800bc60:	bf00      	nop
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	691b      	ldr	r3, [r3, #16]
 800bc78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	6892      	ldr	r2, [r2, #8]
 800bc82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	6852      	ldr	r2, [r2, #4]
 800bc8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d103      	bne.n	800bca0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	689a      	ldr	r2, [r3, #8]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	1e5a      	subs	r2, r3, #1
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10a      	bne.n	800bcea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bce6:	bf00      	nop
 800bce8:	e7fe      	b.n	800bce8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bcea:	f001 fbcd 	bl	800d488 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcf6:	68f9      	ldr	r1, [r7, #12]
 800bcf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bcfa:	fb01 f303 	mul.w	r3, r1, r3
 800bcfe:	441a      	add	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2200      	movs	r2, #0
 800bd08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd1a:	3b01      	subs	r3, #1
 800bd1c:	68f9      	ldr	r1, [r7, #12]
 800bd1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd20:	fb01 f303 	mul.w	r3, r1, r3
 800bd24:	441a      	add	r2, r3
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	22ff      	movs	r2, #255	; 0xff
 800bd2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	22ff      	movs	r2, #255	; 0xff
 800bd36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d114      	bne.n	800bd6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d01a      	beq.n	800bd7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	3310      	adds	r3, #16
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f001 f8d3 	bl	800cef8 <xTaskRemoveFromEventList>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d012      	beq.n	800bd7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bd58:	4b0c      	ldr	r3, [pc, #48]	; (800bd8c <xQueueGenericReset+0xcc>)
 800bd5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd5e:	601a      	str	r2, [r3, #0]
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	f3bf 8f6f 	isb	sy
 800bd68:	e009      	b.n	800bd7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3310      	adds	r3, #16
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7ff fef2 	bl	800bb58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	3324      	adds	r3, #36	; 0x24
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7ff feed 	bl	800bb58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd7e:	f001 fbb3 	bl	800d4e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd82:	2301      	movs	r3, #1
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	e000ed04 	.word	0xe000ed04

0800bd90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b08e      	sub	sp, #56	; 0x38
 800bd94:	af02      	add	r7, sp, #8
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10a      	bne.n	800bdba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bdb6:	bf00      	nop
 800bdb8:	e7fe      	b.n	800bdb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10a      	bne.n	800bdd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bdd2:	bf00      	nop
 800bdd4:	e7fe      	b.n	800bdd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d002      	beq.n	800bde2 <xQueueGenericCreateStatic+0x52>
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <xQueueGenericCreateStatic+0x56>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e000      	b.n	800bde8 <xQueueGenericCreateStatic+0x58>
 800bde6:	2300      	movs	r3, #0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10a      	bne.n	800be02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf0:	f383 8811 	msr	BASEPRI, r3
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	623b      	str	r3, [r7, #32]
}
 800bdfe:	bf00      	nop
 800be00:	e7fe      	b.n	800be00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d102      	bne.n	800be0e <xQueueGenericCreateStatic+0x7e>
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d101      	bne.n	800be12 <xQueueGenericCreateStatic+0x82>
 800be0e:	2301      	movs	r3, #1
 800be10:	e000      	b.n	800be14 <xQueueGenericCreateStatic+0x84>
 800be12:	2300      	movs	r3, #0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	61fb      	str	r3, [r7, #28]
}
 800be2a:	bf00      	nop
 800be2c:	e7fe      	b.n	800be2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800be2e:	2348      	movs	r3, #72	; 0x48
 800be30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	2b48      	cmp	r3, #72	; 0x48
 800be36:	d00a      	beq.n	800be4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	61bb      	str	r3, [r7, #24]
}
 800be4a:	bf00      	nop
 800be4c:	e7fe      	b.n	800be4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800be4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800be54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00d      	beq.n	800be76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800be5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5c:	2201      	movs	r2, #1
 800be5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800be66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be68:	9300      	str	r3, [sp, #0]
 800be6a:	4613      	mov	r3, r2
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	68b9      	ldr	r1, [r7, #8]
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f000 f83f 	bl	800bef4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800be78:	4618      	mov	r0, r3
 800be7a:	3730      	adds	r7, #48	; 0x30
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08a      	sub	sp, #40	; 0x28
 800be84:	af02      	add	r7, sp, #8
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	4613      	mov	r3, r2
 800be8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10a      	bne.n	800beaa <xQueueGenericCreate+0x2a>
	__asm volatile
 800be94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be98:	f383 8811 	msr	BASEPRI, r3
 800be9c:	f3bf 8f6f 	isb	sy
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	613b      	str	r3, [r7, #16]
}
 800bea6:	bf00      	nop
 800bea8:	e7fe      	b.n	800bea8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	fb02 f303 	mul.w	r3, r2, r3
 800beb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	3348      	adds	r3, #72	; 0x48
 800beb8:	4618      	mov	r0, r3
 800beba:	f001 fbd7 	bl	800d66c <pvPortMalloc>
 800bebe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d011      	beq.n	800beea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	3348      	adds	r3, #72	; 0x48
 800bece:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bed8:	79fa      	ldrb	r2, [r7, #7]
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	4613      	mov	r3, r2
 800bee0:	697a      	ldr	r2, [r7, #20]
 800bee2:	68b9      	ldr	r1, [r7, #8]
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f000 f805 	bl	800bef4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800beea:	69bb      	ldr	r3, [r7, #24]
	}
 800beec:	4618      	mov	r0, r3
 800beee:	3720      	adds	r7, #32
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
 800bf00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d103      	bne.n	800bf10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	69ba      	ldr	r2, [r7, #24]
 800bf0c:	601a      	str	r2, [r3, #0]
 800bf0e:	e002      	b.n	800bf16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bf22:	2101      	movs	r1, #1
 800bf24:	69b8      	ldr	r0, [r7, #24]
 800bf26:	f7ff fecb 	bl	800bcc0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bf2a:	bf00      	nop
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
	...

0800bf34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b08e      	sub	sp, #56	; 0x38
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf42:	2300      	movs	r3, #0
 800bf44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10a      	bne.n	800bf66 <xQueueGenericSend+0x32>
	__asm volatile
 800bf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf62:	bf00      	nop
 800bf64:	e7fe      	b.n	800bf64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d103      	bne.n	800bf74 <xQueueGenericSend+0x40>
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <xQueueGenericSend+0x44>
 800bf74:	2301      	movs	r3, #1
 800bf76:	e000      	b.n	800bf7a <xQueueGenericSend+0x46>
 800bf78:	2300      	movs	r3, #0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10a      	bne.n	800bf94 <xQueueGenericSend+0x60>
	__asm volatile
 800bf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf82:	f383 8811 	msr	BASEPRI, r3
 800bf86:	f3bf 8f6f 	isb	sy
 800bf8a:	f3bf 8f4f 	dsb	sy
 800bf8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf90:	bf00      	nop
 800bf92:	e7fe      	b.n	800bf92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d103      	bne.n	800bfa2 <xQueueGenericSend+0x6e>
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d101      	bne.n	800bfa6 <xQueueGenericSend+0x72>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e000      	b.n	800bfa8 <xQueueGenericSend+0x74>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d10a      	bne.n	800bfc2 <xQueueGenericSend+0x8e>
	__asm volatile
 800bfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	623b      	str	r3, [r7, #32]
}
 800bfbe:	bf00      	nop
 800bfc0:	e7fe      	b.n	800bfc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfc2:	f001 f8df 	bl	800d184 <xTaskGetSchedulerState>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d102      	bne.n	800bfd2 <xQueueGenericSend+0x9e>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <xQueueGenericSend+0xa2>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e000      	b.n	800bfd8 <xQueueGenericSend+0xa4>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d10a      	bne.n	800bff2 <xQueueGenericSend+0xbe>
	__asm volatile
 800bfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe0:	f383 8811 	msr	BASEPRI, r3
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	61fb      	str	r3, [r7, #28]
}
 800bfee:	bf00      	nop
 800bff0:	e7fe      	b.n	800bff0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bff2:	f001 fa49 	bl	800d488 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bffe:	429a      	cmp	r2, r3
 800c000:	d302      	bcc.n	800c008 <xQueueGenericSend+0xd4>
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	2b02      	cmp	r3, #2
 800c006:	d129      	bne.n	800c05c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	68b9      	ldr	r1, [r7, #8]
 800c00c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c00e:	f000 fa8b 	bl	800c528 <prvCopyDataToQueue>
 800c012:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d010      	beq.n	800c03e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01e:	3324      	adds	r3, #36	; 0x24
 800c020:	4618      	mov	r0, r3
 800c022:	f000 ff69 	bl	800cef8 <xTaskRemoveFromEventList>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d013      	beq.n	800c054 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c02c:	4b3f      	ldr	r3, [pc, #252]	; (800c12c <xQueueGenericSend+0x1f8>)
 800c02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c032:	601a      	str	r2, [r3, #0]
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	e00a      	b.n	800c054 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c040:	2b00      	cmp	r3, #0
 800c042:	d007      	beq.n	800c054 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c044:	4b39      	ldr	r3, [pc, #228]	; (800c12c <xQueueGenericSend+0x1f8>)
 800c046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c04a:	601a      	str	r2, [r3, #0]
 800c04c:	f3bf 8f4f 	dsb	sy
 800c050:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c054:	f001 fa48 	bl	800d4e8 <vPortExitCritical>
				return pdPASS;
 800c058:	2301      	movs	r3, #1
 800c05a:	e063      	b.n	800c124 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d103      	bne.n	800c06a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c062:	f001 fa41 	bl	800d4e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c066:	2300      	movs	r3, #0
 800c068:	e05c      	b.n	800c124 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d106      	bne.n	800c07e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c070:	f107 0314 	add.w	r3, r7, #20
 800c074:	4618      	mov	r0, r3
 800c076:	f000 ffa1 	bl	800cfbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c07a:	2301      	movs	r3, #1
 800c07c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c07e:	f001 fa33 	bl	800d4e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c082:	f000 fd33 	bl	800caec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c086:	f001 f9ff 	bl	800d488 <vPortEnterCritical>
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c090:	b25b      	sxtb	r3, r3
 800c092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c096:	d103      	bne.n	800c0a0 <xQueueGenericSend+0x16c>
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	2200      	movs	r2, #0
 800c09c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0a6:	b25b      	sxtb	r3, r3
 800c0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ac:	d103      	bne.n	800c0b6 <xQueueGenericSend+0x182>
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0b6:	f001 fa17 	bl	800d4e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0ba:	1d3a      	adds	r2, r7, #4
 800c0bc:	f107 0314 	add.w	r3, r7, #20
 800c0c0:	4611      	mov	r1, r2
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f000 ff90 	bl	800cfe8 <xTaskCheckForTimeOut>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d124      	bne.n	800c118 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c0ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0d0:	f000 fb22 	bl	800c718 <prvIsQueueFull>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d018      	beq.n	800c10c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0dc:	3310      	adds	r3, #16
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f000 fee4 	bl	800ceb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c0e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0ea:	f000 faad 	bl	800c648 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c0ee:	f000 fd0b 	bl	800cb08 <xTaskResumeAll>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f47f af7c 	bne.w	800bff2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c0fa:	4b0c      	ldr	r3, [pc, #48]	; (800c12c <xQueueGenericSend+0x1f8>)
 800c0fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c100:	601a      	str	r2, [r3, #0]
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	e772      	b.n	800bff2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c10c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c10e:	f000 fa9b 	bl	800c648 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c112:	f000 fcf9 	bl	800cb08 <xTaskResumeAll>
 800c116:	e76c      	b.n	800bff2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c11a:	f000 fa95 	bl	800c648 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c11e:	f000 fcf3 	bl	800cb08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c122:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c124:	4618      	mov	r0, r3
 800c126:	3738      	adds	r7, #56	; 0x38
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	e000ed04 	.word	0xe000ed04

0800c130 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b090      	sub	sp, #64	; 0x40
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
 800c13c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10a      	bne.n	800c15e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c15a:	bf00      	nop
 800c15c:	e7fe      	b.n	800c15c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d103      	bne.n	800c16c <xQueueGenericSendFromISR+0x3c>
 800c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d101      	bne.n	800c170 <xQueueGenericSendFromISR+0x40>
 800c16c:	2301      	movs	r3, #1
 800c16e:	e000      	b.n	800c172 <xQueueGenericSendFromISR+0x42>
 800c170:	2300      	movs	r3, #0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10a      	bne.n	800c18c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17a:	f383 8811 	msr	BASEPRI, r3
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c188:	bf00      	nop
 800c18a:	e7fe      	b.n	800c18a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	2b02      	cmp	r3, #2
 800c190:	d103      	bne.n	800c19a <xQueueGenericSendFromISR+0x6a>
 800c192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c196:	2b01      	cmp	r3, #1
 800c198:	d101      	bne.n	800c19e <xQueueGenericSendFromISR+0x6e>
 800c19a:	2301      	movs	r3, #1
 800c19c:	e000      	b.n	800c1a0 <xQueueGenericSendFromISR+0x70>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10a      	bne.n	800c1ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a8:	f383 8811 	msr	BASEPRI, r3
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	623b      	str	r3, [r7, #32]
}
 800c1b6:	bf00      	nop
 800c1b8:	e7fe      	b.n	800c1b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1ba:	f001 fa17 	bl	800d5ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c1be:	f3ef 8211 	mrs	r2, BASEPRI
 800c1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c6:	f383 8811 	msr	BASEPRI, r3
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	61fa      	str	r2, [r7, #28]
 800c1d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c1d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d302      	bcc.n	800c1ec <xQueueGenericSendFromISR+0xbc>
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	d12f      	bne.n	800c24c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1fc:	683a      	ldr	r2, [r7, #0]
 800c1fe:	68b9      	ldr	r1, [r7, #8]
 800c200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c202:	f000 f991 	bl	800c528 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c206:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20e:	d112      	bne.n	800c236 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c214:	2b00      	cmp	r3, #0
 800c216:	d016      	beq.n	800c246 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21a:	3324      	adds	r3, #36	; 0x24
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 fe6b 	bl	800cef8 <xTaskRemoveFromEventList>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00e      	beq.n	800c246 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00b      	beq.n	800c246 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	e007      	b.n	800c246 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c236:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c23a:	3301      	adds	r3, #1
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	b25a      	sxtb	r2, r3
 800c240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c246:	2301      	movs	r3, #1
 800c248:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c24a:	e001      	b.n	800c250 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c24c:	2300      	movs	r3, #0
 800c24e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c252:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c25a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3740      	adds	r7, #64	; 0x40
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b08c      	sub	sp, #48	; 0x30
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c274:	2300      	movs	r3, #0
 800c276:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d10a      	bne.n	800c298 <xQueueReceive+0x30>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	623b      	str	r3, [r7, #32]
}
 800c294:	bf00      	nop
 800c296:	e7fe      	b.n	800c296 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d103      	bne.n	800c2a6 <xQueueReceive+0x3e>
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d101      	bne.n	800c2aa <xQueueReceive+0x42>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e000      	b.n	800c2ac <xQueueReceive+0x44>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10a      	bne.n	800c2c6 <xQueueReceive+0x5e>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	61fb      	str	r3, [r7, #28]
}
 800c2c2:	bf00      	nop
 800c2c4:	e7fe      	b.n	800c2c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2c6:	f000 ff5d 	bl	800d184 <xTaskGetSchedulerState>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d102      	bne.n	800c2d6 <xQueueReceive+0x6e>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d101      	bne.n	800c2da <xQueueReceive+0x72>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e000      	b.n	800c2dc <xQueueReceive+0x74>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10a      	bne.n	800c2f6 <xQueueReceive+0x8e>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	61bb      	str	r3, [r7, #24]
}
 800c2f2:	bf00      	nop
 800c2f4:	e7fe      	b.n	800c2f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2f6:	f001 f8c7 	bl	800d488 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	2b00      	cmp	r3, #0
 800c304:	d01f      	beq.n	800c346 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c306:	68b9      	ldr	r1, [r7, #8]
 800c308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c30a:	f000 f977 	bl	800c5fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c310:	1e5a      	subs	r2, r3, #1
 800c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c314:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	691b      	ldr	r3, [r3, #16]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00f      	beq.n	800c33e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c320:	3310      	adds	r3, #16
 800c322:	4618      	mov	r0, r3
 800c324:	f000 fde8 	bl	800cef8 <xTaskRemoveFromEventList>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d007      	beq.n	800c33e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c32e:	4b3d      	ldr	r3, [pc, #244]	; (800c424 <xQueueReceive+0x1bc>)
 800c330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c334:	601a      	str	r2, [r3, #0]
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c33e:	f001 f8d3 	bl	800d4e8 <vPortExitCritical>
				return pdPASS;
 800c342:	2301      	movs	r3, #1
 800c344:	e069      	b.n	800c41a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d103      	bne.n	800c354 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c34c:	f001 f8cc 	bl	800d4e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c350:	2300      	movs	r3, #0
 800c352:	e062      	b.n	800c41a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c356:	2b00      	cmp	r3, #0
 800c358:	d106      	bne.n	800c368 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c35a:	f107 0310 	add.w	r3, r7, #16
 800c35e:	4618      	mov	r0, r3
 800c360:	f000 fe2c 	bl	800cfbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c364:	2301      	movs	r3, #1
 800c366:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c368:	f001 f8be 	bl	800d4e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c36c:	f000 fbbe 	bl	800caec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c370:	f001 f88a 	bl	800d488 <vPortEnterCritical>
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c37a:	b25b      	sxtb	r3, r3
 800c37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c380:	d103      	bne.n	800c38a <xQueueReceive+0x122>
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	2200      	movs	r2, #0
 800c386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c390:	b25b      	sxtb	r3, r3
 800c392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c396:	d103      	bne.n	800c3a0 <xQueueReceive+0x138>
 800c398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3a0:	f001 f8a2 	bl	800d4e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3a4:	1d3a      	adds	r2, r7, #4
 800c3a6:	f107 0310 	add.w	r3, r7, #16
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f000 fe1b 	bl	800cfe8 <xTaskCheckForTimeOut>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d123      	bne.n	800c400 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ba:	f000 f997 	bl	800c6ec <prvIsQueueEmpty>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d017      	beq.n	800c3f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	3324      	adds	r3, #36	; 0x24
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f000 fd6f 	bl	800ceb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c3d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3d4:	f000 f938 	bl	800c648 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c3d8:	f000 fb96 	bl	800cb08 <xTaskResumeAll>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d189      	bne.n	800c2f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c3e2:	4b10      	ldr	r3, [pc, #64]	; (800c424 <xQueueReceive+0x1bc>)
 800c3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e8:	601a      	str	r2, [r3, #0]
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	e780      	b.n	800c2f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3f6:	f000 f927 	bl	800c648 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3fa:	f000 fb85 	bl	800cb08 <xTaskResumeAll>
 800c3fe:	e77a      	b.n	800c2f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c402:	f000 f921 	bl	800c648 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c406:	f000 fb7f 	bl	800cb08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c40c:	f000 f96e 	bl	800c6ec <prvIsQueueEmpty>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	f43f af6f 	beq.w	800c2f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3730      	adds	r7, #48	; 0x30
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	e000ed04 	.word	0xe000ed04

0800c428 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08e      	sub	sp, #56	; 0x38
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10a      	bne.n	800c454 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	623b      	str	r3, [r7, #32]
}
 800c450:	bf00      	nop
 800c452:	e7fe      	b.n	800c452 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d103      	bne.n	800c462 <xQueueReceiveFromISR+0x3a>
 800c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <xQueueReceiveFromISR+0x3e>
 800c462:	2301      	movs	r3, #1
 800c464:	e000      	b.n	800c468 <xQueueReceiveFromISR+0x40>
 800c466:	2300      	movs	r3, #0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10a      	bne.n	800c482 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	61fb      	str	r3, [r7, #28]
}
 800c47e:	bf00      	nop
 800c480:	e7fe      	b.n	800c480 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c482:	f001 f8b3 	bl	800d5ec <vPortValidateInterruptPriority>
	__asm volatile
 800c486:	f3ef 8211 	mrs	r2, BASEPRI
 800c48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48e:	f383 8811 	msr	BASEPRI, r3
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	61ba      	str	r2, [r7, #24]
 800c49c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c49e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d02f      	beq.n	800c50e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4b8:	68b9      	ldr	r1, [r7, #8]
 800c4ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4bc:	f000 f89e 	bl	800c5fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c2:	1e5a      	subs	r2, r3, #1
 800c4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c4c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d0:	d112      	bne.n	800c4f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d016      	beq.n	800c508 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4dc:	3310      	adds	r3, #16
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f000 fd0a 	bl	800cef8 <xTaskRemoveFromEventList>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00e      	beq.n	800c508 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00b      	beq.n	800c508 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	e007      	b.n	800c508 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c4f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	b25a      	sxtb	r2, r3
 800c502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c508:	2301      	movs	r3, #1
 800c50a:	637b      	str	r3, [r7, #52]	; 0x34
 800c50c:	e001      	b.n	800c512 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c50e:	2300      	movs	r3, #0
 800c510:	637b      	str	r3, [r7, #52]	; 0x34
 800c512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c514:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	f383 8811 	msr	BASEPRI, r3
}
 800c51c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c520:	4618      	mov	r0, r3
 800c522:	3738      	adds	r7, #56	; 0x38
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c534:	2300      	movs	r3, #0
 800c536:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c53c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c542:	2b00      	cmp	r3, #0
 800c544:	d10d      	bne.n	800c562 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d14d      	bne.n	800c5ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	4618      	mov	r0, r3
 800c554:	f000 fe34 	bl	800d1c0 <xTaskPriorityDisinherit>
 800c558:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2200      	movs	r2, #0
 800c55e:	609a      	str	r2, [r3, #8]
 800c560:	e043      	b.n	800c5ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d119      	bne.n	800c59c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6858      	ldr	r0, [r3, #4]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c570:	461a      	mov	r2, r3
 800c572:	68b9      	ldr	r1, [r7, #8]
 800c574:	f001 fdce 	bl	800e114 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	685a      	ldr	r2, [r3, #4]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c580:	441a      	add	r2, r3
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	685a      	ldr	r2, [r3, #4]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d32b      	bcc.n	800c5ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	605a      	str	r2, [r3, #4]
 800c59a:	e026      	b.n	800c5ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	68d8      	ldr	r0, [r3, #12]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	68b9      	ldr	r1, [r7, #8]
 800c5a8:	f001 fdb4 	bl	800e114 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	68da      	ldr	r2, [r3, #12]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b4:	425b      	negs	r3, r3
 800c5b6:	441a      	add	r2, r3
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	68da      	ldr	r2, [r3, #12]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d207      	bcs.n	800c5d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	689a      	ldr	r2, [r3, #8]
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d0:	425b      	negs	r3, r3
 800c5d2:	441a      	add	r2, r3
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d105      	bne.n	800c5ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d002      	beq.n	800c5ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	1c5a      	adds	r2, r3, #1
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c5f2:	697b      	ldr	r3, [r7, #20]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3718      	adds	r7, #24
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d018      	beq.n	800c640 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	68da      	ldr	r2, [r3, #12]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c616:	441a      	add	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	68da      	ldr	r2, [r3, #12]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	429a      	cmp	r2, r3
 800c626:	d303      	bcc.n	800c630 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68d9      	ldr	r1, [r3, #12]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c638:	461a      	mov	r2, r3
 800c63a:	6838      	ldr	r0, [r7, #0]
 800c63c:	f001 fd6a 	bl	800e114 <memcpy>
	}
}
 800c640:	bf00      	nop
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c650:	f000 ff1a 	bl	800d488 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c65a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c65c:	e011      	b.n	800c682 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c662:	2b00      	cmp	r3, #0
 800c664:	d012      	beq.n	800c68c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	3324      	adds	r3, #36	; 0x24
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 fc44 	bl	800cef8 <xTaskRemoveFromEventList>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d001      	beq.n	800c67a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c676:	f000 fd19 	bl	800d0ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c67a:	7bfb      	ldrb	r3, [r7, #15]
 800c67c:	3b01      	subs	r3, #1
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c686:	2b00      	cmp	r3, #0
 800c688:	dce9      	bgt.n	800c65e <prvUnlockQueue+0x16>
 800c68a:	e000      	b.n	800c68e <prvUnlockQueue+0x46>
					break;
 800c68c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	22ff      	movs	r2, #255	; 0xff
 800c692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c696:	f000 ff27 	bl	800d4e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c69a:	f000 fef5 	bl	800d488 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6a6:	e011      	b.n	800c6cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d012      	beq.n	800c6d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	3310      	adds	r3, #16
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 fc1f 	bl	800cef8 <xTaskRemoveFromEventList>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d001      	beq.n	800c6c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c6c0:	f000 fcf4 	bl	800d0ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c6c4:	7bbb      	ldrb	r3, [r7, #14]
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	dce9      	bgt.n	800c6a8 <prvUnlockQueue+0x60>
 800c6d4:	e000      	b.n	800c6d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c6d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	22ff      	movs	r2, #255	; 0xff
 800c6dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c6e0:	f000 ff02 	bl	800d4e8 <vPortExitCritical>
}
 800c6e4:	bf00      	nop
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6f4:	f000 fec8 	bl	800d488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d102      	bne.n	800c706 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c700:	2301      	movs	r3, #1
 800c702:	60fb      	str	r3, [r7, #12]
 800c704:	e001      	b.n	800c70a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c706:	2300      	movs	r3, #0
 800c708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c70a:	f000 feed 	bl	800d4e8 <vPortExitCritical>

	return xReturn;
 800c70e:	68fb      	ldr	r3, [r7, #12]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c720:	f000 feb2 	bl	800d488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d102      	bne.n	800c736 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c730:	2301      	movs	r3, #1
 800c732:	60fb      	str	r3, [r7, #12]
 800c734:	e001      	b.n	800c73a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c736:	2300      	movs	r3, #0
 800c738:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c73a:	f000 fed5 	bl	800d4e8 <vPortExitCritical>

	return xReturn;
 800c73e:	68fb      	ldr	r3, [r7, #12]
}
 800c740:	4618      	mov	r0, r3
 800c742:	3710      	adds	r7, #16
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b08e      	sub	sp, #56	; 0x38
 800c74c:	af04      	add	r7, sp, #16
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
 800c754:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10a      	bne.n	800c772 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	623b      	str	r3, [r7, #32]
}
 800c76e:	bf00      	nop
 800c770:	e7fe      	b.n	800c770 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10a      	bne.n	800c78e <xTaskCreateStatic+0x46>
	__asm volatile
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	61fb      	str	r3, [r7, #28]
}
 800c78a:	bf00      	nop
 800c78c:	e7fe      	b.n	800c78c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c78e:	2358      	movs	r3, #88	; 0x58
 800c790:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	2b58      	cmp	r3, #88	; 0x58
 800c796:	d00a      	beq.n	800c7ae <xTaskCreateStatic+0x66>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	61bb      	str	r3, [r7, #24]
}
 800c7aa:	bf00      	nop
 800c7ac:	e7fe      	b.n	800c7ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c7ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d01e      	beq.n	800c7f4 <xTaskCreateStatic+0xac>
 800c7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d01b      	beq.n	800c7f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	9303      	str	r3, [sp, #12]
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d4:	9302      	str	r3, [sp, #8]
 800c7d6:	f107 0314 	add.w	r3, r7, #20
 800c7da:	9301      	str	r3, [sp, #4]
 800c7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	68b9      	ldr	r1, [r7, #8]
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	f000 f850 	bl	800c88c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c7ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7ee:	f000 f8df 	bl	800c9b0 <prvAddNewTaskToReadyList>
 800c7f2:	e001      	b.n	800c7f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c7f8:	697b      	ldr	r3, [r7, #20]
	}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3728      	adds	r7, #40	; 0x28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c802:	b580      	push	{r7, lr}
 800c804:	b08c      	sub	sp, #48	; 0x30
 800c806:	af04      	add	r7, sp, #16
 800c808:	60f8      	str	r0, [r7, #12]
 800c80a:	60b9      	str	r1, [r7, #8]
 800c80c:	603b      	str	r3, [r7, #0]
 800c80e:	4613      	mov	r3, r2
 800c810:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c812:	88fb      	ldrh	r3, [r7, #6]
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4618      	mov	r0, r3
 800c818:	f000 ff28 	bl	800d66c <pvPortMalloc>
 800c81c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00e      	beq.n	800c842 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c824:	2058      	movs	r0, #88	; 0x58
 800c826:	f000 ff21 	bl	800d66c <pvPortMalloc>
 800c82a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d003      	beq.n	800c83a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	697a      	ldr	r2, [r7, #20]
 800c836:	631a      	str	r2, [r3, #48]	; 0x30
 800c838:	e005      	b.n	800c846 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c83a:	6978      	ldr	r0, [r7, #20]
 800c83c:	f000 ffe6 	bl	800d80c <vPortFree>
 800c840:	e001      	b.n	800c846 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c842:	2300      	movs	r3, #0
 800c844:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d017      	beq.n	800c87c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	2200      	movs	r2, #0
 800c850:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c854:	88fa      	ldrh	r2, [r7, #6]
 800c856:	2300      	movs	r3, #0
 800c858:	9303      	str	r3, [sp, #12]
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	9302      	str	r3, [sp, #8]
 800c85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c860:	9301      	str	r3, [sp, #4]
 800c862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	68b9      	ldr	r1, [r7, #8]
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f000 f80e 	bl	800c88c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c870:	69f8      	ldr	r0, [r7, #28]
 800c872:	f000 f89d 	bl	800c9b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c876:	2301      	movs	r3, #1
 800c878:	61bb      	str	r3, [r7, #24]
 800c87a:	e002      	b.n	800c882 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c87c:	f04f 33ff 	mov.w	r3, #4294967295
 800c880:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c882:	69bb      	ldr	r3, [r7, #24]
	}
 800c884:	4618      	mov	r0, r3
 800c886:	3720      	adds	r7, #32
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b088      	sub	sp, #32
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
 800c898:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	21a5      	movs	r1, #165	; 0xa5
 800c8a6:	f001 fc43 	bl	800e130 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	f023 0307 	bic.w	r3, r3, #7
 800c8c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	f003 0307 	and.w	r3, r3, #7
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00a      	beq.n	800c8e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	617b      	str	r3, [r7, #20]
}
 800c8e0:	bf00      	nop
 800c8e2:	e7fe      	b.n	800c8e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d01f      	beq.n	800c92a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	61fb      	str	r3, [r7, #28]
 800c8ee:	e012      	b.n	800c916 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c8f0:	68ba      	ldr	r2, [r7, #8]
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	7819      	ldrb	r1, [r3, #0]
 800c8f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	3334      	adds	r3, #52	; 0x34
 800c900:	460a      	mov	r2, r1
 800c902:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	4413      	add	r3, r2
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d006      	beq.n	800c91e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	3301      	adds	r3, #1
 800c914:	61fb      	str	r3, [r7, #28]
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	2b0f      	cmp	r3, #15
 800c91a:	d9e9      	bls.n	800c8f0 <prvInitialiseNewTask+0x64>
 800c91c:	e000      	b.n	800c920 <prvInitialiseNewTask+0x94>
			{
				break;
 800c91e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c922:	2200      	movs	r2, #0
 800c924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c928:	e003      	b.n	800c932 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92c:	2200      	movs	r2, #0
 800c92e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c934:	2b06      	cmp	r3, #6
 800c936:	d901      	bls.n	800c93c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c938:	2306      	movs	r3, #6
 800c93a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c940:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c946:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94a:	2200      	movs	r2, #0
 800c94c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c950:	3304      	adds	r3, #4
 800c952:	4618      	mov	r0, r3
 800c954:	f7ff f920 	bl	800bb98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95a:	3318      	adds	r3, #24
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7ff f91b 	bl	800bb98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c966:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	f1c3 0207 	rsb	r2, r3, #7
 800c96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c970:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c976:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97a:	2200      	movs	r2, #0
 800c97c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c980:	2200      	movs	r2, #0
 800c982:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c986:	2200      	movs	r2, #0
 800c988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c98c:	683a      	ldr	r2, [r7, #0]
 800c98e:	68f9      	ldr	r1, [r7, #12]
 800c990:	69b8      	ldr	r0, [r7, #24]
 800c992:	f000 fd01 	bl	800d398 <pxPortInitialiseStack>
 800c996:	4602      	mov	r2, r0
 800c998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d002      	beq.n	800c9a8 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9a8:	bf00      	nop
 800c9aa:	3720      	adds	r7, #32
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c9b8:	f000 fd66 	bl	800d488 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c9bc:	4b2a      	ldr	r3, [pc, #168]	; (800ca68 <prvAddNewTaskToReadyList+0xb8>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	4a29      	ldr	r2, [pc, #164]	; (800ca68 <prvAddNewTaskToReadyList+0xb8>)
 800c9c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c9c6:	4b29      	ldr	r3, [pc, #164]	; (800ca6c <prvAddNewTaskToReadyList+0xbc>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d109      	bne.n	800c9e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c9ce:	4a27      	ldr	r2, [pc, #156]	; (800ca6c <prvAddNewTaskToReadyList+0xbc>)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c9d4:	4b24      	ldr	r3, [pc, #144]	; (800ca68 <prvAddNewTaskToReadyList+0xb8>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d110      	bne.n	800c9fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c9dc:	f000 fb72 	bl	800d0c4 <prvInitialiseTaskLists>
 800c9e0:	e00d      	b.n	800c9fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c9e2:	4b23      	ldr	r3, [pc, #140]	; (800ca70 <prvAddNewTaskToReadyList+0xc0>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d109      	bne.n	800c9fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c9ea:	4b20      	ldr	r3, [pc, #128]	; (800ca6c <prvAddNewTaskToReadyList+0xbc>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d802      	bhi.n	800c9fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c9f8:	4a1c      	ldr	r2, [pc, #112]	; (800ca6c <prvAddNewTaskToReadyList+0xbc>)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c9fe:	4b1d      	ldr	r3, [pc, #116]	; (800ca74 <prvAddNewTaskToReadyList+0xc4>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	3301      	adds	r3, #1
 800ca04:	4a1b      	ldr	r2, [pc, #108]	; (800ca74 <prvAddNewTaskToReadyList+0xc4>)
 800ca06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	409a      	lsls	r2, r3
 800ca10:	4b19      	ldr	r3, [pc, #100]	; (800ca78 <prvAddNewTaskToReadyList+0xc8>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4313      	orrs	r3, r2
 800ca16:	4a18      	ldr	r2, [pc, #96]	; (800ca78 <prvAddNewTaskToReadyList+0xc8>)
 800ca18:	6013      	str	r3, [r2, #0]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca1e:	4613      	mov	r3, r2
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	4413      	add	r3, r2
 800ca24:	009b      	lsls	r3, r3, #2
 800ca26:	4a15      	ldr	r2, [pc, #84]	; (800ca7c <prvAddNewTaskToReadyList+0xcc>)
 800ca28:	441a      	add	r2, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	4619      	mov	r1, r3
 800ca30:	4610      	mov	r0, r2
 800ca32:	f7ff f8be 	bl	800bbb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca36:	f000 fd57 	bl	800d4e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ca3a:	4b0d      	ldr	r3, [pc, #52]	; (800ca70 <prvAddNewTaskToReadyList+0xc0>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00e      	beq.n	800ca60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ca42:	4b0a      	ldr	r3, [pc, #40]	; (800ca6c <prvAddNewTaskToReadyList+0xbc>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d207      	bcs.n	800ca60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ca50:	4b0b      	ldr	r3, [pc, #44]	; (800ca80 <prvAddNewTaskToReadyList+0xd0>)
 800ca52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca56:	601a      	str	r2, [r3, #0]
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca60:	bf00      	nop
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	200001e4 	.word	0x200001e4
 800ca6c:	200000e8 	.word	0x200000e8
 800ca70:	200001f0 	.word	0x200001f0
 800ca74:	20000200 	.word	0x20000200
 800ca78:	200001ec 	.word	0x200001ec
 800ca7c:	200000ec 	.word	0x200000ec
 800ca80:	e000ed04 	.word	0xe000ed04

0800ca84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d017      	beq.n	800cac6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ca96:	4b13      	ldr	r3, [pc, #76]	; (800cae4 <vTaskDelay+0x60>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00a      	beq.n	800cab4 <vTaskDelay+0x30>
	__asm volatile
 800ca9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa2:	f383 8811 	msr	BASEPRI, r3
 800caa6:	f3bf 8f6f 	isb	sy
 800caaa:	f3bf 8f4f 	dsb	sy
 800caae:	60bb      	str	r3, [r7, #8]
}
 800cab0:	bf00      	nop
 800cab2:	e7fe      	b.n	800cab2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cab4:	f000 f81a 	bl	800caec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cab8:	2100      	movs	r1, #0
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 fc06 	bl	800d2cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cac0:	f000 f822 	bl	800cb08 <xTaskResumeAll>
 800cac4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d107      	bne.n	800cadc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cacc:	4b06      	ldr	r3, [pc, #24]	; (800cae8 <vTaskDelay+0x64>)
 800cace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cad2:	601a      	str	r2, [r3, #0]
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cadc:	bf00      	nop
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	20000208 	.word	0x20000208
 800cae8:	e000ed04 	.word	0xe000ed04

0800caec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800caec:	b480      	push	{r7}
 800caee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800caf0:	4b04      	ldr	r3, [pc, #16]	; (800cb04 <vTaskSuspendAll+0x18>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	3301      	adds	r3, #1
 800caf6:	4a03      	ldr	r2, [pc, #12]	; (800cb04 <vTaskSuspendAll+0x18>)
 800caf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cafa:	bf00      	nop
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr
 800cb04:	20000208 	.word	0x20000208

0800cb08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cb12:	2300      	movs	r3, #0
 800cb14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb16:	4b41      	ldr	r3, [pc, #260]	; (800cc1c <xTaskResumeAll+0x114>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d10a      	bne.n	800cb34 <xTaskResumeAll+0x2c>
	__asm volatile
 800cb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb22:	f383 8811 	msr	BASEPRI, r3
 800cb26:	f3bf 8f6f 	isb	sy
 800cb2a:	f3bf 8f4f 	dsb	sy
 800cb2e:	603b      	str	r3, [r7, #0]
}
 800cb30:	bf00      	nop
 800cb32:	e7fe      	b.n	800cb32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cb34:	f000 fca8 	bl	800d488 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cb38:	4b38      	ldr	r3, [pc, #224]	; (800cc1c <xTaskResumeAll+0x114>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	4a37      	ldr	r2, [pc, #220]	; (800cc1c <xTaskResumeAll+0x114>)
 800cb40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb42:	4b36      	ldr	r3, [pc, #216]	; (800cc1c <xTaskResumeAll+0x114>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d161      	bne.n	800cc0e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb4a:	4b35      	ldr	r3, [pc, #212]	; (800cc20 <xTaskResumeAll+0x118>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d05d      	beq.n	800cc0e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb52:	e02e      	b.n	800cbb2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb54:	4b33      	ldr	r3, [pc, #204]	; (800cc24 <xTaskResumeAll+0x11c>)
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	3318      	adds	r3, #24
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7ff f883 	bl	800bc6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	3304      	adds	r3, #4
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7ff f87e 	bl	800bc6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb74:	2201      	movs	r2, #1
 800cb76:	409a      	lsls	r2, r3
 800cb78:	4b2b      	ldr	r3, [pc, #172]	; (800cc28 <xTaskResumeAll+0x120>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	4a2a      	ldr	r2, [pc, #168]	; (800cc28 <xTaskResumeAll+0x120>)
 800cb80:	6013      	str	r3, [r2, #0]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb86:	4613      	mov	r3, r2
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	4413      	add	r3, r2
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	4a27      	ldr	r2, [pc, #156]	; (800cc2c <xTaskResumeAll+0x124>)
 800cb90:	441a      	add	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	3304      	adds	r3, #4
 800cb96:	4619      	mov	r1, r3
 800cb98:	4610      	mov	r0, r2
 800cb9a:	f7ff f80a 	bl	800bbb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba2:	4b23      	ldr	r3, [pc, #140]	; (800cc30 <xTaskResumeAll+0x128>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d302      	bcc.n	800cbb2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cbac:	4b21      	ldr	r3, [pc, #132]	; (800cc34 <xTaskResumeAll+0x12c>)
 800cbae:	2201      	movs	r2, #1
 800cbb0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbb2:	4b1c      	ldr	r3, [pc, #112]	; (800cc24 <xTaskResumeAll+0x11c>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1cc      	bne.n	800cb54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d001      	beq.n	800cbc4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cbc0:	f000 fac0 	bl	800d144 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cbc4:	4b1c      	ldr	r3, [pc, #112]	; (800cc38 <xTaskResumeAll+0x130>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d010      	beq.n	800cbf2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cbd0:	f000 f836 	bl	800cc40 <xTaskIncrementTick>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d002      	beq.n	800cbe0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cbda:	4b16      	ldr	r3, [pc, #88]	; (800cc34 <xTaskResumeAll+0x12c>)
 800cbdc:	2201      	movs	r2, #1
 800cbde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	3b01      	subs	r3, #1
 800cbe4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1f1      	bne.n	800cbd0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cbec:	4b12      	ldr	r3, [pc, #72]	; (800cc38 <xTaskResumeAll+0x130>)
 800cbee:	2200      	movs	r2, #0
 800cbf0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cbf2:	4b10      	ldr	r3, [pc, #64]	; (800cc34 <xTaskResumeAll+0x12c>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d009      	beq.n	800cc0e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cbfe:	4b0f      	ldr	r3, [pc, #60]	; (800cc3c <xTaskResumeAll+0x134>)
 800cc00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc04:	601a      	str	r2, [r3, #0]
 800cc06:	f3bf 8f4f 	dsb	sy
 800cc0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc0e:	f000 fc6b 	bl	800d4e8 <vPortExitCritical>

	return xAlreadyYielded;
 800cc12:	68bb      	ldr	r3, [r7, #8]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3710      	adds	r7, #16
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	20000208 	.word	0x20000208
 800cc20:	200001e4 	.word	0x200001e4
 800cc24:	200001a8 	.word	0x200001a8
 800cc28:	200001ec 	.word	0x200001ec
 800cc2c:	200000ec 	.word	0x200000ec
 800cc30:	200000e8 	.word	0x200000e8
 800cc34:	200001f8 	.word	0x200001f8
 800cc38:	200001f4 	.word	0x200001f4
 800cc3c:	e000ed04 	.word	0xe000ed04

0800cc40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b086      	sub	sp, #24
 800cc44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc46:	2300      	movs	r3, #0
 800cc48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc4a:	4b4e      	ldr	r3, [pc, #312]	; (800cd84 <xTaskIncrementTick+0x144>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	f040 808e 	bne.w	800cd70 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc54:	4b4c      	ldr	r3, [pc, #304]	; (800cd88 <xTaskIncrementTick+0x148>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc5c:	4a4a      	ldr	r2, [pc, #296]	; (800cd88 <xTaskIncrementTick+0x148>)
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d120      	bne.n	800ccaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc68:	4b48      	ldr	r3, [pc, #288]	; (800cd8c <xTaskIncrementTick+0x14c>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00a      	beq.n	800cc88 <xTaskIncrementTick+0x48>
	__asm volatile
 800cc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc76:	f383 8811 	msr	BASEPRI, r3
 800cc7a:	f3bf 8f6f 	isb	sy
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	603b      	str	r3, [r7, #0]
}
 800cc84:	bf00      	nop
 800cc86:	e7fe      	b.n	800cc86 <xTaskIncrementTick+0x46>
 800cc88:	4b40      	ldr	r3, [pc, #256]	; (800cd8c <xTaskIncrementTick+0x14c>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	60fb      	str	r3, [r7, #12]
 800cc8e:	4b40      	ldr	r3, [pc, #256]	; (800cd90 <xTaskIncrementTick+0x150>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a3e      	ldr	r2, [pc, #248]	; (800cd8c <xTaskIncrementTick+0x14c>)
 800cc94:	6013      	str	r3, [r2, #0]
 800cc96:	4a3e      	ldr	r2, [pc, #248]	; (800cd90 <xTaskIncrementTick+0x150>)
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	6013      	str	r3, [r2, #0]
 800cc9c:	4b3d      	ldr	r3, [pc, #244]	; (800cd94 <xTaskIncrementTick+0x154>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	3301      	adds	r3, #1
 800cca2:	4a3c      	ldr	r2, [pc, #240]	; (800cd94 <xTaskIncrementTick+0x154>)
 800cca4:	6013      	str	r3, [r2, #0]
 800cca6:	f000 fa4d 	bl	800d144 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ccaa:	4b3b      	ldr	r3, [pc, #236]	; (800cd98 <xTaskIncrementTick+0x158>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	693a      	ldr	r2, [r7, #16]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d348      	bcc.n	800cd46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccb4:	4b35      	ldr	r3, [pc, #212]	; (800cd8c <xTaskIncrementTick+0x14c>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d104      	bne.n	800ccc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccbe:	4b36      	ldr	r3, [pc, #216]	; (800cd98 <xTaskIncrementTick+0x158>)
 800ccc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc4:	601a      	str	r2, [r3, #0]
					break;
 800ccc6:	e03e      	b.n	800cd46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccc8:	4b30      	ldr	r3, [pc, #192]	; (800cd8c <xTaskIncrementTick+0x14c>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ccd8:	693a      	ldr	r2, [r7, #16]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d203      	bcs.n	800cce8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cce0:	4a2d      	ldr	r2, [pc, #180]	; (800cd98 <xTaskIncrementTick+0x158>)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cce6:	e02e      	b.n	800cd46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	3304      	adds	r3, #4
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7fe ffbd 	bl	800bc6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d004      	beq.n	800cd04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	3318      	adds	r3, #24
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fe ffb4 	bl	800bc6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd08:	2201      	movs	r2, #1
 800cd0a:	409a      	lsls	r2, r3
 800cd0c:	4b23      	ldr	r3, [pc, #140]	; (800cd9c <xTaskIncrementTick+0x15c>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4313      	orrs	r3, r2
 800cd12:	4a22      	ldr	r2, [pc, #136]	; (800cd9c <xTaskIncrementTick+0x15c>)
 800cd14:	6013      	str	r3, [r2, #0]
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	4413      	add	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	4a1f      	ldr	r2, [pc, #124]	; (800cda0 <xTaskIncrementTick+0x160>)
 800cd24:	441a      	add	r2, r3
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	3304      	adds	r3, #4
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	f7fe ff40 	bl	800bbb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd36:	4b1b      	ldr	r3, [pc, #108]	; (800cda4 <xTaskIncrementTick+0x164>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d3b9      	bcc.n	800ccb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cd40:	2301      	movs	r3, #1
 800cd42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd44:	e7b6      	b.n	800ccb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd46:	4b17      	ldr	r3, [pc, #92]	; (800cda4 <xTaskIncrementTick+0x164>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd4c:	4914      	ldr	r1, [pc, #80]	; (800cda0 <xTaskIncrementTick+0x160>)
 800cd4e:	4613      	mov	r3, r2
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	4413      	add	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	440b      	add	r3, r1
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d901      	bls.n	800cd62 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cd62:	4b11      	ldr	r3, [pc, #68]	; (800cda8 <xTaskIncrementTick+0x168>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d007      	beq.n	800cd7a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	617b      	str	r3, [r7, #20]
 800cd6e:	e004      	b.n	800cd7a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cd70:	4b0e      	ldr	r3, [pc, #56]	; (800cdac <xTaskIncrementTick+0x16c>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	3301      	adds	r3, #1
 800cd76:	4a0d      	ldr	r2, [pc, #52]	; (800cdac <xTaskIncrementTick+0x16c>)
 800cd78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cd7a:	697b      	ldr	r3, [r7, #20]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	20000208 	.word	0x20000208
 800cd88:	200001e8 	.word	0x200001e8
 800cd8c:	200001a0 	.word	0x200001a0
 800cd90:	200001a4 	.word	0x200001a4
 800cd94:	200001fc 	.word	0x200001fc
 800cd98:	20000204 	.word	0x20000204
 800cd9c:	200001ec 	.word	0x200001ec
 800cda0:	200000ec 	.word	0x200000ec
 800cda4:	200000e8 	.word	0x200000e8
 800cda8:	200001f8 	.word	0x200001f8
 800cdac:	200001f4 	.word	0x200001f4

0800cdb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b088      	sub	sp, #32
 800cdb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cdb6:	4b39      	ldr	r3, [pc, #228]	; (800ce9c <vTaskSwitchContext+0xec>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d003      	beq.n	800cdc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cdbe:	4b38      	ldr	r3, [pc, #224]	; (800cea0 <vTaskSwitchContext+0xf0>)
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cdc4:	e066      	b.n	800ce94 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800cdc6:	4b36      	ldr	r3, [pc, #216]	; (800cea0 <vTaskSwitchContext+0xf0>)
 800cdc8:	2200      	movs	r2, #0
 800cdca:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cdcc:	4b35      	ldr	r3, [pc, #212]	; (800cea4 <vTaskSwitchContext+0xf4>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd2:	61fb      	str	r3, [r7, #28]
 800cdd4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800cdd8:	61bb      	str	r3, [r7, #24]
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	69ba      	ldr	r2, [r7, #24]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d111      	bne.n	800ce08 <vTaskSwitchContext+0x58>
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	3304      	adds	r3, #4
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	69ba      	ldr	r2, [r7, #24]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d10b      	bne.n	800ce08 <vTaskSwitchContext+0x58>
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	3308      	adds	r3, #8
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	69ba      	ldr	r2, [r7, #24]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d105      	bne.n	800ce08 <vTaskSwitchContext+0x58>
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	330c      	adds	r3, #12
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	69ba      	ldr	r2, [r7, #24]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d008      	beq.n	800ce1a <vTaskSwitchContext+0x6a>
 800ce08:	4b26      	ldr	r3, [pc, #152]	; (800cea4 <vTaskSwitchContext+0xf4>)
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	4b25      	ldr	r3, [pc, #148]	; (800cea4 <vTaskSwitchContext+0xf4>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	3334      	adds	r3, #52	; 0x34
 800ce12:	4619      	mov	r1, r3
 800ce14:	4610      	mov	r0, r2
 800ce16:	f7f4 f853 	bl	8000ec0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce1a:	4b23      	ldr	r3, [pc, #140]	; (800cea8 <vTaskSwitchContext+0xf8>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	fab3 f383 	clz	r3, r3
 800ce26:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ce28:	7afb      	ldrb	r3, [r7, #11]
 800ce2a:	f1c3 031f 	rsb	r3, r3, #31
 800ce2e:	617b      	str	r3, [r7, #20]
 800ce30:	491e      	ldr	r1, [pc, #120]	; (800ceac <vTaskSwitchContext+0xfc>)
 800ce32:	697a      	ldr	r2, [r7, #20]
 800ce34:	4613      	mov	r3, r2
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	4413      	add	r3, r2
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	440b      	add	r3, r1
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10a      	bne.n	800ce5a <vTaskSwitchContext+0xaa>
	__asm volatile
 800ce44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce48:	f383 8811 	msr	BASEPRI, r3
 800ce4c:	f3bf 8f6f 	isb	sy
 800ce50:	f3bf 8f4f 	dsb	sy
 800ce54:	607b      	str	r3, [r7, #4]
}
 800ce56:	bf00      	nop
 800ce58:	e7fe      	b.n	800ce58 <vTaskSwitchContext+0xa8>
 800ce5a:	697a      	ldr	r2, [r7, #20]
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	4413      	add	r3, r2
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	4a11      	ldr	r2, [pc, #68]	; (800ceac <vTaskSwitchContext+0xfc>)
 800ce66:	4413      	add	r3, r2
 800ce68:	613b      	str	r3, [r7, #16]
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	685a      	ldr	r2, [r3, #4]
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	605a      	str	r2, [r3, #4]
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	685a      	ldr	r2, [r3, #4]
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	3308      	adds	r3, #8
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d104      	bne.n	800ce8a <vTaskSwitchContext+0xda>
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	685a      	ldr	r2, [r3, #4]
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	605a      	str	r2, [r3, #4]
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	4a04      	ldr	r2, [pc, #16]	; (800cea4 <vTaskSwitchContext+0xf4>)
 800ce92:	6013      	str	r3, [r2, #0]
}
 800ce94:	bf00      	nop
 800ce96:	3720      	adds	r7, #32
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	20000208 	.word	0x20000208
 800cea0:	200001f8 	.word	0x200001f8
 800cea4:	200000e8 	.word	0x200000e8
 800cea8:	200001ec 	.word	0x200001ec
 800ceac:	200000ec 	.word	0x200000ec

0800ceb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d10a      	bne.n	800ced6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec4:	f383 8811 	msr	BASEPRI, r3
 800cec8:	f3bf 8f6f 	isb	sy
 800cecc:	f3bf 8f4f 	dsb	sy
 800ced0:	60fb      	str	r3, [r7, #12]
}
 800ced2:	bf00      	nop
 800ced4:	e7fe      	b.n	800ced4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ced6:	4b07      	ldr	r3, [pc, #28]	; (800cef4 <vTaskPlaceOnEventList+0x44>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	3318      	adds	r3, #24
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f7fe fe8b 	bl	800bbfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cee4:	2101      	movs	r1, #1
 800cee6:	6838      	ldr	r0, [r7, #0]
 800cee8:	f000 f9f0 	bl	800d2cc <prvAddCurrentTaskToDelayedList>
}
 800ceec:	bf00      	nop
 800ceee:	3710      	adds	r7, #16
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	200000e8 	.word	0x200000e8

0800cef8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d10a      	bne.n	800cf24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	60fb      	str	r3, [r7, #12]
}
 800cf20:	bf00      	nop
 800cf22:	e7fe      	b.n	800cf22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	3318      	adds	r3, #24
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7fe fe9f 	bl	800bc6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf2e:	4b1d      	ldr	r3, [pc, #116]	; (800cfa4 <xTaskRemoveFromEventList+0xac>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d11c      	bne.n	800cf70 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	3304      	adds	r3, #4
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fe fe96 	bl	800bc6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf44:	2201      	movs	r2, #1
 800cf46:	409a      	lsls	r2, r3
 800cf48:	4b17      	ldr	r3, [pc, #92]	; (800cfa8 <xTaskRemoveFromEventList+0xb0>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	4a16      	ldr	r2, [pc, #88]	; (800cfa8 <xTaskRemoveFromEventList+0xb0>)
 800cf50:	6013      	str	r3, [r2, #0]
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf56:	4613      	mov	r3, r2
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	4413      	add	r3, r2
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	4a13      	ldr	r2, [pc, #76]	; (800cfac <xTaskRemoveFromEventList+0xb4>)
 800cf60:	441a      	add	r2, r3
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	3304      	adds	r3, #4
 800cf66:	4619      	mov	r1, r3
 800cf68:	4610      	mov	r0, r2
 800cf6a:	f7fe fe22 	bl	800bbb2 <vListInsertEnd>
 800cf6e:	e005      	b.n	800cf7c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	3318      	adds	r3, #24
 800cf74:	4619      	mov	r1, r3
 800cf76:	480e      	ldr	r0, [pc, #56]	; (800cfb0 <xTaskRemoveFromEventList+0xb8>)
 800cf78:	f7fe fe1b 	bl	800bbb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf80:	4b0c      	ldr	r3, [pc, #48]	; (800cfb4 <xTaskRemoveFromEventList+0xbc>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d905      	bls.n	800cf96 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf8e:	4b0a      	ldr	r3, [pc, #40]	; (800cfb8 <xTaskRemoveFromEventList+0xc0>)
 800cf90:	2201      	movs	r2, #1
 800cf92:	601a      	str	r2, [r3, #0]
 800cf94:	e001      	b.n	800cf9a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cf96:	2300      	movs	r3, #0
 800cf98:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf9a:	697b      	ldr	r3, [r7, #20]
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3718      	adds	r7, #24
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	20000208 	.word	0x20000208
 800cfa8:	200001ec 	.word	0x200001ec
 800cfac:	200000ec 	.word	0x200000ec
 800cfb0:	200001a8 	.word	0x200001a8
 800cfb4:	200000e8 	.word	0x200000e8
 800cfb8:	200001f8 	.word	0x200001f8

0800cfbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cfc4:	4b06      	ldr	r3, [pc, #24]	; (800cfe0 <vTaskInternalSetTimeOutState+0x24>)
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cfcc:	4b05      	ldr	r3, [pc, #20]	; (800cfe4 <vTaskInternalSetTimeOutState+0x28>)
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	605a      	str	r2, [r3, #4]
}
 800cfd4:	bf00      	nop
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr
 800cfe0:	200001fc 	.word	0x200001fc
 800cfe4:	200001e8 	.word	0x200001e8

0800cfe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b088      	sub	sp, #32
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10a      	bne.n	800d00e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	613b      	str	r3, [r7, #16]
}
 800d00a:	bf00      	nop
 800d00c:	e7fe      	b.n	800d00c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d10a      	bne.n	800d02a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d018:	f383 8811 	msr	BASEPRI, r3
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f3bf 8f4f 	dsb	sy
 800d024:	60fb      	str	r3, [r7, #12]
}
 800d026:	bf00      	nop
 800d028:	e7fe      	b.n	800d028 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d02a:	f000 fa2d 	bl	800d488 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d02e:	4b1d      	ldr	r3, [pc, #116]	; (800d0a4 <xTaskCheckForTimeOut+0xbc>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	69ba      	ldr	r2, [r7, #24]
 800d03a:	1ad3      	subs	r3, r2, r3
 800d03c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d046:	d102      	bne.n	800d04e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d048:	2300      	movs	r3, #0
 800d04a:	61fb      	str	r3, [r7, #28]
 800d04c:	e023      	b.n	800d096 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	4b15      	ldr	r3, [pc, #84]	; (800d0a8 <xTaskCheckForTimeOut+0xc0>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	429a      	cmp	r2, r3
 800d058:	d007      	beq.n	800d06a <xTaskCheckForTimeOut+0x82>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	69ba      	ldr	r2, [r7, #24]
 800d060:	429a      	cmp	r2, r3
 800d062:	d302      	bcc.n	800d06a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d064:	2301      	movs	r3, #1
 800d066:	61fb      	str	r3, [r7, #28]
 800d068:	e015      	b.n	800d096 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	697a      	ldr	r2, [r7, #20]
 800d070:	429a      	cmp	r2, r3
 800d072:	d20b      	bcs.n	800d08c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	1ad2      	subs	r2, r2, r3
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f7ff ff9b 	bl	800cfbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d086:	2300      	movs	r3, #0
 800d088:	61fb      	str	r3, [r7, #28]
 800d08a:	e004      	b.n	800d096 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	2200      	movs	r2, #0
 800d090:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d092:	2301      	movs	r3, #1
 800d094:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d096:	f000 fa27 	bl	800d4e8 <vPortExitCritical>

	return xReturn;
 800d09a:	69fb      	ldr	r3, [r7, #28]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3720      	adds	r7, #32
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	200001e8 	.word	0x200001e8
 800d0a8:	200001fc 	.word	0x200001fc

0800d0ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d0b0:	4b03      	ldr	r3, [pc, #12]	; (800d0c0 <vTaskMissedYield+0x14>)
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	601a      	str	r2, [r3, #0]
}
 800d0b6:	bf00      	nop
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr
 800d0c0:	200001f8 	.word	0x200001f8

0800d0c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	607b      	str	r3, [r7, #4]
 800d0ce:	e00c      	b.n	800d0ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	4413      	add	r3, r2
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	4a12      	ldr	r2, [pc, #72]	; (800d124 <prvInitialiseTaskLists+0x60>)
 800d0dc:	4413      	add	r3, r2
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fe fd3a 	bl	800bb58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	607b      	str	r3, [r7, #4]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b06      	cmp	r3, #6
 800d0ee:	d9ef      	bls.n	800d0d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d0f0:	480d      	ldr	r0, [pc, #52]	; (800d128 <prvInitialiseTaskLists+0x64>)
 800d0f2:	f7fe fd31 	bl	800bb58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d0f6:	480d      	ldr	r0, [pc, #52]	; (800d12c <prvInitialiseTaskLists+0x68>)
 800d0f8:	f7fe fd2e 	bl	800bb58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d0fc:	480c      	ldr	r0, [pc, #48]	; (800d130 <prvInitialiseTaskLists+0x6c>)
 800d0fe:	f7fe fd2b 	bl	800bb58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d102:	480c      	ldr	r0, [pc, #48]	; (800d134 <prvInitialiseTaskLists+0x70>)
 800d104:	f7fe fd28 	bl	800bb58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d108:	480b      	ldr	r0, [pc, #44]	; (800d138 <prvInitialiseTaskLists+0x74>)
 800d10a:	f7fe fd25 	bl	800bb58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d10e:	4b0b      	ldr	r3, [pc, #44]	; (800d13c <prvInitialiseTaskLists+0x78>)
 800d110:	4a05      	ldr	r2, [pc, #20]	; (800d128 <prvInitialiseTaskLists+0x64>)
 800d112:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d114:	4b0a      	ldr	r3, [pc, #40]	; (800d140 <prvInitialiseTaskLists+0x7c>)
 800d116:	4a05      	ldr	r2, [pc, #20]	; (800d12c <prvInitialiseTaskLists+0x68>)
 800d118:	601a      	str	r2, [r3, #0]
}
 800d11a:	bf00      	nop
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	200000ec 	.word	0x200000ec
 800d128:	20000178 	.word	0x20000178
 800d12c:	2000018c 	.word	0x2000018c
 800d130:	200001a8 	.word	0x200001a8
 800d134:	200001bc 	.word	0x200001bc
 800d138:	200001d0 	.word	0x200001d0
 800d13c:	200001a0 	.word	0x200001a0
 800d140:	200001a4 	.word	0x200001a4

0800d144 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d14a:	4b0c      	ldr	r3, [pc, #48]	; (800d17c <prvResetNextTaskUnblockTime+0x38>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d104      	bne.n	800d15e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d154:	4b0a      	ldr	r3, [pc, #40]	; (800d180 <prvResetNextTaskUnblockTime+0x3c>)
 800d156:	f04f 32ff 	mov.w	r2, #4294967295
 800d15a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d15c:	e008      	b.n	800d170 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d15e:	4b07      	ldr	r3, [pc, #28]	; (800d17c <prvResetNextTaskUnblockTime+0x38>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	68db      	ldr	r3, [r3, #12]
 800d166:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	4a04      	ldr	r2, [pc, #16]	; (800d180 <prvResetNextTaskUnblockTime+0x3c>)
 800d16e:	6013      	str	r3, [r2, #0]
}
 800d170:	bf00      	nop
 800d172:	370c      	adds	r7, #12
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr
 800d17c:	200001a0 	.word	0x200001a0
 800d180:	20000204 	.word	0x20000204

0800d184 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d18a:	4b0b      	ldr	r3, [pc, #44]	; (800d1b8 <xTaskGetSchedulerState+0x34>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d102      	bne.n	800d198 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d192:	2301      	movs	r3, #1
 800d194:	607b      	str	r3, [r7, #4]
 800d196:	e008      	b.n	800d1aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d198:	4b08      	ldr	r3, [pc, #32]	; (800d1bc <xTaskGetSchedulerState+0x38>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d102      	bne.n	800d1a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d1a0:	2302      	movs	r3, #2
 800d1a2:	607b      	str	r3, [r7, #4]
 800d1a4:	e001      	b.n	800d1aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d1aa:	687b      	ldr	r3, [r7, #4]
	}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr
 800d1b8:	200001f0 	.word	0x200001f0
 800d1bc:	20000208 	.word	0x20000208

0800d1c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d06e      	beq.n	800d2b4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d1d6:	4b3a      	ldr	r3, [pc, #232]	; (800d2c0 <xTaskPriorityDisinherit+0x100>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	693a      	ldr	r2, [r7, #16]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d00a      	beq.n	800d1f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e4:	f383 8811 	msr	BASEPRI, r3
 800d1e8:	f3bf 8f6f 	isb	sy
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	60fb      	str	r3, [r7, #12]
}
 800d1f2:	bf00      	nop
 800d1f4:	e7fe      	b.n	800d1f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d10a      	bne.n	800d214 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d202:	f383 8811 	msr	BASEPRI, r3
 800d206:	f3bf 8f6f 	isb	sy
 800d20a:	f3bf 8f4f 	dsb	sy
 800d20e:	60bb      	str	r3, [r7, #8]
}
 800d210:	bf00      	nop
 800d212:	e7fe      	b.n	800d212 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d218:	1e5a      	subs	r2, r3, #1
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d226:	429a      	cmp	r2, r3
 800d228:	d044      	beq.n	800d2b4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d140      	bne.n	800d2b4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	3304      	adds	r3, #4
 800d236:	4618      	mov	r0, r3
 800d238:	f7fe fd18 	bl	800bc6c <uxListRemove>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d115      	bne.n	800d26e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d246:	491f      	ldr	r1, [pc, #124]	; (800d2c4 <xTaskPriorityDisinherit+0x104>)
 800d248:	4613      	mov	r3, r2
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	4413      	add	r3, r2
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	440b      	add	r3, r1
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d10a      	bne.n	800d26e <xTaskPriorityDisinherit+0xae>
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25c:	2201      	movs	r2, #1
 800d25e:	fa02 f303 	lsl.w	r3, r2, r3
 800d262:	43da      	mvns	r2, r3
 800d264:	4b18      	ldr	r3, [pc, #96]	; (800d2c8 <xTaskPriorityDisinherit+0x108>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4013      	ands	r3, r2
 800d26a:	4a17      	ldr	r2, [pc, #92]	; (800d2c8 <xTaskPriorityDisinherit+0x108>)
 800d26c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d27a:	f1c3 0207 	rsb	r2, r3, #7
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d286:	2201      	movs	r2, #1
 800d288:	409a      	lsls	r2, r3
 800d28a:	4b0f      	ldr	r3, [pc, #60]	; (800d2c8 <xTaskPriorityDisinherit+0x108>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4313      	orrs	r3, r2
 800d290:	4a0d      	ldr	r2, [pc, #52]	; (800d2c8 <xTaskPriorityDisinherit+0x108>)
 800d292:	6013      	str	r3, [r2, #0]
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d298:	4613      	mov	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	4413      	add	r3, r2
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	4a08      	ldr	r2, [pc, #32]	; (800d2c4 <xTaskPriorityDisinherit+0x104>)
 800d2a2:	441a      	add	r2, r3
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	3304      	adds	r3, #4
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	f7fe fc81 	bl	800bbb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2b4:	697b      	ldr	r3, [r7, #20]
	}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3718      	adds	r7, #24
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	200000e8 	.word	0x200000e8
 800d2c4:	200000ec 	.word	0x200000ec
 800d2c8:	200001ec 	.word	0x200001ec

0800d2cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b084      	sub	sp, #16
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d2d6:	4b29      	ldr	r3, [pc, #164]	; (800d37c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2dc:	4b28      	ldr	r3, [pc, #160]	; (800d380 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	3304      	adds	r3, #4
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7fe fcc2 	bl	800bc6c <uxListRemove>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10b      	bne.n	800d306 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d2ee:	4b24      	ldr	r3, [pc, #144]	; (800d380 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2fa:	43da      	mvns	r2, r3
 800d2fc:	4b21      	ldr	r3, [pc, #132]	; (800d384 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4013      	ands	r3, r2
 800d302:	4a20      	ldr	r2, [pc, #128]	; (800d384 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d304:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30c:	d10a      	bne.n	800d324 <prvAddCurrentTaskToDelayedList+0x58>
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d007      	beq.n	800d324 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d314:	4b1a      	ldr	r3, [pc, #104]	; (800d380 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3304      	adds	r3, #4
 800d31a:	4619      	mov	r1, r3
 800d31c:	481a      	ldr	r0, [pc, #104]	; (800d388 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d31e:	f7fe fc48 	bl	800bbb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d322:	e026      	b.n	800d372 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d324:	68fa      	ldr	r2, [r7, #12]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4413      	add	r3, r2
 800d32a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d32c:	4b14      	ldr	r3, [pc, #80]	; (800d380 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	68ba      	ldr	r2, [r7, #8]
 800d332:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d334:	68ba      	ldr	r2, [r7, #8]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d209      	bcs.n	800d350 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d33c:	4b13      	ldr	r3, [pc, #76]	; (800d38c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	4b0f      	ldr	r3, [pc, #60]	; (800d380 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	3304      	adds	r3, #4
 800d346:	4619      	mov	r1, r3
 800d348:	4610      	mov	r0, r2
 800d34a:	f7fe fc56 	bl	800bbfa <vListInsert>
}
 800d34e:	e010      	b.n	800d372 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d350:	4b0f      	ldr	r3, [pc, #60]	; (800d390 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	4b0a      	ldr	r3, [pc, #40]	; (800d380 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	3304      	adds	r3, #4
 800d35a:	4619      	mov	r1, r3
 800d35c:	4610      	mov	r0, r2
 800d35e:	f7fe fc4c 	bl	800bbfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d362:	4b0c      	ldr	r3, [pc, #48]	; (800d394 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	68ba      	ldr	r2, [r7, #8]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d202      	bcs.n	800d372 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d36c:	4a09      	ldr	r2, [pc, #36]	; (800d394 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	6013      	str	r3, [r2, #0]
}
 800d372:	bf00      	nop
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	200001e8 	.word	0x200001e8
 800d380:	200000e8 	.word	0x200000e8
 800d384:	200001ec 	.word	0x200001ec
 800d388:	200001d0 	.word	0x200001d0
 800d38c:	200001a4 	.word	0x200001a4
 800d390:	200001a0 	.word	0x200001a0
 800d394:	20000204 	.word	0x20000204

0800d398 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	3b04      	subs	r3, #4
 800d3a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d3b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	3b04      	subs	r3, #4
 800d3b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	f023 0201 	bic.w	r2, r3, #1
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	3b04      	subs	r3, #4
 800d3c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d3c8:	4a0c      	ldr	r2, [pc, #48]	; (800d3fc <pxPortInitialiseStack+0x64>)
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	3b14      	subs	r3, #20
 800d3d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3b04      	subs	r3, #4
 800d3de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f06f 0202 	mvn.w	r2, #2
 800d3e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	3b20      	subs	r3, #32
 800d3ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3714      	adds	r7, #20
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr
 800d3fc:	0800d401 	.word	0x0800d401

0800d400 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d400:	b480      	push	{r7}
 800d402:	b085      	sub	sp, #20
 800d404:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d406:	2300      	movs	r3, #0
 800d408:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d40a:	4b12      	ldr	r3, [pc, #72]	; (800d454 <prvTaskExitError+0x54>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d412:	d00a      	beq.n	800d42a <prvTaskExitError+0x2a>
	__asm volatile
 800d414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d418:	f383 8811 	msr	BASEPRI, r3
 800d41c:	f3bf 8f6f 	isb	sy
 800d420:	f3bf 8f4f 	dsb	sy
 800d424:	60fb      	str	r3, [r7, #12]
}
 800d426:	bf00      	nop
 800d428:	e7fe      	b.n	800d428 <prvTaskExitError+0x28>
	__asm volatile
 800d42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42e:	f383 8811 	msr	BASEPRI, r3
 800d432:	f3bf 8f6f 	isb	sy
 800d436:	f3bf 8f4f 	dsb	sy
 800d43a:	60bb      	str	r3, [r7, #8]
}
 800d43c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d43e:	bf00      	nop
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d0fc      	beq.n	800d440 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d446:	bf00      	nop
 800d448:	bf00      	nop
 800d44a:	3714      	adds	r7, #20
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr
 800d454:	2000003c 	.word	0x2000003c
	...

0800d460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d460:	4b07      	ldr	r3, [pc, #28]	; (800d480 <pxCurrentTCBConst2>)
 800d462:	6819      	ldr	r1, [r3, #0]
 800d464:	6808      	ldr	r0, [r1, #0]
 800d466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46a:	f380 8809 	msr	PSP, r0
 800d46e:	f3bf 8f6f 	isb	sy
 800d472:	f04f 0000 	mov.w	r0, #0
 800d476:	f380 8811 	msr	BASEPRI, r0
 800d47a:	4770      	bx	lr
 800d47c:	f3af 8000 	nop.w

0800d480 <pxCurrentTCBConst2>:
 800d480:	200000e8 	.word	0x200000e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d484:	bf00      	nop
 800d486:	bf00      	nop

0800d488 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
	__asm volatile
 800d48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	607b      	str	r3, [r7, #4]
}
 800d4a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d4a2:	4b0f      	ldr	r3, [pc, #60]	; (800d4e0 <vPortEnterCritical+0x58>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	4a0d      	ldr	r2, [pc, #52]	; (800d4e0 <vPortEnterCritical+0x58>)
 800d4aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d4ac:	4b0c      	ldr	r3, [pc, #48]	; (800d4e0 <vPortEnterCritical+0x58>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d10f      	bne.n	800d4d4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d4b4:	4b0b      	ldr	r3, [pc, #44]	; (800d4e4 <vPortEnterCritical+0x5c>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d00a      	beq.n	800d4d4 <vPortEnterCritical+0x4c>
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	603b      	str	r3, [r7, #0]
}
 800d4d0:	bf00      	nop
 800d4d2:	e7fe      	b.n	800d4d2 <vPortEnterCritical+0x4a>
	}
}
 800d4d4:	bf00      	nop
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr
 800d4e0:	2000003c 	.word	0x2000003c
 800d4e4:	e000ed04 	.word	0xe000ed04

0800d4e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d4ee:	4b12      	ldr	r3, [pc, #72]	; (800d538 <vPortExitCritical+0x50>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d10a      	bne.n	800d50c <vPortExitCritical+0x24>
	__asm volatile
 800d4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fa:	f383 8811 	msr	BASEPRI, r3
 800d4fe:	f3bf 8f6f 	isb	sy
 800d502:	f3bf 8f4f 	dsb	sy
 800d506:	607b      	str	r3, [r7, #4]
}
 800d508:	bf00      	nop
 800d50a:	e7fe      	b.n	800d50a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d50c:	4b0a      	ldr	r3, [pc, #40]	; (800d538 <vPortExitCritical+0x50>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	3b01      	subs	r3, #1
 800d512:	4a09      	ldr	r2, [pc, #36]	; (800d538 <vPortExitCritical+0x50>)
 800d514:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d516:	4b08      	ldr	r3, [pc, #32]	; (800d538 <vPortExitCritical+0x50>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d105      	bne.n	800d52a <vPortExitCritical+0x42>
 800d51e:	2300      	movs	r3, #0
 800d520:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	f383 8811 	msr	BASEPRI, r3
}
 800d528:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d52a:	bf00      	nop
 800d52c:	370c      	adds	r7, #12
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr
 800d536:	bf00      	nop
 800d538:	2000003c 	.word	0x2000003c
 800d53c:	00000000 	.word	0x00000000

0800d540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d540:	f3ef 8009 	mrs	r0, PSP
 800d544:	f3bf 8f6f 	isb	sy
 800d548:	4b15      	ldr	r3, [pc, #84]	; (800d5a0 <pxCurrentTCBConst>)
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	f01e 0f10 	tst.w	lr, #16
 800d550:	bf08      	it	eq
 800d552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d55a:	6010      	str	r0, [r2, #0]
 800d55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d560:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d564:	f380 8811 	msr	BASEPRI, r0
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f7ff fc1e 	bl	800cdb0 <vTaskSwitchContext>
 800d574:	f04f 0000 	mov.w	r0, #0
 800d578:	f380 8811 	msr	BASEPRI, r0
 800d57c:	bc09      	pop	{r0, r3}
 800d57e:	6819      	ldr	r1, [r3, #0]
 800d580:	6808      	ldr	r0, [r1, #0]
 800d582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d586:	f01e 0f10 	tst.w	lr, #16
 800d58a:	bf08      	it	eq
 800d58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d590:	f380 8809 	msr	PSP, r0
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	f3af 8000 	nop.w

0800d5a0 <pxCurrentTCBConst>:
 800d5a0:	200000e8 	.word	0x200000e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d5a4:	bf00      	nop
 800d5a6:	bf00      	nop

0800d5a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800d5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f3bf 8f4f 	dsb	sy
 800d5be:	607b      	str	r3, [r7, #4]
}
 800d5c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d5c2:	f7ff fb3d 	bl	800cc40 <xTaskIncrementTick>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d003      	beq.n	800d5d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d5cc:	4b06      	ldr	r3, [pc, #24]	; (800d5e8 <SysTick_Handler+0x40>)
 800d5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5d2:	601a      	str	r2, [r3, #0]
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	f383 8811 	msr	BASEPRI, r3
}
 800d5de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d5e0:	bf00      	nop
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	e000ed04 	.word	0xe000ed04

0800d5ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b085      	sub	sp, #20
 800d5f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d5f2:	f3ef 8305 	mrs	r3, IPSR
 800d5f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2b0f      	cmp	r3, #15
 800d5fc:	d914      	bls.n	800d628 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d5fe:	4a17      	ldr	r2, [pc, #92]	; (800d65c <vPortValidateInterruptPriority+0x70>)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	4413      	add	r3, r2
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d608:	4b15      	ldr	r3, [pc, #84]	; (800d660 <vPortValidateInterruptPriority+0x74>)
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	7afa      	ldrb	r2, [r7, #11]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d20a      	bcs.n	800d628 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d616:	f383 8811 	msr	BASEPRI, r3
 800d61a:	f3bf 8f6f 	isb	sy
 800d61e:	f3bf 8f4f 	dsb	sy
 800d622:	607b      	str	r3, [r7, #4]
}
 800d624:	bf00      	nop
 800d626:	e7fe      	b.n	800d626 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d628:	4b0e      	ldr	r3, [pc, #56]	; (800d664 <vPortValidateInterruptPriority+0x78>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d630:	4b0d      	ldr	r3, [pc, #52]	; (800d668 <vPortValidateInterruptPriority+0x7c>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	429a      	cmp	r2, r3
 800d636:	d90a      	bls.n	800d64e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63c:	f383 8811 	msr	BASEPRI, r3
 800d640:	f3bf 8f6f 	isb	sy
 800d644:	f3bf 8f4f 	dsb	sy
 800d648:	603b      	str	r3, [r7, #0]
}
 800d64a:	bf00      	nop
 800d64c:	e7fe      	b.n	800d64c <vPortValidateInterruptPriority+0x60>
	}
 800d64e:	bf00      	nop
 800d650:	3714      	adds	r7, #20
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	e000e3f0 	.word	0xe000e3f0
 800d660:	2000020c 	.word	0x2000020c
 800d664:	e000ed0c 	.word	0xe000ed0c
 800d668:	20000210 	.word	0x20000210

0800d66c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b08a      	sub	sp, #40	; 0x28
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d674:	2300      	movs	r3, #0
 800d676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d678:	f7ff fa38 	bl	800caec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d67c:	4b5d      	ldr	r3, [pc, #372]	; (800d7f4 <pvPortMalloc+0x188>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d101      	bne.n	800d688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d684:	f000 f924 	bl	800d8d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d688:	4b5b      	ldr	r3, [pc, #364]	; (800d7f8 <pvPortMalloc+0x18c>)
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4013      	ands	r3, r2
 800d690:	2b00      	cmp	r3, #0
 800d692:	f040 8093 	bne.w	800d7bc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d01d      	beq.n	800d6d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d69c:	2208      	movs	r2, #8
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f003 0307 	and.w	r3, r3, #7
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d014      	beq.n	800d6d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f023 0307 	bic.w	r3, r3, #7
 800d6b4:	3308      	adds	r3, #8
 800d6b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f003 0307 	and.w	r3, r3, #7
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d00a      	beq.n	800d6d8 <pvPortMalloc+0x6c>
	__asm volatile
 800d6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c6:	f383 8811 	msr	BASEPRI, r3
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	617b      	str	r3, [r7, #20]
}
 800d6d4:	bf00      	nop
 800d6d6:	e7fe      	b.n	800d6d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d06e      	beq.n	800d7bc <pvPortMalloc+0x150>
 800d6de:	4b47      	ldr	r3, [pc, #284]	; (800d7fc <pvPortMalloc+0x190>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d869      	bhi.n	800d7bc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d6e8:	4b45      	ldr	r3, [pc, #276]	; (800d800 <pvPortMalloc+0x194>)
 800d6ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d6ec:	4b44      	ldr	r3, [pc, #272]	; (800d800 <pvPortMalloc+0x194>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6f2:	e004      	b.n	800d6fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	429a      	cmp	r2, r3
 800d706:	d903      	bls.n	800d710 <pvPortMalloc+0xa4>
 800d708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d1f1      	bne.n	800d6f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d710:	4b38      	ldr	r3, [pc, #224]	; (800d7f4 <pvPortMalloc+0x188>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d716:	429a      	cmp	r2, r3
 800d718:	d050      	beq.n	800d7bc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d71a:	6a3b      	ldr	r3, [r7, #32]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2208      	movs	r2, #8
 800d720:	4413      	add	r3, r2
 800d722:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	6a3b      	ldr	r3, [r7, #32]
 800d72a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72e:	685a      	ldr	r2, [r3, #4]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	1ad2      	subs	r2, r2, r3
 800d734:	2308      	movs	r3, #8
 800d736:	005b      	lsls	r3, r3, #1
 800d738:	429a      	cmp	r2, r3
 800d73a:	d91f      	bls.n	800d77c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d73c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4413      	add	r3, r2
 800d742:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	f003 0307 	and.w	r3, r3, #7
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d00a      	beq.n	800d764 <pvPortMalloc+0xf8>
	__asm volatile
 800d74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	613b      	str	r3, [r7, #16]
}
 800d760:	bf00      	nop
 800d762:	e7fe      	b.n	800d762 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	685a      	ldr	r2, [r3, #4]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	1ad2      	subs	r2, r2, r3
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d776:	69b8      	ldr	r0, [r7, #24]
 800d778:	f000 f90c 	bl	800d994 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d77c:	4b1f      	ldr	r3, [pc, #124]	; (800d7fc <pvPortMalloc+0x190>)
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	4a1d      	ldr	r2, [pc, #116]	; (800d7fc <pvPortMalloc+0x190>)
 800d788:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d78a:	4b1c      	ldr	r3, [pc, #112]	; (800d7fc <pvPortMalloc+0x190>)
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	4b1d      	ldr	r3, [pc, #116]	; (800d804 <pvPortMalloc+0x198>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	429a      	cmp	r2, r3
 800d794:	d203      	bcs.n	800d79e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d796:	4b19      	ldr	r3, [pc, #100]	; (800d7fc <pvPortMalloc+0x190>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4a1a      	ldr	r2, [pc, #104]	; (800d804 <pvPortMalloc+0x198>)
 800d79c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a0:	685a      	ldr	r2, [r3, #4]
 800d7a2:	4b15      	ldr	r3, [pc, #84]	; (800d7f8 <pvPortMalloc+0x18c>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	431a      	orrs	r2, r3
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d7b2:	4b15      	ldr	r3, [pc, #84]	; (800d808 <pvPortMalloc+0x19c>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	4a13      	ldr	r2, [pc, #76]	; (800d808 <pvPortMalloc+0x19c>)
 800d7ba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d7bc:	f7ff f9a4 	bl	800cb08 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d101      	bne.n	800d7ca <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d7c6:	f7f3 fb86 	bl	8000ed6 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7ca:	69fb      	ldr	r3, [r7, #28]
 800d7cc:	f003 0307 	and.w	r3, r3, #7
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00a      	beq.n	800d7ea <pvPortMalloc+0x17e>
	__asm volatile
 800d7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d8:	f383 8811 	msr	BASEPRI, r3
 800d7dc:	f3bf 8f6f 	isb	sy
 800d7e0:	f3bf 8f4f 	dsb	sy
 800d7e4:	60fb      	str	r3, [r7, #12]
}
 800d7e6:	bf00      	nop
 800d7e8:	e7fe      	b.n	800d7e8 <pvPortMalloc+0x17c>
	return pvReturn;
 800d7ea:	69fb      	ldr	r3, [r7, #28]
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3728      	adds	r7, #40	; 0x28
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	2000821c 	.word	0x2000821c
 800d7f8:	20008230 	.word	0x20008230
 800d7fc:	20008220 	.word	0x20008220
 800d800:	20008214 	.word	0x20008214
 800d804:	20008224 	.word	0x20008224
 800d808:	20008228 	.word	0x20008228

0800d80c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b086      	sub	sp, #24
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d04d      	beq.n	800d8ba <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d81e:	2308      	movs	r3, #8
 800d820:	425b      	negs	r3, r3
 800d822:	697a      	ldr	r2, [r7, #20]
 800d824:	4413      	add	r3, r2
 800d826:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	685a      	ldr	r2, [r3, #4]
 800d830:	4b24      	ldr	r3, [pc, #144]	; (800d8c4 <vPortFree+0xb8>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4013      	ands	r3, r2
 800d836:	2b00      	cmp	r3, #0
 800d838:	d10a      	bne.n	800d850 <vPortFree+0x44>
	__asm volatile
 800d83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d83e:	f383 8811 	msr	BASEPRI, r3
 800d842:	f3bf 8f6f 	isb	sy
 800d846:	f3bf 8f4f 	dsb	sy
 800d84a:	60fb      	str	r3, [r7, #12]
}
 800d84c:	bf00      	nop
 800d84e:	e7fe      	b.n	800d84e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00a      	beq.n	800d86e <vPortFree+0x62>
	__asm volatile
 800d858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85c:	f383 8811 	msr	BASEPRI, r3
 800d860:	f3bf 8f6f 	isb	sy
 800d864:	f3bf 8f4f 	dsb	sy
 800d868:	60bb      	str	r3, [r7, #8]
}
 800d86a:	bf00      	nop
 800d86c:	e7fe      	b.n	800d86c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	685a      	ldr	r2, [r3, #4]
 800d872:	4b14      	ldr	r3, [pc, #80]	; (800d8c4 <vPortFree+0xb8>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4013      	ands	r3, r2
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d01e      	beq.n	800d8ba <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d11a      	bne.n	800d8ba <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	685a      	ldr	r2, [r3, #4]
 800d888:	4b0e      	ldr	r3, [pc, #56]	; (800d8c4 <vPortFree+0xb8>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	43db      	mvns	r3, r3
 800d88e:	401a      	ands	r2, r3
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d894:	f7ff f92a 	bl	800caec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	685a      	ldr	r2, [r3, #4]
 800d89c:	4b0a      	ldr	r3, [pc, #40]	; (800d8c8 <vPortFree+0xbc>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	4a09      	ldr	r2, [pc, #36]	; (800d8c8 <vPortFree+0xbc>)
 800d8a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8a6:	6938      	ldr	r0, [r7, #16]
 800d8a8:	f000 f874 	bl	800d994 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d8ac:	4b07      	ldr	r3, [pc, #28]	; (800d8cc <vPortFree+0xc0>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	4a06      	ldr	r2, [pc, #24]	; (800d8cc <vPortFree+0xc0>)
 800d8b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d8b6:	f7ff f927 	bl	800cb08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8ba:	bf00      	nop
 800d8bc:	3718      	adds	r7, #24
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	20008230 	.word	0x20008230
 800d8c8:	20008220 	.word	0x20008220
 800d8cc:	2000822c 	.word	0x2000822c

0800d8d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d8d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d8da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d8dc:	4b27      	ldr	r3, [pc, #156]	; (800d97c <prvHeapInit+0xac>)
 800d8de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f003 0307 	and.w	r3, r3, #7
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d00c      	beq.n	800d904 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	3307      	adds	r3, #7
 800d8ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f023 0307 	bic.w	r3, r3, #7
 800d8f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d8f8:	68ba      	ldr	r2, [r7, #8]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	4a1f      	ldr	r2, [pc, #124]	; (800d97c <prvHeapInit+0xac>)
 800d900:	4413      	add	r3, r2
 800d902:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d908:	4a1d      	ldr	r2, [pc, #116]	; (800d980 <prvHeapInit+0xb0>)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d90e:	4b1c      	ldr	r3, [pc, #112]	; (800d980 <prvHeapInit+0xb0>)
 800d910:	2200      	movs	r2, #0
 800d912:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	68ba      	ldr	r2, [r7, #8]
 800d918:	4413      	add	r3, r2
 800d91a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d91c:	2208      	movs	r2, #8
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	1a9b      	subs	r3, r3, r2
 800d922:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f023 0307 	bic.w	r3, r3, #7
 800d92a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	4a15      	ldr	r2, [pc, #84]	; (800d984 <prvHeapInit+0xb4>)
 800d930:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d932:	4b14      	ldr	r3, [pc, #80]	; (800d984 <prvHeapInit+0xb4>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	2200      	movs	r2, #0
 800d938:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d93a:	4b12      	ldr	r3, [pc, #72]	; (800d984 <prvHeapInit+0xb4>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2200      	movs	r2, #0
 800d940:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	68fa      	ldr	r2, [r7, #12]
 800d94a:	1ad2      	subs	r2, r2, r3
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d950:	4b0c      	ldr	r3, [pc, #48]	; (800d984 <prvHeapInit+0xb4>)
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	4a0a      	ldr	r2, [pc, #40]	; (800d988 <prvHeapInit+0xb8>)
 800d95e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	4a09      	ldr	r2, [pc, #36]	; (800d98c <prvHeapInit+0xbc>)
 800d966:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d968:	4b09      	ldr	r3, [pc, #36]	; (800d990 <prvHeapInit+0xc0>)
 800d96a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d96e:	601a      	str	r2, [r3, #0]
}
 800d970:	bf00      	nop
 800d972:	3714      	adds	r7, #20
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr
 800d97c:	20000214 	.word	0x20000214
 800d980:	20008214 	.word	0x20008214
 800d984:	2000821c 	.word	0x2000821c
 800d988:	20008224 	.word	0x20008224
 800d98c:	20008220 	.word	0x20008220
 800d990:	20008230 	.word	0x20008230

0800d994 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d994:	b480      	push	{r7}
 800d996:	b085      	sub	sp, #20
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d99c:	4b28      	ldr	r3, [pc, #160]	; (800da40 <prvInsertBlockIntoFreeList+0xac>)
 800d99e:	60fb      	str	r3, [r7, #12]
 800d9a0:	e002      	b.n	800d9a8 <prvInsertBlockIntoFreeList+0x14>
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	60fb      	str	r3, [r7, #12]
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d8f7      	bhi.n	800d9a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	4413      	add	r3, r2
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d108      	bne.n	800d9d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	685a      	ldr	r2, [r3, #4]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	441a      	add	r2, r3
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	68ba      	ldr	r2, [r7, #8]
 800d9e0:	441a      	add	r2, r3
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d118      	bne.n	800da1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	4b15      	ldr	r3, [pc, #84]	; (800da44 <prvInsertBlockIntoFreeList+0xb0>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d00d      	beq.n	800da12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	685a      	ldr	r2, [r3, #4]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	441a      	add	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	601a      	str	r2, [r3, #0]
 800da10:	e008      	b.n	800da24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da12:	4b0c      	ldr	r3, [pc, #48]	; (800da44 <prvInsertBlockIntoFreeList+0xb0>)
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	601a      	str	r2, [r3, #0]
 800da1a:	e003      	b.n	800da24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da24:	68fa      	ldr	r2, [r7, #12]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d002      	beq.n	800da32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da32:	bf00      	nop
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	20008214 	.word	0x20008214
 800da44:	2000821c 	.word	0x2000821c

0800da48 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800da4c:	2200      	movs	r2, #0
 800da4e:	490e      	ldr	r1, [pc, #56]	; (800da88 <MX_USB_HOST_Init+0x40>)
 800da50:	480e      	ldr	r0, [pc, #56]	; (800da8c <MX_USB_HOST_Init+0x44>)
 800da52:	f7fc f98f 	bl	8009d74 <USBH_Init>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d001      	beq.n	800da60 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800da5c:	f7f4 fb22 	bl	80020a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800da60:	490b      	ldr	r1, [pc, #44]	; (800da90 <MX_USB_HOST_Init+0x48>)
 800da62:	480a      	ldr	r0, [pc, #40]	; (800da8c <MX_USB_HOST_Init+0x44>)
 800da64:	f7fc fa3c 	bl	8009ee0 <USBH_RegisterClass>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d001      	beq.n	800da72 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800da6e:	f7f4 fb19 	bl	80020a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800da72:	4806      	ldr	r0, [pc, #24]	; (800da8c <MX_USB_HOST_Init+0x44>)
 800da74:	f7fc fac0 	bl	8009ff8 <USBH_Start>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d001      	beq.n	800da82 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800da7e:	f7f4 fb11 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800da82:	bf00      	nop
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	0800da95 	.word	0x0800da95
 800da8c:	200084ec 	.word	0x200084ec
 800da90:	2000001c 	.word	0x2000001c

0800da94 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	460b      	mov	r3, r1
 800da9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800daa0:	78fb      	ldrb	r3, [r7, #3]
 800daa2:	3b01      	subs	r3, #1
 800daa4:	2b04      	cmp	r3, #4
 800daa6:	d819      	bhi.n	800dadc <USBH_UserProcess+0x48>
 800daa8:	a201      	add	r2, pc, #4	; (adr r2, 800dab0 <USBH_UserProcess+0x1c>)
 800daaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daae:	bf00      	nop
 800dab0:	0800dadd 	.word	0x0800dadd
 800dab4:	0800dacd 	.word	0x0800dacd
 800dab8:	0800dadd 	.word	0x0800dadd
 800dabc:	0800dad5 	.word	0x0800dad5
 800dac0:	0800dac5 	.word	0x0800dac5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800dac4:	4b09      	ldr	r3, [pc, #36]	; (800daec <USBH_UserProcess+0x58>)
 800dac6:	2203      	movs	r2, #3
 800dac8:	701a      	strb	r2, [r3, #0]
  break;
 800daca:	e008      	b.n	800dade <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800dacc:	4b07      	ldr	r3, [pc, #28]	; (800daec <USBH_UserProcess+0x58>)
 800dace:	2202      	movs	r2, #2
 800dad0:	701a      	strb	r2, [r3, #0]
  break;
 800dad2:	e004      	b.n	800dade <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dad4:	4b05      	ldr	r3, [pc, #20]	; (800daec <USBH_UserProcess+0x58>)
 800dad6:	2201      	movs	r2, #1
 800dad8:	701a      	strb	r2, [r3, #0]
  break;
 800dada:	e000      	b.n	800dade <USBH_UserProcess+0x4a>

  default:
  break;
 800dadc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800dade:	bf00      	nop
 800dae0:	370c      	adds	r7, #12
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop
 800daec:	20008234 	.word	0x20008234

0800daf0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b08a      	sub	sp, #40	; 0x28
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800daf8:	f107 0314 	add.w	r3, r7, #20
 800dafc:	2200      	movs	r2, #0
 800dafe:	601a      	str	r2, [r3, #0]
 800db00:	605a      	str	r2, [r3, #4]
 800db02:	609a      	str	r2, [r3, #8]
 800db04:	60da      	str	r2, [r3, #12]
 800db06:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a24      	ldr	r2, [pc, #144]	; (800dba0 <HAL_HCD_MspInit+0xb0>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d141      	bne.n	800db96 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800db12:	2300      	movs	r3, #0
 800db14:	613b      	str	r3, [r7, #16]
 800db16:	4b23      	ldr	r3, [pc, #140]	; (800dba4 <HAL_HCD_MspInit+0xb4>)
 800db18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db1a:	4a22      	ldr	r2, [pc, #136]	; (800dba4 <HAL_HCD_MspInit+0xb4>)
 800db1c:	f043 0302 	orr.w	r3, r3, #2
 800db20:	6313      	str	r3, [r2, #48]	; 0x30
 800db22:	4b20      	ldr	r3, [pc, #128]	; (800dba4 <HAL_HCD_MspInit+0xb4>)
 800db24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db26:	f003 0302 	and.w	r3, r3, #2
 800db2a:	613b      	str	r3, [r7, #16]
 800db2c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800db2e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800db32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db34:	2302      	movs	r3, #2
 800db36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db38:	2300      	movs	r3, #0
 800db3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800db3c:	2300      	movs	r3, #0
 800db3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800db40:	230c      	movs	r3, #12
 800db42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800db44:	f107 0314 	add.w	r3, r7, #20
 800db48:	4619      	mov	r1, r3
 800db4a:	4817      	ldr	r0, [pc, #92]	; (800dba8 <HAL_HCD_MspInit+0xb8>)
 800db4c:	f7f5 faf8 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800db50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800db54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800db56:	2300      	movs	r3, #0
 800db58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db5a:	2300      	movs	r3, #0
 800db5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800db5e:	f107 0314 	add.w	r3, r7, #20
 800db62:	4619      	mov	r1, r3
 800db64:	4810      	ldr	r0, [pc, #64]	; (800dba8 <HAL_HCD_MspInit+0xb8>)
 800db66:	f7f5 faeb 	bl	8003140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800db6a:	2300      	movs	r3, #0
 800db6c:	60fb      	str	r3, [r7, #12]
 800db6e:	4b0d      	ldr	r3, [pc, #52]	; (800dba4 <HAL_HCD_MspInit+0xb4>)
 800db70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db72:	4a0c      	ldr	r2, [pc, #48]	; (800dba4 <HAL_HCD_MspInit+0xb4>)
 800db74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db78:	6313      	str	r3, [r2, #48]	; 0x30
 800db7a:	4b0a      	ldr	r3, [pc, #40]	; (800dba4 <HAL_HCD_MspInit+0xb4>)
 800db7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db82:	60fb      	str	r3, [r7, #12]
 800db84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800db86:	2200      	movs	r2, #0
 800db88:	2105      	movs	r1, #5
 800db8a:	204d      	movs	r0, #77	; 0x4d
 800db8c:	f7f5 f8a6 	bl	8002cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800db90:	204d      	movs	r0, #77	; 0x4d
 800db92:	f7f5 f8bf 	bl	8002d14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800db96:	bf00      	nop
 800db98:	3728      	adds	r7, #40	; 0x28
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	40040000 	.word	0x40040000
 800dba4:	40023800 	.word	0x40023800
 800dba8:	40020400 	.word	0x40020400

0800dbac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fc fec9 	bl	800a952 <USBH_LL_IncTimer>
}
 800dbc0:	bf00      	nop
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7fc ff0d 	bl	800a9f6 <USBH_LL_Connect>
}
 800dbdc:	bf00      	nop
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fc ff22 	bl	800aa3c <USBH_LL_Disconnect>
}
 800dbf8:	bf00      	nop
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	460b      	mov	r3, r1
 800dc0a:	70fb      	strb	r3, [r7, #3]
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7fc ff57 	bl	800aaca <USBH_LL_NotifyURBChange>
#endif
}
 800dc1c:	bf00      	nop
 800dc1e:	3708      	adds	r7, #8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fc feb7 	bl	800a9a6 <USBH_LL_PortEnabled>
}
 800dc38:	bf00      	nop
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fc fec3 	bl	800a9da <USBH_LL_PortDisabled>
}
 800dc54:	bf00      	nop
 800dc56:	3708      	adds	r7, #8
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d132      	bne.n	800dcd4 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800dc6e:	4a1c      	ldr	r2, [pc, #112]	; (800dce0 <USBH_LL_Init+0x84>)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	4a19      	ldr	r2, [pc, #100]	; (800dce0 <USBH_LL_Init+0x84>)
 800dc7a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800dc7e:	4b18      	ldr	r3, [pc, #96]	; (800dce0 <USBH_LL_Init+0x84>)
 800dc80:	4a18      	ldr	r2, [pc, #96]	; (800dce4 <USBH_LL_Init+0x88>)
 800dc82:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800dc84:	4b16      	ldr	r3, [pc, #88]	; (800dce0 <USBH_LL_Init+0x84>)
 800dc86:	220c      	movs	r2, #12
 800dc88:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800dc8a:	4b15      	ldr	r3, [pc, #84]	; (800dce0 <USBH_LL_Init+0x84>)
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800dc90:	4b13      	ldr	r3, [pc, #76]	; (800dce0 <USBH_LL_Init+0x84>)
 800dc92:	2200      	movs	r2, #0
 800dc94:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800dc96:	4b12      	ldr	r3, [pc, #72]	; (800dce0 <USBH_LL_Init+0x84>)
 800dc98:	2202      	movs	r2, #2
 800dc9a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800dc9c:	4b10      	ldr	r3, [pc, #64]	; (800dce0 <USBH_LL_Init+0x84>)
 800dc9e:	2200      	movs	r2, #0
 800dca0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800dca2:	4b0f      	ldr	r3, [pc, #60]	; (800dce0 <USBH_LL_Init+0x84>)
 800dca4:	2200      	movs	r2, #0
 800dca6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800dca8:	4b0d      	ldr	r3, [pc, #52]	; (800dce0 <USBH_LL_Init+0x84>)
 800dcaa:	2200      	movs	r2, #0
 800dcac:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800dcae:	4b0c      	ldr	r3, [pc, #48]	; (800dce0 <USBH_LL_Init+0x84>)
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800dcb4:	480a      	ldr	r0, [pc, #40]	; (800dce0 <USBH_LL_Init+0x84>)
 800dcb6:	f7f5 fc22 	bl	80034fe <HAL_HCD_Init>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d001      	beq.n	800dcc4 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800dcc0:	f7f4 f9f0 	bl	80020a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800dcc4:	4806      	ldr	r0, [pc, #24]	; (800dce0 <USBH_LL_Init+0x84>)
 800dcc6:	f7f6 f806 	bl	8003cd6 <HAL_HCD_GetCurrentFrame>
 800dcca:	4603      	mov	r3, r0
 800dccc:	4619      	mov	r1, r3
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f7fc fe30 	bl	800a934 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3708      	adds	r7, #8
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	200088d0 	.word	0x200088d0
 800dce4:	40040000 	.word	0x40040000

0800dce8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7f5 ff73 	bl	8003bea <HAL_HCD_Start>
 800dd04:	4603      	mov	r3, r0
 800dd06:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd08:	7bfb      	ldrb	r3, [r7, #15]
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f000 f95c 	bl	800dfc8 <USBH_Get_USB_Status>
 800dd10:	4603      	mov	r3, r0
 800dd12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd14:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3710      	adds	r7, #16
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b084      	sub	sp, #16
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd26:	2300      	movs	r3, #0
 800dd28:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7f5 ff7b 	bl	8003c30 <HAL_HCD_Stop>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd3e:	7bfb      	ldrb	r3, [r7, #15]
 800dd40:	4618      	mov	r0, r3
 800dd42:	f000 f941 	bl	800dfc8 <USBH_Get_USB_Status>
 800dd46:	4603      	mov	r3, r0
 800dd48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3710      	adds	r7, #16
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7f5 ffc3 	bl	8003cf2 <HAL_HCD_GetCurrentSpeed>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	2b02      	cmp	r3, #2
 800dd70:	d00c      	beq.n	800dd8c <USBH_LL_GetSpeed+0x38>
 800dd72:	2b02      	cmp	r3, #2
 800dd74:	d80d      	bhi.n	800dd92 <USBH_LL_GetSpeed+0x3e>
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d002      	beq.n	800dd80 <USBH_LL_GetSpeed+0x2c>
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d003      	beq.n	800dd86 <USBH_LL_GetSpeed+0x32>
 800dd7e:	e008      	b.n	800dd92 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dd80:	2300      	movs	r3, #0
 800dd82:	73fb      	strb	r3, [r7, #15]
    break;
 800dd84:	e008      	b.n	800dd98 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dd86:	2301      	movs	r3, #1
 800dd88:	73fb      	strb	r3, [r7, #15]
    break;
 800dd8a:	e005      	b.n	800dd98 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dd8c:	2302      	movs	r3, #2
 800dd8e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd90:	e002      	b.n	800dd98 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dd92:	2301      	movs	r3, #1
 800dd94:	73fb      	strb	r3, [r7, #15]
    break;
 800dd96:	bf00      	nop
  }
  return  speed;
 800dd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b084      	sub	sp, #16
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7f5 ff56 	bl	8003c6a <HAL_HCD_ResetPort>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ddc2:	7bfb      	ldrb	r3, [r7, #15]
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f000 f8ff 	bl	800dfc8 <USBH_Get_USB_Status>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddce:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3710      	adds	r7, #16
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ddea:	78fa      	ldrb	r2, [r7, #3]
 800ddec:	4611      	mov	r1, r2
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7f5 ff5d 	bl	8003cae <HAL_HCD_HC_GetXferCount>
 800ddf4:	4603      	mov	r3, r0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ddfe:	b590      	push	{r4, r7, lr}
 800de00:	b089      	sub	sp, #36	; 0x24
 800de02:	af04      	add	r7, sp, #16
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	4608      	mov	r0, r1
 800de08:	4611      	mov	r1, r2
 800de0a:	461a      	mov	r2, r3
 800de0c:	4603      	mov	r3, r0
 800de0e:	70fb      	strb	r3, [r7, #3]
 800de10:	460b      	mov	r3, r1
 800de12:	70bb      	strb	r3, [r7, #2]
 800de14:	4613      	mov	r3, r2
 800de16:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de18:	2300      	movs	r3, #0
 800de1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de1c:	2300      	movs	r3, #0
 800de1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800de26:	787c      	ldrb	r4, [r7, #1]
 800de28:	78ba      	ldrb	r2, [r7, #2]
 800de2a:	78f9      	ldrb	r1, [r7, #3]
 800de2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800de2e:	9302      	str	r3, [sp, #8]
 800de30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800de34:	9301      	str	r3, [sp, #4]
 800de36:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de3a:	9300      	str	r3, [sp, #0]
 800de3c:	4623      	mov	r3, r4
 800de3e:	f7f5 fbc0 	bl	80035c2 <HAL_HCD_HC_Init>
 800de42:	4603      	mov	r3, r0
 800de44:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800de46:	7bfb      	ldrb	r3, [r7, #15]
 800de48:	4618      	mov	r0, r3
 800de4a:	f000 f8bd 	bl	800dfc8 <USBH_Get_USB_Status>
 800de4e:	4603      	mov	r3, r0
 800de50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de52:	7bbb      	ldrb	r3, [r7, #14]
}
 800de54:	4618      	mov	r0, r3
 800de56:	3714      	adds	r7, #20
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd90      	pop	{r4, r7, pc}

0800de5c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	460b      	mov	r3, r1
 800de66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de68:	2300      	movs	r3, #0
 800de6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de6c:	2300      	movs	r3, #0
 800de6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de76:	78fa      	ldrb	r2, [r7, #3]
 800de78:	4611      	mov	r1, r2
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7f5 fc30 	bl	80036e0 <HAL_HCD_HC_Halt>
 800de80:	4603      	mov	r3, r0
 800de82:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de84:	7bfb      	ldrb	r3, [r7, #15]
 800de86:	4618      	mov	r0, r3
 800de88:	f000 f89e 	bl	800dfc8 <USBH_Get_USB_Status>
 800de8c:	4603      	mov	r3, r0
 800de8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de90:	7bbb      	ldrb	r3, [r7, #14]
}
 800de92:	4618      	mov	r0, r3
 800de94:	3710      	adds	r7, #16
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800de9a:	b590      	push	{r4, r7, lr}
 800de9c:	b089      	sub	sp, #36	; 0x24
 800de9e:	af04      	add	r7, sp, #16
 800dea0:	6078      	str	r0, [r7, #4]
 800dea2:	4608      	mov	r0, r1
 800dea4:	4611      	mov	r1, r2
 800dea6:	461a      	mov	r2, r3
 800dea8:	4603      	mov	r3, r0
 800deaa:	70fb      	strb	r3, [r7, #3]
 800deac:	460b      	mov	r3, r1
 800deae:	70bb      	strb	r3, [r7, #2]
 800deb0:	4613      	mov	r3, r2
 800deb2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deb4:	2300      	movs	r3, #0
 800deb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800deb8:	2300      	movs	r3, #0
 800deba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dec2:	787c      	ldrb	r4, [r7, #1]
 800dec4:	78ba      	ldrb	r2, [r7, #2]
 800dec6:	78f9      	ldrb	r1, [r7, #3]
 800dec8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800decc:	9303      	str	r3, [sp, #12]
 800dece:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ded0:	9302      	str	r3, [sp, #8]
 800ded2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded4:	9301      	str	r3, [sp, #4]
 800ded6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800deda:	9300      	str	r3, [sp, #0]
 800dedc:	4623      	mov	r3, r4
 800dede:	f7f5 fc23 	bl	8003728 <HAL_HCD_HC_SubmitRequest>
 800dee2:	4603      	mov	r3, r0
 800dee4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dee6:	7bfb      	ldrb	r3, [r7, #15]
 800dee8:	4618      	mov	r0, r3
 800deea:	f000 f86d 	bl	800dfc8 <USBH_Get_USB_Status>
 800deee:	4603      	mov	r3, r0
 800def0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800def2:	7bbb      	ldrb	r3, [r7, #14]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3714      	adds	r7, #20
 800def8:	46bd      	mov	sp, r7
 800defa:	bd90      	pop	{r4, r7, pc}

0800defc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	460b      	mov	r3, r1
 800df06:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df0e:	78fa      	ldrb	r2, [r7, #3]
 800df10:	4611      	mov	r1, r2
 800df12:	4618      	mov	r0, r3
 800df14:	f7f5 feb7 	bl	8003c86 <HAL_HCD_HC_GetURBState>
 800df18:	4603      	mov	r3, r0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b082      	sub	sp, #8
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
 800df2a:	460b      	mov	r3, r1
 800df2c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800df34:	2b00      	cmp	r3, #0
 800df36:	d103      	bne.n	800df40 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800df38:	78fb      	ldrb	r3, [r7, #3]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f000 f870 	bl	800e020 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800df40:	20c8      	movs	r0, #200	; 0xc8
 800df42:	f7f4 fdef 	bl	8002b24 <HAL_Delay>
  return USBH_OK;
 800df46:	2300      	movs	r3, #0
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3708      	adds	r7, #8
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	460b      	mov	r3, r1
 800df5a:	70fb      	strb	r3, [r7, #3]
 800df5c:	4613      	mov	r3, r2
 800df5e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df66:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800df68:	78fb      	ldrb	r3, [r7, #3]
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	212c      	movs	r1, #44	; 0x2c
 800df6e:	fb01 f303 	mul.w	r3, r1, r3
 800df72:	4413      	add	r3, r2
 800df74:	333b      	adds	r3, #59	; 0x3b
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d009      	beq.n	800df90 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800df7c:	78fb      	ldrb	r3, [r7, #3]
 800df7e:	68fa      	ldr	r2, [r7, #12]
 800df80:	212c      	movs	r1, #44	; 0x2c
 800df82:	fb01 f303 	mul.w	r3, r1, r3
 800df86:	4413      	add	r3, r2
 800df88:	3354      	adds	r3, #84	; 0x54
 800df8a:	78ba      	ldrb	r2, [r7, #2]
 800df8c:	701a      	strb	r2, [r3, #0]
 800df8e:	e008      	b.n	800dfa2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800df90:	78fb      	ldrb	r3, [r7, #3]
 800df92:	68fa      	ldr	r2, [r7, #12]
 800df94:	212c      	movs	r1, #44	; 0x2c
 800df96:	fb01 f303 	mul.w	r3, r1, r3
 800df9a:	4413      	add	r3, r2
 800df9c:	3355      	adds	r3, #85	; 0x55
 800df9e:	78ba      	ldrb	r2, [r7, #2]
 800dfa0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800dfa2:	2300      	movs	r3, #0
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3714      	adds	r7, #20
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr

0800dfb0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f7f4 fdb3 	bl	8002b24 <HAL_Delay>
}
 800dfbe:	bf00      	nop
 800dfc0:	3708      	adds	r7, #8
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
	...

0800dfc8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	4603      	mov	r3, r0
 800dfd0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dfd6:	79fb      	ldrb	r3, [r7, #7]
 800dfd8:	2b03      	cmp	r3, #3
 800dfda:	d817      	bhi.n	800e00c <USBH_Get_USB_Status+0x44>
 800dfdc:	a201      	add	r2, pc, #4	; (adr r2, 800dfe4 <USBH_Get_USB_Status+0x1c>)
 800dfde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfe2:	bf00      	nop
 800dfe4:	0800dff5 	.word	0x0800dff5
 800dfe8:	0800dffb 	.word	0x0800dffb
 800dfec:	0800e001 	.word	0x0800e001
 800dff0:	0800e007 	.word	0x0800e007
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800dff4:	2300      	movs	r3, #0
 800dff6:	73fb      	strb	r3, [r7, #15]
    break;
 800dff8:	e00b      	b.n	800e012 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800dffa:	2302      	movs	r3, #2
 800dffc:	73fb      	strb	r3, [r7, #15]
    break;
 800dffe:	e008      	b.n	800e012 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e000:	2301      	movs	r3, #1
 800e002:	73fb      	strb	r3, [r7, #15]
    break;
 800e004:	e005      	b.n	800e012 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e006:	2302      	movs	r3, #2
 800e008:	73fb      	strb	r3, [r7, #15]
    break;
 800e00a:	e002      	b.n	800e012 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e00c:	2302      	movs	r3, #2
 800e00e:	73fb      	strb	r3, [r7, #15]
    break;
 800e010:	bf00      	nop
  }
  return usb_status;
 800e012:	7bfb      	ldrb	r3, [r7, #15]
}
 800e014:	4618      	mov	r0, r3
 800e016:	3714      	adds	r7, #20
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	4603      	mov	r3, r0
 800e028:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e02a:	79fb      	ldrb	r3, [r7, #7]
 800e02c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800e02e:	79fb      	ldrb	r3, [r7, #7]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d102      	bne.n	800e03a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e034:	2301      	movs	r3, #1
 800e036:	73fb      	strb	r3, [r7, #15]
 800e038:	e001      	b.n	800e03e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e03a:	2300      	movs	r3, #0
 800e03c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800e03e:	7bfb      	ldrb	r3, [r7, #15]
 800e040:	461a      	mov	r2, r3
 800e042:	2110      	movs	r1, #16
 800e044:	4803      	ldr	r0, [pc, #12]	; (800e054 <MX_DriverVbusHS+0x34>)
 800e046:	f7f5 fa27 	bl	8003498 <HAL_GPIO_WritePin>
}
 800e04a:	bf00      	nop
 800e04c:	3710      	adds	r7, #16
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}
 800e052:	bf00      	nop
 800e054:	40020800 	.word	0x40020800

0800e058 <gcvt>:
 800e058:	b530      	push	{r4, r5, lr}
 800e05a:	2200      	movs	r2, #0
 800e05c:	b085      	sub	sp, #20
 800e05e:	460c      	mov	r4, r1
 800e060:	4605      	mov	r5, r0
 800e062:	2300      	movs	r3, #0
 800e064:	ec51 0b10 	vmov	r0, r1, d0
 800e068:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e06c:	f7f2 fd46 	bl	8000afc <__aeabi_dcmplt>
 800e070:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e074:	4622      	mov	r2, r4
 800e076:	b118      	cbz	r0, 800e080 <gcvt+0x28>
 800e078:	232d      	movs	r3, #45	; 0x2d
 800e07a:	f802 3b01 	strb.w	r3, [r2], #1
 800e07e:	3d01      	subs	r5, #1
 800e080:	2300      	movs	r3, #0
 800e082:	4806      	ldr	r0, [pc, #24]	; (800e09c <gcvt+0x44>)
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	4629      	mov	r1, r5
 800e088:	2367      	movs	r3, #103	; 0x67
 800e08a:	6800      	ldr	r0, [r0, #0]
 800e08c:	f000 f9a0 	bl	800e3d0 <_gcvt>
 800e090:	2800      	cmp	r0, #0
 800e092:	bf14      	ite	ne
 800e094:	4620      	movne	r0, r4
 800e096:	2000      	moveq	r0, #0
 800e098:	b005      	add	sp, #20
 800e09a:	bd30      	pop	{r4, r5, pc}
 800e09c:	20000040 	.word	0x20000040

0800e0a0 <__errno>:
 800e0a0:	4b01      	ldr	r3, [pc, #4]	; (800e0a8 <__errno+0x8>)
 800e0a2:	6818      	ldr	r0, [r3, #0]
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop
 800e0a8:	20000040 	.word	0x20000040

0800e0ac <__libc_init_array>:
 800e0ac:	b570      	push	{r4, r5, r6, lr}
 800e0ae:	4d0d      	ldr	r5, [pc, #52]	; (800e0e4 <__libc_init_array+0x38>)
 800e0b0:	4c0d      	ldr	r4, [pc, #52]	; (800e0e8 <__libc_init_array+0x3c>)
 800e0b2:	1b64      	subs	r4, r4, r5
 800e0b4:	10a4      	asrs	r4, r4, #2
 800e0b6:	2600      	movs	r6, #0
 800e0b8:	42a6      	cmp	r6, r4
 800e0ba:	d109      	bne.n	800e0d0 <__libc_init_array+0x24>
 800e0bc:	4d0b      	ldr	r5, [pc, #44]	; (800e0ec <__libc_init_array+0x40>)
 800e0be:	4c0c      	ldr	r4, [pc, #48]	; (800e0f0 <__libc_init_array+0x44>)
 800e0c0:	f004 fdbc 	bl	8012c3c <_init>
 800e0c4:	1b64      	subs	r4, r4, r5
 800e0c6:	10a4      	asrs	r4, r4, #2
 800e0c8:	2600      	movs	r6, #0
 800e0ca:	42a6      	cmp	r6, r4
 800e0cc:	d105      	bne.n	800e0da <__libc_init_array+0x2e>
 800e0ce:	bd70      	pop	{r4, r5, r6, pc}
 800e0d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0d4:	4798      	blx	r3
 800e0d6:	3601      	adds	r6, #1
 800e0d8:	e7ee      	b.n	800e0b8 <__libc_init_array+0xc>
 800e0da:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0de:	4798      	blx	r3
 800e0e0:	3601      	adds	r6, #1
 800e0e2:	e7f2      	b.n	800e0ca <__libc_init_array+0x1e>
 800e0e4:	08013240 	.word	0x08013240
 800e0e8:	08013240 	.word	0x08013240
 800e0ec:	08013240 	.word	0x08013240
 800e0f0:	08013244 	.word	0x08013244

0800e0f4 <malloc>:
 800e0f4:	4b02      	ldr	r3, [pc, #8]	; (800e100 <malloc+0xc>)
 800e0f6:	4601      	mov	r1, r0
 800e0f8:	6818      	ldr	r0, [r3, #0]
 800e0fa:	f000 b871 	b.w	800e1e0 <_malloc_r>
 800e0fe:	bf00      	nop
 800e100:	20000040 	.word	0x20000040

0800e104 <free>:
 800e104:	4b02      	ldr	r3, [pc, #8]	; (800e110 <free+0xc>)
 800e106:	4601      	mov	r1, r0
 800e108:	6818      	ldr	r0, [r3, #0]
 800e10a:	f000 b819 	b.w	800e140 <_free_r>
 800e10e:	bf00      	nop
 800e110:	20000040 	.word	0x20000040

0800e114 <memcpy>:
 800e114:	440a      	add	r2, r1
 800e116:	4291      	cmp	r1, r2
 800e118:	f100 33ff 	add.w	r3, r0, #4294967295
 800e11c:	d100      	bne.n	800e120 <memcpy+0xc>
 800e11e:	4770      	bx	lr
 800e120:	b510      	push	{r4, lr}
 800e122:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e12a:	4291      	cmp	r1, r2
 800e12c:	d1f9      	bne.n	800e122 <memcpy+0xe>
 800e12e:	bd10      	pop	{r4, pc}

0800e130 <memset>:
 800e130:	4402      	add	r2, r0
 800e132:	4603      	mov	r3, r0
 800e134:	4293      	cmp	r3, r2
 800e136:	d100      	bne.n	800e13a <memset+0xa>
 800e138:	4770      	bx	lr
 800e13a:	f803 1b01 	strb.w	r1, [r3], #1
 800e13e:	e7f9      	b.n	800e134 <memset+0x4>

0800e140 <_free_r>:
 800e140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e142:	2900      	cmp	r1, #0
 800e144:	d048      	beq.n	800e1d8 <_free_r+0x98>
 800e146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e14a:	9001      	str	r0, [sp, #4]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f1a1 0404 	sub.w	r4, r1, #4
 800e152:	bfb8      	it	lt
 800e154:	18e4      	addlt	r4, r4, r3
 800e156:	f000 f9fb 	bl	800e550 <__malloc_lock>
 800e15a:	4a20      	ldr	r2, [pc, #128]	; (800e1dc <_free_r+0x9c>)
 800e15c:	9801      	ldr	r0, [sp, #4]
 800e15e:	6813      	ldr	r3, [r2, #0]
 800e160:	4615      	mov	r5, r2
 800e162:	b933      	cbnz	r3, 800e172 <_free_r+0x32>
 800e164:	6063      	str	r3, [r4, #4]
 800e166:	6014      	str	r4, [r2, #0]
 800e168:	b003      	add	sp, #12
 800e16a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e16e:	f000 b9f5 	b.w	800e55c <__malloc_unlock>
 800e172:	42a3      	cmp	r3, r4
 800e174:	d90b      	bls.n	800e18e <_free_r+0x4e>
 800e176:	6821      	ldr	r1, [r4, #0]
 800e178:	1862      	adds	r2, r4, r1
 800e17a:	4293      	cmp	r3, r2
 800e17c:	bf04      	itt	eq
 800e17e:	681a      	ldreq	r2, [r3, #0]
 800e180:	685b      	ldreq	r3, [r3, #4]
 800e182:	6063      	str	r3, [r4, #4]
 800e184:	bf04      	itt	eq
 800e186:	1852      	addeq	r2, r2, r1
 800e188:	6022      	streq	r2, [r4, #0]
 800e18a:	602c      	str	r4, [r5, #0]
 800e18c:	e7ec      	b.n	800e168 <_free_r+0x28>
 800e18e:	461a      	mov	r2, r3
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	b10b      	cbz	r3, 800e198 <_free_r+0x58>
 800e194:	42a3      	cmp	r3, r4
 800e196:	d9fa      	bls.n	800e18e <_free_r+0x4e>
 800e198:	6811      	ldr	r1, [r2, #0]
 800e19a:	1855      	adds	r5, r2, r1
 800e19c:	42a5      	cmp	r5, r4
 800e19e:	d10b      	bne.n	800e1b8 <_free_r+0x78>
 800e1a0:	6824      	ldr	r4, [r4, #0]
 800e1a2:	4421      	add	r1, r4
 800e1a4:	1854      	adds	r4, r2, r1
 800e1a6:	42a3      	cmp	r3, r4
 800e1a8:	6011      	str	r1, [r2, #0]
 800e1aa:	d1dd      	bne.n	800e168 <_free_r+0x28>
 800e1ac:	681c      	ldr	r4, [r3, #0]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	6053      	str	r3, [r2, #4]
 800e1b2:	4421      	add	r1, r4
 800e1b4:	6011      	str	r1, [r2, #0]
 800e1b6:	e7d7      	b.n	800e168 <_free_r+0x28>
 800e1b8:	d902      	bls.n	800e1c0 <_free_r+0x80>
 800e1ba:	230c      	movs	r3, #12
 800e1bc:	6003      	str	r3, [r0, #0]
 800e1be:	e7d3      	b.n	800e168 <_free_r+0x28>
 800e1c0:	6825      	ldr	r5, [r4, #0]
 800e1c2:	1961      	adds	r1, r4, r5
 800e1c4:	428b      	cmp	r3, r1
 800e1c6:	bf04      	itt	eq
 800e1c8:	6819      	ldreq	r1, [r3, #0]
 800e1ca:	685b      	ldreq	r3, [r3, #4]
 800e1cc:	6063      	str	r3, [r4, #4]
 800e1ce:	bf04      	itt	eq
 800e1d0:	1949      	addeq	r1, r1, r5
 800e1d2:	6021      	streq	r1, [r4, #0]
 800e1d4:	6054      	str	r4, [r2, #4]
 800e1d6:	e7c7      	b.n	800e168 <_free_r+0x28>
 800e1d8:	b003      	add	sp, #12
 800e1da:	bd30      	pop	{r4, r5, pc}
 800e1dc:	20008238 	.word	0x20008238

0800e1e0 <_malloc_r>:
 800e1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1e2:	1ccd      	adds	r5, r1, #3
 800e1e4:	f025 0503 	bic.w	r5, r5, #3
 800e1e8:	3508      	adds	r5, #8
 800e1ea:	2d0c      	cmp	r5, #12
 800e1ec:	bf38      	it	cc
 800e1ee:	250c      	movcc	r5, #12
 800e1f0:	2d00      	cmp	r5, #0
 800e1f2:	4606      	mov	r6, r0
 800e1f4:	db01      	blt.n	800e1fa <_malloc_r+0x1a>
 800e1f6:	42a9      	cmp	r1, r5
 800e1f8:	d903      	bls.n	800e202 <_malloc_r+0x22>
 800e1fa:	230c      	movs	r3, #12
 800e1fc:	6033      	str	r3, [r6, #0]
 800e1fe:	2000      	movs	r0, #0
 800e200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e202:	f000 f9a5 	bl	800e550 <__malloc_lock>
 800e206:	4921      	ldr	r1, [pc, #132]	; (800e28c <_malloc_r+0xac>)
 800e208:	680a      	ldr	r2, [r1, #0]
 800e20a:	4614      	mov	r4, r2
 800e20c:	b99c      	cbnz	r4, 800e236 <_malloc_r+0x56>
 800e20e:	4f20      	ldr	r7, [pc, #128]	; (800e290 <_malloc_r+0xb0>)
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	b923      	cbnz	r3, 800e21e <_malloc_r+0x3e>
 800e214:	4621      	mov	r1, r4
 800e216:	4630      	mov	r0, r6
 800e218:	f000 f83c 	bl	800e294 <_sbrk_r>
 800e21c:	6038      	str	r0, [r7, #0]
 800e21e:	4629      	mov	r1, r5
 800e220:	4630      	mov	r0, r6
 800e222:	f000 f837 	bl	800e294 <_sbrk_r>
 800e226:	1c43      	adds	r3, r0, #1
 800e228:	d123      	bne.n	800e272 <_malloc_r+0x92>
 800e22a:	230c      	movs	r3, #12
 800e22c:	6033      	str	r3, [r6, #0]
 800e22e:	4630      	mov	r0, r6
 800e230:	f000 f994 	bl	800e55c <__malloc_unlock>
 800e234:	e7e3      	b.n	800e1fe <_malloc_r+0x1e>
 800e236:	6823      	ldr	r3, [r4, #0]
 800e238:	1b5b      	subs	r3, r3, r5
 800e23a:	d417      	bmi.n	800e26c <_malloc_r+0x8c>
 800e23c:	2b0b      	cmp	r3, #11
 800e23e:	d903      	bls.n	800e248 <_malloc_r+0x68>
 800e240:	6023      	str	r3, [r4, #0]
 800e242:	441c      	add	r4, r3
 800e244:	6025      	str	r5, [r4, #0]
 800e246:	e004      	b.n	800e252 <_malloc_r+0x72>
 800e248:	6863      	ldr	r3, [r4, #4]
 800e24a:	42a2      	cmp	r2, r4
 800e24c:	bf0c      	ite	eq
 800e24e:	600b      	streq	r3, [r1, #0]
 800e250:	6053      	strne	r3, [r2, #4]
 800e252:	4630      	mov	r0, r6
 800e254:	f000 f982 	bl	800e55c <__malloc_unlock>
 800e258:	f104 000b 	add.w	r0, r4, #11
 800e25c:	1d23      	adds	r3, r4, #4
 800e25e:	f020 0007 	bic.w	r0, r0, #7
 800e262:	1ac2      	subs	r2, r0, r3
 800e264:	d0cc      	beq.n	800e200 <_malloc_r+0x20>
 800e266:	1a1b      	subs	r3, r3, r0
 800e268:	50a3      	str	r3, [r4, r2]
 800e26a:	e7c9      	b.n	800e200 <_malloc_r+0x20>
 800e26c:	4622      	mov	r2, r4
 800e26e:	6864      	ldr	r4, [r4, #4]
 800e270:	e7cc      	b.n	800e20c <_malloc_r+0x2c>
 800e272:	1cc4      	adds	r4, r0, #3
 800e274:	f024 0403 	bic.w	r4, r4, #3
 800e278:	42a0      	cmp	r0, r4
 800e27a:	d0e3      	beq.n	800e244 <_malloc_r+0x64>
 800e27c:	1a21      	subs	r1, r4, r0
 800e27e:	4630      	mov	r0, r6
 800e280:	f000 f808 	bl	800e294 <_sbrk_r>
 800e284:	3001      	adds	r0, #1
 800e286:	d1dd      	bne.n	800e244 <_malloc_r+0x64>
 800e288:	e7cf      	b.n	800e22a <_malloc_r+0x4a>
 800e28a:	bf00      	nop
 800e28c:	20008238 	.word	0x20008238
 800e290:	2000823c 	.word	0x2000823c

0800e294 <_sbrk_r>:
 800e294:	b538      	push	{r3, r4, r5, lr}
 800e296:	4d06      	ldr	r5, [pc, #24]	; (800e2b0 <_sbrk_r+0x1c>)
 800e298:	2300      	movs	r3, #0
 800e29a:	4604      	mov	r4, r0
 800e29c:	4608      	mov	r0, r1
 800e29e:	602b      	str	r3, [r5, #0]
 800e2a0:	f7f4 fb8c 	bl	80029bc <_sbrk>
 800e2a4:	1c43      	adds	r3, r0, #1
 800e2a6:	d102      	bne.n	800e2ae <_sbrk_r+0x1a>
 800e2a8:	682b      	ldr	r3, [r5, #0]
 800e2aa:	b103      	cbz	r3, 800e2ae <_sbrk_r+0x1a>
 800e2ac:	6023      	str	r3, [r4, #0]
 800e2ae:	bd38      	pop	{r3, r4, r5, pc}
 800e2b0:	20008bd4 	.word	0x20008bd4

0800e2b4 <strcat>:
 800e2b4:	b510      	push	{r4, lr}
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	7814      	ldrb	r4, [r2, #0]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	3201      	adds	r2, #1
 800e2be:	2c00      	cmp	r4, #0
 800e2c0:	d1fa      	bne.n	800e2b8 <strcat+0x4>
 800e2c2:	3b01      	subs	r3, #1
 800e2c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2cc:	2a00      	cmp	r2, #0
 800e2ce:	d1f9      	bne.n	800e2c4 <strcat+0x10>
 800e2d0:	bd10      	pop	{r4, pc}

0800e2d2 <strcpy>:
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2d8:	f803 2b01 	strb.w	r2, [r3], #1
 800e2dc:	2a00      	cmp	r2, #0
 800e2de:	d1f9      	bne.n	800e2d4 <strcpy+0x2>
 800e2e0:	4770      	bx	lr

0800e2e2 <print_e>:
 800e2e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2e4:	b087      	sub	sp, #28
 800e2e6:	ec43 2b10 	vmov	d0, r2, r3
 800e2ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e2ec:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800e2f0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e2f2:	ab04      	add	r3, sp, #16
 800e2f4:	9301      	str	r3, [sp, #4]
 800e2f6:	ab03      	add	r3, sp, #12
 800e2f8:	9300      	str	r3, [sp, #0]
 800e2fa:	1c62      	adds	r2, r4, #1
 800e2fc:	ab05      	add	r3, sp, #20
 800e2fe:	460f      	mov	r7, r1
 800e300:	2102      	movs	r1, #2
 800e302:	f000 fd89 	bl	800ee18 <_dtoa_r>
 800e306:	9a05      	ldr	r2, [sp, #20]
 800e308:	f242 730f 	movw	r3, #9999	; 0x270f
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d105      	bne.n	800e31c <print_e+0x3a>
 800e310:	4601      	mov	r1, r0
 800e312:	4638      	mov	r0, r7
 800e314:	f7ff ffdd 	bl	800e2d2 <strcpy>
 800e318:	b007      	add	sp, #28
 800e31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e31c:	463b      	mov	r3, r7
 800e31e:	7801      	ldrb	r1, [r0, #0]
 800e320:	f803 1b01 	strb.w	r1, [r3], #1
 800e324:	2c00      	cmp	r4, #0
 800e326:	bfc8      	it	gt
 800e328:	2501      	movgt	r5, #1
 800e32a:	212e      	movs	r1, #46	; 0x2e
 800e32c:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800e330:	b10f      	cbz	r7, 800e336 <print_e+0x54>
 800e332:	2c00      	cmp	r4, #0
 800e334:	dc37      	bgt.n	800e3a6 <print_e+0xc4>
 800e336:	2e67      	cmp	r6, #103	; 0x67
 800e338:	d046      	beq.n	800e3c8 <print_e+0xe6>
 800e33a:	2e47      	cmp	r6, #71	; 0x47
 800e33c:	d046      	beq.n	800e3cc <print_e+0xea>
 800e33e:	212e      	movs	r1, #46	; 0x2e
 800e340:	2030      	movs	r0, #48	; 0x30
 800e342:	2c00      	cmp	r4, #0
 800e344:	dc38      	bgt.n	800e3b8 <print_e+0xd6>
 800e346:	1e51      	subs	r1, r2, #1
 800e348:	2900      	cmp	r1, #0
 800e34a:	bfb8      	it	lt
 800e34c:	f1c2 0201 	rsblt	r2, r2, #1
 800e350:	4618      	mov	r0, r3
 800e352:	9105      	str	r1, [sp, #20]
 800e354:	bfbc      	itt	lt
 800e356:	212d      	movlt	r1, #45	; 0x2d
 800e358:	9205      	strlt	r2, [sp, #20]
 800e35a:	f800 6b02 	strb.w	r6, [r0], #2
 800e35e:	bfb8      	it	lt
 800e360:	7059      	strblt	r1, [r3, #1]
 800e362:	9905      	ldr	r1, [sp, #20]
 800e364:	bfa4      	itt	ge
 800e366:	222b      	movge	r2, #43	; 0x2b
 800e368:	705a      	strbge	r2, [r3, #1]
 800e36a:	2963      	cmp	r1, #99	; 0x63
 800e36c:	dd0b      	ble.n	800e386 <print_e+0xa4>
 800e36e:	2264      	movs	r2, #100	; 0x64
 800e370:	fb91 f2f2 	sdiv	r2, r1, r2
 800e374:	f102 0430 	add.w	r4, r2, #48	; 0x30
 800e378:	1cd8      	adds	r0, r3, #3
 800e37a:	709c      	strb	r4, [r3, #2]
 800e37c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800e380:	fb03 1202 	mla	r2, r3, r2, r1
 800e384:	9205      	str	r2, [sp, #20]
 800e386:	9a05      	ldr	r2, [sp, #20]
 800e388:	230a      	movs	r3, #10
 800e38a:	fb92 f3f3 	sdiv	r3, r2, r3
 800e38e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e392:	7001      	strb	r1, [r0, #0]
 800e394:	f06f 0109 	mvn.w	r1, #9
 800e398:	fb01 2303 	mla	r3, r1, r3, r2
 800e39c:	3330      	adds	r3, #48	; 0x30
 800e39e:	7043      	strb	r3, [r0, #1]
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	7083      	strb	r3, [r0, #2]
 800e3a4:	e7b8      	b.n	800e318 <print_e+0x36>
 800e3a6:	b10d      	cbz	r5, 800e3ac <print_e+0xca>
 800e3a8:	f803 1b01 	strb.w	r1, [r3], #1
 800e3ac:	7805      	ldrb	r5, [r0, #0]
 800e3ae:	f803 5b01 	strb.w	r5, [r3], #1
 800e3b2:	3c01      	subs	r4, #1
 800e3b4:	2500      	movs	r5, #0
 800e3b6:	e7b9      	b.n	800e32c <print_e+0x4a>
 800e3b8:	b10d      	cbz	r5, 800e3be <print_e+0xdc>
 800e3ba:	f803 1b01 	strb.w	r1, [r3], #1
 800e3be:	f803 0b01 	strb.w	r0, [r3], #1
 800e3c2:	3c01      	subs	r4, #1
 800e3c4:	2500      	movs	r5, #0
 800e3c6:	e7bc      	b.n	800e342 <print_e+0x60>
 800e3c8:	2665      	movs	r6, #101	; 0x65
 800e3ca:	e7bc      	b.n	800e346 <print_e+0x64>
 800e3cc:	2645      	movs	r6, #69	; 0x45
 800e3ce:	e7ba      	b.n	800e346 <print_e+0x64>

0800e3d0 <_gcvt>:
 800e3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d4:	ec55 4b10 	vmov	r4, r5, d0
 800e3d8:	b088      	sub	sp, #32
 800e3da:	4681      	mov	r9, r0
 800e3dc:	4688      	mov	r8, r1
 800e3de:	4616      	mov	r6, r2
 800e3e0:	469a      	mov	sl, r3
 800e3e2:	ee10 0a10 	vmov	r0, s0
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	4629      	mov	r1, r5
 800e3ec:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e3ee:	f7f2 fb85 	bl	8000afc <__aeabi_dcmplt>
 800e3f2:	b110      	cbz	r0, 800e3fa <_gcvt+0x2a>
 800e3f4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e3f8:	461d      	mov	r5, r3
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	4620      	mov	r0, r4
 800e400:	4629      	mov	r1, r5
 800e402:	f7f2 fb71 	bl	8000ae8 <__aeabi_dcmpeq>
 800e406:	b138      	cbz	r0, 800e418 <_gcvt+0x48>
 800e408:	2330      	movs	r3, #48	; 0x30
 800e40a:	7033      	strb	r3, [r6, #0]
 800e40c:	2300      	movs	r3, #0
 800e40e:	7073      	strb	r3, [r6, #1]
 800e410:	4630      	mov	r0, r6
 800e412:	b008      	add	sp, #32
 800e414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e418:	a34b      	add	r3, pc, #300	; (adr r3, 800e548 <_gcvt+0x178>)
 800e41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41e:	4620      	mov	r0, r4
 800e420:	4629      	mov	r1, r5
 800e422:	f7f2 fb75 	bl	8000b10 <__aeabi_dcmple>
 800e426:	b158      	cbz	r0, 800e440 <_gcvt+0x70>
 800e428:	f108 31ff 	add.w	r1, r8, #4294967295
 800e42c:	9100      	str	r1, [sp, #0]
 800e42e:	e9cd a701 	strd	sl, r7, [sp, #4]
 800e432:	4622      	mov	r2, r4
 800e434:	462b      	mov	r3, r5
 800e436:	4631      	mov	r1, r6
 800e438:	4648      	mov	r0, r9
 800e43a:	f7ff ff52 	bl	800e2e2 <print_e>
 800e43e:	e7e7      	b.n	800e410 <_gcvt+0x40>
 800e440:	4640      	mov	r0, r8
 800e442:	f000 fc0f 	bl	800ec64 <_mprec_log10>
 800e446:	4622      	mov	r2, r4
 800e448:	ec51 0b10 	vmov	r0, r1, d0
 800e44c:	462b      	mov	r3, r5
 800e44e:	f7f2 fb5f 	bl	8000b10 <__aeabi_dcmple>
 800e452:	2800      	cmp	r0, #0
 800e454:	d1e8      	bne.n	800e428 <_gcvt+0x58>
 800e456:	ab07      	add	r3, sp, #28
 800e458:	9301      	str	r3, [sp, #4]
 800e45a:	ab06      	add	r3, sp, #24
 800e45c:	9300      	str	r3, [sp, #0]
 800e45e:	4642      	mov	r2, r8
 800e460:	ab05      	add	r3, sp, #20
 800e462:	ec45 4b10 	vmov	d0, r4, r5
 800e466:	2102      	movs	r1, #2
 800e468:	4648      	mov	r0, r9
 800e46a:	f000 fcd5 	bl	800ee18 <_dtoa_r>
 800e46e:	9a05      	ldr	r2, [sp, #20]
 800e470:	f242 730f 	movw	r3, #9999	; 0x270f
 800e474:	429a      	cmp	r2, r3
 800e476:	d00e      	beq.n	800e496 <_gcvt+0xc6>
 800e478:	4633      	mov	r3, r6
 800e47a:	44b0      	add	r8, r6
 800e47c:	4604      	mov	r4, r0
 800e47e:	f810 5b01 	ldrb.w	r5, [r0], #1
 800e482:	9905      	ldr	r1, [sp, #20]
 800e484:	eba8 0203 	sub.w	r2, r8, r3
 800e488:	b10d      	cbz	r5, 800e48e <_gcvt+0xbe>
 800e48a:	2900      	cmp	r1, #0
 800e48c:	dc08      	bgt.n	800e4a0 <_gcvt+0xd0>
 800e48e:	2000      	movs	r0, #0
 800e490:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800e494:	e00d      	b.n	800e4b2 <_gcvt+0xe2>
 800e496:	4601      	mov	r1, r0
 800e498:	4630      	mov	r0, r6
 800e49a:	f7ff ff1a 	bl	800e2d2 <strcpy>
 800e49e:	e7b7      	b.n	800e410 <_gcvt+0x40>
 800e4a0:	3901      	subs	r1, #1
 800e4a2:	f803 5b01 	strb.w	r5, [r3], #1
 800e4a6:	9105      	str	r1, [sp, #20]
 800e4a8:	e7e8      	b.n	800e47c <_gcvt+0xac>
 800e4aa:	f803 cb01 	strb.w	ip, [r3], #1
 800e4ae:	3a01      	subs	r2, #1
 800e4b0:	2001      	movs	r0, #1
 800e4b2:	2900      	cmp	r1, #0
 800e4b4:	460d      	mov	r5, r1
 800e4b6:	dc2a      	bgt.n	800e50e <_gcvt+0x13e>
 800e4b8:	b100      	cbz	r0, 800e4bc <_gcvt+0xec>
 800e4ba:	9105      	str	r1, [sp, #20]
 800e4bc:	b90f      	cbnz	r7, 800e4c2 <_gcvt+0xf2>
 800e4be:	7821      	ldrb	r1, [r4, #0]
 800e4c0:	b311      	cbz	r1, 800e508 <_gcvt+0x138>
 800e4c2:	42b3      	cmp	r3, r6
 800e4c4:	bf04      	itt	eq
 800e4c6:	2130      	moveq	r1, #48	; 0x30
 800e4c8:	f803 1b01 	strbeq.w	r1, [r3], #1
 800e4cc:	212e      	movs	r1, #46	; 0x2e
 800e4ce:	7019      	strb	r1, [r3, #0]
 800e4d0:	9905      	ldr	r1, [sp, #20]
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	2500      	movs	r5, #0
 800e4d6:	eba1 0c03 	sub.w	ip, r1, r3
 800e4da:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800e4de:	eb1c 0f00 	cmn.w	ip, r0
 800e4e2:	d41c      	bmi.n	800e51e <_gcvt+0x14e>
 800e4e4:	2900      	cmp	r1, #0
 800e4e6:	f1c1 0000 	rsb	r0, r1, #0
 800e4ea:	bfc8      	it	gt
 800e4ec:	2000      	movgt	r0, #0
 800e4ee:	f100 0c01 	add.w	ip, r0, #1
 800e4f2:	4463      	add	r3, ip
 800e4f4:	4401      	add	r1, r0
 800e4f6:	b105      	cbz	r5, 800e4fa <_gcvt+0x12a>
 800e4f8:	9105      	str	r1, [sp, #20]
 800e4fa:	1e61      	subs	r1, r4, #1
 800e4fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e500:	b108      	cbz	r0, 800e506 <_gcvt+0x136>
 800e502:	2a00      	cmp	r2, #0
 800e504:	dc0f      	bgt.n	800e526 <_gcvt+0x156>
 800e506:	b9df      	cbnz	r7, 800e540 <_gcvt+0x170>
 800e508:	2200      	movs	r2, #0
 800e50a:	701a      	strb	r2, [r3, #0]
 800e50c:	e780      	b.n	800e410 <_gcvt+0x40>
 800e50e:	2a00      	cmp	r2, #0
 800e510:	f101 31ff 	add.w	r1, r1, #4294967295
 800e514:	dcc9      	bgt.n	800e4aa <_gcvt+0xda>
 800e516:	2800      	cmp	r0, #0
 800e518:	d0d0      	beq.n	800e4bc <_gcvt+0xec>
 800e51a:	9505      	str	r5, [sp, #20]
 800e51c:	e7ce      	b.n	800e4bc <_gcvt+0xec>
 800e51e:	f800 ef01 	strb.w	lr, [r0, #1]!
 800e522:	2501      	movs	r5, #1
 800e524:	e7db      	b.n	800e4de <_gcvt+0x10e>
 800e526:	f803 0b01 	strb.w	r0, [r3], #1
 800e52a:	3a01      	subs	r2, #1
 800e52c:	e7e6      	b.n	800e4fc <_gcvt+0x12c>
 800e52e:	f801 5b01 	strb.w	r5, [r1], #1
 800e532:	1a60      	subs	r0, r4, r1
 800e534:	2800      	cmp	r0, #0
 800e536:	dcfa      	bgt.n	800e52e <_gcvt+0x15e>
 800e538:	2a00      	cmp	r2, #0
 800e53a:	bfa8      	it	ge
 800e53c:	189b      	addge	r3, r3, r2
 800e53e:	e7e3      	b.n	800e508 <_gcvt+0x138>
 800e540:	4619      	mov	r1, r3
 800e542:	189c      	adds	r4, r3, r2
 800e544:	2530      	movs	r5, #48	; 0x30
 800e546:	e7f4      	b.n	800e532 <_gcvt+0x162>
 800e548:	eb1c432d 	.word	0xeb1c432d
 800e54c:	3f1a36e2 	.word	0x3f1a36e2

0800e550 <__malloc_lock>:
 800e550:	4801      	ldr	r0, [pc, #4]	; (800e558 <__malloc_lock+0x8>)
 800e552:	f001 ba60 	b.w	800fa16 <__retarget_lock_acquire_recursive>
 800e556:	bf00      	nop
 800e558:	20008bdc 	.word	0x20008bdc

0800e55c <__malloc_unlock>:
 800e55c:	4801      	ldr	r0, [pc, #4]	; (800e564 <__malloc_unlock+0x8>)
 800e55e:	f001 ba5b 	b.w	800fa18 <__retarget_lock_release_recursive>
 800e562:	bf00      	nop
 800e564:	20008bdc 	.word	0x20008bdc

0800e568 <_Balloc>:
 800e568:	b570      	push	{r4, r5, r6, lr}
 800e56a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e56c:	4604      	mov	r4, r0
 800e56e:	460d      	mov	r5, r1
 800e570:	b976      	cbnz	r6, 800e590 <_Balloc+0x28>
 800e572:	2010      	movs	r0, #16
 800e574:	f7ff fdbe 	bl	800e0f4 <malloc>
 800e578:	4602      	mov	r2, r0
 800e57a:	6260      	str	r0, [r4, #36]	; 0x24
 800e57c:	b920      	cbnz	r0, 800e588 <_Balloc+0x20>
 800e57e:	4b18      	ldr	r3, [pc, #96]	; (800e5e0 <_Balloc+0x78>)
 800e580:	4818      	ldr	r0, [pc, #96]	; (800e5e4 <_Balloc+0x7c>)
 800e582:	2166      	movs	r1, #102	; 0x66
 800e584:	f000 fb9c 	bl	800ecc0 <__assert_func>
 800e588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e58c:	6006      	str	r6, [r0, #0]
 800e58e:	60c6      	str	r6, [r0, #12]
 800e590:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e592:	68f3      	ldr	r3, [r6, #12]
 800e594:	b183      	cbz	r3, 800e5b8 <_Balloc+0x50>
 800e596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e59e:	b9b8      	cbnz	r0, 800e5d0 <_Balloc+0x68>
 800e5a0:	2101      	movs	r1, #1
 800e5a2:	fa01 f605 	lsl.w	r6, r1, r5
 800e5a6:	1d72      	adds	r2, r6, #5
 800e5a8:	0092      	lsls	r2, r2, #2
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f000 fb78 	bl	800eca0 <_calloc_r>
 800e5b0:	b160      	cbz	r0, 800e5cc <_Balloc+0x64>
 800e5b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e5b6:	e00e      	b.n	800e5d6 <_Balloc+0x6e>
 800e5b8:	2221      	movs	r2, #33	; 0x21
 800e5ba:	2104      	movs	r1, #4
 800e5bc:	4620      	mov	r0, r4
 800e5be:	f000 fb6f 	bl	800eca0 <_calloc_r>
 800e5c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5c4:	60f0      	str	r0, [r6, #12]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d1e4      	bne.n	800e596 <_Balloc+0x2e>
 800e5cc:	2000      	movs	r0, #0
 800e5ce:	bd70      	pop	{r4, r5, r6, pc}
 800e5d0:	6802      	ldr	r2, [r0, #0]
 800e5d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e5dc:	e7f7      	b.n	800e5ce <_Balloc+0x66>
 800e5de:	bf00      	nop
 800e5e0:	08012ce8 	.word	0x08012ce8
 800e5e4:	08012cff 	.word	0x08012cff

0800e5e8 <_Bfree>:
 800e5e8:	b570      	push	{r4, r5, r6, lr}
 800e5ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e5ec:	4605      	mov	r5, r0
 800e5ee:	460c      	mov	r4, r1
 800e5f0:	b976      	cbnz	r6, 800e610 <_Bfree+0x28>
 800e5f2:	2010      	movs	r0, #16
 800e5f4:	f7ff fd7e 	bl	800e0f4 <malloc>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	6268      	str	r0, [r5, #36]	; 0x24
 800e5fc:	b920      	cbnz	r0, 800e608 <_Bfree+0x20>
 800e5fe:	4b09      	ldr	r3, [pc, #36]	; (800e624 <_Bfree+0x3c>)
 800e600:	4809      	ldr	r0, [pc, #36]	; (800e628 <_Bfree+0x40>)
 800e602:	218a      	movs	r1, #138	; 0x8a
 800e604:	f000 fb5c 	bl	800ecc0 <__assert_func>
 800e608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e60c:	6006      	str	r6, [r0, #0]
 800e60e:	60c6      	str	r6, [r0, #12]
 800e610:	b13c      	cbz	r4, 800e622 <_Bfree+0x3a>
 800e612:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e614:	6862      	ldr	r2, [r4, #4]
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e61c:	6021      	str	r1, [r4, #0]
 800e61e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e622:	bd70      	pop	{r4, r5, r6, pc}
 800e624:	08012ce8 	.word	0x08012ce8
 800e628:	08012cff 	.word	0x08012cff

0800e62c <__multadd>:
 800e62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e630:	690e      	ldr	r6, [r1, #16]
 800e632:	4607      	mov	r7, r0
 800e634:	4698      	mov	r8, r3
 800e636:	460c      	mov	r4, r1
 800e638:	f101 0014 	add.w	r0, r1, #20
 800e63c:	2300      	movs	r3, #0
 800e63e:	6805      	ldr	r5, [r0, #0]
 800e640:	b2a9      	uxth	r1, r5
 800e642:	fb02 8101 	mla	r1, r2, r1, r8
 800e646:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e64a:	0c2d      	lsrs	r5, r5, #16
 800e64c:	fb02 c505 	mla	r5, r2, r5, ip
 800e650:	b289      	uxth	r1, r1
 800e652:	3301      	adds	r3, #1
 800e654:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e658:	429e      	cmp	r6, r3
 800e65a:	f840 1b04 	str.w	r1, [r0], #4
 800e65e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e662:	dcec      	bgt.n	800e63e <__multadd+0x12>
 800e664:	f1b8 0f00 	cmp.w	r8, #0
 800e668:	d022      	beq.n	800e6b0 <__multadd+0x84>
 800e66a:	68a3      	ldr	r3, [r4, #8]
 800e66c:	42b3      	cmp	r3, r6
 800e66e:	dc19      	bgt.n	800e6a4 <__multadd+0x78>
 800e670:	6861      	ldr	r1, [r4, #4]
 800e672:	4638      	mov	r0, r7
 800e674:	3101      	adds	r1, #1
 800e676:	f7ff ff77 	bl	800e568 <_Balloc>
 800e67a:	4605      	mov	r5, r0
 800e67c:	b928      	cbnz	r0, 800e68a <__multadd+0x5e>
 800e67e:	4602      	mov	r2, r0
 800e680:	4b0d      	ldr	r3, [pc, #52]	; (800e6b8 <__multadd+0x8c>)
 800e682:	480e      	ldr	r0, [pc, #56]	; (800e6bc <__multadd+0x90>)
 800e684:	21b5      	movs	r1, #181	; 0xb5
 800e686:	f000 fb1b 	bl	800ecc0 <__assert_func>
 800e68a:	6922      	ldr	r2, [r4, #16]
 800e68c:	3202      	adds	r2, #2
 800e68e:	f104 010c 	add.w	r1, r4, #12
 800e692:	0092      	lsls	r2, r2, #2
 800e694:	300c      	adds	r0, #12
 800e696:	f7ff fd3d 	bl	800e114 <memcpy>
 800e69a:	4621      	mov	r1, r4
 800e69c:	4638      	mov	r0, r7
 800e69e:	f7ff ffa3 	bl	800e5e8 <_Bfree>
 800e6a2:	462c      	mov	r4, r5
 800e6a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e6a8:	3601      	adds	r6, #1
 800e6aa:	f8c3 8014 	str.w	r8, [r3, #20]
 800e6ae:	6126      	str	r6, [r4, #16]
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6b6:	bf00      	nop
 800e6b8:	08012d5f 	.word	0x08012d5f
 800e6bc:	08012cff 	.word	0x08012cff

0800e6c0 <__hi0bits>:
 800e6c0:	0c03      	lsrs	r3, r0, #16
 800e6c2:	041b      	lsls	r3, r3, #16
 800e6c4:	b9d3      	cbnz	r3, 800e6fc <__hi0bits+0x3c>
 800e6c6:	0400      	lsls	r0, r0, #16
 800e6c8:	2310      	movs	r3, #16
 800e6ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e6ce:	bf04      	itt	eq
 800e6d0:	0200      	lsleq	r0, r0, #8
 800e6d2:	3308      	addeq	r3, #8
 800e6d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e6d8:	bf04      	itt	eq
 800e6da:	0100      	lsleq	r0, r0, #4
 800e6dc:	3304      	addeq	r3, #4
 800e6de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e6e2:	bf04      	itt	eq
 800e6e4:	0080      	lsleq	r0, r0, #2
 800e6e6:	3302      	addeq	r3, #2
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	db05      	blt.n	800e6f8 <__hi0bits+0x38>
 800e6ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e6f0:	f103 0301 	add.w	r3, r3, #1
 800e6f4:	bf08      	it	eq
 800e6f6:	2320      	moveq	r3, #32
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	4770      	bx	lr
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	e7e4      	b.n	800e6ca <__hi0bits+0xa>

0800e700 <__lo0bits>:
 800e700:	6803      	ldr	r3, [r0, #0]
 800e702:	f013 0207 	ands.w	r2, r3, #7
 800e706:	4601      	mov	r1, r0
 800e708:	d00b      	beq.n	800e722 <__lo0bits+0x22>
 800e70a:	07da      	lsls	r2, r3, #31
 800e70c:	d424      	bmi.n	800e758 <__lo0bits+0x58>
 800e70e:	0798      	lsls	r0, r3, #30
 800e710:	bf49      	itett	mi
 800e712:	085b      	lsrmi	r3, r3, #1
 800e714:	089b      	lsrpl	r3, r3, #2
 800e716:	2001      	movmi	r0, #1
 800e718:	600b      	strmi	r3, [r1, #0]
 800e71a:	bf5c      	itt	pl
 800e71c:	600b      	strpl	r3, [r1, #0]
 800e71e:	2002      	movpl	r0, #2
 800e720:	4770      	bx	lr
 800e722:	b298      	uxth	r0, r3
 800e724:	b9b0      	cbnz	r0, 800e754 <__lo0bits+0x54>
 800e726:	0c1b      	lsrs	r3, r3, #16
 800e728:	2010      	movs	r0, #16
 800e72a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e72e:	bf04      	itt	eq
 800e730:	0a1b      	lsreq	r3, r3, #8
 800e732:	3008      	addeq	r0, #8
 800e734:	071a      	lsls	r2, r3, #28
 800e736:	bf04      	itt	eq
 800e738:	091b      	lsreq	r3, r3, #4
 800e73a:	3004      	addeq	r0, #4
 800e73c:	079a      	lsls	r2, r3, #30
 800e73e:	bf04      	itt	eq
 800e740:	089b      	lsreq	r3, r3, #2
 800e742:	3002      	addeq	r0, #2
 800e744:	07da      	lsls	r2, r3, #31
 800e746:	d403      	bmi.n	800e750 <__lo0bits+0x50>
 800e748:	085b      	lsrs	r3, r3, #1
 800e74a:	f100 0001 	add.w	r0, r0, #1
 800e74e:	d005      	beq.n	800e75c <__lo0bits+0x5c>
 800e750:	600b      	str	r3, [r1, #0]
 800e752:	4770      	bx	lr
 800e754:	4610      	mov	r0, r2
 800e756:	e7e8      	b.n	800e72a <__lo0bits+0x2a>
 800e758:	2000      	movs	r0, #0
 800e75a:	4770      	bx	lr
 800e75c:	2020      	movs	r0, #32
 800e75e:	4770      	bx	lr

0800e760 <__i2b>:
 800e760:	b510      	push	{r4, lr}
 800e762:	460c      	mov	r4, r1
 800e764:	2101      	movs	r1, #1
 800e766:	f7ff feff 	bl	800e568 <_Balloc>
 800e76a:	4602      	mov	r2, r0
 800e76c:	b928      	cbnz	r0, 800e77a <__i2b+0x1a>
 800e76e:	4b05      	ldr	r3, [pc, #20]	; (800e784 <__i2b+0x24>)
 800e770:	4805      	ldr	r0, [pc, #20]	; (800e788 <__i2b+0x28>)
 800e772:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e776:	f000 faa3 	bl	800ecc0 <__assert_func>
 800e77a:	2301      	movs	r3, #1
 800e77c:	6144      	str	r4, [r0, #20]
 800e77e:	6103      	str	r3, [r0, #16]
 800e780:	bd10      	pop	{r4, pc}
 800e782:	bf00      	nop
 800e784:	08012d5f 	.word	0x08012d5f
 800e788:	08012cff 	.word	0x08012cff

0800e78c <__multiply>:
 800e78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e790:	4614      	mov	r4, r2
 800e792:	690a      	ldr	r2, [r1, #16]
 800e794:	6923      	ldr	r3, [r4, #16]
 800e796:	429a      	cmp	r2, r3
 800e798:	bfb8      	it	lt
 800e79a:	460b      	movlt	r3, r1
 800e79c:	460d      	mov	r5, r1
 800e79e:	bfbc      	itt	lt
 800e7a0:	4625      	movlt	r5, r4
 800e7a2:	461c      	movlt	r4, r3
 800e7a4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e7a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e7ac:	68ab      	ldr	r3, [r5, #8]
 800e7ae:	6869      	ldr	r1, [r5, #4]
 800e7b0:	eb0a 0709 	add.w	r7, sl, r9
 800e7b4:	42bb      	cmp	r3, r7
 800e7b6:	b085      	sub	sp, #20
 800e7b8:	bfb8      	it	lt
 800e7ba:	3101      	addlt	r1, #1
 800e7bc:	f7ff fed4 	bl	800e568 <_Balloc>
 800e7c0:	b930      	cbnz	r0, 800e7d0 <__multiply+0x44>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	4b42      	ldr	r3, [pc, #264]	; (800e8d0 <__multiply+0x144>)
 800e7c6:	4843      	ldr	r0, [pc, #268]	; (800e8d4 <__multiply+0x148>)
 800e7c8:	f240 115d 	movw	r1, #349	; 0x15d
 800e7cc:	f000 fa78 	bl	800ecc0 <__assert_func>
 800e7d0:	f100 0614 	add.w	r6, r0, #20
 800e7d4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e7d8:	4633      	mov	r3, r6
 800e7da:	2200      	movs	r2, #0
 800e7dc:	4543      	cmp	r3, r8
 800e7de:	d31e      	bcc.n	800e81e <__multiply+0x92>
 800e7e0:	f105 0c14 	add.w	ip, r5, #20
 800e7e4:	f104 0314 	add.w	r3, r4, #20
 800e7e8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e7ec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e7f0:	9202      	str	r2, [sp, #8]
 800e7f2:	ebac 0205 	sub.w	r2, ip, r5
 800e7f6:	3a15      	subs	r2, #21
 800e7f8:	f022 0203 	bic.w	r2, r2, #3
 800e7fc:	3204      	adds	r2, #4
 800e7fe:	f105 0115 	add.w	r1, r5, #21
 800e802:	458c      	cmp	ip, r1
 800e804:	bf38      	it	cc
 800e806:	2204      	movcc	r2, #4
 800e808:	9201      	str	r2, [sp, #4]
 800e80a:	9a02      	ldr	r2, [sp, #8]
 800e80c:	9303      	str	r3, [sp, #12]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d808      	bhi.n	800e824 <__multiply+0x98>
 800e812:	2f00      	cmp	r7, #0
 800e814:	dc55      	bgt.n	800e8c2 <__multiply+0x136>
 800e816:	6107      	str	r7, [r0, #16]
 800e818:	b005      	add	sp, #20
 800e81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e81e:	f843 2b04 	str.w	r2, [r3], #4
 800e822:	e7db      	b.n	800e7dc <__multiply+0x50>
 800e824:	f8b3 a000 	ldrh.w	sl, [r3]
 800e828:	f1ba 0f00 	cmp.w	sl, #0
 800e82c:	d020      	beq.n	800e870 <__multiply+0xe4>
 800e82e:	f105 0e14 	add.w	lr, r5, #20
 800e832:	46b1      	mov	r9, r6
 800e834:	2200      	movs	r2, #0
 800e836:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e83a:	f8d9 b000 	ldr.w	fp, [r9]
 800e83e:	b2a1      	uxth	r1, r4
 800e840:	fa1f fb8b 	uxth.w	fp, fp
 800e844:	fb0a b101 	mla	r1, sl, r1, fp
 800e848:	4411      	add	r1, r2
 800e84a:	f8d9 2000 	ldr.w	r2, [r9]
 800e84e:	0c24      	lsrs	r4, r4, #16
 800e850:	0c12      	lsrs	r2, r2, #16
 800e852:	fb0a 2404 	mla	r4, sl, r4, r2
 800e856:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e85a:	b289      	uxth	r1, r1
 800e85c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e860:	45f4      	cmp	ip, lr
 800e862:	f849 1b04 	str.w	r1, [r9], #4
 800e866:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e86a:	d8e4      	bhi.n	800e836 <__multiply+0xaa>
 800e86c:	9901      	ldr	r1, [sp, #4]
 800e86e:	5072      	str	r2, [r6, r1]
 800e870:	9a03      	ldr	r2, [sp, #12]
 800e872:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e876:	3304      	adds	r3, #4
 800e878:	f1b9 0f00 	cmp.w	r9, #0
 800e87c:	d01f      	beq.n	800e8be <__multiply+0x132>
 800e87e:	6834      	ldr	r4, [r6, #0]
 800e880:	f105 0114 	add.w	r1, r5, #20
 800e884:	46b6      	mov	lr, r6
 800e886:	f04f 0a00 	mov.w	sl, #0
 800e88a:	880a      	ldrh	r2, [r1, #0]
 800e88c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e890:	fb09 b202 	mla	r2, r9, r2, fp
 800e894:	4492      	add	sl, r2
 800e896:	b2a4      	uxth	r4, r4
 800e898:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e89c:	f84e 4b04 	str.w	r4, [lr], #4
 800e8a0:	f851 4b04 	ldr.w	r4, [r1], #4
 800e8a4:	f8be 2000 	ldrh.w	r2, [lr]
 800e8a8:	0c24      	lsrs	r4, r4, #16
 800e8aa:	fb09 2404 	mla	r4, r9, r4, r2
 800e8ae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e8b2:	458c      	cmp	ip, r1
 800e8b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e8b8:	d8e7      	bhi.n	800e88a <__multiply+0xfe>
 800e8ba:	9a01      	ldr	r2, [sp, #4]
 800e8bc:	50b4      	str	r4, [r6, r2]
 800e8be:	3604      	adds	r6, #4
 800e8c0:	e7a3      	b.n	800e80a <__multiply+0x7e>
 800e8c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d1a5      	bne.n	800e816 <__multiply+0x8a>
 800e8ca:	3f01      	subs	r7, #1
 800e8cc:	e7a1      	b.n	800e812 <__multiply+0x86>
 800e8ce:	bf00      	nop
 800e8d0:	08012d5f 	.word	0x08012d5f
 800e8d4:	08012cff 	.word	0x08012cff

0800e8d8 <__pow5mult>:
 800e8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8dc:	4615      	mov	r5, r2
 800e8de:	f012 0203 	ands.w	r2, r2, #3
 800e8e2:	4606      	mov	r6, r0
 800e8e4:	460f      	mov	r7, r1
 800e8e6:	d007      	beq.n	800e8f8 <__pow5mult+0x20>
 800e8e8:	4c25      	ldr	r4, [pc, #148]	; (800e980 <__pow5mult+0xa8>)
 800e8ea:	3a01      	subs	r2, #1
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e8f2:	f7ff fe9b 	bl	800e62c <__multadd>
 800e8f6:	4607      	mov	r7, r0
 800e8f8:	10ad      	asrs	r5, r5, #2
 800e8fa:	d03d      	beq.n	800e978 <__pow5mult+0xa0>
 800e8fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e8fe:	b97c      	cbnz	r4, 800e920 <__pow5mult+0x48>
 800e900:	2010      	movs	r0, #16
 800e902:	f7ff fbf7 	bl	800e0f4 <malloc>
 800e906:	4602      	mov	r2, r0
 800e908:	6270      	str	r0, [r6, #36]	; 0x24
 800e90a:	b928      	cbnz	r0, 800e918 <__pow5mult+0x40>
 800e90c:	4b1d      	ldr	r3, [pc, #116]	; (800e984 <__pow5mult+0xac>)
 800e90e:	481e      	ldr	r0, [pc, #120]	; (800e988 <__pow5mult+0xb0>)
 800e910:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e914:	f000 f9d4 	bl	800ecc0 <__assert_func>
 800e918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e91c:	6004      	str	r4, [r0, #0]
 800e91e:	60c4      	str	r4, [r0, #12]
 800e920:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e928:	b94c      	cbnz	r4, 800e93e <__pow5mult+0x66>
 800e92a:	f240 2171 	movw	r1, #625	; 0x271
 800e92e:	4630      	mov	r0, r6
 800e930:	f7ff ff16 	bl	800e760 <__i2b>
 800e934:	2300      	movs	r3, #0
 800e936:	f8c8 0008 	str.w	r0, [r8, #8]
 800e93a:	4604      	mov	r4, r0
 800e93c:	6003      	str	r3, [r0, #0]
 800e93e:	f04f 0900 	mov.w	r9, #0
 800e942:	07eb      	lsls	r3, r5, #31
 800e944:	d50a      	bpl.n	800e95c <__pow5mult+0x84>
 800e946:	4639      	mov	r1, r7
 800e948:	4622      	mov	r2, r4
 800e94a:	4630      	mov	r0, r6
 800e94c:	f7ff ff1e 	bl	800e78c <__multiply>
 800e950:	4639      	mov	r1, r7
 800e952:	4680      	mov	r8, r0
 800e954:	4630      	mov	r0, r6
 800e956:	f7ff fe47 	bl	800e5e8 <_Bfree>
 800e95a:	4647      	mov	r7, r8
 800e95c:	106d      	asrs	r5, r5, #1
 800e95e:	d00b      	beq.n	800e978 <__pow5mult+0xa0>
 800e960:	6820      	ldr	r0, [r4, #0]
 800e962:	b938      	cbnz	r0, 800e974 <__pow5mult+0x9c>
 800e964:	4622      	mov	r2, r4
 800e966:	4621      	mov	r1, r4
 800e968:	4630      	mov	r0, r6
 800e96a:	f7ff ff0f 	bl	800e78c <__multiply>
 800e96e:	6020      	str	r0, [r4, #0]
 800e970:	f8c0 9000 	str.w	r9, [r0]
 800e974:	4604      	mov	r4, r0
 800e976:	e7e4      	b.n	800e942 <__pow5mult+0x6a>
 800e978:	4638      	mov	r0, r7
 800e97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e97e:	bf00      	nop
 800e980:	08012e60 	.word	0x08012e60
 800e984:	08012ce8 	.word	0x08012ce8
 800e988:	08012cff 	.word	0x08012cff

0800e98c <__lshift>:
 800e98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e990:	460c      	mov	r4, r1
 800e992:	6849      	ldr	r1, [r1, #4]
 800e994:	6923      	ldr	r3, [r4, #16]
 800e996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e99a:	68a3      	ldr	r3, [r4, #8]
 800e99c:	4607      	mov	r7, r0
 800e99e:	4691      	mov	r9, r2
 800e9a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e9a4:	f108 0601 	add.w	r6, r8, #1
 800e9a8:	42b3      	cmp	r3, r6
 800e9aa:	db0b      	blt.n	800e9c4 <__lshift+0x38>
 800e9ac:	4638      	mov	r0, r7
 800e9ae:	f7ff fddb 	bl	800e568 <_Balloc>
 800e9b2:	4605      	mov	r5, r0
 800e9b4:	b948      	cbnz	r0, 800e9ca <__lshift+0x3e>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	4b28      	ldr	r3, [pc, #160]	; (800ea5c <__lshift+0xd0>)
 800e9ba:	4829      	ldr	r0, [pc, #164]	; (800ea60 <__lshift+0xd4>)
 800e9bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e9c0:	f000 f97e 	bl	800ecc0 <__assert_func>
 800e9c4:	3101      	adds	r1, #1
 800e9c6:	005b      	lsls	r3, r3, #1
 800e9c8:	e7ee      	b.n	800e9a8 <__lshift+0x1c>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	f100 0114 	add.w	r1, r0, #20
 800e9d0:	f100 0210 	add.w	r2, r0, #16
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	4553      	cmp	r3, sl
 800e9d8:	db33      	blt.n	800ea42 <__lshift+0xb6>
 800e9da:	6920      	ldr	r0, [r4, #16]
 800e9dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e9e0:	f104 0314 	add.w	r3, r4, #20
 800e9e4:	f019 091f 	ands.w	r9, r9, #31
 800e9e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e9ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e9f0:	d02b      	beq.n	800ea4a <__lshift+0xbe>
 800e9f2:	f1c9 0e20 	rsb	lr, r9, #32
 800e9f6:	468a      	mov	sl, r1
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	6818      	ldr	r0, [r3, #0]
 800e9fc:	fa00 f009 	lsl.w	r0, r0, r9
 800ea00:	4302      	orrs	r2, r0
 800ea02:	f84a 2b04 	str.w	r2, [sl], #4
 800ea06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea0a:	459c      	cmp	ip, r3
 800ea0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea10:	d8f3      	bhi.n	800e9fa <__lshift+0x6e>
 800ea12:	ebac 0304 	sub.w	r3, ip, r4
 800ea16:	3b15      	subs	r3, #21
 800ea18:	f023 0303 	bic.w	r3, r3, #3
 800ea1c:	3304      	adds	r3, #4
 800ea1e:	f104 0015 	add.w	r0, r4, #21
 800ea22:	4584      	cmp	ip, r0
 800ea24:	bf38      	it	cc
 800ea26:	2304      	movcc	r3, #4
 800ea28:	50ca      	str	r2, [r1, r3]
 800ea2a:	b10a      	cbz	r2, 800ea30 <__lshift+0xa4>
 800ea2c:	f108 0602 	add.w	r6, r8, #2
 800ea30:	3e01      	subs	r6, #1
 800ea32:	4638      	mov	r0, r7
 800ea34:	612e      	str	r6, [r5, #16]
 800ea36:	4621      	mov	r1, r4
 800ea38:	f7ff fdd6 	bl	800e5e8 <_Bfree>
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea42:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea46:	3301      	adds	r3, #1
 800ea48:	e7c5      	b.n	800e9d6 <__lshift+0x4a>
 800ea4a:	3904      	subs	r1, #4
 800ea4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea50:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea54:	459c      	cmp	ip, r3
 800ea56:	d8f9      	bhi.n	800ea4c <__lshift+0xc0>
 800ea58:	e7ea      	b.n	800ea30 <__lshift+0xa4>
 800ea5a:	bf00      	nop
 800ea5c:	08012d5f 	.word	0x08012d5f
 800ea60:	08012cff 	.word	0x08012cff

0800ea64 <__mcmp>:
 800ea64:	b530      	push	{r4, r5, lr}
 800ea66:	6902      	ldr	r2, [r0, #16]
 800ea68:	690c      	ldr	r4, [r1, #16]
 800ea6a:	1b12      	subs	r2, r2, r4
 800ea6c:	d10e      	bne.n	800ea8c <__mcmp+0x28>
 800ea6e:	f100 0314 	add.w	r3, r0, #20
 800ea72:	3114      	adds	r1, #20
 800ea74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ea78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ea7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ea80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ea84:	42a5      	cmp	r5, r4
 800ea86:	d003      	beq.n	800ea90 <__mcmp+0x2c>
 800ea88:	d305      	bcc.n	800ea96 <__mcmp+0x32>
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	4610      	mov	r0, r2
 800ea8e:	bd30      	pop	{r4, r5, pc}
 800ea90:	4283      	cmp	r3, r0
 800ea92:	d3f3      	bcc.n	800ea7c <__mcmp+0x18>
 800ea94:	e7fa      	b.n	800ea8c <__mcmp+0x28>
 800ea96:	f04f 32ff 	mov.w	r2, #4294967295
 800ea9a:	e7f7      	b.n	800ea8c <__mcmp+0x28>

0800ea9c <__mdiff>:
 800ea9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa0:	460c      	mov	r4, r1
 800eaa2:	4606      	mov	r6, r0
 800eaa4:	4611      	mov	r1, r2
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	4617      	mov	r7, r2
 800eaaa:	f7ff ffdb 	bl	800ea64 <__mcmp>
 800eaae:	1e05      	subs	r5, r0, #0
 800eab0:	d110      	bne.n	800ead4 <__mdiff+0x38>
 800eab2:	4629      	mov	r1, r5
 800eab4:	4630      	mov	r0, r6
 800eab6:	f7ff fd57 	bl	800e568 <_Balloc>
 800eaba:	b930      	cbnz	r0, 800eaca <__mdiff+0x2e>
 800eabc:	4b39      	ldr	r3, [pc, #228]	; (800eba4 <__mdiff+0x108>)
 800eabe:	4602      	mov	r2, r0
 800eac0:	f240 2132 	movw	r1, #562	; 0x232
 800eac4:	4838      	ldr	r0, [pc, #224]	; (800eba8 <__mdiff+0x10c>)
 800eac6:	f000 f8fb 	bl	800ecc0 <__assert_func>
 800eaca:	2301      	movs	r3, #1
 800eacc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ead0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead4:	bfa4      	itt	ge
 800ead6:	463b      	movge	r3, r7
 800ead8:	4627      	movge	r7, r4
 800eada:	4630      	mov	r0, r6
 800eadc:	6879      	ldr	r1, [r7, #4]
 800eade:	bfa6      	itte	ge
 800eae0:	461c      	movge	r4, r3
 800eae2:	2500      	movge	r5, #0
 800eae4:	2501      	movlt	r5, #1
 800eae6:	f7ff fd3f 	bl	800e568 <_Balloc>
 800eaea:	b920      	cbnz	r0, 800eaf6 <__mdiff+0x5a>
 800eaec:	4b2d      	ldr	r3, [pc, #180]	; (800eba4 <__mdiff+0x108>)
 800eaee:	4602      	mov	r2, r0
 800eaf0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eaf4:	e7e6      	b.n	800eac4 <__mdiff+0x28>
 800eaf6:	693e      	ldr	r6, [r7, #16]
 800eaf8:	60c5      	str	r5, [r0, #12]
 800eafa:	6925      	ldr	r5, [r4, #16]
 800eafc:	f107 0114 	add.w	r1, r7, #20
 800eb00:	f104 0914 	add.w	r9, r4, #20
 800eb04:	f100 0e14 	add.w	lr, r0, #20
 800eb08:	f107 0210 	add.w	r2, r7, #16
 800eb0c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800eb10:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800eb14:	46f2      	mov	sl, lr
 800eb16:	2700      	movs	r7, #0
 800eb18:	f859 3b04 	ldr.w	r3, [r9], #4
 800eb1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eb20:	fa1f f883 	uxth.w	r8, r3
 800eb24:	fa17 f78b 	uxtah	r7, r7, fp
 800eb28:	0c1b      	lsrs	r3, r3, #16
 800eb2a:	eba7 0808 	sub.w	r8, r7, r8
 800eb2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eb32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eb36:	fa1f f888 	uxth.w	r8, r8
 800eb3a:	141f      	asrs	r7, r3, #16
 800eb3c:	454d      	cmp	r5, r9
 800eb3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eb42:	f84a 3b04 	str.w	r3, [sl], #4
 800eb46:	d8e7      	bhi.n	800eb18 <__mdiff+0x7c>
 800eb48:	1b2b      	subs	r3, r5, r4
 800eb4a:	3b15      	subs	r3, #21
 800eb4c:	f023 0303 	bic.w	r3, r3, #3
 800eb50:	3304      	adds	r3, #4
 800eb52:	3415      	adds	r4, #21
 800eb54:	42a5      	cmp	r5, r4
 800eb56:	bf38      	it	cc
 800eb58:	2304      	movcc	r3, #4
 800eb5a:	4419      	add	r1, r3
 800eb5c:	4473      	add	r3, lr
 800eb5e:	469e      	mov	lr, r3
 800eb60:	460d      	mov	r5, r1
 800eb62:	4565      	cmp	r5, ip
 800eb64:	d30e      	bcc.n	800eb84 <__mdiff+0xe8>
 800eb66:	f10c 0203 	add.w	r2, ip, #3
 800eb6a:	1a52      	subs	r2, r2, r1
 800eb6c:	f022 0203 	bic.w	r2, r2, #3
 800eb70:	3903      	subs	r1, #3
 800eb72:	458c      	cmp	ip, r1
 800eb74:	bf38      	it	cc
 800eb76:	2200      	movcc	r2, #0
 800eb78:	441a      	add	r2, r3
 800eb7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eb7e:	b17b      	cbz	r3, 800eba0 <__mdiff+0x104>
 800eb80:	6106      	str	r6, [r0, #16]
 800eb82:	e7a5      	b.n	800ead0 <__mdiff+0x34>
 800eb84:	f855 8b04 	ldr.w	r8, [r5], #4
 800eb88:	fa17 f488 	uxtah	r4, r7, r8
 800eb8c:	1422      	asrs	r2, r4, #16
 800eb8e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800eb92:	b2a4      	uxth	r4, r4
 800eb94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800eb98:	f84e 4b04 	str.w	r4, [lr], #4
 800eb9c:	1417      	asrs	r7, r2, #16
 800eb9e:	e7e0      	b.n	800eb62 <__mdiff+0xc6>
 800eba0:	3e01      	subs	r6, #1
 800eba2:	e7ea      	b.n	800eb7a <__mdiff+0xde>
 800eba4:	08012d5f 	.word	0x08012d5f
 800eba8:	08012cff 	.word	0x08012cff

0800ebac <__d2b>:
 800ebac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ebb0:	4689      	mov	r9, r1
 800ebb2:	2101      	movs	r1, #1
 800ebb4:	ec57 6b10 	vmov	r6, r7, d0
 800ebb8:	4690      	mov	r8, r2
 800ebba:	f7ff fcd5 	bl	800e568 <_Balloc>
 800ebbe:	4604      	mov	r4, r0
 800ebc0:	b930      	cbnz	r0, 800ebd0 <__d2b+0x24>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	4b25      	ldr	r3, [pc, #148]	; (800ec5c <__d2b+0xb0>)
 800ebc6:	4826      	ldr	r0, [pc, #152]	; (800ec60 <__d2b+0xb4>)
 800ebc8:	f240 310a 	movw	r1, #778	; 0x30a
 800ebcc:	f000 f878 	bl	800ecc0 <__assert_func>
 800ebd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ebd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ebd8:	bb35      	cbnz	r5, 800ec28 <__d2b+0x7c>
 800ebda:	2e00      	cmp	r6, #0
 800ebdc:	9301      	str	r3, [sp, #4]
 800ebde:	d028      	beq.n	800ec32 <__d2b+0x86>
 800ebe0:	4668      	mov	r0, sp
 800ebe2:	9600      	str	r6, [sp, #0]
 800ebe4:	f7ff fd8c 	bl	800e700 <__lo0bits>
 800ebe8:	9900      	ldr	r1, [sp, #0]
 800ebea:	b300      	cbz	r0, 800ec2e <__d2b+0x82>
 800ebec:	9a01      	ldr	r2, [sp, #4]
 800ebee:	f1c0 0320 	rsb	r3, r0, #32
 800ebf2:	fa02 f303 	lsl.w	r3, r2, r3
 800ebf6:	430b      	orrs	r3, r1
 800ebf8:	40c2      	lsrs	r2, r0
 800ebfa:	6163      	str	r3, [r4, #20]
 800ebfc:	9201      	str	r2, [sp, #4]
 800ebfe:	9b01      	ldr	r3, [sp, #4]
 800ec00:	61a3      	str	r3, [r4, #24]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	bf14      	ite	ne
 800ec06:	2202      	movne	r2, #2
 800ec08:	2201      	moveq	r2, #1
 800ec0a:	6122      	str	r2, [r4, #16]
 800ec0c:	b1d5      	cbz	r5, 800ec44 <__d2b+0x98>
 800ec0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ec12:	4405      	add	r5, r0
 800ec14:	f8c9 5000 	str.w	r5, [r9]
 800ec18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec1c:	f8c8 0000 	str.w	r0, [r8]
 800ec20:	4620      	mov	r0, r4
 800ec22:	b003      	add	sp, #12
 800ec24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec2c:	e7d5      	b.n	800ebda <__d2b+0x2e>
 800ec2e:	6161      	str	r1, [r4, #20]
 800ec30:	e7e5      	b.n	800ebfe <__d2b+0x52>
 800ec32:	a801      	add	r0, sp, #4
 800ec34:	f7ff fd64 	bl	800e700 <__lo0bits>
 800ec38:	9b01      	ldr	r3, [sp, #4]
 800ec3a:	6163      	str	r3, [r4, #20]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	6122      	str	r2, [r4, #16]
 800ec40:	3020      	adds	r0, #32
 800ec42:	e7e3      	b.n	800ec0c <__d2b+0x60>
 800ec44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ec4c:	f8c9 0000 	str.w	r0, [r9]
 800ec50:	6918      	ldr	r0, [r3, #16]
 800ec52:	f7ff fd35 	bl	800e6c0 <__hi0bits>
 800ec56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec5a:	e7df      	b.n	800ec1c <__d2b+0x70>
 800ec5c:	08012d5f 	.word	0x08012d5f
 800ec60:	08012cff 	.word	0x08012cff

0800ec64 <_mprec_log10>:
 800ec64:	2817      	cmp	r0, #23
 800ec66:	b5d0      	push	{r4, r6, r7, lr}
 800ec68:	4604      	mov	r4, r0
 800ec6a:	dc07      	bgt.n	800ec7c <_mprec_log10+0x18>
 800ec6c:	4809      	ldr	r0, [pc, #36]	; (800ec94 <_mprec_log10+0x30>)
 800ec6e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800ec72:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ec76:	ec41 0b10 	vmov	d0, r0, r1
 800ec7a:	bdd0      	pop	{r4, r6, r7, pc}
 800ec7c:	4906      	ldr	r1, [pc, #24]	; (800ec98 <_mprec_log10+0x34>)
 800ec7e:	4f07      	ldr	r7, [pc, #28]	; (800ec9c <_mprec_log10+0x38>)
 800ec80:	2000      	movs	r0, #0
 800ec82:	2600      	movs	r6, #0
 800ec84:	4632      	mov	r2, r6
 800ec86:	463b      	mov	r3, r7
 800ec88:	f7f1 fcc6 	bl	8000618 <__aeabi_dmul>
 800ec8c:	3c01      	subs	r4, #1
 800ec8e:	d1f9      	bne.n	800ec84 <_mprec_log10+0x20>
 800ec90:	e7f1      	b.n	800ec76 <_mprec_log10+0x12>
 800ec92:	bf00      	nop
 800ec94:	08012d98 	.word	0x08012d98
 800ec98:	3ff00000 	.word	0x3ff00000
 800ec9c:	40240000 	.word	0x40240000

0800eca0 <_calloc_r>:
 800eca0:	b513      	push	{r0, r1, r4, lr}
 800eca2:	434a      	muls	r2, r1
 800eca4:	4611      	mov	r1, r2
 800eca6:	9201      	str	r2, [sp, #4]
 800eca8:	f7ff fa9a 	bl	800e1e0 <_malloc_r>
 800ecac:	4604      	mov	r4, r0
 800ecae:	b118      	cbz	r0, 800ecb8 <_calloc_r+0x18>
 800ecb0:	9a01      	ldr	r2, [sp, #4]
 800ecb2:	2100      	movs	r1, #0
 800ecb4:	f7ff fa3c 	bl	800e130 <memset>
 800ecb8:	4620      	mov	r0, r4
 800ecba:	b002      	add	sp, #8
 800ecbc:	bd10      	pop	{r4, pc}
	...

0800ecc0 <__assert_func>:
 800ecc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ecc2:	4614      	mov	r4, r2
 800ecc4:	461a      	mov	r2, r3
 800ecc6:	4b09      	ldr	r3, [pc, #36]	; (800ecec <__assert_func+0x2c>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4605      	mov	r5, r0
 800eccc:	68d8      	ldr	r0, [r3, #12]
 800ecce:	b14c      	cbz	r4, 800ece4 <__assert_func+0x24>
 800ecd0:	4b07      	ldr	r3, [pc, #28]	; (800ecf0 <__assert_func+0x30>)
 800ecd2:	9100      	str	r1, [sp, #0]
 800ecd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ecd8:	4906      	ldr	r1, [pc, #24]	; (800ecf4 <__assert_func+0x34>)
 800ecda:	462b      	mov	r3, r5
 800ecdc:	f000 fe88 	bl	800f9f0 <fiprintf>
 800ece0:	f001 fa48 	bl	8010174 <abort>
 800ece4:	4b04      	ldr	r3, [pc, #16]	; (800ecf8 <__assert_func+0x38>)
 800ece6:	461c      	mov	r4, r3
 800ece8:	e7f3      	b.n	800ecd2 <__assert_func+0x12>
 800ecea:	bf00      	nop
 800ecec:	20000040 	.word	0x20000040
 800ecf0:	08012e6c 	.word	0x08012e6c
 800ecf4:	08012e79 	.word	0x08012e79
 800ecf8:	08012ea7 	.word	0x08012ea7

0800ecfc <quorem>:
 800ecfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed00:	6903      	ldr	r3, [r0, #16]
 800ed02:	690c      	ldr	r4, [r1, #16]
 800ed04:	42a3      	cmp	r3, r4
 800ed06:	4607      	mov	r7, r0
 800ed08:	f2c0 8081 	blt.w	800ee0e <quorem+0x112>
 800ed0c:	3c01      	subs	r4, #1
 800ed0e:	f101 0814 	add.w	r8, r1, #20
 800ed12:	f100 0514 	add.w	r5, r0, #20
 800ed16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed1a:	9301      	str	r3, [sp, #4]
 800ed1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ed20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed24:	3301      	adds	r3, #1
 800ed26:	429a      	cmp	r2, r3
 800ed28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ed2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ed30:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed34:	d331      	bcc.n	800ed9a <quorem+0x9e>
 800ed36:	f04f 0e00 	mov.w	lr, #0
 800ed3a:	4640      	mov	r0, r8
 800ed3c:	46ac      	mov	ip, r5
 800ed3e:	46f2      	mov	sl, lr
 800ed40:	f850 2b04 	ldr.w	r2, [r0], #4
 800ed44:	b293      	uxth	r3, r2
 800ed46:	fb06 e303 	mla	r3, r6, r3, lr
 800ed4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	ebaa 0303 	sub.w	r3, sl, r3
 800ed54:	0c12      	lsrs	r2, r2, #16
 800ed56:	f8dc a000 	ldr.w	sl, [ip]
 800ed5a:	fb06 e202 	mla	r2, r6, r2, lr
 800ed5e:	fa13 f38a 	uxtah	r3, r3, sl
 800ed62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ed66:	fa1f fa82 	uxth.w	sl, r2
 800ed6a:	f8dc 2000 	ldr.w	r2, [ip]
 800ed6e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ed72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed7c:	4581      	cmp	r9, r0
 800ed7e:	f84c 3b04 	str.w	r3, [ip], #4
 800ed82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ed86:	d2db      	bcs.n	800ed40 <quorem+0x44>
 800ed88:	f855 300b 	ldr.w	r3, [r5, fp]
 800ed8c:	b92b      	cbnz	r3, 800ed9a <quorem+0x9e>
 800ed8e:	9b01      	ldr	r3, [sp, #4]
 800ed90:	3b04      	subs	r3, #4
 800ed92:	429d      	cmp	r5, r3
 800ed94:	461a      	mov	r2, r3
 800ed96:	d32e      	bcc.n	800edf6 <quorem+0xfa>
 800ed98:	613c      	str	r4, [r7, #16]
 800ed9a:	4638      	mov	r0, r7
 800ed9c:	f7ff fe62 	bl	800ea64 <__mcmp>
 800eda0:	2800      	cmp	r0, #0
 800eda2:	db24      	blt.n	800edee <quorem+0xf2>
 800eda4:	3601      	adds	r6, #1
 800eda6:	4628      	mov	r0, r5
 800eda8:	f04f 0c00 	mov.w	ip, #0
 800edac:	f858 2b04 	ldr.w	r2, [r8], #4
 800edb0:	f8d0 e000 	ldr.w	lr, [r0]
 800edb4:	b293      	uxth	r3, r2
 800edb6:	ebac 0303 	sub.w	r3, ip, r3
 800edba:	0c12      	lsrs	r2, r2, #16
 800edbc:	fa13 f38e 	uxtah	r3, r3, lr
 800edc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800edc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800edc8:	b29b      	uxth	r3, r3
 800edca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edce:	45c1      	cmp	r9, r8
 800edd0:	f840 3b04 	str.w	r3, [r0], #4
 800edd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800edd8:	d2e8      	bcs.n	800edac <quorem+0xb0>
 800edda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800edde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ede2:	b922      	cbnz	r2, 800edee <quorem+0xf2>
 800ede4:	3b04      	subs	r3, #4
 800ede6:	429d      	cmp	r5, r3
 800ede8:	461a      	mov	r2, r3
 800edea:	d30a      	bcc.n	800ee02 <quorem+0x106>
 800edec:	613c      	str	r4, [r7, #16]
 800edee:	4630      	mov	r0, r6
 800edf0:	b003      	add	sp, #12
 800edf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf6:	6812      	ldr	r2, [r2, #0]
 800edf8:	3b04      	subs	r3, #4
 800edfa:	2a00      	cmp	r2, #0
 800edfc:	d1cc      	bne.n	800ed98 <quorem+0x9c>
 800edfe:	3c01      	subs	r4, #1
 800ee00:	e7c7      	b.n	800ed92 <quorem+0x96>
 800ee02:	6812      	ldr	r2, [r2, #0]
 800ee04:	3b04      	subs	r3, #4
 800ee06:	2a00      	cmp	r2, #0
 800ee08:	d1f0      	bne.n	800edec <quorem+0xf0>
 800ee0a:	3c01      	subs	r4, #1
 800ee0c:	e7eb      	b.n	800ede6 <quorem+0xea>
 800ee0e:	2000      	movs	r0, #0
 800ee10:	e7ee      	b.n	800edf0 <quorem+0xf4>
 800ee12:	0000      	movs	r0, r0
 800ee14:	0000      	movs	r0, r0
	...

0800ee18 <_dtoa_r>:
 800ee18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee1c:	ed2d 8b02 	vpush	{d8}
 800ee20:	ec57 6b10 	vmov	r6, r7, d0
 800ee24:	b095      	sub	sp, #84	; 0x54
 800ee26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ee28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ee2c:	9105      	str	r1, [sp, #20]
 800ee2e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ee32:	4604      	mov	r4, r0
 800ee34:	9209      	str	r2, [sp, #36]	; 0x24
 800ee36:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee38:	b975      	cbnz	r5, 800ee58 <_dtoa_r+0x40>
 800ee3a:	2010      	movs	r0, #16
 800ee3c:	f7ff f95a 	bl	800e0f4 <malloc>
 800ee40:	4602      	mov	r2, r0
 800ee42:	6260      	str	r0, [r4, #36]	; 0x24
 800ee44:	b920      	cbnz	r0, 800ee50 <_dtoa_r+0x38>
 800ee46:	4bb2      	ldr	r3, [pc, #712]	; (800f110 <_dtoa_r+0x2f8>)
 800ee48:	21ea      	movs	r1, #234	; 0xea
 800ee4a:	48b2      	ldr	r0, [pc, #712]	; (800f114 <_dtoa_r+0x2fc>)
 800ee4c:	f7ff ff38 	bl	800ecc0 <__assert_func>
 800ee50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ee54:	6005      	str	r5, [r0, #0]
 800ee56:	60c5      	str	r5, [r0, #12]
 800ee58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee5a:	6819      	ldr	r1, [r3, #0]
 800ee5c:	b151      	cbz	r1, 800ee74 <_dtoa_r+0x5c>
 800ee5e:	685a      	ldr	r2, [r3, #4]
 800ee60:	604a      	str	r2, [r1, #4]
 800ee62:	2301      	movs	r3, #1
 800ee64:	4093      	lsls	r3, r2
 800ee66:	608b      	str	r3, [r1, #8]
 800ee68:	4620      	mov	r0, r4
 800ee6a:	f7ff fbbd 	bl	800e5e8 <_Bfree>
 800ee6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee70:	2200      	movs	r2, #0
 800ee72:	601a      	str	r2, [r3, #0]
 800ee74:	1e3b      	subs	r3, r7, #0
 800ee76:	bfb9      	ittee	lt
 800ee78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ee7c:	9303      	strlt	r3, [sp, #12]
 800ee7e:	2300      	movge	r3, #0
 800ee80:	f8c8 3000 	strge.w	r3, [r8]
 800ee84:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ee88:	4ba3      	ldr	r3, [pc, #652]	; (800f118 <_dtoa_r+0x300>)
 800ee8a:	bfbc      	itt	lt
 800ee8c:	2201      	movlt	r2, #1
 800ee8e:	f8c8 2000 	strlt.w	r2, [r8]
 800ee92:	ea33 0309 	bics.w	r3, r3, r9
 800ee96:	d11b      	bne.n	800eed0 <_dtoa_r+0xb8>
 800ee98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee9a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ee9e:	6013      	str	r3, [r2, #0]
 800eea0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eea4:	4333      	orrs	r3, r6
 800eea6:	f000 857a 	beq.w	800f99e <_dtoa_r+0xb86>
 800eeaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eeac:	b963      	cbnz	r3, 800eec8 <_dtoa_r+0xb0>
 800eeae:	4b9b      	ldr	r3, [pc, #620]	; (800f11c <_dtoa_r+0x304>)
 800eeb0:	e024      	b.n	800eefc <_dtoa_r+0xe4>
 800eeb2:	4b9b      	ldr	r3, [pc, #620]	; (800f120 <_dtoa_r+0x308>)
 800eeb4:	9300      	str	r3, [sp, #0]
 800eeb6:	3308      	adds	r3, #8
 800eeb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eeba:	6013      	str	r3, [r2, #0]
 800eebc:	9800      	ldr	r0, [sp, #0]
 800eebe:	b015      	add	sp, #84	; 0x54
 800eec0:	ecbd 8b02 	vpop	{d8}
 800eec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec8:	4b94      	ldr	r3, [pc, #592]	; (800f11c <_dtoa_r+0x304>)
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	3303      	adds	r3, #3
 800eece:	e7f3      	b.n	800eeb8 <_dtoa_r+0xa0>
 800eed0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eed4:	2200      	movs	r2, #0
 800eed6:	ec51 0b17 	vmov	r0, r1, d7
 800eeda:	2300      	movs	r3, #0
 800eedc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800eee0:	f7f1 fe02 	bl	8000ae8 <__aeabi_dcmpeq>
 800eee4:	4680      	mov	r8, r0
 800eee6:	b158      	cbz	r0, 800ef00 <_dtoa_r+0xe8>
 800eee8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eeea:	2301      	movs	r3, #1
 800eeec:	6013      	str	r3, [r2, #0]
 800eeee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	f000 8551 	beq.w	800f998 <_dtoa_r+0xb80>
 800eef6:	488b      	ldr	r0, [pc, #556]	; (800f124 <_dtoa_r+0x30c>)
 800eef8:	6018      	str	r0, [r3, #0]
 800eefa:	1e43      	subs	r3, r0, #1
 800eefc:	9300      	str	r3, [sp, #0]
 800eefe:	e7dd      	b.n	800eebc <_dtoa_r+0xa4>
 800ef00:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ef04:	aa12      	add	r2, sp, #72	; 0x48
 800ef06:	a913      	add	r1, sp, #76	; 0x4c
 800ef08:	4620      	mov	r0, r4
 800ef0a:	f7ff fe4f 	bl	800ebac <__d2b>
 800ef0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ef12:	4683      	mov	fp, r0
 800ef14:	2d00      	cmp	r5, #0
 800ef16:	d07c      	beq.n	800f012 <_dtoa_r+0x1fa>
 800ef18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef1a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ef1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef22:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ef26:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ef2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ef2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ef32:	4b7d      	ldr	r3, [pc, #500]	; (800f128 <_dtoa_r+0x310>)
 800ef34:	2200      	movs	r2, #0
 800ef36:	4630      	mov	r0, r6
 800ef38:	4639      	mov	r1, r7
 800ef3a:	f7f1 f9b5 	bl	80002a8 <__aeabi_dsub>
 800ef3e:	a36e      	add	r3, pc, #440	; (adr r3, 800f0f8 <_dtoa_r+0x2e0>)
 800ef40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef44:	f7f1 fb68 	bl	8000618 <__aeabi_dmul>
 800ef48:	a36d      	add	r3, pc, #436	; (adr r3, 800f100 <_dtoa_r+0x2e8>)
 800ef4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef4e:	f7f1 f9ad 	bl	80002ac <__adddf3>
 800ef52:	4606      	mov	r6, r0
 800ef54:	4628      	mov	r0, r5
 800ef56:	460f      	mov	r7, r1
 800ef58:	f7f1 faf4 	bl	8000544 <__aeabi_i2d>
 800ef5c:	a36a      	add	r3, pc, #424	; (adr r3, 800f108 <_dtoa_r+0x2f0>)
 800ef5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef62:	f7f1 fb59 	bl	8000618 <__aeabi_dmul>
 800ef66:	4602      	mov	r2, r0
 800ef68:	460b      	mov	r3, r1
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	4639      	mov	r1, r7
 800ef6e:	f7f1 f99d 	bl	80002ac <__adddf3>
 800ef72:	4606      	mov	r6, r0
 800ef74:	460f      	mov	r7, r1
 800ef76:	f7f1 fdff 	bl	8000b78 <__aeabi_d2iz>
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	4682      	mov	sl, r0
 800ef7e:	2300      	movs	r3, #0
 800ef80:	4630      	mov	r0, r6
 800ef82:	4639      	mov	r1, r7
 800ef84:	f7f1 fdba 	bl	8000afc <__aeabi_dcmplt>
 800ef88:	b148      	cbz	r0, 800ef9e <_dtoa_r+0x186>
 800ef8a:	4650      	mov	r0, sl
 800ef8c:	f7f1 fada 	bl	8000544 <__aeabi_i2d>
 800ef90:	4632      	mov	r2, r6
 800ef92:	463b      	mov	r3, r7
 800ef94:	f7f1 fda8 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef98:	b908      	cbnz	r0, 800ef9e <_dtoa_r+0x186>
 800ef9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef9e:	f1ba 0f16 	cmp.w	sl, #22
 800efa2:	d854      	bhi.n	800f04e <_dtoa_r+0x236>
 800efa4:	4b61      	ldr	r3, [pc, #388]	; (800f12c <_dtoa_r+0x314>)
 800efa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800efaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800efb2:	f7f1 fda3 	bl	8000afc <__aeabi_dcmplt>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	d04b      	beq.n	800f052 <_dtoa_r+0x23a>
 800efba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800efbe:	2300      	movs	r3, #0
 800efc0:	930e      	str	r3, [sp, #56]	; 0x38
 800efc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800efc4:	1b5d      	subs	r5, r3, r5
 800efc6:	1e6b      	subs	r3, r5, #1
 800efc8:	9304      	str	r3, [sp, #16]
 800efca:	bf43      	ittte	mi
 800efcc:	2300      	movmi	r3, #0
 800efce:	f1c5 0801 	rsbmi	r8, r5, #1
 800efd2:	9304      	strmi	r3, [sp, #16]
 800efd4:	f04f 0800 	movpl.w	r8, #0
 800efd8:	f1ba 0f00 	cmp.w	sl, #0
 800efdc:	db3b      	blt.n	800f056 <_dtoa_r+0x23e>
 800efde:	9b04      	ldr	r3, [sp, #16]
 800efe0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800efe4:	4453      	add	r3, sl
 800efe6:	9304      	str	r3, [sp, #16]
 800efe8:	2300      	movs	r3, #0
 800efea:	9306      	str	r3, [sp, #24]
 800efec:	9b05      	ldr	r3, [sp, #20]
 800efee:	2b09      	cmp	r3, #9
 800eff0:	d869      	bhi.n	800f0c6 <_dtoa_r+0x2ae>
 800eff2:	2b05      	cmp	r3, #5
 800eff4:	bfc4      	itt	gt
 800eff6:	3b04      	subgt	r3, #4
 800eff8:	9305      	strgt	r3, [sp, #20]
 800effa:	9b05      	ldr	r3, [sp, #20]
 800effc:	f1a3 0302 	sub.w	r3, r3, #2
 800f000:	bfcc      	ite	gt
 800f002:	2500      	movgt	r5, #0
 800f004:	2501      	movle	r5, #1
 800f006:	2b03      	cmp	r3, #3
 800f008:	d869      	bhi.n	800f0de <_dtoa_r+0x2c6>
 800f00a:	e8df f003 	tbb	[pc, r3]
 800f00e:	4e2c      	.short	0x4e2c
 800f010:	5a4c      	.short	0x5a4c
 800f012:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f016:	441d      	add	r5, r3
 800f018:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f01c:	2b20      	cmp	r3, #32
 800f01e:	bfc1      	itttt	gt
 800f020:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f024:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f028:	fa09 f303 	lslgt.w	r3, r9, r3
 800f02c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f030:	bfda      	itte	le
 800f032:	f1c3 0320 	rsble	r3, r3, #32
 800f036:	fa06 f003 	lslle.w	r0, r6, r3
 800f03a:	4318      	orrgt	r0, r3
 800f03c:	f7f1 fa72 	bl	8000524 <__aeabi_ui2d>
 800f040:	2301      	movs	r3, #1
 800f042:	4606      	mov	r6, r0
 800f044:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f048:	3d01      	subs	r5, #1
 800f04a:	9310      	str	r3, [sp, #64]	; 0x40
 800f04c:	e771      	b.n	800ef32 <_dtoa_r+0x11a>
 800f04e:	2301      	movs	r3, #1
 800f050:	e7b6      	b.n	800efc0 <_dtoa_r+0x1a8>
 800f052:	900e      	str	r0, [sp, #56]	; 0x38
 800f054:	e7b5      	b.n	800efc2 <_dtoa_r+0x1aa>
 800f056:	f1ca 0300 	rsb	r3, sl, #0
 800f05a:	9306      	str	r3, [sp, #24]
 800f05c:	2300      	movs	r3, #0
 800f05e:	eba8 080a 	sub.w	r8, r8, sl
 800f062:	930d      	str	r3, [sp, #52]	; 0x34
 800f064:	e7c2      	b.n	800efec <_dtoa_r+0x1d4>
 800f066:	2300      	movs	r3, #0
 800f068:	9308      	str	r3, [sp, #32]
 800f06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	dc39      	bgt.n	800f0e4 <_dtoa_r+0x2cc>
 800f070:	f04f 0901 	mov.w	r9, #1
 800f074:	f8cd 9004 	str.w	r9, [sp, #4]
 800f078:	464b      	mov	r3, r9
 800f07a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f07e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f080:	2200      	movs	r2, #0
 800f082:	6042      	str	r2, [r0, #4]
 800f084:	2204      	movs	r2, #4
 800f086:	f102 0614 	add.w	r6, r2, #20
 800f08a:	429e      	cmp	r6, r3
 800f08c:	6841      	ldr	r1, [r0, #4]
 800f08e:	d92f      	bls.n	800f0f0 <_dtoa_r+0x2d8>
 800f090:	4620      	mov	r0, r4
 800f092:	f7ff fa69 	bl	800e568 <_Balloc>
 800f096:	9000      	str	r0, [sp, #0]
 800f098:	2800      	cmp	r0, #0
 800f09a:	d14b      	bne.n	800f134 <_dtoa_r+0x31c>
 800f09c:	4b24      	ldr	r3, [pc, #144]	; (800f130 <_dtoa_r+0x318>)
 800f09e:	4602      	mov	r2, r0
 800f0a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f0a4:	e6d1      	b.n	800ee4a <_dtoa_r+0x32>
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	e7de      	b.n	800f068 <_dtoa_r+0x250>
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	9308      	str	r3, [sp, #32]
 800f0ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0b0:	eb0a 0903 	add.w	r9, sl, r3
 800f0b4:	f109 0301 	add.w	r3, r9, #1
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	9301      	str	r3, [sp, #4]
 800f0bc:	bfb8      	it	lt
 800f0be:	2301      	movlt	r3, #1
 800f0c0:	e7dd      	b.n	800f07e <_dtoa_r+0x266>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	e7f2      	b.n	800f0ac <_dtoa_r+0x294>
 800f0c6:	2501      	movs	r5, #1
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	9305      	str	r3, [sp, #20]
 800f0cc:	9508      	str	r5, [sp, #32]
 800f0ce:	f04f 39ff 	mov.w	r9, #4294967295
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f8cd 9004 	str.w	r9, [sp, #4]
 800f0d8:	2312      	movs	r3, #18
 800f0da:	9209      	str	r2, [sp, #36]	; 0x24
 800f0dc:	e7cf      	b.n	800f07e <_dtoa_r+0x266>
 800f0de:	2301      	movs	r3, #1
 800f0e0:	9308      	str	r3, [sp, #32]
 800f0e2:	e7f4      	b.n	800f0ce <_dtoa_r+0x2b6>
 800f0e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f0e8:	f8cd 9004 	str.w	r9, [sp, #4]
 800f0ec:	464b      	mov	r3, r9
 800f0ee:	e7c6      	b.n	800f07e <_dtoa_r+0x266>
 800f0f0:	3101      	adds	r1, #1
 800f0f2:	6041      	str	r1, [r0, #4]
 800f0f4:	0052      	lsls	r2, r2, #1
 800f0f6:	e7c6      	b.n	800f086 <_dtoa_r+0x26e>
 800f0f8:	636f4361 	.word	0x636f4361
 800f0fc:	3fd287a7 	.word	0x3fd287a7
 800f100:	8b60c8b3 	.word	0x8b60c8b3
 800f104:	3fc68a28 	.word	0x3fc68a28
 800f108:	509f79fb 	.word	0x509f79fb
 800f10c:	3fd34413 	.word	0x3fd34413
 800f110:	08012ce8 	.word	0x08012ce8
 800f114:	08012eb7 	.word	0x08012eb7
 800f118:	7ff00000 	.word	0x7ff00000
 800f11c:	08012eb1 	.word	0x08012eb1
 800f120:	08012ea8 	.word	0x08012ea8
 800f124:	08012eb6 	.word	0x08012eb6
 800f128:	3ff80000 	.word	0x3ff80000
 800f12c:	08012d98 	.word	0x08012d98
 800f130:	08012d5f 	.word	0x08012d5f
 800f134:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f136:	9a00      	ldr	r2, [sp, #0]
 800f138:	601a      	str	r2, [r3, #0]
 800f13a:	9b01      	ldr	r3, [sp, #4]
 800f13c:	2b0e      	cmp	r3, #14
 800f13e:	f200 80ad 	bhi.w	800f29c <_dtoa_r+0x484>
 800f142:	2d00      	cmp	r5, #0
 800f144:	f000 80aa 	beq.w	800f29c <_dtoa_r+0x484>
 800f148:	f1ba 0f00 	cmp.w	sl, #0
 800f14c:	dd36      	ble.n	800f1bc <_dtoa_r+0x3a4>
 800f14e:	4ac3      	ldr	r2, [pc, #780]	; (800f45c <_dtoa_r+0x644>)
 800f150:	f00a 030f 	and.w	r3, sl, #15
 800f154:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f158:	ed93 7b00 	vldr	d7, [r3]
 800f15c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f160:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f164:	eeb0 8a47 	vmov.f32	s16, s14
 800f168:	eef0 8a67 	vmov.f32	s17, s15
 800f16c:	d016      	beq.n	800f19c <_dtoa_r+0x384>
 800f16e:	4bbc      	ldr	r3, [pc, #752]	; (800f460 <_dtoa_r+0x648>)
 800f170:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f174:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f178:	f7f1 fb78 	bl	800086c <__aeabi_ddiv>
 800f17c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f180:	f007 070f 	and.w	r7, r7, #15
 800f184:	2503      	movs	r5, #3
 800f186:	4eb6      	ldr	r6, [pc, #728]	; (800f460 <_dtoa_r+0x648>)
 800f188:	b957      	cbnz	r7, 800f1a0 <_dtoa_r+0x388>
 800f18a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f18e:	ec53 2b18 	vmov	r2, r3, d8
 800f192:	f7f1 fb6b 	bl	800086c <__aeabi_ddiv>
 800f196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f19a:	e029      	b.n	800f1f0 <_dtoa_r+0x3d8>
 800f19c:	2502      	movs	r5, #2
 800f19e:	e7f2      	b.n	800f186 <_dtoa_r+0x36e>
 800f1a0:	07f9      	lsls	r1, r7, #31
 800f1a2:	d508      	bpl.n	800f1b6 <_dtoa_r+0x39e>
 800f1a4:	ec51 0b18 	vmov	r0, r1, d8
 800f1a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f1ac:	f7f1 fa34 	bl	8000618 <__aeabi_dmul>
 800f1b0:	ec41 0b18 	vmov	d8, r0, r1
 800f1b4:	3501      	adds	r5, #1
 800f1b6:	107f      	asrs	r7, r7, #1
 800f1b8:	3608      	adds	r6, #8
 800f1ba:	e7e5      	b.n	800f188 <_dtoa_r+0x370>
 800f1bc:	f000 80a6 	beq.w	800f30c <_dtoa_r+0x4f4>
 800f1c0:	f1ca 0600 	rsb	r6, sl, #0
 800f1c4:	4ba5      	ldr	r3, [pc, #660]	; (800f45c <_dtoa_r+0x644>)
 800f1c6:	4fa6      	ldr	r7, [pc, #664]	; (800f460 <_dtoa_r+0x648>)
 800f1c8:	f006 020f 	and.w	r2, r6, #15
 800f1cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f1d8:	f7f1 fa1e 	bl	8000618 <__aeabi_dmul>
 800f1dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1e0:	1136      	asrs	r6, r6, #4
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	2502      	movs	r5, #2
 800f1e6:	2e00      	cmp	r6, #0
 800f1e8:	f040 8085 	bne.w	800f2f6 <_dtoa_r+0x4de>
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d1d2      	bne.n	800f196 <_dtoa_r+0x37e>
 800f1f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	f000 808c 	beq.w	800f310 <_dtoa_r+0x4f8>
 800f1f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f1fc:	4b99      	ldr	r3, [pc, #612]	; (800f464 <_dtoa_r+0x64c>)
 800f1fe:	2200      	movs	r2, #0
 800f200:	4630      	mov	r0, r6
 800f202:	4639      	mov	r1, r7
 800f204:	f7f1 fc7a 	bl	8000afc <__aeabi_dcmplt>
 800f208:	2800      	cmp	r0, #0
 800f20a:	f000 8081 	beq.w	800f310 <_dtoa_r+0x4f8>
 800f20e:	9b01      	ldr	r3, [sp, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d07d      	beq.n	800f310 <_dtoa_r+0x4f8>
 800f214:	f1b9 0f00 	cmp.w	r9, #0
 800f218:	dd3c      	ble.n	800f294 <_dtoa_r+0x47c>
 800f21a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f21e:	9307      	str	r3, [sp, #28]
 800f220:	2200      	movs	r2, #0
 800f222:	4b91      	ldr	r3, [pc, #580]	; (800f468 <_dtoa_r+0x650>)
 800f224:	4630      	mov	r0, r6
 800f226:	4639      	mov	r1, r7
 800f228:	f7f1 f9f6 	bl	8000618 <__aeabi_dmul>
 800f22c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f230:	3501      	adds	r5, #1
 800f232:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f236:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f23a:	4628      	mov	r0, r5
 800f23c:	f7f1 f982 	bl	8000544 <__aeabi_i2d>
 800f240:	4632      	mov	r2, r6
 800f242:	463b      	mov	r3, r7
 800f244:	f7f1 f9e8 	bl	8000618 <__aeabi_dmul>
 800f248:	4b88      	ldr	r3, [pc, #544]	; (800f46c <_dtoa_r+0x654>)
 800f24a:	2200      	movs	r2, #0
 800f24c:	f7f1 f82e 	bl	80002ac <__adddf3>
 800f250:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f258:	9303      	str	r3, [sp, #12]
 800f25a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d15c      	bne.n	800f31a <_dtoa_r+0x502>
 800f260:	4b83      	ldr	r3, [pc, #524]	; (800f470 <_dtoa_r+0x658>)
 800f262:	2200      	movs	r2, #0
 800f264:	4630      	mov	r0, r6
 800f266:	4639      	mov	r1, r7
 800f268:	f7f1 f81e 	bl	80002a8 <__aeabi_dsub>
 800f26c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f270:	4606      	mov	r6, r0
 800f272:	460f      	mov	r7, r1
 800f274:	f7f1 fc60 	bl	8000b38 <__aeabi_dcmpgt>
 800f278:	2800      	cmp	r0, #0
 800f27a:	f040 8296 	bne.w	800f7aa <_dtoa_r+0x992>
 800f27e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f282:	4630      	mov	r0, r6
 800f284:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f288:	4639      	mov	r1, r7
 800f28a:	f7f1 fc37 	bl	8000afc <__aeabi_dcmplt>
 800f28e:	2800      	cmp	r0, #0
 800f290:	f040 8288 	bne.w	800f7a4 <_dtoa_r+0x98c>
 800f294:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f298:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f29c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	f2c0 8158 	blt.w	800f554 <_dtoa_r+0x73c>
 800f2a4:	f1ba 0f0e 	cmp.w	sl, #14
 800f2a8:	f300 8154 	bgt.w	800f554 <_dtoa_r+0x73c>
 800f2ac:	4b6b      	ldr	r3, [pc, #428]	; (800f45c <_dtoa_r+0x644>)
 800f2ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f2b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	f280 80e3 	bge.w	800f484 <_dtoa_r+0x66c>
 800f2be:	9b01      	ldr	r3, [sp, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	f300 80df 	bgt.w	800f484 <_dtoa_r+0x66c>
 800f2c6:	f040 826d 	bne.w	800f7a4 <_dtoa_r+0x98c>
 800f2ca:	4b69      	ldr	r3, [pc, #420]	; (800f470 <_dtoa_r+0x658>)
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	4640      	mov	r0, r8
 800f2d0:	4649      	mov	r1, r9
 800f2d2:	f7f1 f9a1 	bl	8000618 <__aeabi_dmul>
 800f2d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f2da:	f7f1 fc23 	bl	8000b24 <__aeabi_dcmpge>
 800f2de:	9e01      	ldr	r6, [sp, #4]
 800f2e0:	4637      	mov	r7, r6
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	f040 8243 	bne.w	800f76e <_dtoa_r+0x956>
 800f2e8:	9d00      	ldr	r5, [sp, #0]
 800f2ea:	2331      	movs	r3, #49	; 0x31
 800f2ec:	f805 3b01 	strb.w	r3, [r5], #1
 800f2f0:	f10a 0a01 	add.w	sl, sl, #1
 800f2f4:	e23f      	b.n	800f776 <_dtoa_r+0x95e>
 800f2f6:	07f2      	lsls	r2, r6, #31
 800f2f8:	d505      	bpl.n	800f306 <_dtoa_r+0x4ee>
 800f2fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2fe:	f7f1 f98b 	bl	8000618 <__aeabi_dmul>
 800f302:	3501      	adds	r5, #1
 800f304:	2301      	movs	r3, #1
 800f306:	1076      	asrs	r6, r6, #1
 800f308:	3708      	adds	r7, #8
 800f30a:	e76c      	b.n	800f1e6 <_dtoa_r+0x3ce>
 800f30c:	2502      	movs	r5, #2
 800f30e:	e76f      	b.n	800f1f0 <_dtoa_r+0x3d8>
 800f310:	9b01      	ldr	r3, [sp, #4]
 800f312:	f8cd a01c 	str.w	sl, [sp, #28]
 800f316:	930c      	str	r3, [sp, #48]	; 0x30
 800f318:	e78d      	b.n	800f236 <_dtoa_r+0x41e>
 800f31a:	9900      	ldr	r1, [sp, #0]
 800f31c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f31e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f320:	4b4e      	ldr	r3, [pc, #312]	; (800f45c <_dtoa_r+0x644>)
 800f322:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f326:	4401      	add	r1, r0
 800f328:	9102      	str	r1, [sp, #8]
 800f32a:	9908      	ldr	r1, [sp, #32]
 800f32c:	eeb0 8a47 	vmov.f32	s16, s14
 800f330:	eef0 8a67 	vmov.f32	s17, s15
 800f334:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f338:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f33c:	2900      	cmp	r1, #0
 800f33e:	d045      	beq.n	800f3cc <_dtoa_r+0x5b4>
 800f340:	494c      	ldr	r1, [pc, #304]	; (800f474 <_dtoa_r+0x65c>)
 800f342:	2000      	movs	r0, #0
 800f344:	f7f1 fa92 	bl	800086c <__aeabi_ddiv>
 800f348:	ec53 2b18 	vmov	r2, r3, d8
 800f34c:	f7f0 ffac 	bl	80002a8 <__aeabi_dsub>
 800f350:	9d00      	ldr	r5, [sp, #0]
 800f352:	ec41 0b18 	vmov	d8, r0, r1
 800f356:	4639      	mov	r1, r7
 800f358:	4630      	mov	r0, r6
 800f35a:	f7f1 fc0d 	bl	8000b78 <__aeabi_d2iz>
 800f35e:	900c      	str	r0, [sp, #48]	; 0x30
 800f360:	f7f1 f8f0 	bl	8000544 <__aeabi_i2d>
 800f364:	4602      	mov	r2, r0
 800f366:	460b      	mov	r3, r1
 800f368:	4630      	mov	r0, r6
 800f36a:	4639      	mov	r1, r7
 800f36c:	f7f0 ff9c 	bl	80002a8 <__aeabi_dsub>
 800f370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f372:	3330      	adds	r3, #48	; 0x30
 800f374:	f805 3b01 	strb.w	r3, [r5], #1
 800f378:	ec53 2b18 	vmov	r2, r3, d8
 800f37c:	4606      	mov	r6, r0
 800f37e:	460f      	mov	r7, r1
 800f380:	f7f1 fbbc 	bl	8000afc <__aeabi_dcmplt>
 800f384:	2800      	cmp	r0, #0
 800f386:	d165      	bne.n	800f454 <_dtoa_r+0x63c>
 800f388:	4632      	mov	r2, r6
 800f38a:	463b      	mov	r3, r7
 800f38c:	4935      	ldr	r1, [pc, #212]	; (800f464 <_dtoa_r+0x64c>)
 800f38e:	2000      	movs	r0, #0
 800f390:	f7f0 ff8a 	bl	80002a8 <__aeabi_dsub>
 800f394:	ec53 2b18 	vmov	r2, r3, d8
 800f398:	f7f1 fbb0 	bl	8000afc <__aeabi_dcmplt>
 800f39c:	2800      	cmp	r0, #0
 800f39e:	f040 80b9 	bne.w	800f514 <_dtoa_r+0x6fc>
 800f3a2:	9b02      	ldr	r3, [sp, #8]
 800f3a4:	429d      	cmp	r5, r3
 800f3a6:	f43f af75 	beq.w	800f294 <_dtoa_r+0x47c>
 800f3aa:	4b2f      	ldr	r3, [pc, #188]	; (800f468 <_dtoa_r+0x650>)
 800f3ac:	ec51 0b18 	vmov	r0, r1, d8
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	f7f1 f931 	bl	8000618 <__aeabi_dmul>
 800f3b6:	4b2c      	ldr	r3, [pc, #176]	; (800f468 <_dtoa_r+0x650>)
 800f3b8:	ec41 0b18 	vmov	d8, r0, r1
 800f3bc:	2200      	movs	r2, #0
 800f3be:	4630      	mov	r0, r6
 800f3c0:	4639      	mov	r1, r7
 800f3c2:	f7f1 f929 	bl	8000618 <__aeabi_dmul>
 800f3c6:	4606      	mov	r6, r0
 800f3c8:	460f      	mov	r7, r1
 800f3ca:	e7c4      	b.n	800f356 <_dtoa_r+0x53e>
 800f3cc:	ec51 0b17 	vmov	r0, r1, d7
 800f3d0:	f7f1 f922 	bl	8000618 <__aeabi_dmul>
 800f3d4:	9b02      	ldr	r3, [sp, #8]
 800f3d6:	9d00      	ldr	r5, [sp, #0]
 800f3d8:	930c      	str	r3, [sp, #48]	; 0x30
 800f3da:	ec41 0b18 	vmov	d8, r0, r1
 800f3de:	4639      	mov	r1, r7
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	f7f1 fbc9 	bl	8000b78 <__aeabi_d2iz>
 800f3e6:	9011      	str	r0, [sp, #68]	; 0x44
 800f3e8:	f7f1 f8ac 	bl	8000544 <__aeabi_i2d>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	460b      	mov	r3, r1
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	4639      	mov	r1, r7
 800f3f4:	f7f0 ff58 	bl	80002a8 <__aeabi_dsub>
 800f3f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f3fa:	3330      	adds	r3, #48	; 0x30
 800f3fc:	f805 3b01 	strb.w	r3, [r5], #1
 800f400:	9b02      	ldr	r3, [sp, #8]
 800f402:	429d      	cmp	r5, r3
 800f404:	4606      	mov	r6, r0
 800f406:	460f      	mov	r7, r1
 800f408:	f04f 0200 	mov.w	r2, #0
 800f40c:	d134      	bne.n	800f478 <_dtoa_r+0x660>
 800f40e:	4b19      	ldr	r3, [pc, #100]	; (800f474 <_dtoa_r+0x65c>)
 800f410:	ec51 0b18 	vmov	r0, r1, d8
 800f414:	f7f0 ff4a 	bl	80002ac <__adddf3>
 800f418:	4602      	mov	r2, r0
 800f41a:	460b      	mov	r3, r1
 800f41c:	4630      	mov	r0, r6
 800f41e:	4639      	mov	r1, r7
 800f420:	f7f1 fb8a 	bl	8000b38 <__aeabi_dcmpgt>
 800f424:	2800      	cmp	r0, #0
 800f426:	d175      	bne.n	800f514 <_dtoa_r+0x6fc>
 800f428:	ec53 2b18 	vmov	r2, r3, d8
 800f42c:	4911      	ldr	r1, [pc, #68]	; (800f474 <_dtoa_r+0x65c>)
 800f42e:	2000      	movs	r0, #0
 800f430:	f7f0 ff3a 	bl	80002a8 <__aeabi_dsub>
 800f434:	4602      	mov	r2, r0
 800f436:	460b      	mov	r3, r1
 800f438:	4630      	mov	r0, r6
 800f43a:	4639      	mov	r1, r7
 800f43c:	f7f1 fb5e 	bl	8000afc <__aeabi_dcmplt>
 800f440:	2800      	cmp	r0, #0
 800f442:	f43f af27 	beq.w	800f294 <_dtoa_r+0x47c>
 800f446:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f448:	1e6b      	subs	r3, r5, #1
 800f44a:	930c      	str	r3, [sp, #48]	; 0x30
 800f44c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f450:	2b30      	cmp	r3, #48	; 0x30
 800f452:	d0f8      	beq.n	800f446 <_dtoa_r+0x62e>
 800f454:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f458:	e04a      	b.n	800f4f0 <_dtoa_r+0x6d8>
 800f45a:	bf00      	nop
 800f45c:	08012d98 	.word	0x08012d98
 800f460:	08012d70 	.word	0x08012d70
 800f464:	3ff00000 	.word	0x3ff00000
 800f468:	40240000 	.word	0x40240000
 800f46c:	401c0000 	.word	0x401c0000
 800f470:	40140000 	.word	0x40140000
 800f474:	3fe00000 	.word	0x3fe00000
 800f478:	4baf      	ldr	r3, [pc, #700]	; (800f738 <_dtoa_r+0x920>)
 800f47a:	f7f1 f8cd 	bl	8000618 <__aeabi_dmul>
 800f47e:	4606      	mov	r6, r0
 800f480:	460f      	mov	r7, r1
 800f482:	e7ac      	b.n	800f3de <_dtoa_r+0x5c6>
 800f484:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f488:	9d00      	ldr	r5, [sp, #0]
 800f48a:	4642      	mov	r2, r8
 800f48c:	464b      	mov	r3, r9
 800f48e:	4630      	mov	r0, r6
 800f490:	4639      	mov	r1, r7
 800f492:	f7f1 f9eb 	bl	800086c <__aeabi_ddiv>
 800f496:	f7f1 fb6f 	bl	8000b78 <__aeabi_d2iz>
 800f49a:	9002      	str	r0, [sp, #8]
 800f49c:	f7f1 f852 	bl	8000544 <__aeabi_i2d>
 800f4a0:	4642      	mov	r2, r8
 800f4a2:	464b      	mov	r3, r9
 800f4a4:	f7f1 f8b8 	bl	8000618 <__aeabi_dmul>
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	4639      	mov	r1, r7
 800f4b0:	f7f0 fefa 	bl	80002a8 <__aeabi_dsub>
 800f4b4:	9e02      	ldr	r6, [sp, #8]
 800f4b6:	9f01      	ldr	r7, [sp, #4]
 800f4b8:	3630      	adds	r6, #48	; 0x30
 800f4ba:	f805 6b01 	strb.w	r6, [r5], #1
 800f4be:	9e00      	ldr	r6, [sp, #0]
 800f4c0:	1bae      	subs	r6, r5, r6
 800f4c2:	42b7      	cmp	r7, r6
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	460b      	mov	r3, r1
 800f4c8:	d137      	bne.n	800f53a <_dtoa_r+0x722>
 800f4ca:	f7f0 feef 	bl	80002ac <__adddf3>
 800f4ce:	4642      	mov	r2, r8
 800f4d0:	464b      	mov	r3, r9
 800f4d2:	4606      	mov	r6, r0
 800f4d4:	460f      	mov	r7, r1
 800f4d6:	f7f1 fb2f 	bl	8000b38 <__aeabi_dcmpgt>
 800f4da:	b9c8      	cbnz	r0, 800f510 <_dtoa_r+0x6f8>
 800f4dc:	4642      	mov	r2, r8
 800f4de:	464b      	mov	r3, r9
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	4639      	mov	r1, r7
 800f4e4:	f7f1 fb00 	bl	8000ae8 <__aeabi_dcmpeq>
 800f4e8:	b110      	cbz	r0, 800f4f0 <_dtoa_r+0x6d8>
 800f4ea:	9b02      	ldr	r3, [sp, #8]
 800f4ec:	07d9      	lsls	r1, r3, #31
 800f4ee:	d40f      	bmi.n	800f510 <_dtoa_r+0x6f8>
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	4659      	mov	r1, fp
 800f4f4:	f7ff f878 	bl	800e5e8 <_Bfree>
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	702b      	strb	r3, [r5, #0]
 800f4fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f4fe:	f10a 0001 	add.w	r0, sl, #1
 800f502:	6018      	str	r0, [r3, #0]
 800f504:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f506:	2b00      	cmp	r3, #0
 800f508:	f43f acd8 	beq.w	800eebc <_dtoa_r+0xa4>
 800f50c:	601d      	str	r5, [r3, #0]
 800f50e:	e4d5      	b.n	800eebc <_dtoa_r+0xa4>
 800f510:	f8cd a01c 	str.w	sl, [sp, #28]
 800f514:	462b      	mov	r3, r5
 800f516:	461d      	mov	r5, r3
 800f518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f51c:	2a39      	cmp	r2, #57	; 0x39
 800f51e:	d108      	bne.n	800f532 <_dtoa_r+0x71a>
 800f520:	9a00      	ldr	r2, [sp, #0]
 800f522:	429a      	cmp	r2, r3
 800f524:	d1f7      	bne.n	800f516 <_dtoa_r+0x6fe>
 800f526:	9a07      	ldr	r2, [sp, #28]
 800f528:	9900      	ldr	r1, [sp, #0]
 800f52a:	3201      	adds	r2, #1
 800f52c:	9207      	str	r2, [sp, #28]
 800f52e:	2230      	movs	r2, #48	; 0x30
 800f530:	700a      	strb	r2, [r1, #0]
 800f532:	781a      	ldrb	r2, [r3, #0]
 800f534:	3201      	adds	r2, #1
 800f536:	701a      	strb	r2, [r3, #0]
 800f538:	e78c      	b.n	800f454 <_dtoa_r+0x63c>
 800f53a:	4b7f      	ldr	r3, [pc, #508]	; (800f738 <_dtoa_r+0x920>)
 800f53c:	2200      	movs	r2, #0
 800f53e:	f7f1 f86b 	bl	8000618 <__aeabi_dmul>
 800f542:	2200      	movs	r2, #0
 800f544:	2300      	movs	r3, #0
 800f546:	4606      	mov	r6, r0
 800f548:	460f      	mov	r7, r1
 800f54a:	f7f1 facd 	bl	8000ae8 <__aeabi_dcmpeq>
 800f54e:	2800      	cmp	r0, #0
 800f550:	d09b      	beq.n	800f48a <_dtoa_r+0x672>
 800f552:	e7cd      	b.n	800f4f0 <_dtoa_r+0x6d8>
 800f554:	9a08      	ldr	r2, [sp, #32]
 800f556:	2a00      	cmp	r2, #0
 800f558:	f000 80c4 	beq.w	800f6e4 <_dtoa_r+0x8cc>
 800f55c:	9a05      	ldr	r2, [sp, #20]
 800f55e:	2a01      	cmp	r2, #1
 800f560:	f300 80a8 	bgt.w	800f6b4 <_dtoa_r+0x89c>
 800f564:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f566:	2a00      	cmp	r2, #0
 800f568:	f000 80a0 	beq.w	800f6ac <_dtoa_r+0x894>
 800f56c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f570:	9e06      	ldr	r6, [sp, #24]
 800f572:	4645      	mov	r5, r8
 800f574:	9a04      	ldr	r2, [sp, #16]
 800f576:	2101      	movs	r1, #1
 800f578:	441a      	add	r2, r3
 800f57a:	4620      	mov	r0, r4
 800f57c:	4498      	add	r8, r3
 800f57e:	9204      	str	r2, [sp, #16]
 800f580:	f7ff f8ee 	bl	800e760 <__i2b>
 800f584:	4607      	mov	r7, r0
 800f586:	2d00      	cmp	r5, #0
 800f588:	dd0b      	ble.n	800f5a2 <_dtoa_r+0x78a>
 800f58a:	9b04      	ldr	r3, [sp, #16]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	dd08      	ble.n	800f5a2 <_dtoa_r+0x78a>
 800f590:	42ab      	cmp	r3, r5
 800f592:	9a04      	ldr	r2, [sp, #16]
 800f594:	bfa8      	it	ge
 800f596:	462b      	movge	r3, r5
 800f598:	eba8 0803 	sub.w	r8, r8, r3
 800f59c:	1aed      	subs	r5, r5, r3
 800f59e:	1ad3      	subs	r3, r2, r3
 800f5a0:	9304      	str	r3, [sp, #16]
 800f5a2:	9b06      	ldr	r3, [sp, #24]
 800f5a4:	b1fb      	cbz	r3, 800f5e6 <_dtoa_r+0x7ce>
 800f5a6:	9b08      	ldr	r3, [sp, #32]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f000 809f 	beq.w	800f6ec <_dtoa_r+0x8d4>
 800f5ae:	2e00      	cmp	r6, #0
 800f5b0:	dd11      	ble.n	800f5d6 <_dtoa_r+0x7be>
 800f5b2:	4639      	mov	r1, r7
 800f5b4:	4632      	mov	r2, r6
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	f7ff f98e 	bl	800e8d8 <__pow5mult>
 800f5bc:	465a      	mov	r2, fp
 800f5be:	4601      	mov	r1, r0
 800f5c0:	4607      	mov	r7, r0
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f7ff f8e2 	bl	800e78c <__multiply>
 800f5c8:	4659      	mov	r1, fp
 800f5ca:	9007      	str	r0, [sp, #28]
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	f7ff f80b 	bl	800e5e8 <_Bfree>
 800f5d2:	9b07      	ldr	r3, [sp, #28]
 800f5d4:	469b      	mov	fp, r3
 800f5d6:	9b06      	ldr	r3, [sp, #24]
 800f5d8:	1b9a      	subs	r2, r3, r6
 800f5da:	d004      	beq.n	800f5e6 <_dtoa_r+0x7ce>
 800f5dc:	4659      	mov	r1, fp
 800f5de:	4620      	mov	r0, r4
 800f5e0:	f7ff f97a 	bl	800e8d8 <__pow5mult>
 800f5e4:	4683      	mov	fp, r0
 800f5e6:	2101      	movs	r1, #1
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	f7ff f8b9 	bl	800e760 <__i2b>
 800f5ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	4606      	mov	r6, r0
 800f5f4:	dd7c      	ble.n	800f6f0 <_dtoa_r+0x8d8>
 800f5f6:	461a      	mov	r2, r3
 800f5f8:	4601      	mov	r1, r0
 800f5fa:	4620      	mov	r0, r4
 800f5fc:	f7ff f96c 	bl	800e8d8 <__pow5mult>
 800f600:	9b05      	ldr	r3, [sp, #20]
 800f602:	2b01      	cmp	r3, #1
 800f604:	4606      	mov	r6, r0
 800f606:	dd76      	ble.n	800f6f6 <_dtoa_r+0x8de>
 800f608:	2300      	movs	r3, #0
 800f60a:	9306      	str	r3, [sp, #24]
 800f60c:	6933      	ldr	r3, [r6, #16]
 800f60e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f612:	6918      	ldr	r0, [r3, #16]
 800f614:	f7ff f854 	bl	800e6c0 <__hi0bits>
 800f618:	f1c0 0020 	rsb	r0, r0, #32
 800f61c:	9b04      	ldr	r3, [sp, #16]
 800f61e:	4418      	add	r0, r3
 800f620:	f010 001f 	ands.w	r0, r0, #31
 800f624:	f000 8086 	beq.w	800f734 <_dtoa_r+0x91c>
 800f628:	f1c0 0320 	rsb	r3, r0, #32
 800f62c:	2b04      	cmp	r3, #4
 800f62e:	dd7f      	ble.n	800f730 <_dtoa_r+0x918>
 800f630:	f1c0 001c 	rsb	r0, r0, #28
 800f634:	9b04      	ldr	r3, [sp, #16]
 800f636:	4403      	add	r3, r0
 800f638:	4480      	add	r8, r0
 800f63a:	4405      	add	r5, r0
 800f63c:	9304      	str	r3, [sp, #16]
 800f63e:	f1b8 0f00 	cmp.w	r8, #0
 800f642:	dd05      	ble.n	800f650 <_dtoa_r+0x838>
 800f644:	4659      	mov	r1, fp
 800f646:	4642      	mov	r2, r8
 800f648:	4620      	mov	r0, r4
 800f64a:	f7ff f99f 	bl	800e98c <__lshift>
 800f64e:	4683      	mov	fp, r0
 800f650:	9b04      	ldr	r3, [sp, #16]
 800f652:	2b00      	cmp	r3, #0
 800f654:	dd05      	ble.n	800f662 <_dtoa_r+0x84a>
 800f656:	4631      	mov	r1, r6
 800f658:	461a      	mov	r2, r3
 800f65a:	4620      	mov	r0, r4
 800f65c:	f7ff f996 	bl	800e98c <__lshift>
 800f660:	4606      	mov	r6, r0
 800f662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f664:	2b00      	cmp	r3, #0
 800f666:	d069      	beq.n	800f73c <_dtoa_r+0x924>
 800f668:	4631      	mov	r1, r6
 800f66a:	4658      	mov	r0, fp
 800f66c:	f7ff f9fa 	bl	800ea64 <__mcmp>
 800f670:	2800      	cmp	r0, #0
 800f672:	da63      	bge.n	800f73c <_dtoa_r+0x924>
 800f674:	2300      	movs	r3, #0
 800f676:	4659      	mov	r1, fp
 800f678:	220a      	movs	r2, #10
 800f67a:	4620      	mov	r0, r4
 800f67c:	f7fe ffd6 	bl	800e62c <__multadd>
 800f680:	9b08      	ldr	r3, [sp, #32]
 800f682:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f686:	4683      	mov	fp, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	f000 818f 	beq.w	800f9ac <_dtoa_r+0xb94>
 800f68e:	4639      	mov	r1, r7
 800f690:	2300      	movs	r3, #0
 800f692:	220a      	movs	r2, #10
 800f694:	4620      	mov	r0, r4
 800f696:	f7fe ffc9 	bl	800e62c <__multadd>
 800f69a:	f1b9 0f00 	cmp.w	r9, #0
 800f69e:	4607      	mov	r7, r0
 800f6a0:	f300 808e 	bgt.w	800f7c0 <_dtoa_r+0x9a8>
 800f6a4:	9b05      	ldr	r3, [sp, #20]
 800f6a6:	2b02      	cmp	r3, #2
 800f6a8:	dc50      	bgt.n	800f74c <_dtoa_r+0x934>
 800f6aa:	e089      	b.n	800f7c0 <_dtoa_r+0x9a8>
 800f6ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f6ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f6b2:	e75d      	b.n	800f570 <_dtoa_r+0x758>
 800f6b4:	9b01      	ldr	r3, [sp, #4]
 800f6b6:	1e5e      	subs	r6, r3, #1
 800f6b8:	9b06      	ldr	r3, [sp, #24]
 800f6ba:	42b3      	cmp	r3, r6
 800f6bc:	bfbf      	itttt	lt
 800f6be:	9b06      	ldrlt	r3, [sp, #24]
 800f6c0:	9606      	strlt	r6, [sp, #24]
 800f6c2:	1af2      	sublt	r2, r6, r3
 800f6c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f6c6:	bfb6      	itet	lt
 800f6c8:	189b      	addlt	r3, r3, r2
 800f6ca:	1b9e      	subge	r6, r3, r6
 800f6cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f6ce:	9b01      	ldr	r3, [sp, #4]
 800f6d0:	bfb8      	it	lt
 800f6d2:	2600      	movlt	r6, #0
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	bfb5      	itete	lt
 800f6d8:	eba8 0503 	sublt.w	r5, r8, r3
 800f6dc:	9b01      	ldrge	r3, [sp, #4]
 800f6de:	2300      	movlt	r3, #0
 800f6e0:	4645      	movge	r5, r8
 800f6e2:	e747      	b.n	800f574 <_dtoa_r+0x75c>
 800f6e4:	9e06      	ldr	r6, [sp, #24]
 800f6e6:	9f08      	ldr	r7, [sp, #32]
 800f6e8:	4645      	mov	r5, r8
 800f6ea:	e74c      	b.n	800f586 <_dtoa_r+0x76e>
 800f6ec:	9a06      	ldr	r2, [sp, #24]
 800f6ee:	e775      	b.n	800f5dc <_dtoa_r+0x7c4>
 800f6f0:	9b05      	ldr	r3, [sp, #20]
 800f6f2:	2b01      	cmp	r3, #1
 800f6f4:	dc18      	bgt.n	800f728 <_dtoa_r+0x910>
 800f6f6:	9b02      	ldr	r3, [sp, #8]
 800f6f8:	b9b3      	cbnz	r3, 800f728 <_dtoa_r+0x910>
 800f6fa:	9b03      	ldr	r3, [sp, #12]
 800f6fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f700:	b9a3      	cbnz	r3, 800f72c <_dtoa_r+0x914>
 800f702:	9b03      	ldr	r3, [sp, #12]
 800f704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f708:	0d1b      	lsrs	r3, r3, #20
 800f70a:	051b      	lsls	r3, r3, #20
 800f70c:	b12b      	cbz	r3, 800f71a <_dtoa_r+0x902>
 800f70e:	9b04      	ldr	r3, [sp, #16]
 800f710:	3301      	adds	r3, #1
 800f712:	9304      	str	r3, [sp, #16]
 800f714:	f108 0801 	add.w	r8, r8, #1
 800f718:	2301      	movs	r3, #1
 800f71a:	9306      	str	r3, [sp, #24]
 800f71c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f47f af74 	bne.w	800f60c <_dtoa_r+0x7f4>
 800f724:	2001      	movs	r0, #1
 800f726:	e779      	b.n	800f61c <_dtoa_r+0x804>
 800f728:	2300      	movs	r3, #0
 800f72a:	e7f6      	b.n	800f71a <_dtoa_r+0x902>
 800f72c:	9b02      	ldr	r3, [sp, #8]
 800f72e:	e7f4      	b.n	800f71a <_dtoa_r+0x902>
 800f730:	d085      	beq.n	800f63e <_dtoa_r+0x826>
 800f732:	4618      	mov	r0, r3
 800f734:	301c      	adds	r0, #28
 800f736:	e77d      	b.n	800f634 <_dtoa_r+0x81c>
 800f738:	40240000 	.word	0x40240000
 800f73c:	9b01      	ldr	r3, [sp, #4]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	dc38      	bgt.n	800f7b4 <_dtoa_r+0x99c>
 800f742:	9b05      	ldr	r3, [sp, #20]
 800f744:	2b02      	cmp	r3, #2
 800f746:	dd35      	ble.n	800f7b4 <_dtoa_r+0x99c>
 800f748:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f74c:	f1b9 0f00 	cmp.w	r9, #0
 800f750:	d10d      	bne.n	800f76e <_dtoa_r+0x956>
 800f752:	4631      	mov	r1, r6
 800f754:	464b      	mov	r3, r9
 800f756:	2205      	movs	r2, #5
 800f758:	4620      	mov	r0, r4
 800f75a:	f7fe ff67 	bl	800e62c <__multadd>
 800f75e:	4601      	mov	r1, r0
 800f760:	4606      	mov	r6, r0
 800f762:	4658      	mov	r0, fp
 800f764:	f7ff f97e 	bl	800ea64 <__mcmp>
 800f768:	2800      	cmp	r0, #0
 800f76a:	f73f adbd 	bgt.w	800f2e8 <_dtoa_r+0x4d0>
 800f76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f770:	9d00      	ldr	r5, [sp, #0]
 800f772:	ea6f 0a03 	mvn.w	sl, r3
 800f776:	f04f 0800 	mov.w	r8, #0
 800f77a:	4631      	mov	r1, r6
 800f77c:	4620      	mov	r0, r4
 800f77e:	f7fe ff33 	bl	800e5e8 <_Bfree>
 800f782:	2f00      	cmp	r7, #0
 800f784:	f43f aeb4 	beq.w	800f4f0 <_dtoa_r+0x6d8>
 800f788:	f1b8 0f00 	cmp.w	r8, #0
 800f78c:	d005      	beq.n	800f79a <_dtoa_r+0x982>
 800f78e:	45b8      	cmp	r8, r7
 800f790:	d003      	beq.n	800f79a <_dtoa_r+0x982>
 800f792:	4641      	mov	r1, r8
 800f794:	4620      	mov	r0, r4
 800f796:	f7fe ff27 	bl	800e5e8 <_Bfree>
 800f79a:	4639      	mov	r1, r7
 800f79c:	4620      	mov	r0, r4
 800f79e:	f7fe ff23 	bl	800e5e8 <_Bfree>
 800f7a2:	e6a5      	b.n	800f4f0 <_dtoa_r+0x6d8>
 800f7a4:	2600      	movs	r6, #0
 800f7a6:	4637      	mov	r7, r6
 800f7a8:	e7e1      	b.n	800f76e <_dtoa_r+0x956>
 800f7aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f7ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f7b0:	4637      	mov	r7, r6
 800f7b2:	e599      	b.n	800f2e8 <_dtoa_r+0x4d0>
 800f7b4:	9b08      	ldr	r3, [sp, #32]
 800f7b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	f000 80fd 	beq.w	800f9ba <_dtoa_r+0xba2>
 800f7c0:	2d00      	cmp	r5, #0
 800f7c2:	dd05      	ble.n	800f7d0 <_dtoa_r+0x9b8>
 800f7c4:	4639      	mov	r1, r7
 800f7c6:	462a      	mov	r2, r5
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	f7ff f8df 	bl	800e98c <__lshift>
 800f7ce:	4607      	mov	r7, r0
 800f7d0:	9b06      	ldr	r3, [sp, #24]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d05c      	beq.n	800f890 <_dtoa_r+0xa78>
 800f7d6:	6879      	ldr	r1, [r7, #4]
 800f7d8:	4620      	mov	r0, r4
 800f7da:	f7fe fec5 	bl	800e568 <_Balloc>
 800f7de:	4605      	mov	r5, r0
 800f7e0:	b928      	cbnz	r0, 800f7ee <_dtoa_r+0x9d6>
 800f7e2:	4b80      	ldr	r3, [pc, #512]	; (800f9e4 <_dtoa_r+0xbcc>)
 800f7e4:	4602      	mov	r2, r0
 800f7e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f7ea:	f7ff bb2e 	b.w	800ee4a <_dtoa_r+0x32>
 800f7ee:	693a      	ldr	r2, [r7, #16]
 800f7f0:	3202      	adds	r2, #2
 800f7f2:	0092      	lsls	r2, r2, #2
 800f7f4:	f107 010c 	add.w	r1, r7, #12
 800f7f8:	300c      	adds	r0, #12
 800f7fa:	f7fe fc8b 	bl	800e114 <memcpy>
 800f7fe:	2201      	movs	r2, #1
 800f800:	4629      	mov	r1, r5
 800f802:	4620      	mov	r0, r4
 800f804:	f7ff f8c2 	bl	800e98c <__lshift>
 800f808:	9b00      	ldr	r3, [sp, #0]
 800f80a:	3301      	adds	r3, #1
 800f80c:	9301      	str	r3, [sp, #4]
 800f80e:	9b00      	ldr	r3, [sp, #0]
 800f810:	444b      	add	r3, r9
 800f812:	9307      	str	r3, [sp, #28]
 800f814:	9b02      	ldr	r3, [sp, #8]
 800f816:	f003 0301 	and.w	r3, r3, #1
 800f81a:	46b8      	mov	r8, r7
 800f81c:	9306      	str	r3, [sp, #24]
 800f81e:	4607      	mov	r7, r0
 800f820:	9b01      	ldr	r3, [sp, #4]
 800f822:	4631      	mov	r1, r6
 800f824:	3b01      	subs	r3, #1
 800f826:	4658      	mov	r0, fp
 800f828:	9302      	str	r3, [sp, #8]
 800f82a:	f7ff fa67 	bl	800ecfc <quorem>
 800f82e:	4603      	mov	r3, r0
 800f830:	3330      	adds	r3, #48	; 0x30
 800f832:	9004      	str	r0, [sp, #16]
 800f834:	4641      	mov	r1, r8
 800f836:	4658      	mov	r0, fp
 800f838:	9308      	str	r3, [sp, #32]
 800f83a:	f7ff f913 	bl	800ea64 <__mcmp>
 800f83e:	463a      	mov	r2, r7
 800f840:	4681      	mov	r9, r0
 800f842:	4631      	mov	r1, r6
 800f844:	4620      	mov	r0, r4
 800f846:	f7ff f929 	bl	800ea9c <__mdiff>
 800f84a:	68c2      	ldr	r2, [r0, #12]
 800f84c:	9b08      	ldr	r3, [sp, #32]
 800f84e:	4605      	mov	r5, r0
 800f850:	bb02      	cbnz	r2, 800f894 <_dtoa_r+0xa7c>
 800f852:	4601      	mov	r1, r0
 800f854:	4658      	mov	r0, fp
 800f856:	f7ff f905 	bl	800ea64 <__mcmp>
 800f85a:	9b08      	ldr	r3, [sp, #32]
 800f85c:	4602      	mov	r2, r0
 800f85e:	4629      	mov	r1, r5
 800f860:	4620      	mov	r0, r4
 800f862:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f866:	f7fe febf 	bl	800e5e8 <_Bfree>
 800f86a:	9b05      	ldr	r3, [sp, #20]
 800f86c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f86e:	9d01      	ldr	r5, [sp, #4]
 800f870:	ea43 0102 	orr.w	r1, r3, r2
 800f874:	9b06      	ldr	r3, [sp, #24]
 800f876:	430b      	orrs	r3, r1
 800f878:	9b08      	ldr	r3, [sp, #32]
 800f87a:	d10d      	bne.n	800f898 <_dtoa_r+0xa80>
 800f87c:	2b39      	cmp	r3, #57	; 0x39
 800f87e:	d029      	beq.n	800f8d4 <_dtoa_r+0xabc>
 800f880:	f1b9 0f00 	cmp.w	r9, #0
 800f884:	dd01      	ble.n	800f88a <_dtoa_r+0xa72>
 800f886:	9b04      	ldr	r3, [sp, #16]
 800f888:	3331      	adds	r3, #49	; 0x31
 800f88a:	9a02      	ldr	r2, [sp, #8]
 800f88c:	7013      	strb	r3, [r2, #0]
 800f88e:	e774      	b.n	800f77a <_dtoa_r+0x962>
 800f890:	4638      	mov	r0, r7
 800f892:	e7b9      	b.n	800f808 <_dtoa_r+0x9f0>
 800f894:	2201      	movs	r2, #1
 800f896:	e7e2      	b.n	800f85e <_dtoa_r+0xa46>
 800f898:	f1b9 0f00 	cmp.w	r9, #0
 800f89c:	db06      	blt.n	800f8ac <_dtoa_r+0xa94>
 800f89e:	9905      	ldr	r1, [sp, #20]
 800f8a0:	ea41 0909 	orr.w	r9, r1, r9
 800f8a4:	9906      	ldr	r1, [sp, #24]
 800f8a6:	ea59 0101 	orrs.w	r1, r9, r1
 800f8aa:	d120      	bne.n	800f8ee <_dtoa_r+0xad6>
 800f8ac:	2a00      	cmp	r2, #0
 800f8ae:	ddec      	ble.n	800f88a <_dtoa_r+0xa72>
 800f8b0:	4659      	mov	r1, fp
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	9301      	str	r3, [sp, #4]
 800f8b8:	f7ff f868 	bl	800e98c <__lshift>
 800f8bc:	4631      	mov	r1, r6
 800f8be:	4683      	mov	fp, r0
 800f8c0:	f7ff f8d0 	bl	800ea64 <__mcmp>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	9b01      	ldr	r3, [sp, #4]
 800f8c8:	dc02      	bgt.n	800f8d0 <_dtoa_r+0xab8>
 800f8ca:	d1de      	bne.n	800f88a <_dtoa_r+0xa72>
 800f8cc:	07da      	lsls	r2, r3, #31
 800f8ce:	d5dc      	bpl.n	800f88a <_dtoa_r+0xa72>
 800f8d0:	2b39      	cmp	r3, #57	; 0x39
 800f8d2:	d1d8      	bne.n	800f886 <_dtoa_r+0xa6e>
 800f8d4:	9a02      	ldr	r2, [sp, #8]
 800f8d6:	2339      	movs	r3, #57	; 0x39
 800f8d8:	7013      	strb	r3, [r2, #0]
 800f8da:	462b      	mov	r3, r5
 800f8dc:	461d      	mov	r5, r3
 800f8de:	3b01      	subs	r3, #1
 800f8e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f8e4:	2a39      	cmp	r2, #57	; 0x39
 800f8e6:	d050      	beq.n	800f98a <_dtoa_r+0xb72>
 800f8e8:	3201      	adds	r2, #1
 800f8ea:	701a      	strb	r2, [r3, #0]
 800f8ec:	e745      	b.n	800f77a <_dtoa_r+0x962>
 800f8ee:	2a00      	cmp	r2, #0
 800f8f0:	dd03      	ble.n	800f8fa <_dtoa_r+0xae2>
 800f8f2:	2b39      	cmp	r3, #57	; 0x39
 800f8f4:	d0ee      	beq.n	800f8d4 <_dtoa_r+0xabc>
 800f8f6:	3301      	adds	r3, #1
 800f8f8:	e7c7      	b.n	800f88a <_dtoa_r+0xa72>
 800f8fa:	9a01      	ldr	r2, [sp, #4]
 800f8fc:	9907      	ldr	r1, [sp, #28]
 800f8fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f902:	428a      	cmp	r2, r1
 800f904:	d02a      	beq.n	800f95c <_dtoa_r+0xb44>
 800f906:	4659      	mov	r1, fp
 800f908:	2300      	movs	r3, #0
 800f90a:	220a      	movs	r2, #10
 800f90c:	4620      	mov	r0, r4
 800f90e:	f7fe fe8d 	bl	800e62c <__multadd>
 800f912:	45b8      	cmp	r8, r7
 800f914:	4683      	mov	fp, r0
 800f916:	f04f 0300 	mov.w	r3, #0
 800f91a:	f04f 020a 	mov.w	r2, #10
 800f91e:	4641      	mov	r1, r8
 800f920:	4620      	mov	r0, r4
 800f922:	d107      	bne.n	800f934 <_dtoa_r+0xb1c>
 800f924:	f7fe fe82 	bl	800e62c <__multadd>
 800f928:	4680      	mov	r8, r0
 800f92a:	4607      	mov	r7, r0
 800f92c:	9b01      	ldr	r3, [sp, #4]
 800f92e:	3301      	adds	r3, #1
 800f930:	9301      	str	r3, [sp, #4]
 800f932:	e775      	b.n	800f820 <_dtoa_r+0xa08>
 800f934:	f7fe fe7a 	bl	800e62c <__multadd>
 800f938:	4639      	mov	r1, r7
 800f93a:	4680      	mov	r8, r0
 800f93c:	2300      	movs	r3, #0
 800f93e:	220a      	movs	r2, #10
 800f940:	4620      	mov	r0, r4
 800f942:	f7fe fe73 	bl	800e62c <__multadd>
 800f946:	4607      	mov	r7, r0
 800f948:	e7f0      	b.n	800f92c <_dtoa_r+0xb14>
 800f94a:	f1b9 0f00 	cmp.w	r9, #0
 800f94e:	9a00      	ldr	r2, [sp, #0]
 800f950:	bfcc      	ite	gt
 800f952:	464d      	movgt	r5, r9
 800f954:	2501      	movle	r5, #1
 800f956:	4415      	add	r5, r2
 800f958:	f04f 0800 	mov.w	r8, #0
 800f95c:	4659      	mov	r1, fp
 800f95e:	2201      	movs	r2, #1
 800f960:	4620      	mov	r0, r4
 800f962:	9301      	str	r3, [sp, #4]
 800f964:	f7ff f812 	bl	800e98c <__lshift>
 800f968:	4631      	mov	r1, r6
 800f96a:	4683      	mov	fp, r0
 800f96c:	f7ff f87a 	bl	800ea64 <__mcmp>
 800f970:	2800      	cmp	r0, #0
 800f972:	dcb2      	bgt.n	800f8da <_dtoa_r+0xac2>
 800f974:	d102      	bne.n	800f97c <_dtoa_r+0xb64>
 800f976:	9b01      	ldr	r3, [sp, #4]
 800f978:	07db      	lsls	r3, r3, #31
 800f97a:	d4ae      	bmi.n	800f8da <_dtoa_r+0xac2>
 800f97c:	462b      	mov	r3, r5
 800f97e:	461d      	mov	r5, r3
 800f980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f984:	2a30      	cmp	r2, #48	; 0x30
 800f986:	d0fa      	beq.n	800f97e <_dtoa_r+0xb66>
 800f988:	e6f7      	b.n	800f77a <_dtoa_r+0x962>
 800f98a:	9a00      	ldr	r2, [sp, #0]
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d1a5      	bne.n	800f8dc <_dtoa_r+0xac4>
 800f990:	f10a 0a01 	add.w	sl, sl, #1
 800f994:	2331      	movs	r3, #49	; 0x31
 800f996:	e779      	b.n	800f88c <_dtoa_r+0xa74>
 800f998:	4b13      	ldr	r3, [pc, #76]	; (800f9e8 <_dtoa_r+0xbd0>)
 800f99a:	f7ff baaf 	b.w	800eefc <_dtoa_r+0xe4>
 800f99e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f47f aa86 	bne.w	800eeb2 <_dtoa_r+0x9a>
 800f9a6:	4b11      	ldr	r3, [pc, #68]	; (800f9ec <_dtoa_r+0xbd4>)
 800f9a8:	f7ff baa8 	b.w	800eefc <_dtoa_r+0xe4>
 800f9ac:	f1b9 0f00 	cmp.w	r9, #0
 800f9b0:	dc03      	bgt.n	800f9ba <_dtoa_r+0xba2>
 800f9b2:	9b05      	ldr	r3, [sp, #20]
 800f9b4:	2b02      	cmp	r3, #2
 800f9b6:	f73f aec9 	bgt.w	800f74c <_dtoa_r+0x934>
 800f9ba:	9d00      	ldr	r5, [sp, #0]
 800f9bc:	4631      	mov	r1, r6
 800f9be:	4658      	mov	r0, fp
 800f9c0:	f7ff f99c 	bl	800ecfc <quorem>
 800f9c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f9c8:	f805 3b01 	strb.w	r3, [r5], #1
 800f9cc:	9a00      	ldr	r2, [sp, #0]
 800f9ce:	1aaa      	subs	r2, r5, r2
 800f9d0:	4591      	cmp	r9, r2
 800f9d2:	ddba      	ble.n	800f94a <_dtoa_r+0xb32>
 800f9d4:	4659      	mov	r1, fp
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	220a      	movs	r2, #10
 800f9da:	4620      	mov	r0, r4
 800f9dc:	f7fe fe26 	bl	800e62c <__multadd>
 800f9e0:	4683      	mov	fp, r0
 800f9e2:	e7eb      	b.n	800f9bc <_dtoa_r+0xba4>
 800f9e4:	08012d5f 	.word	0x08012d5f
 800f9e8:	08012eb5 	.word	0x08012eb5
 800f9ec:	08012ea8 	.word	0x08012ea8

0800f9f0 <fiprintf>:
 800f9f0:	b40e      	push	{r1, r2, r3}
 800f9f2:	b503      	push	{r0, r1, lr}
 800f9f4:	4601      	mov	r1, r0
 800f9f6:	ab03      	add	r3, sp, #12
 800f9f8:	4805      	ldr	r0, [pc, #20]	; (800fa10 <fiprintf+0x20>)
 800f9fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9fe:	6800      	ldr	r0, [r0, #0]
 800fa00:	9301      	str	r3, [sp, #4]
 800fa02:	f000 f833 	bl	800fa6c <_vfiprintf_r>
 800fa06:	b002      	add	sp, #8
 800fa08:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa0c:	b003      	add	sp, #12
 800fa0e:	4770      	bx	lr
 800fa10:	20000040 	.word	0x20000040

0800fa14 <__retarget_lock_init_recursive>:
 800fa14:	4770      	bx	lr

0800fa16 <__retarget_lock_acquire_recursive>:
 800fa16:	4770      	bx	lr

0800fa18 <__retarget_lock_release_recursive>:
 800fa18:	4770      	bx	lr

0800fa1a <__sfputc_r>:
 800fa1a:	6893      	ldr	r3, [r2, #8]
 800fa1c:	3b01      	subs	r3, #1
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	b410      	push	{r4}
 800fa22:	6093      	str	r3, [r2, #8]
 800fa24:	da08      	bge.n	800fa38 <__sfputc_r+0x1e>
 800fa26:	6994      	ldr	r4, [r2, #24]
 800fa28:	42a3      	cmp	r3, r4
 800fa2a:	db01      	blt.n	800fa30 <__sfputc_r+0x16>
 800fa2c:	290a      	cmp	r1, #10
 800fa2e:	d103      	bne.n	800fa38 <__sfputc_r+0x1e>
 800fa30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa34:	f000 bade 	b.w	800fff4 <__swbuf_r>
 800fa38:	6813      	ldr	r3, [r2, #0]
 800fa3a:	1c58      	adds	r0, r3, #1
 800fa3c:	6010      	str	r0, [r2, #0]
 800fa3e:	7019      	strb	r1, [r3, #0]
 800fa40:	4608      	mov	r0, r1
 800fa42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa46:	4770      	bx	lr

0800fa48 <__sfputs_r>:
 800fa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa4a:	4606      	mov	r6, r0
 800fa4c:	460f      	mov	r7, r1
 800fa4e:	4614      	mov	r4, r2
 800fa50:	18d5      	adds	r5, r2, r3
 800fa52:	42ac      	cmp	r4, r5
 800fa54:	d101      	bne.n	800fa5a <__sfputs_r+0x12>
 800fa56:	2000      	movs	r0, #0
 800fa58:	e007      	b.n	800fa6a <__sfputs_r+0x22>
 800fa5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa5e:	463a      	mov	r2, r7
 800fa60:	4630      	mov	r0, r6
 800fa62:	f7ff ffda 	bl	800fa1a <__sfputc_r>
 800fa66:	1c43      	adds	r3, r0, #1
 800fa68:	d1f3      	bne.n	800fa52 <__sfputs_r+0xa>
 800fa6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa6c <_vfiprintf_r>:
 800fa6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa70:	460d      	mov	r5, r1
 800fa72:	b09d      	sub	sp, #116	; 0x74
 800fa74:	4614      	mov	r4, r2
 800fa76:	4698      	mov	r8, r3
 800fa78:	4606      	mov	r6, r0
 800fa7a:	b118      	cbz	r0, 800fa84 <_vfiprintf_r+0x18>
 800fa7c:	6983      	ldr	r3, [r0, #24]
 800fa7e:	b90b      	cbnz	r3, 800fa84 <_vfiprintf_r+0x18>
 800fa80:	f000 fc9a 	bl	80103b8 <__sinit>
 800fa84:	4b89      	ldr	r3, [pc, #548]	; (800fcac <_vfiprintf_r+0x240>)
 800fa86:	429d      	cmp	r5, r3
 800fa88:	d11b      	bne.n	800fac2 <_vfiprintf_r+0x56>
 800fa8a:	6875      	ldr	r5, [r6, #4]
 800fa8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa8e:	07d9      	lsls	r1, r3, #31
 800fa90:	d405      	bmi.n	800fa9e <_vfiprintf_r+0x32>
 800fa92:	89ab      	ldrh	r3, [r5, #12]
 800fa94:	059a      	lsls	r2, r3, #22
 800fa96:	d402      	bmi.n	800fa9e <_vfiprintf_r+0x32>
 800fa98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa9a:	f7ff ffbc 	bl	800fa16 <__retarget_lock_acquire_recursive>
 800fa9e:	89ab      	ldrh	r3, [r5, #12]
 800faa0:	071b      	lsls	r3, r3, #28
 800faa2:	d501      	bpl.n	800faa8 <_vfiprintf_r+0x3c>
 800faa4:	692b      	ldr	r3, [r5, #16]
 800faa6:	b9eb      	cbnz	r3, 800fae4 <_vfiprintf_r+0x78>
 800faa8:	4629      	mov	r1, r5
 800faaa:	4630      	mov	r0, r6
 800faac:	f000 faf4 	bl	8010098 <__swsetup_r>
 800fab0:	b1c0      	cbz	r0, 800fae4 <_vfiprintf_r+0x78>
 800fab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fab4:	07dc      	lsls	r4, r3, #31
 800fab6:	d50e      	bpl.n	800fad6 <_vfiprintf_r+0x6a>
 800fab8:	f04f 30ff 	mov.w	r0, #4294967295
 800fabc:	b01d      	add	sp, #116	; 0x74
 800fabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac2:	4b7b      	ldr	r3, [pc, #492]	; (800fcb0 <_vfiprintf_r+0x244>)
 800fac4:	429d      	cmp	r5, r3
 800fac6:	d101      	bne.n	800facc <_vfiprintf_r+0x60>
 800fac8:	68b5      	ldr	r5, [r6, #8]
 800faca:	e7df      	b.n	800fa8c <_vfiprintf_r+0x20>
 800facc:	4b79      	ldr	r3, [pc, #484]	; (800fcb4 <_vfiprintf_r+0x248>)
 800face:	429d      	cmp	r5, r3
 800fad0:	bf08      	it	eq
 800fad2:	68f5      	ldreq	r5, [r6, #12]
 800fad4:	e7da      	b.n	800fa8c <_vfiprintf_r+0x20>
 800fad6:	89ab      	ldrh	r3, [r5, #12]
 800fad8:	0598      	lsls	r0, r3, #22
 800fada:	d4ed      	bmi.n	800fab8 <_vfiprintf_r+0x4c>
 800fadc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fade:	f7ff ff9b 	bl	800fa18 <__retarget_lock_release_recursive>
 800fae2:	e7e9      	b.n	800fab8 <_vfiprintf_r+0x4c>
 800fae4:	2300      	movs	r3, #0
 800fae6:	9309      	str	r3, [sp, #36]	; 0x24
 800fae8:	2320      	movs	r3, #32
 800faea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800faee:	f8cd 800c 	str.w	r8, [sp, #12]
 800faf2:	2330      	movs	r3, #48	; 0x30
 800faf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fcb8 <_vfiprintf_r+0x24c>
 800faf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fafc:	f04f 0901 	mov.w	r9, #1
 800fb00:	4623      	mov	r3, r4
 800fb02:	469a      	mov	sl, r3
 800fb04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb08:	b10a      	cbz	r2, 800fb0e <_vfiprintf_r+0xa2>
 800fb0a:	2a25      	cmp	r2, #37	; 0x25
 800fb0c:	d1f9      	bne.n	800fb02 <_vfiprintf_r+0x96>
 800fb0e:	ebba 0b04 	subs.w	fp, sl, r4
 800fb12:	d00b      	beq.n	800fb2c <_vfiprintf_r+0xc0>
 800fb14:	465b      	mov	r3, fp
 800fb16:	4622      	mov	r2, r4
 800fb18:	4629      	mov	r1, r5
 800fb1a:	4630      	mov	r0, r6
 800fb1c:	f7ff ff94 	bl	800fa48 <__sfputs_r>
 800fb20:	3001      	adds	r0, #1
 800fb22:	f000 80aa 	beq.w	800fc7a <_vfiprintf_r+0x20e>
 800fb26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb28:	445a      	add	r2, fp
 800fb2a:	9209      	str	r2, [sp, #36]	; 0x24
 800fb2c:	f89a 3000 	ldrb.w	r3, [sl]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	f000 80a2 	beq.w	800fc7a <_vfiprintf_r+0x20e>
 800fb36:	2300      	movs	r3, #0
 800fb38:	f04f 32ff 	mov.w	r2, #4294967295
 800fb3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb40:	f10a 0a01 	add.w	sl, sl, #1
 800fb44:	9304      	str	r3, [sp, #16]
 800fb46:	9307      	str	r3, [sp, #28]
 800fb48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb4c:	931a      	str	r3, [sp, #104]	; 0x68
 800fb4e:	4654      	mov	r4, sl
 800fb50:	2205      	movs	r2, #5
 800fb52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb56:	4858      	ldr	r0, [pc, #352]	; (800fcb8 <_vfiprintf_r+0x24c>)
 800fb58:	f7f0 fb52 	bl	8000200 <memchr>
 800fb5c:	9a04      	ldr	r2, [sp, #16]
 800fb5e:	b9d8      	cbnz	r0, 800fb98 <_vfiprintf_r+0x12c>
 800fb60:	06d1      	lsls	r1, r2, #27
 800fb62:	bf44      	itt	mi
 800fb64:	2320      	movmi	r3, #32
 800fb66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb6a:	0713      	lsls	r3, r2, #28
 800fb6c:	bf44      	itt	mi
 800fb6e:	232b      	movmi	r3, #43	; 0x2b
 800fb70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb74:	f89a 3000 	ldrb.w	r3, [sl]
 800fb78:	2b2a      	cmp	r3, #42	; 0x2a
 800fb7a:	d015      	beq.n	800fba8 <_vfiprintf_r+0x13c>
 800fb7c:	9a07      	ldr	r2, [sp, #28]
 800fb7e:	4654      	mov	r4, sl
 800fb80:	2000      	movs	r0, #0
 800fb82:	f04f 0c0a 	mov.w	ip, #10
 800fb86:	4621      	mov	r1, r4
 800fb88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb8c:	3b30      	subs	r3, #48	; 0x30
 800fb8e:	2b09      	cmp	r3, #9
 800fb90:	d94e      	bls.n	800fc30 <_vfiprintf_r+0x1c4>
 800fb92:	b1b0      	cbz	r0, 800fbc2 <_vfiprintf_r+0x156>
 800fb94:	9207      	str	r2, [sp, #28]
 800fb96:	e014      	b.n	800fbc2 <_vfiprintf_r+0x156>
 800fb98:	eba0 0308 	sub.w	r3, r0, r8
 800fb9c:	fa09 f303 	lsl.w	r3, r9, r3
 800fba0:	4313      	orrs	r3, r2
 800fba2:	9304      	str	r3, [sp, #16]
 800fba4:	46a2      	mov	sl, r4
 800fba6:	e7d2      	b.n	800fb4e <_vfiprintf_r+0xe2>
 800fba8:	9b03      	ldr	r3, [sp, #12]
 800fbaa:	1d19      	adds	r1, r3, #4
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	9103      	str	r1, [sp, #12]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	bfbb      	ittet	lt
 800fbb4:	425b      	neglt	r3, r3
 800fbb6:	f042 0202 	orrlt.w	r2, r2, #2
 800fbba:	9307      	strge	r3, [sp, #28]
 800fbbc:	9307      	strlt	r3, [sp, #28]
 800fbbe:	bfb8      	it	lt
 800fbc0:	9204      	strlt	r2, [sp, #16]
 800fbc2:	7823      	ldrb	r3, [r4, #0]
 800fbc4:	2b2e      	cmp	r3, #46	; 0x2e
 800fbc6:	d10c      	bne.n	800fbe2 <_vfiprintf_r+0x176>
 800fbc8:	7863      	ldrb	r3, [r4, #1]
 800fbca:	2b2a      	cmp	r3, #42	; 0x2a
 800fbcc:	d135      	bne.n	800fc3a <_vfiprintf_r+0x1ce>
 800fbce:	9b03      	ldr	r3, [sp, #12]
 800fbd0:	1d1a      	adds	r2, r3, #4
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	9203      	str	r2, [sp, #12]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	bfb8      	it	lt
 800fbda:	f04f 33ff 	movlt.w	r3, #4294967295
 800fbde:	3402      	adds	r4, #2
 800fbe0:	9305      	str	r3, [sp, #20]
 800fbe2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fcc8 <_vfiprintf_r+0x25c>
 800fbe6:	7821      	ldrb	r1, [r4, #0]
 800fbe8:	2203      	movs	r2, #3
 800fbea:	4650      	mov	r0, sl
 800fbec:	f7f0 fb08 	bl	8000200 <memchr>
 800fbf0:	b140      	cbz	r0, 800fc04 <_vfiprintf_r+0x198>
 800fbf2:	2340      	movs	r3, #64	; 0x40
 800fbf4:	eba0 000a 	sub.w	r0, r0, sl
 800fbf8:	fa03 f000 	lsl.w	r0, r3, r0
 800fbfc:	9b04      	ldr	r3, [sp, #16]
 800fbfe:	4303      	orrs	r3, r0
 800fc00:	3401      	adds	r4, #1
 800fc02:	9304      	str	r3, [sp, #16]
 800fc04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc08:	482c      	ldr	r0, [pc, #176]	; (800fcbc <_vfiprintf_r+0x250>)
 800fc0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc0e:	2206      	movs	r2, #6
 800fc10:	f7f0 faf6 	bl	8000200 <memchr>
 800fc14:	2800      	cmp	r0, #0
 800fc16:	d03f      	beq.n	800fc98 <_vfiprintf_r+0x22c>
 800fc18:	4b29      	ldr	r3, [pc, #164]	; (800fcc0 <_vfiprintf_r+0x254>)
 800fc1a:	bb1b      	cbnz	r3, 800fc64 <_vfiprintf_r+0x1f8>
 800fc1c:	9b03      	ldr	r3, [sp, #12]
 800fc1e:	3307      	adds	r3, #7
 800fc20:	f023 0307 	bic.w	r3, r3, #7
 800fc24:	3308      	adds	r3, #8
 800fc26:	9303      	str	r3, [sp, #12]
 800fc28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc2a:	443b      	add	r3, r7
 800fc2c:	9309      	str	r3, [sp, #36]	; 0x24
 800fc2e:	e767      	b.n	800fb00 <_vfiprintf_r+0x94>
 800fc30:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc34:	460c      	mov	r4, r1
 800fc36:	2001      	movs	r0, #1
 800fc38:	e7a5      	b.n	800fb86 <_vfiprintf_r+0x11a>
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	3401      	adds	r4, #1
 800fc3e:	9305      	str	r3, [sp, #20]
 800fc40:	4619      	mov	r1, r3
 800fc42:	f04f 0c0a 	mov.w	ip, #10
 800fc46:	4620      	mov	r0, r4
 800fc48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc4c:	3a30      	subs	r2, #48	; 0x30
 800fc4e:	2a09      	cmp	r2, #9
 800fc50:	d903      	bls.n	800fc5a <_vfiprintf_r+0x1ee>
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d0c5      	beq.n	800fbe2 <_vfiprintf_r+0x176>
 800fc56:	9105      	str	r1, [sp, #20]
 800fc58:	e7c3      	b.n	800fbe2 <_vfiprintf_r+0x176>
 800fc5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc5e:	4604      	mov	r4, r0
 800fc60:	2301      	movs	r3, #1
 800fc62:	e7f0      	b.n	800fc46 <_vfiprintf_r+0x1da>
 800fc64:	ab03      	add	r3, sp, #12
 800fc66:	9300      	str	r3, [sp, #0]
 800fc68:	462a      	mov	r2, r5
 800fc6a:	4b16      	ldr	r3, [pc, #88]	; (800fcc4 <_vfiprintf_r+0x258>)
 800fc6c:	a904      	add	r1, sp, #16
 800fc6e:	4630      	mov	r0, r6
 800fc70:	f3af 8000 	nop.w
 800fc74:	4607      	mov	r7, r0
 800fc76:	1c78      	adds	r0, r7, #1
 800fc78:	d1d6      	bne.n	800fc28 <_vfiprintf_r+0x1bc>
 800fc7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc7c:	07d9      	lsls	r1, r3, #31
 800fc7e:	d405      	bmi.n	800fc8c <_vfiprintf_r+0x220>
 800fc80:	89ab      	ldrh	r3, [r5, #12]
 800fc82:	059a      	lsls	r2, r3, #22
 800fc84:	d402      	bmi.n	800fc8c <_vfiprintf_r+0x220>
 800fc86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc88:	f7ff fec6 	bl	800fa18 <__retarget_lock_release_recursive>
 800fc8c:	89ab      	ldrh	r3, [r5, #12]
 800fc8e:	065b      	lsls	r3, r3, #25
 800fc90:	f53f af12 	bmi.w	800fab8 <_vfiprintf_r+0x4c>
 800fc94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc96:	e711      	b.n	800fabc <_vfiprintf_r+0x50>
 800fc98:	ab03      	add	r3, sp, #12
 800fc9a:	9300      	str	r3, [sp, #0]
 800fc9c:	462a      	mov	r2, r5
 800fc9e:	4b09      	ldr	r3, [pc, #36]	; (800fcc4 <_vfiprintf_r+0x258>)
 800fca0:	a904      	add	r1, sp, #16
 800fca2:	4630      	mov	r0, r6
 800fca4:	f000 f880 	bl	800fda8 <_printf_i>
 800fca8:	e7e4      	b.n	800fc74 <_vfiprintf_r+0x208>
 800fcaa:	bf00      	nop
 800fcac:	08012f6c 	.word	0x08012f6c
 800fcb0:	08012f8c 	.word	0x08012f8c
 800fcb4:	08012f4c 	.word	0x08012f4c
 800fcb8:	08012f16 	.word	0x08012f16
 800fcbc:	08012f20 	.word	0x08012f20
 800fcc0:	00000000 	.word	0x00000000
 800fcc4:	0800fa49 	.word	0x0800fa49
 800fcc8:	08012f1c 	.word	0x08012f1c

0800fccc <_printf_common>:
 800fccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcd0:	4616      	mov	r6, r2
 800fcd2:	4699      	mov	r9, r3
 800fcd4:	688a      	ldr	r2, [r1, #8]
 800fcd6:	690b      	ldr	r3, [r1, #16]
 800fcd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fcdc:	4293      	cmp	r3, r2
 800fcde:	bfb8      	it	lt
 800fce0:	4613      	movlt	r3, r2
 800fce2:	6033      	str	r3, [r6, #0]
 800fce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fce8:	4607      	mov	r7, r0
 800fcea:	460c      	mov	r4, r1
 800fcec:	b10a      	cbz	r2, 800fcf2 <_printf_common+0x26>
 800fcee:	3301      	adds	r3, #1
 800fcf0:	6033      	str	r3, [r6, #0]
 800fcf2:	6823      	ldr	r3, [r4, #0]
 800fcf4:	0699      	lsls	r1, r3, #26
 800fcf6:	bf42      	ittt	mi
 800fcf8:	6833      	ldrmi	r3, [r6, #0]
 800fcfa:	3302      	addmi	r3, #2
 800fcfc:	6033      	strmi	r3, [r6, #0]
 800fcfe:	6825      	ldr	r5, [r4, #0]
 800fd00:	f015 0506 	ands.w	r5, r5, #6
 800fd04:	d106      	bne.n	800fd14 <_printf_common+0x48>
 800fd06:	f104 0a19 	add.w	sl, r4, #25
 800fd0a:	68e3      	ldr	r3, [r4, #12]
 800fd0c:	6832      	ldr	r2, [r6, #0]
 800fd0e:	1a9b      	subs	r3, r3, r2
 800fd10:	42ab      	cmp	r3, r5
 800fd12:	dc26      	bgt.n	800fd62 <_printf_common+0x96>
 800fd14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fd18:	1e13      	subs	r3, r2, #0
 800fd1a:	6822      	ldr	r2, [r4, #0]
 800fd1c:	bf18      	it	ne
 800fd1e:	2301      	movne	r3, #1
 800fd20:	0692      	lsls	r2, r2, #26
 800fd22:	d42b      	bmi.n	800fd7c <_printf_common+0xb0>
 800fd24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd28:	4649      	mov	r1, r9
 800fd2a:	4638      	mov	r0, r7
 800fd2c:	47c0      	blx	r8
 800fd2e:	3001      	adds	r0, #1
 800fd30:	d01e      	beq.n	800fd70 <_printf_common+0xa4>
 800fd32:	6823      	ldr	r3, [r4, #0]
 800fd34:	68e5      	ldr	r5, [r4, #12]
 800fd36:	6832      	ldr	r2, [r6, #0]
 800fd38:	f003 0306 	and.w	r3, r3, #6
 800fd3c:	2b04      	cmp	r3, #4
 800fd3e:	bf08      	it	eq
 800fd40:	1aad      	subeq	r5, r5, r2
 800fd42:	68a3      	ldr	r3, [r4, #8]
 800fd44:	6922      	ldr	r2, [r4, #16]
 800fd46:	bf0c      	ite	eq
 800fd48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd4c:	2500      	movne	r5, #0
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	bfc4      	itt	gt
 800fd52:	1a9b      	subgt	r3, r3, r2
 800fd54:	18ed      	addgt	r5, r5, r3
 800fd56:	2600      	movs	r6, #0
 800fd58:	341a      	adds	r4, #26
 800fd5a:	42b5      	cmp	r5, r6
 800fd5c:	d11a      	bne.n	800fd94 <_printf_common+0xc8>
 800fd5e:	2000      	movs	r0, #0
 800fd60:	e008      	b.n	800fd74 <_printf_common+0xa8>
 800fd62:	2301      	movs	r3, #1
 800fd64:	4652      	mov	r2, sl
 800fd66:	4649      	mov	r1, r9
 800fd68:	4638      	mov	r0, r7
 800fd6a:	47c0      	blx	r8
 800fd6c:	3001      	adds	r0, #1
 800fd6e:	d103      	bne.n	800fd78 <_printf_common+0xac>
 800fd70:	f04f 30ff 	mov.w	r0, #4294967295
 800fd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd78:	3501      	adds	r5, #1
 800fd7a:	e7c6      	b.n	800fd0a <_printf_common+0x3e>
 800fd7c:	18e1      	adds	r1, r4, r3
 800fd7e:	1c5a      	adds	r2, r3, #1
 800fd80:	2030      	movs	r0, #48	; 0x30
 800fd82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd86:	4422      	add	r2, r4
 800fd88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd90:	3302      	adds	r3, #2
 800fd92:	e7c7      	b.n	800fd24 <_printf_common+0x58>
 800fd94:	2301      	movs	r3, #1
 800fd96:	4622      	mov	r2, r4
 800fd98:	4649      	mov	r1, r9
 800fd9a:	4638      	mov	r0, r7
 800fd9c:	47c0      	blx	r8
 800fd9e:	3001      	adds	r0, #1
 800fda0:	d0e6      	beq.n	800fd70 <_printf_common+0xa4>
 800fda2:	3601      	adds	r6, #1
 800fda4:	e7d9      	b.n	800fd5a <_printf_common+0x8e>
	...

0800fda8 <_printf_i>:
 800fda8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fdac:	460c      	mov	r4, r1
 800fdae:	4691      	mov	r9, r2
 800fdb0:	7e27      	ldrb	r7, [r4, #24]
 800fdb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fdb4:	2f78      	cmp	r7, #120	; 0x78
 800fdb6:	4680      	mov	r8, r0
 800fdb8:	469a      	mov	sl, r3
 800fdba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fdbe:	d807      	bhi.n	800fdd0 <_printf_i+0x28>
 800fdc0:	2f62      	cmp	r7, #98	; 0x62
 800fdc2:	d80a      	bhi.n	800fdda <_printf_i+0x32>
 800fdc4:	2f00      	cmp	r7, #0
 800fdc6:	f000 80d8 	beq.w	800ff7a <_printf_i+0x1d2>
 800fdca:	2f58      	cmp	r7, #88	; 0x58
 800fdcc:	f000 80a3 	beq.w	800ff16 <_printf_i+0x16e>
 800fdd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fdd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fdd8:	e03a      	b.n	800fe50 <_printf_i+0xa8>
 800fdda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fdde:	2b15      	cmp	r3, #21
 800fde0:	d8f6      	bhi.n	800fdd0 <_printf_i+0x28>
 800fde2:	a001      	add	r0, pc, #4	; (adr r0, 800fde8 <_printf_i+0x40>)
 800fde4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fde8:	0800fe41 	.word	0x0800fe41
 800fdec:	0800fe55 	.word	0x0800fe55
 800fdf0:	0800fdd1 	.word	0x0800fdd1
 800fdf4:	0800fdd1 	.word	0x0800fdd1
 800fdf8:	0800fdd1 	.word	0x0800fdd1
 800fdfc:	0800fdd1 	.word	0x0800fdd1
 800fe00:	0800fe55 	.word	0x0800fe55
 800fe04:	0800fdd1 	.word	0x0800fdd1
 800fe08:	0800fdd1 	.word	0x0800fdd1
 800fe0c:	0800fdd1 	.word	0x0800fdd1
 800fe10:	0800fdd1 	.word	0x0800fdd1
 800fe14:	0800ff61 	.word	0x0800ff61
 800fe18:	0800fe85 	.word	0x0800fe85
 800fe1c:	0800ff43 	.word	0x0800ff43
 800fe20:	0800fdd1 	.word	0x0800fdd1
 800fe24:	0800fdd1 	.word	0x0800fdd1
 800fe28:	0800ff83 	.word	0x0800ff83
 800fe2c:	0800fdd1 	.word	0x0800fdd1
 800fe30:	0800fe85 	.word	0x0800fe85
 800fe34:	0800fdd1 	.word	0x0800fdd1
 800fe38:	0800fdd1 	.word	0x0800fdd1
 800fe3c:	0800ff4b 	.word	0x0800ff4b
 800fe40:	680b      	ldr	r3, [r1, #0]
 800fe42:	1d1a      	adds	r2, r3, #4
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	600a      	str	r2, [r1, #0]
 800fe48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fe4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe50:	2301      	movs	r3, #1
 800fe52:	e0a3      	b.n	800ff9c <_printf_i+0x1f4>
 800fe54:	6825      	ldr	r5, [r4, #0]
 800fe56:	6808      	ldr	r0, [r1, #0]
 800fe58:	062e      	lsls	r6, r5, #24
 800fe5a:	f100 0304 	add.w	r3, r0, #4
 800fe5e:	d50a      	bpl.n	800fe76 <_printf_i+0xce>
 800fe60:	6805      	ldr	r5, [r0, #0]
 800fe62:	600b      	str	r3, [r1, #0]
 800fe64:	2d00      	cmp	r5, #0
 800fe66:	da03      	bge.n	800fe70 <_printf_i+0xc8>
 800fe68:	232d      	movs	r3, #45	; 0x2d
 800fe6a:	426d      	negs	r5, r5
 800fe6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe70:	485e      	ldr	r0, [pc, #376]	; (800ffec <_printf_i+0x244>)
 800fe72:	230a      	movs	r3, #10
 800fe74:	e019      	b.n	800feaa <_printf_i+0x102>
 800fe76:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fe7a:	6805      	ldr	r5, [r0, #0]
 800fe7c:	600b      	str	r3, [r1, #0]
 800fe7e:	bf18      	it	ne
 800fe80:	b22d      	sxthne	r5, r5
 800fe82:	e7ef      	b.n	800fe64 <_printf_i+0xbc>
 800fe84:	680b      	ldr	r3, [r1, #0]
 800fe86:	6825      	ldr	r5, [r4, #0]
 800fe88:	1d18      	adds	r0, r3, #4
 800fe8a:	6008      	str	r0, [r1, #0]
 800fe8c:	0628      	lsls	r0, r5, #24
 800fe8e:	d501      	bpl.n	800fe94 <_printf_i+0xec>
 800fe90:	681d      	ldr	r5, [r3, #0]
 800fe92:	e002      	b.n	800fe9a <_printf_i+0xf2>
 800fe94:	0669      	lsls	r1, r5, #25
 800fe96:	d5fb      	bpl.n	800fe90 <_printf_i+0xe8>
 800fe98:	881d      	ldrh	r5, [r3, #0]
 800fe9a:	4854      	ldr	r0, [pc, #336]	; (800ffec <_printf_i+0x244>)
 800fe9c:	2f6f      	cmp	r7, #111	; 0x6f
 800fe9e:	bf0c      	ite	eq
 800fea0:	2308      	moveq	r3, #8
 800fea2:	230a      	movne	r3, #10
 800fea4:	2100      	movs	r1, #0
 800fea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800feaa:	6866      	ldr	r6, [r4, #4]
 800feac:	60a6      	str	r6, [r4, #8]
 800feae:	2e00      	cmp	r6, #0
 800feb0:	bfa2      	ittt	ge
 800feb2:	6821      	ldrge	r1, [r4, #0]
 800feb4:	f021 0104 	bicge.w	r1, r1, #4
 800feb8:	6021      	strge	r1, [r4, #0]
 800feba:	b90d      	cbnz	r5, 800fec0 <_printf_i+0x118>
 800febc:	2e00      	cmp	r6, #0
 800febe:	d04d      	beq.n	800ff5c <_printf_i+0x1b4>
 800fec0:	4616      	mov	r6, r2
 800fec2:	fbb5 f1f3 	udiv	r1, r5, r3
 800fec6:	fb03 5711 	mls	r7, r3, r1, r5
 800feca:	5dc7      	ldrb	r7, [r0, r7]
 800fecc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fed0:	462f      	mov	r7, r5
 800fed2:	42bb      	cmp	r3, r7
 800fed4:	460d      	mov	r5, r1
 800fed6:	d9f4      	bls.n	800fec2 <_printf_i+0x11a>
 800fed8:	2b08      	cmp	r3, #8
 800feda:	d10b      	bne.n	800fef4 <_printf_i+0x14c>
 800fedc:	6823      	ldr	r3, [r4, #0]
 800fede:	07df      	lsls	r7, r3, #31
 800fee0:	d508      	bpl.n	800fef4 <_printf_i+0x14c>
 800fee2:	6923      	ldr	r3, [r4, #16]
 800fee4:	6861      	ldr	r1, [r4, #4]
 800fee6:	4299      	cmp	r1, r3
 800fee8:	bfde      	ittt	le
 800feea:	2330      	movle	r3, #48	; 0x30
 800feec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fef0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fef4:	1b92      	subs	r2, r2, r6
 800fef6:	6122      	str	r2, [r4, #16]
 800fef8:	f8cd a000 	str.w	sl, [sp]
 800fefc:	464b      	mov	r3, r9
 800fefe:	aa03      	add	r2, sp, #12
 800ff00:	4621      	mov	r1, r4
 800ff02:	4640      	mov	r0, r8
 800ff04:	f7ff fee2 	bl	800fccc <_printf_common>
 800ff08:	3001      	adds	r0, #1
 800ff0a:	d14c      	bne.n	800ffa6 <_printf_i+0x1fe>
 800ff0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff10:	b004      	add	sp, #16
 800ff12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff16:	4835      	ldr	r0, [pc, #212]	; (800ffec <_printf_i+0x244>)
 800ff18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ff1c:	6823      	ldr	r3, [r4, #0]
 800ff1e:	680e      	ldr	r6, [r1, #0]
 800ff20:	061f      	lsls	r7, r3, #24
 800ff22:	f856 5b04 	ldr.w	r5, [r6], #4
 800ff26:	600e      	str	r6, [r1, #0]
 800ff28:	d514      	bpl.n	800ff54 <_printf_i+0x1ac>
 800ff2a:	07d9      	lsls	r1, r3, #31
 800ff2c:	bf44      	itt	mi
 800ff2e:	f043 0320 	orrmi.w	r3, r3, #32
 800ff32:	6023      	strmi	r3, [r4, #0]
 800ff34:	b91d      	cbnz	r5, 800ff3e <_printf_i+0x196>
 800ff36:	6823      	ldr	r3, [r4, #0]
 800ff38:	f023 0320 	bic.w	r3, r3, #32
 800ff3c:	6023      	str	r3, [r4, #0]
 800ff3e:	2310      	movs	r3, #16
 800ff40:	e7b0      	b.n	800fea4 <_printf_i+0xfc>
 800ff42:	6823      	ldr	r3, [r4, #0]
 800ff44:	f043 0320 	orr.w	r3, r3, #32
 800ff48:	6023      	str	r3, [r4, #0]
 800ff4a:	2378      	movs	r3, #120	; 0x78
 800ff4c:	4828      	ldr	r0, [pc, #160]	; (800fff0 <_printf_i+0x248>)
 800ff4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff52:	e7e3      	b.n	800ff1c <_printf_i+0x174>
 800ff54:	065e      	lsls	r6, r3, #25
 800ff56:	bf48      	it	mi
 800ff58:	b2ad      	uxthmi	r5, r5
 800ff5a:	e7e6      	b.n	800ff2a <_printf_i+0x182>
 800ff5c:	4616      	mov	r6, r2
 800ff5e:	e7bb      	b.n	800fed8 <_printf_i+0x130>
 800ff60:	680b      	ldr	r3, [r1, #0]
 800ff62:	6826      	ldr	r6, [r4, #0]
 800ff64:	6960      	ldr	r0, [r4, #20]
 800ff66:	1d1d      	adds	r5, r3, #4
 800ff68:	600d      	str	r5, [r1, #0]
 800ff6a:	0635      	lsls	r5, r6, #24
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	d501      	bpl.n	800ff74 <_printf_i+0x1cc>
 800ff70:	6018      	str	r0, [r3, #0]
 800ff72:	e002      	b.n	800ff7a <_printf_i+0x1d2>
 800ff74:	0671      	lsls	r1, r6, #25
 800ff76:	d5fb      	bpl.n	800ff70 <_printf_i+0x1c8>
 800ff78:	8018      	strh	r0, [r3, #0]
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	6123      	str	r3, [r4, #16]
 800ff7e:	4616      	mov	r6, r2
 800ff80:	e7ba      	b.n	800fef8 <_printf_i+0x150>
 800ff82:	680b      	ldr	r3, [r1, #0]
 800ff84:	1d1a      	adds	r2, r3, #4
 800ff86:	600a      	str	r2, [r1, #0]
 800ff88:	681e      	ldr	r6, [r3, #0]
 800ff8a:	6862      	ldr	r2, [r4, #4]
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	4630      	mov	r0, r6
 800ff90:	f7f0 f936 	bl	8000200 <memchr>
 800ff94:	b108      	cbz	r0, 800ff9a <_printf_i+0x1f2>
 800ff96:	1b80      	subs	r0, r0, r6
 800ff98:	6060      	str	r0, [r4, #4]
 800ff9a:	6863      	ldr	r3, [r4, #4]
 800ff9c:	6123      	str	r3, [r4, #16]
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffa4:	e7a8      	b.n	800fef8 <_printf_i+0x150>
 800ffa6:	6923      	ldr	r3, [r4, #16]
 800ffa8:	4632      	mov	r2, r6
 800ffaa:	4649      	mov	r1, r9
 800ffac:	4640      	mov	r0, r8
 800ffae:	47d0      	blx	sl
 800ffb0:	3001      	adds	r0, #1
 800ffb2:	d0ab      	beq.n	800ff0c <_printf_i+0x164>
 800ffb4:	6823      	ldr	r3, [r4, #0]
 800ffb6:	079b      	lsls	r3, r3, #30
 800ffb8:	d413      	bmi.n	800ffe2 <_printf_i+0x23a>
 800ffba:	68e0      	ldr	r0, [r4, #12]
 800ffbc:	9b03      	ldr	r3, [sp, #12]
 800ffbe:	4298      	cmp	r0, r3
 800ffc0:	bfb8      	it	lt
 800ffc2:	4618      	movlt	r0, r3
 800ffc4:	e7a4      	b.n	800ff10 <_printf_i+0x168>
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	4632      	mov	r2, r6
 800ffca:	4649      	mov	r1, r9
 800ffcc:	4640      	mov	r0, r8
 800ffce:	47d0      	blx	sl
 800ffd0:	3001      	adds	r0, #1
 800ffd2:	d09b      	beq.n	800ff0c <_printf_i+0x164>
 800ffd4:	3501      	adds	r5, #1
 800ffd6:	68e3      	ldr	r3, [r4, #12]
 800ffd8:	9903      	ldr	r1, [sp, #12]
 800ffda:	1a5b      	subs	r3, r3, r1
 800ffdc:	42ab      	cmp	r3, r5
 800ffde:	dcf2      	bgt.n	800ffc6 <_printf_i+0x21e>
 800ffe0:	e7eb      	b.n	800ffba <_printf_i+0x212>
 800ffe2:	2500      	movs	r5, #0
 800ffe4:	f104 0619 	add.w	r6, r4, #25
 800ffe8:	e7f5      	b.n	800ffd6 <_printf_i+0x22e>
 800ffea:	bf00      	nop
 800ffec:	08012f27 	.word	0x08012f27
 800fff0:	08012f38 	.word	0x08012f38

0800fff4 <__swbuf_r>:
 800fff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff6:	460e      	mov	r6, r1
 800fff8:	4614      	mov	r4, r2
 800fffa:	4605      	mov	r5, r0
 800fffc:	b118      	cbz	r0, 8010006 <__swbuf_r+0x12>
 800fffe:	6983      	ldr	r3, [r0, #24]
 8010000:	b90b      	cbnz	r3, 8010006 <__swbuf_r+0x12>
 8010002:	f000 f9d9 	bl	80103b8 <__sinit>
 8010006:	4b21      	ldr	r3, [pc, #132]	; (801008c <__swbuf_r+0x98>)
 8010008:	429c      	cmp	r4, r3
 801000a:	d12b      	bne.n	8010064 <__swbuf_r+0x70>
 801000c:	686c      	ldr	r4, [r5, #4]
 801000e:	69a3      	ldr	r3, [r4, #24]
 8010010:	60a3      	str	r3, [r4, #8]
 8010012:	89a3      	ldrh	r3, [r4, #12]
 8010014:	071a      	lsls	r2, r3, #28
 8010016:	d52f      	bpl.n	8010078 <__swbuf_r+0x84>
 8010018:	6923      	ldr	r3, [r4, #16]
 801001a:	b36b      	cbz	r3, 8010078 <__swbuf_r+0x84>
 801001c:	6923      	ldr	r3, [r4, #16]
 801001e:	6820      	ldr	r0, [r4, #0]
 8010020:	1ac0      	subs	r0, r0, r3
 8010022:	6963      	ldr	r3, [r4, #20]
 8010024:	b2f6      	uxtb	r6, r6
 8010026:	4283      	cmp	r3, r0
 8010028:	4637      	mov	r7, r6
 801002a:	dc04      	bgt.n	8010036 <__swbuf_r+0x42>
 801002c:	4621      	mov	r1, r4
 801002e:	4628      	mov	r0, r5
 8010030:	f000 f92e 	bl	8010290 <_fflush_r>
 8010034:	bb30      	cbnz	r0, 8010084 <__swbuf_r+0x90>
 8010036:	68a3      	ldr	r3, [r4, #8]
 8010038:	3b01      	subs	r3, #1
 801003a:	60a3      	str	r3, [r4, #8]
 801003c:	6823      	ldr	r3, [r4, #0]
 801003e:	1c5a      	adds	r2, r3, #1
 8010040:	6022      	str	r2, [r4, #0]
 8010042:	701e      	strb	r6, [r3, #0]
 8010044:	6963      	ldr	r3, [r4, #20]
 8010046:	3001      	adds	r0, #1
 8010048:	4283      	cmp	r3, r0
 801004a:	d004      	beq.n	8010056 <__swbuf_r+0x62>
 801004c:	89a3      	ldrh	r3, [r4, #12]
 801004e:	07db      	lsls	r3, r3, #31
 8010050:	d506      	bpl.n	8010060 <__swbuf_r+0x6c>
 8010052:	2e0a      	cmp	r6, #10
 8010054:	d104      	bne.n	8010060 <__swbuf_r+0x6c>
 8010056:	4621      	mov	r1, r4
 8010058:	4628      	mov	r0, r5
 801005a:	f000 f919 	bl	8010290 <_fflush_r>
 801005e:	b988      	cbnz	r0, 8010084 <__swbuf_r+0x90>
 8010060:	4638      	mov	r0, r7
 8010062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010064:	4b0a      	ldr	r3, [pc, #40]	; (8010090 <__swbuf_r+0x9c>)
 8010066:	429c      	cmp	r4, r3
 8010068:	d101      	bne.n	801006e <__swbuf_r+0x7a>
 801006a:	68ac      	ldr	r4, [r5, #8]
 801006c:	e7cf      	b.n	801000e <__swbuf_r+0x1a>
 801006e:	4b09      	ldr	r3, [pc, #36]	; (8010094 <__swbuf_r+0xa0>)
 8010070:	429c      	cmp	r4, r3
 8010072:	bf08      	it	eq
 8010074:	68ec      	ldreq	r4, [r5, #12]
 8010076:	e7ca      	b.n	801000e <__swbuf_r+0x1a>
 8010078:	4621      	mov	r1, r4
 801007a:	4628      	mov	r0, r5
 801007c:	f000 f80c 	bl	8010098 <__swsetup_r>
 8010080:	2800      	cmp	r0, #0
 8010082:	d0cb      	beq.n	801001c <__swbuf_r+0x28>
 8010084:	f04f 37ff 	mov.w	r7, #4294967295
 8010088:	e7ea      	b.n	8010060 <__swbuf_r+0x6c>
 801008a:	bf00      	nop
 801008c:	08012f6c 	.word	0x08012f6c
 8010090:	08012f8c 	.word	0x08012f8c
 8010094:	08012f4c 	.word	0x08012f4c

08010098 <__swsetup_r>:
 8010098:	4b32      	ldr	r3, [pc, #200]	; (8010164 <__swsetup_r+0xcc>)
 801009a:	b570      	push	{r4, r5, r6, lr}
 801009c:	681d      	ldr	r5, [r3, #0]
 801009e:	4606      	mov	r6, r0
 80100a0:	460c      	mov	r4, r1
 80100a2:	b125      	cbz	r5, 80100ae <__swsetup_r+0x16>
 80100a4:	69ab      	ldr	r3, [r5, #24]
 80100a6:	b913      	cbnz	r3, 80100ae <__swsetup_r+0x16>
 80100a8:	4628      	mov	r0, r5
 80100aa:	f000 f985 	bl	80103b8 <__sinit>
 80100ae:	4b2e      	ldr	r3, [pc, #184]	; (8010168 <__swsetup_r+0xd0>)
 80100b0:	429c      	cmp	r4, r3
 80100b2:	d10f      	bne.n	80100d4 <__swsetup_r+0x3c>
 80100b4:	686c      	ldr	r4, [r5, #4]
 80100b6:	89a3      	ldrh	r3, [r4, #12]
 80100b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100bc:	0719      	lsls	r1, r3, #28
 80100be:	d42c      	bmi.n	801011a <__swsetup_r+0x82>
 80100c0:	06dd      	lsls	r5, r3, #27
 80100c2:	d411      	bmi.n	80100e8 <__swsetup_r+0x50>
 80100c4:	2309      	movs	r3, #9
 80100c6:	6033      	str	r3, [r6, #0]
 80100c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80100cc:	81a3      	strh	r3, [r4, #12]
 80100ce:	f04f 30ff 	mov.w	r0, #4294967295
 80100d2:	e03e      	b.n	8010152 <__swsetup_r+0xba>
 80100d4:	4b25      	ldr	r3, [pc, #148]	; (801016c <__swsetup_r+0xd4>)
 80100d6:	429c      	cmp	r4, r3
 80100d8:	d101      	bne.n	80100de <__swsetup_r+0x46>
 80100da:	68ac      	ldr	r4, [r5, #8]
 80100dc:	e7eb      	b.n	80100b6 <__swsetup_r+0x1e>
 80100de:	4b24      	ldr	r3, [pc, #144]	; (8010170 <__swsetup_r+0xd8>)
 80100e0:	429c      	cmp	r4, r3
 80100e2:	bf08      	it	eq
 80100e4:	68ec      	ldreq	r4, [r5, #12]
 80100e6:	e7e6      	b.n	80100b6 <__swsetup_r+0x1e>
 80100e8:	0758      	lsls	r0, r3, #29
 80100ea:	d512      	bpl.n	8010112 <__swsetup_r+0x7a>
 80100ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100ee:	b141      	cbz	r1, 8010102 <__swsetup_r+0x6a>
 80100f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100f4:	4299      	cmp	r1, r3
 80100f6:	d002      	beq.n	80100fe <__swsetup_r+0x66>
 80100f8:	4630      	mov	r0, r6
 80100fa:	f7fe f821 	bl	800e140 <_free_r>
 80100fe:	2300      	movs	r3, #0
 8010100:	6363      	str	r3, [r4, #52]	; 0x34
 8010102:	89a3      	ldrh	r3, [r4, #12]
 8010104:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010108:	81a3      	strh	r3, [r4, #12]
 801010a:	2300      	movs	r3, #0
 801010c:	6063      	str	r3, [r4, #4]
 801010e:	6923      	ldr	r3, [r4, #16]
 8010110:	6023      	str	r3, [r4, #0]
 8010112:	89a3      	ldrh	r3, [r4, #12]
 8010114:	f043 0308 	orr.w	r3, r3, #8
 8010118:	81a3      	strh	r3, [r4, #12]
 801011a:	6923      	ldr	r3, [r4, #16]
 801011c:	b94b      	cbnz	r3, 8010132 <__swsetup_r+0x9a>
 801011e:	89a3      	ldrh	r3, [r4, #12]
 8010120:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010128:	d003      	beq.n	8010132 <__swsetup_r+0x9a>
 801012a:	4621      	mov	r1, r4
 801012c:	4630      	mov	r0, r6
 801012e:	f000 fa05 	bl	801053c <__smakebuf_r>
 8010132:	89a0      	ldrh	r0, [r4, #12]
 8010134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010138:	f010 0301 	ands.w	r3, r0, #1
 801013c:	d00a      	beq.n	8010154 <__swsetup_r+0xbc>
 801013e:	2300      	movs	r3, #0
 8010140:	60a3      	str	r3, [r4, #8]
 8010142:	6963      	ldr	r3, [r4, #20]
 8010144:	425b      	negs	r3, r3
 8010146:	61a3      	str	r3, [r4, #24]
 8010148:	6923      	ldr	r3, [r4, #16]
 801014a:	b943      	cbnz	r3, 801015e <__swsetup_r+0xc6>
 801014c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010150:	d1ba      	bne.n	80100c8 <__swsetup_r+0x30>
 8010152:	bd70      	pop	{r4, r5, r6, pc}
 8010154:	0781      	lsls	r1, r0, #30
 8010156:	bf58      	it	pl
 8010158:	6963      	ldrpl	r3, [r4, #20]
 801015a:	60a3      	str	r3, [r4, #8]
 801015c:	e7f4      	b.n	8010148 <__swsetup_r+0xb0>
 801015e:	2000      	movs	r0, #0
 8010160:	e7f7      	b.n	8010152 <__swsetup_r+0xba>
 8010162:	bf00      	nop
 8010164:	20000040 	.word	0x20000040
 8010168:	08012f6c 	.word	0x08012f6c
 801016c:	08012f8c 	.word	0x08012f8c
 8010170:	08012f4c 	.word	0x08012f4c

08010174 <abort>:
 8010174:	b508      	push	{r3, lr}
 8010176:	2006      	movs	r0, #6
 8010178:	f000 fa48 	bl	801060c <raise>
 801017c:	2001      	movs	r0, #1
 801017e:	f7f2 fba5 	bl	80028cc <_exit>
	...

08010184 <__sflush_r>:
 8010184:	898a      	ldrh	r2, [r1, #12]
 8010186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801018a:	4605      	mov	r5, r0
 801018c:	0710      	lsls	r0, r2, #28
 801018e:	460c      	mov	r4, r1
 8010190:	d458      	bmi.n	8010244 <__sflush_r+0xc0>
 8010192:	684b      	ldr	r3, [r1, #4]
 8010194:	2b00      	cmp	r3, #0
 8010196:	dc05      	bgt.n	80101a4 <__sflush_r+0x20>
 8010198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801019a:	2b00      	cmp	r3, #0
 801019c:	dc02      	bgt.n	80101a4 <__sflush_r+0x20>
 801019e:	2000      	movs	r0, #0
 80101a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101a6:	2e00      	cmp	r6, #0
 80101a8:	d0f9      	beq.n	801019e <__sflush_r+0x1a>
 80101aa:	2300      	movs	r3, #0
 80101ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80101b0:	682f      	ldr	r7, [r5, #0]
 80101b2:	602b      	str	r3, [r5, #0]
 80101b4:	d032      	beq.n	801021c <__sflush_r+0x98>
 80101b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80101b8:	89a3      	ldrh	r3, [r4, #12]
 80101ba:	075a      	lsls	r2, r3, #29
 80101bc:	d505      	bpl.n	80101ca <__sflush_r+0x46>
 80101be:	6863      	ldr	r3, [r4, #4]
 80101c0:	1ac0      	subs	r0, r0, r3
 80101c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101c4:	b10b      	cbz	r3, 80101ca <__sflush_r+0x46>
 80101c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80101c8:	1ac0      	subs	r0, r0, r3
 80101ca:	2300      	movs	r3, #0
 80101cc:	4602      	mov	r2, r0
 80101ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101d0:	6a21      	ldr	r1, [r4, #32]
 80101d2:	4628      	mov	r0, r5
 80101d4:	47b0      	blx	r6
 80101d6:	1c43      	adds	r3, r0, #1
 80101d8:	89a3      	ldrh	r3, [r4, #12]
 80101da:	d106      	bne.n	80101ea <__sflush_r+0x66>
 80101dc:	6829      	ldr	r1, [r5, #0]
 80101de:	291d      	cmp	r1, #29
 80101e0:	d82c      	bhi.n	801023c <__sflush_r+0xb8>
 80101e2:	4a2a      	ldr	r2, [pc, #168]	; (801028c <__sflush_r+0x108>)
 80101e4:	40ca      	lsrs	r2, r1
 80101e6:	07d6      	lsls	r6, r2, #31
 80101e8:	d528      	bpl.n	801023c <__sflush_r+0xb8>
 80101ea:	2200      	movs	r2, #0
 80101ec:	6062      	str	r2, [r4, #4]
 80101ee:	04d9      	lsls	r1, r3, #19
 80101f0:	6922      	ldr	r2, [r4, #16]
 80101f2:	6022      	str	r2, [r4, #0]
 80101f4:	d504      	bpl.n	8010200 <__sflush_r+0x7c>
 80101f6:	1c42      	adds	r2, r0, #1
 80101f8:	d101      	bne.n	80101fe <__sflush_r+0x7a>
 80101fa:	682b      	ldr	r3, [r5, #0]
 80101fc:	b903      	cbnz	r3, 8010200 <__sflush_r+0x7c>
 80101fe:	6560      	str	r0, [r4, #84]	; 0x54
 8010200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010202:	602f      	str	r7, [r5, #0]
 8010204:	2900      	cmp	r1, #0
 8010206:	d0ca      	beq.n	801019e <__sflush_r+0x1a>
 8010208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801020c:	4299      	cmp	r1, r3
 801020e:	d002      	beq.n	8010216 <__sflush_r+0x92>
 8010210:	4628      	mov	r0, r5
 8010212:	f7fd ff95 	bl	800e140 <_free_r>
 8010216:	2000      	movs	r0, #0
 8010218:	6360      	str	r0, [r4, #52]	; 0x34
 801021a:	e7c1      	b.n	80101a0 <__sflush_r+0x1c>
 801021c:	6a21      	ldr	r1, [r4, #32]
 801021e:	2301      	movs	r3, #1
 8010220:	4628      	mov	r0, r5
 8010222:	47b0      	blx	r6
 8010224:	1c41      	adds	r1, r0, #1
 8010226:	d1c7      	bne.n	80101b8 <__sflush_r+0x34>
 8010228:	682b      	ldr	r3, [r5, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d0c4      	beq.n	80101b8 <__sflush_r+0x34>
 801022e:	2b1d      	cmp	r3, #29
 8010230:	d001      	beq.n	8010236 <__sflush_r+0xb2>
 8010232:	2b16      	cmp	r3, #22
 8010234:	d101      	bne.n	801023a <__sflush_r+0xb6>
 8010236:	602f      	str	r7, [r5, #0]
 8010238:	e7b1      	b.n	801019e <__sflush_r+0x1a>
 801023a:	89a3      	ldrh	r3, [r4, #12]
 801023c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010240:	81a3      	strh	r3, [r4, #12]
 8010242:	e7ad      	b.n	80101a0 <__sflush_r+0x1c>
 8010244:	690f      	ldr	r7, [r1, #16]
 8010246:	2f00      	cmp	r7, #0
 8010248:	d0a9      	beq.n	801019e <__sflush_r+0x1a>
 801024a:	0793      	lsls	r3, r2, #30
 801024c:	680e      	ldr	r6, [r1, #0]
 801024e:	bf08      	it	eq
 8010250:	694b      	ldreq	r3, [r1, #20]
 8010252:	600f      	str	r7, [r1, #0]
 8010254:	bf18      	it	ne
 8010256:	2300      	movne	r3, #0
 8010258:	eba6 0807 	sub.w	r8, r6, r7
 801025c:	608b      	str	r3, [r1, #8]
 801025e:	f1b8 0f00 	cmp.w	r8, #0
 8010262:	dd9c      	ble.n	801019e <__sflush_r+0x1a>
 8010264:	6a21      	ldr	r1, [r4, #32]
 8010266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010268:	4643      	mov	r3, r8
 801026a:	463a      	mov	r2, r7
 801026c:	4628      	mov	r0, r5
 801026e:	47b0      	blx	r6
 8010270:	2800      	cmp	r0, #0
 8010272:	dc06      	bgt.n	8010282 <__sflush_r+0xfe>
 8010274:	89a3      	ldrh	r3, [r4, #12]
 8010276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801027a:	81a3      	strh	r3, [r4, #12]
 801027c:	f04f 30ff 	mov.w	r0, #4294967295
 8010280:	e78e      	b.n	80101a0 <__sflush_r+0x1c>
 8010282:	4407      	add	r7, r0
 8010284:	eba8 0800 	sub.w	r8, r8, r0
 8010288:	e7e9      	b.n	801025e <__sflush_r+0xda>
 801028a:	bf00      	nop
 801028c:	20400001 	.word	0x20400001

08010290 <_fflush_r>:
 8010290:	b538      	push	{r3, r4, r5, lr}
 8010292:	690b      	ldr	r3, [r1, #16]
 8010294:	4605      	mov	r5, r0
 8010296:	460c      	mov	r4, r1
 8010298:	b913      	cbnz	r3, 80102a0 <_fflush_r+0x10>
 801029a:	2500      	movs	r5, #0
 801029c:	4628      	mov	r0, r5
 801029e:	bd38      	pop	{r3, r4, r5, pc}
 80102a0:	b118      	cbz	r0, 80102aa <_fflush_r+0x1a>
 80102a2:	6983      	ldr	r3, [r0, #24]
 80102a4:	b90b      	cbnz	r3, 80102aa <_fflush_r+0x1a>
 80102a6:	f000 f887 	bl	80103b8 <__sinit>
 80102aa:	4b14      	ldr	r3, [pc, #80]	; (80102fc <_fflush_r+0x6c>)
 80102ac:	429c      	cmp	r4, r3
 80102ae:	d11b      	bne.n	80102e8 <_fflush_r+0x58>
 80102b0:	686c      	ldr	r4, [r5, #4]
 80102b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d0ef      	beq.n	801029a <_fflush_r+0xa>
 80102ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80102bc:	07d0      	lsls	r0, r2, #31
 80102be:	d404      	bmi.n	80102ca <_fflush_r+0x3a>
 80102c0:	0599      	lsls	r1, r3, #22
 80102c2:	d402      	bmi.n	80102ca <_fflush_r+0x3a>
 80102c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102c6:	f7ff fba6 	bl	800fa16 <__retarget_lock_acquire_recursive>
 80102ca:	4628      	mov	r0, r5
 80102cc:	4621      	mov	r1, r4
 80102ce:	f7ff ff59 	bl	8010184 <__sflush_r>
 80102d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102d4:	07da      	lsls	r2, r3, #31
 80102d6:	4605      	mov	r5, r0
 80102d8:	d4e0      	bmi.n	801029c <_fflush_r+0xc>
 80102da:	89a3      	ldrh	r3, [r4, #12]
 80102dc:	059b      	lsls	r3, r3, #22
 80102de:	d4dd      	bmi.n	801029c <_fflush_r+0xc>
 80102e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102e2:	f7ff fb99 	bl	800fa18 <__retarget_lock_release_recursive>
 80102e6:	e7d9      	b.n	801029c <_fflush_r+0xc>
 80102e8:	4b05      	ldr	r3, [pc, #20]	; (8010300 <_fflush_r+0x70>)
 80102ea:	429c      	cmp	r4, r3
 80102ec:	d101      	bne.n	80102f2 <_fflush_r+0x62>
 80102ee:	68ac      	ldr	r4, [r5, #8]
 80102f0:	e7df      	b.n	80102b2 <_fflush_r+0x22>
 80102f2:	4b04      	ldr	r3, [pc, #16]	; (8010304 <_fflush_r+0x74>)
 80102f4:	429c      	cmp	r4, r3
 80102f6:	bf08      	it	eq
 80102f8:	68ec      	ldreq	r4, [r5, #12]
 80102fa:	e7da      	b.n	80102b2 <_fflush_r+0x22>
 80102fc:	08012f6c 	.word	0x08012f6c
 8010300:	08012f8c 	.word	0x08012f8c
 8010304:	08012f4c 	.word	0x08012f4c

08010308 <std>:
 8010308:	2300      	movs	r3, #0
 801030a:	b510      	push	{r4, lr}
 801030c:	4604      	mov	r4, r0
 801030e:	e9c0 3300 	strd	r3, r3, [r0]
 8010312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010316:	6083      	str	r3, [r0, #8]
 8010318:	8181      	strh	r1, [r0, #12]
 801031a:	6643      	str	r3, [r0, #100]	; 0x64
 801031c:	81c2      	strh	r2, [r0, #14]
 801031e:	6183      	str	r3, [r0, #24]
 8010320:	4619      	mov	r1, r3
 8010322:	2208      	movs	r2, #8
 8010324:	305c      	adds	r0, #92	; 0x5c
 8010326:	f7fd ff03 	bl	800e130 <memset>
 801032a:	4b05      	ldr	r3, [pc, #20]	; (8010340 <std+0x38>)
 801032c:	6263      	str	r3, [r4, #36]	; 0x24
 801032e:	4b05      	ldr	r3, [pc, #20]	; (8010344 <std+0x3c>)
 8010330:	62a3      	str	r3, [r4, #40]	; 0x28
 8010332:	4b05      	ldr	r3, [pc, #20]	; (8010348 <std+0x40>)
 8010334:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010336:	4b05      	ldr	r3, [pc, #20]	; (801034c <std+0x44>)
 8010338:	6224      	str	r4, [r4, #32]
 801033a:	6323      	str	r3, [r4, #48]	; 0x30
 801033c:	bd10      	pop	{r4, pc}
 801033e:	bf00      	nop
 8010340:	08010645 	.word	0x08010645
 8010344:	08010667 	.word	0x08010667
 8010348:	0801069f 	.word	0x0801069f
 801034c:	080106c3 	.word	0x080106c3

08010350 <_cleanup_r>:
 8010350:	4901      	ldr	r1, [pc, #4]	; (8010358 <_cleanup_r+0x8>)
 8010352:	f000 b8af 	b.w	80104b4 <_fwalk_reent>
 8010356:	bf00      	nop
 8010358:	08010291 	.word	0x08010291

0801035c <__sfmoreglue>:
 801035c:	b570      	push	{r4, r5, r6, lr}
 801035e:	1e4a      	subs	r2, r1, #1
 8010360:	2568      	movs	r5, #104	; 0x68
 8010362:	4355      	muls	r5, r2
 8010364:	460e      	mov	r6, r1
 8010366:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801036a:	f7fd ff39 	bl	800e1e0 <_malloc_r>
 801036e:	4604      	mov	r4, r0
 8010370:	b140      	cbz	r0, 8010384 <__sfmoreglue+0x28>
 8010372:	2100      	movs	r1, #0
 8010374:	e9c0 1600 	strd	r1, r6, [r0]
 8010378:	300c      	adds	r0, #12
 801037a:	60a0      	str	r0, [r4, #8]
 801037c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010380:	f7fd fed6 	bl	800e130 <memset>
 8010384:	4620      	mov	r0, r4
 8010386:	bd70      	pop	{r4, r5, r6, pc}

08010388 <__sfp_lock_acquire>:
 8010388:	4801      	ldr	r0, [pc, #4]	; (8010390 <__sfp_lock_acquire+0x8>)
 801038a:	f7ff bb44 	b.w	800fa16 <__retarget_lock_acquire_recursive>
 801038e:	bf00      	nop
 8010390:	20008be0 	.word	0x20008be0

08010394 <__sfp_lock_release>:
 8010394:	4801      	ldr	r0, [pc, #4]	; (801039c <__sfp_lock_release+0x8>)
 8010396:	f7ff bb3f 	b.w	800fa18 <__retarget_lock_release_recursive>
 801039a:	bf00      	nop
 801039c:	20008be0 	.word	0x20008be0

080103a0 <__sinit_lock_acquire>:
 80103a0:	4801      	ldr	r0, [pc, #4]	; (80103a8 <__sinit_lock_acquire+0x8>)
 80103a2:	f7ff bb38 	b.w	800fa16 <__retarget_lock_acquire_recursive>
 80103a6:	bf00      	nop
 80103a8:	20008bdb 	.word	0x20008bdb

080103ac <__sinit_lock_release>:
 80103ac:	4801      	ldr	r0, [pc, #4]	; (80103b4 <__sinit_lock_release+0x8>)
 80103ae:	f7ff bb33 	b.w	800fa18 <__retarget_lock_release_recursive>
 80103b2:	bf00      	nop
 80103b4:	20008bdb 	.word	0x20008bdb

080103b8 <__sinit>:
 80103b8:	b510      	push	{r4, lr}
 80103ba:	4604      	mov	r4, r0
 80103bc:	f7ff fff0 	bl	80103a0 <__sinit_lock_acquire>
 80103c0:	69a3      	ldr	r3, [r4, #24]
 80103c2:	b11b      	cbz	r3, 80103cc <__sinit+0x14>
 80103c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103c8:	f7ff bff0 	b.w	80103ac <__sinit_lock_release>
 80103cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80103d0:	6523      	str	r3, [r4, #80]	; 0x50
 80103d2:	4b13      	ldr	r3, [pc, #76]	; (8010420 <__sinit+0x68>)
 80103d4:	4a13      	ldr	r2, [pc, #76]	; (8010424 <__sinit+0x6c>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80103da:	42a3      	cmp	r3, r4
 80103dc:	bf04      	itt	eq
 80103de:	2301      	moveq	r3, #1
 80103e0:	61a3      	streq	r3, [r4, #24]
 80103e2:	4620      	mov	r0, r4
 80103e4:	f000 f820 	bl	8010428 <__sfp>
 80103e8:	6060      	str	r0, [r4, #4]
 80103ea:	4620      	mov	r0, r4
 80103ec:	f000 f81c 	bl	8010428 <__sfp>
 80103f0:	60a0      	str	r0, [r4, #8]
 80103f2:	4620      	mov	r0, r4
 80103f4:	f000 f818 	bl	8010428 <__sfp>
 80103f8:	2200      	movs	r2, #0
 80103fa:	60e0      	str	r0, [r4, #12]
 80103fc:	2104      	movs	r1, #4
 80103fe:	6860      	ldr	r0, [r4, #4]
 8010400:	f7ff ff82 	bl	8010308 <std>
 8010404:	68a0      	ldr	r0, [r4, #8]
 8010406:	2201      	movs	r2, #1
 8010408:	2109      	movs	r1, #9
 801040a:	f7ff ff7d 	bl	8010308 <std>
 801040e:	68e0      	ldr	r0, [r4, #12]
 8010410:	2202      	movs	r2, #2
 8010412:	2112      	movs	r1, #18
 8010414:	f7ff ff78 	bl	8010308 <std>
 8010418:	2301      	movs	r3, #1
 801041a:	61a3      	str	r3, [r4, #24]
 801041c:	e7d2      	b.n	80103c4 <__sinit+0xc>
 801041e:	bf00      	nop
 8010420:	08012ce4 	.word	0x08012ce4
 8010424:	08010351 	.word	0x08010351

08010428 <__sfp>:
 8010428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042a:	4607      	mov	r7, r0
 801042c:	f7ff ffac 	bl	8010388 <__sfp_lock_acquire>
 8010430:	4b1e      	ldr	r3, [pc, #120]	; (80104ac <__sfp+0x84>)
 8010432:	681e      	ldr	r6, [r3, #0]
 8010434:	69b3      	ldr	r3, [r6, #24]
 8010436:	b913      	cbnz	r3, 801043e <__sfp+0x16>
 8010438:	4630      	mov	r0, r6
 801043a:	f7ff ffbd 	bl	80103b8 <__sinit>
 801043e:	3648      	adds	r6, #72	; 0x48
 8010440:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010444:	3b01      	subs	r3, #1
 8010446:	d503      	bpl.n	8010450 <__sfp+0x28>
 8010448:	6833      	ldr	r3, [r6, #0]
 801044a:	b30b      	cbz	r3, 8010490 <__sfp+0x68>
 801044c:	6836      	ldr	r6, [r6, #0]
 801044e:	e7f7      	b.n	8010440 <__sfp+0x18>
 8010450:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010454:	b9d5      	cbnz	r5, 801048c <__sfp+0x64>
 8010456:	4b16      	ldr	r3, [pc, #88]	; (80104b0 <__sfp+0x88>)
 8010458:	60e3      	str	r3, [r4, #12]
 801045a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801045e:	6665      	str	r5, [r4, #100]	; 0x64
 8010460:	f7ff fad8 	bl	800fa14 <__retarget_lock_init_recursive>
 8010464:	f7ff ff96 	bl	8010394 <__sfp_lock_release>
 8010468:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801046c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010470:	6025      	str	r5, [r4, #0]
 8010472:	61a5      	str	r5, [r4, #24]
 8010474:	2208      	movs	r2, #8
 8010476:	4629      	mov	r1, r5
 8010478:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801047c:	f7fd fe58 	bl	800e130 <memset>
 8010480:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010484:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010488:	4620      	mov	r0, r4
 801048a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801048c:	3468      	adds	r4, #104	; 0x68
 801048e:	e7d9      	b.n	8010444 <__sfp+0x1c>
 8010490:	2104      	movs	r1, #4
 8010492:	4638      	mov	r0, r7
 8010494:	f7ff ff62 	bl	801035c <__sfmoreglue>
 8010498:	4604      	mov	r4, r0
 801049a:	6030      	str	r0, [r6, #0]
 801049c:	2800      	cmp	r0, #0
 801049e:	d1d5      	bne.n	801044c <__sfp+0x24>
 80104a0:	f7ff ff78 	bl	8010394 <__sfp_lock_release>
 80104a4:	230c      	movs	r3, #12
 80104a6:	603b      	str	r3, [r7, #0]
 80104a8:	e7ee      	b.n	8010488 <__sfp+0x60>
 80104aa:	bf00      	nop
 80104ac:	08012ce4 	.word	0x08012ce4
 80104b0:	ffff0001 	.word	0xffff0001

080104b4 <_fwalk_reent>:
 80104b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104b8:	4606      	mov	r6, r0
 80104ba:	4688      	mov	r8, r1
 80104bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80104c0:	2700      	movs	r7, #0
 80104c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80104c6:	f1b9 0901 	subs.w	r9, r9, #1
 80104ca:	d505      	bpl.n	80104d8 <_fwalk_reent+0x24>
 80104cc:	6824      	ldr	r4, [r4, #0]
 80104ce:	2c00      	cmp	r4, #0
 80104d0:	d1f7      	bne.n	80104c2 <_fwalk_reent+0xe>
 80104d2:	4638      	mov	r0, r7
 80104d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104d8:	89ab      	ldrh	r3, [r5, #12]
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d907      	bls.n	80104ee <_fwalk_reent+0x3a>
 80104de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104e2:	3301      	adds	r3, #1
 80104e4:	d003      	beq.n	80104ee <_fwalk_reent+0x3a>
 80104e6:	4629      	mov	r1, r5
 80104e8:	4630      	mov	r0, r6
 80104ea:	47c0      	blx	r8
 80104ec:	4307      	orrs	r7, r0
 80104ee:	3568      	adds	r5, #104	; 0x68
 80104f0:	e7e9      	b.n	80104c6 <_fwalk_reent+0x12>

080104f2 <__swhatbuf_r>:
 80104f2:	b570      	push	{r4, r5, r6, lr}
 80104f4:	460e      	mov	r6, r1
 80104f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104fa:	2900      	cmp	r1, #0
 80104fc:	b096      	sub	sp, #88	; 0x58
 80104fe:	4614      	mov	r4, r2
 8010500:	461d      	mov	r5, r3
 8010502:	da07      	bge.n	8010514 <__swhatbuf_r+0x22>
 8010504:	2300      	movs	r3, #0
 8010506:	602b      	str	r3, [r5, #0]
 8010508:	89b3      	ldrh	r3, [r6, #12]
 801050a:	061a      	lsls	r2, r3, #24
 801050c:	d410      	bmi.n	8010530 <__swhatbuf_r+0x3e>
 801050e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010512:	e00e      	b.n	8010532 <__swhatbuf_r+0x40>
 8010514:	466a      	mov	r2, sp
 8010516:	f000 f8fb 	bl	8010710 <_fstat_r>
 801051a:	2800      	cmp	r0, #0
 801051c:	dbf2      	blt.n	8010504 <__swhatbuf_r+0x12>
 801051e:	9a01      	ldr	r2, [sp, #4]
 8010520:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010524:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010528:	425a      	negs	r2, r3
 801052a:	415a      	adcs	r2, r3
 801052c:	602a      	str	r2, [r5, #0]
 801052e:	e7ee      	b.n	801050e <__swhatbuf_r+0x1c>
 8010530:	2340      	movs	r3, #64	; 0x40
 8010532:	2000      	movs	r0, #0
 8010534:	6023      	str	r3, [r4, #0]
 8010536:	b016      	add	sp, #88	; 0x58
 8010538:	bd70      	pop	{r4, r5, r6, pc}
	...

0801053c <__smakebuf_r>:
 801053c:	898b      	ldrh	r3, [r1, #12]
 801053e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010540:	079d      	lsls	r5, r3, #30
 8010542:	4606      	mov	r6, r0
 8010544:	460c      	mov	r4, r1
 8010546:	d507      	bpl.n	8010558 <__smakebuf_r+0x1c>
 8010548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801054c:	6023      	str	r3, [r4, #0]
 801054e:	6123      	str	r3, [r4, #16]
 8010550:	2301      	movs	r3, #1
 8010552:	6163      	str	r3, [r4, #20]
 8010554:	b002      	add	sp, #8
 8010556:	bd70      	pop	{r4, r5, r6, pc}
 8010558:	ab01      	add	r3, sp, #4
 801055a:	466a      	mov	r2, sp
 801055c:	f7ff ffc9 	bl	80104f2 <__swhatbuf_r>
 8010560:	9900      	ldr	r1, [sp, #0]
 8010562:	4605      	mov	r5, r0
 8010564:	4630      	mov	r0, r6
 8010566:	f7fd fe3b 	bl	800e1e0 <_malloc_r>
 801056a:	b948      	cbnz	r0, 8010580 <__smakebuf_r+0x44>
 801056c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010570:	059a      	lsls	r2, r3, #22
 8010572:	d4ef      	bmi.n	8010554 <__smakebuf_r+0x18>
 8010574:	f023 0303 	bic.w	r3, r3, #3
 8010578:	f043 0302 	orr.w	r3, r3, #2
 801057c:	81a3      	strh	r3, [r4, #12]
 801057e:	e7e3      	b.n	8010548 <__smakebuf_r+0xc>
 8010580:	4b0d      	ldr	r3, [pc, #52]	; (80105b8 <__smakebuf_r+0x7c>)
 8010582:	62b3      	str	r3, [r6, #40]	; 0x28
 8010584:	89a3      	ldrh	r3, [r4, #12]
 8010586:	6020      	str	r0, [r4, #0]
 8010588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801058c:	81a3      	strh	r3, [r4, #12]
 801058e:	9b00      	ldr	r3, [sp, #0]
 8010590:	6163      	str	r3, [r4, #20]
 8010592:	9b01      	ldr	r3, [sp, #4]
 8010594:	6120      	str	r0, [r4, #16]
 8010596:	b15b      	cbz	r3, 80105b0 <__smakebuf_r+0x74>
 8010598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801059c:	4630      	mov	r0, r6
 801059e:	f000 f8c9 	bl	8010734 <_isatty_r>
 80105a2:	b128      	cbz	r0, 80105b0 <__smakebuf_r+0x74>
 80105a4:	89a3      	ldrh	r3, [r4, #12]
 80105a6:	f023 0303 	bic.w	r3, r3, #3
 80105aa:	f043 0301 	orr.w	r3, r3, #1
 80105ae:	81a3      	strh	r3, [r4, #12]
 80105b0:	89a0      	ldrh	r0, [r4, #12]
 80105b2:	4305      	orrs	r5, r0
 80105b4:	81a5      	strh	r5, [r4, #12]
 80105b6:	e7cd      	b.n	8010554 <__smakebuf_r+0x18>
 80105b8:	08010351 	.word	0x08010351

080105bc <_raise_r>:
 80105bc:	291f      	cmp	r1, #31
 80105be:	b538      	push	{r3, r4, r5, lr}
 80105c0:	4604      	mov	r4, r0
 80105c2:	460d      	mov	r5, r1
 80105c4:	d904      	bls.n	80105d0 <_raise_r+0x14>
 80105c6:	2316      	movs	r3, #22
 80105c8:	6003      	str	r3, [r0, #0]
 80105ca:	f04f 30ff 	mov.w	r0, #4294967295
 80105ce:	bd38      	pop	{r3, r4, r5, pc}
 80105d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80105d2:	b112      	cbz	r2, 80105da <_raise_r+0x1e>
 80105d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105d8:	b94b      	cbnz	r3, 80105ee <_raise_r+0x32>
 80105da:	4620      	mov	r0, r4
 80105dc:	f000 f830 	bl	8010640 <_getpid_r>
 80105e0:	462a      	mov	r2, r5
 80105e2:	4601      	mov	r1, r0
 80105e4:	4620      	mov	r0, r4
 80105e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105ea:	f000 b817 	b.w	801061c <_kill_r>
 80105ee:	2b01      	cmp	r3, #1
 80105f0:	d00a      	beq.n	8010608 <_raise_r+0x4c>
 80105f2:	1c59      	adds	r1, r3, #1
 80105f4:	d103      	bne.n	80105fe <_raise_r+0x42>
 80105f6:	2316      	movs	r3, #22
 80105f8:	6003      	str	r3, [r0, #0]
 80105fa:	2001      	movs	r0, #1
 80105fc:	e7e7      	b.n	80105ce <_raise_r+0x12>
 80105fe:	2400      	movs	r4, #0
 8010600:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010604:	4628      	mov	r0, r5
 8010606:	4798      	blx	r3
 8010608:	2000      	movs	r0, #0
 801060a:	e7e0      	b.n	80105ce <_raise_r+0x12>

0801060c <raise>:
 801060c:	4b02      	ldr	r3, [pc, #8]	; (8010618 <raise+0xc>)
 801060e:	4601      	mov	r1, r0
 8010610:	6818      	ldr	r0, [r3, #0]
 8010612:	f7ff bfd3 	b.w	80105bc <_raise_r>
 8010616:	bf00      	nop
 8010618:	20000040 	.word	0x20000040

0801061c <_kill_r>:
 801061c:	b538      	push	{r3, r4, r5, lr}
 801061e:	4d07      	ldr	r5, [pc, #28]	; (801063c <_kill_r+0x20>)
 8010620:	2300      	movs	r3, #0
 8010622:	4604      	mov	r4, r0
 8010624:	4608      	mov	r0, r1
 8010626:	4611      	mov	r1, r2
 8010628:	602b      	str	r3, [r5, #0]
 801062a:	f7f2 f93f 	bl	80028ac <_kill>
 801062e:	1c43      	adds	r3, r0, #1
 8010630:	d102      	bne.n	8010638 <_kill_r+0x1c>
 8010632:	682b      	ldr	r3, [r5, #0]
 8010634:	b103      	cbz	r3, 8010638 <_kill_r+0x1c>
 8010636:	6023      	str	r3, [r4, #0]
 8010638:	bd38      	pop	{r3, r4, r5, pc}
 801063a:	bf00      	nop
 801063c:	20008bd4 	.word	0x20008bd4

08010640 <_getpid_r>:
 8010640:	f7f2 b92c 	b.w	800289c <_getpid>

08010644 <__sread>:
 8010644:	b510      	push	{r4, lr}
 8010646:	460c      	mov	r4, r1
 8010648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801064c:	f000 f894 	bl	8010778 <_read_r>
 8010650:	2800      	cmp	r0, #0
 8010652:	bfab      	itete	ge
 8010654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010656:	89a3      	ldrhlt	r3, [r4, #12]
 8010658:	181b      	addge	r3, r3, r0
 801065a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801065e:	bfac      	ite	ge
 8010660:	6563      	strge	r3, [r4, #84]	; 0x54
 8010662:	81a3      	strhlt	r3, [r4, #12]
 8010664:	bd10      	pop	{r4, pc}

08010666 <__swrite>:
 8010666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801066a:	461f      	mov	r7, r3
 801066c:	898b      	ldrh	r3, [r1, #12]
 801066e:	05db      	lsls	r3, r3, #23
 8010670:	4605      	mov	r5, r0
 8010672:	460c      	mov	r4, r1
 8010674:	4616      	mov	r6, r2
 8010676:	d505      	bpl.n	8010684 <__swrite+0x1e>
 8010678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801067c:	2302      	movs	r3, #2
 801067e:	2200      	movs	r2, #0
 8010680:	f000 f868 	bl	8010754 <_lseek_r>
 8010684:	89a3      	ldrh	r3, [r4, #12]
 8010686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801068a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801068e:	81a3      	strh	r3, [r4, #12]
 8010690:	4632      	mov	r2, r6
 8010692:	463b      	mov	r3, r7
 8010694:	4628      	mov	r0, r5
 8010696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801069a:	f000 b817 	b.w	80106cc <_write_r>

0801069e <__sseek>:
 801069e:	b510      	push	{r4, lr}
 80106a0:	460c      	mov	r4, r1
 80106a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106a6:	f000 f855 	bl	8010754 <_lseek_r>
 80106aa:	1c43      	adds	r3, r0, #1
 80106ac:	89a3      	ldrh	r3, [r4, #12]
 80106ae:	bf15      	itete	ne
 80106b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80106b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106ba:	81a3      	strheq	r3, [r4, #12]
 80106bc:	bf18      	it	ne
 80106be:	81a3      	strhne	r3, [r4, #12]
 80106c0:	bd10      	pop	{r4, pc}

080106c2 <__sclose>:
 80106c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106c6:	f000 b813 	b.w	80106f0 <_close_r>
	...

080106cc <_write_r>:
 80106cc:	b538      	push	{r3, r4, r5, lr}
 80106ce:	4d07      	ldr	r5, [pc, #28]	; (80106ec <_write_r+0x20>)
 80106d0:	4604      	mov	r4, r0
 80106d2:	4608      	mov	r0, r1
 80106d4:	4611      	mov	r1, r2
 80106d6:	2200      	movs	r2, #0
 80106d8:	602a      	str	r2, [r5, #0]
 80106da:	461a      	mov	r2, r3
 80106dc:	f7f2 f91d 	bl	800291a <_write>
 80106e0:	1c43      	adds	r3, r0, #1
 80106e2:	d102      	bne.n	80106ea <_write_r+0x1e>
 80106e4:	682b      	ldr	r3, [r5, #0]
 80106e6:	b103      	cbz	r3, 80106ea <_write_r+0x1e>
 80106e8:	6023      	str	r3, [r4, #0]
 80106ea:	bd38      	pop	{r3, r4, r5, pc}
 80106ec:	20008bd4 	.word	0x20008bd4

080106f0 <_close_r>:
 80106f0:	b538      	push	{r3, r4, r5, lr}
 80106f2:	4d06      	ldr	r5, [pc, #24]	; (801070c <_close_r+0x1c>)
 80106f4:	2300      	movs	r3, #0
 80106f6:	4604      	mov	r4, r0
 80106f8:	4608      	mov	r0, r1
 80106fa:	602b      	str	r3, [r5, #0]
 80106fc:	f7f2 f929 	bl	8002952 <_close>
 8010700:	1c43      	adds	r3, r0, #1
 8010702:	d102      	bne.n	801070a <_close_r+0x1a>
 8010704:	682b      	ldr	r3, [r5, #0]
 8010706:	b103      	cbz	r3, 801070a <_close_r+0x1a>
 8010708:	6023      	str	r3, [r4, #0]
 801070a:	bd38      	pop	{r3, r4, r5, pc}
 801070c:	20008bd4 	.word	0x20008bd4

08010710 <_fstat_r>:
 8010710:	b538      	push	{r3, r4, r5, lr}
 8010712:	4d07      	ldr	r5, [pc, #28]	; (8010730 <_fstat_r+0x20>)
 8010714:	2300      	movs	r3, #0
 8010716:	4604      	mov	r4, r0
 8010718:	4608      	mov	r0, r1
 801071a:	4611      	mov	r1, r2
 801071c:	602b      	str	r3, [r5, #0]
 801071e:	f7f2 f924 	bl	800296a <_fstat>
 8010722:	1c43      	adds	r3, r0, #1
 8010724:	d102      	bne.n	801072c <_fstat_r+0x1c>
 8010726:	682b      	ldr	r3, [r5, #0]
 8010728:	b103      	cbz	r3, 801072c <_fstat_r+0x1c>
 801072a:	6023      	str	r3, [r4, #0]
 801072c:	bd38      	pop	{r3, r4, r5, pc}
 801072e:	bf00      	nop
 8010730:	20008bd4 	.word	0x20008bd4

08010734 <_isatty_r>:
 8010734:	b538      	push	{r3, r4, r5, lr}
 8010736:	4d06      	ldr	r5, [pc, #24]	; (8010750 <_isatty_r+0x1c>)
 8010738:	2300      	movs	r3, #0
 801073a:	4604      	mov	r4, r0
 801073c:	4608      	mov	r0, r1
 801073e:	602b      	str	r3, [r5, #0]
 8010740:	f7f2 f923 	bl	800298a <_isatty>
 8010744:	1c43      	adds	r3, r0, #1
 8010746:	d102      	bne.n	801074e <_isatty_r+0x1a>
 8010748:	682b      	ldr	r3, [r5, #0]
 801074a:	b103      	cbz	r3, 801074e <_isatty_r+0x1a>
 801074c:	6023      	str	r3, [r4, #0]
 801074e:	bd38      	pop	{r3, r4, r5, pc}
 8010750:	20008bd4 	.word	0x20008bd4

08010754 <_lseek_r>:
 8010754:	b538      	push	{r3, r4, r5, lr}
 8010756:	4d07      	ldr	r5, [pc, #28]	; (8010774 <_lseek_r+0x20>)
 8010758:	4604      	mov	r4, r0
 801075a:	4608      	mov	r0, r1
 801075c:	4611      	mov	r1, r2
 801075e:	2200      	movs	r2, #0
 8010760:	602a      	str	r2, [r5, #0]
 8010762:	461a      	mov	r2, r3
 8010764:	f7f2 f91c 	bl	80029a0 <_lseek>
 8010768:	1c43      	adds	r3, r0, #1
 801076a:	d102      	bne.n	8010772 <_lseek_r+0x1e>
 801076c:	682b      	ldr	r3, [r5, #0]
 801076e:	b103      	cbz	r3, 8010772 <_lseek_r+0x1e>
 8010770:	6023      	str	r3, [r4, #0]
 8010772:	bd38      	pop	{r3, r4, r5, pc}
 8010774:	20008bd4 	.word	0x20008bd4

08010778 <_read_r>:
 8010778:	b538      	push	{r3, r4, r5, lr}
 801077a:	4d07      	ldr	r5, [pc, #28]	; (8010798 <_read_r+0x20>)
 801077c:	4604      	mov	r4, r0
 801077e:	4608      	mov	r0, r1
 8010780:	4611      	mov	r1, r2
 8010782:	2200      	movs	r2, #0
 8010784:	602a      	str	r2, [r5, #0]
 8010786:	461a      	mov	r2, r3
 8010788:	f7f2 f8aa 	bl	80028e0 <_read>
 801078c:	1c43      	adds	r3, r0, #1
 801078e:	d102      	bne.n	8010796 <_read_r+0x1e>
 8010790:	682b      	ldr	r3, [r5, #0]
 8010792:	b103      	cbz	r3, 8010796 <_read_r+0x1e>
 8010794:	6023      	str	r3, [r4, #0]
 8010796:	bd38      	pop	{r3, r4, r5, pc}
 8010798:	20008bd4 	.word	0x20008bd4
 801079c:	00000000 	.word	0x00000000

080107a0 <cos>:
 80107a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80107a2:	ec53 2b10 	vmov	r2, r3, d0
 80107a6:	4824      	ldr	r0, [pc, #144]	; (8010838 <cos+0x98>)
 80107a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80107ac:	4281      	cmp	r1, r0
 80107ae:	dc06      	bgt.n	80107be <cos+0x1e>
 80107b0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8010830 <cos+0x90>
 80107b4:	f001 fa2c 	bl	8011c10 <__kernel_cos>
 80107b8:	ec51 0b10 	vmov	r0, r1, d0
 80107bc:	e007      	b.n	80107ce <cos+0x2e>
 80107be:	481f      	ldr	r0, [pc, #124]	; (801083c <cos+0x9c>)
 80107c0:	4281      	cmp	r1, r0
 80107c2:	dd09      	ble.n	80107d8 <cos+0x38>
 80107c4:	ee10 0a10 	vmov	r0, s0
 80107c8:	4619      	mov	r1, r3
 80107ca:	f7ef fd6d 	bl	80002a8 <__aeabi_dsub>
 80107ce:	ec41 0b10 	vmov	d0, r0, r1
 80107d2:	b005      	add	sp, #20
 80107d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80107d8:	4668      	mov	r0, sp
 80107da:	f000 ff59 	bl	8011690 <__ieee754_rem_pio2>
 80107de:	f000 0003 	and.w	r0, r0, #3
 80107e2:	2801      	cmp	r0, #1
 80107e4:	d007      	beq.n	80107f6 <cos+0x56>
 80107e6:	2802      	cmp	r0, #2
 80107e8:	d012      	beq.n	8010810 <cos+0x70>
 80107ea:	b9c0      	cbnz	r0, 801081e <cos+0x7e>
 80107ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80107f0:	ed9d 0b00 	vldr	d0, [sp]
 80107f4:	e7de      	b.n	80107b4 <cos+0x14>
 80107f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80107fa:	ed9d 0b00 	vldr	d0, [sp]
 80107fe:	f001 fe0f 	bl	8012420 <__kernel_sin>
 8010802:	ec53 2b10 	vmov	r2, r3, d0
 8010806:	ee10 0a10 	vmov	r0, s0
 801080a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801080e:	e7de      	b.n	80107ce <cos+0x2e>
 8010810:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010814:	ed9d 0b00 	vldr	d0, [sp]
 8010818:	f001 f9fa 	bl	8011c10 <__kernel_cos>
 801081c:	e7f1      	b.n	8010802 <cos+0x62>
 801081e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010822:	ed9d 0b00 	vldr	d0, [sp]
 8010826:	2001      	movs	r0, #1
 8010828:	f001 fdfa 	bl	8012420 <__kernel_sin>
 801082c:	e7c4      	b.n	80107b8 <cos+0x18>
 801082e:	bf00      	nop
	...
 8010838:	3fe921fb 	.word	0x3fe921fb
 801083c:	7fefffff 	.word	0x7fefffff

08010840 <sin>:
 8010840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010842:	ec53 2b10 	vmov	r2, r3, d0
 8010846:	4826      	ldr	r0, [pc, #152]	; (80108e0 <sin+0xa0>)
 8010848:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801084c:	4281      	cmp	r1, r0
 801084e:	dc07      	bgt.n	8010860 <sin+0x20>
 8010850:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80108d8 <sin+0x98>
 8010854:	2000      	movs	r0, #0
 8010856:	f001 fde3 	bl	8012420 <__kernel_sin>
 801085a:	ec51 0b10 	vmov	r0, r1, d0
 801085e:	e007      	b.n	8010870 <sin+0x30>
 8010860:	4820      	ldr	r0, [pc, #128]	; (80108e4 <sin+0xa4>)
 8010862:	4281      	cmp	r1, r0
 8010864:	dd09      	ble.n	801087a <sin+0x3a>
 8010866:	ee10 0a10 	vmov	r0, s0
 801086a:	4619      	mov	r1, r3
 801086c:	f7ef fd1c 	bl	80002a8 <__aeabi_dsub>
 8010870:	ec41 0b10 	vmov	d0, r0, r1
 8010874:	b005      	add	sp, #20
 8010876:	f85d fb04 	ldr.w	pc, [sp], #4
 801087a:	4668      	mov	r0, sp
 801087c:	f000 ff08 	bl	8011690 <__ieee754_rem_pio2>
 8010880:	f000 0003 	and.w	r0, r0, #3
 8010884:	2801      	cmp	r0, #1
 8010886:	d008      	beq.n	801089a <sin+0x5a>
 8010888:	2802      	cmp	r0, #2
 801088a:	d00d      	beq.n	80108a8 <sin+0x68>
 801088c:	b9d0      	cbnz	r0, 80108c4 <sin+0x84>
 801088e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010892:	ed9d 0b00 	vldr	d0, [sp]
 8010896:	2001      	movs	r0, #1
 8010898:	e7dd      	b.n	8010856 <sin+0x16>
 801089a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801089e:	ed9d 0b00 	vldr	d0, [sp]
 80108a2:	f001 f9b5 	bl	8011c10 <__kernel_cos>
 80108a6:	e7d8      	b.n	801085a <sin+0x1a>
 80108a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108ac:	ed9d 0b00 	vldr	d0, [sp]
 80108b0:	2001      	movs	r0, #1
 80108b2:	f001 fdb5 	bl	8012420 <__kernel_sin>
 80108b6:	ec53 2b10 	vmov	r2, r3, d0
 80108ba:	ee10 0a10 	vmov	r0, s0
 80108be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80108c2:	e7d5      	b.n	8010870 <sin+0x30>
 80108c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108c8:	ed9d 0b00 	vldr	d0, [sp]
 80108cc:	f001 f9a0 	bl	8011c10 <__kernel_cos>
 80108d0:	e7f1      	b.n	80108b6 <sin+0x76>
 80108d2:	bf00      	nop
 80108d4:	f3af 8000 	nop.w
	...
 80108e0:	3fe921fb 	.word	0x3fe921fb
 80108e4:	7fefffff 	.word	0x7fefffff

080108e8 <atan2>:
 80108e8:	f000 b8e2 	b.w	8010ab0 <__ieee754_atan2>

080108ec <pow>:
 80108ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108f0:	ec59 8b10 	vmov	r8, r9, d0
 80108f4:	ec57 6b11 	vmov	r6, r7, d1
 80108f8:	f000 f9a6 	bl	8010c48 <__ieee754_pow>
 80108fc:	4b4e      	ldr	r3, [pc, #312]	; (8010a38 <pow+0x14c>)
 80108fe:	f993 3000 	ldrsb.w	r3, [r3]
 8010902:	3301      	adds	r3, #1
 8010904:	ec55 4b10 	vmov	r4, r5, d0
 8010908:	d015      	beq.n	8010936 <pow+0x4a>
 801090a:	4632      	mov	r2, r6
 801090c:	463b      	mov	r3, r7
 801090e:	4630      	mov	r0, r6
 8010910:	4639      	mov	r1, r7
 8010912:	f7f0 f91b 	bl	8000b4c <__aeabi_dcmpun>
 8010916:	b970      	cbnz	r0, 8010936 <pow+0x4a>
 8010918:	4642      	mov	r2, r8
 801091a:	464b      	mov	r3, r9
 801091c:	4640      	mov	r0, r8
 801091e:	4649      	mov	r1, r9
 8010920:	f7f0 f914 	bl	8000b4c <__aeabi_dcmpun>
 8010924:	2200      	movs	r2, #0
 8010926:	2300      	movs	r3, #0
 8010928:	b148      	cbz	r0, 801093e <pow+0x52>
 801092a:	4630      	mov	r0, r6
 801092c:	4639      	mov	r1, r7
 801092e:	f7f0 f8db 	bl	8000ae8 <__aeabi_dcmpeq>
 8010932:	2800      	cmp	r0, #0
 8010934:	d17d      	bne.n	8010a32 <pow+0x146>
 8010936:	ec45 4b10 	vmov	d0, r4, r5
 801093a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801093e:	4640      	mov	r0, r8
 8010940:	4649      	mov	r1, r9
 8010942:	f7f0 f8d1 	bl	8000ae8 <__aeabi_dcmpeq>
 8010946:	b1e0      	cbz	r0, 8010982 <pow+0x96>
 8010948:	2200      	movs	r2, #0
 801094a:	2300      	movs	r3, #0
 801094c:	4630      	mov	r0, r6
 801094e:	4639      	mov	r1, r7
 8010950:	f7f0 f8ca 	bl	8000ae8 <__aeabi_dcmpeq>
 8010954:	2800      	cmp	r0, #0
 8010956:	d16c      	bne.n	8010a32 <pow+0x146>
 8010958:	ec47 6b10 	vmov	d0, r6, r7
 801095c:	f001 ffc9 	bl	80128f2 <finite>
 8010960:	2800      	cmp	r0, #0
 8010962:	d0e8      	beq.n	8010936 <pow+0x4a>
 8010964:	2200      	movs	r2, #0
 8010966:	2300      	movs	r3, #0
 8010968:	4630      	mov	r0, r6
 801096a:	4639      	mov	r1, r7
 801096c:	f7f0 f8c6 	bl	8000afc <__aeabi_dcmplt>
 8010970:	2800      	cmp	r0, #0
 8010972:	d0e0      	beq.n	8010936 <pow+0x4a>
 8010974:	f7fd fb94 	bl	800e0a0 <__errno>
 8010978:	2321      	movs	r3, #33	; 0x21
 801097a:	6003      	str	r3, [r0, #0]
 801097c:	2400      	movs	r4, #0
 801097e:	4d2f      	ldr	r5, [pc, #188]	; (8010a3c <pow+0x150>)
 8010980:	e7d9      	b.n	8010936 <pow+0x4a>
 8010982:	ec45 4b10 	vmov	d0, r4, r5
 8010986:	f001 ffb4 	bl	80128f2 <finite>
 801098a:	bbb8      	cbnz	r0, 80109fc <pow+0x110>
 801098c:	ec49 8b10 	vmov	d0, r8, r9
 8010990:	f001 ffaf 	bl	80128f2 <finite>
 8010994:	b390      	cbz	r0, 80109fc <pow+0x110>
 8010996:	ec47 6b10 	vmov	d0, r6, r7
 801099a:	f001 ffaa 	bl	80128f2 <finite>
 801099e:	b368      	cbz	r0, 80109fc <pow+0x110>
 80109a0:	4622      	mov	r2, r4
 80109a2:	462b      	mov	r3, r5
 80109a4:	4620      	mov	r0, r4
 80109a6:	4629      	mov	r1, r5
 80109a8:	f7f0 f8d0 	bl	8000b4c <__aeabi_dcmpun>
 80109ac:	b160      	cbz	r0, 80109c8 <pow+0xdc>
 80109ae:	f7fd fb77 	bl	800e0a0 <__errno>
 80109b2:	2321      	movs	r3, #33	; 0x21
 80109b4:	6003      	str	r3, [r0, #0]
 80109b6:	2200      	movs	r2, #0
 80109b8:	2300      	movs	r3, #0
 80109ba:	4610      	mov	r0, r2
 80109bc:	4619      	mov	r1, r3
 80109be:	f7ef ff55 	bl	800086c <__aeabi_ddiv>
 80109c2:	4604      	mov	r4, r0
 80109c4:	460d      	mov	r5, r1
 80109c6:	e7b6      	b.n	8010936 <pow+0x4a>
 80109c8:	f7fd fb6a 	bl	800e0a0 <__errno>
 80109cc:	2322      	movs	r3, #34	; 0x22
 80109ce:	6003      	str	r3, [r0, #0]
 80109d0:	2200      	movs	r2, #0
 80109d2:	2300      	movs	r3, #0
 80109d4:	4640      	mov	r0, r8
 80109d6:	4649      	mov	r1, r9
 80109d8:	f7f0 f890 	bl	8000afc <__aeabi_dcmplt>
 80109dc:	2400      	movs	r4, #0
 80109de:	b158      	cbz	r0, 80109f8 <pow+0x10c>
 80109e0:	ec47 6b10 	vmov	d0, r6, r7
 80109e4:	f002 f818 	bl	8012a18 <rint>
 80109e8:	4632      	mov	r2, r6
 80109ea:	ec51 0b10 	vmov	r0, r1, d0
 80109ee:	463b      	mov	r3, r7
 80109f0:	f7f0 f87a 	bl	8000ae8 <__aeabi_dcmpeq>
 80109f4:	2800      	cmp	r0, #0
 80109f6:	d0c2      	beq.n	801097e <pow+0x92>
 80109f8:	4d11      	ldr	r5, [pc, #68]	; (8010a40 <pow+0x154>)
 80109fa:	e79c      	b.n	8010936 <pow+0x4a>
 80109fc:	2200      	movs	r2, #0
 80109fe:	2300      	movs	r3, #0
 8010a00:	4620      	mov	r0, r4
 8010a02:	4629      	mov	r1, r5
 8010a04:	f7f0 f870 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	d094      	beq.n	8010936 <pow+0x4a>
 8010a0c:	ec49 8b10 	vmov	d0, r8, r9
 8010a10:	f001 ff6f 	bl	80128f2 <finite>
 8010a14:	2800      	cmp	r0, #0
 8010a16:	d08e      	beq.n	8010936 <pow+0x4a>
 8010a18:	ec47 6b10 	vmov	d0, r6, r7
 8010a1c:	f001 ff69 	bl	80128f2 <finite>
 8010a20:	2800      	cmp	r0, #0
 8010a22:	d088      	beq.n	8010936 <pow+0x4a>
 8010a24:	f7fd fb3c 	bl	800e0a0 <__errno>
 8010a28:	2322      	movs	r3, #34	; 0x22
 8010a2a:	6003      	str	r3, [r0, #0]
 8010a2c:	2400      	movs	r4, #0
 8010a2e:	2500      	movs	r5, #0
 8010a30:	e781      	b.n	8010936 <pow+0x4a>
 8010a32:	4d04      	ldr	r5, [pc, #16]	; (8010a44 <pow+0x158>)
 8010a34:	2400      	movs	r4, #0
 8010a36:	e77e      	b.n	8010936 <pow+0x4a>
 8010a38:	200000a4 	.word	0x200000a4
 8010a3c:	fff00000 	.word	0xfff00000
 8010a40:	7ff00000 	.word	0x7ff00000
 8010a44:	3ff00000 	.word	0x3ff00000

08010a48 <sqrt>:
 8010a48:	b538      	push	{r3, r4, r5, lr}
 8010a4a:	ed2d 8b02 	vpush	{d8}
 8010a4e:	ec55 4b10 	vmov	r4, r5, d0
 8010a52:	f001 f827 	bl	8011aa4 <__ieee754_sqrt>
 8010a56:	4b15      	ldr	r3, [pc, #84]	; (8010aac <sqrt+0x64>)
 8010a58:	eeb0 8a40 	vmov.f32	s16, s0
 8010a5c:	eef0 8a60 	vmov.f32	s17, s1
 8010a60:	f993 3000 	ldrsb.w	r3, [r3]
 8010a64:	3301      	adds	r3, #1
 8010a66:	d019      	beq.n	8010a9c <sqrt+0x54>
 8010a68:	4622      	mov	r2, r4
 8010a6a:	462b      	mov	r3, r5
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	4629      	mov	r1, r5
 8010a70:	f7f0 f86c 	bl	8000b4c <__aeabi_dcmpun>
 8010a74:	b990      	cbnz	r0, 8010a9c <sqrt+0x54>
 8010a76:	2200      	movs	r2, #0
 8010a78:	2300      	movs	r3, #0
 8010a7a:	4620      	mov	r0, r4
 8010a7c:	4629      	mov	r1, r5
 8010a7e:	f7f0 f83d 	bl	8000afc <__aeabi_dcmplt>
 8010a82:	b158      	cbz	r0, 8010a9c <sqrt+0x54>
 8010a84:	f7fd fb0c 	bl	800e0a0 <__errno>
 8010a88:	2321      	movs	r3, #33	; 0x21
 8010a8a:	6003      	str	r3, [r0, #0]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	2300      	movs	r3, #0
 8010a90:	4610      	mov	r0, r2
 8010a92:	4619      	mov	r1, r3
 8010a94:	f7ef feea 	bl	800086c <__aeabi_ddiv>
 8010a98:	ec41 0b18 	vmov	d8, r0, r1
 8010a9c:	eeb0 0a48 	vmov.f32	s0, s16
 8010aa0:	eef0 0a68 	vmov.f32	s1, s17
 8010aa4:	ecbd 8b02 	vpop	{d8}
 8010aa8:	bd38      	pop	{r3, r4, r5, pc}
 8010aaa:	bf00      	nop
 8010aac:	200000a4 	.word	0x200000a4

08010ab0 <__ieee754_atan2>:
 8010ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ab4:	ec57 6b11 	vmov	r6, r7, d1
 8010ab8:	4273      	negs	r3, r6
 8010aba:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010c40 <__ieee754_atan2+0x190>
 8010abe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010ac2:	4333      	orrs	r3, r6
 8010ac4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010ac8:	4573      	cmp	r3, lr
 8010aca:	ec51 0b10 	vmov	r0, r1, d0
 8010ace:	ee11 8a10 	vmov	r8, s2
 8010ad2:	d80a      	bhi.n	8010aea <__ieee754_atan2+0x3a>
 8010ad4:	4244      	negs	r4, r0
 8010ad6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010ada:	4304      	orrs	r4, r0
 8010adc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010ae0:	4574      	cmp	r4, lr
 8010ae2:	ee10 9a10 	vmov	r9, s0
 8010ae6:	468c      	mov	ip, r1
 8010ae8:	d907      	bls.n	8010afa <__ieee754_atan2+0x4a>
 8010aea:	4632      	mov	r2, r6
 8010aec:	463b      	mov	r3, r7
 8010aee:	f7ef fbdd 	bl	80002ac <__adddf3>
 8010af2:	ec41 0b10 	vmov	d0, r0, r1
 8010af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010afa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010afe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010b02:	4334      	orrs	r4, r6
 8010b04:	d103      	bne.n	8010b0e <__ieee754_atan2+0x5e>
 8010b06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b0a:	f001 bd49 	b.w	80125a0 <atan>
 8010b0e:	17bc      	asrs	r4, r7, #30
 8010b10:	f004 0402 	and.w	r4, r4, #2
 8010b14:	ea53 0909 	orrs.w	r9, r3, r9
 8010b18:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010b1c:	d107      	bne.n	8010b2e <__ieee754_atan2+0x7e>
 8010b1e:	2c02      	cmp	r4, #2
 8010b20:	d060      	beq.n	8010be4 <__ieee754_atan2+0x134>
 8010b22:	2c03      	cmp	r4, #3
 8010b24:	d1e5      	bne.n	8010af2 <__ieee754_atan2+0x42>
 8010b26:	a142      	add	r1, pc, #264	; (adr r1, 8010c30 <__ieee754_atan2+0x180>)
 8010b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b2c:	e7e1      	b.n	8010af2 <__ieee754_atan2+0x42>
 8010b2e:	ea52 0808 	orrs.w	r8, r2, r8
 8010b32:	d106      	bne.n	8010b42 <__ieee754_atan2+0x92>
 8010b34:	f1bc 0f00 	cmp.w	ip, #0
 8010b38:	da5f      	bge.n	8010bfa <__ieee754_atan2+0x14a>
 8010b3a:	a13f      	add	r1, pc, #252	; (adr r1, 8010c38 <__ieee754_atan2+0x188>)
 8010b3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b40:	e7d7      	b.n	8010af2 <__ieee754_atan2+0x42>
 8010b42:	4572      	cmp	r2, lr
 8010b44:	d10f      	bne.n	8010b66 <__ieee754_atan2+0xb6>
 8010b46:	4293      	cmp	r3, r2
 8010b48:	f104 34ff 	add.w	r4, r4, #4294967295
 8010b4c:	d107      	bne.n	8010b5e <__ieee754_atan2+0xae>
 8010b4e:	2c02      	cmp	r4, #2
 8010b50:	d84c      	bhi.n	8010bec <__ieee754_atan2+0x13c>
 8010b52:	4b35      	ldr	r3, [pc, #212]	; (8010c28 <__ieee754_atan2+0x178>)
 8010b54:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010b58:	e9d4 0100 	ldrd	r0, r1, [r4]
 8010b5c:	e7c9      	b.n	8010af2 <__ieee754_atan2+0x42>
 8010b5e:	2c02      	cmp	r4, #2
 8010b60:	d848      	bhi.n	8010bf4 <__ieee754_atan2+0x144>
 8010b62:	4b32      	ldr	r3, [pc, #200]	; (8010c2c <__ieee754_atan2+0x17c>)
 8010b64:	e7f6      	b.n	8010b54 <__ieee754_atan2+0xa4>
 8010b66:	4573      	cmp	r3, lr
 8010b68:	d0e4      	beq.n	8010b34 <__ieee754_atan2+0x84>
 8010b6a:	1a9b      	subs	r3, r3, r2
 8010b6c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010b70:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010b74:	da1e      	bge.n	8010bb4 <__ieee754_atan2+0x104>
 8010b76:	2f00      	cmp	r7, #0
 8010b78:	da01      	bge.n	8010b7e <__ieee754_atan2+0xce>
 8010b7a:	323c      	adds	r2, #60	; 0x3c
 8010b7c:	db1e      	blt.n	8010bbc <__ieee754_atan2+0x10c>
 8010b7e:	4632      	mov	r2, r6
 8010b80:	463b      	mov	r3, r7
 8010b82:	f7ef fe73 	bl	800086c <__aeabi_ddiv>
 8010b86:	ec41 0b10 	vmov	d0, r0, r1
 8010b8a:	f001 fea9 	bl	80128e0 <fabs>
 8010b8e:	f001 fd07 	bl	80125a0 <atan>
 8010b92:	ec51 0b10 	vmov	r0, r1, d0
 8010b96:	2c01      	cmp	r4, #1
 8010b98:	d013      	beq.n	8010bc2 <__ieee754_atan2+0x112>
 8010b9a:	2c02      	cmp	r4, #2
 8010b9c:	d015      	beq.n	8010bca <__ieee754_atan2+0x11a>
 8010b9e:	2c00      	cmp	r4, #0
 8010ba0:	d0a7      	beq.n	8010af2 <__ieee754_atan2+0x42>
 8010ba2:	a319      	add	r3, pc, #100	; (adr r3, 8010c08 <__ieee754_atan2+0x158>)
 8010ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba8:	f7ef fb7e 	bl	80002a8 <__aeabi_dsub>
 8010bac:	a318      	add	r3, pc, #96	; (adr r3, 8010c10 <__ieee754_atan2+0x160>)
 8010bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb2:	e014      	b.n	8010bde <__ieee754_atan2+0x12e>
 8010bb4:	a118      	add	r1, pc, #96	; (adr r1, 8010c18 <__ieee754_atan2+0x168>)
 8010bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bba:	e7ec      	b.n	8010b96 <__ieee754_atan2+0xe6>
 8010bbc:	2000      	movs	r0, #0
 8010bbe:	2100      	movs	r1, #0
 8010bc0:	e7e9      	b.n	8010b96 <__ieee754_atan2+0xe6>
 8010bc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	e793      	b.n	8010af2 <__ieee754_atan2+0x42>
 8010bca:	a30f      	add	r3, pc, #60	; (adr r3, 8010c08 <__ieee754_atan2+0x158>)
 8010bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd0:	f7ef fb6a 	bl	80002a8 <__aeabi_dsub>
 8010bd4:	4602      	mov	r2, r0
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	a10d      	add	r1, pc, #52	; (adr r1, 8010c10 <__ieee754_atan2+0x160>)
 8010bda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bde:	f7ef fb63 	bl	80002a8 <__aeabi_dsub>
 8010be2:	e786      	b.n	8010af2 <__ieee754_atan2+0x42>
 8010be4:	a10a      	add	r1, pc, #40	; (adr r1, 8010c10 <__ieee754_atan2+0x160>)
 8010be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bea:	e782      	b.n	8010af2 <__ieee754_atan2+0x42>
 8010bec:	a10c      	add	r1, pc, #48	; (adr r1, 8010c20 <__ieee754_atan2+0x170>)
 8010bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bf2:	e77e      	b.n	8010af2 <__ieee754_atan2+0x42>
 8010bf4:	2000      	movs	r0, #0
 8010bf6:	2100      	movs	r1, #0
 8010bf8:	e77b      	b.n	8010af2 <__ieee754_atan2+0x42>
 8010bfa:	a107      	add	r1, pc, #28	; (adr r1, 8010c18 <__ieee754_atan2+0x168>)
 8010bfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c00:	e777      	b.n	8010af2 <__ieee754_atan2+0x42>
 8010c02:	bf00      	nop
 8010c04:	f3af 8000 	nop.w
 8010c08:	33145c07 	.word	0x33145c07
 8010c0c:	3ca1a626 	.word	0x3ca1a626
 8010c10:	54442d18 	.word	0x54442d18
 8010c14:	400921fb 	.word	0x400921fb
 8010c18:	54442d18 	.word	0x54442d18
 8010c1c:	3ff921fb 	.word	0x3ff921fb
 8010c20:	54442d18 	.word	0x54442d18
 8010c24:	3fe921fb 	.word	0x3fe921fb
 8010c28:	08012fb0 	.word	0x08012fb0
 8010c2c:	08012fc8 	.word	0x08012fc8
 8010c30:	54442d18 	.word	0x54442d18
 8010c34:	c00921fb 	.word	0xc00921fb
 8010c38:	54442d18 	.word	0x54442d18
 8010c3c:	bff921fb 	.word	0xbff921fb
 8010c40:	7ff00000 	.word	0x7ff00000
 8010c44:	00000000 	.word	0x00000000

08010c48 <__ieee754_pow>:
 8010c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c4c:	ed2d 8b06 	vpush	{d8-d10}
 8010c50:	b08d      	sub	sp, #52	; 0x34
 8010c52:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010c56:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8010c5a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8010c5e:	ea56 0100 	orrs.w	r1, r6, r0
 8010c62:	ec53 2b10 	vmov	r2, r3, d0
 8010c66:	f000 84d1 	beq.w	801160c <__ieee754_pow+0x9c4>
 8010c6a:	497f      	ldr	r1, [pc, #508]	; (8010e68 <__ieee754_pow+0x220>)
 8010c6c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010c70:	428c      	cmp	r4, r1
 8010c72:	ee10 8a10 	vmov	r8, s0
 8010c76:	4699      	mov	r9, r3
 8010c78:	dc09      	bgt.n	8010c8e <__ieee754_pow+0x46>
 8010c7a:	d103      	bne.n	8010c84 <__ieee754_pow+0x3c>
 8010c7c:	b97a      	cbnz	r2, 8010c9e <__ieee754_pow+0x56>
 8010c7e:	42a6      	cmp	r6, r4
 8010c80:	dd02      	ble.n	8010c88 <__ieee754_pow+0x40>
 8010c82:	e00c      	b.n	8010c9e <__ieee754_pow+0x56>
 8010c84:	428e      	cmp	r6, r1
 8010c86:	dc02      	bgt.n	8010c8e <__ieee754_pow+0x46>
 8010c88:	428e      	cmp	r6, r1
 8010c8a:	d110      	bne.n	8010cae <__ieee754_pow+0x66>
 8010c8c:	b178      	cbz	r0, 8010cae <__ieee754_pow+0x66>
 8010c8e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010c92:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010c96:	ea54 0308 	orrs.w	r3, r4, r8
 8010c9a:	f000 84b7 	beq.w	801160c <__ieee754_pow+0x9c4>
 8010c9e:	4873      	ldr	r0, [pc, #460]	; (8010e6c <__ieee754_pow+0x224>)
 8010ca0:	b00d      	add	sp, #52	; 0x34
 8010ca2:	ecbd 8b06 	vpop	{d8-d10}
 8010ca6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010caa:	f001 bead 	b.w	8012a08 <nan>
 8010cae:	f1b9 0f00 	cmp.w	r9, #0
 8010cb2:	da36      	bge.n	8010d22 <__ieee754_pow+0xda>
 8010cb4:	496e      	ldr	r1, [pc, #440]	; (8010e70 <__ieee754_pow+0x228>)
 8010cb6:	428e      	cmp	r6, r1
 8010cb8:	dc51      	bgt.n	8010d5e <__ieee754_pow+0x116>
 8010cba:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8010cbe:	428e      	cmp	r6, r1
 8010cc0:	f340 84af 	ble.w	8011622 <__ieee754_pow+0x9da>
 8010cc4:	1531      	asrs	r1, r6, #20
 8010cc6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010cca:	2914      	cmp	r1, #20
 8010ccc:	dd0f      	ble.n	8010cee <__ieee754_pow+0xa6>
 8010cce:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8010cd2:	fa20 fc01 	lsr.w	ip, r0, r1
 8010cd6:	fa0c f101 	lsl.w	r1, ip, r1
 8010cda:	4281      	cmp	r1, r0
 8010cdc:	f040 84a1 	bne.w	8011622 <__ieee754_pow+0x9da>
 8010ce0:	f00c 0c01 	and.w	ip, ip, #1
 8010ce4:	f1cc 0102 	rsb	r1, ip, #2
 8010ce8:	9100      	str	r1, [sp, #0]
 8010cea:	b180      	cbz	r0, 8010d0e <__ieee754_pow+0xc6>
 8010cec:	e059      	b.n	8010da2 <__ieee754_pow+0x15a>
 8010cee:	2800      	cmp	r0, #0
 8010cf0:	d155      	bne.n	8010d9e <__ieee754_pow+0x156>
 8010cf2:	f1c1 0114 	rsb	r1, r1, #20
 8010cf6:	fa46 fc01 	asr.w	ip, r6, r1
 8010cfa:	fa0c f101 	lsl.w	r1, ip, r1
 8010cfe:	42b1      	cmp	r1, r6
 8010d00:	f040 848c 	bne.w	801161c <__ieee754_pow+0x9d4>
 8010d04:	f00c 0c01 	and.w	ip, ip, #1
 8010d08:	f1cc 0102 	rsb	r1, ip, #2
 8010d0c:	9100      	str	r1, [sp, #0]
 8010d0e:	4959      	ldr	r1, [pc, #356]	; (8010e74 <__ieee754_pow+0x22c>)
 8010d10:	428e      	cmp	r6, r1
 8010d12:	d12d      	bne.n	8010d70 <__ieee754_pow+0x128>
 8010d14:	2f00      	cmp	r7, #0
 8010d16:	da79      	bge.n	8010e0c <__ieee754_pow+0x1c4>
 8010d18:	4956      	ldr	r1, [pc, #344]	; (8010e74 <__ieee754_pow+0x22c>)
 8010d1a:	2000      	movs	r0, #0
 8010d1c:	f7ef fda6 	bl	800086c <__aeabi_ddiv>
 8010d20:	e016      	b.n	8010d50 <__ieee754_pow+0x108>
 8010d22:	2100      	movs	r1, #0
 8010d24:	9100      	str	r1, [sp, #0]
 8010d26:	2800      	cmp	r0, #0
 8010d28:	d13b      	bne.n	8010da2 <__ieee754_pow+0x15a>
 8010d2a:	494f      	ldr	r1, [pc, #316]	; (8010e68 <__ieee754_pow+0x220>)
 8010d2c:	428e      	cmp	r6, r1
 8010d2e:	d1ee      	bne.n	8010d0e <__ieee754_pow+0xc6>
 8010d30:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010d34:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010d38:	ea53 0308 	orrs.w	r3, r3, r8
 8010d3c:	f000 8466 	beq.w	801160c <__ieee754_pow+0x9c4>
 8010d40:	4b4d      	ldr	r3, [pc, #308]	; (8010e78 <__ieee754_pow+0x230>)
 8010d42:	429c      	cmp	r4, r3
 8010d44:	dd0d      	ble.n	8010d62 <__ieee754_pow+0x11a>
 8010d46:	2f00      	cmp	r7, #0
 8010d48:	f280 8464 	bge.w	8011614 <__ieee754_pow+0x9cc>
 8010d4c:	2000      	movs	r0, #0
 8010d4e:	2100      	movs	r1, #0
 8010d50:	ec41 0b10 	vmov	d0, r0, r1
 8010d54:	b00d      	add	sp, #52	; 0x34
 8010d56:	ecbd 8b06 	vpop	{d8-d10}
 8010d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d5e:	2102      	movs	r1, #2
 8010d60:	e7e0      	b.n	8010d24 <__ieee754_pow+0xdc>
 8010d62:	2f00      	cmp	r7, #0
 8010d64:	daf2      	bge.n	8010d4c <__ieee754_pow+0x104>
 8010d66:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8010d6a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010d6e:	e7ef      	b.n	8010d50 <__ieee754_pow+0x108>
 8010d70:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8010d74:	d104      	bne.n	8010d80 <__ieee754_pow+0x138>
 8010d76:	4610      	mov	r0, r2
 8010d78:	4619      	mov	r1, r3
 8010d7a:	f7ef fc4d 	bl	8000618 <__aeabi_dmul>
 8010d7e:	e7e7      	b.n	8010d50 <__ieee754_pow+0x108>
 8010d80:	493e      	ldr	r1, [pc, #248]	; (8010e7c <__ieee754_pow+0x234>)
 8010d82:	428f      	cmp	r7, r1
 8010d84:	d10d      	bne.n	8010da2 <__ieee754_pow+0x15a>
 8010d86:	f1b9 0f00 	cmp.w	r9, #0
 8010d8a:	db0a      	blt.n	8010da2 <__ieee754_pow+0x15a>
 8010d8c:	ec43 2b10 	vmov	d0, r2, r3
 8010d90:	b00d      	add	sp, #52	; 0x34
 8010d92:	ecbd 8b06 	vpop	{d8-d10}
 8010d96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d9a:	f000 be83 	b.w	8011aa4 <__ieee754_sqrt>
 8010d9e:	2100      	movs	r1, #0
 8010da0:	9100      	str	r1, [sp, #0]
 8010da2:	ec43 2b10 	vmov	d0, r2, r3
 8010da6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010daa:	f001 fd99 	bl	80128e0 <fabs>
 8010dae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010db2:	ec51 0b10 	vmov	r0, r1, d0
 8010db6:	f1b8 0f00 	cmp.w	r8, #0
 8010dba:	d12a      	bne.n	8010e12 <__ieee754_pow+0x1ca>
 8010dbc:	b12c      	cbz	r4, 8010dca <__ieee754_pow+0x182>
 8010dbe:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8010e74 <__ieee754_pow+0x22c>
 8010dc2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8010dc6:	45e6      	cmp	lr, ip
 8010dc8:	d123      	bne.n	8010e12 <__ieee754_pow+0x1ca>
 8010dca:	2f00      	cmp	r7, #0
 8010dcc:	da05      	bge.n	8010dda <__ieee754_pow+0x192>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	2000      	movs	r0, #0
 8010dd4:	4927      	ldr	r1, [pc, #156]	; (8010e74 <__ieee754_pow+0x22c>)
 8010dd6:	f7ef fd49 	bl	800086c <__aeabi_ddiv>
 8010dda:	f1b9 0f00 	cmp.w	r9, #0
 8010dde:	dab7      	bge.n	8010d50 <__ieee754_pow+0x108>
 8010de0:	9b00      	ldr	r3, [sp, #0]
 8010de2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010de6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010dea:	4323      	orrs	r3, r4
 8010dec:	d108      	bne.n	8010e00 <__ieee754_pow+0x1b8>
 8010dee:	4602      	mov	r2, r0
 8010df0:	460b      	mov	r3, r1
 8010df2:	4610      	mov	r0, r2
 8010df4:	4619      	mov	r1, r3
 8010df6:	f7ef fa57 	bl	80002a8 <__aeabi_dsub>
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	460b      	mov	r3, r1
 8010dfe:	e78d      	b.n	8010d1c <__ieee754_pow+0xd4>
 8010e00:	9b00      	ldr	r3, [sp, #0]
 8010e02:	2b01      	cmp	r3, #1
 8010e04:	d1a4      	bne.n	8010d50 <__ieee754_pow+0x108>
 8010e06:	4602      	mov	r2, r0
 8010e08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e0c:	4610      	mov	r0, r2
 8010e0e:	4619      	mov	r1, r3
 8010e10:	e79e      	b.n	8010d50 <__ieee754_pow+0x108>
 8010e12:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8010e16:	f10c 35ff 	add.w	r5, ip, #4294967295
 8010e1a:	950a      	str	r5, [sp, #40]	; 0x28
 8010e1c:	9d00      	ldr	r5, [sp, #0]
 8010e1e:	46ac      	mov	ip, r5
 8010e20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010e22:	ea5c 0505 	orrs.w	r5, ip, r5
 8010e26:	d0e4      	beq.n	8010df2 <__ieee754_pow+0x1aa>
 8010e28:	4b15      	ldr	r3, [pc, #84]	; (8010e80 <__ieee754_pow+0x238>)
 8010e2a:	429e      	cmp	r6, r3
 8010e2c:	f340 80fc 	ble.w	8011028 <__ieee754_pow+0x3e0>
 8010e30:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010e34:	429e      	cmp	r6, r3
 8010e36:	4b10      	ldr	r3, [pc, #64]	; (8010e78 <__ieee754_pow+0x230>)
 8010e38:	dd07      	ble.n	8010e4a <__ieee754_pow+0x202>
 8010e3a:	429c      	cmp	r4, r3
 8010e3c:	dc0a      	bgt.n	8010e54 <__ieee754_pow+0x20c>
 8010e3e:	2f00      	cmp	r7, #0
 8010e40:	da84      	bge.n	8010d4c <__ieee754_pow+0x104>
 8010e42:	a307      	add	r3, pc, #28	; (adr r3, 8010e60 <__ieee754_pow+0x218>)
 8010e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e48:	e795      	b.n	8010d76 <__ieee754_pow+0x12e>
 8010e4a:	429c      	cmp	r4, r3
 8010e4c:	dbf7      	blt.n	8010e3e <__ieee754_pow+0x1f6>
 8010e4e:	4b09      	ldr	r3, [pc, #36]	; (8010e74 <__ieee754_pow+0x22c>)
 8010e50:	429c      	cmp	r4, r3
 8010e52:	dd17      	ble.n	8010e84 <__ieee754_pow+0x23c>
 8010e54:	2f00      	cmp	r7, #0
 8010e56:	dcf4      	bgt.n	8010e42 <__ieee754_pow+0x1fa>
 8010e58:	e778      	b.n	8010d4c <__ieee754_pow+0x104>
 8010e5a:	bf00      	nop
 8010e5c:	f3af 8000 	nop.w
 8010e60:	8800759c 	.word	0x8800759c
 8010e64:	7e37e43c 	.word	0x7e37e43c
 8010e68:	7ff00000 	.word	0x7ff00000
 8010e6c:	08012ea7 	.word	0x08012ea7
 8010e70:	433fffff 	.word	0x433fffff
 8010e74:	3ff00000 	.word	0x3ff00000
 8010e78:	3fefffff 	.word	0x3fefffff
 8010e7c:	3fe00000 	.word	0x3fe00000
 8010e80:	41e00000 	.word	0x41e00000
 8010e84:	4b64      	ldr	r3, [pc, #400]	; (8011018 <__ieee754_pow+0x3d0>)
 8010e86:	2200      	movs	r2, #0
 8010e88:	f7ef fa0e 	bl	80002a8 <__aeabi_dsub>
 8010e8c:	a356      	add	r3, pc, #344	; (adr r3, 8010fe8 <__ieee754_pow+0x3a0>)
 8010e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e92:	4604      	mov	r4, r0
 8010e94:	460d      	mov	r5, r1
 8010e96:	f7ef fbbf 	bl	8000618 <__aeabi_dmul>
 8010e9a:	a355      	add	r3, pc, #340	; (adr r3, 8010ff0 <__ieee754_pow+0x3a8>)
 8010e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea0:	4606      	mov	r6, r0
 8010ea2:	460f      	mov	r7, r1
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	4629      	mov	r1, r5
 8010ea8:	f7ef fbb6 	bl	8000618 <__aeabi_dmul>
 8010eac:	4b5b      	ldr	r3, [pc, #364]	; (801101c <__ieee754_pow+0x3d4>)
 8010eae:	4682      	mov	sl, r0
 8010eb0:	468b      	mov	fp, r1
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	4629      	mov	r1, r5
 8010eb8:	f7ef fbae 	bl	8000618 <__aeabi_dmul>
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	460b      	mov	r3, r1
 8010ec0:	a14d      	add	r1, pc, #308	; (adr r1, 8010ff8 <__ieee754_pow+0x3b0>)
 8010ec2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ec6:	f7ef f9ef 	bl	80002a8 <__aeabi_dsub>
 8010eca:	4622      	mov	r2, r4
 8010ecc:	462b      	mov	r3, r5
 8010ece:	f7ef fba3 	bl	8000618 <__aeabi_dmul>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	460b      	mov	r3, r1
 8010ed6:	2000      	movs	r0, #0
 8010ed8:	4951      	ldr	r1, [pc, #324]	; (8011020 <__ieee754_pow+0x3d8>)
 8010eda:	f7ef f9e5 	bl	80002a8 <__aeabi_dsub>
 8010ede:	4622      	mov	r2, r4
 8010ee0:	4680      	mov	r8, r0
 8010ee2:	4689      	mov	r9, r1
 8010ee4:	462b      	mov	r3, r5
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	4629      	mov	r1, r5
 8010eea:	f7ef fb95 	bl	8000618 <__aeabi_dmul>
 8010eee:	4602      	mov	r2, r0
 8010ef0:	460b      	mov	r3, r1
 8010ef2:	4640      	mov	r0, r8
 8010ef4:	4649      	mov	r1, r9
 8010ef6:	f7ef fb8f 	bl	8000618 <__aeabi_dmul>
 8010efa:	a341      	add	r3, pc, #260	; (adr r3, 8011000 <__ieee754_pow+0x3b8>)
 8010efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f00:	f7ef fb8a 	bl	8000618 <__aeabi_dmul>
 8010f04:	4602      	mov	r2, r0
 8010f06:	460b      	mov	r3, r1
 8010f08:	4650      	mov	r0, sl
 8010f0a:	4659      	mov	r1, fp
 8010f0c:	f7ef f9cc 	bl	80002a8 <__aeabi_dsub>
 8010f10:	4602      	mov	r2, r0
 8010f12:	460b      	mov	r3, r1
 8010f14:	4680      	mov	r8, r0
 8010f16:	4689      	mov	r9, r1
 8010f18:	4630      	mov	r0, r6
 8010f1a:	4639      	mov	r1, r7
 8010f1c:	f7ef f9c6 	bl	80002ac <__adddf3>
 8010f20:	2400      	movs	r4, #0
 8010f22:	4632      	mov	r2, r6
 8010f24:	463b      	mov	r3, r7
 8010f26:	4620      	mov	r0, r4
 8010f28:	460d      	mov	r5, r1
 8010f2a:	f7ef f9bd 	bl	80002a8 <__aeabi_dsub>
 8010f2e:	4602      	mov	r2, r0
 8010f30:	460b      	mov	r3, r1
 8010f32:	4640      	mov	r0, r8
 8010f34:	4649      	mov	r1, r9
 8010f36:	f7ef f9b7 	bl	80002a8 <__aeabi_dsub>
 8010f3a:	9b00      	ldr	r3, [sp, #0]
 8010f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f3e:	3b01      	subs	r3, #1
 8010f40:	4313      	orrs	r3, r2
 8010f42:	4682      	mov	sl, r0
 8010f44:	468b      	mov	fp, r1
 8010f46:	f040 81f1 	bne.w	801132c <__ieee754_pow+0x6e4>
 8010f4a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011008 <__ieee754_pow+0x3c0>
 8010f4e:	eeb0 8a47 	vmov.f32	s16, s14
 8010f52:	eef0 8a67 	vmov.f32	s17, s15
 8010f56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010f5a:	2600      	movs	r6, #0
 8010f5c:	4632      	mov	r2, r6
 8010f5e:	463b      	mov	r3, r7
 8010f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f64:	f7ef f9a0 	bl	80002a8 <__aeabi_dsub>
 8010f68:	4622      	mov	r2, r4
 8010f6a:	462b      	mov	r3, r5
 8010f6c:	f7ef fb54 	bl	8000618 <__aeabi_dmul>
 8010f70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010f74:	4680      	mov	r8, r0
 8010f76:	4689      	mov	r9, r1
 8010f78:	4650      	mov	r0, sl
 8010f7a:	4659      	mov	r1, fp
 8010f7c:	f7ef fb4c 	bl	8000618 <__aeabi_dmul>
 8010f80:	4602      	mov	r2, r0
 8010f82:	460b      	mov	r3, r1
 8010f84:	4640      	mov	r0, r8
 8010f86:	4649      	mov	r1, r9
 8010f88:	f7ef f990 	bl	80002ac <__adddf3>
 8010f8c:	4632      	mov	r2, r6
 8010f8e:	463b      	mov	r3, r7
 8010f90:	4680      	mov	r8, r0
 8010f92:	4689      	mov	r9, r1
 8010f94:	4620      	mov	r0, r4
 8010f96:	4629      	mov	r1, r5
 8010f98:	f7ef fb3e 	bl	8000618 <__aeabi_dmul>
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	4604      	mov	r4, r0
 8010fa0:	460d      	mov	r5, r1
 8010fa2:	4602      	mov	r2, r0
 8010fa4:	4649      	mov	r1, r9
 8010fa6:	4640      	mov	r0, r8
 8010fa8:	f7ef f980 	bl	80002ac <__adddf3>
 8010fac:	4b1d      	ldr	r3, [pc, #116]	; (8011024 <__ieee754_pow+0x3dc>)
 8010fae:	4299      	cmp	r1, r3
 8010fb0:	ec45 4b19 	vmov	d9, r4, r5
 8010fb4:	4606      	mov	r6, r0
 8010fb6:	460f      	mov	r7, r1
 8010fb8:	468b      	mov	fp, r1
 8010fba:	f340 82fe 	ble.w	80115ba <__ieee754_pow+0x972>
 8010fbe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010fc2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010fc6:	4303      	orrs	r3, r0
 8010fc8:	f000 81f0 	beq.w	80113ac <__ieee754_pow+0x764>
 8010fcc:	a310      	add	r3, pc, #64	; (adr r3, 8011010 <__ieee754_pow+0x3c8>)
 8010fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd2:	ec51 0b18 	vmov	r0, r1, d8
 8010fd6:	f7ef fb1f 	bl	8000618 <__aeabi_dmul>
 8010fda:	a30d      	add	r3, pc, #52	; (adr r3, 8011010 <__ieee754_pow+0x3c8>)
 8010fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe0:	e6cb      	b.n	8010d7a <__ieee754_pow+0x132>
 8010fe2:	bf00      	nop
 8010fe4:	f3af 8000 	nop.w
 8010fe8:	60000000 	.word	0x60000000
 8010fec:	3ff71547 	.word	0x3ff71547
 8010ff0:	f85ddf44 	.word	0xf85ddf44
 8010ff4:	3e54ae0b 	.word	0x3e54ae0b
 8010ff8:	55555555 	.word	0x55555555
 8010ffc:	3fd55555 	.word	0x3fd55555
 8011000:	652b82fe 	.word	0x652b82fe
 8011004:	3ff71547 	.word	0x3ff71547
 8011008:	00000000 	.word	0x00000000
 801100c:	bff00000 	.word	0xbff00000
 8011010:	8800759c 	.word	0x8800759c
 8011014:	7e37e43c 	.word	0x7e37e43c
 8011018:	3ff00000 	.word	0x3ff00000
 801101c:	3fd00000 	.word	0x3fd00000
 8011020:	3fe00000 	.word	0x3fe00000
 8011024:	408fffff 	.word	0x408fffff
 8011028:	4bd7      	ldr	r3, [pc, #860]	; (8011388 <__ieee754_pow+0x740>)
 801102a:	ea03 0309 	and.w	r3, r3, r9
 801102e:	2200      	movs	r2, #0
 8011030:	b92b      	cbnz	r3, 801103e <__ieee754_pow+0x3f6>
 8011032:	4bd6      	ldr	r3, [pc, #856]	; (801138c <__ieee754_pow+0x744>)
 8011034:	f7ef faf0 	bl	8000618 <__aeabi_dmul>
 8011038:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801103c:	460c      	mov	r4, r1
 801103e:	1523      	asrs	r3, r4, #20
 8011040:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011044:	4413      	add	r3, r2
 8011046:	9309      	str	r3, [sp, #36]	; 0x24
 8011048:	4bd1      	ldr	r3, [pc, #836]	; (8011390 <__ieee754_pow+0x748>)
 801104a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801104e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011052:	429c      	cmp	r4, r3
 8011054:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011058:	dd08      	ble.n	801106c <__ieee754_pow+0x424>
 801105a:	4bce      	ldr	r3, [pc, #824]	; (8011394 <__ieee754_pow+0x74c>)
 801105c:	429c      	cmp	r4, r3
 801105e:	f340 8163 	ble.w	8011328 <__ieee754_pow+0x6e0>
 8011062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011064:	3301      	adds	r3, #1
 8011066:	9309      	str	r3, [sp, #36]	; 0x24
 8011068:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801106c:	2400      	movs	r4, #0
 801106e:	00e3      	lsls	r3, r4, #3
 8011070:	930b      	str	r3, [sp, #44]	; 0x2c
 8011072:	4bc9      	ldr	r3, [pc, #804]	; (8011398 <__ieee754_pow+0x750>)
 8011074:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011078:	ed93 7b00 	vldr	d7, [r3]
 801107c:	4629      	mov	r1, r5
 801107e:	ec53 2b17 	vmov	r2, r3, d7
 8011082:	eeb0 8a47 	vmov.f32	s16, s14
 8011086:	eef0 8a67 	vmov.f32	s17, s15
 801108a:	4682      	mov	sl, r0
 801108c:	f7ef f90c 	bl	80002a8 <__aeabi_dsub>
 8011090:	4652      	mov	r2, sl
 8011092:	4606      	mov	r6, r0
 8011094:	460f      	mov	r7, r1
 8011096:	462b      	mov	r3, r5
 8011098:	ec51 0b18 	vmov	r0, r1, d8
 801109c:	f7ef f906 	bl	80002ac <__adddf3>
 80110a0:	4602      	mov	r2, r0
 80110a2:	460b      	mov	r3, r1
 80110a4:	2000      	movs	r0, #0
 80110a6:	49bd      	ldr	r1, [pc, #756]	; (801139c <__ieee754_pow+0x754>)
 80110a8:	f7ef fbe0 	bl	800086c <__aeabi_ddiv>
 80110ac:	ec41 0b19 	vmov	d9, r0, r1
 80110b0:	4602      	mov	r2, r0
 80110b2:	460b      	mov	r3, r1
 80110b4:	4630      	mov	r0, r6
 80110b6:	4639      	mov	r1, r7
 80110b8:	f7ef faae 	bl	8000618 <__aeabi_dmul>
 80110bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80110c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80110c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80110c8:	2300      	movs	r3, #0
 80110ca:	9304      	str	r3, [sp, #16]
 80110cc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80110d0:	46ab      	mov	fp, r5
 80110d2:	106d      	asrs	r5, r5, #1
 80110d4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80110d8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80110dc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80110e0:	2200      	movs	r2, #0
 80110e2:	4640      	mov	r0, r8
 80110e4:	4649      	mov	r1, r9
 80110e6:	4614      	mov	r4, r2
 80110e8:	461d      	mov	r5, r3
 80110ea:	f7ef fa95 	bl	8000618 <__aeabi_dmul>
 80110ee:	4602      	mov	r2, r0
 80110f0:	460b      	mov	r3, r1
 80110f2:	4630      	mov	r0, r6
 80110f4:	4639      	mov	r1, r7
 80110f6:	f7ef f8d7 	bl	80002a8 <__aeabi_dsub>
 80110fa:	ec53 2b18 	vmov	r2, r3, d8
 80110fe:	4606      	mov	r6, r0
 8011100:	460f      	mov	r7, r1
 8011102:	4620      	mov	r0, r4
 8011104:	4629      	mov	r1, r5
 8011106:	f7ef f8cf 	bl	80002a8 <__aeabi_dsub>
 801110a:	4602      	mov	r2, r0
 801110c:	460b      	mov	r3, r1
 801110e:	4650      	mov	r0, sl
 8011110:	4659      	mov	r1, fp
 8011112:	f7ef f8c9 	bl	80002a8 <__aeabi_dsub>
 8011116:	4642      	mov	r2, r8
 8011118:	464b      	mov	r3, r9
 801111a:	f7ef fa7d 	bl	8000618 <__aeabi_dmul>
 801111e:	4602      	mov	r2, r0
 8011120:	460b      	mov	r3, r1
 8011122:	4630      	mov	r0, r6
 8011124:	4639      	mov	r1, r7
 8011126:	f7ef f8bf 	bl	80002a8 <__aeabi_dsub>
 801112a:	ec53 2b19 	vmov	r2, r3, d9
 801112e:	f7ef fa73 	bl	8000618 <__aeabi_dmul>
 8011132:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011136:	ec41 0b18 	vmov	d8, r0, r1
 801113a:	4610      	mov	r0, r2
 801113c:	4619      	mov	r1, r3
 801113e:	f7ef fa6b 	bl	8000618 <__aeabi_dmul>
 8011142:	a37d      	add	r3, pc, #500	; (adr r3, 8011338 <__ieee754_pow+0x6f0>)
 8011144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011148:	4604      	mov	r4, r0
 801114a:	460d      	mov	r5, r1
 801114c:	f7ef fa64 	bl	8000618 <__aeabi_dmul>
 8011150:	a37b      	add	r3, pc, #492	; (adr r3, 8011340 <__ieee754_pow+0x6f8>)
 8011152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011156:	f7ef f8a9 	bl	80002ac <__adddf3>
 801115a:	4622      	mov	r2, r4
 801115c:	462b      	mov	r3, r5
 801115e:	f7ef fa5b 	bl	8000618 <__aeabi_dmul>
 8011162:	a379      	add	r3, pc, #484	; (adr r3, 8011348 <__ieee754_pow+0x700>)
 8011164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011168:	f7ef f8a0 	bl	80002ac <__adddf3>
 801116c:	4622      	mov	r2, r4
 801116e:	462b      	mov	r3, r5
 8011170:	f7ef fa52 	bl	8000618 <__aeabi_dmul>
 8011174:	a376      	add	r3, pc, #472	; (adr r3, 8011350 <__ieee754_pow+0x708>)
 8011176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117a:	f7ef f897 	bl	80002ac <__adddf3>
 801117e:	4622      	mov	r2, r4
 8011180:	462b      	mov	r3, r5
 8011182:	f7ef fa49 	bl	8000618 <__aeabi_dmul>
 8011186:	a374      	add	r3, pc, #464	; (adr r3, 8011358 <__ieee754_pow+0x710>)
 8011188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118c:	f7ef f88e 	bl	80002ac <__adddf3>
 8011190:	4622      	mov	r2, r4
 8011192:	462b      	mov	r3, r5
 8011194:	f7ef fa40 	bl	8000618 <__aeabi_dmul>
 8011198:	a371      	add	r3, pc, #452	; (adr r3, 8011360 <__ieee754_pow+0x718>)
 801119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119e:	f7ef f885 	bl	80002ac <__adddf3>
 80111a2:	4622      	mov	r2, r4
 80111a4:	4606      	mov	r6, r0
 80111a6:	460f      	mov	r7, r1
 80111a8:	462b      	mov	r3, r5
 80111aa:	4620      	mov	r0, r4
 80111ac:	4629      	mov	r1, r5
 80111ae:	f7ef fa33 	bl	8000618 <__aeabi_dmul>
 80111b2:	4602      	mov	r2, r0
 80111b4:	460b      	mov	r3, r1
 80111b6:	4630      	mov	r0, r6
 80111b8:	4639      	mov	r1, r7
 80111ba:	f7ef fa2d 	bl	8000618 <__aeabi_dmul>
 80111be:	4642      	mov	r2, r8
 80111c0:	4604      	mov	r4, r0
 80111c2:	460d      	mov	r5, r1
 80111c4:	464b      	mov	r3, r9
 80111c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80111ca:	f7ef f86f 	bl	80002ac <__adddf3>
 80111ce:	ec53 2b18 	vmov	r2, r3, d8
 80111d2:	f7ef fa21 	bl	8000618 <__aeabi_dmul>
 80111d6:	4622      	mov	r2, r4
 80111d8:	462b      	mov	r3, r5
 80111da:	f7ef f867 	bl	80002ac <__adddf3>
 80111de:	4642      	mov	r2, r8
 80111e0:	4682      	mov	sl, r0
 80111e2:	468b      	mov	fp, r1
 80111e4:	464b      	mov	r3, r9
 80111e6:	4640      	mov	r0, r8
 80111e8:	4649      	mov	r1, r9
 80111ea:	f7ef fa15 	bl	8000618 <__aeabi_dmul>
 80111ee:	4b6c      	ldr	r3, [pc, #432]	; (80113a0 <__ieee754_pow+0x758>)
 80111f0:	2200      	movs	r2, #0
 80111f2:	4606      	mov	r6, r0
 80111f4:	460f      	mov	r7, r1
 80111f6:	f7ef f859 	bl	80002ac <__adddf3>
 80111fa:	4652      	mov	r2, sl
 80111fc:	465b      	mov	r3, fp
 80111fe:	f7ef f855 	bl	80002ac <__adddf3>
 8011202:	9c04      	ldr	r4, [sp, #16]
 8011204:	460d      	mov	r5, r1
 8011206:	4622      	mov	r2, r4
 8011208:	460b      	mov	r3, r1
 801120a:	4640      	mov	r0, r8
 801120c:	4649      	mov	r1, r9
 801120e:	f7ef fa03 	bl	8000618 <__aeabi_dmul>
 8011212:	4b63      	ldr	r3, [pc, #396]	; (80113a0 <__ieee754_pow+0x758>)
 8011214:	4680      	mov	r8, r0
 8011216:	4689      	mov	r9, r1
 8011218:	2200      	movs	r2, #0
 801121a:	4620      	mov	r0, r4
 801121c:	4629      	mov	r1, r5
 801121e:	f7ef f843 	bl	80002a8 <__aeabi_dsub>
 8011222:	4632      	mov	r2, r6
 8011224:	463b      	mov	r3, r7
 8011226:	f7ef f83f 	bl	80002a8 <__aeabi_dsub>
 801122a:	4602      	mov	r2, r0
 801122c:	460b      	mov	r3, r1
 801122e:	4650      	mov	r0, sl
 8011230:	4659      	mov	r1, fp
 8011232:	f7ef f839 	bl	80002a8 <__aeabi_dsub>
 8011236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801123a:	f7ef f9ed 	bl	8000618 <__aeabi_dmul>
 801123e:	4622      	mov	r2, r4
 8011240:	4606      	mov	r6, r0
 8011242:	460f      	mov	r7, r1
 8011244:	462b      	mov	r3, r5
 8011246:	ec51 0b18 	vmov	r0, r1, d8
 801124a:	f7ef f9e5 	bl	8000618 <__aeabi_dmul>
 801124e:	4602      	mov	r2, r0
 8011250:	460b      	mov	r3, r1
 8011252:	4630      	mov	r0, r6
 8011254:	4639      	mov	r1, r7
 8011256:	f7ef f829 	bl	80002ac <__adddf3>
 801125a:	4606      	mov	r6, r0
 801125c:	460f      	mov	r7, r1
 801125e:	4602      	mov	r2, r0
 8011260:	460b      	mov	r3, r1
 8011262:	4640      	mov	r0, r8
 8011264:	4649      	mov	r1, r9
 8011266:	f7ef f821 	bl	80002ac <__adddf3>
 801126a:	9c04      	ldr	r4, [sp, #16]
 801126c:	a33e      	add	r3, pc, #248	; (adr r3, 8011368 <__ieee754_pow+0x720>)
 801126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011272:	4620      	mov	r0, r4
 8011274:	460d      	mov	r5, r1
 8011276:	f7ef f9cf 	bl	8000618 <__aeabi_dmul>
 801127a:	4642      	mov	r2, r8
 801127c:	ec41 0b18 	vmov	d8, r0, r1
 8011280:	464b      	mov	r3, r9
 8011282:	4620      	mov	r0, r4
 8011284:	4629      	mov	r1, r5
 8011286:	f7ef f80f 	bl	80002a8 <__aeabi_dsub>
 801128a:	4602      	mov	r2, r0
 801128c:	460b      	mov	r3, r1
 801128e:	4630      	mov	r0, r6
 8011290:	4639      	mov	r1, r7
 8011292:	f7ef f809 	bl	80002a8 <__aeabi_dsub>
 8011296:	a336      	add	r3, pc, #216	; (adr r3, 8011370 <__ieee754_pow+0x728>)
 8011298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801129c:	f7ef f9bc 	bl	8000618 <__aeabi_dmul>
 80112a0:	a335      	add	r3, pc, #212	; (adr r3, 8011378 <__ieee754_pow+0x730>)
 80112a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a6:	4606      	mov	r6, r0
 80112a8:	460f      	mov	r7, r1
 80112aa:	4620      	mov	r0, r4
 80112ac:	4629      	mov	r1, r5
 80112ae:	f7ef f9b3 	bl	8000618 <__aeabi_dmul>
 80112b2:	4602      	mov	r2, r0
 80112b4:	460b      	mov	r3, r1
 80112b6:	4630      	mov	r0, r6
 80112b8:	4639      	mov	r1, r7
 80112ba:	f7ee fff7 	bl	80002ac <__adddf3>
 80112be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80112c0:	4b38      	ldr	r3, [pc, #224]	; (80113a4 <__ieee754_pow+0x75c>)
 80112c2:	4413      	add	r3, r2
 80112c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c8:	f7ee fff0 	bl	80002ac <__adddf3>
 80112cc:	4682      	mov	sl, r0
 80112ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112d0:	468b      	mov	fp, r1
 80112d2:	f7ef f937 	bl	8000544 <__aeabi_i2d>
 80112d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80112d8:	4b33      	ldr	r3, [pc, #204]	; (80113a8 <__ieee754_pow+0x760>)
 80112da:	4413      	add	r3, r2
 80112dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80112e0:	4606      	mov	r6, r0
 80112e2:	460f      	mov	r7, r1
 80112e4:	4652      	mov	r2, sl
 80112e6:	465b      	mov	r3, fp
 80112e8:	ec51 0b18 	vmov	r0, r1, d8
 80112ec:	f7ee ffde 	bl	80002ac <__adddf3>
 80112f0:	4642      	mov	r2, r8
 80112f2:	464b      	mov	r3, r9
 80112f4:	f7ee ffda 	bl	80002ac <__adddf3>
 80112f8:	4632      	mov	r2, r6
 80112fa:	463b      	mov	r3, r7
 80112fc:	f7ee ffd6 	bl	80002ac <__adddf3>
 8011300:	9c04      	ldr	r4, [sp, #16]
 8011302:	4632      	mov	r2, r6
 8011304:	463b      	mov	r3, r7
 8011306:	4620      	mov	r0, r4
 8011308:	460d      	mov	r5, r1
 801130a:	f7ee ffcd 	bl	80002a8 <__aeabi_dsub>
 801130e:	4642      	mov	r2, r8
 8011310:	464b      	mov	r3, r9
 8011312:	f7ee ffc9 	bl	80002a8 <__aeabi_dsub>
 8011316:	ec53 2b18 	vmov	r2, r3, d8
 801131a:	f7ee ffc5 	bl	80002a8 <__aeabi_dsub>
 801131e:	4602      	mov	r2, r0
 8011320:	460b      	mov	r3, r1
 8011322:	4650      	mov	r0, sl
 8011324:	4659      	mov	r1, fp
 8011326:	e606      	b.n	8010f36 <__ieee754_pow+0x2ee>
 8011328:	2401      	movs	r4, #1
 801132a:	e6a0      	b.n	801106e <__ieee754_pow+0x426>
 801132c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011380 <__ieee754_pow+0x738>
 8011330:	e60d      	b.n	8010f4e <__ieee754_pow+0x306>
 8011332:	bf00      	nop
 8011334:	f3af 8000 	nop.w
 8011338:	4a454eef 	.word	0x4a454eef
 801133c:	3fca7e28 	.word	0x3fca7e28
 8011340:	93c9db65 	.word	0x93c9db65
 8011344:	3fcd864a 	.word	0x3fcd864a
 8011348:	a91d4101 	.word	0xa91d4101
 801134c:	3fd17460 	.word	0x3fd17460
 8011350:	518f264d 	.word	0x518f264d
 8011354:	3fd55555 	.word	0x3fd55555
 8011358:	db6fabff 	.word	0xdb6fabff
 801135c:	3fdb6db6 	.word	0x3fdb6db6
 8011360:	33333303 	.word	0x33333303
 8011364:	3fe33333 	.word	0x3fe33333
 8011368:	e0000000 	.word	0xe0000000
 801136c:	3feec709 	.word	0x3feec709
 8011370:	dc3a03fd 	.word	0xdc3a03fd
 8011374:	3feec709 	.word	0x3feec709
 8011378:	145b01f5 	.word	0x145b01f5
 801137c:	be3e2fe0 	.word	0xbe3e2fe0
 8011380:	00000000 	.word	0x00000000
 8011384:	3ff00000 	.word	0x3ff00000
 8011388:	7ff00000 	.word	0x7ff00000
 801138c:	43400000 	.word	0x43400000
 8011390:	0003988e 	.word	0x0003988e
 8011394:	000bb679 	.word	0x000bb679
 8011398:	08012fe0 	.word	0x08012fe0
 801139c:	3ff00000 	.word	0x3ff00000
 80113a0:	40080000 	.word	0x40080000
 80113a4:	08013000 	.word	0x08013000
 80113a8:	08012ff0 	.word	0x08012ff0
 80113ac:	a3b5      	add	r3, pc, #724	; (adr r3, 8011684 <__ieee754_pow+0xa3c>)
 80113ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b2:	4640      	mov	r0, r8
 80113b4:	4649      	mov	r1, r9
 80113b6:	f7ee ff79 	bl	80002ac <__adddf3>
 80113ba:	4622      	mov	r2, r4
 80113bc:	ec41 0b1a 	vmov	d10, r0, r1
 80113c0:	462b      	mov	r3, r5
 80113c2:	4630      	mov	r0, r6
 80113c4:	4639      	mov	r1, r7
 80113c6:	f7ee ff6f 	bl	80002a8 <__aeabi_dsub>
 80113ca:	4602      	mov	r2, r0
 80113cc:	460b      	mov	r3, r1
 80113ce:	ec51 0b1a 	vmov	r0, r1, d10
 80113d2:	f7ef fbb1 	bl	8000b38 <__aeabi_dcmpgt>
 80113d6:	2800      	cmp	r0, #0
 80113d8:	f47f adf8 	bne.w	8010fcc <__ieee754_pow+0x384>
 80113dc:	4aa4      	ldr	r2, [pc, #656]	; (8011670 <__ieee754_pow+0xa28>)
 80113de:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80113e2:	4293      	cmp	r3, r2
 80113e4:	f340 810b 	ble.w	80115fe <__ieee754_pow+0x9b6>
 80113e8:	151b      	asrs	r3, r3, #20
 80113ea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80113ee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80113f2:	fa4a f303 	asr.w	r3, sl, r3
 80113f6:	445b      	add	r3, fp
 80113f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80113fc:	4e9d      	ldr	r6, [pc, #628]	; (8011674 <__ieee754_pow+0xa2c>)
 80113fe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011402:	4116      	asrs	r6, r2
 8011404:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011408:	2000      	movs	r0, #0
 801140a:	ea23 0106 	bic.w	r1, r3, r6
 801140e:	f1c2 0214 	rsb	r2, r2, #20
 8011412:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011416:	fa4a fa02 	asr.w	sl, sl, r2
 801141a:	f1bb 0f00 	cmp.w	fp, #0
 801141e:	4602      	mov	r2, r0
 8011420:	460b      	mov	r3, r1
 8011422:	4620      	mov	r0, r4
 8011424:	4629      	mov	r1, r5
 8011426:	bfb8      	it	lt
 8011428:	f1ca 0a00 	rsblt	sl, sl, #0
 801142c:	f7ee ff3c 	bl	80002a8 <__aeabi_dsub>
 8011430:	ec41 0b19 	vmov	d9, r0, r1
 8011434:	4642      	mov	r2, r8
 8011436:	464b      	mov	r3, r9
 8011438:	ec51 0b19 	vmov	r0, r1, d9
 801143c:	f7ee ff36 	bl	80002ac <__adddf3>
 8011440:	2400      	movs	r4, #0
 8011442:	a379      	add	r3, pc, #484	; (adr r3, 8011628 <__ieee754_pow+0x9e0>)
 8011444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011448:	4620      	mov	r0, r4
 801144a:	460d      	mov	r5, r1
 801144c:	f7ef f8e4 	bl	8000618 <__aeabi_dmul>
 8011450:	ec53 2b19 	vmov	r2, r3, d9
 8011454:	4606      	mov	r6, r0
 8011456:	460f      	mov	r7, r1
 8011458:	4620      	mov	r0, r4
 801145a:	4629      	mov	r1, r5
 801145c:	f7ee ff24 	bl	80002a8 <__aeabi_dsub>
 8011460:	4602      	mov	r2, r0
 8011462:	460b      	mov	r3, r1
 8011464:	4640      	mov	r0, r8
 8011466:	4649      	mov	r1, r9
 8011468:	f7ee ff1e 	bl	80002a8 <__aeabi_dsub>
 801146c:	a370      	add	r3, pc, #448	; (adr r3, 8011630 <__ieee754_pow+0x9e8>)
 801146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011472:	f7ef f8d1 	bl	8000618 <__aeabi_dmul>
 8011476:	a370      	add	r3, pc, #448	; (adr r3, 8011638 <__ieee754_pow+0x9f0>)
 8011478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147c:	4680      	mov	r8, r0
 801147e:	4689      	mov	r9, r1
 8011480:	4620      	mov	r0, r4
 8011482:	4629      	mov	r1, r5
 8011484:	f7ef f8c8 	bl	8000618 <__aeabi_dmul>
 8011488:	4602      	mov	r2, r0
 801148a:	460b      	mov	r3, r1
 801148c:	4640      	mov	r0, r8
 801148e:	4649      	mov	r1, r9
 8011490:	f7ee ff0c 	bl	80002ac <__adddf3>
 8011494:	4604      	mov	r4, r0
 8011496:	460d      	mov	r5, r1
 8011498:	4602      	mov	r2, r0
 801149a:	460b      	mov	r3, r1
 801149c:	4630      	mov	r0, r6
 801149e:	4639      	mov	r1, r7
 80114a0:	f7ee ff04 	bl	80002ac <__adddf3>
 80114a4:	4632      	mov	r2, r6
 80114a6:	463b      	mov	r3, r7
 80114a8:	4680      	mov	r8, r0
 80114aa:	4689      	mov	r9, r1
 80114ac:	f7ee fefc 	bl	80002a8 <__aeabi_dsub>
 80114b0:	4602      	mov	r2, r0
 80114b2:	460b      	mov	r3, r1
 80114b4:	4620      	mov	r0, r4
 80114b6:	4629      	mov	r1, r5
 80114b8:	f7ee fef6 	bl	80002a8 <__aeabi_dsub>
 80114bc:	4642      	mov	r2, r8
 80114be:	4606      	mov	r6, r0
 80114c0:	460f      	mov	r7, r1
 80114c2:	464b      	mov	r3, r9
 80114c4:	4640      	mov	r0, r8
 80114c6:	4649      	mov	r1, r9
 80114c8:	f7ef f8a6 	bl	8000618 <__aeabi_dmul>
 80114cc:	a35c      	add	r3, pc, #368	; (adr r3, 8011640 <__ieee754_pow+0x9f8>)
 80114ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d2:	4604      	mov	r4, r0
 80114d4:	460d      	mov	r5, r1
 80114d6:	f7ef f89f 	bl	8000618 <__aeabi_dmul>
 80114da:	a35b      	add	r3, pc, #364	; (adr r3, 8011648 <__ieee754_pow+0xa00>)
 80114dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e0:	f7ee fee2 	bl	80002a8 <__aeabi_dsub>
 80114e4:	4622      	mov	r2, r4
 80114e6:	462b      	mov	r3, r5
 80114e8:	f7ef f896 	bl	8000618 <__aeabi_dmul>
 80114ec:	a358      	add	r3, pc, #352	; (adr r3, 8011650 <__ieee754_pow+0xa08>)
 80114ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f2:	f7ee fedb 	bl	80002ac <__adddf3>
 80114f6:	4622      	mov	r2, r4
 80114f8:	462b      	mov	r3, r5
 80114fa:	f7ef f88d 	bl	8000618 <__aeabi_dmul>
 80114fe:	a356      	add	r3, pc, #344	; (adr r3, 8011658 <__ieee754_pow+0xa10>)
 8011500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011504:	f7ee fed0 	bl	80002a8 <__aeabi_dsub>
 8011508:	4622      	mov	r2, r4
 801150a:	462b      	mov	r3, r5
 801150c:	f7ef f884 	bl	8000618 <__aeabi_dmul>
 8011510:	a353      	add	r3, pc, #332	; (adr r3, 8011660 <__ieee754_pow+0xa18>)
 8011512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011516:	f7ee fec9 	bl	80002ac <__adddf3>
 801151a:	4622      	mov	r2, r4
 801151c:	462b      	mov	r3, r5
 801151e:	f7ef f87b 	bl	8000618 <__aeabi_dmul>
 8011522:	4602      	mov	r2, r0
 8011524:	460b      	mov	r3, r1
 8011526:	4640      	mov	r0, r8
 8011528:	4649      	mov	r1, r9
 801152a:	f7ee febd 	bl	80002a8 <__aeabi_dsub>
 801152e:	4604      	mov	r4, r0
 8011530:	460d      	mov	r5, r1
 8011532:	4602      	mov	r2, r0
 8011534:	460b      	mov	r3, r1
 8011536:	4640      	mov	r0, r8
 8011538:	4649      	mov	r1, r9
 801153a:	f7ef f86d 	bl	8000618 <__aeabi_dmul>
 801153e:	2200      	movs	r2, #0
 8011540:	ec41 0b19 	vmov	d9, r0, r1
 8011544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011548:	4620      	mov	r0, r4
 801154a:	4629      	mov	r1, r5
 801154c:	f7ee feac 	bl	80002a8 <__aeabi_dsub>
 8011550:	4602      	mov	r2, r0
 8011552:	460b      	mov	r3, r1
 8011554:	ec51 0b19 	vmov	r0, r1, d9
 8011558:	f7ef f988 	bl	800086c <__aeabi_ddiv>
 801155c:	4632      	mov	r2, r6
 801155e:	4604      	mov	r4, r0
 8011560:	460d      	mov	r5, r1
 8011562:	463b      	mov	r3, r7
 8011564:	4640      	mov	r0, r8
 8011566:	4649      	mov	r1, r9
 8011568:	f7ef f856 	bl	8000618 <__aeabi_dmul>
 801156c:	4632      	mov	r2, r6
 801156e:	463b      	mov	r3, r7
 8011570:	f7ee fe9c 	bl	80002ac <__adddf3>
 8011574:	4602      	mov	r2, r0
 8011576:	460b      	mov	r3, r1
 8011578:	4620      	mov	r0, r4
 801157a:	4629      	mov	r1, r5
 801157c:	f7ee fe94 	bl	80002a8 <__aeabi_dsub>
 8011580:	4642      	mov	r2, r8
 8011582:	464b      	mov	r3, r9
 8011584:	f7ee fe90 	bl	80002a8 <__aeabi_dsub>
 8011588:	460b      	mov	r3, r1
 801158a:	4602      	mov	r2, r0
 801158c:	493a      	ldr	r1, [pc, #232]	; (8011678 <__ieee754_pow+0xa30>)
 801158e:	2000      	movs	r0, #0
 8011590:	f7ee fe8a 	bl	80002a8 <__aeabi_dsub>
 8011594:	e9cd 0100 	strd	r0, r1, [sp]
 8011598:	9b01      	ldr	r3, [sp, #4]
 801159a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801159e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115a2:	da2f      	bge.n	8011604 <__ieee754_pow+0x9bc>
 80115a4:	4650      	mov	r0, sl
 80115a6:	ed9d 0b00 	vldr	d0, [sp]
 80115aa:	f001 fac1 	bl	8012b30 <scalbn>
 80115ae:	ec51 0b10 	vmov	r0, r1, d0
 80115b2:	ec53 2b18 	vmov	r2, r3, d8
 80115b6:	f7ff bbe0 	b.w	8010d7a <__ieee754_pow+0x132>
 80115ba:	4b30      	ldr	r3, [pc, #192]	; (801167c <__ieee754_pow+0xa34>)
 80115bc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80115c0:	429e      	cmp	r6, r3
 80115c2:	f77f af0b 	ble.w	80113dc <__ieee754_pow+0x794>
 80115c6:	4b2e      	ldr	r3, [pc, #184]	; (8011680 <__ieee754_pow+0xa38>)
 80115c8:	440b      	add	r3, r1
 80115ca:	4303      	orrs	r3, r0
 80115cc:	d00b      	beq.n	80115e6 <__ieee754_pow+0x99e>
 80115ce:	a326      	add	r3, pc, #152	; (adr r3, 8011668 <__ieee754_pow+0xa20>)
 80115d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d4:	ec51 0b18 	vmov	r0, r1, d8
 80115d8:	f7ef f81e 	bl	8000618 <__aeabi_dmul>
 80115dc:	a322      	add	r3, pc, #136	; (adr r3, 8011668 <__ieee754_pow+0xa20>)
 80115de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e2:	f7ff bbca 	b.w	8010d7a <__ieee754_pow+0x132>
 80115e6:	4622      	mov	r2, r4
 80115e8:	462b      	mov	r3, r5
 80115ea:	f7ee fe5d 	bl	80002a8 <__aeabi_dsub>
 80115ee:	4642      	mov	r2, r8
 80115f0:	464b      	mov	r3, r9
 80115f2:	f7ef fa97 	bl	8000b24 <__aeabi_dcmpge>
 80115f6:	2800      	cmp	r0, #0
 80115f8:	f43f aef0 	beq.w	80113dc <__ieee754_pow+0x794>
 80115fc:	e7e7      	b.n	80115ce <__ieee754_pow+0x986>
 80115fe:	f04f 0a00 	mov.w	sl, #0
 8011602:	e717      	b.n	8011434 <__ieee754_pow+0x7ec>
 8011604:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011608:	4619      	mov	r1, r3
 801160a:	e7d2      	b.n	80115b2 <__ieee754_pow+0x96a>
 801160c:	491a      	ldr	r1, [pc, #104]	; (8011678 <__ieee754_pow+0xa30>)
 801160e:	2000      	movs	r0, #0
 8011610:	f7ff bb9e 	b.w	8010d50 <__ieee754_pow+0x108>
 8011614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011618:	f7ff bb9a 	b.w	8010d50 <__ieee754_pow+0x108>
 801161c:	9000      	str	r0, [sp, #0]
 801161e:	f7ff bb76 	b.w	8010d0e <__ieee754_pow+0xc6>
 8011622:	2100      	movs	r1, #0
 8011624:	f7ff bb60 	b.w	8010ce8 <__ieee754_pow+0xa0>
 8011628:	00000000 	.word	0x00000000
 801162c:	3fe62e43 	.word	0x3fe62e43
 8011630:	fefa39ef 	.word	0xfefa39ef
 8011634:	3fe62e42 	.word	0x3fe62e42
 8011638:	0ca86c39 	.word	0x0ca86c39
 801163c:	be205c61 	.word	0xbe205c61
 8011640:	72bea4d0 	.word	0x72bea4d0
 8011644:	3e663769 	.word	0x3e663769
 8011648:	c5d26bf1 	.word	0xc5d26bf1
 801164c:	3ebbbd41 	.word	0x3ebbbd41
 8011650:	af25de2c 	.word	0xaf25de2c
 8011654:	3f11566a 	.word	0x3f11566a
 8011658:	16bebd93 	.word	0x16bebd93
 801165c:	3f66c16c 	.word	0x3f66c16c
 8011660:	5555553e 	.word	0x5555553e
 8011664:	3fc55555 	.word	0x3fc55555
 8011668:	c2f8f359 	.word	0xc2f8f359
 801166c:	01a56e1f 	.word	0x01a56e1f
 8011670:	3fe00000 	.word	0x3fe00000
 8011674:	000fffff 	.word	0x000fffff
 8011678:	3ff00000 	.word	0x3ff00000
 801167c:	4090cbff 	.word	0x4090cbff
 8011680:	3f6f3400 	.word	0x3f6f3400
 8011684:	652b82fe 	.word	0x652b82fe
 8011688:	3c971547 	.word	0x3c971547
 801168c:	00000000 	.word	0x00000000

08011690 <__ieee754_rem_pio2>:
 8011690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011694:	ed2d 8b02 	vpush	{d8}
 8011698:	ec55 4b10 	vmov	r4, r5, d0
 801169c:	4bca      	ldr	r3, [pc, #808]	; (80119c8 <__ieee754_rem_pio2+0x338>)
 801169e:	b08b      	sub	sp, #44	; 0x2c
 80116a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80116a4:	4598      	cmp	r8, r3
 80116a6:	4682      	mov	sl, r0
 80116a8:	9502      	str	r5, [sp, #8]
 80116aa:	dc08      	bgt.n	80116be <__ieee754_rem_pio2+0x2e>
 80116ac:	2200      	movs	r2, #0
 80116ae:	2300      	movs	r3, #0
 80116b0:	ed80 0b00 	vstr	d0, [r0]
 80116b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80116b8:	f04f 0b00 	mov.w	fp, #0
 80116bc:	e028      	b.n	8011710 <__ieee754_rem_pio2+0x80>
 80116be:	4bc3      	ldr	r3, [pc, #780]	; (80119cc <__ieee754_rem_pio2+0x33c>)
 80116c0:	4598      	cmp	r8, r3
 80116c2:	dc78      	bgt.n	80117b6 <__ieee754_rem_pio2+0x126>
 80116c4:	9b02      	ldr	r3, [sp, #8]
 80116c6:	4ec2      	ldr	r6, [pc, #776]	; (80119d0 <__ieee754_rem_pio2+0x340>)
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	ee10 0a10 	vmov	r0, s0
 80116ce:	a3b0      	add	r3, pc, #704	; (adr r3, 8011990 <__ieee754_rem_pio2+0x300>)
 80116d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d4:	4629      	mov	r1, r5
 80116d6:	dd39      	ble.n	801174c <__ieee754_rem_pio2+0xbc>
 80116d8:	f7ee fde6 	bl	80002a8 <__aeabi_dsub>
 80116dc:	45b0      	cmp	r8, r6
 80116de:	4604      	mov	r4, r0
 80116e0:	460d      	mov	r5, r1
 80116e2:	d01b      	beq.n	801171c <__ieee754_rem_pio2+0x8c>
 80116e4:	a3ac      	add	r3, pc, #688	; (adr r3, 8011998 <__ieee754_rem_pio2+0x308>)
 80116e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ea:	f7ee fddd 	bl	80002a8 <__aeabi_dsub>
 80116ee:	4602      	mov	r2, r0
 80116f0:	460b      	mov	r3, r1
 80116f2:	e9ca 2300 	strd	r2, r3, [sl]
 80116f6:	4620      	mov	r0, r4
 80116f8:	4629      	mov	r1, r5
 80116fa:	f7ee fdd5 	bl	80002a8 <__aeabi_dsub>
 80116fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8011998 <__ieee754_rem_pio2+0x308>)
 8011700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011704:	f7ee fdd0 	bl	80002a8 <__aeabi_dsub>
 8011708:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801170c:	f04f 0b01 	mov.w	fp, #1
 8011710:	4658      	mov	r0, fp
 8011712:	b00b      	add	sp, #44	; 0x2c
 8011714:	ecbd 8b02 	vpop	{d8}
 8011718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801171c:	a3a0      	add	r3, pc, #640	; (adr r3, 80119a0 <__ieee754_rem_pio2+0x310>)
 801171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011722:	f7ee fdc1 	bl	80002a8 <__aeabi_dsub>
 8011726:	a3a0      	add	r3, pc, #640	; (adr r3, 80119a8 <__ieee754_rem_pio2+0x318>)
 8011728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172c:	4604      	mov	r4, r0
 801172e:	460d      	mov	r5, r1
 8011730:	f7ee fdba 	bl	80002a8 <__aeabi_dsub>
 8011734:	4602      	mov	r2, r0
 8011736:	460b      	mov	r3, r1
 8011738:	e9ca 2300 	strd	r2, r3, [sl]
 801173c:	4620      	mov	r0, r4
 801173e:	4629      	mov	r1, r5
 8011740:	f7ee fdb2 	bl	80002a8 <__aeabi_dsub>
 8011744:	a398      	add	r3, pc, #608	; (adr r3, 80119a8 <__ieee754_rem_pio2+0x318>)
 8011746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174a:	e7db      	b.n	8011704 <__ieee754_rem_pio2+0x74>
 801174c:	f7ee fdae 	bl	80002ac <__adddf3>
 8011750:	45b0      	cmp	r8, r6
 8011752:	4604      	mov	r4, r0
 8011754:	460d      	mov	r5, r1
 8011756:	d016      	beq.n	8011786 <__ieee754_rem_pio2+0xf6>
 8011758:	a38f      	add	r3, pc, #572	; (adr r3, 8011998 <__ieee754_rem_pio2+0x308>)
 801175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175e:	f7ee fda5 	bl	80002ac <__adddf3>
 8011762:	4602      	mov	r2, r0
 8011764:	460b      	mov	r3, r1
 8011766:	e9ca 2300 	strd	r2, r3, [sl]
 801176a:	4620      	mov	r0, r4
 801176c:	4629      	mov	r1, r5
 801176e:	f7ee fd9b 	bl	80002a8 <__aeabi_dsub>
 8011772:	a389      	add	r3, pc, #548	; (adr r3, 8011998 <__ieee754_rem_pio2+0x308>)
 8011774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011778:	f7ee fd98 	bl	80002ac <__adddf3>
 801177c:	f04f 3bff 	mov.w	fp, #4294967295
 8011780:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011784:	e7c4      	b.n	8011710 <__ieee754_rem_pio2+0x80>
 8011786:	a386      	add	r3, pc, #536	; (adr r3, 80119a0 <__ieee754_rem_pio2+0x310>)
 8011788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178c:	f7ee fd8e 	bl	80002ac <__adddf3>
 8011790:	a385      	add	r3, pc, #532	; (adr r3, 80119a8 <__ieee754_rem_pio2+0x318>)
 8011792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011796:	4604      	mov	r4, r0
 8011798:	460d      	mov	r5, r1
 801179a:	f7ee fd87 	bl	80002ac <__adddf3>
 801179e:	4602      	mov	r2, r0
 80117a0:	460b      	mov	r3, r1
 80117a2:	e9ca 2300 	strd	r2, r3, [sl]
 80117a6:	4620      	mov	r0, r4
 80117a8:	4629      	mov	r1, r5
 80117aa:	f7ee fd7d 	bl	80002a8 <__aeabi_dsub>
 80117ae:	a37e      	add	r3, pc, #504	; (adr r3, 80119a8 <__ieee754_rem_pio2+0x318>)
 80117b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b4:	e7e0      	b.n	8011778 <__ieee754_rem_pio2+0xe8>
 80117b6:	4b87      	ldr	r3, [pc, #540]	; (80119d4 <__ieee754_rem_pio2+0x344>)
 80117b8:	4598      	cmp	r8, r3
 80117ba:	f300 80d9 	bgt.w	8011970 <__ieee754_rem_pio2+0x2e0>
 80117be:	f001 f88f 	bl	80128e0 <fabs>
 80117c2:	ec55 4b10 	vmov	r4, r5, d0
 80117c6:	ee10 0a10 	vmov	r0, s0
 80117ca:	a379      	add	r3, pc, #484	; (adr r3, 80119b0 <__ieee754_rem_pio2+0x320>)
 80117cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d0:	4629      	mov	r1, r5
 80117d2:	f7ee ff21 	bl	8000618 <__aeabi_dmul>
 80117d6:	4b80      	ldr	r3, [pc, #512]	; (80119d8 <__ieee754_rem_pio2+0x348>)
 80117d8:	2200      	movs	r2, #0
 80117da:	f7ee fd67 	bl	80002ac <__adddf3>
 80117de:	f7ef f9cb 	bl	8000b78 <__aeabi_d2iz>
 80117e2:	4683      	mov	fp, r0
 80117e4:	f7ee feae 	bl	8000544 <__aeabi_i2d>
 80117e8:	4602      	mov	r2, r0
 80117ea:	460b      	mov	r3, r1
 80117ec:	ec43 2b18 	vmov	d8, r2, r3
 80117f0:	a367      	add	r3, pc, #412	; (adr r3, 8011990 <__ieee754_rem_pio2+0x300>)
 80117f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f6:	f7ee ff0f 	bl	8000618 <__aeabi_dmul>
 80117fa:	4602      	mov	r2, r0
 80117fc:	460b      	mov	r3, r1
 80117fe:	4620      	mov	r0, r4
 8011800:	4629      	mov	r1, r5
 8011802:	f7ee fd51 	bl	80002a8 <__aeabi_dsub>
 8011806:	a364      	add	r3, pc, #400	; (adr r3, 8011998 <__ieee754_rem_pio2+0x308>)
 8011808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180c:	4606      	mov	r6, r0
 801180e:	460f      	mov	r7, r1
 8011810:	ec51 0b18 	vmov	r0, r1, d8
 8011814:	f7ee ff00 	bl	8000618 <__aeabi_dmul>
 8011818:	f1bb 0f1f 	cmp.w	fp, #31
 801181c:	4604      	mov	r4, r0
 801181e:	460d      	mov	r5, r1
 8011820:	dc0d      	bgt.n	801183e <__ieee754_rem_pio2+0x1ae>
 8011822:	4b6e      	ldr	r3, [pc, #440]	; (80119dc <__ieee754_rem_pio2+0x34c>)
 8011824:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801182c:	4543      	cmp	r3, r8
 801182e:	d006      	beq.n	801183e <__ieee754_rem_pio2+0x1ae>
 8011830:	4622      	mov	r2, r4
 8011832:	462b      	mov	r3, r5
 8011834:	4630      	mov	r0, r6
 8011836:	4639      	mov	r1, r7
 8011838:	f7ee fd36 	bl	80002a8 <__aeabi_dsub>
 801183c:	e00f      	b.n	801185e <__ieee754_rem_pio2+0x1ce>
 801183e:	462b      	mov	r3, r5
 8011840:	4622      	mov	r2, r4
 8011842:	4630      	mov	r0, r6
 8011844:	4639      	mov	r1, r7
 8011846:	f7ee fd2f 	bl	80002a8 <__aeabi_dsub>
 801184a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801184e:	9303      	str	r3, [sp, #12]
 8011850:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011854:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011858:	f1b8 0f10 	cmp.w	r8, #16
 801185c:	dc02      	bgt.n	8011864 <__ieee754_rem_pio2+0x1d4>
 801185e:	e9ca 0100 	strd	r0, r1, [sl]
 8011862:	e039      	b.n	80118d8 <__ieee754_rem_pio2+0x248>
 8011864:	a34e      	add	r3, pc, #312	; (adr r3, 80119a0 <__ieee754_rem_pio2+0x310>)
 8011866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801186a:	ec51 0b18 	vmov	r0, r1, d8
 801186e:	f7ee fed3 	bl	8000618 <__aeabi_dmul>
 8011872:	4604      	mov	r4, r0
 8011874:	460d      	mov	r5, r1
 8011876:	4602      	mov	r2, r0
 8011878:	460b      	mov	r3, r1
 801187a:	4630      	mov	r0, r6
 801187c:	4639      	mov	r1, r7
 801187e:	f7ee fd13 	bl	80002a8 <__aeabi_dsub>
 8011882:	4602      	mov	r2, r0
 8011884:	460b      	mov	r3, r1
 8011886:	4680      	mov	r8, r0
 8011888:	4689      	mov	r9, r1
 801188a:	4630      	mov	r0, r6
 801188c:	4639      	mov	r1, r7
 801188e:	f7ee fd0b 	bl	80002a8 <__aeabi_dsub>
 8011892:	4622      	mov	r2, r4
 8011894:	462b      	mov	r3, r5
 8011896:	f7ee fd07 	bl	80002a8 <__aeabi_dsub>
 801189a:	a343      	add	r3, pc, #268	; (adr r3, 80119a8 <__ieee754_rem_pio2+0x318>)
 801189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a0:	4604      	mov	r4, r0
 80118a2:	460d      	mov	r5, r1
 80118a4:	ec51 0b18 	vmov	r0, r1, d8
 80118a8:	f7ee feb6 	bl	8000618 <__aeabi_dmul>
 80118ac:	4622      	mov	r2, r4
 80118ae:	462b      	mov	r3, r5
 80118b0:	f7ee fcfa 	bl	80002a8 <__aeabi_dsub>
 80118b4:	4602      	mov	r2, r0
 80118b6:	460b      	mov	r3, r1
 80118b8:	4604      	mov	r4, r0
 80118ba:	460d      	mov	r5, r1
 80118bc:	4640      	mov	r0, r8
 80118be:	4649      	mov	r1, r9
 80118c0:	f7ee fcf2 	bl	80002a8 <__aeabi_dsub>
 80118c4:	9a03      	ldr	r2, [sp, #12]
 80118c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80118ca:	1ad3      	subs	r3, r2, r3
 80118cc:	2b31      	cmp	r3, #49	; 0x31
 80118ce:	dc24      	bgt.n	801191a <__ieee754_rem_pio2+0x28a>
 80118d0:	e9ca 0100 	strd	r0, r1, [sl]
 80118d4:	4646      	mov	r6, r8
 80118d6:	464f      	mov	r7, r9
 80118d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80118dc:	4630      	mov	r0, r6
 80118de:	4642      	mov	r2, r8
 80118e0:	464b      	mov	r3, r9
 80118e2:	4639      	mov	r1, r7
 80118e4:	f7ee fce0 	bl	80002a8 <__aeabi_dsub>
 80118e8:	462b      	mov	r3, r5
 80118ea:	4622      	mov	r2, r4
 80118ec:	f7ee fcdc 	bl	80002a8 <__aeabi_dsub>
 80118f0:	9b02      	ldr	r3, [sp, #8]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80118f8:	f6bf af0a 	bge.w	8011710 <__ieee754_rem_pio2+0x80>
 80118fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011900:	f8ca 3004 	str.w	r3, [sl, #4]
 8011904:	f8ca 8000 	str.w	r8, [sl]
 8011908:	f8ca 0008 	str.w	r0, [sl, #8]
 801190c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011910:	f8ca 300c 	str.w	r3, [sl, #12]
 8011914:	f1cb 0b00 	rsb	fp, fp, #0
 8011918:	e6fa      	b.n	8011710 <__ieee754_rem_pio2+0x80>
 801191a:	a327      	add	r3, pc, #156	; (adr r3, 80119b8 <__ieee754_rem_pio2+0x328>)
 801191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011920:	ec51 0b18 	vmov	r0, r1, d8
 8011924:	f7ee fe78 	bl	8000618 <__aeabi_dmul>
 8011928:	4604      	mov	r4, r0
 801192a:	460d      	mov	r5, r1
 801192c:	4602      	mov	r2, r0
 801192e:	460b      	mov	r3, r1
 8011930:	4640      	mov	r0, r8
 8011932:	4649      	mov	r1, r9
 8011934:	f7ee fcb8 	bl	80002a8 <__aeabi_dsub>
 8011938:	4602      	mov	r2, r0
 801193a:	460b      	mov	r3, r1
 801193c:	4606      	mov	r6, r0
 801193e:	460f      	mov	r7, r1
 8011940:	4640      	mov	r0, r8
 8011942:	4649      	mov	r1, r9
 8011944:	f7ee fcb0 	bl	80002a8 <__aeabi_dsub>
 8011948:	4622      	mov	r2, r4
 801194a:	462b      	mov	r3, r5
 801194c:	f7ee fcac 	bl	80002a8 <__aeabi_dsub>
 8011950:	a31b      	add	r3, pc, #108	; (adr r3, 80119c0 <__ieee754_rem_pio2+0x330>)
 8011952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011956:	4604      	mov	r4, r0
 8011958:	460d      	mov	r5, r1
 801195a:	ec51 0b18 	vmov	r0, r1, d8
 801195e:	f7ee fe5b 	bl	8000618 <__aeabi_dmul>
 8011962:	4622      	mov	r2, r4
 8011964:	462b      	mov	r3, r5
 8011966:	f7ee fc9f 	bl	80002a8 <__aeabi_dsub>
 801196a:	4604      	mov	r4, r0
 801196c:	460d      	mov	r5, r1
 801196e:	e75f      	b.n	8011830 <__ieee754_rem_pio2+0x1a0>
 8011970:	4b1b      	ldr	r3, [pc, #108]	; (80119e0 <__ieee754_rem_pio2+0x350>)
 8011972:	4598      	cmp	r8, r3
 8011974:	dd36      	ble.n	80119e4 <__ieee754_rem_pio2+0x354>
 8011976:	ee10 2a10 	vmov	r2, s0
 801197a:	462b      	mov	r3, r5
 801197c:	4620      	mov	r0, r4
 801197e:	4629      	mov	r1, r5
 8011980:	f7ee fc92 	bl	80002a8 <__aeabi_dsub>
 8011984:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011988:	e9ca 0100 	strd	r0, r1, [sl]
 801198c:	e694      	b.n	80116b8 <__ieee754_rem_pio2+0x28>
 801198e:	bf00      	nop
 8011990:	54400000 	.word	0x54400000
 8011994:	3ff921fb 	.word	0x3ff921fb
 8011998:	1a626331 	.word	0x1a626331
 801199c:	3dd0b461 	.word	0x3dd0b461
 80119a0:	1a600000 	.word	0x1a600000
 80119a4:	3dd0b461 	.word	0x3dd0b461
 80119a8:	2e037073 	.word	0x2e037073
 80119ac:	3ba3198a 	.word	0x3ba3198a
 80119b0:	6dc9c883 	.word	0x6dc9c883
 80119b4:	3fe45f30 	.word	0x3fe45f30
 80119b8:	2e000000 	.word	0x2e000000
 80119bc:	3ba3198a 	.word	0x3ba3198a
 80119c0:	252049c1 	.word	0x252049c1
 80119c4:	397b839a 	.word	0x397b839a
 80119c8:	3fe921fb 	.word	0x3fe921fb
 80119cc:	4002d97b 	.word	0x4002d97b
 80119d0:	3ff921fb 	.word	0x3ff921fb
 80119d4:	413921fb 	.word	0x413921fb
 80119d8:	3fe00000 	.word	0x3fe00000
 80119dc:	08013010 	.word	0x08013010
 80119e0:	7fefffff 	.word	0x7fefffff
 80119e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80119e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80119ec:	ee10 0a10 	vmov	r0, s0
 80119f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80119f4:	ee10 6a10 	vmov	r6, s0
 80119f8:	460f      	mov	r7, r1
 80119fa:	f7ef f8bd 	bl	8000b78 <__aeabi_d2iz>
 80119fe:	f7ee fda1 	bl	8000544 <__aeabi_i2d>
 8011a02:	4602      	mov	r2, r0
 8011a04:	460b      	mov	r3, r1
 8011a06:	4630      	mov	r0, r6
 8011a08:	4639      	mov	r1, r7
 8011a0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011a0e:	f7ee fc4b 	bl	80002a8 <__aeabi_dsub>
 8011a12:	4b22      	ldr	r3, [pc, #136]	; (8011a9c <__ieee754_rem_pio2+0x40c>)
 8011a14:	2200      	movs	r2, #0
 8011a16:	f7ee fdff 	bl	8000618 <__aeabi_dmul>
 8011a1a:	460f      	mov	r7, r1
 8011a1c:	4606      	mov	r6, r0
 8011a1e:	f7ef f8ab 	bl	8000b78 <__aeabi_d2iz>
 8011a22:	f7ee fd8f 	bl	8000544 <__aeabi_i2d>
 8011a26:	4602      	mov	r2, r0
 8011a28:	460b      	mov	r3, r1
 8011a2a:	4630      	mov	r0, r6
 8011a2c:	4639      	mov	r1, r7
 8011a2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011a32:	f7ee fc39 	bl	80002a8 <__aeabi_dsub>
 8011a36:	4b19      	ldr	r3, [pc, #100]	; (8011a9c <__ieee754_rem_pio2+0x40c>)
 8011a38:	2200      	movs	r2, #0
 8011a3a:	f7ee fded 	bl	8000618 <__aeabi_dmul>
 8011a3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011a42:	ad04      	add	r5, sp, #16
 8011a44:	f04f 0803 	mov.w	r8, #3
 8011a48:	46a9      	mov	r9, r5
 8011a4a:	2600      	movs	r6, #0
 8011a4c:	2700      	movs	r7, #0
 8011a4e:	4632      	mov	r2, r6
 8011a50:	463b      	mov	r3, r7
 8011a52:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011a56:	46c3      	mov	fp, r8
 8011a58:	3d08      	subs	r5, #8
 8011a5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8011a5e:	f7ef f843 	bl	8000ae8 <__aeabi_dcmpeq>
 8011a62:	2800      	cmp	r0, #0
 8011a64:	d1f3      	bne.n	8011a4e <__ieee754_rem_pio2+0x3be>
 8011a66:	4b0e      	ldr	r3, [pc, #56]	; (8011aa0 <__ieee754_rem_pio2+0x410>)
 8011a68:	9301      	str	r3, [sp, #4]
 8011a6a:	2302      	movs	r3, #2
 8011a6c:	9300      	str	r3, [sp, #0]
 8011a6e:	4622      	mov	r2, r4
 8011a70:	465b      	mov	r3, fp
 8011a72:	4651      	mov	r1, sl
 8011a74:	4648      	mov	r0, r9
 8011a76:	f000 f993 	bl	8011da0 <__kernel_rem_pio2>
 8011a7a:	9b02      	ldr	r3, [sp, #8]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	4683      	mov	fp, r0
 8011a80:	f6bf ae46 	bge.w	8011710 <__ieee754_rem_pio2+0x80>
 8011a84:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011a88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011a8c:	f8ca 3004 	str.w	r3, [sl, #4]
 8011a90:	f8da 300c 	ldr.w	r3, [sl, #12]
 8011a94:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011a98:	e73a      	b.n	8011910 <__ieee754_rem_pio2+0x280>
 8011a9a:	bf00      	nop
 8011a9c:	41700000 	.word	0x41700000
 8011aa0:	08013090 	.word	0x08013090

08011aa4 <__ieee754_sqrt>:
 8011aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa8:	ec55 4b10 	vmov	r4, r5, d0
 8011aac:	4e56      	ldr	r6, [pc, #344]	; (8011c08 <__ieee754_sqrt+0x164>)
 8011aae:	43ae      	bics	r6, r5
 8011ab0:	ee10 0a10 	vmov	r0, s0
 8011ab4:	ee10 3a10 	vmov	r3, s0
 8011ab8:	4629      	mov	r1, r5
 8011aba:	462a      	mov	r2, r5
 8011abc:	d110      	bne.n	8011ae0 <__ieee754_sqrt+0x3c>
 8011abe:	ee10 2a10 	vmov	r2, s0
 8011ac2:	462b      	mov	r3, r5
 8011ac4:	f7ee fda8 	bl	8000618 <__aeabi_dmul>
 8011ac8:	4602      	mov	r2, r0
 8011aca:	460b      	mov	r3, r1
 8011acc:	4620      	mov	r0, r4
 8011ace:	4629      	mov	r1, r5
 8011ad0:	f7ee fbec 	bl	80002ac <__adddf3>
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	460d      	mov	r5, r1
 8011ad8:	ec45 4b10 	vmov	d0, r4, r5
 8011adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ae0:	2d00      	cmp	r5, #0
 8011ae2:	dc10      	bgt.n	8011b06 <__ieee754_sqrt+0x62>
 8011ae4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011ae8:	4330      	orrs	r0, r6
 8011aea:	d0f5      	beq.n	8011ad8 <__ieee754_sqrt+0x34>
 8011aec:	b15d      	cbz	r5, 8011b06 <__ieee754_sqrt+0x62>
 8011aee:	ee10 2a10 	vmov	r2, s0
 8011af2:	462b      	mov	r3, r5
 8011af4:	ee10 0a10 	vmov	r0, s0
 8011af8:	f7ee fbd6 	bl	80002a8 <__aeabi_dsub>
 8011afc:	4602      	mov	r2, r0
 8011afe:	460b      	mov	r3, r1
 8011b00:	f7ee feb4 	bl	800086c <__aeabi_ddiv>
 8011b04:	e7e6      	b.n	8011ad4 <__ieee754_sqrt+0x30>
 8011b06:	1509      	asrs	r1, r1, #20
 8011b08:	d076      	beq.n	8011bf8 <__ieee754_sqrt+0x154>
 8011b0a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011b0e:	07ce      	lsls	r6, r1, #31
 8011b10:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8011b14:	bf5e      	ittt	pl
 8011b16:	0fda      	lsrpl	r2, r3, #31
 8011b18:	005b      	lslpl	r3, r3, #1
 8011b1a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8011b1e:	0fda      	lsrs	r2, r3, #31
 8011b20:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8011b24:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8011b28:	2000      	movs	r0, #0
 8011b2a:	106d      	asrs	r5, r5, #1
 8011b2c:	005b      	lsls	r3, r3, #1
 8011b2e:	f04f 0e16 	mov.w	lr, #22
 8011b32:	4684      	mov	ip, r0
 8011b34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011b38:	eb0c 0401 	add.w	r4, ip, r1
 8011b3c:	4294      	cmp	r4, r2
 8011b3e:	bfde      	ittt	le
 8011b40:	1b12      	suble	r2, r2, r4
 8011b42:	eb04 0c01 	addle.w	ip, r4, r1
 8011b46:	1840      	addle	r0, r0, r1
 8011b48:	0052      	lsls	r2, r2, #1
 8011b4a:	f1be 0e01 	subs.w	lr, lr, #1
 8011b4e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011b52:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011b56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011b5a:	d1ed      	bne.n	8011b38 <__ieee754_sqrt+0x94>
 8011b5c:	4671      	mov	r1, lr
 8011b5e:	2720      	movs	r7, #32
 8011b60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011b64:	4562      	cmp	r2, ip
 8011b66:	eb04 060e 	add.w	r6, r4, lr
 8011b6a:	dc02      	bgt.n	8011b72 <__ieee754_sqrt+0xce>
 8011b6c:	d113      	bne.n	8011b96 <__ieee754_sqrt+0xf2>
 8011b6e:	429e      	cmp	r6, r3
 8011b70:	d811      	bhi.n	8011b96 <__ieee754_sqrt+0xf2>
 8011b72:	2e00      	cmp	r6, #0
 8011b74:	eb06 0e04 	add.w	lr, r6, r4
 8011b78:	da43      	bge.n	8011c02 <__ieee754_sqrt+0x15e>
 8011b7a:	f1be 0f00 	cmp.w	lr, #0
 8011b7e:	db40      	blt.n	8011c02 <__ieee754_sqrt+0x15e>
 8011b80:	f10c 0801 	add.w	r8, ip, #1
 8011b84:	eba2 020c 	sub.w	r2, r2, ip
 8011b88:	429e      	cmp	r6, r3
 8011b8a:	bf88      	it	hi
 8011b8c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011b90:	1b9b      	subs	r3, r3, r6
 8011b92:	4421      	add	r1, r4
 8011b94:	46c4      	mov	ip, r8
 8011b96:	0052      	lsls	r2, r2, #1
 8011b98:	3f01      	subs	r7, #1
 8011b9a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011b9e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011ba2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011ba6:	d1dd      	bne.n	8011b64 <__ieee754_sqrt+0xc0>
 8011ba8:	4313      	orrs	r3, r2
 8011baa:	d006      	beq.n	8011bba <__ieee754_sqrt+0x116>
 8011bac:	1c4c      	adds	r4, r1, #1
 8011bae:	bf13      	iteet	ne
 8011bb0:	3101      	addne	r1, #1
 8011bb2:	3001      	addeq	r0, #1
 8011bb4:	4639      	moveq	r1, r7
 8011bb6:	f021 0101 	bicne.w	r1, r1, #1
 8011bba:	1043      	asrs	r3, r0, #1
 8011bbc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011bc0:	0849      	lsrs	r1, r1, #1
 8011bc2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011bc6:	07c2      	lsls	r2, r0, #31
 8011bc8:	bf48      	it	mi
 8011bca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8011bce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8011bd2:	460c      	mov	r4, r1
 8011bd4:	463d      	mov	r5, r7
 8011bd6:	e77f      	b.n	8011ad8 <__ieee754_sqrt+0x34>
 8011bd8:	0ada      	lsrs	r2, r3, #11
 8011bda:	3815      	subs	r0, #21
 8011bdc:	055b      	lsls	r3, r3, #21
 8011bde:	2a00      	cmp	r2, #0
 8011be0:	d0fa      	beq.n	8011bd8 <__ieee754_sqrt+0x134>
 8011be2:	02d7      	lsls	r7, r2, #11
 8011be4:	d50a      	bpl.n	8011bfc <__ieee754_sqrt+0x158>
 8011be6:	f1c1 0420 	rsb	r4, r1, #32
 8011bea:	fa23 f404 	lsr.w	r4, r3, r4
 8011bee:	1e4d      	subs	r5, r1, #1
 8011bf0:	408b      	lsls	r3, r1
 8011bf2:	4322      	orrs	r2, r4
 8011bf4:	1b41      	subs	r1, r0, r5
 8011bf6:	e788      	b.n	8011b0a <__ieee754_sqrt+0x66>
 8011bf8:	4608      	mov	r0, r1
 8011bfa:	e7f0      	b.n	8011bde <__ieee754_sqrt+0x13a>
 8011bfc:	0052      	lsls	r2, r2, #1
 8011bfe:	3101      	adds	r1, #1
 8011c00:	e7ef      	b.n	8011be2 <__ieee754_sqrt+0x13e>
 8011c02:	46e0      	mov	r8, ip
 8011c04:	e7be      	b.n	8011b84 <__ieee754_sqrt+0xe0>
 8011c06:	bf00      	nop
 8011c08:	7ff00000 	.word	0x7ff00000
 8011c0c:	00000000 	.word	0x00000000

08011c10 <__kernel_cos>:
 8011c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c14:	ec57 6b10 	vmov	r6, r7, d0
 8011c18:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011c1c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011c20:	ed8d 1b00 	vstr	d1, [sp]
 8011c24:	da07      	bge.n	8011c36 <__kernel_cos+0x26>
 8011c26:	ee10 0a10 	vmov	r0, s0
 8011c2a:	4639      	mov	r1, r7
 8011c2c:	f7ee ffa4 	bl	8000b78 <__aeabi_d2iz>
 8011c30:	2800      	cmp	r0, #0
 8011c32:	f000 8088 	beq.w	8011d46 <__kernel_cos+0x136>
 8011c36:	4632      	mov	r2, r6
 8011c38:	463b      	mov	r3, r7
 8011c3a:	4630      	mov	r0, r6
 8011c3c:	4639      	mov	r1, r7
 8011c3e:	f7ee fceb 	bl	8000618 <__aeabi_dmul>
 8011c42:	4b51      	ldr	r3, [pc, #324]	; (8011d88 <__kernel_cos+0x178>)
 8011c44:	2200      	movs	r2, #0
 8011c46:	4604      	mov	r4, r0
 8011c48:	460d      	mov	r5, r1
 8011c4a:	f7ee fce5 	bl	8000618 <__aeabi_dmul>
 8011c4e:	a340      	add	r3, pc, #256	; (adr r3, 8011d50 <__kernel_cos+0x140>)
 8011c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c54:	4682      	mov	sl, r0
 8011c56:	468b      	mov	fp, r1
 8011c58:	4620      	mov	r0, r4
 8011c5a:	4629      	mov	r1, r5
 8011c5c:	f7ee fcdc 	bl	8000618 <__aeabi_dmul>
 8011c60:	a33d      	add	r3, pc, #244	; (adr r3, 8011d58 <__kernel_cos+0x148>)
 8011c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c66:	f7ee fb21 	bl	80002ac <__adddf3>
 8011c6a:	4622      	mov	r2, r4
 8011c6c:	462b      	mov	r3, r5
 8011c6e:	f7ee fcd3 	bl	8000618 <__aeabi_dmul>
 8011c72:	a33b      	add	r3, pc, #236	; (adr r3, 8011d60 <__kernel_cos+0x150>)
 8011c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c78:	f7ee fb16 	bl	80002a8 <__aeabi_dsub>
 8011c7c:	4622      	mov	r2, r4
 8011c7e:	462b      	mov	r3, r5
 8011c80:	f7ee fcca 	bl	8000618 <__aeabi_dmul>
 8011c84:	a338      	add	r3, pc, #224	; (adr r3, 8011d68 <__kernel_cos+0x158>)
 8011c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8a:	f7ee fb0f 	bl	80002ac <__adddf3>
 8011c8e:	4622      	mov	r2, r4
 8011c90:	462b      	mov	r3, r5
 8011c92:	f7ee fcc1 	bl	8000618 <__aeabi_dmul>
 8011c96:	a336      	add	r3, pc, #216	; (adr r3, 8011d70 <__kernel_cos+0x160>)
 8011c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c9c:	f7ee fb04 	bl	80002a8 <__aeabi_dsub>
 8011ca0:	4622      	mov	r2, r4
 8011ca2:	462b      	mov	r3, r5
 8011ca4:	f7ee fcb8 	bl	8000618 <__aeabi_dmul>
 8011ca8:	a333      	add	r3, pc, #204	; (adr r3, 8011d78 <__kernel_cos+0x168>)
 8011caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cae:	f7ee fafd 	bl	80002ac <__adddf3>
 8011cb2:	4622      	mov	r2, r4
 8011cb4:	462b      	mov	r3, r5
 8011cb6:	f7ee fcaf 	bl	8000618 <__aeabi_dmul>
 8011cba:	4622      	mov	r2, r4
 8011cbc:	462b      	mov	r3, r5
 8011cbe:	f7ee fcab 	bl	8000618 <__aeabi_dmul>
 8011cc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cc6:	4604      	mov	r4, r0
 8011cc8:	460d      	mov	r5, r1
 8011cca:	4630      	mov	r0, r6
 8011ccc:	4639      	mov	r1, r7
 8011cce:	f7ee fca3 	bl	8000618 <__aeabi_dmul>
 8011cd2:	460b      	mov	r3, r1
 8011cd4:	4602      	mov	r2, r0
 8011cd6:	4629      	mov	r1, r5
 8011cd8:	4620      	mov	r0, r4
 8011cda:	f7ee fae5 	bl	80002a8 <__aeabi_dsub>
 8011cde:	4b2b      	ldr	r3, [pc, #172]	; (8011d8c <__kernel_cos+0x17c>)
 8011ce0:	4598      	cmp	r8, r3
 8011ce2:	4606      	mov	r6, r0
 8011ce4:	460f      	mov	r7, r1
 8011ce6:	dc10      	bgt.n	8011d0a <__kernel_cos+0xfa>
 8011ce8:	4602      	mov	r2, r0
 8011cea:	460b      	mov	r3, r1
 8011cec:	4650      	mov	r0, sl
 8011cee:	4659      	mov	r1, fp
 8011cf0:	f7ee fada 	bl	80002a8 <__aeabi_dsub>
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	4926      	ldr	r1, [pc, #152]	; (8011d90 <__kernel_cos+0x180>)
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	2000      	movs	r0, #0
 8011cfc:	f7ee fad4 	bl	80002a8 <__aeabi_dsub>
 8011d00:	ec41 0b10 	vmov	d0, r0, r1
 8011d04:	b003      	add	sp, #12
 8011d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d0a:	4b22      	ldr	r3, [pc, #136]	; (8011d94 <__kernel_cos+0x184>)
 8011d0c:	4920      	ldr	r1, [pc, #128]	; (8011d90 <__kernel_cos+0x180>)
 8011d0e:	4598      	cmp	r8, r3
 8011d10:	bfcc      	ite	gt
 8011d12:	4d21      	ldrgt	r5, [pc, #132]	; (8011d98 <__kernel_cos+0x188>)
 8011d14:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011d18:	2400      	movs	r4, #0
 8011d1a:	4622      	mov	r2, r4
 8011d1c:	462b      	mov	r3, r5
 8011d1e:	2000      	movs	r0, #0
 8011d20:	f7ee fac2 	bl	80002a8 <__aeabi_dsub>
 8011d24:	4622      	mov	r2, r4
 8011d26:	4680      	mov	r8, r0
 8011d28:	4689      	mov	r9, r1
 8011d2a:	462b      	mov	r3, r5
 8011d2c:	4650      	mov	r0, sl
 8011d2e:	4659      	mov	r1, fp
 8011d30:	f7ee faba 	bl	80002a8 <__aeabi_dsub>
 8011d34:	4632      	mov	r2, r6
 8011d36:	463b      	mov	r3, r7
 8011d38:	f7ee fab6 	bl	80002a8 <__aeabi_dsub>
 8011d3c:	4602      	mov	r2, r0
 8011d3e:	460b      	mov	r3, r1
 8011d40:	4640      	mov	r0, r8
 8011d42:	4649      	mov	r1, r9
 8011d44:	e7da      	b.n	8011cfc <__kernel_cos+0xec>
 8011d46:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011d80 <__kernel_cos+0x170>
 8011d4a:	e7db      	b.n	8011d04 <__kernel_cos+0xf4>
 8011d4c:	f3af 8000 	nop.w
 8011d50:	be8838d4 	.word	0xbe8838d4
 8011d54:	bda8fae9 	.word	0xbda8fae9
 8011d58:	bdb4b1c4 	.word	0xbdb4b1c4
 8011d5c:	3e21ee9e 	.word	0x3e21ee9e
 8011d60:	809c52ad 	.word	0x809c52ad
 8011d64:	3e927e4f 	.word	0x3e927e4f
 8011d68:	19cb1590 	.word	0x19cb1590
 8011d6c:	3efa01a0 	.word	0x3efa01a0
 8011d70:	16c15177 	.word	0x16c15177
 8011d74:	3f56c16c 	.word	0x3f56c16c
 8011d78:	5555554c 	.word	0x5555554c
 8011d7c:	3fa55555 	.word	0x3fa55555
 8011d80:	00000000 	.word	0x00000000
 8011d84:	3ff00000 	.word	0x3ff00000
 8011d88:	3fe00000 	.word	0x3fe00000
 8011d8c:	3fd33332 	.word	0x3fd33332
 8011d90:	3ff00000 	.word	0x3ff00000
 8011d94:	3fe90000 	.word	0x3fe90000
 8011d98:	3fd20000 	.word	0x3fd20000
 8011d9c:	00000000 	.word	0x00000000

08011da0 <__kernel_rem_pio2>:
 8011da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da4:	ed2d 8b02 	vpush	{d8}
 8011da8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011dac:	f112 0f14 	cmn.w	r2, #20
 8011db0:	9308      	str	r3, [sp, #32]
 8011db2:	9101      	str	r1, [sp, #4]
 8011db4:	4bc6      	ldr	r3, [pc, #792]	; (80120d0 <__kernel_rem_pio2+0x330>)
 8011db6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8011db8:	9009      	str	r0, [sp, #36]	; 0x24
 8011dba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011dbe:	9304      	str	r3, [sp, #16]
 8011dc0:	9b08      	ldr	r3, [sp, #32]
 8011dc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8011dc6:	bfa8      	it	ge
 8011dc8:	1ed4      	subge	r4, r2, #3
 8011dca:	9306      	str	r3, [sp, #24]
 8011dcc:	bfb2      	itee	lt
 8011dce:	2400      	movlt	r4, #0
 8011dd0:	2318      	movge	r3, #24
 8011dd2:	fb94 f4f3 	sdivge	r4, r4, r3
 8011dd6:	f06f 0317 	mvn.w	r3, #23
 8011dda:	fb04 3303 	mla	r3, r4, r3, r3
 8011dde:	eb03 0a02 	add.w	sl, r3, r2
 8011de2:	9b04      	ldr	r3, [sp, #16]
 8011de4:	9a06      	ldr	r2, [sp, #24]
 8011de6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80120c0 <__kernel_rem_pio2+0x320>
 8011dea:	eb03 0802 	add.w	r8, r3, r2
 8011dee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011df0:	1aa7      	subs	r7, r4, r2
 8011df2:	ae20      	add	r6, sp, #128	; 0x80
 8011df4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011df8:	2500      	movs	r5, #0
 8011dfa:	4545      	cmp	r5, r8
 8011dfc:	dd18      	ble.n	8011e30 <__kernel_rem_pio2+0x90>
 8011dfe:	9b08      	ldr	r3, [sp, #32]
 8011e00:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011e04:	aa20      	add	r2, sp, #128	; 0x80
 8011e06:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80120c0 <__kernel_rem_pio2+0x320>
 8011e0a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011e0e:	f1c3 0301 	rsb	r3, r3, #1
 8011e12:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8011e16:	9307      	str	r3, [sp, #28]
 8011e18:	9b07      	ldr	r3, [sp, #28]
 8011e1a:	9a04      	ldr	r2, [sp, #16]
 8011e1c:	4443      	add	r3, r8
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	db2f      	blt.n	8011e82 <__kernel_rem_pio2+0xe2>
 8011e22:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011e26:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011e2a:	462f      	mov	r7, r5
 8011e2c:	2600      	movs	r6, #0
 8011e2e:	e01b      	b.n	8011e68 <__kernel_rem_pio2+0xc8>
 8011e30:	42ef      	cmn	r7, r5
 8011e32:	d407      	bmi.n	8011e44 <__kernel_rem_pio2+0xa4>
 8011e34:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011e38:	f7ee fb84 	bl	8000544 <__aeabi_i2d>
 8011e3c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011e40:	3501      	adds	r5, #1
 8011e42:	e7da      	b.n	8011dfa <__kernel_rem_pio2+0x5a>
 8011e44:	ec51 0b18 	vmov	r0, r1, d8
 8011e48:	e7f8      	b.n	8011e3c <__kernel_rem_pio2+0x9c>
 8011e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e4e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011e52:	f7ee fbe1 	bl	8000618 <__aeabi_dmul>
 8011e56:	4602      	mov	r2, r0
 8011e58:	460b      	mov	r3, r1
 8011e5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e5e:	f7ee fa25 	bl	80002ac <__adddf3>
 8011e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e66:	3601      	adds	r6, #1
 8011e68:	9b06      	ldr	r3, [sp, #24]
 8011e6a:	429e      	cmp	r6, r3
 8011e6c:	f1a7 0708 	sub.w	r7, r7, #8
 8011e70:	ddeb      	ble.n	8011e4a <__kernel_rem_pio2+0xaa>
 8011e72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e76:	3508      	adds	r5, #8
 8011e78:	ecab 7b02 	vstmia	fp!, {d7}
 8011e7c:	f108 0801 	add.w	r8, r8, #1
 8011e80:	e7ca      	b.n	8011e18 <__kernel_rem_pio2+0x78>
 8011e82:	9b04      	ldr	r3, [sp, #16]
 8011e84:	aa0c      	add	r2, sp, #48	; 0x30
 8011e86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e8c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8011e8e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011e92:	9c04      	ldr	r4, [sp, #16]
 8011e94:	930a      	str	r3, [sp, #40]	; 0x28
 8011e96:	ab98      	add	r3, sp, #608	; 0x260
 8011e98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011e9c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011ea0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8011ea4:	f8cd b008 	str.w	fp, [sp, #8]
 8011ea8:	4625      	mov	r5, r4
 8011eaa:	2d00      	cmp	r5, #0
 8011eac:	dc78      	bgt.n	8011fa0 <__kernel_rem_pio2+0x200>
 8011eae:	ec47 6b10 	vmov	d0, r6, r7
 8011eb2:	4650      	mov	r0, sl
 8011eb4:	f000 fe3c 	bl	8012b30 <scalbn>
 8011eb8:	ec57 6b10 	vmov	r6, r7, d0
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011ec2:	ee10 0a10 	vmov	r0, s0
 8011ec6:	4639      	mov	r1, r7
 8011ec8:	f7ee fba6 	bl	8000618 <__aeabi_dmul>
 8011ecc:	ec41 0b10 	vmov	d0, r0, r1
 8011ed0:	f000 fd1a 	bl	8012908 <floor>
 8011ed4:	4b7f      	ldr	r3, [pc, #508]	; (80120d4 <__kernel_rem_pio2+0x334>)
 8011ed6:	ec51 0b10 	vmov	r0, r1, d0
 8011eda:	2200      	movs	r2, #0
 8011edc:	f7ee fb9c 	bl	8000618 <__aeabi_dmul>
 8011ee0:	4602      	mov	r2, r0
 8011ee2:	460b      	mov	r3, r1
 8011ee4:	4630      	mov	r0, r6
 8011ee6:	4639      	mov	r1, r7
 8011ee8:	f7ee f9de 	bl	80002a8 <__aeabi_dsub>
 8011eec:	460f      	mov	r7, r1
 8011eee:	4606      	mov	r6, r0
 8011ef0:	f7ee fe42 	bl	8000b78 <__aeabi_d2iz>
 8011ef4:	9007      	str	r0, [sp, #28]
 8011ef6:	f7ee fb25 	bl	8000544 <__aeabi_i2d>
 8011efa:	4602      	mov	r2, r0
 8011efc:	460b      	mov	r3, r1
 8011efe:	4630      	mov	r0, r6
 8011f00:	4639      	mov	r1, r7
 8011f02:	f7ee f9d1 	bl	80002a8 <__aeabi_dsub>
 8011f06:	f1ba 0f00 	cmp.w	sl, #0
 8011f0a:	4606      	mov	r6, r0
 8011f0c:	460f      	mov	r7, r1
 8011f0e:	dd70      	ble.n	8011ff2 <__kernel_rem_pio2+0x252>
 8011f10:	1e62      	subs	r2, r4, #1
 8011f12:	ab0c      	add	r3, sp, #48	; 0x30
 8011f14:	9d07      	ldr	r5, [sp, #28]
 8011f16:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011f1a:	f1ca 0118 	rsb	r1, sl, #24
 8011f1e:	fa40 f301 	asr.w	r3, r0, r1
 8011f22:	441d      	add	r5, r3
 8011f24:	408b      	lsls	r3, r1
 8011f26:	1ac0      	subs	r0, r0, r3
 8011f28:	ab0c      	add	r3, sp, #48	; 0x30
 8011f2a:	9507      	str	r5, [sp, #28]
 8011f2c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011f30:	f1ca 0317 	rsb	r3, sl, #23
 8011f34:	fa40 f303 	asr.w	r3, r0, r3
 8011f38:	9302      	str	r3, [sp, #8]
 8011f3a:	9b02      	ldr	r3, [sp, #8]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	dd66      	ble.n	801200e <__kernel_rem_pio2+0x26e>
 8011f40:	9b07      	ldr	r3, [sp, #28]
 8011f42:	2200      	movs	r2, #0
 8011f44:	3301      	adds	r3, #1
 8011f46:	9307      	str	r3, [sp, #28]
 8011f48:	4615      	mov	r5, r2
 8011f4a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011f4e:	4294      	cmp	r4, r2
 8011f50:	f300 8099 	bgt.w	8012086 <__kernel_rem_pio2+0x2e6>
 8011f54:	f1ba 0f00 	cmp.w	sl, #0
 8011f58:	dd07      	ble.n	8011f6a <__kernel_rem_pio2+0x1ca>
 8011f5a:	f1ba 0f01 	cmp.w	sl, #1
 8011f5e:	f000 80a5 	beq.w	80120ac <__kernel_rem_pio2+0x30c>
 8011f62:	f1ba 0f02 	cmp.w	sl, #2
 8011f66:	f000 80c1 	beq.w	80120ec <__kernel_rem_pio2+0x34c>
 8011f6a:	9b02      	ldr	r3, [sp, #8]
 8011f6c:	2b02      	cmp	r3, #2
 8011f6e:	d14e      	bne.n	801200e <__kernel_rem_pio2+0x26e>
 8011f70:	4632      	mov	r2, r6
 8011f72:	463b      	mov	r3, r7
 8011f74:	4958      	ldr	r1, [pc, #352]	; (80120d8 <__kernel_rem_pio2+0x338>)
 8011f76:	2000      	movs	r0, #0
 8011f78:	f7ee f996 	bl	80002a8 <__aeabi_dsub>
 8011f7c:	4606      	mov	r6, r0
 8011f7e:	460f      	mov	r7, r1
 8011f80:	2d00      	cmp	r5, #0
 8011f82:	d044      	beq.n	801200e <__kernel_rem_pio2+0x26e>
 8011f84:	4650      	mov	r0, sl
 8011f86:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80120c8 <__kernel_rem_pio2+0x328>
 8011f8a:	f000 fdd1 	bl	8012b30 <scalbn>
 8011f8e:	4630      	mov	r0, r6
 8011f90:	4639      	mov	r1, r7
 8011f92:	ec53 2b10 	vmov	r2, r3, d0
 8011f96:	f7ee f987 	bl	80002a8 <__aeabi_dsub>
 8011f9a:	4606      	mov	r6, r0
 8011f9c:	460f      	mov	r7, r1
 8011f9e:	e036      	b.n	801200e <__kernel_rem_pio2+0x26e>
 8011fa0:	4b4e      	ldr	r3, [pc, #312]	; (80120dc <__kernel_rem_pio2+0x33c>)
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	4630      	mov	r0, r6
 8011fa6:	4639      	mov	r1, r7
 8011fa8:	f7ee fb36 	bl	8000618 <__aeabi_dmul>
 8011fac:	f7ee fde4 	bl	8000b78 <__aeabi_d2iz>
 8011fb0:	f7ee fac8 	bl	8000544 <__aeabi_i2d>
 8011fb4:	4b4a      	ldr	r3, [pc, #296]	; (80120e0 <__kernel_rem_pio2+0x340>)
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	4680      	mov	r8, r0
 8011fba:	4689      	mov	r9, r1
 8011fbc:	f7ee fb2c 	bl	8000618 <__aeabi_dmul>
 8011fc0:	4602      	mov	r2, r0
 8011fc2:	460b      	mov	r3, r1
 8011fc4:	4630      	mov	r0, r6
 8011fc6:	4639      	mov	r1, r7
 8011fc8:	f7ee f96e 	bl	80002a8 <__aeabi_dsub>
 8011fcc:	f7ee fdd4 	bl	8000b78 <__aeabi_d2iz>
 8011fd0:	9b02      	ldr	r3, [sp, #8]
 8011fd2:	f843 0b04 	str.w	r0, [r3], #4
 8011fd6:	3d01      	subs	r5, #1
 8011fd8:	9302      	str	r3, [sp, #8]
 8011fda:	ab70      	add	r3, sp, #448	; 0x1c0
 8011fdc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe4:	4640      	mov	r0, r8
 8011fe6:	4649      	mov	r1, r9
 8011fe8:	f7ee f960 	bl	80002ac <__adddf3>
 8011fec:	4606      	mov	r6, r0
 8011fee:	460f      	mov	r7, r1
 8011ff0:	e75b      	b.n	8011eaa <__kernel_rem_pio2+0x10a>
 8011ff2:	d105      	bne.n	8012000 <__kernel_rem_pio2+0x260>
 8011ff4:	1e63      	subs	r3, r4, #1
 8011ff6:	aa0c      	add	r2, sp, #48	; 0x30
 8011ff8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011ffc:	15c3      	asrs	r3, r0, #23
 8011ffe:	e79b      	b.n	8011f38 <__kernel_rem_pio2+0x198>
 8012000:	4b38      	ldr	r3, [pc, #224]	; (80120e4 <__kernel_rem_pio2+0x344>)
 8012002:	2200      	movs	r2, #0
 8012004:	f7ee fd8e 	bl	8000b24 <__aeabi_dcmpge>
 8012008:	2800      	cmp	r0, #0
 801200a:	d139      	bne.n	8012080 <__kernel_rem_pio2+0x2e0>
 801200c:	9002      	str	r0, [sp, #8]
 801200e:	2200      	movs	r2, #0
 8012010:	2300      	movs	r3, #0
 8012012:	4630      	mov	r0, r6
 8012014:	4639      	mov	r1, r7
 8012016:	f7ee fd67 	bl	8000ae8 <__aeabi_dcmpeq>
 801201a:	2800      	cmp	r0, #0
 801201c:	f000 80b4 	beq.w	8012188 <__kernel_rem_pio2+0x3e8>
 8012020:	f104 3bff 	add.w	fp, r4, #4294967295
 8012024:	465b      	mov	r3, fp
 8012026:	2200      	movs	r2, #0
 8012028:	9904      	ldr	r1, [sp, #16]
 801202a:	428b      	cmp	r3, r1
 801202c:	da65      	bge.n	80120fa <__kernel_rem_pio2+0x35a>
 801202e:	2a00      	cmp	r2, #0
 8012030:	d07b      	beq.n	801212a <__kernel_rem_pio2+0x38a>
 8012032:	ab0c      	add	r3, sp, #48	; 0x30
 8012034:	f1aa 0a18 	sub.w	sl, sl, #24
 8012038:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801203c:	2b00      	cmp	r3, #0
 801203e:	f000 80a0 	beq.w	8012182 <__kernel_rem_pio2+0x3e2>
 8012042:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80120c8 <__kernel_rem_pio2+0x328>
 8012046:	4650      	mov	r0, sl
 8012048:	f000 fd72 	bl	8012b30 <scalbn>
 801204c:	4f23      	ldr	r7, [pc, #140]	; (80120dc <__kernel_rem_pio2+0x33c>)
 801204e:	ec55 4b10 	vmov	r4, r5, d0
 8012052:	46d8      	mov	r8, fp
 8012054:	2600      	movs	r6, #0
 8012056:	f1b8 0f00 	cmp.w	r8, #0
 801205a:	f280 80cf 	bge.w	80121fc <__kernel_rem_pio2+0x45c>
 801205e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80120c0 <__kernel_rem_pio2+0x320>
 8012062:	465f      	mov	r7, fp
 8012064:	f04f 0800 	mov.w	r8, #0
 8012068:	2f00      	cmp	r7, #0
 801206a:	f2c0 80fd 	blt.w	8012268 <__kernel_rem_pio2+0x4c8>
 801206e:	ab70      	add	r3, sp, #448	; 0x1c0
 8012070:	f8df a074 	ldr.w	sl, [pc, #116]	; 80120e8 <__kernel_rem_pio2+0x348>
 8012074:	ec55 4b18 	vmov	r4, r5, d8
 8012078:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801207c:	2600      	movs	r6, #0
 801207e:	e0e5      	b.n	801224c <__kernel_rem_pio2+0x4ac>
 8012080:	2302      	movs	r3, #2
 8012082:	9302      	str	r3, [sp, #8]
 8012084:	e75c      	b.n	8011f40 <__kernel_rem_pio2+0x1a0>
 8012086:	f8db 3000 	ldr.w	r3, [fp]
 801208a:	b955      	cbnz	r5, 80120a2 <__kernel_rem_pio2+0x302>
 801208c:	b123      	cbz	r3, 8012098 <__kernel_rem_pio2+0x2f8>
 801208e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012092:	f8cb 3000 	str.w	r3, [fp]
 8012096:	2301      	movs	r3, #1
 8012098:	3201      	adds	r2, #1
 801209a:	f10b 0b04 	add.w	fp, fp, #4
 801209e:	461d      	mov	r5, r3
 80120a0:	e755      	b.n	8011f4e <__kernel_rem_pio2+0x1ae>
 80120a2:	1acb      	subs	r3, r1, r3
 80120a4:	f8cb 3000 	str.w	r3, [fp]
 80120a8:	462b      	mov	r3, r5
 80120aa:	e7f5      	b.n	8012098 <__kernel_rem_pio2+0x2f8>
 80120ac:	1e62      	subs	r2, r4, #1
 80120ae:	ab0c      	add	r3, sp, #48	; 0x30
 80120b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80120b8:	a90c      	add	r1, sp, #48	; 0x30
 80120ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80120be:	e754      	b.n	8011f6a <__kernel_rem_pio2+0x1ca>
	...
 80120cc:	3ff00000 	.word	0x3ff00000
 80120d0:	080131d8 	.word	0x080131d8
 80120d4:	40200000 	.word	0x40200000
 80120d8:	3ff00000 	.word	0x3ff00000
 80120dc:	3e700000 	.word	0x3e700000
 80120e0:	41700000 	.word	0x41700000
 80120e4:	3fe00000 	.word	0x3fe00000
 80120e8:	08013198 	.word	0x08013198
 80120ec:	1e62      	subs	r2, r4, #1
 80120ee:	ab0c      	add	r3, sp, #48	; 0x30
 80120f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80120f8:	e7de      	b.n	80120b8 <__kernel_rem_pio2+0x318>
 80120fa:	a90c      	add	r1, sp, #48	; 0x30
 80120fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012100:	3b01      	subs	r3, #1
 8012102:	430a      	orrs	r2, r1
 8012104:	e790      	b.n	8012028 <__kernel_rem_pio2+0x288>
 8012106:	3301      	adds	r3, #1
 8012108:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801210c:	2900      	cmp	r1, #0
 801210e:	d0fa      	beq.n	8012106 <__kernel_rem_pio2+0x366>
 8012110:	9a08      	ldr	r2, [sp, #32]
 8012112:	18e3      	adds	r3, r4, r3
 8012114:	18a6      	adds	r6, r4, r2
 8012116:	aa20      	add	r2, sp, #128	; 0x80
 8012118:	1c65      	adds	r5, r4, #1
 801211a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801211e:	9302      	str	r3, [sp, #8]
 8012120:	9b02      	ldr	r3, [sp, #8]
 8012122:	42ab      	cmp	r3, r5
 8012124:	da04      	bge.n	8012130 <__kernel_rem_pio2+0x390>
 8012126:	461c      	mov	r4, r3
 8012128:	e6b5      	b.n	8011e96 <__kernel_rem_pio2+0xf6>
 801212a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801212c:	2301      	movs	r3, #1
 801212e:	e7eb      	b.n	8012108 <__kernel_rem_pio2+0x368>
 8012130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012132:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012136:	f7ee fa05 	bl	8000544 <__aeabi_i2d>
 801213a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801213e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012140:	46b3      	mov	fp, r6
 8012142:	461c      	mov	r4, r3
 8012144:	2700      	movs	r7, #0
 8012146:	f04f 0800 	mov.w	r8, #0
 801214a:	f04f 0900 	mov.w	r9, #0
 801214e:	9b06      	ldr	r3, [sp, #24]
 8012150:	429f      	cmp	r7, r3
 8012152:	dd06      	ble.n	8012162 <__kernel_rem_pio2+0x3c2>
 8012154:	ab70      	add	r3, sp, #448	; 0x1c0
 8012156:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801215a:	e9c3 8900 	strd	r8, r9, [r3]
 801215e:	3501      	adds	r5, #1
 8012160:	e7de      	b.n	8012120 <__kernel_rem_pio2+0x380>
 8012162:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012166:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801216a:	f7ee fa55 	bl	8000618 <__aeabi_dmul>
 801216e:	4602      	mov	r2, r0
 8012170:	460b      	mov	r3, r1
 8012172:	4640      	mov	r0, r8
 8012174:	4649      	mov	r1, r9
 8012176:	f7ee f899 	bl	80002ac <__adddf3>
 801217a:	3701      	adds	r7, #1
 801217c:	4680      	mov	r8, r0
 801217e:	4689      	mov	r9, r1
 8012180:	e7e5      	b.n	801214e <__kernel_rem_pio2+0x3ae>
 8012182:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012186:	e754      	b.n	8012032 <__kernel_rem_pio2+0x292>
 8012188:	ec47 6b10 	vmov	d0, r6, r7
 801218c:	f1ca 0000 	rsb	r0, sl, #0
 8012190:	f000 fcce 	bl	8012b30 <scalbn>
 8012194:	ec57 6b10 	vmov	r6, r7, d0
 8012198:	4b9f      	ldr	r3, [pc, #636]	; (8012418 <__kernel_rem_pio2+0x678>)
 801219a:	ee10 0a10 	vmov	r0, s0
 801219e:	2200      	movs	r2, #0
 80121a0:	4639      	mov	r1, r7
 80121a2:	f7ee fcbf 	bl	8000b24 <__aeabi_dcmpge>
 80121a6:	b300      	cbz	r0, 80121ea <__kernel_rem_pio2+0x44a>
 80121a8:	4b9c      	ldr	r3, [pc, #624]	; (801241c <__kernel_rem_pio2+0x67c>)
 80121aa:	2200      	movs	r2, #0
 80121ac:	4630      	mov	r0, r6
 80121ae:	4639      	mov	r1, r7
 80121b0:	f7ee fa32 	bl	8000618 <__aeabi_dmul>
 80121b4:	f7ee fce0 	bl	8000b78 <__aeabi_d2iz>
 80121b8:	4605      	mov	r5, r0
 80121ba:	f7ee f9c3 	bl	8000544 <__aeabi_i2d>
 80121be:	4b96      	ldr	r3, [pc, #600]	; (8012418 <__kernel_rem_pio2+0x678>)
 80121c0:	2200      	movs	r2, #0
 80121c2:	f7ee fa29 	bl	8000618 <__aeabi_dmul>
 80121c6:	460b      	mov	r3, r1
 80121c8:	4602      	mov	r2, r0
 80121ca:	4639      	mov	r1, r7
 80121cc:	4630      	mov	r0, r6
 80121ce:	f7ee f86b 	bl	80002a8 <__aeabi_dsub>
 80121d2:	f7ee fcd1 	bl	8000b78 <__aeabi_d2iz>
 80121d6:	f104 0b01 	add.w	fp, r4, #1
 80121da:	ab0c      	add	r3, sp, #48	; 0x30
 80121dc:	f10a 0a18 	add.w	sl, sl, #24
 80121e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80121e4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80121e8:	e72b      	b.n	8012042 <__kernel_rem_pio2+0x2a2>
 80121ea:	4630      	mov	r0, r6
 80121ec:	4639      	mov	r1, r7
 80121ee:	f7ee fcc3 	bl	8000b78 <__aeabi_d2iz>
 80121f2:	ab0c      	add	r3, sp, #48	; 0x30
 80121f4:	46a3      	mov	fp, r4
 80121f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80121fa:	e722      	b.n	8012042 <__kernel_rem_pio2+0x2a2>
 80121fc:	ab70      	add	r3, sp, #448	; 0x1c0
 80121fe:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8012202:	ab0c      	add	r3, sp, #48	; 0x30
 8012204:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012208:	f7ee f99c 	bl	8000544 <__aeabi_i2d>
 801220c:	4622      	mov	r2, r4
 801220e:	462b      	mov	r3, r5
 8012210:	f7ee fa02 	bl	8000618 <__aeabi_dmul>
 8012214:	4632      	mov	r2, r6
 8012216:	e9c9 0100 	strd	r0, r1, [r9]
 801221a:	463b      	mov	r3, r7
 801221c:	4620      	mov	r0, r4
 801221e:	4629      	mov	r1, r5
 8012220:	f7ee f9fa 	bl	8000618 <__aeabi_dmul>
 8012224:	f108 38ff 	add.w	r8, r8, #4294967295
 8012228:	4604      	mov	r4, r0
 801222a:	460d      	mov	r5, r1
 801222c:	e713      	b.n	8012056 <__kernel_rem_pio2+0x2b6>
 801222e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8012232:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8012236:	f7ee f9ef 	bl	8000618 <__aeabi_dmul>
 801223a:	4602      	mov	r2, r0
 801223c:	460b      	mov	r3, r1
 801223e:	4620      	mov	r0, r4
 8012240:	4629      	mov	r1, r5
 8012242:	f7ee f833 	bl	80002ac <__adddf3>
 8012246:	3601      	adds	r6, #1
 8012248:	4604      	mov	r4, r0
 801224a:	460d      	mov	r5, r1
 801224c:	9b04      	ldr	r3, [sp, #16]
 801224e:	429e      	cmp	r6, r3
 8012250:	dc01      	bgt.n	8012256 <__kernel_rem_pio2+0x4b6>
 8012252:	45b0      	cmp	r8, r6
 8012254:	daeb      	bge.n	801222e <__kernel_rem_pio2+0x48e>
 8012256:	ab48      	add	r3, sp, #288	; 0x120
 8012258:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801225c:	e9c3 4500 	strd	r4, r5, [r3]
 8012260:	3f01      	subs	r7, #1
 8012262:	f108 0801 	add.w	r8, r8, #1
 8012266:	e6ff      	b.n	8012068 <__kernel_rem_pio2+0x2c8>
 8012268:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801226a:	2b02      	cmp	r3, #2
 801226c:	dc0b      	bgt.n	8012286 <__kernel_rem_pio2+0x4e6>
 801226e:	2b00      	cmp	r3, #0
 8012270:	dc6e      	bgt.n	8012350 <__kernel_rem_pio2+0x5b0>
 8012272:	d045      	beq.n	8012300 <__kernel_rem_pio2+0x560>
 8012274:	9b07      	ldr	r3, [sp, #28]
 8012276:	f003 0007 	and.w	r0, r3, #7
 801227a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801227e:	ecbd 8b02 	vpop	{d8}
 8012282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012286:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012288:	2b03      	cmp	r3, #3
 801228a:	d1f3      	bne.n	8012274 <__kernel_rem_pio2+0x4d4>
 801228c:	ab48      	add	r3, sp, #288	; 0x120
 801228e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8012292:	46d0      	mov	r8, sl
 8012294:	46d9      	mov	r9, fp
 8012296:	f1b9 0f00 	cmp.w	r9, #0
 801229a:	f1a8 0808 	sub.w	r8, r8, #8
 801229e:	dc64      	bgt.n	801236a <__kernel_rem_pio2+0x5ca>
 80122a0:	465c      	mov	r4, fp
 80122a2:	2c01      	cmp	r4, #1
 80122a4:	f1aa 0a08 	sub.w	sl, sl, #8
 80122a8:	dc7e      	bgt.n	80123a8 <__kernel_rem_pio2+0x608>
 80122aa:	2000      	movs	r0, #0
 80122ac:	2100      	movs	r1, #0
 80122ae:	f1bb 0f01 	cmp.w	fp, #1
 80122b2:	f300 8097 	bgt.w	80123e4 <__kernel_rem_pio2+0x644>
 80122b6:	9b02      	ldr	r3, [sp, #8]
 80122b8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80122bc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	f040 8099 	bne.w	80123f8 <__kernel_rem_pio2+0x658>
 80122c6:	9b01      	ldr	r3, [sp, #4]
 80122c8:	e9c3 5600 	strd	r5, r6, [r3]
 80122cc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80122d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80122d4:	e7ce      	b.n	8012274 <__kernel_rem_pio2+0x4d4>
 80122d6:	ab48      	add	r3, sp, #288	; 0x120
 80122d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80122dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e0:	f7ed ffe4 	bl	80002ac <__adddf3>
 80122e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80122e8:	f1bb 0f00 	cmp.w	fp, #0
 80122ec:	daf3      	bge.n	80122d6 <__kernel_rem_pio2+0x536>
 80122ee:	9b02      	ldr	r3, [sp, #8]
 80122f0:	b113      	cbz	r3, 80122f8 <__kernel_rem_pio2+0x558>
 80122f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80122f6:	4619      	mov	r1, r3
 80122f8:	9b01      	ldr	r3, [sp, #4]
 80122fa:	e9c3 0100 	strd	r0, r1, [r3]
 80122fe:	e7b9      	b.n	8012274 <__kernel_rem_pio2+0x4d4>
 8012300:	2000      	movs	r0, #0
 8012302:	2100      	movs	r1, #0
 8012304:	e7f0      	b.n	80122e8 <__kernel_rem_pio2+0x548>
 8012306:	ab48      	add	r3, sp, #288	; 0x120
 8012308:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012310:	f7ed ffcc 	bl	80002ac <__adddf3>
 8012314:	3c01      	subs	r4, #1
 8012316:	2c00      	cmp	r4, #0
 8012318:	daf5      	bge.n	8012306 <__kernel_rem_pio2+0x566>
 801231a:	9b02      	ldr	r3, [sp, #8]
 801231c:	b1e3      	cbz	r3, 8012358 <__kernel_rem_pio2+0x5b8>
 801231e:	4602      	mov	r2, r0
 8012320:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012324:	9c01      	ldr	r4, [sp, #4]
 8012326:	e9c4 2300 	strd	r2, r3, [r4]
 801232a:	4602      	mov	r2, r0
 801232c:	460b      	mov	r3, r1
 801232e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012332:	f7ed ffb9 	bl	80002a8 <__aeabi_dsub>
 8012336:	ad4a      	add	r5, sp, #296	; 0x128
 8012338:	2401      	movs	r4, #1
 801233a:	45a3      	cmp	fp, r4
 801233c:	da0f      	bge.n	801235e <__kernel_rem_pio2+0x5be>
 801233e:	9b02      	ldr	r3, [sp, #8]
 8012340:	b113      	cbz	r3, 8012348 <__kernel_rem_pio2+0x5a8>
 8012342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012346:	4619      	mov	r1, r3
 8012348:	9b01      	ldr	r3, [sp, #4]
 801234a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801234e:	e791      	b.n	8012274 <__kernel_rem_pio2+0x4d4>
 8012350:	465c      	mov	r4, fp
 8012352:	2000      	movs	r0, #0
 8012354:	2100      	movs	r1, #0
 8012356:	e7de      	b.n	8012316 <__kernel_rem_pio2+0x576>
 8012358:	4602      	mov	r2, r0
 801235a:	460b      	mov	r3, r1
 801235c:	e7e2      	b.n	8012324 <__kernel_rem_pio2+0x584>
 801235e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8012362:	f7ed ffa3 	bl	80002ac <__adddf3>
 8012366:	3401      	adds	r4, #1
 8012368:	e7e7      	b.n	801233a <__kernel_rem_pio2+0x59a>
 801236a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801236e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8012372:	4620      	mov	r0, r4
 8012374:	4632      	mov	r2, r6
 8012376:	463b      	mov	r3, r7
 8012378:	4629      	mov	r1, r5
 801237a:	f7ed ff97 	bl	80002ac <__adddf3>
 801237e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012382:	4602      	mov	r2, r0
 8012384:	460b      	mov	r3, r1
 8012386:	4620      	mov	r0, r4
 8012388:	4629      	mov	r1, r5
 801238a:	f7ed ff8d 	bl	80002a8 <__aeabi_dsub>
 801238e:	4632      	mov	r2, r6
 8012390:	463b      	mov	r3, r7
 8012392:	f7ed ff8b 	bl	80002ac <__adddf3>
 8012396:	ed9d 7b04 	vldr	d7, [sp, #16]
 801239a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801239e:	ed88 7b00 	vstr	d7, [r8]
 80123a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80123a6:	e776      	b.n	8012296 <__kernel_rem_pio2+0x4f6>
 80123a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80123ac:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80123b0:	4640      	mov	r0, r8
 80123b2:	4632      	mov	r2, r6
 80123b4:	463b      	mov	r3, r7
 80123b6:	4649      	mov	r1, r9
 80123b8:	f7ed ff78 	bl	80002ac <__adddf3>
 80123bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80123c0:	4602      	mov	r2, r0
 80123c2:	460b      	mov	r3, r1
 80123c4:	4640      	mov	r0, r8
 80123c6:	4649      	mov	r1, r9
 80123c8:	f7ed ff6e 	bl	80002a8 <__aeabi_dsub>
 80123cc:	4632      	mov	r2, r6
 80123ce:	463b      	mov	r3, r7
 80123d0:	f7ed ff6c 	bl	80002ac <__adddf3>
 80123d4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80123d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80123dc:	ed8a 7b00 	vstr	d7, [sl]
 80123e0:	3c01      	subs	r4, #1
 80123e2:	e75e      	b.n	80122a2 <__kernel_rem_pio2+0x502>
 80123e4:	ab48      	add	r3, sp, #288	; 0x120
 80123e6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80123ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ee:	f7ed ff5d 	bl	80002ac <__adddf3>
 80123f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80123f6:	e75a      	b.n	80122ae <__kernel_rem_pio2+0x50e>
 80123f8:	9b01      	ldr	r3, [sp, #4]
 80123fa:	9a01      	ldr	r2, [sp, #4]
 80123fc:	601d      	str	r5, [r3, #0]
 80123fe:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8012402:	605c      	str	r4, [r3, #4]
 8012404:	609f      	str	r7, [r3, #8]
 8012406:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801240a:	60d3      	str	r3, [r2, #12]
 801240c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012410:	6110      	str	r0, [r2, #16]
 8012412:	6153      	str	r3, [r2, #20]
 8012414:	e72e      	b.n	8012274 <__kernel_rem_pio2+0x4d4>
 8012416:	bf00      	nop
 8012418:	41700000 	.word	0x41700000
 801241c:	3e700000 	.word	0x3e700000

08012420 <__kernel_sin>:
 8012420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012424:	ed2d 8b04 	vpush	{d8-d9}
 8012428:	eeb0 8a41 	vmov.f32	s16, s2
 801242c:	eef0 8a61 	vmov.f32	s17, s3
 8012430:	ec55 4b10 	vmov	r4, r5, d0
 8012434:	b083      	sub	sp, #12
 8012436:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801243a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801243e:	9001      	str	r0, [sp, #4]
 8012440:	da06      	bge.n	8012450 <__kernel_sin+0x30>
 8012442:	ee10 0a10 	vmov	r0, s0
 8012446:	4629      	mov	r1, r5
 8012448:	f7ee fb96 	bl	8000b78 <__aeabi_d2iz>
 801244c:	2800      	cmp	r0, #0
 801244e:	d051      	beq.n	80124f4 <__kernel_sin+0xd4>
 8012450:	4622      	mov	r2, r4
 8012452:	462b      	mov	r3, r5
 8012454:	4620      	mov	r0, r4
 8012456:	4629      	mov	r1, r5
 8012458:	f7ee f8de 	bl	8000618 <__aeabi_dmul>
 801245c:	4682      	mov	sl, r0
 801245e:	468b      	mov	fp, r1
 8012460:	4602      	mov	r2, r0
 8012462:	460b      	mov	r3, r1
 8012464:	4620      	mov	r0, r4
 8012466:	4629      	mov	r1, r5
 8012468:	f7ee f8d6 	bl	8000618 <__aeabi_dmul>
 801246c:	a341      	add	r3, pc, #260	; (adr r3, 8012574 <__kernel_sin+0x154>)
 801246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012472:	4680      	mov	r8, r0
 8012474:	4689      	mov	r9, r1
 8012476:	4650      	mov	r0, sl
 8012478:	4659      	mov	r1, fp
 801247a:	f7ee f8cd 	bl	8000618 <__aeabi_dmul>
 801247e:	a33f      	add	r3, pc, #252	; (adr r3, 801257c <__kernel_sin+0x15c>)
 8012480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012484:	f7ed ff10 	bl	80002a8 <__aeabi_dsub>
 8012488:	4652      	mov	r2, sl
 801248a:	465b      	mov	r3, fp
 801248c:	f7ee f8c4 	bl	8000618 <__aeabi_dmul>
 8012490:	a33c      	add	r3, pc, #240	; (adr r3, 8012584 <__kernel_sin+0x164>)
 8012492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012496:	f7ed ff09 	bl	80002ac <__adddf3>
 801249a:	4652      	mov	r2, sl
 801249c:	465b      	mov	r3, fp
 801249e:	f7ee f8bb 	bl	8000618 <__aeabi_dmul>
 80124a2:	a33a      	add	r3, pc, #232	; (adr r3, 801258c <__kernel_sin+0x16c>)
 80124a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a8:	f7ed fefe 	bl	80002a8 <__aeabi_dsub>
 80124ac:	4652      	mov	r2, sl
 80124ae:	465b      	mov	r3, fp
 80124b0:	f7ee f8b2 	bl	8000618 <__aeabi_dmul>
 80124b4:	a337      	add	r3, pc, #220	; (adr r3, 8012594 <__kernel_sin+0x174>)
 80124b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ba:	f7ed fef7 	bl	80002ac <__adddf3>
 80124be:	9b01      	ldr	r3, [sp, #4]
 80124c0:	4606      	mov	r6, r0
 80124c2:	460f      	mov	r7, r1
 80124c4:	b9eb      	cbnz	r3, 8012502 <__kernel_sin+0xe2>
 80124c6:	4602      	mov	r2, r0
 80124c8:	460b      	mov	r3, r1
 80124ca:	4650      	mov	r0, sl
 80124cc:	4659      	mov	r1, fp
 80124ce:	f7ee f8a3 	bl	8000618 <__aeabi_dmul>
 80124d2:	a325      	add	r3, pc, #148	; (adr r3, 8012568 <__kernel_sin+0x148>)
 80124d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d8:	f7ed fee6 	bl	80002a8 <__aeabi_dsub>
 80124dc:	4642      	mov	r2, r8
 80124de:	464b      	mov	r3, r9
 80124e0:	f7ee f89a 	bl	8000618 <__aeabi_dmul>
 80124e4:	4602      	mov	r2, r0
 80124e6:	460b      	mov	r3, r1
 80124e8:	4620      	mov	r0, r4
 80124ea:	4629      	mov	r1, r5
 80124ec:	f7ed fede 	bl	80002ac <__adddf3>
 80124f0:	4604      	mov	r4, r0
 80124f2:	460d      	mov	r5, r1
 80124f4:	ec45 4b10 	vmov	d0, r4, r5
 80124f8:	b003      	add	sp, #12
 80124fa:	ecbd 8b04 	vpop	{d8-d9}
 80124fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012502:	4b1b      	ldr	r3, [pc, #108]	; (8012570 <__kernel_sin+0x150>)
 8012504:	ec51 0b18 	vmov	r0, r1, d8
 8012508:	2200      	movs	r2, #0
 801250a:	f7ee f885 	bl	8000618 <__aeabi_dmul>
 801250e:	4632      	mov	r2, r6
 8012510:	ec41 0b19 	vmov	d9, r0, r1
 8012514:	463b      	mov	r3, r7
 8012516:	4640      	mov	r0, r8
 8012518:	4649      	mov	r1, r9
 801251a:	f7ee f87d 	bl	8000618 <__aeabi_dmul>
 801251e:	4602      	mov	r2, r0
 8012520:	460b      	mov	r3, r1
 8012522:	ec51 0b19 	vmov	r0, r1, d9
 8012526:	f7ed febf 	bl	80002a8 <__aeabi_dsub>
 801252a:	4652      	mov	r2, sl
 801252c:	465b      	mov	r3, fp
 801252e:	f7ee f873 	bl	8000618 <__aeabi_dmul>
 8012532:	ec53 2b18 	vmov	r2, r3, d8
 8012536:	f7ed feb7 	bl	80002a8 <__aeabi_dsub>
 801253a:	a30b      	add	r3, pc, #44	; (adr r3, 8012568 <__kernel_sin+0x148>)
 801253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012540:	4606      	mov	r6, r0
 8012542:	460f      	mov	r7, r1
 8012544:	4640      	mov	r0, r8
 8012546:	4649      	mov	r1, r9
 8012548:	f7ee f866 	bl	8000618 <__aeabi_dmul>
 801254c:	4602      	mov	r2, r0
 801254e:	460b      	mov	r3, r1
 8012550:	4630      	mov	r0, r6
 8012552:	4639      	mov	r1, r7
 8012554:	f7ed feaa 	bl	80002ac <__adddf3>
 8012558:	4602      	mov	r2, r0
 801255a:	460b      	mov	r3, r1
 801255c:	4620      	mov	r0, r4
 801255e:	4629      	mov	r1, r5
 8012560:	f7ed fea2 	bl	80002a8 <__aeabi_dsub>
 8012564:	e7c4      	b.n	80124f0 <__kernel_sin+0xd0>
 8012566:	bf00      	nop
 8012568:	55555549 	.word	0x55555549
 801256c:	3fc55555 	.word	0x3fc55555
 8012570:	3fe00000 	.word	0x3fe00000
 8012574:	5acfd57c 	.word	0x5acfd57c
 8012578:	3de5d93a 	.word	0x3de5d93a
 801257c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012580:	3e5ae5e6 	.word	0x3e5ae5e6
 8012584:	57b1fe7d 	.word	0x57b1fe7d
 8012588:	3ec71de3 	.word	0x3ec71de3
 801258c:	19c161d5 	.word	0x19c161d5
 8012590:	3f2a01a0 	.word	0x3f2a01a0
 8012594:	1110f8a6 	.word	0x1110f8a6
 8012598:	3f811111 	.word	0x3f811111
 801259c:	00000000 	.word	0x00000000

080125a0 <atan>:
 80125a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a4:	ec55 4b10 	vmov	r4, r5, d0
 80125a8:	4bc3      	ldr	r3, [pc, #780]	; (80128b8 <atan+0x318>)
 80125aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80125ae:	429e      	cmp	r6, r3
 80125b0:	46ab      	mov	fp, r5
 80125b2:	dd18      	ble.n	80125e6 <atan+0x46>
 80125b4:	4bc1      	ldr	r3, [pc, #772]	; (80128bc <atan+0x31c>)
 80125b6:	429e      	cmp	r6, r3
 80125b8:	dc01      	bgt.n	80125be <atan+0x1e>
 80125ba:	d109      	bne.n	80125d0 <atan+0x30>
 80125bc:	b144      	cbz	r4, 80125d0 <atan+0x30>
 80125be:	4622      	mov	r2, r4
 80125c0:	462b      	mov	r3, r5
 80125c2:	4620      	mov	r0, r4
 80125c4:	4629      	mov	r1, r5
 80125c6:	f7ed fe71 	bl	80002ac <__adddf3>
 80125ca:	4604      	mov	r4, r0
 80125cc:	460d      	mov	r5, r1
 80125ce:	e006      	b.n	80125de <atan+0x3e>
 80125d0:	f1bb 0f00 	cmp.w	fp, #0
 80125d4:	f300 8131 	bgt.w	801283a <atan+0x29a>
 80125d8:	a59b      	add	r5, pc, #620	; (adr r5, 8012848 <atan+0x2a8>)
 80125da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80125de:	ec45 4b10 	vmov	d0, r4, r5
 80125e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125e6:	4bb6      	ldr	r3, [pc, #728]	; (80128c0 <atan+0x320>)
 80125e8:	429e      	cmp	r6, r3
 80125ea:	dc14      	bgt.n	8012616 <atan+0x76>
 80125ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80125f0:	429e      	cmp	r6, r3
 80125f2:	dc0d      	bgt.n	8012610 <atan+0x70>
 80125f4:	a396      	add	r3, pc, #600	; (adr r3, 8012850 <atan+0x2b0>)
 80125f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125fa:	ee10 0a10 	vmov	r0, s0
 80125fe:	4629      	mov	r1, r5
 8012600:	f7ed fe54 	bl	80002ac <__adddf3>
 8012604:	4baf      	ldr	r3, [pc, #700]	; (80128c4 <atan+0x324>)
 8012606:	2200      	movs	r2, #0
 8012608:	f7ee fa96 	bl	8000b38 <__aeabi_dcmpgt>
 801260c:	2800      	cmp	r0, #0
 801260e:	d1e6      	bne.n	80125de <atan+0x3e>
 8012610:	f04f 3aff 	mov.w	sl, #4294967295
 8012614:	e02b      	b.n	801266e <atan+0xce>
 8012616:	f000 f963 	bl	80128e0 <fabs>
 801261a:	4bab      	ldr	r3, [pc, #684]	; (80128c8 <atan+0x328>)
 801261c:	429e      	cmp	r6, r3
 801261e:	ec55 4b10 	vmov	r4, r5, d0
 8012622:	f300 80bf 	bgt.w	80127a4 <atan+0x204>
 8012626:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801262a:	429e      	cmp	r6, r3
 801262c:	f300 80a0 	bgt.w	8012770 <atan+0x1d0>
 8012630:	ee10 2a10 	vmov	r2, s0
 8012634:	ee10 0a10 	vmov	r0, s0
 8012638:	462b      	mov	r3, r5
 801263a:	4629      	mov	r1, r5
 801263c:	f7ed fe36 	bl	80002ac <__adddf3>
 8012640:	4ba0      	ldr	r3, [pc, #640]	; (80128c4 <atan+0x324>)
 8012642:	2200      	movs	r2, #0
 8012644:	f7ed fe30 	bl	80002a8 <__aeabi_dsub>
 8012648:	2200      	movs	r2, #0
 801264a:	4606      	mov	r6, r0
 801264c:	460f      	mov	r7, r1
 801264e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012652:	4620      	mov	r0, r4
 8012654:	4629      	mov	r1, r5
 8012656:	f7ed fe29 	bl	80002ac <__adddf3>
 801265a:	4602      	mov	r2, r0
 801265c:	460b      	mov	r3, r1
 801265e:	4630      	mov	r0, r6
 8012660:	4639      	mov	r1, r7
 8012662:	f7ee f903 	bl	800086c <__aeabi_ddiv>
 8012666:	f04f 0a00 	mov.w	sl, #0
 801266a:	4604      	mov	r4, r0
 801266c:	460d      	mov	r5, r1
 801266e:	4622      	mov	r2, r4
 8012670:	462b      	mov	r3, r5
 8012672:	4620      	mov	r0, r4
 8012674:	4629      	mov	r1, r5
 8012676:	f7ed ffcf 	bl	8000618 <__aeabi_dmul>
 801267a:	4602      	mov	r2, r0
 801267c:	460b      	mov	r3, r1
 801267e:	4680      	mov	r8, r0
 8012680:	4689      	mov	r9, r1
 8012682:	f7ed ffc9 	bl	8000618 <__aeabi_dmul>
 8012686:	a374      	add	r3, pc, #464	; (adr r3, 8012858 <atan+0x2b8>)
 8012688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801268c:	4606      	mov	r6, r0
 801268e:	460f      	mov	r7, r1
 8012690:	f7ed ffc2 	bl	8000618 <__aeabi_dmul>
 8012694:	a372      	add	r3, pc, #456	; (adr r3, 8012860 <atan+0x2c0>)
 8012696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801269a:	f7ed fe07 	bl	80002ac <__adddf3>
 801269e:	4632      	mov	r2, r6
 80126a0:	463b      	mov	r3, r7
 80126a2:	f7ed ffb9 	bl	8000618 <__aeabi_dmul>
 80126a6:	a370      	add	r3, pc, #448	; (adr r3, 8012868 <atan+0x2c8>)
 80126a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ac:	f7ed fdfe 	bl	80002ac <__adddf3>
 80126b0:	4632      	mov	r2, r6
 80126b2:	463b      	mov	r3, r7
 80126b4:	f7ed ffb0 	bl	8000618 <__aeabi_dmul>
 80126b8:	a36d      	add	r3, pc, #436	; (adr r3, 8012870 <atan+0x2d0>)
 80126ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126be:	f7ed fdf5 	bl	80002ac <__adddf3>
 80126c2:	4632      	mov	r2, r6
 80126c4:	463b      	mov	r3, r7
 80126c6:	f7ed ffa7 	bl	8000618 <__aeabi_dmul>
 80126ca:	a36b      	add	r3, pc, #428	; (adr r3, 8012878 <atan+0x2d8>)
 80126cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d0:	f7ed fdec 	bl	80002ac <__adddf3>
 80126d4:	4632      	mov	r2, r6
 80126d6:	463b      	mov	r3, r7
 80126d8:	f7ed ff9e 	bl	8000618 <__aeabi_dmul>
 80126dc:	a368      	add	r3, pc, #416	; (adr r3, 8012880 <atan+0x2e0>)
 80126de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e2:	f7ed fde3 	bl	80002ac <__adddf3>
 80126e6:	4642      	mov	r2, r8
 80126e8:	464b      	mov	r3, r9
 80126ea:	f7ed ff95 	bl	8000618 <__aeabi_dmul>
 80126ee:	a366      	add	r3, pc, #408	; (adr r3, 8012888 <atan+0x2e8>)
 80126f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f4:	4680      	mov	r8, r0
 80126f6:	4689      	mov	r9, r1
 80126f8:	4630      	mov	r0, r6
 80126fa:	4639      	mov	r1, r7
 80126fc:	f7ed ff8c 	bl	8000618 <__aeabi_dmul>
 8012700:	a363      	add	r3, pc, #396	; (adr r3, 8012890 <atan+0x2f0>)
 8012702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012706:	f7ed fdcf 	bl	80002a8 <__aeabi_dsub>
 801270a:	4632      	mov	r2, r6
 801270c:	463b      	mov	r3, r7
 801270e:	f7ed ff83 	bl	8000618 <__aeabi_dmul>
 8012712:	a361      	add	r3, pc, #388	; (adr r3, 8012898 <atan+0x2f8>)
 8012714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012718:	f7ed fdc6 	bl	80002a8 <__aeabi_dsub>
 801271c:	4632      	mov	r2, r6
 801271e:	463b      	mov	r3, r7
 8012720:	f7ed ff7a 	bl	8000618 <__aeabi_dmul>
 8012724:	a35e      	add	r3, pc, #376	; (adr r3, 80128a0 <atan+0x300>)
 8012726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272a:	f7ed fdbd 	bl	80002a8 <__aeabi_dsub>
 801272e:	4632      	mov	r2, r6
 8012730:	463b      	mov	r3, r7
 8012732:	f7ed ff71 	bl	8000618 <__aeabi_dmul>
 8012736:	a35c      	add	r3, pc, #368	; (adr r3, 80128a8 <atan+0x308>)
 8012738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801273c:	f7ed fdb4 	bl	80002a8 <__aeabi_dsub>
 8012740:	4632      	mov	r2, r6
 8012742:	463b      	mov	r3, r7
 8012744:	f7ed ff68 	bl	8000618 <__aeabi_dmul>
 8012748:	4602      	mov	r2, r0
 801274a:	460b      	mov	r3, r1
 801274c:	4640      	mov	r0, r8
 801274e:	4649      	mov	r1, r9
 8012750:	f7ed fdac 	bl	80002ac <__adddf3>
 8012754:	4622      	mov	r2, r4
 8012756:	462b      	mov	r3, r5
 8012758:	f7ed ff5e 	bl	8000618 <__aeabi_dmul>
 801275c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012760:	4602      	mov	r2, r0
 8012762:	460b      	mov	r3, r1
 8012764:	d14b      	bne.n	80127fe <atan+0x25e>
 8012766:	4620      	mov	r0, r4
 8012768:	4629      	mov	r1, r5
 801276a:	f7ed fd9d 	bl	80002a8 <__aeabi_dsub>
 801276e:	e72c      	b.n	80125ca <atan+0x2a>
 8012770:	ee10 0a10 	vmov	r0, s0
 8012774:	4b53      	ldr	r3, [pc, #332]	; (80128c4 <atan+0x324>)
 8012776:	2200      	movs	r2, #0
 8012778:	4629      	mov	r1, r5
 801277a:	f7ed fd95 	bl	80002a8 <__aeabi_dsub>
 801277e:	4b51      	ldr	r3, [pc, #324]	; (80128c4 <atan+0x324>)
 8012780:	4606      	mov	r6, r0
 8012782:	460f      	mov	r7, r1
 8012784:	2200      	movs	r2, #0
 8012786:	4620      	mov	r0, r4
 8012788:	4629      	mov	r1, r5
 801278a:	f7ed fd8f 	bl	80002ac <__adddf3>
 801278e:	4602      	mov	r2, r0
 8012790:	460b      	mov	r3, r1
 8012792:	4630      	mov	r0, r6
 8012794:	4639      	mov	r1, r7
 8012796:	f7ee f869 	bl	800086c <__aeabi_ddiv>
 801279a:	f04f 0a01 	mov.w	sl, #1
 801279e:	4604      	mov	r4, r0
 80127a0:	460d      	mov	r5, r1
 80127a2:	e764      	b.n	801266e <atan+0xce>
 80127a4:	4b49      	ldr	r3, [pc, #292]	; (80128cc <atan+0x32c>)
 80127a6:	429e      	cmp	r6, r3
 80127a8:	da1d      	bge.n	80127e6 <atan+0x246>
 80127aa:	ee10 0a10 	vmov	r0, s0
 80127ae:	4b48      	ldr	r3, [pc, #288]	; (80128d0 <atan+0x330>)
 80127b0:	2200      	movs	r2, #0
 80127b2:	4629      	mov	r1, r5
 80127b4:	f7ed fd78 	bl	80002a8 <__aeabi_dsub>
 80127b8:	4b45      	ldr	r3, [pc, #276]	; (80128d0 <atan+0x330>)
 80127ba:	4606      	mov	r6, r0
 80127bc:	460f      	mov	r7, r1
 80127be:	2200      	movs	r2, #0
 80127c0:	4620      	mov	r0, r4
 80127c2:	4629      	mov	r1, r5
 80127c4:	f7ed ff28 	bl	8000618 <__aeabi_dmul>
 80127c8:	4b3e      	ldr	r3, [pc, #248]	; (80128c4 <atan+0x324>)
 80127ca:	2200      	movs	r2, #0
 80127cc:	f7ed fd6e 	bl	80002ac <__adddf3>
 80127d0:	4602      	mov	r2, r0
 80127d2:	460b      	mov	r3, r1
 80127d4:	4630      	mov	r0, r6
 80127d6:	4639      	mov	r1, r7
 80127d8:	f7ee f848 	bl	800086c <__aeabi_ddiv>
 80127dc:	f04f 0a02 	mov.w	sl, #2
 80127e0:	4604      	mov	r4, r0
 80127e2:	460d      	mov	r5, r1
 80127e4:	e743      	b.n	801266e <atan+0xce>
 80127e6:	462b      	mov	r3, r5
 80127e8:	ee10 2a10 	vmov	r2, s0
 80127ec:	4939      	ldr	r1, [pc, #228]	; (80128d4 <atan+0x334>)
 80127ee:	2000      	movs	r0, #0
 80127f0:	f7ee f83c 	bl	800086c <__aeabi_ddiv>
 80127f4:	f04f 0a03 	mov.w	sl, #3
 80127f8:	4604      	mov	r4, r0
 80127fa:	460d      	mov	r5, r1
 80127fc:	e737      	b.n	801266e <atan+0xce>
 80127fe:	4b36      	ldr	r3, [pc, #216]	; (80128d8 <atan+0x338>)
 8012800:	4e36      	ldr	r6, [pc, #216]	; (80128dc <atan+0x33c>)
 8012802:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012806:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801280a:	e9da 2300 	ldrd	r2, r3, [sl]
 801280e:	f7ed fd4b 	bl	80002a8 <__aeabi_dsub>
 8012812:	4622      	mov	r2, r4
 8012814:	462b      	mov	r3, r5
 8012816:	f7ed fd47 	bl	80002a8 <__aeabi_dsub>
 801281a:	4602      	mov	r2, r0
 801281c:	460b      	mov	r3, r1
 801281e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012822:	f7ed fd41 	bl	80002a8 <__aeabi_dsub>
 8012826:	f1bb 0f00 	cmp.w	fp, #0
 801282a:	4604      	mov	r4, r0
 801282c:	460d      	mov	r5, r1
 801282e:	f6bf aed6 	bge.w	80125de <atan+0x3e>
 8012832:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012836:	461d      	mov	r5, r3
 8012838:	e6d1      	b.n	80125de <atan+0x3e>
 801283a:	a51d      	add	r5, pc, #116	; (adr r5, 80128b0 <atan+0x310>)
 801283c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012840:	e6cd      	b.n	80125de <atan+0x3e>
 8012842:	bf00      	nop
 8012844:	f3af 8000 	nop.w
 8012848:	54442d18 	.word	0x54442d18
 801284c:	bff921fb 	.word	0xbff921fb
 8012850:	8800759c 	.word	0x8800759c
 8012854:	7e37e43c 	.word	0x7e37e43c
 8012858:	e322da11 	.word	0xe322da11
 801285c:	3f90ad3a 	.word	0x3f90ad3a
 8012860:	24760deb 	.word	0x24760deb
 8012864:	3fa97b4b 	.word	0x3fa97b4b
 8012868:	a0d03d51 	.word	0xa0d03d51
 801286c:	3fb10d66 	.word	0x3fb10d66
 8012870:	c54c206e 	.word	0xc54c206e
 8012874:	3fb745cd 	.word	0x3fb745cd
 8012878:	920083ff 	.word	0x920083ff
 801287c:	3fc24924 	.word	0x3fc24924
 8012880:	5555550d 	.word	0x5555550d
 8012884:	3fd55555 	.word	0x3fd55555
 8012888:	2c6a6c2f 	.word	0x2c6a6c2f
 801288c:	bfa2b444 	.word	0xbfa2b444
 8012890:	52defd9a 	.word	0x52defd9a
 8012894:	3fadde2d 	.word	0x3fadde2d
 8012898:	af749a6d 	.word	0xaf749a6d
 801289c:	3fb3b0f2 	.word	0x3fb3b0f2
 80128a0:	fe231671 	.word	0xfe231671
 80128a4:	3fbc71c6 	.word	0x3fbc71c6
 80128a8:	9998ebc4 	.word	0x9998ebc4
 80128ac:	3fc99999 	.word	0x3fc99999
 80128b0:	54442d18 	.word	0x54442d18
 80128b4:	3ff921fb 	.word	0x3ff921fb
 80128b8:	440fffff 	.word	0x440fffff
 80128bc:	7ff00000 	.word	0x7ff00000
 80128c0:	3fdbffff 	.word	0x3fdbffff
 80128c4:	3ff00000 	.word	0x3ff00000
 80128c8:	3ff2ffff 	.word	0x3ff2ffff
 80128cc:	40038000 	.word	0x40038000
 80128d0:	3ff80000 	.word	0x3ff80000
 80128d4:	bff00000 	.word	0xbff00000
 80128d8:	08013208 	.word	0x08013208
 80128dc:	080131e8 	.word	0x080131e8

080128e0 <fabs>:
 80128e0:	ec51 0b10 	vmov	r0, r1, d0
 80128e4:	ee10 2a10 	vmov	r2, s0
 80128e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80128ec:	ec43 2b10 	vmov	d0, r2, r3
 80128f0:	4770      	bx	lr

080128f2 <finite>:
 80128f2:	b082      	sub	sp, #8
 80128f4:	ed8d 0b00 	vstr	d0, [sp]
 80128f8:	9801      	ldr	r0, [sp, #4]
 80128fa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80128fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012902:	0fc0      	lsrs	r0, r0, #31
 8012904:	b002      	add	sp, #8
 8012906:	4770      	bx	lr

08012908 <floor>:
 8012908:	ec51 0b10 	vmov	r0, r1, d0
 801290c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012910:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012914:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012918:	2e13      	cmp	r6, #19
 801291a:	ee10 5a10 	vmov	r5, s0
 801291e:	ee10 8a10 	vmov	r8, s0
 8012922:	460c      	mov	r4, r1
 8012924:	dc32      	bgt.n	801298c <floor+0x84>
 8012926:	2e00      	cmp	r6, #0
 8012928:	da14      	bge.n	8012954 <floor+0x4c>
 801292a:	a333      	add	r3, pc, #204	; (adr r3, 80129f8 <floor+0xf0>)
 801292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012930:	f7ed fcbc 	bl	80002ac <__adddf3>
 8012934:	2200      	movs	r2, #0
 8012936:	2300      	movs	r3, #0
 8012938:	f7ee f8fe 	bl	8000b38 <__aeabi_dcmpgt>
 801293c:	b138      	cbz	r0, 801294e <floor+0x46>
 801293e:	2c00      	cmp	r4, #0
 8012940:	da57      	bge.n	80129f2 <floor+0xea>
 8012942:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012946:	431d      	orrs	r5, r3
 8012948:	d001      	beq.n	801294e <floor+0x46>
 801294a:	4c2d      	ldr	r4, [pc, #180]	; (8012a00 <floor+0xf8>)
 801294c:	2500      	movs	r5, #0
 801294e:	4621      	mov	r1, r4
 8012950:	4628      	mov	r0, r5
 8012952:	e025      	b.n	80129a0 <floor+0x98>
 8012954:	4f2b      	ldr	r7, [pc, #172]	; (8012a04 <floor+0xfc>)
 8012956:	4137      	asrs	r7, r6
 8012958:	ea01 0307 	and.w	r3, r1, r7
 801295c:	4303      	orrs	r3, r0
 801295e:	d01f      	beq.n	80129a0 <floor+0x98>
 8012960:	a325      	add	r3, pc, #148	; (adr r3, 80129f8 <floor+0xf0>)
 8012962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012966:	f7ed fca1 	bl	80002ac <__adddf3>
 801296a:	2200      	movs	r2, #0
 801296c:	2300      	movs	r3, #0
 801296e:	f7ee f8e3 	bl	8000b38 <__aeabi_dcmpgt>
 8012972:	2800      	cmp	r0, #0
 8012974:	d0eb      	beq.n	801294e <floor+0x46>
 8012976:	2c00      	cmp	r4, #0
 8012978:	bfbe      	ittt	lt
 801297a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801297e:	fa43 f606 	asrlt.w	r6, r3, r6
 8012982:	19a4      	addlt	r4, r4, r6
 8012984:	ea24 0407 	bic.w	r4, r4, r7
 8012988:	2500      	movs	r5, #0
 801298a:	e7e0      	b.n	801294e <floor+0x46>
 801298c:	2e33      	cmp	r6, #51	; 0x33
 801298e:	dd0b      	ble.n	80129a8 <floor+0xa0>
 8012990:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012994:	d104      	bne.n	80129a0 <floor+0x98>
 8012996:	ee10 2a10 	vmov	r2, s0
 801299a:	460b      	mov	r3, r1
 801299c:	f7ed fc86 	bl	80002ac <__adddf3>
 80129a0:	ec41 0b10 	vmov	d0, r0, r1
 80129a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80129ac:	f04f 33ff 	mov.w	r3, #4294967295
 80129b0:	fa23 f707 	lsr.w	r7, r3, r7
 80129b4:	4207      	tst	r7, r0
 80129b6:	d0f3      	beq.n	80129a0 <floor+0x98>
 80129b8:	a30f      	add	r3, pc, #60	; (adr r3, 80129f8 <floor+0xf0>)
 80129ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129be:	f7ed fc75 	bl	80002ac <__adddf3>
 80129c2:	2200      	movs	r2, #0
 80129c4:	2300      	movs	r3, #0
 80129c6:	f7ee f8b7 	bl	8000b38 <__aeabi_dcmpgt>
 80129ca:	2800      	cmp	r0, #0
 80129cc:	d0bf      	beq.n	801294e <floor+0x46>
 80129ce:	2c00      	cmp	r4, #0
 80129d0:	da02      	bge.n	80129d8 <floor+0xd0>
 80129d2:	2e14      	cmp	r6, #20
 80129d4:	d103      	bne.n	80129de <floor+0xd6>
 80129d6:	3401      	adds	r4, #1
 80129d8:	ea25 0507 	bic.w	r5, r5, r7
 80129dc:	e7b7      	b.n	801294e <floor+0x46>
 80129de:	2301      	movs	r3, #1
 80129e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80129e4:	fa03 f606 	lsl.w	r6, r3, r6
 80129e8:	4435      	add	r5, r6
 80129ea:	4545      	cmp	r5, r8
 80129ec:	bf38      	it	cc
 80129ee:	18e4      	addcc	r4, r4, r3
 80129f0:	e7f2      	b.n	80129d8 <floor+0xd0>
 80129f2:	2500      	movs	r5, #0
 80129f4:	462c      	mov	r4, r5
 80129f6:	e7aa      	b.n	801294e <floor+0x46>
 80129f8:	8800759c 	.word	0x8800759c
 80129fc:	7e37e43c 	.word	0x7e37e43c
 8012a00:	bff00000 	.word	0xbff00000
 8012a04:	000fffff 	.word	0x000fffff

08012a08 <nan>:
 8012a08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012a10 <nan+0x8>
 8012a0c:	4770      	bx	lr
 8012a0e:	bf00      	nop
 8012a10:	00000000 	.word	0x00000000
 8012a14:	7ff80000 	.word	0x7ff80000

08012a18 <rint>:
 8012a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a1a:	ec51 0b10 	vmov	r0, r1, d0
 8012a1e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012a22:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012a26:	2e13      	cmp	r6, #19
 8012a28:	ee10 4a10 	vmov	r4, s0
 8012a2c:	460b      	mov	r3, r1
 8012a2e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012a32:	dc58      	bgt.n	8012ae6 <rint+0xce>
 8012a34:	2e00      	cmp	r6, #0
 8012a36:	da2b      	bge.n	8012a90 <rint+0x78>
 8012a38:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012a3c:	4302      	orrs	r2, r0
 8012a3e:	d023      	beq.n	8012a88 <rint+0x70>
 8012a40:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012a44:	4302      	orrs	r2, r0
 8012a46:	4254      	negs	r4, r2
 8012a48:	4314      	orrs	r4, r2
 8012a4a:	0c4b      	lsrs	r3, r1, #17
 8012a4c:	0b24      	lsrs	r4, r4, #12
 8012a4e:	045b      	lsls	r3, r3, #17
 8012a50:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012a54:	ea44 0103 	orr.w	r1, r4, r3
 8012a58:	4b32      	ldr	r3, [pc, #200]	; (8012b24 <rint+0x10c>)
 8012a5a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012a5e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012a62:	4602      	mov	r2, r0
 8012a64:	460b      	mov	r3, r1
 8012a66:	4630      	mov	r0, r6
 8012a68:	4639      	mov	r1, r7
 8012a6a:	f7ed fc1f 	bl	80002ac <__adddf3>
 8012a6e:	e9cd 0100 	strd	r0, r1, [sp]
 8012a72:	463b      	mov	r3, r7
 8012a74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a78:	4632      	mov	r2, r6
 8012a7a:	f7ed fc15 	bl	80002a8 <__aeabi_dsub>
 8012a7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012a82:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012a86:	4639      	mov	r1, r7
 8012a88:	ec41 0b10 	vmov	d0, r0, r1
 8012a8c:	b003      	add	sp, #12
 8012a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a90:	4a25      	ldr	r2, [pc, #148]	; (8012b28 <rint+0x110>)
 8012a92:	4132      	asrs	r2, r6
 8012a94:	ea01 0702 	and.w	r7, r1, r2
 8012a98:	4307      	orrs	r7, r0
 8012a9a:	d0f5      	beq.n	8012a88 <rint+0x70>
 8012a9c:	0851      	lsrs	r1, r2, #1
 8012a9e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8012aa2:	4314      	orrs	r4, r2
 8012aa4:	d00c      	beq.n	8012ac0 <rint+0xa8>
 8012aa6:	ea23 0201 	bic.w	r2, r3, r1
 8012aaa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012aae:	2e13      	cmp	r6, #19
 8012ab0:	fa43 f606 	asr.w	r6, r3, r6
 8012ab4:	bf0c      	ite	eq
 8012ab6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012aba:	2400      	movne	r4, #0
 8012abc:	ea42 0306 	orr.w	r3, r2, r6
 8012ac0:	4918      	ldr	r1, [pc, #96]	; (8012b24 <rint+0x10c>)
 8012ac2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012ac6:	4622      	mov	r2, r4
 8012ac8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012acc:	4620      	mov	r0, r4
 8012ace:	4629      	mov	r1, r5
 8012ad0:	f7ed fbec 	bl	80002ac <__adddf3>
 8012ad4:	e9cd 0100 	strd	r0, r1, [sp]
 8012ad8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012adc:	4622      	mov	r2, r4
 8012ade:	462b      	mov	r3, r5
 8012ae0:	f7ed fbe2 	bl	80002a8 <__aeabi_dsub>
 8012ae4:	e7d0      	b.n	8012a88 <rint+0x70>
 8012ae6:	2e33      	cmp	r6, #51	; 0x33
 8012ae8:	dd07      	ble.n	8012afa <rint+0xe2>
 8012aea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012aee:	d1cb      	bne.n	8012a88 <rint+0x70>
 8012af0:	ee10 2a10 	vmov	r2, s0
 8012af4:	f7ed fbda 	bl	80002ac <__adddf3>
 8012af8:	e7c6      	b.n	8012a88 <rint+0x70>
 8012afa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8012afe:	f04f 36ff 	mov.w	r6, #4294967295
 8012b02:	40d6      	lsrs	r6, r2
 8012b04:	4230      	tst	r0, r6
 8012b06:	d0bf      	beq.n	8012a88 <rint+0x70>
 8012b08:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8012b0c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8012b10:	bf1f      	itttt	ne
 8012b12:	ea24 0101 	bicne.w	r1, r4, r1
 8012b16:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012b1a:	fa44 f202 	asrne.w	r2, r4, r2
 8012b1e:	ea41 0402 	orrne.w	r4, r1, r2
 8012b22:	e7cd      	b.n	8012ac0 <rint+0xa8>
 8012b24:	08013228 	.word	0x08013228
 8012b28:	000fffff 	.word	0x000fffff
 8012b2c:	00000000 	.word	0x00000000

08012b30 <scalbn>:
 8012b30:	b570      	push	{r4, r5, r6, lr}
 8012b32:	ec55 4b10 	vmov	r4, r5, d0
 8012b36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012b3a:	4606      	mov	r6, r0
 8012b3c:	462b      	mov	r3, r5
 8012b3e:	b99a      	cbnz	r2, 8012b68 <scalbn+0x38>
 8012b40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012b44:	4323      	orrs	r3, r4
 8012b46:	d036      	beq.n	8012bb6 <scalbn+0x86>
 8012b48:	4b39      	ldr	r3, [pc, #228]	; (8012c30 <scalbn+0x100>)
 8012b4a:	4629      	mov	r1, r5
 8012b4c:	ee10 0a10 	vmov	r0, s0
 8012b50:	2200      	movs	r2, #0
 8012b52:	f7ed fd61 	bl	8000618 <__aeabi_dmul>
 8012b56:	4b37      	ldr	r3, [pc, #220]	; (8012c34 <scalbn+0x104>)
 8012b58:	429e      	cmp	r6, r3
 8012b5a:	4604      	mov	r4, r0
 8012b5c:	460d      	mov	r5, r1
 8012b5e:	da10      	bge.n	8012b82 <scalbn+0x52>
 8012b60:	a32b      	add	r3, pc, #172	; (adr r3, 8012c10 <scalbn+0xe0>)
 8012b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b66:	e03a      	b.n	8012bde <scalbn+0xae>
 8012b68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012b6c:	428a      	cmp	r2, r1
 8012b6e:	d10c      	bne.n	8012b8a <scalbn+0x5a>
 8012b70:	ee10 2a10 	vmov	r2, s0
 8012b74:	4620      	mov	r0, r4
 8012b76:	4629      	mov	r1, r5
 8012b78:	f7ed fb98 	bl	80002ac <__adddf3>
 8012b7c:	4604      	mov	r4, r0
 8012b7e:	460d      	mov	r5, r1
 8012b80:	e019      	b.n	8012bb6 <scalbn+0x86>
 8012b82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012b86:	460b      	mov	r3, r1
 8012b88:	3a36      	subs	r2, #54	; 0x36
 8012b8a:	4432      	add	r2, r6
 8012b8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012b90:	428a      	cmp	r2, r1
 8012b92:	dd08      	ble.n	8012ba6 <scalbn+0x76>
 8012b94:	2d00      	cmp	r5, #0
 8012b96:	a120      	add	r1, pc, #128	; (adr r1, 8012c18 <scalbn+0xe8>)
 8012b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b9c:	da1c      	bge.n	8012bd8 <scalbn+0xa8>
 8012b9e:	a120      	add	r1, pc, #128	; (adr r1, 8012c20 <scalbn+0xf0>)
 8012ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ba4:	e018      	b.n	8012bd8 <scalbn+0xa8>
 8012ba6:	2a00      	cmp	r2, #0
 8012ba8:	dd08      	ble.n	8012bbc <scalbn+0x8c>
 8012baa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012bae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012bb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012bb6:	ec45 4b10 	vmov	d0, r4, r5
 8012bba:	bd70      	pop	{r4, r5, r6, pc}
 8012bbc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012bc0:	da19      	bge.n	8012bf6 <scalbn+0xc6>
 8012bc2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012bc6:	429e      	cmp	r6, r3
 8012bc8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012bcc:	dd0a      	ble.n	8012be4 <scalbn+0xb4>
 8012bce:	a112      	add	r1, pc, #72	; (adr r1, 8012c18 <scalbn+0xe8>)
 8012bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d1e2      	bne.n	8012b9e <scalbn+0x6e>
 8012bd8:	a30f      	add	r3, pc, #60	; (adr r3, 8012c18 <scalbn+0xe8>)
 8012bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bde:	f7ed fd1b 	bl	8000618 <__aeabi_dmul>
 8012be2:	e7cb      	b.n	8012b7c <scalbn+0x4c>
 8012be4:	a10a      	add	r1, pc, #40	; (adr r1, 8012c10 <scalbn+0xe0>)
 8012be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d0b8      	beq.n	8012b60 <scalbn+0x30>
 8012bee:	a10e      	add	r1, pc, #56	; (adr r1, 8012c28 <scalbn+0xf8>)
 8012bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bf4:	e7b4      	b.n	8012b60 <scalbn+0x30>
 8012bf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012bfa:	3236      	adds	r2, #54	; 0x36
 8012bfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012c00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012c04:	4620      	mov	r0, r4
 8012c06:	4b0c      	ldr	r3, [pc, #48]	; (8012c38 <scalbn+0x108>)
 8012c08:	2200      	movs	r2, #0
 8012c0a:	e7e8      	b.n	8012bde <scalbn+0xae>
 8012c0c:	f3af 8000 	nop.w
 8012c10:	c2f8f359 	.word	0xc2f8f359
 8012c14:	01a56e1f 	.word	0x01a56e1f
 8012c18:	8800759c 	.word	0x8800759c
 8012c1c:	7e37e43c 	.word	0x7e37e43c
 8012c20:	8800759c 	.word	0x8800759c
 8012c24:	fe37e43c 	.word	0xfe37e43c
 8012c28:	c2f8f359 	.word	0xc2f8f359
 8012c2c:	81a56e1f 	.word	0x81a56e1f
 8012c30:	43500000 	.word	0x43500000
 8012c34:	ffff3cb0 	.word	0xffff3cb0
 8012c38:	3c900000 	.word	0x3c900000

08012c3c <_init>:
 8012c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c3e:	bf00      	nop
 8012c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c42:	bc08      	pop	{r3}
 8012c44:	469e      	mov	lr, r3
 8012c46:	4770      	bx	lr

08012c48 <_fini>:
 8012c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c4a:	bf00      	nop
 8012c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c4e:	bc08      	pop	{r3}
 8012c50:	469e      	mov	lr, r3
 8012c52:	4770      	bx	lr
