
orientation_estimation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010324  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  080104d8  080104d8  000204d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010844  08010844  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08010844  08010844  00020844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801084c  0801084c  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801084c  0801084c  0002084c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010850  08010850  00020850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08010854  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          00008b20  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008bb4  20008bb4  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033385  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006250  00000000  00000000  00063449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002320  00000000  00000000  000696a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000020f0  00000000  00000000  0006b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ce36  00000000  00000000  0006dab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b4d6  00000000  00000000  0009a8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5abd  00000000  00000000  000c5dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001bb879  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a544  00000000  00000000  001bb8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080104bc 	.word	0x080104bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	080104bc 	.word	0x080104bc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb0:	f000 b96e 	b.w	8000e90 <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f806 	bl	8000bcc <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9d08      	ldr	r5, [sp, #32]
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 8083 	bne.w	8000ce2 <__udivmoddi4+0x116>
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	4617      	mov	r7, r2
 8000be0:	d947      	bls.n	8000c72 <__udivmoddi4+0xa6>
 8000be2:	fab2 f282 	clz	r2, r2
 8000be6:	b142      	cbz	r2, 8000bfa <__udivmoddi4+0x2e>
 8000be8:	f1c2 0020 	rsb	r0, r2, #32
 8000bec:	fa24 f000 	lsr.w	r0, r4, r0
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	4097      	lsls	r7, r2
 8000bf4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf8:	4094      	lsls	r4, r2
 8000bfa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfe:	0c23      	lsrs	r3, r4, #16
 8000c00:	fbbc f6f8 	udiv	r6, ip, r8
 8000c04:	fa1f fe87 	uxth.w	lr, r7
 8000c08:	fb08 c116 	mls	r1, r8, r6, ip
 8000c0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c10:	fb06 f10e 	mul.w	r1, r6, lr
 8000c14:	4299      	cmp	r1, r3
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x60>
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 8119 	bcs.w	8000e54 <__udivmoddi4+0x288>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 8116 	bls.w	8000e54 <__udivmoddi4+0x288>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	443b      	add	r3, r7
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x8c>
 8000c44:	193c      	adds	r4, r7, r4
 8000c46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4a:	f080 8105 	bcs.w	8000e58 <__udivmoddi4+0x28c>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	f240 8102 	bls.w	8000e58 <__udivmoddi4+0x28c>
 8000c54:	3802      	subs	r0, #2
 8000c56:	443c      	add	r4, r7
 8000c58:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5c:	eba4 040e 	sub.w	r4, r4, lr
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa0>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	b902      	cbnz	r2, 8000c76 <__udivmoddi4+0xaa>
 8000c74:	deff      	udf	#255	; 0xff
 8000c76:	fab2 f282 	clz	r2, r2
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	d150      	bne.n	8000d20 <__udivmoddi4+0x154>
 8000c7e:	1bcb      	subs	r3, r1, r7
 8000c80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c84:	fa1f f887 	uxth.w	r8, r7
 8000c88:	2601      	movs	r6, #1
 8000c8a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8e:	0c21      	lsrs	r1, r4, #16
 8000c90:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb08 f30c 	mul.w	r3, r8, ip
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0xe4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0xe2>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	f200 80e9 	bhi.w	8000e80 <__udivmoddi4+0x2b4>
 8000cae:	4684      	mov	ip, r0
 8000cb0:	1ac9      	subs	r1, r1, r3
 8000cb2:	b2a3      	uxth	r3, r4
 8000cb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cbc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cc0:	fb08 f800 	mul.w	r8, r8, r0
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x10c>
 8000cc8:	193c      	adds	r4, r7, r4
 8000cca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x10a>
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	f200 80d9 	bhi.w	8000e88 <__udivmoddi4+0x2bc>
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	eba4 0408 	sub.w	r4, r4, r8
 8000cdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce0:	e7bf      	b.n	8000c62 <__udivmoddi4+0x96>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x12e>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80b1 	beq.w	8000e4e <__udivmoddi4+0x282>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x1cc>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0x140>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80b8 	bhi.w	8000e7c <__udivmoddi4+0x2b0>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	468c      	mov	ip, r1
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0a8      	beq.n	8000c6c <__udivmoddi4+0xa0>
 8000d1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1e:	e7a5      	b.n	8000c6c <__udivmoddi4+0xa0>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f603 	lsr.w	r6, r0, r3
 8000d28:	4097      	lsls	r7, r2
 8000d2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d32:	40d9      	lsrs	r1, r3
 8000d34:	4330      	orrs	r0, r6
 8000d36:	0c03      	lsrs	r3, r0, #16
 8000d38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d3c:	fa1f f887 	uxth.w	r8, r7
 8000d40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d48:	fb06 f108 	mul.w	r1, r6, r8
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x19c>
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d5a:	f080 808d 	bcs.w	8000e78 <__udivmoddi4+0x2ac>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 808a 	bls.w	8000e78 <__udivmoddi4+0x2ac>
 8000d64:	3e02      	subs	r6, #2
 8000d66:	443b      	add	r3, r7
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b281      	uxth	r1, r0
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d78:	fb00 f308 	mul.w	r3, r0, r8
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d907      	bls.n	8000d90 <__udivmoddi4+0x1c4>
 8000d80:	1879      	adds	r1, r7, r1
 8000d82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d86:	d273      	bcs.n	8000e70 <__udivmoddi4+0x2a4>
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d971      	bls.n	8000e70 <__udivmoddi4+0x2a4>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	4439      	add	r1, r7
 8000d90:	1acb      	subs	r3, r1, r3
 8000d92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d96:	e778      	b.n	8000c8a <__udivmoddi4+0xbe>
 8000d98:	f1c6 0c20 	rsb	ip, r6, #32
 8000d9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000da0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da4:	431c      	orrs	r4, r3
 8000da6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000db2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db6:	431f      	orrs	r7, r3
 8000db8:	0c3b      	lsrs	r3, r7, #16
 8000dba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dbe:	fa1f f884 	uxth.w	r8, r4
 8000dc2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dca:	fb09 fa08 	mul.w	sl, r9, r8
 8000dce:	458a      	cmp	sl, r1
 8000dd0:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd4:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x220>
 8000dda:	1861      	adds	r1, r4, r1
 8000ddc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000de0:	d248      	bcs.n	8000e74 <__udivmoddi4+0x2a8>
 8000de2:	458a      	cmp	sl, r1
 8000de4:	d946      	bls.n	8000e74 <__udivmoddi4+0x2a8>
 8000de6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dea:	4421      	add	r1, r4
 8000dec:	eba1 010a 	sub.w	r1, r1, sl
 8000df0:	b2bf      	uxth	r7, r7
 8000df2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dfa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfe:	fb00 f808 	mul.w	r8, r0, r8
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x24a>
 8000e06:	19e7      	adds	r7, r4, r7
 8000e08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0c:	d22e      	bcs.n	8000e6c <__udivmoddi4+0x2a0>
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d92c      	bls.n	8000e6c <__udivmoddi4+0x2a0>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4427      	add	r7, r4
 8000e16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e1a:	eba7 0708 	sub.w	r7, r7, r8
 8000e1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e22:	454f      	cmp	r7, r9
 8000e24:	46c6      	mov	lr, r8
 8000e26:	4649      	mov	r1, r9
 8000e28:	d31a      	bcc.n	8000e60 <__udivmoddi4+0x294>
 8000e2a:	d017      	beq.n	8000e5c <__udivmoddi4+0x290>
 8000e2c:	b15d      	cbz	r5, 8000e46 <__udivmoddi4+0x27a>
 8000e2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e32:	eb67 0701 	sbc.w	r7, r7, r1
 8000e36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e3a:	40f2      	lsrs	r2, r6
 8000e3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e40:	40f7      	lsrs	r7, r6
 8000e42:	e9c5 2700 	strd	r2, r7, [r5]
 8000e46:	2600      	movs	r6, #0
 8000e48:	4631      	mov	r1, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	462e      	mov	r6, r5
 8000e50:	4628      	mov	r0, r5
 8000e52:	e70b      	b.n	8000c6c <__udivmoddi4+0xa0>
 8000e54:	4606      	mov	r6, r0
 8000e56:	e6e9      	b.n	8000c2c <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fd      	b.n	8000c58 <__udivmoddi4+0x8c>
 8000e5c:	4543      	cmp	r3, r8
 8000e5e:	d2e5      	bcs.n	8000e2c <__udivmoddi4+0x260>
 8000e60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e64:	eb69 0104 	sbc.w	r1, r9, r4
 8000e68:	3801      	subs	r0, #1
 8000e6a:	e7df      	b.n	8000e2c <__udivmoddi4+0x260>
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	e7d2      	b.n	8000e16 <__udivmoddi4+0x24a>
 8000e70:	4660      	mov	r0, ip
 8000e72:	e78d      	b.n	8000d90 <__udivmoddi4+0x1c4>
 8000e74:	4681      	mov	r9, r0
 8000e76:	e7b9      	b.n	8000dec <__udivmoddi4+0x220>
 8000e78:	4666      	mov	r6, ip
 8000e7a:	e775      	b.n	8000d68 <__udivmoddi4+0x19c>
 8000e7c:	4630      	mov	r0, r6
 8000e7e:	e74a      	b.n	8000d16 <__udivmoddi4+0x14a>
 8000e80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e84:	4439      	add	r1, r7
 8000e86:	e713      	b.n	8000cb0 <__udivmoddi4+0xe4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	443c      	add	r4, r7
 8000e8c:	e724      	b.n	8000cd8 <__udivmoddi4+0x10c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b0e4      	sub	sp, #400	; 0x190
 8000ebc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebe:	f001 fc83 	bl	80027c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec2:	f000 fbe7 	bl	8001694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec6:	f000 fe55 	bl	8001b74 <MX_GPIO_Init>
  MX_CRC_Init();
 8000eca:	f000 fc4d 	bl	8001768 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000ece:	f000 fc5f 	bl	8001790 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000ed2:	f000 fdff 	bl	8001ad4 <MX_FMC_Init>
  MX_I2C3_Init();
 8000ed6:	f000 fc8d 	bl	80017f4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000eda:	f000 fccb 	bl	8001874 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000ede:	f000 fd49 	bl	8001974 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000ee2:	f000 fd7d 	bl	80019e0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000ee6:	f000 fdcb 	bl	8001a80 <MX_USART1_UART_Init>

  ///////////////////////////
  //change
  ///////////////////////////

  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eee:	488c      	ldr	r0, [pc, #560]	; (8001120 <main+0x268>)
 8000ef0:	f002 f97f 	bl	80031f2 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000ef4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef8:	4889      	ldr	r0, [pc, #548]	; (8001120 <main+0x268>)
 8000efa:	f002 f97a 	bl	80031f2 <HAL_GPIO_TogglePin>

  //register holds configuration bit setup for registers
  uint8_t reg[1];

  //gyroscope
  reg[0]=0xC0;
 8000efe:	23c0      	movs	r3, #192	; 0xc0
 8000f00:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG1_G, 1, reg, 1, 0x100);
 8000f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2301      	movs	r3, #1
 8000f16:	2210      	movs	r2, #16
 8000f18:	21d6      	movs	r1, #214	; 0xd6
 8000f1a:	4882      	ldr	r0, [pc, #520]	; (8001124 <main+0x26c>)
 8000f1c:	f004 f838 	bl	8004f90 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG2_G, 1, reg, 1, 0x100);
 8000f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2301      	movs	r3, #1
 8000f38:	2211      	movs	r2, #17
 8000f3a:	21d6      	movs	r1, #214	; 0xd6
 8000f3c:	4879      	ldr	r0, [pc, #484]	; (8001124 <main+0x26c>)
 8000f3e:	f004 f827 	bl	8004f90 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG3_G, 1, reg, 1, 0x100);
 8000f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4c:	9302      	str	r3, [sp, #8]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	2212      	movs	r2, #18
 8000f5c:	21d6      	movs	r1, #214	; 0xd6
 8000f5e:	4871      	ldr	r0, [pc, #452]	; (8001124 <main+0x26c>)
 8000f60:	f004 f816 	bl	8004f90 <HAL_I2C_Mem_Write>
  reg[0]=0x38;
 8000f64:	2338      	movs	r3, #56	; 0x38
 8000f66:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG4, 1, reg, 1, 0x100);
 8000f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6e:	9302      	str	r3, [sp, #8]
 8000f70:	2301      	movs	r3, #1
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	221e      	movs	r2, #30
 8000f7e:	21d6      	movs	r1, #214	; 0xd6
 8000f80:	4868      	ldr	r0, [pc, #416]	; (8001124 <main+0x26c>)
 8000f82:	f004 f805 	bl	8004f90 <HAL_I2C_Mem_Write>


  //accelerometer
  reg[0]=0x38;
 8000f86:	2338      	movs	r3, #56	; 0x38
 8000f88:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG5_XL, 1, reg, 1, 0x100);
 8000f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	221f      	movs	r2, #31
 8000fa0:	21d6      	movs	r1, #214	; 0xd6
 8000fa2:	4860      	ldr	r0, [pc, #384]	; (8001124 <main+0x26c>)
 8000fa4:	f003 fff4 	bl	8004f90 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG6_XL, 1, reg, 1, 0x100);
 8000fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	2220      	movs	r2, #32
 8000fc2:	21d6      	movs	r1, #214	; 0xd6
 8000fc4:	4857      	ldr	r0, [pc, #348]	; (8001124 <main+0x26c>)
 8000fc6:	f003 ffe3 	bl	8004f90 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_GYRO_ACC , CTRL_REG7_XL, 1, reg, 1, 0x100);
 8000fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2221      	movs	r2, #33	; 0x21
 8000fe4:	21d6      	movs	r1, #214	; 0xd6
 8000fe6:	484f      	ldr	r0, [pc, #316]	; (8001124 <main+0x26c>)
 8000fe8:	f003 ffd2 	bl	8004f90 <HAL_I2C_Mem_Write>


  //mag
  reg[0]=0x1C;
 8000fec:	231c      	movs	r3, #28
 8000fee:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG1_M, 1, reg, 1, 0x100);
 8000ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	2220      	movs	r2, #32
 8001006:	213c      	movs	r1, #60	; 0x3c
 8001008:	4846      	ldr	r0, [pc, #280]	; (8001124 <main+0x26c>)
 800100a:	f003 ffc1 	bl	8004f90 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 800100e:	2300      	movs	r3, #0
 8001010:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG2_M, 1, reg, 1, 0x100);
 8001014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	2301      	movs	r3, #1
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2301      	movs	r3, #1
 8001026:	2221      	movs	r2, #33	; 0x21
 8001028:	213c      	movs	r1, #60	; 0x3c
 800102a:	483e      	ldr	r0, [pc, #248]	; (8001124 <main+0x26c>)
 800102c:	f003 ffb0 	bl	8004f90 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG3_M, 1, reg, 1, 0x100);
 8001036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2301      	movs	r3, #1
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	2222      	movs	r2, #34	; 0x22
 800104a:	213c      	movs	r1, #60	; 0x3c
 800104c:	4835      	ldr	r0, [pc, #212]	; (8001124 <main+0x26c>)
 800104e:	f003 ff9f 	bl	8004f90 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8001052:	2300      	movs	r3, #0
 8001054:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG4_M, 1, reg, 1, 0x100);
 8001058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2301      	movs	r3, #1
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	2223      	movs	r2, #35	; 0x23
 800106c:	213c      	movs	r1, #60	; 0x3c
 800106e:	482d      	ldr	r0, [pc, #180]	; (8001124 <main+0x26c>)
 8001070:	f003 ff8e 	bl	8004f90 <HAL_I2C_Mem_Write>
  reg[0]=0x00;
 8001074:	2300      	movs	r3, #0
 8001076:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  HAL_I2C_Mem_Write(&hi2c3,IMU_MAG , CTRL_REG5_M, 1, reg, 1, 0x100);
 800107a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	2301      	movs	r3, #1
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	2224      	movs	r2, #36	; 0x24
 800108e:	213c      	movs	r1, #60	; 0x3c
 8001090:	4824      	ldr	r0, [pc, #144]	; (8001124 <main+0x26c>)
 8001092:	f003 ff7d 	bl	8004f90 <HAL_I2C_Mem_Write>


  double a[3],g[3], m[3];
  uint8_t recieve[6];
  uint8_t buf[50];
  int16_t i = 0, g_data[3],a_data[3], m_data[3];
 8001096:	2300      	movs	r3, #0
 8001098:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <main+0x270>)
 800109e:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80010a2:	461d      	mov	r5, r3
 80010a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f00a faa6 	bl	800b608 <osThreadCreate>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a1b      	ldr	r2, [pc, #108]	; (800112c <main+0x274>)
 80010c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */
//  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
  while (1)
  {
	  char st[50]="";
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	3304      	adds	r3, #4
 80010ca:	222e      	movs	r2, #46	; 0x2e
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00c febe 	bl	800de50 <memset>
	  char st1[50]="";
 80010d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	3304      	adds	r3, #4
 80010de:	222e      	movs	r2, #46	; 0x2e
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00c feb4 	bl	800de50 <memset>
	  char st2[50]="";
 80010e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	3304      	adds	r3, #4
 80010f2:	222e      	movs	r2, #46	; 0x2e
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00c feaa 	bl	800de50 <memset>
	  //gyroscope
//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//	  HAL_Delay(200);

	  HAL_I2C_Mem_Read(&hi2c3, IMU_GYRO_ACC, 0x18, 1, recieve, 6, 0x100);
 80010fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001100:	9302      	str	r3, [sp, #8]
 8001102:	2306      	movs	r3, #6
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	2218      	movs	r2, #24
 8001110:	21d6      	movs	r1, #214	; 0xd6
 8001112:	4804      	ldr	r0, [pc, #16]	; (8001124 <main+0x26c>)
 8001114:	f004 f836 	bl	8005184 <HAL_I2C_Mem_Read>
	  for(i = 0;i<3;i++)
 8001118:	2300      	movs	r3, #0
 800111a:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 800111e:	e047      	b.n	80011b0 <main+0x2f8>
 8001120:	40021800 	.word	0x40021800
 8001124:	20008214 	.word	0x20008214
 8001128:	0801050c 	.word	0x0801050c
 800112c:	20008210 	.word	0x20008210
	  {
		  g_data[i]=(recieve[2*i+1]<<8)|recieve[2*i];
 8001130:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	3301      	adds	r3, #1
 8001138:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800113c:	4413      	add	r3, r2
 800113e:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b219      	sxth	r1, r3
 8001146:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001150:	4413      	add	r3, r2
 8001152:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001156:	b21a      	sxth	r2, r3
 8001158:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800115c:	430a      	orrs	r2, r1
 800115e:	b212      	sxth	r2, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8001166:	440b      	add	r3, r1
 8001168:	f823 2c94 	strh.w	r2, [r3, #-148]
		  g[i] = (double)g_data[i]*0.007477;//(245/32768)
 800116c:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001176:	4413      	add	r3, r2
 8001178:	f933 3c94 	ldrsh.w	r3, [r3, #-148]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9e1 	bl	8000544 <__aeabi_i2d>
 8001182:	f9b7 417e 	ldrsh.w	r4, [r7, #382]	; 0x17e
 8001186:	a3ca      	add	r3, pc, #808	; (adr r3, 80014b0 <main+0x5f8>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	f7ff fa44 	bl	8000618 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	00e1      	lsls	r1, r4, #3
 8001196:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 800119a:	4401      	add	r1, r0
 800119c:	3938      	subs	r1, #56	; 0x38
 800119e:	e9c1 2300 	strd	r2, r3, [r1]
	  for(i = 0;i<3;i++)
 80011a2:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	3301      	adds	r3, #1
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 80011b0:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	ddbb      	ble.n	8001130 <main+0x278>
	  }

	  strcat(st,"vx=");
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f818 	bl	80001f0 <strlen>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4413      	add	r3, r2
 80011c8:	4aaf      	ldr	r2, [pc, #700]	; (8001488 <main+0x5d0>)
 80011ca:	6810      	ldr	r0, [r2, #0]
 80011cc:	6018      	str	r0, [r3, #0]
	  double_to_char(g[0],buffer);
 80011ce:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80011d2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011d6:	4618      	mov	r0, r3
 80011d8:	eeb0 0a47 	vmov.f32	s0, s14
 80011dc:	eef0 0a67 	vmov.f32	s1, s15
 80011e0:	f000 fa48 	bl	8001674 <double_to_char>
	  strcat(st,buffer);
 80011e4:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f00c fef1 	bl	800dfd4 <strcat>

	  strcat(st,"vy=");
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7fe fffb 	bl	80001f0 <strlen>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4413      	add	r3, r2
 8001202:	4aa2      	ldr	r2, [pc, #648]	; (800148c <main+0x5d4>)
 8001204:	6810      	ldr	r0, [r2, #0]
 8001206:	6018      	str	r0, [r3, #0]


	  double_to_char(g[1],buffer);
 8001208:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 800120c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001210:	4618      	mov	r0, r3
 8001212:	eeb0 0a47 	vmov.f32	s0, s14
 8001216:	eef0 0a67 	vmov.f32	s1, s15
 800121a:	f000 fa2b 	bl	8001674 <double_to_char>
	  strcat(st,buffer);
 800121e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f00c fed4 	bl	800dfd4 <strcat>

	  strcat(st,"vz=");
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	4618      	mov	r0, r3
 8001230:	f7fe ffde 	bl	80001f0 <strlen>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4413      	add	r3, r2
 800123c:	4a94      	ldr	r2, [pc, #592]	; (8001490 <main+0x5d8>)
 800123e:	6810      	ldr	r0, [r2, #0]
 8001240:	6018      	str	r0, [r3, #0]
	  double_to_char(g[2],buffer);
 8001242:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8001246:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800124a:	4618      	mov	r0, r3
 800124c:	eeb0 0a47 	vmov.f32	s0, s14
 8001250:	eef0 0a67 	vmov.f32	s1, s15
 8001254:	f000 fa0e 	bl	8001674 <double_to_char>
	  strcat(st,buffer);
 8001258:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f00c feb7 	bl	800dfd4 <strcat>


	  strcat(st,"\r\n");
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4618      	mov	r0, r3
 800126a:	f7fe ffc1 	bl	80001f0 <strlen>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4413      	add	r3, r2
 8001276:	4a87      	ldr	r2, [pc, #540]	; (8001494 <main+0x5dc>)
 8001278:	8811      	ldrh	r1, [r2, #0]
 800127a:	7892      	ldrb	r2, [r2, #2]
 800127c:	8019      	strh	r1, [r3, #0]
 800127e:	709a      	strb	r2, [r3, #2]

	  strcpy((char*)buf, st);
 8001280:	1d3a      	adds	r2, r7, #4
 8001282:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f00c feb2 	bl	800dff2 <strcpy>
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800128e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001292:	4618      	mov	r0, r3
 8001294:	f7fe ffac 	bl	80001f0 <strlen>
 8001298:	4603      	mov	r3, r0
 800129a:	b29a      	uxth	r2, r3
 800129c:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	487c      	ldr	r0, [pc, #496]	; (8001498 <main+0x5e0>)
 80012a6:	f006 fcc0 	bl	8007c2a <HAL_UART_Transmit>


	  //acclerometer


	  HAL_I2C_Mem_Read(&hi2c3, IMU_GYRO_ACC, 0x28, 1, recieve, 6, 0x100);
 80012aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	2306      	movs	r3, #6
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	2228      	movs	r2, #40	; 0x28
 80012be:	21d6      	movs	r1, #214	; 0xd6
 80012c0:	4876      	ldr	r0, [pc, #472]	; (800149c <main+0x5e4>)
 80012c2:	f003 ff5f 	bl	8005184 <HAL_I2C_Mem_Read>
	  for(i = 0;i<3;i++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 80012cc:	e03f      	b.n	800134e <main+0x496>
	  {
		  a_data[i]=(recieve[2*i+1]<<8)|recieve[2*i];
 80012ce:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	3301      	adds	r3, #1
 80012d6:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80012da:	4413      	add	r3, r2
 80012dc:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b219      	sxth	r1, r3
 80012e4:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80012ee:	4413      	add	r3, r2
 80012f0:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80012fa:	430a      	orrs	r2, r1
 80012fc:	b212      	sxth	r2, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8001304:	440b      	add	r3, r1
 8001306:	f823 2c9c 	strh.w	r2, [r3, #-156]
	  	  a[i] = (double)a_data[i]/16384;//(2/32768)
 800130a:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001314:	4413      	add	r3, r2
 8001316:	f933 3c9c 	ldrsh.w	r3, [r3, #-156]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f912 	bl	8000544 <__aeabi_i2d>
 8001320:	f9b7 417e 	ldrsh.w	r4, [r7, #382]	; 0x17e
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <main+0x5e8>)
 800132a:	f7ff fa9f 	bl	800086c <__aeabi_ddiv>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	00e1      	lsls	r1, r4, #3
 8001334:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8001338:	4401      	add	r1, r0
 800133a:	3920      	subs	r1, #32
 800133c:	e9c1 2300 	strd	r2, r3, [r1]
	  for(i = 0;i<3;i++)
 8001340:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001344:	b29b      	uxth	r3, r3
 8001346:	3301      	adds	r3, #1
 8001348:	b29b      	uxth	r3, r3
 800134a:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 800134e:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001352:	2b02      	cmp	r3, #2
 8001354:	ddbb      	ble.n	80012ce <main+0x416>
	  }

	  strcat(st1,"ax=");
 8001356:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800135a:	4618      	mov	r0, r3
 800135c:	f7fe ff48 	bl	80001f0 <strlen>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001368:	4413      	add	r3, r2
 800136a:	4a4e      	ldr	r2, [pc, #312]	; (80014a4 <main+0x5ec>)
 800136c:	6810      	ldr	r0, [r2, #0]
 800136e:	6018      	str	r0, [r3, #0]
	  double_to_char(a[0],buffer);
 8001370:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8001374:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001378:	4618      	mov	r0, r3
 800137a:	eeb0 0a47 	vmov.f32	s0, s14
 800137e:	eef0 0a67 	vmov.f32	s1, s15
 8001382:	f000 f977 	bl	8001674 <double_to_char>
	  strcat(st1,buffer);
 8001386:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800138a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f00c fe1f 	bl	800dfd4 <strcat>

	  strcat(st1,"ay=");
 8001396:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800139a:	4618      	mov	r0, r3
 800139c:	f7fe ff28 	bl	80001f0 <strlen>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013a8:	4413      	add	r3, r2
 80013aa:	4a3f      	ldr	r2, [pc, #252]	; (80014a8 <main+0x5f0>)
 80013ac:	6810      	ldr	r0, [r2, #0]
 80013ae:	6018      	str	r0, [r3, #0]


	  double_to_char(a[1],buffer);
 80013b0:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80013b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013b8:	4618      	mov	r0, r3
 80013ba:	eeb0 0a47 	vmov.f32	s0, s14
 80013be:	eef0 0a67 	vmov.f32	s1, s15
 80013c2:	f000 f957 	bl	8001674 <double_to_char>
	  strcat(st1,buffer);
 80013c6:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80013ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f00c fdff 	bl	800dfd4 <strcat>

	  strcat(st1,"az=");
 80013d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013da:	4618      	mov	r0, r3
 80013dc:	f7fe ff08 	bl	80001f0 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013e8:	4413      	add	r3, r2
 80013ea:	4a30      	ldr	r2, [pc, #192]	; (80014ac <main+0x5f4>)
 80013ec:	6810      	ldr	r0, [r2, #0]
 80013ee:	6018      	str	r0, [r3, #0]
	  double_to_char(a[2],buffer);
 80013f0:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80013f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013f8:	4618      	mov	r0, r3
 80013fa:	eeb0 0a47 	vmov.f32	s0, s14
 80013fe:	eef0 0a67 	vmov.f32	s1, s15
 8001402:	f000 f937 	bl	8001674 <double_to_char>
	  strcat(st1,buffer);
 8001406:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800140a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f00c fddf 	bl	800dfd4 <strcat>


	  strcat(st1,"\r\n");
 8001416:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800141a:	4618      	mov	r0, r3
 800141c:	f7fe fee8 	bl	80001f0 <strlen>
 8001420:	4603      	mov	r3, r0
 8001422:	461a      	mov	r2, r3
 8001424:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001428:	4413      	add	r3, r2
 800142a:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <main+0x5dc>)
 800142c:	8811      	ldrh	r1, [r2, #0]
 800142e:	7892      	ldrb	r2, [r2, #2]
 8001430:	8019      	strh	r1, [r3, #0]
 8001432:	709a      	strb	r2, [r3, #2]

	  strcpy((char*)buf, st1);
 8001434:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001438:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f00c fdd7 	bl	800dff2 <strcpy>
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001444:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001448:	4618      	mov	r0, r3
 800144a:	f7fe fed1 	bl	80001f0 <strlen>
 800144e:	4603      	mov	r3, r0
 8001450:	b29a      	uxth	r2, r3
 8001452:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	480f      	ldr	r0, [pc, #60]	; (8001498 <main+0x5e0>)
 800145c:	f006 fbe5 	bl	8007c2a <HAL_UART_Transmit>

	  	  //magnetometer
	  HAL_I2C_Mem_Read(&hi2c3, IMU_MAG, 0x28, 1, recieve, 6, 0x100);
 8001460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	2306      	movs	r3, #6
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2301      	movs	r3, #1
 8001472:	2228      	movs	r2, #40	; 0x28
 8001474:	213c      	movs	r1, #60	; 0x3c
 8001476:	4809      	ldr	r0, [pc, #36]	; (800149c <main+0x5e4>)
 8001478:	f003 fe84 	bl	8005184 <HAL_I2C_Mem_Read>
	  for(i = 0;i<3;i++)
 800147c:	2300      	movs	r3, #0
 800147e:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 8001482:	e059      	b.n	8001538 <main+0x680>
 8001484:	f3af 8000 	nop.w
 8001488:	080104e4 	.word	0x080104e4
 800148c:	080104e8 	.word	0x080104e8
 8001490:	080104ec 	.word	0x080104ec
 8001494:	080104f0 	.word	0x080104f0
 8001498:	20008370 	.word	0x20008370
 800149c:	20008214 	.word	0x20008214
 80014a0:	40d00000 	.word	0x40d00000
 80014a4:	080104f4 	.word	0x080104f4
 80014a8:	080104f8 	.word	0x080104f8
 80014ac:	080104fc 	.word	0x080104fc
 80014b0:	e78e1933 	.word	0xe78e1933
 80014b4:	3f7ea033 	.word	0x3f7ea033
	  {
		  m_data[i]=(recieve[2*i+1]<<8)|recieve[2*i];
 80014b8:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	3301      	adds	r3, #1
 80014c0:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80014c4:	4413      	add	r3, r2
 80014c6:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b219      	sxth	r1, r3
 80014ce:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80014d8:	4413      	add	r3, r2
 80014da:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80014de:	b21a      	sxth	r2, r3
 80014e0:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80014e4:	430a      	orrs	r2, r1
 80014e6:	b212      	sxth	r2, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80014ee:	440b      	add	r3, r1
 80014f0:	f823 2ca4 	strh.w	r2, [r3, #-164]
		  m[i] = (double)m_data[i]*0.0001221;//(4/32768)
 80014f4:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80014fe:	4413      	add	r3, r2
 8001500:	f933 3ca4 	ldrsh.w	r3, [r3, #-164]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f81d 	bl	8000544 <__aeabi_i2d>
 800150a:	f9b7 417e 	ldrsh.w	r4, [r7, #382]	; 0x17e
 800150e:	a357      	add	r3, pc, #348	; (adr r3, 800166c <main+0x7b4>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f880 	bl	8000618 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	00e1      	lsls	r1, r4, #3
 800151e:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8001522:	4401      	add	r1, r0
 8001524:	3950      	subs	r1, #80	; 0x50
 8001526:	e9c1 2300 	strd	r2, r3, [r1]
	  for(i = 0;i<3;i++)
 800152a:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800152e:	b29b      	uxth	r3, r3
 8001530:	3301      	adds	r3, #1
 8001532:	b29b      	uxth	r3, r3
 8001534:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 8001538:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 800153c:	2b02      	cmp	r3, #2
 800153e:	ddbb      	ble.n	80014b8 <main+0x600>
	  }
	  strcat(st2,"mx=");
 8001540:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe fe53 	bl	80001f0 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001552:	4413      	add	r3, r2
 8001554:	4a40      	ldr	r2, [pc, #256]	; (8001658 <main+0x7a0>)
 8001556:	6810      	ldr	r0, [r2, #0]
 8001558:	6018      	str	r0, [r3, #0]
	  double_to_char(m[0],buffer);
 800155a:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 800155e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001562:	4618      	mov	r0, r3
 8001564:	eeb0 0a47 	vmov.f32	s0, s14
 8001568:	eef0 0a67 	vmov.f32	s1, s15
 800156c:	f000 f882 	bl	8001674 <double_to_char>
	  strcat(st2,buffer);
 8001570:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001574:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f00c fd2a 	bl	800dfd4 <strcat>

	  strcat(st2,"my=");
 8001580:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fe33 	bl	80001f0 <strlen>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001592:	4413      	add	r3, r2
 8001594:	4a31      	ldr	r2, [pc, #196]	; (800165c <main+0x7a4>)
 8001596:	6810      	ldr	r0, [r2, #0]
 8001598:	6018      	str	r0, [r3, #0]


	  double_to_char(m[1],buffer);
 800159a:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 800159e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015a2:	4618      	mov	r0, r3
 80015a4:	eeb0 0a47 	vmov.f32	s0, s14
 80015a8:	eef0 0a67 	vmov.f32	s1, s15
 80015ac:	f000 f862 	bl	8001674 <double_to_char>
	  strcat(st2,buffer);
 80015b0:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80015b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00c fd0a 	bl	800dfd4 <strcat>

	  strcat(st2,"mz=");
 80015c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe fe13 	bl	80001f0 <strlen>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015d2:	4413      	add	r3, r2
 80015d4:	4a22      	ldr	r2, [pc, #136]	; (8001660 <main+0x7a8>)
 80015d6:	6810      	ldr	r0, [r2, #0]
 80015d8:	6018      	str	r0, [r3, #0]
	  double_to_char(m[2],buffer);
 80015da:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 80015de:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015e2:	4618      	mov	r0, r3
 80015e4:	eeb0 0a47 	vmov.f32	s0, s14
 80015e8:	eef0 0a67 	vmov.f32	s1, s15
 80015ec:	f000 f842 	bl	8001674 <double_to_char>
	  strcat(st2,buffer);
 80015f0:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80015f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f00c fcea 	bl	800dfd4 <strcat>


	  strcat(st2,"\r\n");
 8001600:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe fdf3 	bl	80001f0 <strlen>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001612:	4413      	add	r3, r2
 8001614:	4a13      	ldr	r2, [pc, #76]	; (8001664 <main+0x7ac>)
 8001616:	8811      	ldrh	r1, [r2, #0]
 8001618:	7892      	ldrb	r2, [r2, #2]
 800161a:	8019      	strh	r1, [r3, #0]
 800161c:	709a      	strb	r2, [r3, #2]

	  strcpy((char*)buf, st2);
 800161e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001622:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f00c fce2 	bl	800dff2 <strcpy>
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800162e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fddc 	bl	80001f0 <strlen>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	4808      	ldr	r0, [pc, #32]	; (8001668 <main+0x7b0>)
 8001646:	f006 faf0 	bl	8007c2a <HAL_UART_Transmit>


	  HAL_Delay(200);//5Hz sample
 800164a:	20c8      	movs	r0, #200	; 0xc8
 800164c:	f001 f8fe 	bl	800284c <HAL_Delay>
  {
 8001650:	e537      	b.n	80010c2 <main+0x20a>
 8001652:	bf00      	nop
 8001654:	f3af 8000 	nop.w
 8001658:	08010500 	.word	0x08010500
 800165c:	08010504 	.word	0x08010504
 8001660:	08010508 	.word	0x08010508
 8001664:	080104f0 	.word	0x080104f0
 8001668:	20008370 	.word	0x20008370
 800166c:	0380be01 	.word	0x0380be01
 8001670:	3f2000ff 	.word	0x3f2000ff

08001674 <double_to_char>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
//function to conver double variabls to a char
void double_to_char(double f,char * buffer){
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	ed87 0b02 	vstr	d0, [r7, #8]
 800167e:	6078      	str	r0, [r7, #4]
    gcvt(f,10,buffer);
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	200a      	movs	r0, #10
 8001684:	ed97 0b02 	vldr	d0, [r7, #8]
 8001688:	f00c fb76 	bl	800dd78 <gcvt>
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b094      	sub	sp, #80	; 0x50
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	f107 0320 	add.w	r3, r7, #32
 800169e:	2230      	movs	r2, #48	; 0x30
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f00c fbd4 	bl	800de50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <SystemClock_Config+0xcc>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	4a27      	ldr	r2, [pc, #156]	; (8001760 <SystemClock_Config+0xcc>)
 80016c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c6:	6413      	str	r3, [r2, #64]	; 0x40
 80016c8:	4b25      	ldr	r3, [pc, #148]	; (8001760 <SystemClock_Config+0xcc>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	4b22      	ldr	r3, [pc, #136]	; (8001764 <SystemClock_Config+0xd0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016e0:	4a20      	ldr	r2, [pc, #128]	; (8001764 <SystemClock_Config+0xd0>)
 80016e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <SystemClock_Config+0xd0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016f4:	2301      	movs	r3, #1
 80016f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fe:	2302      	movs	r3, #2
 8001700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001708:	2304      	movs	r3, #4
 800170a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800170c:	2348      	movs	r3, #72	; 0x48
 800170e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001710:	2302      	movs	r3, #2
 8001712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001714:	2303      	movs	r3, #3
 8001716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001718:	f107 0320 	add.w	r3, r7, #32
 800171c:	4618      	mov	r0, r3
 800171e:	f004 fe95 	bl	800644c <HAL_RCC_OscConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001728:	f000 fb50 	bl	8001dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172c:	230f      	movs	r3, #15
 800172e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001730:	2302      	movs	r3, #2
 8001732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	2102      	movs	r1, #2
 8001748:	4618      	mov	r0, r3
 800174a:	f005 f8f7 	bl	800693c <HAL_RCC_ClockConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001754:	f000 fb3a 	bl	8001dcc <Error_Handler>
  }
}
 8001758:	bf00      	nop
 800175a:	3750      	adds	r7, #80	; 0x50
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800
 8001764:	40007000 	.word	0x40007000

08001768 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <MX_CRC_Init+0x20>)
 800176e:	4a07      	ldr	r2, [pc, #28]	; (800178c <MX_CRC_Init+0x24>)
 8001770:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_CRC_Init+0x20>)
 8001774:	f001 f970 	bl	8002a58 <HAL_CRC_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800177e:	f000 fb25 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200082c0 	.word	0x200082c0
 800178c:	40023000 	.word	0x40023000

08001790 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <MX_DMA2D_Init+0x5c>)
 8001796:	4a16      	ldr	r2, [pc, #88]	; (80017f0 <MX_DMA2D_Init+0x60>)
 8001798:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_DMA2D_Init+0x5c>)
 800179c:	2200      	movs	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_DMA2D_Init+0x5c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_DMA2D_Init+0x5c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_DMA2D_Init+0x5c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_DMA2D_Init+0x5c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_DMA2D_Init+0x5c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_DMA2D_Init+0x5c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80017c4:	4809      	ldr	r0, [pc, #36]	; (80017ec <MX_DMA2D_Init+0x5c>)
 80017c6:	f001 f963 	bl	8002a90 <HAL_DMA2D_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80017d0:	f000 fafc 	bl	8001dcc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80017d4:	2101      	movs	r1, #1
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_DMA2D_Init+0x5c>)
 80017d8:	f001 fab4 	bl	8002d44 <HAL_DMA2D_ConfigLayer>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80017e2:	f000 faf3 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200083fc 	.word	0x200083fc
 80017f0:	4002b000 	.word	0x4002b000

080017f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <MX_I2C3_Init+0x74>)
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <MX_I2C3_Init+0x78>)
 80017fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <MX_I2C3_Init+0x74>)
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <MX_I2C3_Init+0x7c>)
 8001802:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <MX_I2C3_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <MX_I2C3_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <MX_I2C3_Init+0x74>)
 8001812:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001816:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <MX_I2C3_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_I2C3_Init+0x74>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001824:	4b10      	ldr	r3, [pc, #64]	; (8001868 <MX_I2C3_Init+0x74>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_I2C3_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001830:	480d      	ldr	r0, [pc, #52]	; (8001868 <MX_I2C3_Init+0x74>)
 8001832:	f003 fa69 	bl	8004d08 <HAL_I2C_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800183c:	f000 fac6 	bl	8001dcc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001840:	2100      	movs	r1, #0
 8001842:	4809      	ldr	r0, [pc, #36]	; (8001868 <MX_I2C3_Init+0x74>)
 8001844:	f004 fa1f 	bl	8005c86 <HAL_I2CEx_ConfigAnalogFilter>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800184e:	f000 fabd 	bl	8001dcc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001852:	2100      	movs	r1, #0
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <MX_I2C3_Init+0x74>)
 8001856:	f004 fa52 	bl	8005cfe <HAL_I2CEx_ConfigDigitalFilter>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001860:	f000 fab4 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20008214 	.word	0x20008214
 800186c:	40005c00 	.word	0x40005c00
 8001870:	000186a0 	.word	0x000186a0

08001874 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08e      	sub	sp, #56	; 0x38
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2234      	movs	r2, #52	; 0x34
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f00c fae5 	bl	800de50 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001886:	4b39      	ldr	r3, [pc, #228]	; (800196c <MX_LTDC_Init+0xf8>)
 8001888:	4a39      	ldr	r2, [pc, #228]	; (8001970 <MX_LTDC_Init+0xfc>)
 800188a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800188c:	4b37      	ldr	r3, [pc, #220]	; (800196c <MX_LTDC_Init+0xf8>)
 800188e:	2200      	movs	r2, #0
 8001890:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001892:	4b36      	ldr	r3, [pc, #216]	; (800196c <MX_LTDC_Init+0xf8>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001898:	4b34      	ldr	r3, [pc, #208]	; (800196c <MX_LTDC_Init+0xf8>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800189e:	4b33      	ldr	r3, [pc, #204]	; (800196c <MX_LTDC_Init+0xf8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <MX_LTDC_Init+0xf8>)
 80018a6:	2209      	movs	r2, #9
 80018a8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80018aa:	4b30      	ldr	r3, [pc, #192]	; (800196c <MX_LTDC_Init+0xf8>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <MX_LTDC_Init+0xf8>)
 80018b2:	221d      	movs	r2, #29
 80018b4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80018b6:	4b2d      	ldr	r3, [pc, #180]	; (800196c <MX_LTDC_Init+0xf8>)
 80018b8:	2203      	movs	r2, #3
 80018ba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <MX_LTDC_Init+0xf8>)
 80018be:	f240 120d 	movw	r2, #269	; 0x10d
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80018c4:	4b29      	ldr	r3, [pc, #164]	; (800196c <MX_LTDC_Init+0xf8>)
 80018c6:	f240 1243 	movw	r2, #323	; 0x143
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <MX_LTDC_Init+0xf8>)
 80018ce:	f240 1217 	movw	r2, #279	; 0x117
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <MX_LTDC_Init+0xf8>)
 80018d6:	f240 1247 	movw	r2, #327	; 0x147
 80018da:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80018dc:	4b23      	ldr	r3, [pc, #140]	; (800196c <MX_LTDC_Init+0xf8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <MX_LTDC_Init+0xf8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80018ec:	4b1f      	ldr	r3, [pc, #124]	; (800196c <MX_LTDC_Init+0xf8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80018f4:	481d      	ldr	r0, [pc, #116]	; (800196c <MX_LTDC_Init+0xf8>)
 80018f6:	f004 fa41 	bl	8005d7c <HAL_LTDC_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001900:	f000 fa64 	bl	8001dcc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001908:	23f0      	movs	r3, #240	; 0xf0
 800190a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001910:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001914:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001916:	2302      	movs	r3, #2
 8001918:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800191a:	23ff      	movs	r3, #255	; 0xff
 800191c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001922:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001926:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001928:	2307      	movs	r3, #7
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800192c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001932:	23f0      	movs	r3, #240	; 0xf0
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001936:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2200      	movs	r2, #0
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_LTDC_Init+0xf8>)
 8001956:	f004 fba3 	bl	80060a0 <HAL_LTDC_ConfigLayer>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001960:	f000 fa34 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	3738      	adds	r7, #56	; 0x38
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	200082c8 	.word	0x200082c8
 8001970:	40016800 	.word	0x40016800

08001974 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <MX_SPI5_Init+0x64>)
 800197a:	4a18      	ldr	r2, [pc, #96]	; (80019dc <MX_SPI5_Init+0x68>)
 800197c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <MX_SPI5_Init+0x64>)
 8001980:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001984:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <MX_SPI5_Init+0x64>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <MX_SPI5_Init+0x64>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <MX_SPI5_Init+0x64>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <MX_SPI5_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_SPI5_Init+0x64>)
 80019a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_SPI5_Init+0x64>)
 80019a8:	2218      	movs	r2, #24
 80019aa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <MX_SPI5_Init+0x64>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_SPI5_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <MX_SPI5_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_SPI5_Init+0x64>)
 80019c0:	220a      	movs	r2, #10
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80019c4:	4804      	ldr	r0, [pc, #16]	; (80019d8 <MX_SPI5_Init+0x64>)
 80019c6:	f005 fbd9 	bl	800717c <HAL_SPI_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80019d0:	f000 f9fc 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20008268 	.word	0x20008268
 80019dc:	40015000 	.word	0x40015000

080019e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	463b      	mov	r3, r7
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <MX_TIM1_Init+0x98>)
 80019fe:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <MX_TIM1_Init+0x9c>)
 8001a00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a28:	4813      	ldr	r0, [pc, #76]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a2a:	f005 fc30 	bl	800728e <HAL_TIM_Base_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a34:	f000 f9ca 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	4619      	mov	r1, r3
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a46:	f005 fde9 	bl	800761c <HAL_TIM_ConfigClockSource>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a50:	f000 f9bc 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a62:	f006 f805 	bl	8007a70 <HAL_TIMEx_MasterConfigSynchronization>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a6c:	f000 f9ae 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200083b4 	.word	0x200083b4
 8001a7c:	40010000 	.word	0x40010000

08001a80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <MX_USART1_UART_Init+0x50>)
 8001a88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_USART1_UART_Init+0x4c>)
 8001ab8:	f006 f86a 	bl	8007b90 <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ac2:	f000 f983 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20008370 	.word	0x20008370
 8001ad0:	40011000 	.word	0x40011000

08001ad4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
 8001ae8:	615a      	str	r2, [r3, #20]
 8001aea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <MX_FMC_Init+0x98>)
 8001aee:	4a20      	ldr	r2, [pc, #128]	; (8001b70 <MX_FMC_Init+0x9c>)
 8001af0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <MX_FMC_Init+0x98>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <MX_FMC_Init+0x98>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <MX_FMC_Init+0x98>)
 8001b00:	2204      	movs	r2, #4
 8001b02:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <MX_FMC_Init+0x98>)
 8001b06:	2210      	movs	r2, #16
 8001b08:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <MX_FMC_Init+0x98>)
 8001b0c:	2240      	movs	r2, #64	; 0x40
 8001b0e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <MX_FMC_Init+0x98>)
 8001b12:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001b16:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <MX_FMC_Init+0x98>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <MX_FMC_Init+0x98>)
 8001b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b24:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <MX_FMC_Init+0x98>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <MX_FMC_Init+0x98>)
 8001b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001b34:	2302      	movs	r3, #2
 8001b36:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001b40:	2307      	movs	r3, #7
 8001b42:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001b44:	2303      	movs	r3, #3
 8001b46:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_FMC_Init+0x98>)
 8001b56:	f005 fadd 	bl	8007114 <HAL_SDRAM_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001b60:	f000 f934 	bl	8001dcc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001b64:	bf00      	nop
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	2000843c 	.word	0x2000843c
 8001b70:	a0000140 	.word	0xa0000140

08001b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	; 0x38
 8001b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
 8001b8e:	4b7b      	ldr	r3, [pc, #492]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a7a      	ldr	r2, [pc, #488]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b78      	ldr	r3, [pc, #480]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	623b      	str	r3, [r7, #32]
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	4b74      	ldr	r3, [pc, #464]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a73      	ldr	r2, [pc, #460]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001bb0:	f043 0320 	orr.w	r3, r3, #32
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b71      	ldr	r3, [pc, #452]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a6c      	ldr	r2, [pc, #432]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	4b66      	ldr	r3, [pc, #408]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a65      	ldr	r2, [pc, #404]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b63      	ldr	r3, [pc, #396]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b5f      	ldr	r3, [pc, #380]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a5e      	ldr	r2, [pc, #376]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b5c      	ldr	r3, [pc, #368]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b58      	ldr	r3, [pc, #352]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a57      	ldr	r2, [pc, #348]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b55      	ldr	r3, [pc, #340]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	4b51      	ldr	r3, [pc, #324]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a50      	ldr	r2, [pc, #320]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b4e      	ldr	r3, [pc, #312]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	4b4a      	ldr	r3, [pc, #296]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a49      	ldr	r2, [pc, #292]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <MX_GPIO_Init+0x208>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2116      	movs	r1, #22
 8001c6e:	4844      	ldr	r0, [pc, #272]	; (8001d80 <MX_GPIO_Init+0x20c>)
 8001c70:	f001 faa6 	bl	80031c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2180      	movs	r1, #128	; 0x80
 8001c78:	4842      	ldr	r0, [pc, #264]	; (8001d84 <MX_GPIO_Init+0x210>)
 8001c7a:	f001 faa1 	bl	80031c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001c84:	4840      	ldr	r0, [pc, #256]	; (8001d88 <MX_GPIO_Init+0x214>)
 8001c86:	f001 fa9b 	bl	80031c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001c90:	483e      	ldr	r0, [pc, #248]	; (8001d8c <MX_GPIO_Init+0x218>)
 8001c92:	f001 fa95 	bl	80031c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001c96:	2316      	movs	r3, #22
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001caa:	4619      	mov	r1, r3
 8001cac:	4834      	ldr	r0, [pc, #208]	; (8001d80 <MX_GPIO_Init+0x20c>)
 8001cae:	f001 f8db 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001cb2:	f248 0307 	movw	r3, #32775	; 0x8007
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cb8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	482e      	ldr	r0, [pc, #184]	; (8001d84 <MX_GPIO_Init+0x210>)
 8001cca:	f001 f8cd 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4827      	ldr	r0, [pc, #156]	; (8001d84 <MX_GPIO_Init+0x210>)
 8001ce6:	f001 f8bf 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001cea:	2320      	movs	r3, #32
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4820      	ldr	r0, [pc, #128]	; (8001d80 <MX_GPIO_Init+0x20c>)
 8001d00:	f001 f8b2 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001d04:	2304      	movs	r3, #4
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	481e      	ldr	r0, [pc, #120]	; (8001d90 <MX_GPIO_Init+0x21c>)
 8001d18:	f001 f8a6 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001d1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4815      	ldr	r0, [pc, #84]	; (8001d88 <MX_GPIO_Init+0x214>)
 8001d32:	f001 f899 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001d36:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	480e      	ldr	r0, [pc, #56]	; (8001d88 <MX_GPIO_Init+0x214>)
 8001d50:	f001 f88a 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001d54:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4807      	ldr	r0, [pc, #28]	; (8001d8c <MX_GPIO_Init+0x218>)
 8001d6e:	f001 f87b 	bl	8002e68 <HAL_GPIO_Init>

}
 8001d72:	bf00      	nop
 8001d74:	3738      	adds	r7, #56	; 0x38
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020c00 	.word	0x40020c00
 8001d8c:	40021800 	.word	0x40021800
 8001d90:	40020400 	.word	0x40020400

08001d94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001d9c:	f00b fce4 	bl	800d768 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f009 fc7d 	bl	800b6a0 <osDelay>
 8001da6:	e7fb      	b.n	8001da0 <StartDefaultTask+0xc>

08001da8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dba:	f000 fd27 	bl	800280c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40001000 	.word	0x40001000

08001dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <Error_Handler+0x8>
	...

08001dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_MspInit+0x54>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <HAL_MspInit+0x54>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <HAL_MspInit+0x54>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_MspInit+0x54>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_MspInit+0x54>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_MspInit+0x54>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	210f      	movs	r1, #15
 8001e1a:	f06f 0001 	mvn.w	r0, #1
 8001e1e:	f000 fdf1 	bl	8002a04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800

08001e30 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <HAL_CRC_MspInit+0x3c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d10d      	bne.n	8001e5e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_CRC_MspInit+0x40>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <HAL_CRC_MspInit+0x40>)
 8001e4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_CRC_MspInit+0x40>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023000 	.word	0x40023000
 8001e70:	40023800 	.word	0x40023800

08001e74 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <HAL_DMA2D_MspInit+0x48>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d115      	bne.n	8001eb2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_DMA2D_MspInit+0x4c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <HAL_DMA2D_MspInit+0x4c>)
 8001e90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_DMA2D_MspInit+0x4c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2105      	movs	r1, #5
 8001ea6:	205a      	movs	r0, #90	; 0x5a
 8001ea8:	f000 fdac 	bl	8002a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001eac:	205a      	movs	r0, #90	; 0x5a
 8001eae:	f000 fdc5 	bl	8002a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	4002b000 	.word	0x4002b000
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a29      	ldr	r2, [pc, #164]	; (8001f88 <HAL_I2C_MspInit+0xc4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d14b      	bne.n	8001f7e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_I2C_MspInit+0xc8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a27      	ldr	r2, [pc, #156]	; (8001f8c <HAL_I2C_MspInit+0xc8>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_I2C_MspInit+0xc8>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_I2C_MspInit+0xc8>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a20      	ldr	r2, [pc, #128]	; (8001f8c <HAL_I2C_MspInit+0xc8>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_I2C_MspInit+0xc8>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f24:	2312      	movs	r3, #18
 8001f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f30:	2304      	movs	r3, #4
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4815      	ldr	r0, [pc, #84]	; (8001f90 <HAL_I2C_MspInit+0xcc>)
 8001f3c:	f000 ff94 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f46:	2312      	movs	r3, #18
 8001f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f52:	2304      	movs	r3, #4
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480d      	ldr	r0, [pc, #52]	; (8001f94 <HAL_I2C_MspInit+0xd0>)
 8001f5e:	f000 ff83 	bl	8002e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_I2C_MspInit+0xc8>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_I2C_MspInit+0xc8>)
 8001f6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_I2C_MspInit+0xc8>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	; 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40005c00 	.word	0x40005c00
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020800 	.word	0x40020800
 8001f94:	40020000 	.word	0x40020000

08001f98 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b09a      	sub	sp, #104	; 0x68
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb4:	2230      	movs	r2, #48	; 0x30
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00b ff49 	bl	800de50 <memset>
  if(hltdc->Instance==LTDC)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a85      	ldr	r2, [pc, #532]	; (80021d8 <HAL_LTDC_MspInit+0x240>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	f040 8102 	bne.w	80021ce <HAL_LTDC_MspInit+0x236>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fca:	2308      	movs	r3, #8
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001fce:	2332      	movs	r3, #50	; 0x32
 8001fd0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 feda 	bl	8006d98 <HAL_RCCEx_PeriphCLKConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001fea:	f7ff feef 	bl	8001dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
 8001ff2:	4b7a      	ldr	r3, [pc, #488]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	4a79      	ldr	r2, [pc, #484]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 8001ff8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffe:	4b77      	ldr	r3, [pc, #476]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002006:	623b      	str	r3, [r7, #32]
 8002008:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	4b73      	ldr	r3, [pc, #460]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a72      	ldr	r2, [pc, #456]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 8002014:	f043 0320 	orr.w	r3, r3, #32
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b70      	ldr	r3, [pc, #448]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0320 	and.w	r3, r3, #32
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	4b6c      	ldr	r3, [pc, #432]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a6b      	ldr	r2, [pc, #428]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b69      	ldr	r3, [pc, #420]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	4b65      	ldr	r3, [pc, #404]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a64      	ldr	r2, [pc, #400]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b62      	ldr	r3, [pc, #392]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a5d      	ldr	r2, [pc, #372]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 8002068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	4b57      	ldr	r3, [pc, #348]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a56      	ldr	r2, [pc, #344]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b54      	ldr	r3, [pc, #336]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	4b50      	ldr	r3, [pc, #320]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a4f      	ldr	r2, [pc, #316]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 80020a0:	f043 0308 	orr.w	r3, r3, #8
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b4d      	ldr	r3, [pc, #308]	; (80021dc <HAL_LTDC_MspInit+0x244>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80020b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020c4:	230e      	movs	r3, #14
 80020c6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020cc:	4619      	mov	r1, r3
 80020ce:	4844      	ldr	r0, [pc, #272]	; (80021e0 <HAL_LTDC_MspInit+0x248>)
 80020d0:	f000 feca 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80020d4:	f641 0358 	movw	r3, #6232	; 0x1858
 80020d8:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020e6:	230e      	movs	r3, #14
 80020e8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020ee:	4619      	mov	r1, r3
 80020f0:	483c      	ldr	r0, [pc, #240]	; (80021e4 <HAL_LTDC_MspInit+0x24c>)
 80020f2:	f000 feb9 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80020f6:	2303      	movs	r3, #3
 80020f8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002106:	2309      	movs	r3, #9
 8002108:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800210e:	4619      	mov	r1, r3
 8002110:	4835      	ldr	r0, [pc, #212]	; (80021e8 <HAL_LTDC_MspInit+0x250>)
 8002112:	f000 fea9 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002116:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800211a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002128:	230e      	movs	r3, #14
 800212a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002130:	4619      	mov	r1, r3
 8002132:	482d      	ldr	r0, [pc, #180]	; (80021e8 <HAL_LTDC_MspInit+0x250>)
 8002134:	f000 fe98 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002138:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800213c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800214a:	230e      	movs	r3, #14
 800214c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800214e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002152:	4619      	mov	r1, r3
 8002154:	4825      	ldr	r0, [pc, #148]	; (80021ec <HAL_LTDC_MspInit+0x254>)
 8002156:	f000 fe87 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800215a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800215e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800216c:	230e      	movs	r3, #14
 800216e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002170:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002174:	4619      	mov	r1, r3
 8002176:	481e      	ldr	r0, [pc, #120]	; (80021f0 <HAL_LTDC_MspInit+0x258>)
 8002178:	f000 fe76 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800217c:	2348      	movs	r3, #72	; 0x48
 800217e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800218c:	230e      	movs	r3, #14
 800218e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002190:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002194:	4619      	mov	r1, r3
 8002196:	4817      	ldr	r0, [pc, #92]	; (80021f4 <HAL_LTDC_MspInit+0x25c>)
 8002198:	f000 fe66 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800219c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021a0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2300      	movs	r3, #0
 80021ac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021ae:	2309      	movs	r3, #9
 80021b0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021b6:	4619      	mov	r1, r3
 80021b8:	480c      	ldr	r0, [pc, #48]	; (80021ec <HAL_LTDC_MspInit+0x254>)
 80021ba:	f000 fe55 	bl	8002e68 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2105      	movs	r1, #5
 80021c2:	2058      	movs	r0, #88	; 0x58
 80021c4:	f000 fc1e 	bl	8002a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80021c8:	2058      	movs	r0, #88	; 0x58
 80021ca:	f000 fc37 	bl	8002a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3768      	adds	r7, #104	; 0x68
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40016800 	.word	0x40016800
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40021400 	.word	0x40021400
 80021e4:	40020000 	.word	0x40020000
 80021e8:	40020400 	.word	0x40020400
 80021ec:	40021800 	.word	0x40021800
 80021f0:	40020800 	.word	0x40020800
 80021f4:	40020c00 	.word	0x40020c00

080021f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_SPI_MspInit+0x84>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d12c      	bne.n	8002274 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HAL_SPI_MspInit+0x88>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	4a17      	ldr	r2, [pc, #92]	; (8002280 <HAL_SPI_MspInit+0x88>)
 8002224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002228:	6453      	str	r3, [r2, #68]	; 0x44
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_SPI_MspInit+0x88>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_SPI_MspInit+0x88>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a10      	ldr	r2, [pc, #64]	; (8002280 <HAL_SPI_MspInit+0x88>)
 8002240:	f043 0320 	orr.w	r3, r3, #32
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <HAL_SPI_MspInit+0x88>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002252:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002264:	2305      	movs	r3, #5
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	4619      	mov	r1, r3
 800226e:	4805      	ldr	r0, [pc, #20]	; (8002284 <HAL_SPI_MspInit+0x8c>)
 8002270:	f000 fdfa 	bl	8002e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002274:	bf00      	nop
 8002276:	3728      	adds	r7, #40	; 0x28
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40015000 	.word	0x40015000
 8002280:	40023800 	.word	0x40023800
 8002284:	40021400 	.word	0x40021400

08002288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <HAL_TIM_Base_MspInit+0x3c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d10d      	bne.n	80022b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_TIM_Base_MspInit+0x40>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <HAL_TIM_Base_MspInit+0x40>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <HAL_TIM_Base_MspInit+0x40>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40010000 	.word	0x40010000
 80022c8:	40023800 	.word	0x40023800

080022cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	; 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a19      	ldr	r2, [pc, #100]	; (8002350 <HAL_UART_MspInit+0x84>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d12c      	bne.n	8002348 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <HAL_UART_MspInit+0x88>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	4a17      	ldr	r2, [pc, #92]	; (8002354 <HAL_UART_MspInit+0x88>)
 80022f8:	f043 0310 	orr.w	r3, r3, #16
 80022fc:	6453      	str	r3, [r2, #68]	; 0x44
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_UART_MspInit+0x88>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <HAL_UART_MspInit+0x88>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a10      	ldr	r2, [pc, #64]	; (8002354 <HAL_UART_MspInit+0x88>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <HAL_UART_MspInit+0x88>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002326:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800232a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002334:	2303      	movs	r3, #3
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002338:	2307      	movs	r3, #7
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4619      	mov	r1, r3
 8002342:	4805      	ldr	r0, [pc, #20]	; (8002358 <HAL_UART_MspInit+0x8c>)
 8002344:	f000 fd90 	bl	8002e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002348:	bf00      	nop
 800234a:	3728      	adds	r7, #40	; 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40011000 	.word	0x40011000
 8002354:	40023800 	.word	0x40023800
 8002358:	40020000 	.word	0x40020000

0800235c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002370:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_FMC_MspInit+0x104>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d16f      	bne.n	8002458 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002378:	4b39      	ldr	r3, [pc, #228]	; (8002460 <HAL_FMC_MspInit+0x104>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	4b38      	ldr	r3, [pc, #224]	; (8002464 <HAL_FMC_MspInit+0x108>)
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	4a37      	ldr	r2, [pc, #220]	; (8002464 <HAL_FMC_MspInit+0x108>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6393      	str	r3, [r2, #56]	; 0x38
 800238e:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_FMC_MspInit+0x108>)
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800239a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800239e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023ac:	230c      	movs	r3, #12
 80023ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	4619      	mov	r1, r3
 80023b4:	482c      	ldr	r0, [pc, #176]	; (8002468 <HAL_FMC_MspInit+0x10c>)
 80023b6:	f000 fd57 	bl	8002e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80023ba:	2301      	movs	r3, #1
 80023bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023ca:	230c      	movs	r3, #12
 80023cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4826      	ldr	r0, [pc, #152]	; (800246c <HAL_FMC_MspInit+0x110>)
 80023d4:	f000 fd48 	bl	8002e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80023d8:	f248 1333 	movw	r3, #33075	; 0x8133
 80023dc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e6:	2303      	movs	r3, #3
 80023e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023ea:	230c      	movs	r3, #12
 80023ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	4619      	mov	r1, r3
 80023f2:	481f      	ldr	r0, [pc, #124]	; (8002470 <HAL_FMC_MspInit+0x114>)
 80023f4:	f000 fd38 	bl	8002e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80023f8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80023fc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002406:	2303      	movs	r3, #3
 8002408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800240a:	230c      	movs	r3, #12
 800240c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4818      	ldr	r0, [pc, #96]	; (8002474 <HAL_FMC_MspInit+0x118>)
 8002414:	f000 fd28 	bl	8002e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002418:	f24c 7303 	movw	r3, #50947	; 0xc703
 800241c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800242a:	230c      	movs	r3, #12
 800242c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	4619      	mov	r1, r3
 8002432:	4811      	ldr	r0, [pc, #68]	; (8002478 <HAL_FMC_MspInit+0x11c>)
 8002434:	f000 fd18 	bl	8002e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002438:	2360      	movs	r3, #96	; 0x60
 800243a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002448:	230c      	movs	r3, #12
 800244a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	4619      	mov	r1, r3
 8002450:	480a      	ldr	r0, [pc, #40]	; (800247c <HAL_FMC_MspInit+0x120>)
 8002452:	f000 fd09 	bl	8002e68 <HAL_GPIO_Init>
 8002456:	e000      	b.n	800245a <HAL_FMC_MspInit+0xfe>
    return;
 8002458:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200000b0 	.word	0x200000b0
 8002464:	40023800 	.word	0x40023800
 8002468:	40021400 	.word	0x40021400
 800246c:	40020800 	.word	0x40020800
 8002470:	40021800 	.word	0x40021800
 8002474:	40021000 	.word	0x40021000
 8002478:	40020c00 	.word	0x40020c00
 800247c:	40020400 	.word	0x40020400

08002480 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002488:	f7ff ff68 	bl	800235c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	; 0x30
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80024a4:	2200      	movs	r2, #0
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	2036      	movs	r0, #54	; 0x36
 80024aa:	f000 faab 	bl	8002a04 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024ae:	2036      	movs	r0, #54	; 0x36
 80024b0:	f000 fac4 	bl	8002a3c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <HAL_InitTick+0xa4>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <HAL_InitTick+0xa4>)
 80024be:	f043 0310 	orr.w	r3, r3, #16
 80024c2:	6413      	str	r3, [r2, #64]	; 0x40
 80024c4:	4b1c      	ldr	r3, [pc, #112]	; (8002538 <HAL_InitTick+0xa4>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024d0:	f107 0210 	add.w	r2, r7, #16
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f004 fc2a 	bl	8006d34 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80024e0:	f004 fc00 	bl	8006ce4 <HAL_RCC_GetPCLK1Freq>
 80024e4:	4603      	mov	r3, r0
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	4a13      	ldr	r2, [pc, #76]	; (800253c <HAL_InitTick+0xa8>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	0c9b      	lsrs	r3, r3, #18
 80024f4:	3b01      	subs	r3, #1
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_InitTick+0xac>)
 80024fa:	4a12      	ldr	r2, [pc, #72]	; (8002544 <HAL_InitTick+0xb0>)
 80024fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <HAL_InitTick+0xac>)
 8002500:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002504:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002506:	4a0e      	ldr	r2, [pc, #56]	; (8002540 <HAL_InitTick+0xac>)
 8002508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <HAL_InitTick+0xac>)
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_InitTick+0xac>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002518:	4809      	ldr	r0, [pc, #36]	; (8002540 <HAL_InitTick+0xac>)
 800251a:	f004 feb8 	bl	800728e <HAL_TIM_Base_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002524:	4806      	ldr	r0, [pc, #24]	; (8002540 <HAL_InitTick+0xac>)
 8002526:	f004 ff01 	bl	800732c <HAL_TIM_Base_Start_IT>
 800252a:	4603      	mov	r3, r0
 800252c:	e000      	b.n	8002530 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	3730      	adds	r7, #48	; 0x30
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40023800 	.word	0x40023800
 800253c:	431bde83 	.word	0x431bde83
 8002540:	20008470 	.word	0x20008470
 8002544:	40001000 	.word	0x40001000

08002548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800254c:	e7fe      	b.n	800254c <NMI_Handler+0x4>

0800254e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <HardFault_Handler+0x4>

08002554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <MemManage_Handler+0x4>

0800255a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <BusFault_Handler+0x4>

08002560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <UsageFault_Handler+0x4>

08002566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <TIM6_DAC_IRQHandler+0x10>)
 800257a:	f004 ff47 	bl	800740c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20008470 	.word	0x20008470

08002588 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800258c:	4802      	ldr	r0, [pc, #8]	; (8002598 <OTG_HS_IRQHandler+0x10>)
 800258e:	f001 f8b5 	bl	80036fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200088a0 	.word	0x200088a0

0800259c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <LTDC_IRQHandler+0x10>)
 80025a2:	f003 fcbb 	bl	8005f1c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200082c8 	.word	0x200082c8

080025b0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <DMA2D_IRQHandler+0x10>)
 80025b6:	f000 fab4 	bl	8002b22 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200083fc 	.word	0x200083fc

080025c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
	return 1;
 80025c8:	2301      	movs	r3, #1
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <_kill>:

int _kill(int pid, int sig)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025de:	f00b fbef 	bl	800ddc0 <__errno>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2216      	movs	r2, #22
 80025e6:	601a      	str	r2, [r3, #0]
	return -1;
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_exit>:

void _exit (int status)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ffe7 	bl	80025d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002606:	e7fe      	b.n	8002606 <_exit+0x12>

08002608 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	e00a      	b.n	8002630 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800261a:	f3af 8000 	nop.w
 800261e:	4601      	mov	r1, r0
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	60ba      	str	r2, [r7, #8]
 8002626:	b2ca      	uxtb	r2, r1
 8002628:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	3301      	adds	r3, #1
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	dbf0      	blt.n	800261a <_read+0x12>
	}

return len;
 8002638:	687b      	ldr	r3, [r7, #4]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	e009      	b.n	8002668 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	60ba      	str	r2, [r7, #8]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3301      	adds	r3, #1
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	dbf1      	blt.n	8002654 <_write+0x12>
	}
	return len;
 8002670:	687b      	ldr	r3, [r7, #4]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <_close>:

int _close(int file)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
	return -1;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026a2:	605a      	str	r2, [r3, #4]
	return 0;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <_isatty>:

int _isatty(int file)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
	return 1;
 80026ba:	2301      	movs	r3, #1
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
	return 0;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <_sbrk+0x5c>)
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <_sbrk+0x60>)
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f8:	4b13      	ldr	r3, [pc, #76]	; (8002748 <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <_sbrk+0x64>)
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <_sbrk+0x68>)
 8002704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <_sbrk+0x64>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	429a      	cmp	r2, r3
 8002712:	d207      	bcs.n	8002724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002714:	f00b fb54 	bl	800ddc0 <__errno>
 8002718:	4603      	mov	r3, r0
 800271a:	220c      	movs	r2, #12
 800271c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800271e:	f04f 33ff 	mov.w	r3, #4294967295
 8002722:	e009      	b.n	8002738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <_sbrk+0x64>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800272a:	4b07      	ldr	r3, [pc, #28]	; (8002748 <_sbrk+0x64>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	4a05      	ldr	r2, [pc, #20]	; (8002748 <_sbrk+0x64>)
 8002734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20030000 	.word	0x20030000
 8002744:	00000400 	.word	0x00000400
 8002748:	200000b4 	.word	0x200000b4
 800274c:	20008bb8 	.word	0x20008bb8

08002750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <SystemInit+0x20>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	4a05      	ldr	r2, [pc, #20]	; (8002770 <SystemInit+0x20>)
 800275c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027ac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002778:	480d      	ldr	r0, [pc, #52]	; (80027b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800277a:	490e      	ldr	r1, [pc, #56]	; (80027b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800277c:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002780:	e002      	b.n	8002788 <LoopCopyDataInit>

08002782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002786:	3304      	adds	r3, #4

08002788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800278c:	d3f9      	bcc.n	8002782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278e:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002790:	4c0b      	ldr	r4, [pc, #44]	; (80027c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002794:	e001      	b.n	800279a <LoopFillZerobss>

08002796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002798:	3204      	adds	r2, #4

0800279a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800279c:	d3fb      	bcc.n	8002796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800279e:	f7ff ffd7 	bl	8002750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027a2:	f00b fb13 	bl	800ddcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027a6:	f7fe fb87 	bl	8000eb8 <main>
  bx  lr    
 80027aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80027ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80027b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80027b8:	08010854 	.word	0x08010854
  ldr r2, =_sbss
 80027bc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80027c0:	20008bb4 	.word	0x20008bb4

080027c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027c4:	e7fe      	b.n	80027c4 <ADC_IRQHandler>
	...

080027c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <HAL_Init+0x40>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <HAL_Init+0x40>)
 80027d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_Init+0x40>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <HAL_Init+0x40>)
 80027de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a07      	ldr	r2, [pc, #28]	; (8002808 <HAL_Init+0x40>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f0:	2003      	movs	r0, #3
 80027f2:	f000 f8fc 	bl	80029ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f6:	2000      	movs	r0, #0
 80027f8:	f7ff fe4c 	bl	8002494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027fc:	f7ff faec 	bl	8001dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00

0800280c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_IncTick+0x20>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_IncTick+0x24>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4413      	add	r3, r2
 800281c:	4a04      	ldr	r2, [pc, #16]	; (8002830 <HAL_IncTick+0x24>)
 800281e:	6013      	str	r3, [r2, #0]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000008 	.word	0x20000008
 8002830:	200084b8 	.word	0x200084b8

08002834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return uwTick;
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <HAL_GetTick+0x14>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	200084b8 	.word	0x200084b8

0800284c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002854:	f7ff ffee 	bl	8002834 <HAL_GetTick>
 8002858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d005      	beq.n	8002872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_Delay+0x44>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002872:	bf00      	nop
 8002874:	f7ff ffde 	bl	8002834 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	429a      	cmp	r2, r3
 8002882:	d8f7      	bhi.n	8002874 <HAL_Delay+0x28>
  {
  }
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000008 	.word	0x20000008

08002894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b0:	4013      	ands	r3, r2
 80028b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c6:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	60d3      	str	r3, [r2, #12]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <__NVIC_GetPriorityGrouping+0x18>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	f003 0307 	and.w	r3, r3, #7
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	2b00      	cmp	r3, #0
 8002908:	db0b      	blt.n	8002922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	4907      	ldr	r1, [pc, #28]	; (8002930 <__NVIC_EnableIRQ+0x38>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2001      	movs	r0, #1
 800291a:	fa00 f202 	lsl.w	r2, r0, r2
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000e100 	.word	0xe000e100

08002934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002944:	2b00      	cmp	r3, #0
 8002946:	db0a      	blt.n	800295e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	490c      	ldr	r1, [pc, #48]	; (8002980 <__NVIC_SetPriority+0x4c>)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	0112      	lsls	r2, r2, #4
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	440b      	add	r3, r1
 8002958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800295c:	e00a      	b.n	8002974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4908      	ldr	r1, [pc, #32]	; (8002984 <__NVIC_SetPriority+0x50>)
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	3b04      	subs	r3, #4
 800296c:	0112      	lsls	r2, r2, #4
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	440b      	add	r3, r1
 8002972:	761a      	strb	r2, [r3, #24]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000e100 	.word	0xe000e100
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	; 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f1c3 0307 	rsb	r3, r3, #7
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	bf28      	it	cs
 80029a6:	2304      	movcs	r3, #4
 80029a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d902      	bls.n	80029b8 <NVIC_EncodePriority+0x30>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3b03      	subs	r3, #3
 80029b6:	e000      	b.n	80029ba <NVIC_EncodePriority+0x32>
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	f04f 32ff 	mov.w	r2, #4294967295
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43da      	mvns	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	401a      	ands	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d0:	f04f 31ff 	mov.w	r1, #4294967295
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43d9      	mvns	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	4313      	orrs	r3, r2
         );
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ff4c 	bl	8002894 <__NVIC_SetPriorityGrouping>
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a16:	f7ff ff61 	bl	80028dc <__NVIC_GetPriorityGrouping>
 8002a1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	6978      	ldr	r0, [r7, #20]
 8002a22:	f7ff ffb1 	bl	8002988 <NVIC_EncodePriority>
 8002a26:	4602      	mov	r2, r0
 8002a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ff80 	bl	8002934 <__NVIC_SetPriority>
}
 8002a34:	bf00      	nop
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff54 	bl	80028f8 <__NVIC_EnableIRQ>
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00e      	b.n	8002a88 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	795b      	ldrb	r3, [r3, #5]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff f9d8 	bl	8001e30 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e03b      	b.n	8002b1a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff f9dc 	bl	8001e74 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	f023 0107 	bic.w	r1, r3, #7
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002afa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68d1      	ldr	r1, [r2, #12]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	430b      	orrs	r3, r1
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d026      	beq.n	8002b92 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d021      	beq.n	8002b92 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b5c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2204      	movs	r2, #4
 8002b76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d026      	beq.n	8002bea <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d021      	beq.n	8002bea <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bb4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc2:	f043 0202 	orr.w	r2, r3, #2
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2204      	movs	r2, #4
 8002bce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d026      	beq.n	8002c42 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d021      	beq.n	8002c42 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2208      	movs	r2, #8
 8002c14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	f043 0204 	orr.w	r2, r3, #4
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2204      	movs	r2, #4
 8002c26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00e      	beq.n	8002c74 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c64:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f853 	bl	8002d1a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d024      	beq.n	8002cc8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01f      	beq.n	8002cc8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c96:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d01f      	beq.n	8002d12 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01a      	beq.n	8002d12 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cea:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f80e 	bl	8002d2e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_DMA2D_ConfigLayer+0x20>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e079      	b.n	8002e58 <HAL_DMA2D_ConfigLayer+0x114>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	3318      	adds	r3, #24
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002d8e:	4b35      	ldr	r3, [pc, #212]	; (8002e64 <HAL_DMA2D_ConfigLayer+0x120>)
 8002d90:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b0a      	cmp	r3, #10
 8002d98:	d003      	beq.n	8002da2 <HAL_DMA2D_ConfigLayer+0x5e>
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b09      	cmp	r3, #9
 8002da0:	d107      	bne.n	8002db2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	e005      	b.n	8002dbe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	061b      	lsls	r3, r3, #24
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d120      	bne.n	8002e06 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	ea02 0103 	and.w	r1, r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b0a      	cmp	r3, #10
 8002dec:	d003      	beq.n	8002df6 <HAL_DMA2D_ConfigLayer+0xb2>
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b09      	cmp	r3, #9
 8002df4:	d127      	bne.n	8002e46 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002e02:	629a      	str	r2, [r3, #40]	; 0x28
 8002e04:	e01f      	b.n	8002e46 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	ea02 0103 	and.w	r1, r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b0a      	cmp	r3, #10
 8002e2e:	d003      	beq.n	8002e38 <HAL_DMA2D_ConfigLayer+0xf4>
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b09      	cmp	r3, #9
 8002e36:	d106      	bne.n	8002e46 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002e44:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	ff03000f 	.word	0xff03000f

08002e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	e177      	b.n	8003174 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e84:	2201      	movs	r2, #1
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	f040 8166 	bne.w	800316e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d005      	beq.n	8002eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d130      	bne.n	8002f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 0201 	and.w	r2, r3, #1
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d017      	beq.n	8002f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	2203      	movs	r2, #3
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d123      	bne.n	8002fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	08da      	lsrs	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3208      	adds	r2, #8
 8002f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	08da      	lsrs	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3208      	adds	r2, #8
 8002fa6:	69b9      	ldr	r1, [r7, #24]
 8002fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0203 	and.w	r2, r3, #3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80c0 	beq.w	800316e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	4b66      	ldr	r3, [pc, #408]	; (800318c <HAL_GPIO_Init+0x324>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	4a65      	ldr	r2, [pc, #404]	; (800318c <HAL_GPIO_Init+0x324>)
 8002ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffe:	4b63      	ldr	r3, [pc, #396]	; (800318c <HAL_GPIO_Init+0x324>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800300a:	4a61      	ldr	r2, [pc, #388]	; (8003190 <HAL_GPIO_Init+0x328>)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	3302      	adds	r3, #2
 8003012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	220f      	movs	r2, #15
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a58      	ldr	r2, [pc, #352]	; (8003194 <HAL_GPIO_Init+0x32c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d037      	beq.n	80030a6 <HAL_GPIO_Init+0x23e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a57      	ldr	r2, [pc, #348]	; (8003198 <HAL_GPIO_Init+0x330>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d031      	beq.n	80030a2 <HAL_GPIO_Init+0x23a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a56      	ldr	r2, [pc, #344]	; (800319c <HAL_GPIO_Init+0x334>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d02b      	beq.n	800309e <HAL_GPIO_Init+0x236>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a55      	ldr	r2, [pc, #340]	; (80031a0 <HAL_GPIO_Init+0x338>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d025      	beq.n	800309a <HAL_GPIO_Init+0x232>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a54      	ldr	r2, [pc, #336]	; (80031a4 <HAL_GPIO_Init+0x33c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01f      	beq.n	8003096 <HAL_GPIO_Init+0x22e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a53      	ldr	r2, [pc, #332]	; (80031a8 <HAL_GPIO_Init+0x340>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d019      	beq.n	8003092 <HAL_GPIO_Init+0x22a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a52      	ldr	r2, [pc, #328]	; (80031ac <HAL_GPIO_Init+0x344>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <HAL_GPIO_Init+0x226>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a51      	ldr	r2, [pc, #324]	; (80031b0 <HAL_GPIO_Init+0x348>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00d      	beq.n	800308a <HAL_GPIO_Init+0x222>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a50      	ldr	r2, [pc, #320]	; (80031b4 <HAL_GPIO_Init+0x34c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d007      	beq.n	8003086 <HAL_GPIO_Init+0x21e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a4f      	ldr	r2, [pc, #316]	; (80031b8 <HAL_GPIO_Init+0x350>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d101      	bne.n	8003082 <HAL_GPIO_Init+0x21a>
 800307e:	2309      	movs	r3, #9
 8003080:	e012      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 8003082:	230a      	movs	r3, #10
 8003084:	e010      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 8003086:	2308      	movs	r3, #8
 8003088:	e00e      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 800308a:	2307      	movs	r3, #7
 800308c:	e00c      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 800308e:	2306      	movs	r3, #6
 8003090:	e00a      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 8003092:	2305      	movs	r3, #5
 8003094:	e008      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 8003096:	2304      	movs	r3, #4
 8003098:	e006      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 800309a:	2303      	movs	r3, #3
 800309c:	e004      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 800309e:	2302      	movs	r3, #2
 80030a0:	e002      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_GPIO_Init+0x240>
 80030a6:	2300      	movs	r3, #0
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	f002 0203 	and.w	r2, r2, #3
 80030ae:	0092      	lsls	r2, r2, #2
 80030b0:	4093      	lsls	r3, r2
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030b8:	4935      	ldr	r1, [pc, #212]	; (8003190 <HAL_GPIO_Init+0x328>)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	3302      	adds	r3, #2
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030c6:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <HAL_GPIO_Init+0x354>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030ea:	4a34      	ldr	r2, [pc, #208]	; (80031bc <HAL_GPIO_Init+0x354>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030f0:	4b32      	ldr	r3, [pc, #200]	; (80031bc <HAL_GPIO_Init+0x354>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003114:	4a29      	ldr	r2, [pc, #164]	; (80031bc <HAL_GPIO_Init+0x354>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800311a:	4b28      	ldr	r3, [pc, #160]	; (80031bc <HAL_GPIO_Init+0x354>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800313e:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <HAL_GPIO_Init+0x354>)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003144:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <HAL_GPIO_Init+0x354>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003168:	4a14      	ldr	r2, [pc, #80]	; (80031bc <HAL_GPIO_Init+0x354>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3301      	adds	r3, #1
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2b0f      	cmp	r3, #15
 8003178:	f67f ae84 	bls.w	8002e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	3724      	adds	r7, #36	; 0x24
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	40013800 	.word	0x40013800
 8003194:	40020000 	.word	0x40020000
 8003198:	40020400 	.word	0x40020400
 800319c:	40020800 	.word	0x40020800
 80031a0:	40020c00 	.word	0x40020c00
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40021400 	.word	0x40021400
 80031ac:	40021800 	.word	0x40021800
 80031b0:	40021c00 	.word	0x40021c00
 80031b4:	40022000 	.word	0x40022000
 80031b8:	40022400 	.word	0x40022400
 80031bc:	40013c00 	.word	0x40013c00

080031c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
 80031cc:	4613      	mov	r3, r2
 80031ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031d0:	787b      	ldrb	r3, [r7, #1]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031d6:	887a      	ldrh	r2, [r7, #2]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031dc:	e003      	b.n	80031e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031de:	887b      	ldrh	r3, [r7, #2]
 80031e0:	041a      	lsls	r2, r3, #16
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	619a      	str	r2, [r3, #24]
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b085      	sub	sp, #20
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	460b      	mov	r3, r1
 80031fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003204:	887a      	ldrh	r2, [r7, #2]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4013      	ands	r3, r2
 800320a:	041a      	lsls	r2, r3, #16
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	43d9      	mvns	r1, r3
 8003210:	887b      	ldrh	r3, [r7, #2]
 8003212:	400b      	ands	r3, r1
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	619a      	str	r2, [r3, #24]
}
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003226:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003228:	b08f      	sub	sp, #60	; 0x3c
 800322a:	af0a      	add	r7, sp, #40	; 0x28
 800322c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e054      	b.n	80032e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f00a fadc 	bl	800d810 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2203      	movs	r2, #3
 800325c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f005 f904 	bl	8008484 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	687e      	ldr	r6, [r7, #4]
 8003284:	466d      	mov	r5, sp
 8003286:	f106 0410 	add.w	r4, r6, #16
 800328a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800328c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800328e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003292:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003296:	e885 0003 	stmia.w	r5, {r0, r1}
 800329a:	1d33      	adds	r3, r6, #4
 800329c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800329e:	6838      	ldr	r0, [r7, #0]
 80032a0:	f005 f87e 	bl	80083a0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2101      	movs	r1, #1
 80032aa:	4618      	mov	r0, r3
 80032ac:	f005 f8fb 	bl	80084a6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	687e      	ldr	r6, [r7, #4]
 80032b8:	466d      	mov	r5, sp
 80032ba:	f106 0410 	add.w	r4, r6, #16
 80032be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80032ce:	1d33      	adds	r3, r6, #4
 80032d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032d2:	6838      	ldr	r0, [r7, #0]
 80032d4:	f005 fa62 	bl	800879c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032ea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80032ea:	b590      	push	{r4, r7, lr}
 80032ec:	b089      	sub	sp, #36	; 0x24
 80032ee:	af04      	add	r7, sp, #16
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	4608      	mov	r0, r1
 80032f4:	4611      	mov	r1, r2
 80032f6:	461a      	mov	r2, r3
 80032f8:	4603      	mov	r3, r0
 80032fa:	70fb      	strb	r3, [r7, #3]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70bb      	strb	r3, [r7, #2]
 8003300:	4613      	mov	r3, r2
 8003302:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_HCD_HC_Init+0x28>
 800330e:	2302      	movs	r3, #2
 8003310:	e076      	b.n	8003400 <HAL_HCD_HC_Init+0x116>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	333d      	adds	r3, #61	; 0x3d
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3338      	adds	r3, #56	; 0x38
 800333a:	787a      	ldrb	r2, [r7, #1]
 800333c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	212c      	movs	r1, #44	; 0x2c
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	4413      	add	r3, r2
 800334a:	3340      	adds	r3, #64	; 0x40
 800334c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800334e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	212c      	movs	r1, #44	; 0x2c
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	4413      	add	r3, r2
 800335c:	3339      	adds	r3, #57	; 0x39
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	333f      	adds	r3, #63	; 0x3f
 8003370:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003374:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	78ba      	ldrb	r2, [r7, #2]
 800337a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800337e:	b2d0      	uxtb	r0, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	4413      	add	r3, r2
 800338a:	333a      	adds	r3, #58	; 0x3a
 800338c:	4602      	mov	r2, r0
 800338e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003390:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003394:	2b00      	cmp	r3, #0
 8003396:	da09      	bge.n	80033ac <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	333b      	adds	r3, #59	; 0x3b
 80033a6:	2201      	movs	r2, #1
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	e008      	b.n	80033be <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	333b      	adds	r3, #59	; 0x3b
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	212c      	movs	r1, #44	; 0x2c
 80033c4:	fb01 f303 	mul.w	r3, r1, r3
 80033c8:	4413      	add	r3, r2
 80033ca:	333c      	adds	r3, #60	; 0x3c
 80033cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80033d0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	787c      	ldrb	r4, [r7, #1]
 80033d8:	78ba      	ldrb	r2, [r7, #2]
 80033da:	78f9      	ldrb	r1, [r7, #3]
 80033dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033de:	9302      	str	r3, [sp, #8]
 80033e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	4623      	mov	r3, r4
 80033ee:	f005 fb4f 	bl	8008a90 <USB_HC_Init>
 80033f2:	4603      	mov	r3, r0
 80033f4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	bd90      	pop	{r4, r7, pc}

08003408 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_HCD_HC_Halt+0x1e>
 8003422:	2302      	movs	r3, #2
 8003424:	e00f      	b.n	8003446 <HAL_HCD_HC_Halt+0x3e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f005 fd8b 	bl	8008f52 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	4608      	mov	r0, r1
 800345a:	4611      	mov	r1, r2
 800345c:	461a      	mov	r2, r3
 800345e:	4603      	mov	r3, r0
 8003460:	70fb      	strb	r3, [r7, #3]
 8003462:	460b      	mov	r3, r1
 8003464:	70bb      	strb	r3, [r7, #2]
 8003466:	4613      	mov	r3, r2
 8003468:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	212c      	movs	r1, #44	; 0x2c
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	333b      	adds	r3, #59	; 0x3b
 8003478:	78ba      	ldrb	r2, [r7, #2]
 800347a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	212c      	movs	r1, #44	; 0x2c
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	333f      	adds	r3, #63	; 0x3f
 800348a:	787a      	ldrb	r2, [r7, #1]
 800348c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800348e:	7c3b      	ldrb	r3, [r7, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d112      	bne.n	80034ba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	212c      	movs	r1, #44	; 0x2c
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	4413      	add	r3, r2
 80034a0:	3342      	adds	r3, #66	; 0x42
 80034a2:	2203      	movs	r2, #3
 80034a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	212c      	movs	r1, #44	; 0x2c
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	4413      	add	r3, r2
 80034b2:	333d      	adds	r3, #61	; 0x3d
 80034b4:	7f3a      	ldrb	r2, [r7, #28]
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	e008      	b.n	80034cc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	212c      	movs	r1, #44	; 0x2c
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	3342      	adds	r3, #66	; 0x42
 80034c8:	2202      	movs	r2, #2
 80034ca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80034cc:	787b      	ldrb	r3, [r7, #1]
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	f200 80c6 	bhi.w	8003660 <HAL_HCD_HC_SubmitRequest+0x210>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080034ed 	.word	0x080034ed
 80034e0:	0800364d 	.word	0x0800364d
 80034e4:	08003551 	.word	0x08003551
 80034e8:	080035cf 	.word	0x080035cf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80034ec:	7c3b      	ldrb	r3, [r7, #16]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	f040 80b8 	bne.w	8003664 <HAL_HCD_HC_SubmitRequest+0x214>
 80034f4:	78bb      	ldrb	r3, [r7, #2]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f040 80b4 	bne.w	8003664 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80034fc:	8b3b      	ldrh	r3, [r7, #24]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d108      	bne.n	8003514 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	212c      	movs	r1, #44	; 0x2c
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	4413      	add	r3, r2
 800350e:	3355      	adds	r3, #85	; 0x55
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	3355      	adds	r3, #85	; 0x55
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	3342      	adds	r3, #66	; 0x42
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800353a:	e093      	b.n	8003664 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	212c      	movs	r1, #44	; 0x2c
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	4413      	add	r3, r2
 8003548:	3342      	adds	r3, #66	; 0x42
 800354a:	2202      	movs	r2, #2
 800354c:	701a      	strb	r2, [r3, #0]
      break;
 800354e:	e089      	b.n	8003664 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003550:	78bb      	ldrb	r3, [r7, #2]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d11d      	bne.n	8003592 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	3355      	adds	r3, #85	; 0x55
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	212c      	movs	r1, #44	; 0x2c
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
 8003576:	3342      	adds	r3, #66	; 0x42
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800357c:	e073      	b.n	8003666 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	3342      	adds	r3, #66	; 0x42
 800358c:	2202      	movs	r2, #2
 800358e:	701a      	strb	r2, [r3, #0]
      break;
 8003590:	e069      	b.n	8003666 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	3354      	adds	r3, #84	; 0x54
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	3342      	adds	r3, #66	; 0x42
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
      break;
 80035b8:	e055      	b.n	8003666 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	212c      	movs	r1, #44	; 0x2c
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	3342      	adds	r3, #66	; 0x42
 80035c8:	2202      	movs	r2, #2
 80035ca:	701a      	strb	r2, [r3, #0]
      break;
 80035cc:	e04b      	b.n	8003666 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80035ce:	78bb      	ldrb	r3, [r7, #2]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d11d      	bne.n	8003610 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	3355      	adds	r3, #85	; 0x55
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	3342      	adds	r3, #66	; 0x42
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80035fa:	e034      	b.n	8003666 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	3342      	adds	r3, #66	; 0x42
 800360a:	2202      	movs	r2, #2
 800360c:	701a      	strb	r2, [r3, #0]
      break;
 800360e:	e02a      	b.n	8003666 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	3354      	adds	r3, #84	; 0x54
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d109      	bne.n	8003638 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	212c      	movs	r1, #44	; 0x2c
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	3342      	adds	r3, #66	; 0x42
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
      break;
 8003636:	e016      	b.n	8003666 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	3342      	adds	r3, #66	; 0x42
 8003646:	2202      	movs	r2, #2
 8003648:	701a      	strb	r2, [r3, #0]
      break;
 800364a:	e00c      	b.n	8003666 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	212c      	movs	r1, #44	; 0x2c
 8003652:	fb01 f303 	mul.w	r3, r1, r3
 8003656:	4413      	add	r3, r2
 8003658:	3342      	adds	r3, #66	; 0x42
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
      break;
 800365e:	e002      	b.n	8003666 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003660:	bf00      	nop
 8003662:	e000      	b.n	8003666 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003664:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	3344      	adds	r3, #68	; 0x44
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	8b3a      	ldrh	r2, [r7, #24]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	202c      	movs	r0, #44	; 0x2c
 8003680:	fb00 f303 	mul.w	r3, r0, r3
 8003684:	440b      	add	r3, r1
 8003686:	334c      	adds	r3, #76	; 0x4c
 8003688:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	212c      	movs	r1, #44	; 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	3360      	adds	r3, #96	; 0x60
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	3350      	adds	r3, #80	; 0x50
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	212c      	movs	r1, #44	; 0x2c
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	4413      	add	r3, r2
 80036ba:	3339      	adds	r3, #57	; 0x39
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	212c      	movs	r1, #44	; 0x2c
 80036c6:	fb01 f303 	mul.w	r3, r1, r3
 80036ca:	4413      	add	r3, r2
 80036cc:	3361      	adds	r3, #97	; 0x61
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	222c      	movs	r2, #44	; 0x2c
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	3338      	adds	r3, #56	; 0x38
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	18d1      	adds	r1, r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	f005 fade 	bl	8008cac <USB_HC_StartXfer>
 80036f0:	4603      	mov	r3, r0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop

080036fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f005 f801 	bl	800871a <USB_GetMode>
 8003718:	4603      	mov	r3, r0
 800371a:	2b01      	cmp	r3, #1
 800371c:	f040 80f6 	bne.w	800390c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f004 ffe5 	bl	80086f4 <USB_ReadInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80ec 	beq.w	800390a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f004 ffdc 	bl	80086f4 <USB_ReadInterrupts>
 800373c:	4603      	mov	r3, r0
 800373e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003746:	d104      	bne.n	8003752 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003750:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f004 ffcc 	bl	80086f4 <USB_ReadInterrupts>
 800375c:	4603      	mov	r3, r0
 800375e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003766:	d104      	bne.n	8003772 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003770:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f004 ffbc 	bl	80086f4 <USB_ReadInterrupts>
 800377c:	4603      	mov	r3, r0
 800377e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003782:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003786:	d104      	bne.n	8003792 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003790:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f004 ffac 	bl	80086f4 <USB_ReadInterrupts>
 800379c:	4603      	mov	r3, r0
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d103      	bne.n	80037ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2202      	movs	r2, #2
 80037ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f004 ff9e 	bl	80086f4 <USB_ReadInterrupts>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037c2:	d11c      	bne.n	80037fe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80037cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10f      	bne.n	80037fe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80037de:	2110      	movs	r1, #16
 80037e0:	6938      	ldr	r0, [r7, #16]
 80037e2:	f004 fead 	bl	8008540 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80037e6:	6938      	ldr	r0, [r7, #16]
 80037e8:	f004 fece 	bl	8008588 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2101      	movs	r1, #1
 80037f2:	4618      	mov	r0, r3
 80037f4:	f005 f886 	bl	8008904 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f00a f883 	bl	800d904 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f004 ff76 	bl	80086f4 <USB_ReadInterrupts>
 8003808:	4603      	mov	r3, r0
 800380a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800380e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003812:	d102      	bne.n	800381a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f001 fa03 	bl	8004c20 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f004 ff68 	bl	80086f4 <USB_ReadInterrupts>
 8003824:	4603      	mov	r3, r0
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b08      	cmp	r3, #8
 800382c:	d106      	bne.n	800383c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f00a f84c 	bl	800d8cc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2208      	movs	r2, #8
 800383a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f004 ff57 	bl	80086f4 <USB_ReadInterrupts>
 8003846:	4603      	mov	r3, r0
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b10      	cmp	r3, #16
 800384e:	d101      	bne.n	8003854 <HAL_HCD_IRQHandler+0x158>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_HCD_IRQHandler+0x15a>
 8003854:	2300      	movs	r3, #0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d012      	beq.n	8003880 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699a      	ldr	r2, [r3, #24]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0210 	bic.w	r2, r2, #16
 8003868:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f001 f906 	bl	8004a7c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0210 	orr.w	r2, r2, #16
 800387e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f004 ff35 	bl	80086f4 <USB_ReadInterrupts>
 800388a:	4603      	mov	r3, r0
 800388c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003890:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003894:	d13a      	bne.n	800390c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f005 fb48 	bl	8008f30 <USB_HC_ReadInterrupt>
 80038a0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	e025      	b.n	80038f4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d018      	beq.n	80038ee <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d2:	d106      	bne.n	80038e2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	4619      	mov	r1, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f8ab 	bl	8003a36 <HCD_HC_IN_IRQHandler>
 80038e0:	e005      	b.n	80038ee <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	4619      	mov	r1, r3
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fcc6 	bl	800427a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	3301      	adds	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d3d4      	bcc.n	80038a8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003906:	615a      	str	r2, [r3, #20]
 8003908:	e000      	b.n	800390c <HAL_HCD_IRQHandler+0x210>
      return;
 800390a:	bf00      	nop
    }
  }
}
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_HCD_Start+0x16>
 8003924:	2302      	movs	r3, #2
 8003926:	e013      	b.n	8003950 <HAL_HCD_Start+0x3e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2101      	movs	r1, #1
 8003936:	4618      	mov	r0, r3
 8003938:	f005 f848 	bl	80089cc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f004 fd8e 	bl	8008462 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_HCD_Stop+0x16>
 800396a:	2302      	movs	r3, #2
 800396c:	e00d      	b.n	800398a <HAL_HCD_Stop+0x32>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f005 fc42 	bl	8009204 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f004 ffea 	bl	8008978 <USB_ResetPort>
 80039a4:	4603      	mov	r3, r0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	460b      	mov	r3, r1
 80039b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	212c      	movs	r1, #44	; 0x2c
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	3360      	adds	r3, #96	; 0x60
 80039c8:	781b      	ldrb	r3, [r3, #0]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	460b      	mov	r3, r1
 80039e0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	212c      	movs	r1, #44	; 0x2c
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	3350      	adds	r3, #80	; 0x50
 80039f0:	681b      	ldr	r3, [r3, #0]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f005 f82e 	bl	8008a6c <USB_GetCurrentFrame>
 8003a10:	4603      	mov	r3, r0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f005 f809 	bl	8008a3e <USB_GetHostSpeed>
 8003a2c:	4603      	mov	r3, r0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b086      	sub	sp, #24
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d119      	bne.n	8003a9a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a72:	461a      	mov	r2, r3
 8003a74:	2304      	movs	r3, #4
 8003a76:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	0151      	lsls	r1, r2, #5
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	440a      	add	r2, r1
 8003a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a92:	f043 0302 	orr.w	r3, r3, #2
 8003a96:	60d3      	str	r3, [r2, #12]
 8003a98:	e101      	b.n	8003c9e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab0:	d12b      	bne.n	8003b0a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ac4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	212c      	movs	r1, #44	; 0x2c
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3361      	adds	r3, #97	; 0x61
 8003ad4:	2207      	movs	r2, #7
 8003ad6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	0151      	lsls	r1, r2, #5
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	440a      	add	r2, r1
 8003aee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f005 fa25 	bl	8008f52 <USB_HC_Halt>
 8003b08:	e0c9      	b.n	8003c9e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d109      	bne.n	8003b34 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2320      	movs	r3, #32
 8003b30:	6093      	str	r3, [r2, #8]
 8003b32:	e0b4      	b.n	8003c9e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d133      	bne.n	8003bb2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	0151      	lsls	r1, r2, #5
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	440a      	add	r2, r1
 8003b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b64:	f043 0302 	orr.w	r3, r3, #2
 8003b68:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	212c      	movs	r1, #44	; 0x2c
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	3361      	adds	r3, #97	; 0x61
 8003b78:	2205      	movs	r2, #5
 8003b7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2310      	movs	r3, #16
 8003b8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	4611      	mov	r1, r2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f005 f9d1 	bl	8008f52 <USB_HC_Halt>
 8003bb0:	e075      	b.n	8003c9e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc8:	d134      	bne.n	8003c34 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	0151      	lsls	r1, r2, #5
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	440a      	add	r2, r1
 8003be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003be4:	f043 0302 	orr.w	r3, r3, #2
 8003be8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	212c      	movs	r1, #44	; 0x2c
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3361      	adds	r3, #97	; 0x61
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2310      	movs	r3, #16
 8003c0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c20:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f005 f990 	bl	8008f52 <USB_HC_Halt>
 8003c32:	e034      	b.n	8003c9e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	d129      	bne.n	8003c9e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	0151      	lsls	r1, r2, #5
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	440a      	add	r2, r1
 8003c60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c64:	f043 0302 	orr.w	r3, r3, #2
 8003c68:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	212c      	movs	r1, #44	; 0x2c
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	4413      	add	r3, r2
 8003c76:	3361      	adds	r3, #97	; 0x61
 8003c78:	2206      	movs	r2, #6
 8003c7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	4611      	mov	r1, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f005 f963 	bl	8008f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c98:	461a      	mov	r2, r3
 8003c9a:	2380      	movs	r3, #128	; 0x80
 8003c9c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb4:	d122      	bne.n	8003cfc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	0151      	lsls	r1, r2, #5
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	440a      	add	r2, r1
 8003ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cd0:	f043 0302 	orr.w	r3, r3, #2
 8003cd4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f005 f936 	bl	8008f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cf8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003cfa:	e2ba      	b.n	8004272 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	f040 811b 	bne.w	8003f4a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d019      	beq.n	8003d50 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	212c      	movs	r1, #44	; 0x2c
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
 8003d26:	4413      	add	r3, r2
 8003d28:	3348      	adds	r3, #72	; 0x48
 8003d2a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	0159      	lsls	r1, r3, #5
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	440b      	add	r3, r1
 8003d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003d3e:	1ad2      	subs	r2, r2, r3
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	202c      	movs	r0, #44	; 0x2c
 8003d46:	fb00 f303 	mul.w	r3, r0, r3
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3350      	adds	r3, #80	; 0x50
 8003d4e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	212c      	movs	r1, #44	; 0x2c
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3361      	adds	r3, #97	; 0x61
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	335c      	adds	r3, #92	; 0x5c
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d80:	461a      	mov	r2, r3
 8003d82:	2301      	movs	r3, #1
 8003d84:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	212c      	movs	r1, #44	; 0x2c
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	4413      	add	r3, r2
 8003d92:	333f      	adds	r3, #63	; 0x3f
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	212c      	movs	r1, #44	; 0x2c
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	4413      	add	r3, r2
 8003da6:	333f      	adds	r3, #63	; 0x3f
 8003da8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d121      	bne.n	8003df2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	0151      	lsls	r1, r2, #5
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	440a      	add	r2, r1
 8003dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dc8:	f043 0302 	orr.w	r3, r3, #2
 8003dcc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f005 f8ba 	bl	8008f52 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dea:	461a      	mov	r2, r3
 8003dec:	2310      	movs	r3, #16
 8003dee:	6093      	str	r3, [r2, #8]
 8003df0:	e066      	b.n	8003ec0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	212c      	movs	r1, #44	; 0x2c
 8003df8:	fb01 f303 	mul.w	r3, r1, r3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	333f      	adds	r3, #63	; 0x3f
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d127      	bne.n	8003e56 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	0151      	lsls	r1, r2, #5
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	440a      	add	r2, r1
 8003e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e24:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	212c      	movs	r1, #44	; 0x2c
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	4413      	add	r3, r2
 8003e32:	3360      	adds	r3, #96	; 0x60
 8003e34:	2201      	movs	r2, #1
 8003e36:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	b2d9      	uxtb	r1, r3
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	202c      	movs	r0, #44	; 0x2c
 8003e42:	fb00 f303 	mul.w	r3, r0, r3
 8003e46:	4413      	add	r3, r2
 8003e48:	3360      	adds	r3, #96	; 0x60
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f009 fd66 	bl	800d920 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e54:	e034      	b.n	8003ec0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	212c      	movs	r1, #44	; 0x2c
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	4413      	add	r3, r2
 8003e62:	333f      	adds	r3, #63	; 0x3f
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d12a      	bne.n	8003ec0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	3360      	adds	r3, #96	; 0x60
 8003e78:	2201      	movs	r2, #1
 8003e7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	212c      	movs	r1, #44	; 0x2c
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	3354      	adds	r3, #84	; 0x54
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	f083 0301 	eor.w	r3, r3, #1
 8003e90:	b2d8      	uxtb	r0, r3
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	212c      	movs	r1, #44	; 0x2c
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3354      	adds	r3, #84	; 0x54
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	b2d9      	uxtb	r1, r3
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	202c      	movs	r0, #44	; 0x2c
 8003eae:	fb00 f303 	mul.w	r3, r0, r3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3360      	adds	r3, #96	; 0x60
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f009 fd30 	bl	800d920 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d12b      	bne.n	8003f20 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	212c      	movs	r1, #44	; 0x2c
 8003ece:	fb01 f303 	mul.w	r3, r1, r3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3348      	adds	r3, #72	; 0x48
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	202c      	movs	r0, #44	; 0x2c
 8003ede:	fb00 f202 	mul.w	r2, r0, r2
 8003ee2:	440a      	add	r2, r1
 8003ee4:	3240      	adds	r2, #64	; 0x40
 8003ee6:	8812      	ldrh	r2, [r2, #0]
 8003ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 81be 	beq.w	8004272 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	212c      	movs	r1, #44	; 0x2c
 8003efc:	fb01 f303 	mul.w	r3, r1, r3
 8003f00:	4413      	add	r3, r2
 8003f02:	3354      	adds	r3, #84	; 0x54
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	f083 0301 	eor.w	r3, r3, #1
 8003f0a:	b2d8      	uxtb	r0, r3
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	212c      	movs	r1, #44	; 0x2c
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	3354      	adds	r3, #84	; 0x54
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	701a      	strb	r2, [r3, #0]
}
 8003f1e:	e1a8      	b.n	8004272 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	212c      	movs	r1, #44	; 0x2c
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3354      	adds	r3, #84	; 0x54
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	f083 0301 	eor.w	r3, r3, #1
 8003f34:	b2d8      	uxtb	r0, r3
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	212c      	movs	r1, #44	; 0x2c
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	4413      	add	r3, r2
 8003f42:	3354      	adds	r3, #84	; 0x54
 8003f44:	4602      	mov	r2, r0
 8003f46:	701a      	strb	r2, [r3, #0]
}
 8003f48:	e193      	b.n	8004272 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	f040 8106 	bne.w	800416e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f7c:	f023 0302 	bic.w	r3, r3, #2
 8003f80:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	212c      	movs	r1, #44	; 0x2c
 8003f88:	fb01 f303 	mul.w	r3, r1, r3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3361      	adds	r3, #97	; 0x61
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d109      	bne.n	8003faa <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	212c      	movs	r1, #44	; 0x2c
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3360      	adds	r3, #96	; 0x60
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	e0c9      	b.n	800413e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	212c      	movs	r1, #44	; 0x2c
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3361      	adds	r3, #97	; 0x61
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b05      	cmp	r3, #5
 8003fbc:	d109      	bne.n	8003fd2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	3360      	adds	r3, #96	; 0x60
 8003fcc:	2205      	movs	r2, #5
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e0b5      	b.n	800413e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	212c      	movs	r1, #44	; 0x2c
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	3361      	adds	r3, #97	; 0x61
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b06      	cmp	r3, #6
 8003fe4:	d009      	beq.n	8003ffa <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	212c      	movs	r1, #44	; 0x2c
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	3361      	adds	r3, #97	; 0x61
 8003ff4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d150      	bne.n	800409c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	212c      	movs	r1, #44	; 0x2c
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	335c      	adds	r3, #92	; 0x5c
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	202c      	movs	r0, #44	; 0x2c
 8004012:	fb00 f303 	mul.w	r3, r0, r3
 8004016:	440b      	add	r3, r1
 8004018:	335c      	adds	r3, #92	; 0x5c
 800401a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	212c      	movs	r1, #44	; 0x2c
 8004022:	fb01 f303 	mul.w	r3, r1, r3
 8004026:	4413      	add	r3, r2
 8004028:	335c      	adds	r3, #92	; 0x5c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d912      	bls.n	8004056 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	212c      	movs	r1, #44	; 0x2c
 8004036:	fb01 f303 	mul.w	r3, r1, r3
 800403a:	4413      	add	r3, r2
 800403c:	335c      	adds	r3, #92	; 0x5c
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	3360      	adds	r3, #96	; 0x60
 8004050:	2204      	movs	r2, #4
 8004052:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004054:	e073      	b.n	800413e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	212c      	movs	r1, #44	; 0x2c
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	4413      	add	r3, r2
 8004062:	3360      	adds	r3, #96	; 0x60
 8004064:	2202      	movs	r2, #2
 8004066:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4413      	add	r3, r2
 8004070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800407e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004086:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4413      	add	r3, r2
 8004090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004094:	461a      	mov	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800409a:	e050      	b.n	800413e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	212c      	movs	r1, #44	; 0x2c
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	3361      	adds	r3, #97	; 0x61
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d122      	bne.n	80040f6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	212c      	movs	r1, #44	; 0x2c
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	3360      	adds	r3, #96	; 0x60
 80040be:	2202      	movs	r2, #2
 80040c0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040d8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040e0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ee:	461a      	mov	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	e023      	b.n	800413e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	212c      	movs	r1, #44	; 0x2c
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	4413      	add	r3, r2
 8004102:	3361      	adds	r3, #97	; 0x61
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b07      	cmp	r3, #7
 8004108:	d119      	bne.n	800413e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	212c      	movs	r1, #44	; 0x2c
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	4413      	add	r3, r2
 8004116:	335c      	adds	r3, #92	; 0x5c
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	202c      	movs	r0, #44	; 0x2c
 8004122:	fb00 f303 	mul.w	r3, r0, r3
 8004126:	440b      	add	r3, r1
 8004128:	335c      	adds	r3, #92	; 0x5c
 800412a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	212c      	movs	r1, #44	; 0x2c
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	4413      	add	r3, r2
 8004138:	3360      	adds	r3, #96	; 0x60
 800413a:	2204      	movs	r2, #4
 800413c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	461a      	mov	r2, r3
 800414c:	2302      	movs	r3, #2
 800414e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	b2d9      	uxtb	r1, r3
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	202c      	movs	r0, #44	; 0x2c
 800415a:	fb00 f303 	mul.w	r3, r0, r3
 800415e:	4413      	add	r3, r2
 8004160:	3360      	adds	r3, #96	; 0x60
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f009 fbda 	bl	800d920 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800416c:	e081      	b.n	8004272 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4413      	add	r3, r2
 8004176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b10      	cmp	r3, #16
 8004182:	d176      	bne.n	8004272 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	212c      	movs	r1, #44	; 0x2c
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	4413      	add	r3, r2
 8004190:	333f      	adds	r3, #63	; 0x3f
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b03      	cmp	r3, #3
 8004196:	d121      	bne.n	80041dc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	335c      	adds	r3, #92	; 0x5c
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	4611      	mov	r1, r2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f004 febc 	bl	8008f52 <USB_HC_Halt>
 80041da:	e041      	b.n	8004260 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	212c      	movs	r1, #44	; 0x2c
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	333f      	adds	r3, #63	; 0x3f
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d009      	beq.n	8004204 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	212c      	movs	r1, #44	; 0x2c
 80041f6:	fb01 f303 	mul.w	r3, r1, r3
 80041fa:	4413      	add	r3, r2
 80041fc:	333f      	adds	r3, #63	; 0x3f
 80041fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004200:	2b02      	cmp	r3, #2
 8004202:	d12d      	bne.n	8004260 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	212c      	movs	r1, #44	; 0x2c
 800420a:	fb01 f303 	mul.w	r3, r1, r3
 800420e:	4413      	add	r3, r2
 8004210:	335c      	adds	r3, #92	; 0x5c
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d120      	bne.n	8004260 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	212c      	movs	r1, #44	; 0x2c
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	3361      	adds	r3, #97	; 0x61
 800422c:	2203      	movs	r2, #3
 800422e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4413      	add	r3, r2
 8004238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	0151      	lsls	r1, r2, #5
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	440a      	add	r2, r1
 8004246:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800424a:	f043 0302 	orr.w	r3, r3, #2
 800424e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	4611      	mov	r1, r2
 800425a:	4618      	mov	r0, r3
 800425c:	f004 fe79 	bl	8008f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4413      	add	r3, r2
 8004268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426c:	461a      	mov	r2, r3
 800426e:	2310      	movs	r3, #16
 8004270:	6093      	str	r3, [r2, #8]
}
 8004272:	bf00      	nop
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b088      	sub	sp, #32
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	460b      	mov	r3, r1
 8004284:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	4413      	add	r3, r2
 800429c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d119      	bne.n	80042de <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b6:	461a      	mov	r2, r3
 80042b8:	2304      	movs	r3, #4
 80042ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	0151      	lsls	r1, r2, #5
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	440a      	add	r2, r1
 80042d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042d6:	f043 0302 	orr.w	r3, r3, #2
 80042da:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80042dc:	e3ca      	b.n	8004a74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d13e      	bne.n	8004372 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004300:	461a      	mov	r2, r3
 8004302:	2320      	movs	r3, #32
 8004304:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	212c      	movs	r1, #44	; 0x2c
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	333d      	adds	r3, #61	; 0x3d
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	f040 83ac 	bne.w	8004a74 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	212c      	movs	r1, #44	; 0x2c
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	4413      	add	r3, r2
 8004328:	333d      	adds	r3, #61	; 0x3d
 800432a:	2200      	movs	r2, #0
 800432c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	212c      	movs	r1, #44	; 0x2c
 8004334:	fb01 f303 	mul.w	r3, r1, r3
 8004338:	4413      	add	r3, r2
 800433a:	3360      	adds	r3, #96	; 0x60
 800433c:	2202      	movs	r2, #2
 800433e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	4413      	add	r3, r2
 8004348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	0151      	lsls	r1, r2, #5
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	440a      	add	r2, r1
 8004356:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800435a:	f043 0302 	orr.w	r3, r3, #2
 800435e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	4611      	mov	r1, r2
 800436a:	4618      	mov	r0, r3
 800436c:	f004 fdf1 	bl	8008f52 <USB_HC_Halt>
}
 8004370:	e380      	b.n	8004a74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	4413      	add	r3, r2
 800437a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004388:	d122      	bne.n	80043d0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	4413      	add	r3, r2
 8004392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	0151      	lsls	r1, r2, #5
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	440a      	add	r2, r1
 80043a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043a4:	f043 0302 	orr.w	r3, r3, #2
 80043a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f004 fdcc 	bl	8008f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c6:	461a      	mov	r2, r3
 80043c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043cc:	6093      	str	r3, [r2, #8]
}
 80043ce:	e351      	b.n	8004a74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d150      	bne.n	8004488 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	212c      	movs	r1, #44	; 0x2c
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	335c      	adds	r3, #92	; 0x5c
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b40      	cmp	r3, #64	; 0x40
 800440c:	d111      	bne.n	8004432 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	212c      	movs	r1, #44	; 0x2c
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	4413      	add	r3, r2
 800441a:	333d      	adds	r3, #61	; 0x3d
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	4413      	add	r3, r2
 8004428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442c:	461a      	mov	r2, r3
 800442e:	2340      	movs	r3, #64	; 0x40
 8004430:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	4413      	add	r3, r2
 800443a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	440a      	add	r2, r1
 8004448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800444c:	f043 0302 	orr.w	r3, r3, #2
 8004450:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	4611      	mov	r1, r2
 800445c:	4618      	mov	r0, r3
 800445e:	f004 fd78 	bl	8008f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	4413      	add	r3, r2
 800446a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446e:	461a      	mov	r2, r3
 8004470:	2301      	movs	r3, #1
 8004472:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	212c      	movs	r1, #44	; 0x2c
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	4413      	add	r3, r2
 8004480:	3361      	adds	r3, #97	; 0x61
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
}
 8004486:	e2f5      	b.n	8004a74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	4413      	add	r3, r2
 8004490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d13c      	bne.n	8004518 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	212c      	movs	r1, #44	; 0x2c
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	4413      	add	r3, r2
 80044aa:	3361      	adds	r3, #97	; 0x61
 80044ac:	2204      	movs	r2, #4
 80044ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	212c      	movs	r1, #44	; 0x2c
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	333d      	adds	r3, #61	; 0x3d
 80044be:	2201      	movs	r2, #1
 80044c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	212c      	movs	r1, #44	; 0x2c
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	4413      	add	r3, r2
 80044ce:	335c      	adds	r3, #92	; 0x5c
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	0151      	lsls	r1, r2, #5
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	440a      	add	r2, r1
 80044ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044ee:	f043 0302 	orr.w	r3, r3, #2
 80044f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	4611      	mov	r1, r2
 80044fe:	4618      	mov	r0, r3
 8004500:	f004 fd27 	bl	8008f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	4413      	add	r3, r2
 800450c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004510:	461a      	mov	r2, r3
 8004512:	2340      	movs	r3, #64	; 0x40
 8004514:	6093      	str	r3, [r2, #8]
}
 8004516:	e2ad      	b.n	8004a74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	4413      	add	r3, r2
 8004520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b08      	cmp	r3, #8
 800452c:	d12a      	bne.n	8004584 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	4413      	add	r3, r2
 8004536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453a:	461a      	mov	r2, r3
 800453c:	2308      	movs	r3, #8
 800453e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	4413      	add	r3, r2
 8004548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	0151      	lsls	r1, r2, #5
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	440a      	add	r2, r1
 8004556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800455a:	f043 0302 	orr.w	r3, r3, #2
 800455e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f004 fcf1 	bl	8008f52 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	212c      	movs	r1, #44	; 0x2c
 8004576:	fb01 f303 	mul.w	r3, r1, r3
 800457a:	4413      	add	r3, r2
 800457c:	3361      	adds	r3, #97	; 0x61
 800457e:	2205      	movs	r2, #5
 8004580:	701a      	strb	r2, [r3, #0]
}
 8004582:	e277      	b.n	8004a74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	4413      	add	r3, r2
 800458c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b10      	cmp	r3, #16
 8004598:	d150      	bne.n	800463c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	212c      	movs	r1, #44	; 0x2c
 80045a0:	fb01 f303 	mul.w	r3, r1, r3
 80045a4:	4413      	add	r3, r2
 80045a6:	335c      	adds	r3, #92	; 0x5c
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	212c      	movs	r1, #44	; 0x2c
 80045b2:	fb01 f303 	mul.w	r3, r1, r3
 80045b6:	4413      	add	r3, r2
 80045b8:	3361      	adds	r3, #97	; 0x61
 80045ba:	2203      	movs	r2, #3
 80045bc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	212c      	movs	r1, #44	; 0x2c
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	333d      	adds	r3, #61	; 0x3d
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d112      	bne.n	80045f8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	212c      	movs	r1, #44	; 0x2c
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	4413      	add	r3, r2
 80045de:	333c      	adds	r3, #60	; 0x3c
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d108      	bne.n	80045f8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	212c      	movs	r1, #44	; 0x2c
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	333d      	adds	r3, #61	; 0x3d
 80045f4:	2201      	movs	r2, #1
 80045f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	440a      	add	r2, r1
 800460e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004612:	f043 0302 	orr.w	r3, r3, #2
 8004616:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f004 fc95 	bl	8008f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	4413      	add	r3, r2
 8004630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004634:	461a      	mov	r2, r3
 8004636:	2310      	movs	r3, #16
 8004638:	6093      	str	r3, [r2, #8]
}
 800463a:	e21b      	b.n	8004a74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	4413      	add	r3, r2
 8004644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464e:	2b80      	cmp	r3, #128	; 0x80
 8004650:	d174      	bne.n	800473c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d121      	bne.n	800469e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	212c      	movs	r1, #44	; 0x2c
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	4413      	add	r3, r2
 8004666:	3361      	adds	r3, #97	; 0x61
 8004668:	2206      	movs	r2, #6
 800466a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	4413      	add	r3, r2
 8004674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	0151      	lsls	r1, r2, #5
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	440a      	add	r2, r1
 8004682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004686:	f043 0302 	orr.w	r3, r3, #2
 800468a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	4611      	mov	r1, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f004 fc5b 	bl	8008f52 <USB_HC_Halt>
 800469c:	e044      	b.n	8004728 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	212c      	movs	r1, #44	; 0x2c
 80046a4:	fb01 f303 	mul.w	r3, r1, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	335c      	adds	r3, #92	; 0x5c
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	202c      	movs	r0, #44	; 0x2c
 80046b6:	fb00 f303 	mul.w	r3, r0, r3
 80046ba:	440b      	add	r3, r1
 80046bc:	335c      	adds	r3, #92	; 0x5c
 80046be:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	212c      	movs	r1, #44	; 0x2c
 80046c6:	fb01 f303 	mul.w	r3, r1, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	335c      	adds	r3, #92	; 0x5c
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d920      	bls.n	8004716 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	212c      	movs	r1, #44	; 0x2c
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	4413      	add	r3, r2
 80046e0:	335c      	adds	r3, #92	; 0x5c
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	212c      	movs	r1, #44	; 0x2c
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	3360      	adds	r3, #96	; 0x60
 80046f4:	2204      	movs	r2, #4
 80046f6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	b2d9      	uxtb	r1, r3
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	202c      	movs	r0, #44	; 0x2c
 8004702:	fb00 f303 	mul.w	r3, r0, r3
 8004706:	4413      	add	r3, r2
 8004708:	3360      	adds	r3, #96	; 0x60
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f009 f906 	bl	800d920 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004714:	e008      	b.n	8004728 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	212c      	movs	r1, #44	; 0x2c
 800471c:	fb01 f303 	mul.w	r3, r1, r3
 8004720:	4413      	add	r3, r2
 8004722:	3360      	adds	r3, #96	; 0x60
 8004724:	2202      	movs	r2, #2
 8004726:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	4413      	add	r3, r2
 8004730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004734:	461a      	mov	r2, r3
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	6093      	str	r3, [r2, #8]
}
 800473a:	e19b      	b.n	8004a74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	4413      	add	r3, r2
 8004744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004752:	d134      	bne.n	80047be <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	4413      	add	r3, r2
 800475c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	440a      	add	r2, r1
 800476a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800476e:	f043 0302 	orr.w	r3, r3, #2
 8004772:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	4611      	mov	r1, r2
 800477e:	4618      	mov	r0, r3
 8004780:	f004 fbe7 	bl	8008f52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	4413      	add	r3, r2
 800478c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004790:	461a      	mov	r2, r3
 8004792:	2310      	movs	r3, #16
 8004794:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	4413      	add	r3, r2
 800479e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a2:	461a      	mov	r2, r3
 80047a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	212c      	movs	r1, #44	; 0x2c
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	4413      	add	r3, r2
 80047b6:	3361      	adds	r3, #97	; 0x61
 80047b8:	2208      	movs	r2, #8
 80047ba:	701a      	strb	r2, [r3, #0]
}
 80047bc:	e15a      	b.n	8004a74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	f040 814f 	bne.w	8004a74 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	0151      	lsls	r1, r2, #5
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	440a      	add	r2, r1
 80047ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047f0:	f023 0302 	bic.w	r3, r3, #2
 80047f4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	212c      	movs	r1, #44	; 0x2c
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	4413      	add	r3, r2
 8004802:	3361      	adds	r3, #97	; 0x61
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d17d      	bne.n	8004906 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	212c      	movs	r1, #44	; 0x2c
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	4413      	add	r3, r2
 8004816:	3360      	adds	r3, #96	; 0x60
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	212c      	movs	r1, #44	; 0x2c
 8004822:	fb01 f303 	mul.w	r3, r1, r3
 8004826:	4413      	add	r3, r2
 8004828:	333f      	adds	r3, #63	; 0x3f
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b02      	cmp	r3, #2
 800482e:	d00a      	beq.n	8004846 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	212c      	movs	r1, #44	; 0x2c
 8004836:	fb01 f303 	mul.w	r3, r1, r3
 800483a:	4413      	add	r3, r2
 800483c:	333f      	adds	r3, #63	; 0x3f
 800483e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004840:	2b03      	cmp	r3, #3
 8004842:	f040 8100 	bne.w	8004a46 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d113      	bne.n	8004876 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	212c      	movs	r1, #44	; 0x2c
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	3355      	adds	r3, #85	; 0x55
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	f083 0301 	eor.w	r3, r3, #1
 8004862:	b2d8      	uxtb	r0, r3
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	212c      	movs	r1, #44	; 0x2c
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	4413      	add	r3, r2
 8004870:	3355      	adds	r3, #85	; 0x55
 8004872:	4602      	mov	r2, r0
 8004874:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b01      	cmp	r3, #1
 800487c:	f040 80e3 	bne.w	8004a46 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	212c      	movs	r1, #44	; 0x2c
 8004886:	fb01 f303 	mul.w	r3, r1, r3
 800488a:	4413      	add	r3, r2
 800488c:	334c      	adds	r3, #76	; 0x4c
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80d8 	beq.w	8004a46 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	212c      	movs	r1, #44	; 0x2c
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	4413      	add	r3, r2
 80048a2:	334c      	adds	r3, #76	; 0x4c
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	202c      	movs	r0, #44	; 0x2c
 80048ac:	fb00 f202 	mul.w	r2, r0, r2
 80048b0:	440a      	add	r2, r1
 80048b2:	3240      	adds	r2, #64	; 0x40
 80048b4:	8812      	ldrh	r2, [r2, #0]
 80048b6:	4413      	add	r3, r2
 80048b8:	3b01      	subs	r3, #1
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	202c      	movs	r0, #44	; 0x2c
 80048c0:	fb00 f202 	mul.w	r2, r0, r2
 80048c4:	440a      	add	r2, r1
 80048c6:	3240      	adds	r2, #64	; 0x40
 80048c8:	8812      	ldrh	r2, [r2, #0]
 80048ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 80b5 	beq.w	8004a46 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	212c      	movs	r1, #44	; 0x2c
 80048e2:	fb01 f303 	mul.w	r3, r1, r3
 80048e6:	4413      	add	r3, r2
 80048e8:	3355      	adds	r3, #85	; 0x55
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	f083 0301 	eor.w	r3, r3, #1
 80048f0:	b2d8      	uxtb	r0, r3
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	212c      	movs	r1, #44	; 0x2c
 80048f8:	fb01 f303 	mul.w	r3, r1, r3
 80048fc:	4413      	add	r3, r2
 80048fe:	3355      	adds	r3, #85	; 0x55
 8004900:	4602      	mov	r2, r0
 8004902:	701a      	strb	r2, [r3, #0]
 8004904:	e09f      	b.n	8004a46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	212c      	movs	r1, #44	; 0x2c
 800490c:	fb01 f303 	mul.w	r3, r1, r3
 8004910:	4413      	add	r3, r2
 8004912:	3361      	adds	r3, #97	; 0x61
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b03      	cmp	r3, #3
 8004918:	d109      	bne.n	800492e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	212c      	movs	r1, #44	; 0x2c
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	4413      	add	r3, r2
 8004926:	3360      	adds	r3, #96	; 0x60
 8004928:	2202      	movs	r2, #2
 800492a:	701a      	strb	r2, [r3, #0]
 800492c:	e08b      	b.n	8004a46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	212c      	movs	r1, #44	; 0x2c
 8004934:	fb01 f303 	mul.w	r3, r1, r3
 8004938:	4413      	add	r3, r2
 800493a:	3361      	adds	r3, #97	; 0x61
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b04      	cmp	r3, #4
 8004940:	d109      	bne.n	8004956 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	212c      	movs	r1, #44	; 0x2c
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	4413      	add	r3, r2
 800494e:	3360      	adds	r3, #96	; 0x60
 8004950:	2202      	movs	r2, #2
 8004952:	701a      	strb	r2, [r3, #0]
 8004954:	e077      	b.n	8004a46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	212c      	movs	r1, #44	; 0x2c
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	4413      	add	r3, r2
 8004962:	3361      	adds	r3, #97	; 0x61
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b05      	cmp	r3, #5
 8004968:	d109      	bne.n	800497e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	212c      	movs	r1, #44	; 0x2c
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	4413      	add	r3, r2
 8004976:	3360      	adds	r3, #96	; 0x60
 8004978:	2205      	movs	r2, #5
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	e063      	b.n	8004a46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	212c      	movs	r1, #44	; 0x2c
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	4413      	add	r3, r2
 800498a:	3361      	adds	r3, #97	; 0x61
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b06      	cmp	r3, #6
 8004990:	d009      	beq.n	80049a6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	212c      	movs	r1, #44	; 0x2c
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	4413      	add	r3, r2
 800499e:	3361      	adds	r3, #97	; 0x61
 80049a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d14f      	bne.n	8004a46 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	212c      	movs	r1, #44	; 0x2c
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	4413      	add	r3, r2
 80049b2:	335c      	adds	r3, #92	; 0x5c
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	202c      	movs	r0, #44	; 0x2c
 80049be:	fb00 f303 	mul.w	r3, r0, r3
 80049c2:	440b      	add	r3, r1
 80049c4:	335c      	adds	r3, #92	; 0x5c
 80049c6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	212c      	movs	r1, #44	; 0x2c
 80049ce:	fb01 f303 	mul.w	r3, r1, r3
 80049d2:	4413      	add	r3, r2
 80049d4:	335c      	adds	r3, #92	; 0x5c
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d912      	bls.n	8004a02 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	212c      	movs	r1, #44	; 0x2c
 80049e2:	fb01 f303 	mul.w	r3, r1, r3
 80049e6:	4413      	add	r3, r2
 80049e8:	335c      	adds	r3, #92	; 0x5c
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	212c      	movs	r1, #44	; 0x2c
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	4413      	add	r3, r2
 80049fa:	3360      	adds	r3, #96	; 0x60
 80049fc:	2204      	movs	r2, #4
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	e021      	b.n	8004a46 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	212c      	movs	r1, #44	; 0x2c
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3360      	adds	r3, #96	; 0x60
 8004a10:	2202      	movs	r2, #2
 8004a12:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a2a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a32:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a40:	461a      	mov	r2, r3
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a52:	461a      	mov	r2, r3
 8004a54:	2302      	movs	r3, #2
 8004a56:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	b2d9      	uxtb	r1, r3
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	202c      	movs	r0, #44	; 0x2c
 8004a62:	fb00 f303 	mul.w	r3, r0, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	3360      	adds	r3, #96	; 0x60
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f008 ff56 	bl	800d920 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004a74:	bf00      	nop
 8004a76:	3720      	adds	r7, #32
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	; 0x28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	0c5b      	lsrs	r3, r3, #17
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	091b      	lsrs	r3, r3, #4
 8004aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ab0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d004      	beq.n	8004ac2 <HCD_RXQLVL_IRQHandler+0x46>
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b05      	cmp	r3, #5
 8004abc:	f000 80a9 	beq.w	8004c12 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004ac0:	e0aa      	b.n	8004c18 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80a6 	beq.w	8004c16 <HCD_RXQLVL_IRQHandler+0x19a>
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	212c      	movs	r1, #44	; 0x2c
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	3344      	adds	r3, #68	; 0x44
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 809b 	beq.w	8004c16 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	212c      	movs	r1, #44	; 0x2c
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	3350      	adds	r3, #80	; 0x50
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	441a      	add	r2, r3
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	202c      	movs	r0, #44	; 0x2c
 8004afa:	fb00 f303 	mul.w	r3, r0, r3
 8004afe:	440b      	add	r3, r1
 8004b00:	334c      	adds	r3, #76	; 0x4c
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d87a      	bhi.n	8004bfe <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	212c      	movs	r1, #44	; 0x2c
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	3344      	adds	r3, #68	; 0x44
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	b292      	uxth	r2, r2
 8004b20:	4619      	mov	r1, r3
 8004b22:	f003 fd8f 	bl	8008644 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	212c      	movs	r1, #44	; 0x2c
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	4413      	add	r3, r2
 8004b32:	3344      	adds	r3, #68	; 0x44
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	441a      	add	r2, r3
 8004b3a:	6879      	ldr	r1, [r7, #4]
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	202c      	movs	r0, #44	; 0x2c
 8004b40:	fb00 f303 	mul.w	r3, r0, r3
 8004b44:	440b      	add	r3, r1
 8004b46:	3344      	adds	r3, #68	; 0x44
 8004b48:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	212c      	movs	r1, #44	; 0x2c
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	4413      	add	r3, r2
 8004b56:	3350      	adds	r3, #80	; 0x50
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	441a      	add	r2, r3
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	202c      	movs	r0, #44	; 0x2c
 8004b64:	fb00 f303 	mul.w	r3, r0, r3
 8004b68:	440b      	add	r3, r1
 8004b6a:	3350      	adds	r3, #80	; 0x50
 8004b6c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	0cdb      	lsrs	r3, r3, #19
 8004b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b82:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	212c      	movs	r1, #44	; 0x2c
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	4413      	add	r3, r2
 8004b90:	3340      	adds	r3, #64	; 0x40
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	461a      	mov	r2, r3
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d13c      	bne.n	8004c16 <HCD_RXQLVL_IRQHandler+0x19a>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d039      	beq.n	8004c16 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bb8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bc0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	212c      	movs	r1, #44	; 0x2c
 8004bda:	fb01 f303 	mul.w	r3, r1, r3
 8004bde:	4413      	add	r3, r2
 8004be0:	3354      	adds	r3, #84	; 0x54
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	f083 0301 	eor.w	r3, r3, #1
 8004be8:	b2d8      	uxtb	r0, r3
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	212c      	movs	r1, #44	; 0x2c
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3354      	adds	r3, #84	; 0x54
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	701a      	strb	r2, [r3, #0]
      break;
 8004bfc:	e00b      	b.n	8004c16 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	212c      	movs	r1, #44	; 0x2c
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	4413      	add	r3, r2
 8004c0a:	3360      	adds	r3, #96	; 0x60
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	701a      	strb	r2, [r3, #0]
      break;
 8004c10:	e001      	b.n	8004c16 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004c12:	bf00      	nop
 8004c14:	e000      	b.n	8004c18 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004c16:	bf00      	nop
  }
}
 8004c18:	bf00      	nop
 8004c1a:	3728      	adds	r7, #40	; 0x28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c4c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d10b      	bne.n	8004c70 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d102      	bne.n	8004c68 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f008 fe40 	bl	800d8e8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f043 0302 	orr.w	r3, r3, #2
 8004c6e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d132      	bne.n	8004ce0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f043 0308 	orr.w	r3, r3, #8
 8004c80:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d126      	bne.n	8004cda <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d113      	bne.n	8004cbc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004c9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c9e:	d106      	bne.n	8004cae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2102      	movs	r1, #2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f003 fe2c 	bl	8008904 <USB_InitFSLSPClkSel>
 8004cac:	e011      	b.n	8004cd2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f003 fe25 	bl	8008904 <USB_InitFSLSPClkSel>
 8004cba:	e00a      	b.n	8004cd2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d106      	bne.n	8004cd2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004cd0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f008 fe36 	bl	800d944 <HAL_HCD_PortEnabled_Callback>
 8004cd8:	e002      	b.n	8004ce0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f008 fe40 	bl	800d960 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d103      	bne.n	8004cf2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f043 0320 	orr.w	r3, r3, #32
 8004cf0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	6013      	str	r3, [r2, #0]
}
 8004cfe:	bf00      	nop
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e12b      	b.n	8004f72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fd f8c8 	bl	8001ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2224      	movs	r2, #36	; 0x24
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d6c:	f001 ffba 	bl	8006ce4 <HAL_RCC_GetPCLK1Freq>
 8004d70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	4a81      	ldr	r2, [pc, #516]	; (8004f7c <HAL_I2C_Init+0x274>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d807      	bhi.n	8004d8c <HAL_I2C_Init+0x84>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4a80      	ldr	r2, [pc, #512]	; (8004f80 <HAL_I2C_Init+0x278>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	bf94      	ite	ls
 8004d84:	2301      	movls	r3, #1
 8004d86:	2300      	movhi	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	e006      	b.n	8004d9a <HAL_I2C_Init+0x92>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a7d      	ldr	r2, [pc, #500]	; (8004f84 <HAL_I2C_Init+0x27c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	bf94      	ite	ls
 8004d94:	2301      	movls	r3, #1
 8004d96:	2300      	movhi	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e0e7      	b.n	8004f72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4a78      	ldr	r2, [pc, #480]	; (8004f88 <HAL_I2C_Init+0x280>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	0c9b      	lsrs	r3, r3, #18
 8004dac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4a6a      	ldr	r2, [pc, #424]	; (8004f7c <HAL_I2C_Init+0x274>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d802      	bhi.n	8004ddc <HAL_I2C_Init+0xd4>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	e009      	b.n	8004df0 <HAL_I2C_Init+0xe8>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004de2:	fb02 f303 	mul.w	r3, r2, r3
 8004de6:	4a69      	ldr	r2, [pc, #420]	; (8004f8c <HAL_I2C_Init+0x284>)
 8004de8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dec:	099b      	lsrs	r3, r3, #6
 8004dee:	3301      	adds	r3, #1
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	430b      	orrs	r3, r1
 8004df6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	495c      	ldr	r1, [pc, #368]	; (8004f7c <HAL_I2C_Init+0x274>)
 8004e0c:	428b      	cmp	r3, r1
 8004e0e:	d819      	bhi.n	8004e44 <HAL_I2C_Init+0x13c>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	1e59      	subs	r1, r3, #1
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e1e:	1c59      	adds	r1, r3, #1
 8004e20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e24:	400b      	ands	r3, r1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_I2C_Init+0x138>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1e59      	subs	r1, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e38:	3301      	adds	r3, #1
 8004e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e3e:	e051      	b.n	8004ee4 <HAL_I2C_Init+0x1dc>
 8004e40:	2304      	movs	r3, #4
 8004e42:	e04f      	b.n	8004ee4 <HAL_I2C_Init+0x1dc>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d111      	bne.n	8004e70 <HAL_I2C_Init+0x168>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	1e58      	subs	r0, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6859      	ldr	r1, [r3, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	440b      	add	r3, r1
 8004e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bf0c      	ite	eq
 8004e68:	2301      	moveq	r3, #1
 8004e6a:	2300      	movne	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	e012      	b.n	8004e96 <HAL_I2C_Init+0x18e>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	1e58      	subs	r0, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6859      	ldr	r1, [r3, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	0099      	lsls	r1, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e86:	3301      	adds	r3, #1
 8004e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	bf0c      	ite	eq
 8004e90:	2301      	moveq	r3, #1
 8004e92:	2300      	movne	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_I2C_Init+0x196>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e022      	b.n	8004ee4 <HAL_I2C_Init+0x1dc>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10e      	bne.n	8004ec4 <HAL_I2C_Init+0x1bc>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1e58      	subs	r0, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6859      	ldr	r1, [r3, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	440b      	add	r3, r1
 8004eb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eb8:	3301      	adds	r3, #1
 8004eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec2:	e00f      	b.n	8004ee4 <HAL_I2C_Init+0x1dc>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	1e58      	subs	r0, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6859      	ldr	r1, [r3, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	0099      	lsls	r1, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eda:	3301      	adds	r3, #1
 8004edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	6809      	ldr	r1, [r1, #0]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69da      	ldr	r2, [r3, #28]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6911      	ldr	r1, [r2, #16]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	68d2      	ldr	r2, [r2, #12]
 8004f1e:	4311      	orrs	r1, r2
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	430b      	orrs	r3, r1
 8004f26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	000186a0 	.word	0x000186a0
 8004f80:	001e847f 	.word	0x001e847f
 8004f84:	003d08ff 	.word	0x003d08ff
 8004f88:	431bde83 	.word	0x431bde83
 8004f8c:	10624dd3 	.word	0x10624dd3

08004f90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	4608      	mov	r0, r1
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	817b      	strh	r3, [r7, #10]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	813b      	strh	r3, [r7, #8]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004faa:	f7fd fc43 	bl	8002834 <HAL_GetTick>
 8004fae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	f040 80d9 	bne.w	8005170 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	2319      	movs	r3, #25
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	496d      	ldr	r1, [pc, #436]	; (800517c <HAL_I2C_Mem_Write+0x1ec>)
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fc7f 	bl	80058cc <I2C_WaitOnFlagUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e0cc      	b.n	8005172 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_I2C_Mem_Write+0x56>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e0c5      	b.n	8005172 <HAL_I2C_Mem_Write+0x1e2>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d007      	beq.n	800500c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800501a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2221      	movs	r2, #33	; 0x21
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2240      	movs	r2, #64	; 0x40
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a3a      	ldr	r2, [r7, #32]
 8005036:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800503c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4a4d      	ldr	r2, [pc, #308]	; (8005180 <HAL_I2C_Mem_Write+0x1f0>)
 800504c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800504e:	88f8      	ldrh	r0, [r7, #6]
 8005050:	893a      	ldrh	r2, [r7, #8]
 8005052:	8979      	ldrh	r1, [r7, #10]
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	9301      	str	r3, [sp, #4]
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	4603      	mov	r3, r0
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fab6 	bl	80055d0 <I2C_RequestMemoryWrite>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d052      	beq.n	8005110 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e081      	b.n	8005172 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 fd00 	bl	8005a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00d      	beq.n	800509a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	2b04      	cmp	r3, #4
 8005084:	d107      	bne.n	8005096 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005094:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e06b      	b.n	8005172 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d11b      	bne.n	8005110 <HAL_I2C_Mem_Write+0x180>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d017      	beq.n	8005110 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	781a      	ldrb	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1aa      	bne.n	800506e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 fcec 	bl	8005afa <I2C_WaitOnBTFFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00d      	beq.n	8005144 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	2b04      	cmp	r3, #4
 800512e:	d107      	bne.n	8005140 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e016      	b.n	8005172 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	e000      	b.n	8005172 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005170:	2302      	movs	r3, #2
  }
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	00100002 	.word	0x00100002
 8005180:	ffff0000 	.word	0xffff0000

08005184 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08c      	sub	sp, #48	; 0x30
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	4608      	mov	r0, r1
 800518e:	4611      	mov	r1, r2
 8005190:	461a      	mov	r2, r3
 8005192:	4603      	mov	r3, r0
 8005194:	817b      	strh	r3, [r7, #10]
 8005196:	460b      	mov	r3, r1
 8005198:	813b      	strh	r3, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800519e:	f7fd fb49 	bl	8002834 <HAL_GetTick>
 80051a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	f040 8208 	bne.w	80055c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	2319      	movs	r3, #25
 80051b8:	2201      	movs	r2, #1
 80051ba:	497b      	ldr	r1, [pc, #492]	; (80053a8 <HAL_I2C_Mem_Read+0x224>)
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fb85 	bl	80058cc <I2C_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
 80051ca:	e1fb      	b.n	80055c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_I2C_Mem_Read+0x56>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e1f4      	b.n	80055c4 <HAL_I2C_Mem_Read+0x440>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d007      	beq.n	8005200 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800520e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2222      	movs	r2, #34	; 0x22
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2240      	movs	r2, #64	; 0x40
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005230:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4a5b      	ldr	r2, [pc, #364]	; (80053ac <HAL_I2C_Mem_Read+0x228>)
 8005240:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005242:	88f8      	ldrh	r0, [r7, #6]
 8005244:	893a      	ldrh	r2, [r7, #8]
 8005246:	8979      	ldrh	r1, [r7, #10]
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	4603      	mov	r3, r0
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 fa52 	bl	80056fc <I2C_RequestMemoryRead>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e1b0      	b.n	80055c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005266:	2b00      	cmp	r3, #0
 8005268:	d113      	bne.n	8005292 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800526a:	2300      	movs	r3, #0
 800526c:	623b      	str	r3, [r7, #32]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	623b      	str	r3, [r7, #32]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	623b      	str	r3, [r7, #32]
 800527e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e184      	b.n	800559c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005296:	2b01      	cmp	r3, #1
 8005298:	d11b      	bne.n	80052d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	e164      	b.n	800559c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d11b      	bne.n	8005312 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	61bb      	str	r3, [r7, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	e144      	b.n	800559c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005328:	e138      	b.n	800559c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532e:	2b03      	cmp	r3, #3
 8005330:	f200 80f1 	bhi.w	8005516 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005338:	2b01      	cmp	r3, #1
 800533a:	d123      	bne.n	8005384 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800533c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 fc1b 	bl	8005b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e139      	b.n	80055c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005382:	e10b      	b.n	800559c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005388:	2b02      	cmp	r3, #2
 800538a:	d14e      	bne.n	800542a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	2200      	movs	r2, #0
 8005394:	4906      	ldr	r1, [pc, #24]	; (80053b0 <HAL_I2C_Mem_Read+0x22c>)
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 fa98 	bl	80058cc <I2C_WaitOnFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d008      	beq.n	80053b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e10e      	b.n	80055c4 <HAL_I2C_Mem_Read+0x440>
 80053a6:	bf00      	nop
 80053a8:	00100002 	.word	0x00100002
 80053ac:	ffff0000 	.word	0xffff0000
 80053b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005428:	e0b8      	b.n	800559c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005430:	2200      	movs	r2, #0
 8005432:	4966      	ldr	r1, [pc, #408]	; (80055cc <HAL_I2C_Mem_Read+0x448>)
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fa49 	bl	80058cc <I2C_WaitOnFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0bf      	b.n	80055c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	2200      	movs	r2, #0
 800548e:	494f      	ldr	r1, [pc, #316]	; (80055cc <HAL_I2C_Mem_Read+0x448>)
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 fa1b 	bl	80058cc <I2C_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e091      	b.n	80055c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005514:	e042      	b.n	800559c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005518:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 fb2e 	bl	8005b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e04c      	b.n	80055c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b04      	cmp	r3, #4
 8005568:	d118      	bne.n	800559c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005586:	3b01      	subs	r3, #1
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f47f aec2 	bne.w	800532a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	e000      	b.n	80055c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80055c2:	2302      	movs	r3, #2
  }
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3728      	adds	r7, #40	; 0x28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	00010004 	.word	0x00010004

080055d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	4608      	mov	r0, r1
 80055da:	4611      	mov	r1, r2
 80055dc:	461a      	mov	r2, r3
 80055de:	4603      	mov	r3, r0
 80055e0:	817b      	strh	r3, [r7, #10]
 80055e2:	460b      	mov	r3, r1
 80055e4:	813b      	strh	r3, [r7, #8]
 80055e6:	4613      	mov	r3, r2
 80055e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	2200      	movs	r2, #0
 8005602:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f960 	bl	80058cc <I2C_WaitOnFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00d      	beq.n	800562e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005620:	d103      	bne.n	800562a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005628:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e05f      	b.n	80056ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800562e:	897b      	ldrh	r3, [r7, #10]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800563c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	6a3a      	ldr	r2, [r7, #32]
 8005642:	492d      	ldr	r1, [pc, #180]	; (80056f8 <I2C_RequestMemoryWrite+0x128>)
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f998 	bl	800597a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e04c      	b.n	80056ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800566a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566c:	6a39      	ldr	r1, [r7, #32]
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 fa02 	bl	8005a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00d      	beq.n	8005696 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	2b04      	cmp	r3, #4
 8005680:	d107      	bne.n	8005692 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005690:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e02b      	b.n	80056ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d105      	bne.n	80056a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800569c:	893b      	ldrh	r3, [r7, #8]
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	611a      	str	r2, [r3, #16]
 80056a6:	e021      	b.n	80056ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056a8:	893b      	ldrh	r3, [r7, #8]
 80056aa:	0a1b      	lsrs	r3, r3, #8
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b8:	6a39      	ldr	r1, [r7, #32]
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f9dc 	bl	8005a78 <I2C_WaitOnTXEFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00d      	beq.n	80056e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d107      	bne.n	80056de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e005      	b.n	80056ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056e2:	893b      	ldrh	r3, [r7, #8]
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	00010002 	.word	0x00010002

080056fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af02      	add	r7, sp, #8
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	4608      	mov	r0, r1
 8005706:	4611      	mov	r1, r2
 8005708:	461a      	mov	r2, r3
 800570a:	4603      	mov	r3, r0
 800570c:	817b      	strh	r3, [r7, #10]
 800570e:	460b      	mov	r3, r1
 8005710:	813b      	strh	r3, [r7, #8]
 8005712:	4613      	mov	r3, r2
 8005714:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005724:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005734:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	2200      	movs	r2, #0
 800573e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 f8c2 	bl	80058cc <I2C_WaitOnFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00d      	beq.n	800576a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800575c:	d103      	bne.n	8005766 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e0aa      	b.n	80058c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800576a:	897b      	ldrh	r3, [r7, #10]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005778:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	6a3a      	ldr	r2, [r7, #32]
 800577e:	4952      	ldr	r1, [pc, #328]	; (80058c8 <I2C_RequestMemoryRead+0x1cc>)
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 f8fa 	bl	800597a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e097      	b.n	80058c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a8:	6a39      	ldr	r1, [r7, #32]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f964 	bl	8005a78 <I2C_WaitOnTXEFlagUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00d      	beq.n	80057d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d107      	bne.n	80057ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e076      	b.n	80058c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d105      	bne.n	80057e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057d8:	893b      	ldrh	r3, [r7, #8]
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	611a      	str	r2, [r3, #16]
 80057e2:	e021      	b.n	8005828 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057e4:	893b      	ldrh	r3, [r7, #8]
 80057e6:	0a1b      	lsrs	r3, r3, #8
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f4:	6a39      	ldr	r1, [r7, #32]
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 f93e 	bl	8005a78 <I2C_WaitOnTXEFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00d      	beq.n	800581e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	2b04      	cmp	r3, #4
 8005808:	d107      	bne.n	800581a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005818:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e050      	b.n	80058c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800581e:	893b      	ldrh	r3, [r7, #8]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800582a:	6a39      	ldr	r1, [r7, #32]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f923 	bl	8005a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00d      	beq.n	8005854 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	2b04      	cmp	r3, #4
 800583e:	d107      	bne.n	8005850 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800584e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e035      	b.n	80058c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005862:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	2200      	movs	r2, #0
 800586c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 f82b 	bl	80058cc <I2C_WaitOnFlagUntilTimeout>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00d      	beq.n	8005898 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588a:	d103      	bne.n	8005894 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005892:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e013      	b.n	80058c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005898:	897b      	ldrh	r3, [r7, #10]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	f043 0301 	orr.w	r3, r3, #1
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	6a3a      	ldr	r2, [r7, #32]
 80058ac:	4906      	ldr	r1, [pc, #24]	; (80058c8 <I2C_RequestMemoryRead+0x1cc>)
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 f863 	bl	800597a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	00010002 	.word	0x00010002

080058cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	4613      	mov	r3, r2
 80058da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058dc:	e025      	b.n	800592a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e4:	d021      	beq.n	800592a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e6:	f7fc ffa5 	bl	8002834 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d302      	bcc.n	80058fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d116      	bne.n	800592a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f043 0220 	orr.w	r2, r3, #32
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e023      	b.n	8005972 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	0c1b      	lsrs	r3, r3, #16
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d10d      	bne.n	8005950 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	43da      	mvns	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4013      	ands	r3, r2
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	bf0c      	ite	eq
 8005946:	2301      	moveq	r3, #1
 8005948:	2300      	movne	r3, #0
 800594a:	b2db      	uxtb	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	e00c      	b.n	800596a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	43da      	mvns	r2, r3
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	4013      	ands	r3, r2
 800595c:	b29b      	uxth	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	bf0c      	ite	eq
 8005962:	2301      	moveq	r3, #1
 8005964:	2300      	movne	r3, #0
 8005966:	b2db      	uxtb	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	429a      	cmp	r2, r3
 800596e:	d0b6      	beq.n	80058de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	607a      	str	r2, [r7, #4]
 8005986:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005988:	e051      	b.n	8005a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005998:	d123      	bne.n	80059e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	f043 0204 	orr.w	r2, r3, #4
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e046      	b.n	8005a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e8:	d021      	beq.n	8005a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ea:	f7fc ff23 	bl	8002834 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d302      	bcc.n	8005a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d116      	bne.n	8005a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f043 0220 	orr.w	r2, r3, #32
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e020      	b.n	8005a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d10c      	bne.n	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	43da      	mvns	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4013      	ands	r3, r2
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bf14      	ite	ne
 8005a4a:	2301      	movne	r3, #1
 8005a4c:	2300      	moveq	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	e00b      	b.n	8005a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	43da      	mvns	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bf14      	ite	ne
 8005a64:	2301      	movne	r3, #1
 8005a66:	2300      	moveq	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d18d      	bne.n	800598a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a84:	e02d      	b.n	8005ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f8ce 	bl	8005c28 <I2C_IsAcknowledgeFailed>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e02d      	b.n	8005af2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d021      	beq.n	8005ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9e:	f7fc fec9 	bl	8002834 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d302      	bcc.n	8005ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d116      	bne.n	8005ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f043 0220 	orr.w	r2, r3, #32
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e007      	b.n	8005af2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aec:	2b80      	cmp	r3, #128	; 0x80
 8005aee:	d1ca      	bne.n	8005a86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b06:	e02d      	b.n	8005b64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f88d 	bl	8005c28 <I2C_IsAcknowledgeFailed>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e02d      	b.n	8005b74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1e:	d021      	beq.n	8005b64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b20:	f7fc fe88 	bl	8002834 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d302      	bcc.n	8005b36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d116      	bne.n	8005b64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	f043 0220 	orr.w	r2, r3, #32
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e007      	b.n	8005b74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d1ca      	bne.n	8005b08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b88:	e042      	b.n	8005c10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b10      	cmp	r3, #16
 8005b96:	d119      	bne.n	8005bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0210 	mvn.w	r2, #16
 8005ba0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e029      	b.n	8005c20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bcc:	f7fc fe32 	bl	8002834 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d302      	bcc.n	8005be2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d116      	bne.n	8005c10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	f043 0220 	orr.w	r2, r3, #32
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e007      	b.n	8005c20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b40      	cmp	r3, #64	; 0x40
 8005c1c:	d1b5      	bne.n	8005b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3e:	d11b      	bne.n	8005c78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	f043 0204 	orr.w	r2, r3, #4
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d129      	bne.n	8005cf0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2224      	movs	r2, #36	; 0x24
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0201 	bic.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0210 	bic.w	r2, r2, #16
 8005cc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	e000      	b.n	8005cf2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005cf0:	2302      	movs	r3, #2
  }
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d12a      	bne.n	8005d6e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2224      	movs	r2, #36	; 0x24
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0201 	bic.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005d38:	89fb      	ldrh	r3, [r7, #14]
 8005d3a:	f023 030f 	bic.w	r3, r3, #15
 8005d3e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	89fb      	ldrh	r3, [r7, #14]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	89fa      	ldrh	r2, [r7, #14]
 8005d50:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0201 	orr.w	r2, r2, #1
 8005d60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e000      	b.n	8005d70 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005d6e:	2302      	movs	r3, #2
  }
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e0bf      	b.n	8005f0e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fc f8f8 	bl	8001f98 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005dbe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6999      	ldr	r1, [r3, #24]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dd4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6899      	ldr	r1, [r3, #8]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	4b4a      	ldr	r3, [pc, #296]	; (8005f18 <HAL_LTDC_Init+0x19c>)
 8005df0:	400b      	ands	r3, r1
 8005df2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	041b      	lsls	r3, r3, #16
 8005dfa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6899      	ldr	r1, [r3, #8]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68d9      	ldr	r1, [r3, #12]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	4b3e      	ldr	r3, [pc, #248]	; (8005f18 <HAL_LTDC_Init+0x19c>)
 8005e1e:	400b      	ands	r3, r1
 8005e20:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	041b      	lsls	r3, r3, #16
 8005e28:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68d9      	ldr	r1, [r3, #12]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1a      	ldr	r2, [r3, #32]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6919      	ldr	r1, [r3, #16]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	4b33      	ldr	r3, [pc, #204]	; (8005f18 <HAL_LTDC_Init+0x19c>)
 8005e4c:	400b      	ands	r3, r1
 8005e4e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	041b      	lsls	r3, r3, #16
 8005e56:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6919      	ldr	r1, [r3, #16]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6959      	ldr	r1, [r3, #20]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	4b27      	ldr	r3, [pc, #156]	; (8005f18 <HAL_LTDC_Init+0x19c>)
 8005e7a:	400b      	ands	r3, r1
 8005e7c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	041b      	lsls	r3, r3, #16
 8005e84:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6959      	ldr	r1, [r3, #20]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005eac:	041b      	lsls	r3, r3, #16
 8005eae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0206 	orr.w	r2, r2, #6
 8005eea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0201 	orr.w	r2, r2, #1
 8005efa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	f000f800 	.word	0xf000f800

08005f1c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f32:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d023      	beq.n	8005f86 <HAL_LTDC_IRQHandler+0x6a>
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01e      	beq.n	8005f86 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0204 	bic.w	r2, r2, #4
 8005f56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f66:	f043 0201 	orr.w	r2, r3, #1
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2204      	movs	r2, #4
 8005f74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f86f 	bl	8006064 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d023      	beq.n	8005fd8 <HAL_LTDC_IRQHandler+0xbc>
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01e      	beq.n	8005fd8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0202 	bic.w	r2, r2, #2
 8005fa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fb8:	f043 0202 	orr.w	r2, r3, #2
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f846 	bl	8006064 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d01b      	beq.n	800601a <HAL_LTDC_IRQHandler+0xfe>
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d016      	beq.n	800601a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0201 	bic.w	r2, r2, #1
 8005ffa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2201      	movs	r2, #1
 8006002:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f82f 	bl	8006078 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01b      	beq.n	800605c <HAL_LTDC_IRQHandler+0x140>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d016      	beq.n	800605c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0208 	bic.w	r2, r2, #8
 800603c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2208      	movs	r2, #8
 8006044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f818 	bl	800608c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800605c:	bf00      	nop
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060a0:	b5b0      	push	{r4, r5, r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <HAL_LTDC_ConfigLayer+0x1a>
 80060b6:	2302      	movs	r3, #2
 80060b8:	e02c      	b.n	8006114 <HAL_LTDC_ConfigLayer+0x74>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2202      	movs	r2, #2
 80060c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2134      	movs	r1, #52	; 0x34
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	4413      	add	r3, r2
 80060d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	4614      	mov	r4, r2
 80060de:	461d      	mov	r5, r3
 80060e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f811 	bl	800611c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2201      	movs	r2, #1
 8006100:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bdb0      	pop	{r4, r5, r7, pc}

0800611c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800611c:	b480      	push	{r7}
 800611e:	b089      	sub	sp, #36	; 0x24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	0c1b      	lsrs	r3, r3, #16
 8006134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006138:	4413      	add	r3, r2
 800613a:	041b      	lsls	r3, r3, #16
 800613c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	01db      	lsls	r3, r3, #7
 8006148:	4413      	add	r3, r2
 800614a:	3384      	adds	r3, #132	; 0x84
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	4611      	mov	r1, r2
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	01d2      	lsls	r2, r2, #7
 8006158:	440a      	add	r2, r1
 800615a:	3284      	adds	r2, #132	; 0x84
 800615c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006160:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006172:	4413      	add	r3, r2
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4619      	mov	r1, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	01db      	lsls	r3, r3, #7
 8006180:	440b      	add	r3, r1
 8006182:	3384      	adds	r3, #132	; 0x84
 8006184:	4619      	mov	r1, r3
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4313      	orrs	r3, r2
 800618a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800619a:	4413      	add	r3, r2
 800619c:	041b      	lsls	r3, r3, #16
 800619e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	01db      	lsls	r3, r3, #7
 80061aa:	4413      	add	r3, r2
 80061ac:	3384      	adds	r3, #132	; 0x84
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	4611      	mov	r1, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	01d2      	lsls	r2, r2, #7
 80061ba:	440a      	add	r2, r1
 80061bc:	3284      	adds	r2, #132	; 0x84
 80061be:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80061c2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061d2:	4413      	add	r3, r2
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4619      	mov	r1, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	01db      	lsls	r3, r3, #7
 80061e0:	440b      	add	r3, r1
 80061e2:	3384      	adds	r3, #132	; 0x84
 80061e4:	4619      	mov	r1, r3
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	01db      	lsls	r3, r3, #7
 80061f6:	4413      	add	r3, r2
 80061f8:	3384      	adds	r3, #132	; 0x84
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	6812      	ldr	r2, [r2, #0]
 8006200:	4611      	mov	r1, r2
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	01d2      	lsls	r2, r2, #7
 8006206:	440a      	add	r2, r1
 8006208:	3284      	adds	r2, #132	; 0x84
 800620a:	f023 0307 	bic.w	r3, r3, #7
 800620e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	01db      	lsls	r3, r3, #7
 800621a:	4413      	add	r3, r2
 800621c:	3384      	adds	r3, #132	; 0x84
 800621e:	461a      	mov	r2, r3
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006236:	041b      	lsls	r3, r3, #16
 8006238:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	061b      	lsls	r3, r3, #24
 8006240:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	01db      	lsls	r3, r3, #7
 800624c:	4413      	add	r3, r2
 800624e:	3384      	adds	r3, #132	; 0x84
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	01db      	lsls	r3, r3, #7
 800625c:	4413      	add	r3, r2
 800625e:	3384      	adds	r3, #132	; 0x84
 8006260:	461a      	mov	r2, r3
 8006262:	2300      	movs	r3, #0
 8006264:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800626c:	461a      	mov	r2, r3
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	431a      	orrs	r2, r3
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	431a      	orrs	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4619      	mov	r1, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	01db      	lsls	r3, r3, #7
 8006280:	440b      	add	r3, r1
 8006282:	3384      	adds	r3, #132	; 0x84
 8006284:	4619      	mov	r1, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	01db      	lsls	r3, r3, #7
 8006296:	4413      	add	r3, r2
 8006298:	3384      	adds	r3, #132	; 0x84
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	6812      	ldr	r2, [r2, #0]
 80062a0:	4611      	mov	r1, r2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	01d2      	lsls	r2, r2, #7
 80062a6:	440a      	add	r2, r1
 80062a8:	3284      	adds	r2, #132	; 0x84
 80062aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062ae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	461a      	mov	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	01db      	lsls	r3, r3, #7
 80062ba:	4413      	add	r3, r2
 80062bc:	3384      	adds	r3, #132	; 0x84
 80062be:	461a      	mov	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	01db      	lsls	r3, r3, #7
 80062d0:	4413      	add	r3, r2
 80062d2:	3384      	adds	r3, #132	; 0x84
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	4611      	mov	r1, r2
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	01d2      	lsls	r2, r2, #7
 80062e0:	440a      	add	r2, r1
 80062e2:	3284      	adds	r2, #132	; 0x84
 80062e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80062e8:	f023 0307 	bic.w	r3, r3, #7
 80062ec:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	69da      	ldr	r2, [r3, #28]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	68f9      	ldr	r1, [r7, #12]
 80062f8:	6809      	ldr	r1, [r1, #0]
 80062fa:	4608      	mov	r0, r1
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	01c9      	lsls	r1, r1, #7
 8006300:	4401      	add	r1, r0
 8006302:	3184      	adds	r1, #132	; 0x84
 8006304:	4313      	orrs	r3, r2
 8006306:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	01db      	lsls	r3, r3, #7
 8006312:	4413      	add	r3, r2
 8006314:	3384      	adds	r3, #132	; 0x84
 8006316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	01db      	lsls	r3, r3, #7
 8006322:	4413      	add	r3, r2
 8006324:	3384      	adds	r3, #132	; 0x84
 8006326:	461a      	mov	r2, r3
 8006328:	2300      	movs	r3, #0
 800632a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	01db      	lsls	r3, r3, #7
 8006336:	4413      	add	r3, r2
 8006338:	3384      	adds	r3, #132	; 0x84
 800633a:	461a      	mov	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d102      	bne.n	8006350 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800634a:	2304      	movs	r3, #4
 800634c:	61fb      	str	r3, [r7, #28]
 800634e:	e01b      	b.n	8006388 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d102      	bne.n	800635e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006358:	2303      	movs	r3, #3
 800635a:	61fb      	str	r3, [r7, #28]
 800635c:	e014      	b.n	8006388 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	2b04      	cmp	r3, #4
 8006364:	d00b      	beq.n	800637e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800636a:	2b02      	cmp	r3, #2
 800636c:	d007      	beq.n	800637e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006372:	2b03      	cmp	r3, #3
 8006374:	d003      	beq.n	800637e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800637a:	2b07      	cmp	r3, #7
 800637c:	d102      	bne.n	8006384 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800637e:	2302      	movs	r3, #2
 8006380:	61fb      	str	r3, [r7, #28]
 8006382:	e001      	b.n	8006388 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006384:	2301      	movs	r3, #1
 8006386:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	01db      	lsls	r3, r3, #7
 8006392:	4413      	add	r3, r2
 8006394:	3384      	adds	r3, #132	; 0x84
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	6812      	ldr	r2, [r2, #0]
 800639c:	4611      	mov	r1, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	01d2      	lsls	r2, r2, #7
 80063a2:	440a      	add	r2, r1
 80063a4:	3284      	adds	r2, #132	; 0x84
 80063a6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80063aa:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	fb02 f303 	mul.w	r3, r2, r3
 80063b6:	041a      	lsls	r2, r3, #16
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	6859      	ldr	r1, [r3, #4]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	1acb      	subs	r3, r1, r3
 80063c2:	69f9      	ldr	r1, [r7, #28]
 80063c4:	fb01 f303 	mul.w	r3, r1, r3
 80063c8:	3303      	adds	r3, #3
 80063ca:	68f9      	ldr	r1, [r7, #12]
 80063cc:	6809      	ldr	r1, [r1, #0]
 80063ce:	4608      	mov	r0, r1
 80063d0:	6879      	ldr	r1, [r7, #4]
 80063d2:	01c9      	lsls	r1, r1, #7
 80063d4:	4401      	add	r1, r0
 80063d6:	3184      	adds	r1, #132	; 0x84
 80063d8:	4313      	orrs	r3, r2
 80063da:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	461a      	mov	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	01db      	lsls	r3, r3, #7
 80063e6:	4413      	add	r3, r2
 80063e8:	3384      	adds	r3, #132	; 0x84
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	6812      	ldr	r2, [r2, #0]
 80063f0:	4611      	mov	r1, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	01d2      	lsls	r2, r2, #7
 80063f6:	440a      	add	r2, r1
 80063f8:	3284      	adds	r2, #132	; 0x84
 80063fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063fe:	f023 0307 	bic.w	r3, r3, #7
 8006402:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	01db      	lsls	r3, r3, #7
 800640e:	4413      	add	r3, r2
 8006410:	3384      	adds	r3, #132	; 0x84
 8006412:	461a      	mov	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	01db      	lsls	r3, r3, #7
 8006424:	4413      	add	r3, r2
 8006426:	3384      	adds	r3, #132	; 0x84
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	6812      	ldr	r2, [r2, #0]
 800642e:	4611      	mov	r1, r2
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	01d2      	lsls	r2, r2, #7
 8006434:	440a      	add	r2, r1
 8006436:	3284      	adds	r2, #132	; 0x84
 8006438:	f043 0301 	orr.w	r3, r3, #1
 800643c:	6013      	str	r3, [r2, #0]
}
 800643e:	bf00      	nop
 8006440:	3724      	adds	r7, #36	; 0x24
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e264      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d075      	beq.n	8006556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800646a:	4ba3      	ldr	r3, [pc, #652]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 030c 	and.w	r3, r3, #12
 8006472:	2b04      	cmp	r3, #4
 8006474:	d00c      	beq.n	8006490 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006476:	4ba0      	ldr	r3, [pc, #640]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800647e:	2b08      	cmp	r3, #8
 8006480:	d112      	bne.n	80064a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006482:	4b9d      	ldr	r3, [pc, #628]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800648e:	d10b      	bne.n	80064a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006490:	4b99      	ldr	r3, [pc, #612]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d05b      	beq.n	8006554 <HAL_RCC_OscConfig+0x108>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d157      	bne.n	8006554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e23f      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b0:	d106      	bne.n	80064c0 <HAL_RCC_OscConfig+0x74>
 80064b2:	4b91      	ldr	r3, [pc, #580]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a90      	ldr	r2, [pc, #576]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80064b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	e01d      	b.n	80064fc <HAL_RCC_OscConfig+0xb0>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064c8:	d10c      	bne.n	80064e4 <HAL_RCC_OscConfig+0x98>
 80064ca:	4b8b      	ldr	r3, [pc, #556]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a8a      	ldr	r2, [pc, #552]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80064d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	4b88      	ldr	r3, [pc, #544]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a87      	ldr	r2, [pc, #540]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80064dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	e00b      	b.n	80064fc <HAL_RCC_OscConfig+0xb0>
 80064e4:	4b84      	ldr	r3, [pc, #528]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a83      	ldr	r2, [pc, #524]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80064ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	4b81      	ldr	r3, [pc, #516]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a80      	ldr	r2, [pc, #512]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80064f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d013      	beq.n	800652c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006504:	f7fc f996 	bl	8002834 <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800650c:	f7fc f992 	bl	8002834 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b64      	cmp	r3, #100	; 0x64
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e204      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800651e:	4b76      	ldr	r3, [pc, #472]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0f0      	beq.n	800650c <HAL_RCC_OscConfig+0xc0>
 800652a:	e014      	b.n	8006556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652c:	f7fc f982 	bl	8002834 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006534:	f7fc f97e 	bl	8002834 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b64      	cmp	r3, #100	; 0x64
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e1f0      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006546:	4b6c      	ldr	r3, [pc, #432]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f0      	bne.n	8006534 <HAL_RCC_OscConfig+0xe8>
 8006552:	e000      	b.n	8006556 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d063      	beq.n	800662a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006562:	4b65      	ldr	r3, [pc, #404]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 030c 	and.w	r3, r3, #12
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800656e:	4b62      	ldr	r3, [pc, #392]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006576:	2b08      	cmp	r3, #8
 8006578:	d11c      	bne.n	80065b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800657a:	4b5f      	ldr	r3, [pc, #380]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d116      	bne.n	80065b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006586:	4b5c      	ldr	r3, [pc, #368]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <HAL_RCC_OscConfig+0x152>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d001      	beq.n	800659e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e1c4      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800659e:	4b56      	ldr	r3, [pc, #344]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	4952      	ldr	r1, [pc, #328]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065b2:	e03a      	b.n	800662a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d020      	beq.n	80065fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065bc:	4b4f      	ldr	r3, [pc, #316]	; (80066fc <HAL_RCC_OscConfig+0x2b0>)
 80065be:	2201      	movs	r2, #1
 80065c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c2:	f7fc f937 	bl	8002834 <HAL_GetTick>
 80065c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065ca:	f7fc f933 	bl	8002834 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e1a5      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065dc:	4b46      	ldr	r3, [pc, #280]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0f0      	beq.n	80065ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e8:	4b43      	ldr	r3, [pc, #268]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	4940      	ldr	r1, [pc, #256]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	600b      	str	r3, [r1, #0]
 80065fc:	e015      	b.n	800662a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065fe:	4b3f      	ldr	r3, [pc, #252]	; (80066fc <HAL_RCC_OscConfig+0x2b0>)
 8006600:	2200      	movs	r2, #0
 8006602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006604:	f7fc f916 	bl	8002834 <HAL_GetTick>
 8006608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800660a:	e008      	b.n	800661e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800660c:	f7fc f912 	bl	8002834 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d901      	bls.n	800661e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e184      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800661e:	4b36      	ldr	r3, [pc, #216]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1f0      	bne.n	800660c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0308 	and.w	r3, r3, #8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d030      	beq.n	8006698 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d016      	beq.n	800666c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800663e:	4b30      	ldr	r3, [pc, #192]	; (8006700 <HAL_RCC_OscConfig+0x2b4>)
 8006640:	2201      	movs	r2, #1
 8006642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006644:	f7fc f8f6 	bl	8002834 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800664c:	f7fc f8f2 	bl	8002834 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e164      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800665e:	4b26      	ldr	r3, [pc, #152]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 8006660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0f0      	beq.n	800664c <HAL_RCC_OscConfig+0x200>
 800666a:	e015      	b.n	8006698 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800666c:	4b24      	ldr	r3, [pc, #144]	; (8006700 <HAL_RCC_OscConfig+0x2b4>)
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006672:	f7fc f8df 	bl	8002834 <HAL_GetTick>
 8006676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006678:	e008      	b.n	800668c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800667a:	f7fc f8db 	bl	8002834 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e14d      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800668c:	4b1a      	ldr	r3, [pc, #104]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 800668e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1f0      	bne.n	800667a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 80a0 	beq.w	80067e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066a6:	2300      	movs	r3, #0
 80066a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066aa:	4b13      	ldr	r3, [pc, #76]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10f      	bne.n	80066d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066b6:	2300      	movs	r3, #0
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	4b0f      	ldr	r3, [pc, #60]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	4a0e      	ldr	r2, [pc, #56]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80066c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c4:	6413      	str	r3, [r2, #64]	; 0x40
 80066c6:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <HAL_RCC_OscConfig+0x2ac>)
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ce:	60bb      	str	r3, [r7, #8]
 80066d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066d2:	2301      	movs	r3, #1
 80066d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d6:	4b0b      	ldr	r3, [pc, #44]	; (8006704 <HAL_RCC_OscConfig+0x2b8>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d121      	bne.n	8006726 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066e2:	4b08      	ldr	r3, [pc, #32]	; (8006704 <HAL_RCC_OscConfig+0x2b8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a07      	ldr	r2, [pc, #28]	; (8006704 <HAL_RCC_OscConfig+0x2b8>)
 80066e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066ee:	f7fc f8a1 	bl	8002834 <HAL_GetTick>
 80066f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066f4:	e011      	b.n	800671a <HAL_RCC_OscConfig+0x2ce>
 80066f6:	bf00      	nop
 80066f8:	40023800 	.word	0x40023800
 80066fc:	42470000 	.word	0x42470000
 8006700:	42470e80 	.word	0x42470e80
 8006704:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006708:	f7fc f894 	bl	8002834 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e106      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800671a:	4b85      	ldr	r3, [pc, #532]	; (8006930 <HAL_RCC_OscConfig+0x4e4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f0      	beq.n	8006708 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d106      	bne.n	800673c <HAL_RCC_OscConfig+0x2f0>
 800672e:	4b81      	ldr	r3, [pc, #516]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	4a80      	ldr	r2, [pc, #512]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 8006734:	f043 0301 	orr.w	r3, r3, #1
 8006738:	6713      	str	r3, [r2, #112]	; 0x70
 800673a:	e01c      	b.n	8006776 <HAL_RCC_OscConfig+0x32a>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	2b05      	cmp	r3, #5
 8006742:	d10c      	bne.n	800675e <HAL_RCC_OscConfig+0x312>
 8006744:	4b7b      	ldr	r3, [pc, #492]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 8006746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006748:	4a7a      	ldr	r2, [pc, #488]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 800674a:	f043 0304 	orr.w	r3, r3, #4
 800674e:	6713      	str	r3, [r2, #112]	; 0x70
 8006750:	4b78      	ldr	r3, [pc, #480]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	4a77      	ldr	r2, [pc, #476]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 8006756:	f043 0301 	orr.w	r3, r3, #1
 800675a:	6713      	str	r3, [r2, #112]	; 0x70
 800675c:	e00b      	b.n	8006776 <HAL_RCC_OscConfig+0x32a>
 800675e:	4b75      	ldr	r3, [pc, #468]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 8006760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006762:	4a74      	ldr	r2, [pc, #464]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 8006764:	f023 0301 	bic.w	r3, r3, #1
 8006768:	6713      	str	r3, [r2, #112]	; 0x70
 800676a:	4b72      	ldr	r3, [pc, #456]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 800676c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676e:	4a71      	ldr	r2, [pc, #452]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 8006770:	f023 0304 	bic.w	r3, r3, #4
 8006774:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d015      	beq.n	80067aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677e:	f7fc f859 	bl	8002834 <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006784:	e00a      	b.n	800679c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006786:	f7fc f855 	bl	8002834 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	f241 3288 	movw	r2, #5000	; 0x1388
 8006794:	4293      	cmp	r3, r2
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e0c5      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800679c:	4b65      	ldr	r3, [pc, #404]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 800679e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0ee      	beq.n	8006786 <HAL_RCC_OscConfig+0x33a>
 80067a8:	e014      	b.n	80067d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067aa:	f7fc f843 	bl	8002834 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067b0:	e00a      	b.n	80067c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067b2:	f7fc f83f 	bl	8002834 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e0af      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067c8:	4b5a      	ldr	r3, [pc, #360]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 80067ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1ee      	bne.n	80067b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d105      	bne.n	80067e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067da:	4b56      	ldr	r3, [pc, #344]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	4a55      	ldr	r2, [pc, #340]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 80067e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 809b 	beq.w	8006926 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067f0:	4b50      	ldr	r3, [pc, #320]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 030c 	and.w	r3, r3, #12
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d05c      	beq.n	80068b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d141      	bne.n	8006888 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006804:	4b4c      	ldr	r3, [pc, #304]	; (8006938 <HAL_RCC_OscConfig+0x4ec>)
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680a:	f7fc f813 	bl	8002834 <HAL_GetTick>
 800680e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006810:	e008      	b.n	8006824 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006812:	f7fc f80f 	bl	8002834 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e081      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006824:	4b43      	ldr	r3, [pc, #268]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1f0      	bne.n	8006812 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	69da      	ldr	r2, [r3, #28]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	431a      	orrs	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	019b      	lsls	r3, r3, #6
 8006840:	431a      	orrs	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	085b      	lsrs	r3, r3, #1
 8006848:	3b01      	subs	r3, #1
 800684a:	041b      	lsls	r3, r3, #16
 800684c:	431a      	orrs	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006852:	061b      	lsls	r3, r3, #24
 8006854:	4937      	ldr	r1, [pc, #220]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 8006856:	4313      	orrs	r3, r2
 8006858:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800685a:	4b37      	ldr	r3, [pc, #220]	; (8006938 <HAL_RCC_OscConfig+0x4ec>)
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006860:	f7fb ffe8 	bl	8002834 <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006868:	f7fb ffe4 	bl	8002834 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e056      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800687a:	4b2e      	ldr	r3, [pc, #184]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0f0      	beq.n	8006868 <HAL_RCC_OscConfig+0x41c>
 8006886:	e04e      	b.n	8006926 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006888:	4b2b      	ldr	r3, [pc, #172]	; (8006938 <HAL_RCC_OscConfig+0x4ec>)
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800688e:	f7fb ffd1 	bl	8002834 <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006894:	e008      	b.n	80068a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006896:	f7fb ffcd 	bl	8002834 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e03f      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068a8:	4b22      	ldr	r3, [pc, #136]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1f0      	bne.n	8006896 <HAL_RCC_OscConfig+0x44a>
 80068b4:	e037      	b.n	8006926 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e032      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068c2:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <HAL_RCC_OscConfig+0x4e8>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d028      	beq.n	8006922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068da:	429a      	cmp	r2, r3
 80068dc:	d121      	bne.n	8006922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d11a      	bne.n	8006922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068f2:	4013      	ands	r3, r2
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d111      	bne.n	8006922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	085b      	lsrs	r3, r3, #1
 800690a:	3b01      	subs	r3, #1
 800690c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800690e:	429a      	cmp	r2, r3
 8006910:	d107      	bne.n	8006922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800691e:	429a      	cmp	r2, r3
 8006920:	d001      	beq.n	8006926 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40007000 	.word	0x40007000
 8006934:	40023800 	.word	0x40023800
 8006938:	42470060 	.word	0x42470060

0800693c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e0cc      	b.n	8006aea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006950:	4b68      	ldr	r3, [pc, #416]	; (8006af4 <HAL_RCC_ClockConfig+0x1b8>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d90c      	bls.n	8006978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800695e:	4b65      	ldr	r3, [pc, #404]	; (8006af4 <HAL_RCC_ClockConfig+0x1b8>)
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006966:	4b63      	ldr	r3, [pc, #396]	; (8006af4 <HAL_RCC_ClockConfig+0x1b8>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 030f 	and.w	r3, r3, #15
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	d001      	beq.n	8006978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e0b8      	b.n	8006aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d020      	beq.n	80069c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b00      	cmp	r3, #0
 800698e:	d005      	beq.n	800699c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006990:	4b59      	ldr	r3, [pc, #356]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	4a58      	ldr	r2, [pc, #352]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 8006996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800699a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069a8:	4b53      	ldr	r3, [pc, #332]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	4a52      	ldr	r2, [pc, #328]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 80069ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069b4:	4b50      	ldr	r3, [pc, #320]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	494d      	ldr	r1, [pc, #308]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d044      	beq.n	8006a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d107      	bne.n	80069ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069da:	4b47      	ldr	r3, [pc, #284]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d119      	bne.n	8006a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e07f      	b.n	8006aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d003      	beq.n	80069fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d107      	bne.n	8006a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069fa:	4b3f      	ldr	r3, [pc, #252]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d109      	bne.n	8006a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e06f      	b.n	8006aea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a0a:	4b3b      	ldr	r3, [pc, #236]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e067      	b.n	8006aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a1a:	4b37      	ldr	r3, [pc, #220]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f023 0203 	bic.w	r2, r3, #3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	4934      	ldr	r1, [pc, #208]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a2c:	f7fb ff02 	bl	8002834 <HAL_GetTick>
 8006a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a32:	e00a      	b.n	8006a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a34:	f7fb fefe 	bl	8002834 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e04f      	b.n	8006aea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a4a:	4b2b      	ldr	r3, [pc, #172]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f003 020c 	and.w	r2, r3, #12
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d1eb      	bne.n	8006a34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a5c:	4b25      	ldr	r3, [pc, #148]	; (8006af4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d20c      	bcs.n	8006a84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a6a:	4b22      	ldr	r3, [pc, #136]	; (8006af4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a72:	4b20      	ldr	r3, [pc, #128]	; (8006af4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e032      	b.n	8006aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d008      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a90:	4b19      	ldr	r3, [pc, #100]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	4916      	ldr	r1, [pc, #88]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0308 	and.w	r3, r3, #8
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006aae:	4b12      	ldr	r3, [pc, #72]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	490e      	ldr	r1, [pc, #56]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ac2:	f000 f821 	bl	8006b08 <HAL_RCC_GetSysClockFreq>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <HAL_RCC_ClockConfig+0x1bc>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	091b      	lsrs	r3, r3, #4
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	490a      	ldr	r1, [pc, #40]	; (8006afc <HAL_RCC_ClockConfig+0x1c0>)
 8006ad4:	5ccb      	ldrb	r3, [r1, r3]
 8006ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8006ada:	4a09      	ldr	r2, [pc, #36]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ade:	4b09      	ldr	r3, [pc, #36]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fb fcd6 	bl	8002494 <HAL_InitTick>

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	40023c00 	.word	0x40023c00
 8006af8:	40023800 	.word	0x40023800
 8006afc:	08010564 	.word	0x08010564
 8006b00:	20000000 	.word	0x20000000
 8006b04:	20000004 	.word	0x20000004

08006b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	607b      	str	r3, [r7, #4]
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	2300      	movs	r3, #0
 8006b1a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b20:	4b67      	ldr	r3, [pc, #412]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f003 030c 	and.w	r3, r3, #12
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d00d      	beq.n	8006b48 <HAL_RCC_GetSysClockFreq+0x40>
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	f200 80bd 	bhi.w	8006cac <HAL_RCC_GetSysClockFreq+0x1a4>
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <HAL_RCC_GetSysClockFreq+0x34>
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d003      	beq.n	8006b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b3a:	e0b7      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b3c:	4b61      	ldr	r3, [pc, #388]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006b3e:	60bb      	str	r3, [r7, #8]
       break;
 8006b40:	e0b7      	b.n	8006cb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b42:	4b61      	ldr	r3, [pc, #388]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006b44:	60bb      	str	r3, [r7, #8]
      break;
 8006b46:	e0b4      	b.n	8006cb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b48:	4b5d      	ldr	r3, [pc, #372]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b52:	4b5b      	ldr	r3, [pc, #364]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d04d      	beq.n	8006bfa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b5e:	4b58      	ldr	r3, [pc, #352]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	099b      	lsrs	r3, r3, #6
 8006b64:	461a      	mov	r2, r3
 8006b66:	f04f 0300 	mov.w	r3, #0
 8006b6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b6e:	f04f 0100 	mov.w	r1, #0
 8006b72:	ea02 0800 	and.w	r8, r2, r0
 8006b76:	ea03 0901 	and.w	r9, r3, r1
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	f04f 0300 	mov.w	r3, #0
 8006b86:	014b      	lsls	r3, r1, #5
 8006b88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b8c:	0142      	lsls	r2, r0, #5
 8006b8e:	4610      	mov	r0, r2
 8006b90:	4619      	mov	r1, r3
 8006b92:	ebb0 0008 	subs.w	r0, r0, r8
 8006b96:	eb61 0109 	sbc.w	r1, r1, r9
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	f04f 0300 	mov.w	r3, #0
 8006ba2:	018b      	lsls	r3, r1, #6
 8006ba4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006ba8:	0182      	lsls	r2, r0, #6
 8006baa:	1a12      	subs	r2, r2, r0
 8006bac:	eb63 0301 	sbc.w	r3, r3, r1
 8006bb0:	f04f 0000 	mov.w	r0, #0
 8006bb4:	f04f 0100 	mov.w	r1, #0
 8006bb8:	00d9      	lsls	r1, r3, #3
 8006bba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bbe:	00d0      	lsls	r0, r2, #3
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	eb12 0208 	adds.w	r2, r2, r8
 8006bc8:	eb43 0309 	adc.w	r3, r3, r9
 8006bcc:	f04f 0000 	mov.w	r0, #0
 8006bd0:	f04f 0100 	mov.w	r1, #0
 8006bd4:	0259      	lsls	r1, r3, #9
 8006bd6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006bda:	0250      	lsls	r0, r2, #9
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4610      	mov	r0, r2
 8006be2:	4619      	mov	r1, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	461a      	mov	r2, r3
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	f7f9 ffd6 	bl	8000b9c <__aeabi_uldivmod>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	e04a      	b.n	8006c90 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bfa:	4b31      	ldr	r3, [pc, #196]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	099b      	lsrs	r3, r3, #6
 8006c00:	461a      	mov	r2, r3
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006c0a:	f04f 0100 	mov.w	r1, #0
 8006c0e:	ea02 0400 	and.w	r4, r2, r0
 8006c12:	ea03 0501 	and.w	r5, r3, r1
 8006c16:	4620      	mov	r0, r4
 8006c18:	4629      	mov	r1, r5
 8006c1a:	f04f 0200 	mov.w	r2, #0
 8006c1e:	f04f 0300 	mov.w	r3, #0
 8006c22:	014b      	lsls	r3, r1, #5
 8006c24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c28:	0142      	lsls	r2, r0, #5
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	1b00      	subs	r0, r0, r4
 8006c30:	eb61 0105 	sbc.w	r1, r1, r5
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	f04f 0300 	mov.w	r3, #0
 8006c3c:	018b      	lsls	r3, r1, #6
 8006c3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006c42:	0182      	lsls	r2, r0, #6
 8006c44:	1a12      	subs	r2, r2, r0
 8006c46:	eb63 0301 	sbc.w	r3, r3, r1
 8006c4a:	f04f 0000 	mov.w	r0, #0
 8006c4e:	f04f 0100 	mov.w	r1, #0
 8006c52:	00d9      	lsls	r1, r3, #3
 8006c54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c58:	00d0      	lsls	r0, r2, #3
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	1912      	adds	r2, r2, r4
 8006c60:	eb45 0303 	adc.w	r3, r5, r3
 8006c64:	f04f 0000 	mov.w	r0, #0
 8006c68:	f04f 0100 	mov.w	r1, #0
 8006c6c:	0299      	lsls	r1, r3, #10
 8006c6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006c72:	0290      	lsls	r0, r2, #10
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4610      	mov	r0, r2
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f04f 0300 	mov.w	r3, #0
 8006c84:	f7f9 ff8a 	bl	8000b9c <__aeabi_uldivmod>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c90:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	0c1b      	lsrs	r3, r3, #16
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca8:	60bb      	str	r3, [r7, #8]
      break;
 8006caa:	e002      	b.n	8006cb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cac:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006cae:	60bb      	str	r3, [r7, #8]
      break;
 8006cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40023800 	.word	0x40023800
 8006cc4:	00f42400 	.word	0x00f42400
 8006cc8:	007a1200 	.word	0x007a1200

08006ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cd0:	4b03      	ldr	r3, [pc, #12]	; (8006ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	20000000 	.word	0x20000000

08006ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ce8:	f7ff fff0 	bl	8006ccc <HAL_RCC_GetHCLKFreq>
 8006cec:	4602      	mov	r2, r0
 8006cee:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	0a9b      	lsrs	r3, r3, #10
 8006cf4:	f003 0307 	and.w	r3, r3, #7
 8006cf8:	4903      	ldr	r1, [pc, #12]	; (8006d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cfa:	5ccb      	ldrb	r3, [r1, r3]
 8006cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	40023800 	.word	0x40023800
 8006d08:	08010574 	.word	0x08010574

08006d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d10:	f7ff ffdc 	bl	8006ccc <HAL_RCC_GetHCLKFreq>
 8006d14:	4602      	mov	r2, r0
 8006d16:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	0b5b      	lsrs	r3, r3, #13
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	4903      	ldr	r1, [pc, #12]	; (8006d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d22:	5ccb      	ldrb	r3, [r1, r3]
 8006d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	40023800 	.word	0x40023800
 8006d30:	08010574 	.word	0x08010574

08006d34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	220f      	movs	r2, #15
 8006d42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d44:	4b12      	ldr	r3, [pc, #72]	; (8006d90 <HAL_RCC_GetClockConfig+0x5c>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f003 0203 	and.w	r2, r3, #3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d50:	4b0f      	ldr	r3, [pc, #60]	; (8006d90 <HAL_RCC_GetClockConfig+0x5c>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d5c:	4b0c      	ldr	r3, [pc, #48]	; (8006d90 <HAL_RCC_GetClockConfig+0x5c>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006d68:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <HAL_RCC_GetClockConfig+0x5c>)
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	08db      	lsrs	r3, r3, #3
 8006d6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d76:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <HAL_RCC_GetClockConfig+0x60>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 020f 	and.w	r2, r3, #15
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	601a      	str	r2, [r3, #0]
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40023800 	.word	0x40023800
 8006d94:	40023c00 	.word	0x40023c00

08006d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10b      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d105      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d075      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006dcc:	4bad      	ldr	r3, [pc, #692]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006dd2:	f7fb fd2f 	bl	8002834 <HAL_GetTick>
 8006dd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006dd8:	e008      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006dda:	f7fb fd2b 	bl	8002834 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d901      	bls.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e18b      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006dec:	4ba6      	ldr	r3, [pc, #664]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1f0      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d009      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	019a      	lsls	r2, r3, #6
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	071b      	lsls	r3, r3, #28
 8006e10:	499d      	ldr	r1, [pc, #628]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01f      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e24:	4b98      	ldr	r3, [pc, #608]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e2a:	0f1b      	lsrs	r3, r3, #28
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	019a      	lsls	r2, r3, #6
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	061b      	lsls	r3, r3, #24
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	071b      	lsls	r3, r3, #28
 8006e44:	4990      	ldr	r1, [pc, #576]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006e4c:	4b8e      	ldr	r3, [pc, #568]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e52:	f023 021f 	bic.w	r2, r3, #31
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	498a      	ldr	r1, [pc, #552]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00d      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	019a      	lsls	r2, r3, #6
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	061b      	lsls	r3, r3, #24
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	071b      	lsls	r3, r3, #28
 8006e84:	4980      	ldr	r1, [pc, #512]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e8c:	4b7d      	ldr	r3, [pc, #500]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e92:	f7fb fccf 	bl	8002834 <HAL_GetTick>
 8006e96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e98:	e008      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e9a:	f7fb fccb 	bl	8002834 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e12b      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006eac:	4b76      	ldr	r3, [pc, #472]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0f0      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d105      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d079      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ed0:	4b6e      	ldr	r3, [pc, #440]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ed6:	f7fb fcad 	bl	8002834 <HAL_GetTick>
 8006eda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006edc:	e008      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006ede:	f7fb fca9 	bl	8002834 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e109      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ef0:	4b65      	ldr	r3, [pc, #404]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006efc:	d0ef      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d020      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f0a:	4b5f      	ldr	r3, [pc, #380]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f10:	0f1b      	lsrs	r3, r3, #28
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	019a      	lsls	r2, r3, #6
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	061b      	lsls	r3, r3, #24
 8006f24:	431a      	orrs	r2, r3
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	071b      	lsls	r3, r3, #28
 8006f2a:	4957      	ldr	r1, [pc, #348]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f32:	4b55      	ldr	r3, [pc, #340]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	021b      	lsls	r3, r3, #8
 8006f44:	4950      	ldr	r1, [pc, #320]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0308 	and.w	r3, r3, #8
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01e      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f58:	4b4b      	ldr	r3, [pc, #300]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f5e:	0e1b      	lsrs	r3, r3, #24
 8006f60:	f003 030f 	and.w	r3, r3, #15
 8006f64:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	019a      	lsls	r2, r3, #6
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	061b      	lsls	r3, r3, #24
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	071b      	lsls	r3, r3, #28
 8006f78:	4943      	ldr	r1, [pc, #268]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006f80:	4b41      	ldr	r3, [pc, #260]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	493e      	ldr	r1, [pc, #248]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006f96:	4b3d      	ldr	r3, [pc, #244]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f98:	2201      	movs	r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f9c:	f7fb fc4a 	bl	8002834 <HAL_GetTick>
 8006fa0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006fa4:	f7fb fc46 	bl	8002834 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e0a6      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006fb6:	4b34      	ldr	r3, [pc, #208]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fc2:	d1ef      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 808d 	beq.w	80070ec <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	4b2c      	ldr	r3, [pc, #176]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	4a2b      	ldr	r2, [pc, #172]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8006fe2:	4b29      	ldr	r3, [pc, #164]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006fee:	4b28      	ldr	r3, [pc, #160]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a27      	ldr	r2, [pc, #156]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ffa:	f7fb fc1b 	bl	8002834 <HAL_GetTick>
 8006ffe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007000:	e008      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007002:	f7fb fc17 	bl	8002834 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d901      	bls.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e077      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007014:	4b1e      	ldr	r3, [pc, #120]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0f0      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007020:	4b19      	ldr	r3, [pc, #100]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007028:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d039      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	429a      	cmp	r2, r3
 800703c:	d032      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800703e:	4b12      	ldr	r3, [pc, #72]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007046:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007048:	4b12      	ldr	r3, [pc, #72]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800704a:	2201      	movs	r2, #1
 800704c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800704e:	4b11      	ldr	r3, [pc, #68]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007054:	4a0c      	ldr	r2, [pc, #48]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800705a:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800705c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b01      	cmp	r3, #1
 8007064:	d11e      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007066:	f7fb fbe5 	bl	8002834 <HAL_GetTick>
 800706a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800706c:	e014      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800706e:	f7fb fbe1 	bl	8002834 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	f241 3288 	movw	r2, #5000	; 0x1388
 800707c:	4293      	cmp	r3, r2
 800707e:	d90b      	bls.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e03f      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007084:	42470068 	.word	0x42470068
 8007088:	40023800 	.word	0x40023800
 800708c:	42470070 	.word	0x42470070
 8007090:	40007000 	.word	0x40007000
 8007094:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007098:	4b1c      	ldr	r3, [pc, #112]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800709a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0e4      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070b0:	d10d      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x336>
 80070b2:	4b16      	ldr	r3, [pc, #88]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80070c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c6:	4911      	ldr	r1, [pc, #68]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	608b      	str	r3, [r1, #8]
 80070cc:	e005      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x342>
 80070ce:	4b0f      	ldr	r3, [pc, #60]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	4a0e      	ldr	r2, [pc, #56]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070d8:	6093      	str	r3, [r2, #8]
 80070da:	4b0c      	ldr	r3, [pc, #48]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070e6:	4909      	ldr	r1, [pc, #36]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80070fe:	4b04      	ldr	r3, [pc, #16]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007100:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40023800 	.word	0x40023800
 8007110:	424711e0 	.word	0x424711e0

08007114 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e025      	b.n	8007174 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d106      	bne.n	8007142 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7fb f99f 	bl	8002480 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2202      	movs	r2, #2
 8007146:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3304      	adds	r3, #4
 8007152:	4619      	mov	r1, r3
 8007154:	4610      	mov	r0, r2
 8007156:	f001 f831 	bl	80081bc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6818      	ldr	r0, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	461a      	mov	r2, r3
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	f001 f89c 	bl	80082a2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e07b      	b.n	8007286 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	2b00      	cmp	r3, #0
 8007194:	d108      	bne.n	80071a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800719e:	d009      	beq.n	80071b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	61da      	str	r2, [r3, #28]
 80071a6:	e005      	b.n	80071b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fb f812 	bl	80021f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071fc:	431a      	orrs	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007206:	431a      	orrs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007224:	431a      	orrs	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007238:	ea42 0103 	orr.w	r1, r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	0c1b      	lsrs	r3, r3, #16
 8007252:	f003 0104 	and.w	r1, r3, #4
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	f003 0210 	and.w	r2, r3, #16
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69da      	ldr	r2, [r3, #28]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007274:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e041      	b.n	8007324 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d106      	bne.n	80072ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7fa ffe7 	bl	8002288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2202      	movs	r2, #2
 80072be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3304      	adds	r3, #4
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f000 fa95 	bl	80077fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b01      	cmp	r3, #1
 800733e:	d001      	beq.n	8007344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e04e      	b.n	80073e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0201 	orr.w	r2, r2, #1
 800735a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a23      	ldr	r2, [pc, #140]	; (80073f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d022      	beq.n	80073ac <HAL_TIM_Base_Start_IT+0x80>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736e:	d01d      	beq.n	80073ac <HAL_TIM_Base_Start_IT+0x80>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1f      	ldr	r2, [pc, #124]	; (80073f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d018      	beq.n	80073ac <HAL_TIM_Base_Start_IT+0x80>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a1e      	ldr	r2, [pc, #120]	; (80073f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d013      	beq.n	80073ac <HAL_TIM_Base_Start_IT+0x80>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <HAL_TIM_Base_Start_IT+0xd0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d00e      	beq.n	80073ac <HAL_TIM_Base_Start_IT+0x80>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a1b      	ldr	r2, [pc, #108]	; (8007400 <HAL_TIM_Base_Start_IT+0xd4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d009      	beq.n	80073ac <HAL_TIM_Base_Start_IT+0x80>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a19      	ldr	r2, [pc, #100]	; (8007404 <HAL_TIM_Base_Start_IT+0xd8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d004      	beq.n	80073ac <HAL_TIM_Base_Start_IT+0x80>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a18      	ldr	r2, [pc, #96]	; (8007408 <HAL_TIM_Base_Start_IT+0xdc>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d111      	bne.n	80073d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b06      	cmp	r3, #6
 80073bc:	d010      	beq.n	80073e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0201 	orr.w	r2, r2, #1
 80073cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ce:	e007      	b.n	80073e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0201 	orr.w	r2, r2, #1
 80073de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	40010000 	.word	0x40010000
 80073f4:	40000400 	.word	0x40000400
 80073f8:	40000800 	.word	0x40000800
 80073fc:	40000c00 	.word	0x40000c00
 8007400:	40010400 	.word	0x40010400
 8007404:	40014000 	.word	0x40014000
 8007408:	40001800 	.word	0x40001800

0800740c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b02      	cmp	r3, #2
 8007420:	d122      	bne.n	8007468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b02      	cmp	r3, #2
 800742e:	d11b      	bne.n	8007468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0202 	mvn.w	r2, #2
 8007438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f9b5 	bl	80077be <HAL_TIM_IC_CaptureCallback>
 8007454:	e005      	b.n	8007462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f9a7 	bl	80077aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f9b8 	bl	80077d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f003 0304 	and.w	r3, r3, #4
 8007472:	2b04      	cmp	r3, #4
 8007474:	d122      	bne.n	80074bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b04      	cmp	r3, #4
 8007482:	d11b      	bne.n	80074bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f06f 0204 	mvn.w	r2, #4
 800748c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f98b 	bl	80077be <HAL_TIM_IC_CaptureCallback>
 80074a8:	e005      	b.n	80074b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f97d 	bl	80077aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f98e 	bl	80077d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	f003 0308 	and.w	r3, r3, #8
 80074c6:	2b08      	cmp	r3, #8
 80074c8:	d122      	bne.n	8007510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f003 0308 	and.w	r3, r3, #8
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d11b      	bne.n	8007510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f06f 0208 	mvn.w	r2, #8
 80074e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2204      	movs	r2, #4
 80074e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f961 	bl	80077be <HAL_TIM_IC_CaptureCallback>
 80074fc:	e005      	b.n	800750a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f953 	bl	80077aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f964 	bl	80077d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	f003 0310 	and.w	r3, r3, #16
 800751a:	2b10      	cmp	r3, #16
 800751c:	d122      	bne.n	8007564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f003 0310 	and.w	r3, r3, #16
 8007528:	2b10      	cmp	r3, #16
 800752a:	d11b      	bne.n	8007564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f06f 0210 	mvn.w	r2, #16
 8007534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2208      	movs	r2, #8
 800753a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f937 	bl	80077be <HAL_TIM_IC_CaptureCallback>
 8007550:	e005      	b.n	800755e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f929 	bl	80077aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f93a 	bl	80077d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b01      	cmp	r3, #1
 8007570:	d10e      	bne.n	8007590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b01      	cmp	r3, #1
 800757e:	d107      	bne.n	8007590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f06f 0201 	mvn.w	r2, #1
 8007588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fa fc0c 	bl	8001da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759a:	2b80      	cmp	r3, #128	; 0x80
 800759c:	d10e      	bne.n	80075bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a8:	2b80      	cmp	r3, #128	; 0x80
 80075aa:	d107      	bne.n	80075bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fae0 	bl	8007b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c6:	2b40      	cmp	r3, #64	; 0x40
 80075c8:	d10e      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d4:	2b40      	cmp	r3, #64	; 0x40
 80075d6:	d107      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f8ff 	bl	80077e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0320 	and.w	r3, r3, #32
 80075f2:	2b20      	cmp	r3, #32
 80075f4:	d10e      	bne.n	8007614 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f003 0320 	and.w	r3, r3, #32
 8007600:	2b20      	cmp	r3, #32
 8007602:	d107      	bne.n	8007614 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0220 	mvn.w	r2, #32
 800760c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 faaa 	bl	8007b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007630:	2b01      	cmp	r3, #1
 8007632:	d101      	bne.n	8007638 <HAL_TIM_ConfigClockSource+0x1c>
 8007634:	2302      	movs	r3, #2
 8007636:	e0b4      	b.n	80077a2 <HAL_TIM_ConfigClockSource+0x186>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800765e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007670:	d03e      	beq.n	80076f0 <HAL_TIM_ConfigClockSource+0xd4>
 8007672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007676:	f200 8087 	bhi.w	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 800767a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800767e:	f000 8086 	beq.w	800778e <HAL_TIM_ConfigClockSource+0x172>
 8007682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007686:	d87f      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 8007688:	2b70      	cmp	r3, #112	; 0x70
 800768a:	d01a      	beq.n	80076c2 <HAL_TIM_ConfigClockSource+0xa6>
 800768c:	2b70      	cmp	r3, #112	; 0x70
 800768e:	d87b      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 8007690:	2b60      	cmp	r3, #96	; 0x60
 8007692:	d050      	beq.n	8007736 <HAL_TIM_ConfigClockSource+0x11a>
 8007694:	2b60      	cmp	r3, #96	; 0x60
 8007696:	d877      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 8007698:	2b50      	cmp	r3, #80	; 0x50
 800769a:	d03c      	beq.n	8007716 <HAL_TIM_ConfigClockSource+0xfa>
 800769c:	2b50      	cmp	r3, #80	; 0x50
 800769e:	d873      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 80076a0:	2b40      	cmp	r3, #64	; 0x40
 80076a2:	d058      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x13a>
 80076a4:	2b40      	cmp	r3, #64	; 0x40
 80076a6:	d86f      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 80076a8:	2b30      	cmp	r3, #48	; 0x30
 80076aa:	d064      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x15a>
 80076ac:	2b30      	cmp	r3, #48	; 0x30
 80076ae:	d86b      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 80076b0:	2b20      	cmp	r3, #32
 80076b2:	d060      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x15a>
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d867      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d05c      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x15a>
 80076bc:	2b10      	cmp	r3, #16
 80076be:	d05a      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x15a>
 80076c0:	e062      	b.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6818      	ldr	r0, [r3, #0]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	6899      	ldr	r1, [r3, #8]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f000 f9ad 	bl	8007a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	609a      	str	r2, [r3, #8]
      break;
 80076ee:	e04f      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6818      	ldr	r0, [r3, #0]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	6899      	ldr	r1, [r3, #8]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f000 f996 	bl	8007a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007712:	609a      	str	r2, [r3, #8]
      break;
 8007714:	e03c      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6818      	ldr	r0, [r3, #0]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	6859      	ldr	r1, [r3, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	461a      	mov	r2, r3
 8007724:	f000 f90a 	bl	800793c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2150      	movs	r1, #80	; 0x50
 800772e:	4618      	mov	r0, r3
 8007730:	f000 f963 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 8007734:	e02c      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6859      	ldr	r1, [r3, #4]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	461a      	mov	r2, r3
 8007744:	f000 f929 	bl	800799a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2160      	movs	r1, #96	; 0x60
 800774e:	4618      	mov	r0, r3
 8007750:	f000 f953 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 8007754:	e01c      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6818      	ldr	r0, [r3, #0]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	6859      	ldr	r1, [r3, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	461a      	mov	r2, r3
 8007764:	f000 f8ea 	bl	800793c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2140      	movs	r1, #64	; 0x40
 800776e:	4618      	mov	r0, r3
 8007770:	f000 f943 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 8007774:	e00c      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4619      	mov	r1, r3
 8007780:	4610      	mov	r0, r2
 8007782:	f000 f93a 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 8007786:	e003      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	73fb      	strb	r3, [r7, #15]
      break;
 800778c:	e000      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800778e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077ee:	bf00      	nop
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
	...

080077fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a40      	ldr	r2, [pc, #256]	; (8007910 <TIM_Base_SetConfig+0x114>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d013      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800781a:	d00f      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a3d      	ldr	r2, [pc, #244]	; (8007914 <TIM_Base_SetConfig+0x118>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00b      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a3c      	ldr	r2, [pc, #240]	; (8007918 <TIM_Base_SetConfig+0x11c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d007      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a3b      	ldr	r2, [pc, #236]	; (800791c <TIM_Base_SetConfig+0x120>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d003      	beq.n	800783c <TIM_Base_SetConfig+0x40>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a3a      	ldr	r2, [pc, #232]	; (8007920 <TIM_Base_SetConfig+0x124>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d108      	bne.n	800784e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a2f      	ldr	r2, [pc, #188]	; (8007910 <TIM_Base_SetConfig+0x114>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d02b      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785c:	d027      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a2c      	ldr	r2, [pc, #176]	; (8007914 <TIM_Base_SetConfig+0x118>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d023      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a2b      	ldr	r2, [pc, #172]	; (8007918 <TIM_Base_SetConfig+0x11c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d01f      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a2a      	ldr	r2, [pc, #168]	; (800791c <TIM_Base_SetConfig+0x120>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d01b      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a29      	ldr	r2, [pc, #164]	; (8007920 <TIM_Base_SetConfig+0x124>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d017      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a28      	ldr	r2, [pc, #160]	; (8007924 <TIM_Base_SetConfig+0x128>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d013      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a27      	ldr	r2, [pc, #156]	; (8007928 <TIM_Base_SetConfig+0x12c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00f      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a26      	ldr	r2, [pc, #152]	; (800792c <TIM_Base_SetConfig+0x130>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00b      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a25      	ldr	r2, [pc, #148]	; (8007930 <TIM_Base_SetConfig+0x134>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d007      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a24      	ldr	r2, [pc, #144]	; (8007934 <TIM_Base_SetConfig+0x138>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d003      	beq.n	80078ae <TIM_Base_SetConfig+0xb2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a23      	ldr	r2, [pc, #140]	; (8007938 <TIM_Base_SetConfig+0x13c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d108      	bne.n	80078c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4313      	orrs	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	689a      	ldr	r2, [r3, #8]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a0a      	ldr	r2, [pc, #40]	; (8007910 <TIM_Base_SetConfig+0x114>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d003      	beq.n	80078f4 <TIM_Base_SetConfig+0xf8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a0c      	ldr	r2, [pc, #48]	; (8007920 <TIM_Base_SetConfig+0x124>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d103      	bne.n	80078fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	691a      	ldr	r2, [r3, #16]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	615a      	str	r2, [r3, #20]
}
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	40010000 	.word	0x40010000
 8007914:	40000400 	.word	0x40000400
 8007918:	40000800 	.word	0x40000800
 800791c:	40000c00 	.word	0x40000c00
 8007920:	40010400 	.word	0x40010400
 8007924:	40014000 	.word	0x40014000
 8007928:	40014400 	.word	0x40014400
 800792c:	40014800 	.word	0x40014800
 8007930:	40001800 	.word	0x40001800
 8007934:	40001c00 	.word	0x40001c00
 8007938:	40002000 	.word	0x40002000

0800793c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	f023 0201 	bic.w	r2, r3, #1
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	4313      	orrs	r3, r2
 8007970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f023 030a 	bic.w	r3, r3, #10
 8007978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	4313      	orrs	r3, r2
 8007980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	621a      	str	r2, [r3, #32]
}
 800798e:	bf00      	nop
 8007990:	371c      	adds	r7, #28
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800799a:	b480      	push	{r7}
 800799c:	b087      	sub	sp, #28
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	f023 0210 	bic.w	r2, r3, #16
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	031b      	lsls	r3, r3, #12
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	621a      	str	r2, [r3, #32]
}
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f043 0307 	orr.w	r3, r3, #7
 8007a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	609a      	str	r2, [r3, #8]
}
 8007a24:	bf00      	nop
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	021a      	lsls	r2, r3, #8
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	609a      	str	r2, [r3, #8]
}
 8007a64:	bf00      	nop
 8007a66:	371c      	adds	r7, #28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d101      	bne.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a84:	2302      	movs	r3, #2
 8007a86:	e05a      	b.n	8007b3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a21      	ldr	r2, [pc, #132]	; (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d022      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad4:	d01d      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a1d      	ldr	r2, [pc, #116]	; (8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d018      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1b      	ldr	r2, [pc, #108]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d013      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a1a      	ldr	r2, [pc, #104]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00e      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a18      	ldr	r2, [pc, #96]	; (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d009      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a17      	ldr	r2, [pc, #92]	; (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d004      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a15      	ldr	r2, [pc, #84]	; (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d10c      	bne.n	8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	40010000 	.word	0x40010000
 8007b50:	40000400 	.word	0x40000400
 8007b54:	40000800 	.word	0x40000800
 8007b58:	40000c00 	.word	0x40000c00
 8007b5c:	40010400 	.word	0x40010400
 8007b60:	40014000 	.word	0x40014000
 8007b64:	40001800 	.word	0x40001800

08007b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e03f      	b.n	8007c22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d106      	bne.n	8007bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7fa fb88 	bl	80022cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2224      	movs	r2, #36	; 0x24
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f929 	bl	8007e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	695a      	ldr	r2, [r3, #20]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b08a      	sub	sp, #40	; 0x28
 8007c2e:	af02      	add	r7, sp, #8
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	603b      	str	r3, [r7, #0]
 8007c36:	4613      	mov	r3, r2
 8007c38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d17c      	bne.n	8007d44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <HAL_UART_Transmit+0x2c>
 8007c50:	88fb      	ldrh	r3, [r7, #6]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e075      	b.n	8007d46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d101      	bne.n	8007c68 <HAL_UART_Transmit+0x3e>
 8007c64:	2302      	movs	r3, #2
 8007c66:	e06e      	b.n	8007d46 <HAL_UART_Transmit+0x11c>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2221      	movs	r2, #33	; 0x21
 8007c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c7e:	f7fa fdd9 	bl	8002834 <HAL_GetTick>
 8007c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	88fa      	ldrh	r2, [r7, #6]
 8007c88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	88fa      	ldrh	r2, [r7, #6]
 8007c8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c98:	d108      	bne.n	8007cac <HAL_UART_Transmit+0x82>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d104      	bne.n	8007cac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	61bb      	str	r3, [r7, #24]
 8007caa:	e003      	b.n	8007cb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007cbc:	e02a      	b.n	8007d14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2180      	movs	r1, #128	; 0x80
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 f840 	bl	8007d4e <UART_WaitOnFlagUntilTimeout>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e036      	b.n	8007d46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10b      	bne.n	8007cf6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	3302      	adds	r3, #2
 8007cf2:	61bb      	str	r3, [r7, #24]
 8007cf4:	e007      	b.n	8007d06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	781a      	ldrb	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	3301      	adds	r3, #1
 8007d04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1cf      	bne.n	8007cbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2200      	movs	r2, #0
 8007d26:	2140      	movs	r1, #64	; 0x40
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 f810 	bl	8007d4e <UART_WaitOnFlagUntilTimeout>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e006      	b.n	8007d46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	e000      	b.n	8007d46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d44:	2302      	movs	r3, #2
  }
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3720      	adds	r7, #32
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b090      	sub	sp, #64	; 0x40
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	603b      	str	r3, [r7, #0]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d5e:	e050      	b.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d66:	d04c      	beq.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d007      	beq.n	8007d7e <UART_WaitOnFlagUntilTimeout+0x30>
 8007d6e:	f7fa fd61 	bl	8002834 <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d241      	bcs.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	330c      	adds	r3, #12
 8007d84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	330c      	adds	r3, #12
 8007d9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d9e:	637a      	str	r2, [r7, #52]	; 0x34
 8007da0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007da4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e5      	bne.n	8007d7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3314      	adds	r3, #20
 8007db8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f023 0301 	bic.w	r3, r3, #1
 8007dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3314      	adds	r3, #20
 8007dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dd2:	623a      	str	r2, [r7, #32]
 8007dd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd6:	69f9      	ldr	r1, [r7, #28]
 8007dd8:	6a3a      	ldr	r2, [r7, #32]
 8007dda:	e841 2300 	strex	r3, r2, [r1]
 8007dde:	61bb      	str	r3, [r7, #24]
   return(result);
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1e5      	bne.n	8007db2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e00f      	b.n	8007e22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	bf0c      	ite	eq
 8007e12:	2301      	moveq	r3, #1
 8007e14:	2300      	movne	r3, #0
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	461a      	mov	r2, r3
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d09f      	beq.n	8007d60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3740      	adds	r7, #64	; 0x40
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e30:	b09f      	sub	sp, #124	; 0x7c
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e42:	68d9      	ldr	r1, [r3, #12]
 8007e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	ea40 0301 	orr.w	r3, r0, r1
 8007e4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	431a      	orrs	r2, r3
 8007e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	431a      	orrs	r2, r3
 8007e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e70:	f021 010c 	bic.w	r1, r1, #12
 8007e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e7a:	430b      	orrs	r3, r1
 8007e7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8a:	6999      	ldr	r1, [r3, #24]
 8007e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	ea40 0301 	orr.w	r3, r0, r1
 8007e94:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	4bc5      	ldr	r3, [pc, #788]	; (80081b0 <UART_SetConfig+0x384>)
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d004      	beq.n	8007eaa <UART_SetConfig+0x7e>
 8007ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	4bc3      	ldr	r3, [pc, #780]	; (80081b4 <UART_SetConfig+0x388>)
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d103      	bne.n	8007eb2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007eaa:	f7fe ff2f 	bl	8006d0c <HAL_RCC_GetPCLK2Freq>
 8007eae:	6778      	str	r0, [r7, #116]	; 0x74
 8007eb0:	e002      	b.n	8007eb8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007eb2:	f7fe ff17 	bl	8006ce4 <HAL_RCC_GetPCLK1Freq>
 8007eb6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec0:	f040 80b6 	bne.w	8008030 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec6:	461c      	mov	r4, r3
 8007ec8:	f04f 0500 	mov.w	r5, #0
 8007ecc:	4622      	mov	r2, r4
 8007ece:	462b      	mov	r3, r5
 8007ed0:	1891      	adds	r1, r2, r2
 8007ed2:	6439      	str	r1, [r7, #64]	; 0x40
 8007ed4:	415b      	adcs	r3, r3
 8007ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ed8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007edc:	1912      	adds	r2, r2, r4
 8007ede:	eb45 0303 	adc.w	r3, r5, r3
 8007ee2:	f04f 0000 	mov.w	r0, #0
 8007ee6:	f04f 0100 	mov.w	r1, #0
 8007eea:	00d9      	lsls	r1, r3, #3
 8007eec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ef0:	00d0      	lsls	r0, r2, #3
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	1911      	adds	r1, r2, r4
 8007ef8:	6639      	str	r1, [r7, #96]	; 0x60
 8007efa:	416b      	adcs	r3, r5
 8007efc:	667b      	str	r3, [r7, #100]	; 0x64
 8007efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	461a      	mov	r2, r3
 8007f04:	f04f 0300 	mov.w	r3, #0
 8007f08:	1891      	adds	r1, r2, r2
 8007f0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f0c:	415b      	adcs	r3, r3
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007f18:	f7f8 fe40 	bl	8000b9c <__aeabi_uldivmod>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4ba5      	ldr	r3, [pc, #660]	; (80081b8 <UART_SetConfig+0x38c>)
 8007f22:	fba3 2302 	umull	r2, r3, r3, r2
 8007f26:	095b      	lsrs	r3, r3, #5
 8007f28:	011e      	lsls	r6, r3, #4
 8007f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f2c:	461c      	mov	r4, r3
 8007f2e:	f04f 0500 	mov.w	r5, #0
 8007f32:	4622      	mov	r2, r4
 8007f34:	462b      	mov	r3, r5
 8007f36:	1891      	adds	r1, r2, r2
 8007f38:	6339      	str	r1, [r7, #48]	; 0x30
 8007f3a:	415b      	adcs	r3, r3
 8007f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007f42:	1912      	adds	r2, r2, r4
 8007f44:	eb45 0303 	adc.w	r3, r5, r3
 8007f48:	f04f 0000 	mov.w	r0, #0
 8007f4c:	f04f 0100 	mov.w	r1, #0
 8007f50:	00d9      	lsls	r1, r3, #3
 8007f52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f56:	00d0      	lsls	r0, r2, #3
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	1911      	adds	r1, r2, r4
 8007f5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f60:	416b      	adcs	r3, r5
 8007f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	f04f 0300 	mov.w	r3, #0
 8007f6e:	1891      	adds	r1, r2, r2
 8007f70:	62b9      	str	r1, [r7, #40]	; 0x28
 8007f72:	415b      	adcs	r3, r3
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007f7e:	f7f8 fe0d 	bl	8000b9c <__aeabi_uldivmod>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4b8c      	ldr	r3, [pc, #560]	; (80081b8 <UART_SetConfig+0x38c>)
 8007f88:	fba3 1302 	umull	r1, r3, r3, r2
 8007f8c:	095b      	lsrs	r3, r3, #5
 8007f8e:	2164      	movs	r1, #100	; 0x64
 8007f90:	fb01 f303 	mul.w	r3, r1, r3
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	3332      	adds	r3, #50	; 0x32
 8007f9a:	4a87      	ldr	r2, [pc, #540]	; (80081b8 <UART_SetConfig+0x38c>)
 8007f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fa8:	441e      	add	r6, r3
 8007faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fac:	4618      	mov	r0, r3
 8007fae:	f04f 0100 	mov.w	r1, #0
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	1894      	adds	r4, r2, r2
 8007fb8:	623c      	str	r4, [r7, #32]
 8007fba:	415b      	adcs	r3, r3
 8007fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007fbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fc2:	1812      	adds	r2, r2, r0
 8007fc4:	eb41 0303 	adc.w	r3, r1, r3
 8007fc8:	f04f 0400 	mov.w	r4, #0
 8007fcc:	f04f 0500 	mov.w	r5, #0
 8007fd0:	00dd      	lsls	r5, r3, #3
 8007fd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fd6:	00d4      	lsls	r4, r2, #3
 8007fd8:	4622      	mov	r2, r4
 8007fda:	462b      	mov	r3, r5
 8007fdc:	1814      	adds	r4, r2, r0
 8007fde:	653c      	str	r4, [r7, #80]	; 0x50
 8007fe0:	414b      	adcs	r3, r1
 8007fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8007fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	f04f 0300 	mov.w	r3, #0
 8007fee:	1891      	adds	r1, r2, r2
 8007ff0:	61b9      	str	r1, [r7, #24]
 8007ff2:	415b      	adcs	r3, r3
 8007ff4:	61fb      	str	r3, [r7, #28]
 8007ff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ffa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007ffe:	f7f8 fdcd 	bl	8000b9c <__aeabi_uldivmod>
 8008002:	4602      	mov	r2, r0
 8008004:	460b      	mov	r3, r1
 8008006:	4b6c      	ldr	r3, [pc, #432]	; (80081b8 <UART_SetConfig+0x38c>)
 8008008:	fba3 1302 	umull	r1, r3, r3, r2
 800800c:	095b      	lsrs	r3, r3, #5
 800800e:	2164      	movs	r1, #100	; 0x64
 8008010:	fb01 f303 	mul.w	r3, r1, r3
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	3332      	adds	r3, #50	; 0x32
 800801a:	4a67      	ldr	r2, [pc, #412]	; (80081b8 <UART_SetConfig+0x38c>)
 800801c:	fba2 2303 	umull	r2, r3, r2, r3
 8008020:	095b      	lsrs	r3, r3, #5
 8008022:	f003 0207 	and.w	r2, r3, #7
 8008026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4432      	add	r2, r6
 800802c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800802e:	e0b9      	b.n	80081a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008032:	461c      	mov	r4, r3
 8008034:	f04f 0500 	mov.w	r5, #0
 8008038:	4622      	mov	r2, r4
 800803a:	462b      	mov	r3, r5
 800803c:	1891      	adds	r1, r2, r2
 800803e:	6139      	str	r1, [r7, #16]
 8008040:	415b      	adcs	r3, r3
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008048:	1912      	adds	r2, r2, r4
 800804a:	eb45 0303 	adc.w	r3, r5, r3
 800804e:	f04f 0000 	mov.w	r0, #0
 8008052:	f04f 0100 	mov.w	r1, #0
 8008056:	00d9      	lsls	r1, r3, #3
 8008058:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800805c:	00d0      	lsls	r0, r2, #3
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	eb12 0804 	adds.w	r8, r2, r4
 8008066:	eb43 0905 	adc.w	r9, r3, r5
 800806a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	4618      	mov	r0, r3
 8008070:	f04f 0100 	mov.w	r1, #0
 8008074:	f04f 0200 	mov.w	r2, #0
 8008078:	f04f 0300 	mov.w	r3, #0
 800807c:	008b      	lsls	r3, r1, #2
 800807e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008082:	0082      	lsls	r2, r0, #2
 8008084:	4640      	mov	r0, r8
 8008086:	4649      	mov	r1, r9
 8008088:	f7f8 fd88 	bl	8000b9c <__aeabi_uldivmod>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4b49      	ldr	r3, [pc, #292]	; (80081b8 <UART_SetConfig+0x38c>)
 8008092:	fba3 2302 	umull	r2, r3, r3, r2
 8008096:	095b      	lsrs	r3, r3, #5
 8008098:	011e      	lsls	r6, r3, #4
 800809a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800809c:	4618      	mov	r0, r3
 800809e:	f04f 0100 	mov.w	r1, #0
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	1894      	adds	r4, r2, r2
 80080a8:	60bc      	str	r4, [r7, #8]
 80080aa:	415b      	adcs	r3, r3
 80080ac:	60fb      	str	r3, [r7, #12]
 80080ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080b2:	1812      	adds	r2, r2, r0
 80080b4:	eb41 0303 	adc.w	r3, r1, r3
 80080b8:	f04f 0400 	mov.w	r4, #0
 80080bc:	f04f 0500 	mov.w	r5, #0
 80080c0:	00dd      	lsls	r5, r3, #3
 80080c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80080c6:	00d4      	lsls	r4, r2, #3
 80080c8:	4622      	mov	r2, r4
 80080ca:	462b      	mov	r3, r5
 80080cc:	1814      	adds	r4, r2, r0
 80080ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80080d0:	414b      	adcs	r3, r1
 80080d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	4618      	mov	r0, r3
 80080da:	f04f 0100 	mov.w	r1, #0
 80080de:	f04f 0200 	mov.w	r2, #0
 80080e2:	f04f 0300 	mov.w	r3, #0
 80080e6:	008b      	lsls	r3, r1, #2
 80080e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80080ec:	0082      	lsls	r2, r0, #2
 80080ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80080f2:	f7f8 fd53 	bl	8000b9c <__aeabi_uldivmod>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4b2f      	ldr	r3, [pc, #188]	; (80081b8 <UART_SetConfig+0x38c>)
 80080fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008100:	095b      	lsrs	r3, r3, #5
 8008102:	2164      	movs	r1, #100	; 0x64
 8008104:	fb01 f303 	mul.w	r3, r1, r3
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	3332      	adds	r3, #50	; 0x32
 800810e:	4a2a      	ldr	r2, [pc, #168]	; (80081b8 <UART_SetConfig+0x38c>)
 8008110:	fba2 2303 	umull	r2, r3, r2, r3
 8008114:	095b      	lsrs	r3, r3, #5
 8008116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800811a:	441e      	add	r6, r3
 800811c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800811e:	4618      	mov	r0, r3
 8008120:	f04f 0100 	mov.w	r1, #0
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	1894      	adds	r4, r2, r2
 800812a:	603c      	str	r4, [r7, #0]
 800812c:	415b      	adcs	r3, r3
 800812e:	607b      	str	r3, [r7, #4]
 8008130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008134:	1812      	adds	r2, r2, r0
 8008136:	eb41 0303 	adc.w	r3, r1, r3
 800813a:	f04f 0400 	mov.w	r4, #0
 800813e:	f04f 0500 	mov.w	r5, #0
 8008142:	00dd      	lsls	r5, r3, #3
 8008144:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008148:	00d4      	lsls	r4, r2, #3
 800814a:	4622      	mov	r2, r4
 800814c:	462b      	mov	r3, r5
 800814e:	eb12 0a00 	adds.w	sl, r2, r0
 8008152:	eb43 0b01 	adc.w	fp, r3, r1
 8008156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	4618      	mov	r0, r3
 800815c:	f04f 0100 	mov.w	r1, #0
 8008160:	f04f 0200 	mov.w	r2, #0
 8008164:	f04f 0300 	mov.w	r3, #0
 8008168:	008b      	lsls	r3, r1, #2
 800816a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800816e:	0082      	lsls	r2, r0, #2
 8008170:	4650      	mov	r0, sl
 8008172:	4659      	mov	r1, fp
 8008174:	f7f8 fd12 	bl	8000b9c <__aeabi_uldivmod>
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	4b0e      	ldr	r3, [pc, #56]	; (80081b8 <UART_SetConfig+0x38c>)
 800817e:	fba3 1302 	umull	r1, r3, r3, r2
 8008182:	095b      	lsrs	r3, r3, #5
 8008184:	2164      	movs	r1, #100	; 0x64
 8008186:	fb01 f303 	mul.w	r3, r1, r3
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	011b      	lsls	r3, r3, #4
 800818e:	3332      	adds	r3, #50	; 0x32
 8008190:	4a09      	ldr	r2, [pc, #36]	; (80081b8 <UART_SetConfig+0x38c>)
 8008192:	fba2 2303 	umull	r2, r3, r2, r3
 8008196:	095b      	lsrs	r3, r3, #5
 8008198:	f003 020f 	and.w	r2, r3, #15
 800819c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4432      	add	r2, r6
 80081a2:	609a      	str	r2, [r3, #8]
}
 80081a4:	bf00      	nop
 80081a6:	377c      	adds	r7, #124	; 0x7c
 80081a8:	46bd      	mov	sp, r7
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ae:	bf00      	nop
 80081b0:	40011000 	.word	0x40011000
 80081b4:	40011400 	.word	0x40011400
 80081b8:	51eb851f 	.word	0x51eb851f

080081bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d029      	beq.n	800822a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80081e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081e6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80081f0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80081f6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80081fc:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008202:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008208:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800820e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008214:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800821a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	e034      	b.n	8008294 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008236:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008240:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008246:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	4313      	orrs	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800825a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800825e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008268:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800826e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008274:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800827a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008280:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	4313      	orrs	r3, r2
 8008286:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b087      	sub	sp, #28
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	60f8      	str	r0, [r7, #12]
 80082aa:	60b9      	str	r1, [r7, #8]
 80082ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d02e      	beq.n	800831a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80082c8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80082d8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	3b01      	subs	r3, #1
 80082e0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80082e2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80082ec:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	3b01      	subs	r3, #1
 80082f4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80082f6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008300:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	3b01      	subs	r3, #1
 8008308:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800830a:	4313      	orrs	r3, r2
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	4313      	orrs	r3, r2
 8008310:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	609a      	str	r2, [r3, #8]
 8008318:	e03b      	b.n	8008392 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008326:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800832a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	3b01      	subs	r3, #1
 8008332:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	3b01      	subs	r3, #1
 800833a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800833c:	4313      	orrs	r3, r2
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	4313      	orrs	r3, r2
 8008342:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008350:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	3b01      	subs	r3, #1
 800835e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008360:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	3b01      	subs	r3, #1
 8008368:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800836a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	3b01      	subs	r3, #1
 8008372:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008374:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	3b01      	subs	r3, #1
 800837c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800837e:	4313      	orrs	r3, r2
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	4313      	orrs	r3, r2
 8008384:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	371c      	adds	r7, #28
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083a0:	b084      	sub	sp, #16
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b084      	sub	sp, #16
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	f107 001c 	add.w	r0, r7, #28
 80083ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d122      	bne.n	80083fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80083cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80083e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d105      	bne.n	80083f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f9a0 	bl	8008738 <USB_CoreReset>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73fb      	strb	r3, [r7, #15]
 80083fc:	e01a      	b.n	8008434 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f994 	bl	8008738 <USB_CoreReset>
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008416:	2b00      	cmp	r3, #0
 8008418:	d106      	bne.n	8008428 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	639a      	str	r2, [r3, #56]	; 0x38
 8008426:	e005      	b.n	8008434 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	2b01      	cmp	r3, #1
 8008438:	d10b      	bne.n	8008452 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f043 0206 	orr.w	r2, r3, #6
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f043 0220 	orr.w	r2, r3, #32
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800845e:	b004      	add	sp, #16
 8008460:	4770      	bx	lr

08008462 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f043 0201 	orr.w	r2, r3, #1
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f023 0201 	bic.w	r2, r3, #1
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d115      	bne.n	80084f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80084d4:	2001      	movs	r0, #1
 80084d6:	f7fa f9b9 	bl	800284c <HAL_Delay>
      ms++;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3301      	adds	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f91a 	bl	800871a <USB_GetMode>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d01e      	beq.n	800852a <USB_SetCurrentMode+0x84>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b31      	cmp	r3, #49	; 0x31
 80084f0:	d9f0      	bls.n	80084d4 <USB_SetCurrentMode+0x2e>
 80084f2:	e01a      	b.n	800852a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d115      	bne.n	8008526 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008506:	2001      	movs	r0, #1
 8008508:	f7fa f9a0 	bl	800284c <HAL_Delay>
      ms++;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3301      	adds	r3, #1
 8008510:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f901 	bl	800871a <USB_GetMode>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d005      	beq.n	800852a <USB_SetCurrentMode+0x84>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b31      	cmp	r3, #49	; 0x31
 8008522:	d9f0      	bls.n	8008506 <USB_SetCurrentMode+0x60>
 8008524:	e001      	b.n	800852a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e005      	b.n	8008536 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b32      	cmp	r3, #50	; 0x32
 800852e:	d101      	bne.n	8008534 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e000      	b.n	8008536 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
	...

08008540 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	019b      	lsls	r3, r3, #6
 8008552:	f043 0220 	orr.w	r2, r3, #32
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3301      	adds	r3, #1
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	4a08      	ldr	r2, [pc, #32]	; (8008584 <USB_FlushTxFifo+0x44>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d901      	bls.n	800856a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e006      	b.n	8008578 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	f003 0320 	and.w	r3, r3, #32
 8008572:	2b20      	cmp	r3, #32
 8008574:	d0f1      	beq.n	800855a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	00030d40 	.word	0x00030d40

08008588 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008590:	2300      	movs	r3, #0
 8008592:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2210      	movs	r2, #16
 8008598:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3301      	adds	r3, #1
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	4a08      	ldr	r2, [pc, #32]	; (80085c4 <USB_FlushRxFifo+0x3c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d901      	bls.n	80085aa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e006      	b.n	80085b8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	f003 0310 	and.w	r3, r3, #16
 80085b2:	2b10      	cmp	r3, #16
 80085b4:	d0f1      	beq.n	800859a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	00030d40 	.word	0x00030d40

080085c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b089      	sub	sp, #36	; 0x24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	4611      	mov	r1, r2
 80085d4:	461a      	mov	r2, r3
 80085d6:	460b      	mov	r3, r1
 80085d8:	71fb      	strb	r3, [r7, #7]
 80085da:	4613      	mov	r3, r2
 80085dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80085e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d123      	bne.n	8008636 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80085ee:	88bb      	ldrh	r3, [r7, #4]
 80085f0:	3303      	adds	r3, #3
 80085f2:	089b      	lsrs	r3, r3, #2
 80085f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80085f6:	2300      	movs	r3, #0
 80085f8:	61bb      	str	r3, [r7, #24]
 80085fa:	e018      	b.n	800862e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	031a      	lsls	r2, r3, #12
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	4413      	add	r3, r2
 8008604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008608:	461a      	mov	r2, r3
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	3301      	adds	r3, #1
 8008614:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	3301      	adds	r3, #1
 800861a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	3301      	adds	r3, #1
 8008620:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	3301      	adds	r3, #1
 8008626:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	3301      	adds	r3, #1
 800862c:	61bb      	str	r3, [r7, #24]
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	429a      	cmp	r2, r3
 8008634:	d3e2      	bcc.n	80085fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3724      	adds	r7, #36	; 0x24
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008644:	b480      	push	{r7}
 8008646:	b08b      	sub	sp, #44	; 0x2c
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	4613      	mov	r3, r2
 8008650:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800865a:	88fb      	ldrh	r3, [r7, #6]
 800865c:	089b      	lsrs	r3, r3, #2
 800865e:	b29b      	uxth	r3, r3
 8008660:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008662:	88fb      	ldrh	r3, [r7, #6]
 8008664:	f003 0303 	and.w	r3, r3, #3
 8008668:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800866a:	2300      	movs	r3, #0
 800866c:	623b      	str	r3, [r7, #32]
 800866e:	e014      	b.n	800869a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	601a      	str	r2, [r3, #0]
    pDest++;
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	3301      	adds	r3, #1
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	3301      	adds	r3, #1
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	3301      	adds	r3, #1
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	3301      	adds	r3, #1
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	3301      	adds	r3, #1
 8008698:	623b      	str	r3, [r7, #32]
 800869a:	6a3a      	ldr	r2, [r7, #32]
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d3e6      	bcc.n	8008670 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80086a2:	8bfb      	ldrh	r3, [r7, #30]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d01e      	beq.n	80086e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b2:	461a      	mov	r2, r3
 80086b4:	f107 0310 	add.w	r3, r7, #16
 80086b8:	6812      	ldr	r2, [r2, #0]
 80086ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	00db      	lsls	r3, r3, #3
 80086c4:	fa22 f303 	lsr.w	r3, r2, r3
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	701a      	strb	r2, [r3, #0]
      i++;
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	3301      	adds	r3, #1
 80086d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	3301      	adds	r3, #1
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80086da:	8bfb      	ldrh	r3, [r7, #30]
 80086dc:	3b01      	subs	r3, #1
 80086de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80086e0:	8bfb      	ldrh	r3, [r7, #30]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1ea      	bne.n	80086bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	372c      	adds	r7, #44	; 0x2c
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4013      	ands	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800870c:	68fb      	ldr	r3, [r7, #12]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	f003 0301 	and.w	r3, r3, #1
}
 800872a:	4618      	mov	r0, r3
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
	...

08008738 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3301      	adds	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]
 800874a:	4a13      	ldr	r2, [pc, #76]	; (8008798 <USB_CoreReset+0x60>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d901      	bls.n	8008754 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e01a      	b.n	800878a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	daf3      	bge.n	8008744 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800875c:	2300      	movs	r3, #0
 800875e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	f043 0201 	orr.w	r2, r3, #1
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3301      	adds	r3, #1
 8008770:	60fb      	str	r3, [r7, #12]
 8008772:	4a09      	ldr	r2, [pc, #36]	; (8008798 <USB_CoreReset+0x60>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d901      	bls.n	800877c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e006      	b.n	800878a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b01      	cmp	r3, #1
 8008786:	d0f1      	beq.n	800876c <USB_CoreReset+0x34>

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	00030d40 	.word	0x00030d40

0800879c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800879c:	b084      	sub	sp, #16
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	f107 001c 	add.w	r0, r7, #28
 80087aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087b8:	461a      	mov	r2, r3
 80087ba:	2300      	movs	r3, #0
 80087bc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087da:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d018      	beq.n	8008820 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d10a      	bne.n	800880a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008802:	f043 0304 	orr.w	r3, r3, #4
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	e014      	b.n	8008834 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008818:	f023 0304 	bic.w	r3, r3, #4
 800881c:	6013      	str	r3, [r2, #0]
 800881e:	e009      	b.n	8008834 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800882e:	f023 0304 	bic.w	r3, r3, #4
 8008832:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008834:	2110      	movs	r1, #16
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7ff fe82 	bl	8008540 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff fea3 	bl	8008588 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008842:	2300      	movs	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	e015      	b.n	8008874 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	4413      	add	r3, r2
 8008850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008854:	461a      	mov	r2, r3
 8008856:	f04f 33ff 	mov.w	r3, #4294967295
 800885a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	4413      	add	r3, r2
 8008864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008868:	461a      	mov	r2, r3
 800886a:	2300      	movs	r3, #0
 800886c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3301      	adds	r3, #1
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	429a      	cmp	r2, r3
 800887a:	d3e5      	bcc.n	8008848 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f04f 32ff 	mov.w	r2, #4294967295
 8008888:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00b      	beq.n	80088ae <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800889c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a13      	ldr	r2, [pc, #76]	; (80088f0 <USB_HostInit+0x154>)
 80088a2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a13      	ldr	r2, [pc, #76]	; (80088f4 <USB_HostInit+0x158>)
 80088a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80088ac:	e009      	b.n	80088c2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2280      	movs	r2, #128	; 0x80
 80088b2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a10      	ldr	r2, [pc, #64]	; (80088f8 <USB_HostInit+0x15c>)
 80088b8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a0f      	ldr	r2, [pc, #60]	; (80088fc <USB_HostInit+0x160>)
 80088be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d105      	bne.n	80088d4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	f043 0210 	orr.w	r2, r3, #16
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	699a      	ldr	r2, [r3, #24]
 80088d8:	4b09      	ldr	r3, [pc, #36]	; (8008900 <USB_HostInit+0x164>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088ec:	b004      	add	sp, #16
 80088ee:	4770      	bx	lr
 80088f0:	01000200 	.word	0x01000200
 80088f4:	00e00300 	.word	0x00e00300
 80088f8:	00600080 	.word	0x00600080
 80088fc:	004000e0 	.word	0x004000e0
 8008900:	a3200008 	.word	0xa3200008

08008904 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008922:	f023 0303 	bic.w	r3, r3, #3
 8008926:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	78fb      	ldrb	r3, [r7, #3]
 8008932:	f003 0303 	and.w	r3, r3, #3
 8008936:	68f9      	ldr	r1, [r7, #12]
 8008938:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800893c:	4313      	orrs	r3, r2
 800893e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008940:	78fb      	ldrb	r3, [r7, #3]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d107      	bne.n	8008956 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800894c:	461a      	mov	r2, r3
 800894e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008952:	6053      	str	r3, [r2, #4]
 8008954:	e009      	b.n	800896a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	2b02      	cmp	r3, #2
 800895a:	d106      	bne.n	800896a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008962:	461a      	mov	r2, r3
 8008964:	f241 7370 	movw	r3, #6000	; 0x1770
 8008968:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008998:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80089a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80089a8:	2064      	movs	r0, #100	; 0x64
 80089aa:	f7f9 ff4f 	bl	800284c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80089b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80089bc:	200a      	movs	r0, #10
 80089be:	f7f9 ff45 	bl	800284c <HAL_Delay>

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80089f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d109      	bne.n	8008a10 <USB_DriveVbus+0x44>
 80089fc:	78fb      	ldrb	r3, [r7, #3]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d106      	bne.n	8008a10 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008a0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a0e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a1a:	d109      	bne.n	8008a30 <USB_DriveVbus+0x64>
 8008a1c:	78fb      	ldrb	r3, [r7, #3]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d106      	bne.n	8008a30 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a2e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b085      	sub	sp, #20
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	0c5b      	lsrs	r3, r3, #17
 8008a5c:	f003 0303 	and.w	r3, r3, #3
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	b29b      	uxth	r3, r3
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
	...

08008a90 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b088      	sub	sp, #32
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	4608      	mov	r0, r1
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	70fb      	strb	r3, [r7, #3]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	70bb      	strb	r3, [r7, #2]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008ab2:	78fb      	ldrb	r3, [r7, #3]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008ac6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	d87e      	bhi.n	8008bcc <USB_HC_Init+0x13c>
 8008ace:	a201      	add	r2, pc, #4	; (adr r2, 8008ad4 <USB_HC_Init+0x44>)
 8008ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad4:	08008ae5 	.word	0x08008ae5
 8008ad8:	08008b8f 	.word	0x08008b8f
 8008adc:	08008ae5 	.word	0x08008ae5
 8008ae0:	08008b51 	.word	0x08008b51
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	015a      	lsls	r2, r3, #5
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af0:	461a      	mov	r2, r3
 8008af2:	f240 439d 	movw	r3, #1181	; 0x49d
 8008af6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008af8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	da10      	bge.n	8008b22 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	78fa      	ldrb	r2, [r7, #3]
 8008b10:	0151      	lsls	r1, r2, #5
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	440a      	add	r2, r1
 8008b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b1e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008b20:	e057      	b.n	8008bd2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d051      	beq.n	8008bd2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008b2e:	78fb      	ldrb	r3, [r7, #3]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	78fa      	ldrb	r2, [r7, #3]
 8008b3e:	0151      	lsls	r1, r2, #5
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	440a      	add	r2, r1
 8008b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008b4c:	60d3      	str	r3, [r2, #12]
      break;
 8008b4e:	e040      	b.n	8008bd2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	f240 639d 	movw	r3, #1693	; 0x69d
 8008b62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008b64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	da34      	bge.n	8008bd6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	0151      	lsls	r1, r2, #5
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	440a      	add	r2, r1
 8008b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b8a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008b8c:	e023      	b.n	8008bd6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b8e:	78fb      	ldrb	r3, [r7, #3]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	f240 2325 	movw	r3, #549	; 0x225
 8008ba0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ba2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	da17      	bge.n	8008bda <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008baa:	78fb      	ldrb	r3, [r7, #3]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	78fa      	ldrb	r2, [r7, #3]
 8008bba:	0151      	lsls	r1, r2, #5
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	440a      	add	r2, r1
 8008bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bc4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008bc8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008bca:	e006      	b.n	8008bda <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	77fb      	strb	r3, [r7, #31]
      break;
 8008bd0:	e004      	b.n	8008bdc <USB_HC_Init+0x14c>
      break;
 8008bd2:	bf00      	nop
 8008bd4:	e002      	b.n	8008bdc <USB_HC_Init+0x14c>
      break;
 8008bd6:	bf00      	nop
 8008bd8:	e000      	b.n	8008bdc <USB_HC_Init+0x14c>
      break;
 8008bda:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008be2:	699a      	ldr	r2, [r3, #24]
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	f003 030f 	and.w	r3, r3, #15
 8008bea:	2101      	movs	r1, #1
 8008bec:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf0:	6939      	ldr	r1, [r7, #16]
 8008bf2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008c06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	da03      	bge.n	8008c16 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c12:	61bb      	str	r3, [r7, #24]
 8008c14:	e001      	b.n	8008c1a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7ff ff0f 	bl	8008a3e <USB_GetHostSpeed>
 8008c20:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008c22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d106      	bne.n	8008c38 <USB_HC_Init+0x1a8>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d003      	beq.n	8008c38 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c34:	617b      	str	r3, [r7, #20]
 8008c36:	e001      	b.n	8008c3c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c3c:	787b      	ldrb	r3, [r7, #1]
 8008c3e:	059b      	lsls	r3, r3, #22
 8008c40:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008c44:	78bb      	ldrb	r3, [r7, #2]
 8008c46:	02db      	lsls	r3, r3, #11
 8008c48:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c4c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008c4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c52:	049b      	lsls	r3, r3, #18
 8008c54:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008c58:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c5a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008c5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008c60:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c66:	78fb      	ldrb	r3, [r7, #3]
 8008c68:	0159      	lsls	r1, r3, #5
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	440b      	add	r3, r1
 8008c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c72:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008c78:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008c7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d10f      	bne.n	8008ca2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008c82:	78fb      	ldrb	r3, [r7, #3]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	78fa      	ldrb	r2, [r7, #3]
 8008c92:	0151      	lsls	r1, r2, #5
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	440a      	add	r2, r1
 8008c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ca0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3720      	adds	r7, #32
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b08c      	sub	sp, #48	; 0x30
 8008cb0:	af02      	add	r7, sp, #8
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	785b      	ldrb	r3, [r3, #1]
 8008cc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cc8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d02d      	beq.n	8008d32 <USB_HC_StartXfer+0x86>
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	791b      	ldrb	r3, [r3, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d129      	bne.n	8008d32 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008cde:	79fb      	ldrb	r3, [r7, #7]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d117      	bne.n	8008d14 <USB_HC_StartXfer+0x68>
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	79db      	ldrb	r3, [r3, #7]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <USB_HC_StartXfer+0x48>
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	79db      	ldrb	r3, [r3, #7]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d10f      	bne.n	8008d14 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	015a      	lsls	r2, r3, #5
 8008cf8:	6a3b      	ldr	r3, [r7, #32]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	69fa      	ldr	r2, [r7, #28]
 8008d04:	0151      	lsls	r1, r2, #5
 8008d06:	6a3a      	ldr	r2, [r7, #32]
 8008d08:	440a      	add	r2, r1
 8008d0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d12:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008d14:	79fb      	ldrb	r3, [r7, #7]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10b      	bne.n	8008d32 <USB_HC_StartXfer+0x86>
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	795b      	ldrb	r3, [r3, #5]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d107      	bne.n	8008d32 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	785b      	ldrb	r3, [r3, #1]
 8008d26:	4619      	mov	r1, r3
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 fa2f 	bl	800918c <USB_DoPing>
      return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	e0f8      	b.n	8008f24 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d018      	beq.n	8008d6c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	8912      	ldrh	r2, [r2, #8]
 8008d42:	4413      	add	r3, r2
 8008d44:	3b01      	subs	r3, #1
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	8912      	ldrh	r2, [r2, #8]
 8008d4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d4e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008d50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008d52:	8b7b      	ldrh	r3, [r7, #26]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d90b      	bls.n	8008d70 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008d58:	8b7b      	ldrh	r3, [r7, #26]
 8008d5a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008d5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	8912      	ldrh	r2, [r2, #8]
 8008d62:	fb02 f203 	mul.w	r2, r2, r3
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	611a      	str	r2, [r3, #16]
 8008d6a:	e001      	b.n	8008d70 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	78db      	ldrb	r3, [r3, #3]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d007      	beq.n	8008d88 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008d78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	8912      	ldrh	r2, [r2, #8]
 8008d7e:	fb02 f203 	mul.w	r2, r2, r3
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	611a      	str	r2, [r3, #16]
 8008d86:	e003      	b.n	8008d90 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	695a      	ldr	r2, [r3, #20]
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d9a:	04d9      	lsls	r1, r3, #19
 8008d9c:	4b63      	ldr	r3, [pc, #396]	; (8008f2c <USB_HC_StartXfer+0x280>)
 8008d9e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008da0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	7a9b      	ldrb	r3, [r3, #10]
 8008da6:	075b      	lsls	r3, r3, #29
 8008da8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008dac:	69f9      	ldr	r1, [r7, #28]
 8008dae:	0148      	lsls	r0, r1, #5
 8008db0:	6a39      	ldr	r1, [r7, #32]
 8008db2:	4401      	add	r1, r0
 8008db4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008db8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008dba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008dbc:	79fb      	ldrb	r3, [r7, #7]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d009      	beq.n	8008dd6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	68d9      	ldr	r1, [r3, #12]
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dd2:	460a      	mov	r2, r1
 8008dd4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bf0c      	ite	eq
 8008de6:	2301      	moveq	r3, #1
 8008de8:	2300      	movne	r3, #0
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	69fa      	ldr	r2, [r7, #28]
 8008dfe:	0151      	lsls	r1, r2, #5
 8008e00:	6a3a      	ldr	r2, [r7, #32]
 8008e02:	440a      	add	r2, r1
 8008e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e0c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	7e7b      	ldrb	r3, [r7, #25]
 8008e1e:	075b      	lsls	r3, r3, #29
 8008e20:	69f9      	ldr	r1, [r7, #28]
 8008e22:	0148      	lsls	r0, r1, #5
 8008e24:	6a39      	ldr	r1, [r7, #32]
 8008e26:	4401      	add	r1, r0
 8008e28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	015a      	lsls	r2, r3, #5
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e46:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	78db      	ldrb	r3, [r3, #3]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d004      	beq.n	8008e5a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e56:	613b      	str	r3, [r7, #16]
 8008e58:	e003      	b.n	8008e62 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e60:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e68:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e76:	461a      	mov	r2, r3
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	e04e      	b.n	8008f24 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	78db      	ldrb	r3, [r3, #3]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d149      	bne.n	8008f22 <USB_HC_StartXfer+0x276>
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d045      	beq.n	8008f22 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	79db      	ldrb	r3, [r3, #7]
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d830      	bhi.n	8008f00 <USB_HC_StartXfer+0x254>
 8008e9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <USB_HC_StartXfer+0x1f8>)
 8008ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea4:	08008eb5 	.word	0x08008eb5
 8008ea8:	08008ed9 	.word	0x08008ed9
 8008eac:	08008eb5 	.word	0x08008eb5
 8008eb0:	08008ed9 	.word	0x08008ed9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	3303      	adds	r3, #3
 8008eba:	089b      	lsrs	r3, r3, #2
 8008ebc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008ebe:	8afa      	ldrh	r2, [r7, #22]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d91c      	bls.n	8008f04 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	f043 0220 	orr.w	r2, r3, #32
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	619a      	str	r2, [r3, #24]
        }
        break;
 8008ed6:	e015      	b.n	8008f04 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	3303      	adds	r3, #3
 8008ede:	089b      	lsrs	r3, r3, #2
 8008ee0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008ee2:	8afa      	ldrh	r2, [r7, #22]
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d90a      	bls.n	8008f08 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	619a      	str	r2, [r3, #24]
        }
        break;
 8008efe:	e003      	b.n	8008f08 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008f00:	bf00      	nop
 8008f02:	e002      	b.n	8008f0a <USB_HC_StartXfer+0x25e>
        break;
 8008f04:	bf00      	nop
 8008f06:	e000      	b.n	8008f0a <USB_HC_StartXfer+0x25e>
        break;
 8008f08:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	68d9      	ldr	r1, [r3, #12]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	785a      	ldrb	r2, [r3, #1]
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	2000      	movs	r0, #0
 8008f1a:	9000      	str	r0, [sp, #0]
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f7ff fb53 	bl	80085c8 <USB_WritePacket>
  }

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3728      	adds	r7, #40	; 0x28
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	1ff80000 	.word	0x1ff80000

08008f30 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	b29b      	uxth	r3, r3
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b089      	sub	sp, #36	; 0x24
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008f62:	78fb      	ldrb	r3, [r7, #3]
 8008f64:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	0c9b      	lsrs	r3, r3, #18
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	0fdb      	lsrs	r3, r3, #31
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f003 0320 	and.w	r3, r3, #32
 8008f9e:	2b20      	cmp	r3, #32
 8008fa0:	d104      	bne.n	8008fac <USB_HC_Halt+0x5a>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d101      	bne.n	8008fac <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	e0e8      	b.n	800917e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <USB_HC_Halt+0x66>
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d173      	bne.n	80090a0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	0151      	lsls	r1, r2, #5
 8008fca:	69ba      	ldr	r2, [r7, #24]
 8008fcc:	440a      	add	r2, r1
 8008fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fd6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f003 0320 	and.w	r3, r3, #32
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f040 80cb 	bne.w	800917c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d143      	bne.n	800907a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	0151      	lsls	r1, r2, #5
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	440a      	add	r2, r1
 8009008:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800900c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009010:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	015a      	lsls	r2, r3, #5
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	4413      	add	r3, r2
 800901a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	0151      	lsls	r1, r2, #5
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	440a      	add	r2, r1
 8009028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800902c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009030:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	4413      	add	r3, r2
 800903a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	0151      	lsls	r1, r2, #5
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	440a      	add	r2, r1
 8009048:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800904c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009050:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	3301      	adds	r3, #1
 8009056:	61fb      	str	r3, [r7, #28]
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800905e:	d81d      	bhi.n	800909c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	4413      	add	r3, r2
 8009068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009072:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009076:	d0ec      	beq.n	8009052 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009078:	e080      	b.n	800917c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	015a      	lsls	r2, r3, #5
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	4413      	add	r3, r2
 8009082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	0151      	lsls	r1, r2, #5
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	440a      	add	r2, r1
 8009090:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009098:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800909a:	e06f      	b.n	800917c <USB_HC_Halt+0x22a>
            break;
 800909c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800909e:	e06d      	b.n	800917c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	0151      	lsls	r1, r2, #5
 80090b2:	69ba      	ldr	r2, [r7, #24]
 80090b4:	440a      	add	r2, r1
 80090b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090be:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d143      	bne.n	8009158 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	0151      	lsls	r1, r2, #5
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	440a      	add	r2, r1
 80090e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	0151      	lsls	r1, r2, #5
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	440a      	add	r2, r1
 8009106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800910a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800910e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	4413      	add	r3, r2
 8009118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	0151      	lsls	r1, r2, #5
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	440a      	add	r2, r1
 8009126:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800912a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800912e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	3301      	adds	r3, #1
 8009134:	61fb      	str	r3, [r7, #28]
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800913c:	d81d      	bhi.n	800917a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	4413      	add	r3, r2
 8009146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009150:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009154:	d0ec      	beq.n	8009130 <USB_HC_Halt+0x1de>
 8009156:	e011      	b.n	800917c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	4413      	add	r3, r2
 8009160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	0151      	lsls	r1, r2, #5
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	440a      	add	r2, r1
 800916e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	e000      	b.n	800917c <USB_HC_Halt+0x22a>
          break;
 800917a:	bf00      	nop
    }
  }

  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3724      	adds	r7, #36	; 0x24
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
	...

0800918c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800918c:	b480      	push	{r7}
 800918e:	b087      	sub	sp, #28
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800919c:	78fb      	ldrb	r3, [r7, #3]
 800919e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80091a0:	2301      	movs	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	04da      	lsls	r2, r3, #19
 80091a8:	4b15      	ldr	r3, [pc, #84]	; (8009200 <USB_DoPing+0x74>)
 80091aa:	4013      	ands	r3, r2
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	0151      	lsls	r1, r2, #5
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	440a      	add	r2, r1
 80091b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ea:	461a      	mov	r2, r3
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	1ff80000 	.word	0x1ff80000

08009204 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff f935 	bl	8008484 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800921a:	2110      	movs	r1, #16
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7ff f98f 	bl	8008540 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f7ff f9b0 	bl	8008588 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009228:	2300      	movs	r3, #0
 800922a:	613b      	str	r3, [r7, #16]
 800922c:	e01f      	b.n	800926e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4413      	add	r3, r2
 8009236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009244:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800924c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009254:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	015a      	lsls	r2, r3, #5
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4413      	add	r3, r2
 800925e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009262:	461a      	mov	r2, r3
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	3301      	adds	r3, #1
 800926c:	613b      	str	r3, [r7, #16]
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b0f      	cmp	r3, #15
 8009272:	d9dc      	bls.n	800922e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009274:	2300      	movs	r3, #0
 8009276:	613b      	str	r3, [r7, #16]
 8009278:	e034      	b.n	80092e4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	4413      	add	r3, r2
 8009282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009290:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009298:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ae:	461a      	mov	r2, r3
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	3301      	adds	r3, #1
 80092b8:	617b      	str	r3, [r7, #20]
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092c0:	d80c      	bhi.n	80092dc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092d8:	d0ec      	beq.n	80092b4 <USB_StopHost+0xb0>
 80092da:	e000      	b.n	80092de <USB_StopHost+0xda>
        break;
 80092dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	3301      	adds	r3, #1
 80092e2:	613b      	str	r3, [r7, #16]
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	2b0f      	cmp	r3, #15
 80092e8:	d9c7      	bls.n	800927a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092f0:	461a      	mov	r2, r3
 80092f2:	f04f 33ff 	mov.w	r3, #4294967295
 80092f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f04f 32ff 	mov.w	r2, #4294967295
 80092fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff f8ae 	bl	8008462 <USB_EnableGlobalInt>

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3718      	adds	r7, #24
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009310:	b590      	push	{r4, r7, lr}
 8009312:	b089      	sub	sp, #36	; 0x24
 8009314:	af04      	add	r7, sp, #16
 8009316:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009318:	2301      	movs	r3, #1
 800931a:	2202      	movs	r2, #2
 800931c:	2102      	movs	r1, #2
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fcb8 	bl	8009c94 <USBH_FindInterface>
 8009324:	4603      	mov	r3, r0
 8009326:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	2bff      	cmp	r3, #255	; 0xff
 800932c:	d002      	beq.n	8009334 <USBH_CDC_InterfaceInit+0x24>
 800932e:	7bfb      	ldrb	r3, [r7, #15]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d901      	bls.n	8009338 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009334:	2302      	movs	r3, #2
 8009336:	e13d      	b.n	80095b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fc8d 	bl	8009c5c <USBH_SelectInterface>
 8009342:	4603      	mov	r3, r0
 8009344:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800934c:	2302      	movs	r3, #2
 800934e:	e131      	b.n	80095b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009356:	2050      	movs	r0, #80	; 0x50
 8009358:	f004 fd5c 	bl	800de14 <malloc>
 800935c:	4603      	mov	r3, r0
 800935e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009366:	69db      	ldr	r3, [r3, #28]
 8009368:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009370:	2302      	movs	r3, #2
 8009372:	e11f      	b.n	80095b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009374:	2250      	movs	r2, #80	; 0x50
 8009376:	2100      	movs	r1, #0
 8009378:	68b8      	ldr	r0, [r7, #8]
 800937a:	f004 fd69 	bl	800de50 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800937e:	7bfb      	ldrb	r3, [r7, #15]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	211a      	movs	r1, #26
 8009384:	fb01 f303 	mul.w	r3, r1, r3
 8009388:	4413      	add	r3, r2
 800938a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	b25b      	sxtb	r3, r3
 8009392:	2b00      	cmp	r3, #0
 8009394:	da15      	bge.n	80093c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009396:	7bfb      	ldrb	r3, [r7, #15]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	211a      	movs	r1, #26
 800939c:	fb01 f303 	mul.w	r3, r1, r3
 80093a0:	4413      	add	r3, r2
 80093a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80093a6:	781a      	ldrb	r2, [r3, #0]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	211a      	movs	r1, #26
 80093b2:	fb01 f303 	mul.w	r3, r1, r3
 80093b6:	4413      	add	r3, r2
 80093b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80093bc:	881a      	ldrh	r2, [r3, #0]
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	785b      	ldrb	r3, [r3, #1]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f002 f890 	bl	800b4ee <USBH_AllocPipe>
 80093ce:	4603      	mov	r3, r0
 80093d0:	461a      	mov	r2, r3
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	7819      	ldrb	r1, [r3, #0]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	7858      	ldrb	r0, [r3, #1]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	8952      	ldrh	r2, [r2, #10]
 80093ee:	9202      	str	r2, [sp, #8]
 80093f0:	2203      	movs	r2, #3
 80093f2:	9201      	str	r2, [sp, #4]
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	4623      	mov	r3, r4
 80093f8:	4602      	mov	r2, r0
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f002 f848 	bl	800b490 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	2200      	movs	r2, #0
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f004 fc31 	bl	800dc70 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800940e:	2300      	movs	r3, #0
 8009410:	2200      	movs	r2, #0
 8009412:	210a      	movs	r1, #10
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fc3d 	bl	8009c94 <USBH_FindInterface>
 800941a:	4603      	mov	r3, r0
 800941c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	2bff      	cmp	r3, #255	; 0xff
 8009422:	d002      	beq.n	800942a <USBH_CDC_InterfaceInit+0x11a>
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d901      	bls.n	800942e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800942a:	2302      	movs	r3, #2
 800942c:	e0c2      	b.n	80095b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800942e:	7bfb      	ldrb	r3, [r7, #15]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	211a      	movs	r1, #26
 8009434:	fb01 f303 	mul.w	r3, r1, r3
 8009438:	4413      	add	r3, r2
 800943a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	b25b      	sxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	da16      	bge.n	8009474 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009446:	7bfb      	ldrb	r3, [r7, #15]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	211a      	movs	r1, #26
 800944c:	fb01 f303 	mul.w	r3, r1, r3
 8009450:	4413      	add	r3, r2
 8009452:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009456:	781a      	ldrb	r2, [r3, #0]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800945c:	7bfb      	ldrb	r3, [r7, #15]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	211a      	movs	r1, #26
 8009462:	fb01 f303 	mul.w	r3, r1, r3
 8009466:	4413      	add	r3, r2
 8009468:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800946c:	881a      	ldrh	r2, [r3, #0]
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	835a      	strh	r2, [r3, #26]
 8009472:	e015      	b.n	80094a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009474:	7bfb      	ldrb	r3, [r7, #15]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	211a      	movs	r1, #26
 800947a:	fb01 f303 	mul.w	r3, r1, r3
 800947e:	4413      	add	r3, r2
 8009480:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009484:	781a      	ldrb	r2, [r3, #0]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	211a      	movs	r1, #26
 8009490:	fb01 f303 	mul.w	r3, r1, r3
 8009494:	4413      	add	r3, r2
 8009496:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800949a:	881a      	ldrh	r2, [r3, #0]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	211a      	movs	r1, #26
 80094a6:	fb01 f303 	mul.w	r3, r1, r3
 80094aa:	4413      	add	r3, r2
 80094ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	b25b      	sxtb	r3, r3
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	da16      	bge.n	80094e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	211a      	movs	r1, #26
 80094be:	fb01 f303 	mul.w	r3, r1, r3
 80094c2:	4413      	add	r3, r2
 80094c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80094c8:	781a      	ldrb	r2, [r3, #0]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	211a      	movs	r1, #26
 80094d4:	fb01 f303 	mul.w	r3, r1, r3
 80094d8:	4413      	add	r3, r2
 80094da:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80094de:	881a      	ldrh	r2, [r3, #0]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	835a      	strh	r2, [r3, #26]
 80094e4:	e015      	b.n	8009512 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	211a      	movs	r1, #26
 80094ec:	fb01 f303 	mul.w	r3, r1, r3
 80094f0:	4413      	add	r3, r2
 80094f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80094f6:	781a      	ldrb	r2, [r3, #0]
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	211a      	movs	r1, #26
 8009502:	fb01 f303 	mul.w	r3, r1, r3
 8009506:	4413      	add	r3, r2
 8009508:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800950c:	881a      	ldrh	r2, [r3, #0]
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	7b9b      	ldrb	r3, [r3, #14]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f001 ffe8 	bl	800b4ee <USBH_AllocPipe>
 800951e:	4603      	mov	r3, r0
 8009520:	461a      	mov	r2, r3
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	7bdb      	ldrb	r3, [r3, #15]
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f001 ffde 	bl	800b4ee <USBH_AllocPipe>
 8009532:	4603      	mov	r3, r0
 8009534:	461a      	mov	r2, r3
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	7b59      	ldrb	r1, [r3, #13]
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	7b98      	ldrb	r0, [r3, #14]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	8b12      	ldrh	r2, [r2, #24]
 8009552:	9202      	str	r2, [sp, #8]
 8009554:	2202      	movs	r2, #2
 8009556:	9201      	str	r2, [sp, #4]
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	4623      	mov	r3, r4
 800955c:	4602      	mov	r2, r0
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 ff96 	bl	800b490 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	7b19      	ldrb	r1, [r3, #12]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	7bd8      	ldrb	r0, [r3, #15]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	8b52      	ldrh	r2, [r2, #26]
 800957c:	9202      	str	r2, [sp, #8]
 800957e:	2202      	movs	r2, #2
 8009580:	9201      	str	r2, [sp, #4]
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	4623      	mov	r3, r4
 8009586:	4602      	mov	r2, r0
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f001 ff81 	bl	800b490 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	7b5b      	ldrb	r3, [r3, #13]
 800959a:	2200      	movs	r2, #0
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f004 fb66 	bl	800dc70 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	7b1b      	ldrb	r3, [r3, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f004 fb5f 	bl	800dc70 <USBH_LL_SetToggle>

  return USBH_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd90      	pop	{r4, r7, pc}

080095bc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00e      	beq.n	80095f4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f001 ff76 	bl	800b4ce <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	4619      	mov	r1, r3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f001 ffa1 	bl	800b530 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	7b1b      	ldrb	r3, [r3, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00e      	beq.n	800961a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	7b1b      	ldrb	r3, [r3, #12]
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f001 ff63 	bl	800b4ce <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	7b1b      	ldrb	r3, [r3, #12]
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f001 ff8e 	bl	800b530 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	7b5b      	ldrb	r3, [r3, #13]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00e      	beq.n	8009640 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	7b5b      	ldrb	r3, [r3, #13]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f001 ff50 	bl	800b4ce <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	7b5b      	ldrb	r3, [r3, #13]
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f001 ff7b 	bl	800b530 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009646:	69db      	ldr	r3, [r3, #28]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00b      	beq.n	8009664 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	4618      	mov	r0, r3
 8009656:	f004 fbe5 	bl	800de24 <free>
    phost->pActiveClass->pData = 0U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009660:	2200      	movs	r2, #0
 8009662:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b084      	sub	sp, #16
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3340      	adds	r3, #64	; 0x40
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f8b1 	bl	80097ee <GetLineCoding>
 800968c:	4603      	mov	r3, r0
 800968e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009690:	7afb      	ldrb	r3, [r7, #11]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d105      	bne.n	80096a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800969c:	2102      	movs	r1, #2
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80096a2:	7afb      	ldrb	r3, [r7, #11]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80096b4:	2301      	movs	r3, #1
 80096b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	d877      	bhi.n	80097c0 <USBH_CDC_Process+0x114>
 80096d0:	a201      	add	r2, pc, #4	; (adr r2, 80096d8 <USBH_CDC_Process+0x2c>)
 80096d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d6:	bf00      	nop
 80096d8:	080096ed 	.word	0x080096ed
 80096dc:	080096f3 	.word	0x080096f3
 80096e0:	08009723 	.word	0x08009723
 80096e4:	08009797 	.word	0x08009797
 80096e8:	080097a5 	.word	0x080097a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73fb      	strb	r3, [r7, #15]
      break;
 80096f0:	e06d      	b.n	80097ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 f897 	bl	800982c <SetLineCoding>
 80096fe:	4603      	mov	r3, r0
 8009700:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d104      	bne.n	8009712 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2202      	movs	r2, #2
 800970c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009710:	e058      	b.n	80097c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009712:	7bbb      	ldrb	r3, [r7, #14]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d055      	beq.n	80097c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	2204      	movs	r2, #4
 800971c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009720:	e050      	b.n	80097c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	3340      	adds	r3, #64	; 0x40
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f860 	bl	80097ee <GetLineCoding>
 800972e:	4603      	mov	r3, r0
 8009730:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009732:	7bbb      	ldrb	r3, [r7, #14]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d126      	bne.n	8009786 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800974a:	791b      	ldrb	r3, [r3, #4]
 800974c:	429a      	cmp	r2, r3
 800974e:	d13b      	bne.n	80097c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800975a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800975c:	429a      	cmp	r2, r3
 800975e:	d133      	bne.n	80097c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800976a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800976c:	429a      	cmp	r2, r3
 800976e:	d12b      	bne.n	80097c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009778:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800977a:	429a      	cmp	r2, r3
 800977c:	d124      	bne.n	80097c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f982 	bl	8009a88 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009784:	e020      	b.n	80097c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d01d      	beq.n	80097c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	2204      	movs	r2, #4
 8009790:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009794:	e018      	b.n	80097c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f867 	bl	800986a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f8f6 	bl	800998e <CDC_ProcessReception>
      break;
 80097a2:	e014      	b.n	80097ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80097a4:	2100      	movs	r1, #0
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f001 f951 	bl	800aa4e <USBH_ClrFeature>
 80097ac:	4603      	mov	r3, r0
 80097ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10a      	bne.n	80097cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80097be:	e005      	b.n	80097cc <USBH_CDC_Process+0x120>

    default:
      break;
 80097c0:	bf00      	nop
 80097c2:	e004      	b.n	80097ce <USBH_CDC_Process+0x122>
      break;
 80097c4:	bf00      	nop
 80097c6:	e002      	b.n	80097ce <USBH_CDC_Process+0x122>
      break;
 80097c8:	bf00      	nop
 80097ca:	e000      	b.n	80097ce <USBH_CDC_Process+0x122>
      break;
 80097cc:	bf00      	nop

  }

  return status;
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b082      	sub	sp, #8
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	22a1      	movs	r2, #161	; 0xa1
 80097fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2221      	movs	r2, #33	; 0x21
 8009802:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2207      	movs	r2, #7
 8009814:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2207      	movs	r2, #7
 800981a:	4619      	mov	r1, r3
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f001 faf6 	bl	800ae0e <USBH_CtlReq>
 8009822:	4603      	mov	r3, r0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2221      	movs	r2, #33	; 0x21
 800983a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2220      	movs	r2, #32
 8009840:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2207      	movs	r2, #7
 8009852:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	2207      	movs	r2, #7
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f001 fad7 	bl	800ae0e <USBH_CtlReq>
 8009860:	4603      	mov	r3, r0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b086      	sub	sp, #24
 800986e:	af02      	add	r7, sp, #8
 8009870:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800987c:	2300      	movs	r3, #0
 800987e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009886:	2b01      	cmp	r3, #1
 8009888:	d002      	beq.n	8009890 <CDC_ProcessTransmission+0x26>
 800988a:	2b02      	cmp	r3, #2
 800988c:	d023      	beq.n	80098d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800988e:	e07a      	b.n	8009986 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	8b12      	ldrh	r2, [r2, #24]
 8009898:	4293      	cmp	r3, r2
 800989a:	d90b      	bls.n	80098b4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	69d9      	ldr	r1, [r3, #28]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	8b1a      	ldrh	r2, [r3, #24]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	7b5b      	ldrb	r3, [r3, #13]
 80098a8:	2001      	movs	r0, #1
 80098aa:	9000      	str	r0, [sp, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f001 fdac 	bl	800b40a <USBH_BulkSendData>
 80098b2:	e00b      	b.n	80098cc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80098bc:	b29a      	uxth	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	7b5b      	ldrb	r3, [r3, #13]
 80098c2:	2001      	movs	r0, #1
 80098c4:	9000      	str	r0, [sp, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f001 fd9f 	bl	800b40a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80098d4:	e057      	b.n	8009986 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	7b5b      	ldrb	r3, [r3, #13]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f004 f99d 	bl	800dc1c <USBH_LL_GetURBState>
 80098e2:	4603      	mov	r3, r0
 80098e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80098e6:	7afb      	ldrb	r3, [r7, #11]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d136      	bne.n	800995a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	8b12      	ldrh	r2, [r2, #24]
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d90e      	bls.n	8009916 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	8b12      	ldrh	r2, [r2, #24]
 8009900:	1a9a      	subs	r2, r3, r2
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	8b12      	ldrh	r2, [r2, #24]
 800990e:	441a      	add	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	61da      	str	r2, [r3, #28]
 8009914:	e002      	b.n	800991c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009920:	2b00      	cmp	r3, #0
 8009922:	d004      	beq.n	800992e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800992c:	e006      	b.n	800993c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f892 	bl	8009a60 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2204      	movs	r2, #4
 8009940:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009950:	2200      	movs	r2, #0
 8009952:	4619      	mov	r1, r3
 8009954:	f001 fee0 	bl	800b718 <osMessagePut>
      break;
 8009958:	e014      	b.n	8009984 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800995a:	7afb      	ldrb	r3, [r7, #11]
 800995c:	2b02      	cmp	r3, #2
 800995e:	d111      	bne.n	8009984 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2204      	movs	r2, #4
 800996c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800997c:	2200      	movs	r2, #0
 800997e:	4619      	mov	r1, r3
 8009980:	f001 feca 	bl	800b718 <osMessagePut>
      break;
 8009984:	bf00      	nop
  }
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b086      	sub	sp, #24
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800999c:	69db      	ldr	r3, [r3, #28]
 800999e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80099a0:	2300      	movs	r3, #0
 80099a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d002      	beq.n	80099b4 <CDC_ProcessReception+0x26>
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	d00e      	beq.n	80099d0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80099b2:	e051      	b.n	8009a58 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	6a19      	ldr	r1, [r3, #32]
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	8b5a      	ldrh	r2, [r3, #26]
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	7b1b      	ldrb	r3, [r3, #12]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f001 fd47 	bl	800b454 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2204      	movs	r2, #4
 80099ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80099ce:	e043      	b.n	8009a58 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	7b1b      	ldrb	r3, [r3, #12]
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f004 f920 	bl	800dc1c <USBH_LL_GetURBState>
 80099dc:	4603      	mov	r3, r0
 80099de:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80099e0:	7cfb      	ldrb	r3, [r7, #19]
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d137      	bne.n	8009a56 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	7b1b      	ldrb	r3, [r3, #12]
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f004 f883 	bl	800daf8 <USBH_LL_GetLastXferSize>
 80099f2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d016      	beq.n	8009a2c <CDC_ProcessReception+0x9e>
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	8b5b      	ldrh	r3, [r3, #26]
 8009a02:	461a      	mov	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d910      	bls.n	8009a2c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	1ad2      	subs	r2, r2, r3
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	6a1a      	ldr	r2, [r3, #32]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	441a      	add	r2, r3
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	2203      	movs	r2, #3
 8009a26:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8009a2a:	e006      	b.n	8009a3a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f81d 	bl	8009a74 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2204      	movs	r2, #4
 8009a3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009a4e:	2200      	movs	r2, #0
 8009a50:	4619      	mov	r1, r3
 8009a52:	f001 fe61 	bl	800b718 <osMessagePut>
      break;
 8009a56:	bf00      	nop
  }
}
 8009a58:	bf00      	nop
 8009a5a:	3718      	adds	r7, #24
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009a9c:	b5b0      	push	{r4, r5, r7, lr}
 8009a9e:	b090      	sub	sp, #64	; 0x40
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d101      	bne.n	8009ab4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	e04d      	b.n	8009b50 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	79fa      	ldrb	r2, [r7, #7]
 8009ab8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f000 f847 	bl	8009b60 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d003      	beq.n	8009b00 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8009b00:	4b15      	ldr	r3, [pc, #84]	; (8009b58 <USBH_Init+0xbc>)
 8009b02:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8009b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8009b0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b10:	2100      	movs	r1, #0
 8009b12:	4618      	mov	r0, r3
 8009b14:	f001 fdd8 	bl	800b6c8 <osMessageCreate>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8009b20:	4b0e      	ldr	r3, [pc, #56]	; (8009b5c <USBH_Init+0xc0>)
 8009b22:	f107 0414 	add.w	r4, r7, #20
 8009b26:	461d      	mov	r5, r3
 8009b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8009b34:	f107 0314 	add.w	r3, r7, #20
 8009b38:	68f9      	ldr	r1, [r7, #12]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 fd64 	bl	800b608 <osThreadCreate>
 8009b40:	4602      	mov	r2, r0
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f003 ff17 	bl	800d97c <USBH_LL_Init>

  return USBH_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3740      	adds	r7, #64	; 0x40
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bdb0      	pop	{r4, r5, r7, pc}
 8009b58:	08010538 	.word	0x08010538
 8009b5c:	08010548 	.word	0x08010548

08009b60 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	e009      	b.n	8009b86 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	33e0      	adds	r3, #224	; 0xe0
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	3301      	adds	r3, #1
 8009b84:	60fb      	str	r3, [r7, #12]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2b0e      	cmp	r3, #14
 8009b8a:	d9f2      	bls.n	8009b72 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	e009      	b.n	8009ba6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	60fb      	str	r3, [r7, #12]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bac:	d3f1      	bcc.n	8009b92 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2240      	movs	r2, #64	; 0x40
 8009bd2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d016      	beq.n	8009c4a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d10e      	bne.n	8009c44 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c2c:	1c59      	adds	r1, r3, #1
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	33de      	adds	r3, #222	; 0xde
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	73fb      	strb	r3, [r7, #15]
 8009c42:	e004      	b.n	8009c4e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009c44:	2302      	movs	r3, #2
 8009c46:	73fb      	strb	r3, [r7, #15]
 8009c48:	e001      	b.n	8009c4e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3714      	adds	r7, #20
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b085      	sub	sp, #20
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009c72:	78fa      	ldrb	r2, [r7, #3]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d204      	bcs.n	8009c82 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	78fa      	ldrb	r2, [r7, #3]
 8009c7c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009c80:	e001      	b.n	8009c86 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009c82:	2302      	movs	r3, #2
 8009c84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	4608      	mov	r0, r1
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	70fb      	strb	r3, [r7, #3]
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	70bb      	strb	r3, [r7, #2]
 8009caa:	4613      	mov	r3, r2
 8009cac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009cbc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009cbe:	e025      	b.n	8009d0c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009cc0:	7dfb      	ldrb	r3, [r7, #23]
 8009cc2:	221a      	movs	r2, #26
 8009cc4:	fb02 f303 	mul.w	r3, r2, r3
 8009cc8:	3308      	adds	r3, #8
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	4413      	add	r3, r2
 8009cce:	3302      	adds	r3, #2
 8009cd0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	795b      	ldrb	r3, [r3, #5]
 8009cd6:	78fa      	ldrb	r2, [r7, #3]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d002      	beq.n	8009ce2 <USBH_FindInterface+0x4e>
 8009cdc:	78fb      	ldrb	r3, [r7, #3]
 8009cde:	2bff      	cmp	r3, #255	; 0xff
 8009ce0:	d111      	bne.n	8009d06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009ce6:	78ba      	ldrb	r2, [r7, #2]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d002      	beq.n	8009cf2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009cec:	78bb      	ldrb	r3, [r7, #2]
 8009cee:	2bff      	cmp	r3, #255	; 0xff
 8009cf0:	d109      	bne.n	8009d06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009cf6:	787a      	ldrb	r2, [r7, #1]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d002      	beq.n	8009d02 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009cfc:	787b      	ldrb	r3, [r7, #1]
 8009cfe:	2bff      	cmp	r3, #255	; 0xff
 8009d00:	d101      	bne.n	8009d06 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
 8009d04:	e006      	b.n	8009d14 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d9d6      	bls.n	8009cc0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009d12:	23ff      	movs	r3, #255	; 0xff
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	371c      	adds	r7, #28
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f003 fe6d 	bl	800da08 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009d2e:	2101      	movs	r1, #1
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f003 ff86 	bl	800dc42 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b088      	sub	sp, #32
 8009d44:	af04      	add	r7, sp, #16
 8009d46:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009d48:	2302      	movs	r3, #2
 8009d4a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d102      	bne.n	8009d62 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2203      	movs	r2, #3
 8009d60:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b0b      	cmp	r3, #11
 8009d6a:	f200 823c 	bhi.w	800a1e6 <USBH_Process+0x4a6>
 8009d6e:	a201      	add	r2, pc, #4	; (adr r2, 8009d74 <USBH_Process+0x34>)
 8009d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d74:	08009da5 	.word	0x08009da5
 8009d78:	08009df3 	.word	0x08009df3
 8009d7c:	08009e77 	.word	0x08009e77
 8009d80:	0800a165 	.word	0x0800a165
 8009d84:	0800a1e7 	.word	0x0800a1e7
 8009d88:	08009f37 	.word	0x08009f37
 8009d8c:	0800a0ef 	.word	0x0800a0ef
 8009d90:	08009f89 	.word	0x08009f89
 8009d94:	08009fc5 	.word	0x08009fc5
 8009d98:	08009fff 	.word	0x08009fff
 8009d9c:	0800a047 	.word	0x0800a047
 8009da0:	0800a14d 	.word	0x0800a14d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 821c 	beq.w	800a1ea <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009db8:	20c8      	movs	r0, #200	; 0xc8
 8009dba:	f003 ff89 	bl	800dcd0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f003 fe7f 	bl	800dac2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009de8:	2200      	movs	r2, #0
 8009dea:	4619      	mov	r1, r3
 8009dec:	f001 fc94 	bl	800b718 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009df0:	e1fb      	b.n	800a1ea <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d107      	bne.n	8009e0c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2202      	movs	r2, #2
 8009e08:	701a      	strb	r2, [r3, #0]
 8009e0a:	e025      	b.n	8009e58 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009e12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e16:	d914      	bls.n	8009e42 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009e1e:	3301      	adds	r3, #1
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d903      	bls.n	8009e3a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	220d      	movs	r2, #13
 8009e36:	701a      	strb	r2, [r3, #0]
 8009e38:	e00e      	b.n	8009e58 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	701a      	strb	r2, [r3, #0]
 8009e40:	e00a      	b.n	8009e58 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009e48:	f103 020a 	add.w	r2, r3, #10
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009e52:	200a      	movs	r0, #10
 8009e54:	f003 ff3c 	bl	800dcd0 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	4619      	mov	r1, r3
 8009e70:	f001 fc52 	bl	800b718 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009e74:	e1c0      	b.n	800a1f8 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d005      	beq.n	8009e8c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e86:	2104      	movs	r1, #4
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009e8c:	2064      	movs	r0, #100	; 0x64
 8009e8e:	f003 ff1f 	bl	800dcd0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f003 fdee 	bl	800da74 <USBH_LL_GetSpeed>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2205      	movs	r2, #5
 8009ea6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 fb1f 	bl	800b4ee <USBH_AllocPipe>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009eb8:	2180      	movs	r1, #128	; 0x80
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f001 fb17 	bl	800b4ee <USBH_AllocPipe>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	7919      	ldrb	r1, [r3, #4]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009edc:	b292      	uxth	r2, r2
 8009ede:	9202      	str	r2, [sp, #8]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	9201      	str	r2, [sp, #4]
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2280      	movs	r2, #128	; 0x80
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f001 fad0 	bl	800b490 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	7959      	ldrb	r1, [r3, #5]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f04:	b292      	uxth	r2, r2
 8009f06:	9202      	str	r2, [sp, #8]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	9201      	str	r2, [sp, #4]
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2200      	movs	r2, #0
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f001 fabc 	bl	800b490 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	4619      	mov	r1, r3
 8009f30:	f001 fbf2 	bl	800b718 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009f34:	e160      	b.n	800a1f8 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f964 	bl	800a204 <USBH_HandleEnum>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009f40:	7bbb      	ldrb	r3, [r7, #14]
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f040 8152 	bne.w	800a1ee <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d103      	bne.n	8009f64 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2208      	movs	r2, #8
 8009f60:	701a      	strb	r2, [r3, #0]
 8009f62:	e002      	b.n	8009f6a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2207      	movs	r2, #7
 8009f68:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2205      	movs	r2, #5
 8009f6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f7e:	2200      	movs	r2, #0
 8009f80:	4619      	mov	r1, r3
 8009f82:	f001 fbc9 	bl	800b718 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009f86:	e132      	b.n	800a1ee <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f000 812f 	beq.w	800a1f2 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2208      	movs	r2, #8
 8009fa4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2205      	movs	r2, #5
 8009faa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009fba:	2200      	movs	r2, #0
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	f001 fbab 	bl	800b718 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009fc2:	e116      	b.n	800a1f2 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fcf6 	bl	800a9c0 <USBH_SetCfg>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d102      	bne.n	8009fe0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2209      	movs	r2, #9
 8009fde:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	f001 fb8e 	bl	800b718 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009ffc:	e0fc      	b.n	800a1f8 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a004:	f003 0320 	and.w	r3, r3, #32
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00a      	beq.n	800a022 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a00c:	2101      	movs	r1, #1
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fcf9 	bl	800aa06 <USBH_SetFeature>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d106      	bne.n	800a028 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	220a      	movs	r2, #10
 800a01e:	701a      	strb	r2, [r3, #0]
 800a020:	e002      	b.n	800a028 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	220a      	movs	r2, #10
 800a026:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a03c:	2200      	movs	r2, #0
 800a03e:	4619      	mov	r1, r3
 800a040:	f001 fb6a 	bl	800b718 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a044:	e0d8      	b.n	800a1f8 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d03f      	beq.n	800a0d0 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a058:	2300      	movs	r3, #0
 800a05a:	73fb      	strb	r3, [r7, #15]
 800a05c:	e016      	b.n	800a08c <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a05e:	7bfa      	ldrb	r2, [r7, #15]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	32de      	adds	r2, #222	; 0xde
 800a064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a068:	791a      	ldrb	r2, [r3, #4]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a070:	429a      	cmp	r2, r3
 800a072:	d108      	bne.n	800a086 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a074:	7bfa      	ldrb	r2, [r7, #15]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	32de      	adds	r2, #222	; 0xde
 800a07a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a084:	e005      	b.n	800a092 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a086:	7bfb      	ldrb	r3, [r7, #15]
 800a088:	3301      	adds	r3, #1
 800a08a:	73fb      	strb	r3, [r7, #15]
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0e5      	beq.n	800a05e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d016      	beq.n	800a0ca <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	4798      	blx	r3
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d109      	bne.n	800a0c2 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2206      	movs	r2, #6
 800a0b2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0ba:	2103      	movs	r1, #3
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	4798      	blx	r3
 800a0c0:	e006      	b.n	800a0d0 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	220d      	movs	r2, #13
 800a0c6:	701a      	strb	r2, [r3, #0]
 800a0c8:	e002      	b.n	800a0d0 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	220d      	movs	r2, #13
 800a0ce:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2205      	movs	r2, #5
 800a0d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	f001 fb16 	bl	800b718 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a0ec:	e084      	b.n	800a1f8 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d017      	beq.n	800a128 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	4798      	blx	r3
 800a104:	4603      	mov	r3, r0
 800a106:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a108:	7bbb      	ldrb	r3, [r7, #14]
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d103      	bne.n	800a118 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	220b      	movs	r2, #11
 800a114:	701a      	strb	r2, [r3, #0]
 800a116:	e00a      	b.n	800a12e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800a118:	7bbb      	ldrb	r3, [r7, #14]
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d106      	bne.n	800a12e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	220d      	movs	r2, #13
 800a124:	701a      	strb	r2, [r3, #0]
 800a126:	e002      	b.n	800a12e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	220d      	movs	r2, #13
 800a12c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2205      	movs	r2, #5
 800a132:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a142:	2200      	movs	r2, #0
 800a144:	4619      	mov	r1, r3
 800a146:	f001 fae7 	bl	800b718 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a14a:	e055      	b.n	800a1f8 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a152:	2b00      	cmp	r3, #0
 800a154:	d04f      	beq.n	800a1f6 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	4798      	blx	r3
      }
      break;
 800a162:	e048      	b.n	800a1f6 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff fcf7 	bl	8009b60 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d009      	beq.n	800a190 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a196:	2b00      	cmp	r3, #0
 800a198:	d005      	beq.n	800a1a6 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1a0:	2105      	movs	r1, #5
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d107      	bne.n	800a1c2 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff fdb0 	bl	8009d20 <USBH_Start>
 800a1c0:	e002      	b.n	800a1c8 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f003 fc20 	bl	800da08 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1dc:	2200      	movs	r2, #0
 800a1de:	4619      	mov	r1, r3
 800a1e0:	f001 fa9a 	bl	800b718 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a1e4:	e008      	b.n	800a1f8 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a1e6:	bf00      	nop
 800a1e8:	e006      	b.n	800a1f8 <USBH_Process+0x4b8>
      break;
 800a1ea:	bf00      	nop
 800a1ec:	e004      	b.n	800a1f8 <USBH_Process+0x4b8>
      break;
 800a1ee:	bf00      	nop
 800a1f0:	e002      	b.n	800a1f8 <USBH_Process+0x4b8>
    break;
 800a1f2:	bf00      	nop
 800a1f4:	e000      	b.n	800a1f8 <USBH_Process+0x4b8>
      break;
 800a1f6:	bf00      	nop
  }
  return USBH_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop

0800a204 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af04      	add	r7, sp, #16
 800a20a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a20c:	2301      	movs	r3, #1
 800a20e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a210:	2301      	movs	r3, #1
 800a212:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	785b      	ldrb	r3, [r3, #1]
 800a218:	2b07      	cmp	r3, #7
 800a21a:	f200 8208 	bhi.w	800a62e <USBH_HandleEnum+0x42a>
 800a21e:	a201      	add	r2, pc, #4	; (adr r2, 800a224 <USBH_HandleEnum+0x20>)
 800a220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a224:	0800a245 	.word	0x0800a245
 800a228:	0800a303 	.word	0x0800a303
 800a22c:	0800a36d 	.word	0x0800a36d
 800a230:	0800a3fb 	.word	0x0800a3fb
 800a234:	0800a465 	.word	0x0800a465
 800a238:	0800a4d5 	.word	0x0800a4d5
 800a23c:	0800a571 	.word	0x0800a571
 800a240:	0800a5ef 	.word	0x0800a5ef
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a244:	2108      	movs	r1, #8
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 faea 	bl	800a820 <USBH_Get_DevDesc>
 800a24c:	4603      	mov	r3, r0
 800a24e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a250:	7bbb      	ldrb	r3, [r7, #14]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d130      	bne.n	800a2b8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	7919      	ldrb	r1, [r3, #4]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a27a:	b292      	uxth	r2, r2
 800a27c:	9202      	str	r2, [sp, #8]
 800a27e:	2200      	movs	r2, #0
 800a280:	9201      	str	r2, [sp, #4]
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	4603      	mov	r3, r0
 800a286:	2280      	movs	r2, #128	; 0x80
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 f901 	bl	800b490 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	7959      	ldrb	r1, [r3, #5]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a2a2:	b292      	uxth	r2, r2
 800a2a4:	9202      	str	r2, [sp, #8]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	9201      	str	r2, [sp, #4]
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 f8ed 	bl	800b490 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a2b6:	e1bc      	b.n	800a632 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2b8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	f040 81b9 	bne.w	800a632 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2d6:	2b03      	cmp	r3, #3
 800a2d8:	d903      	bls.n	800a2e2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	220d      	movs	r2, #13
 800a2de:	701a      	strb	r2, [r3, #0]
      break;
 800a2e0:	e1a7      	b.n	800a632 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	795b      	ldrb	r3, [r3, #5]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f001 f921 	bl	800b530 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	791b      	ldrb	r3, [r3, #4]
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f001 f91b 	bl	800b530 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	701a      	strb	r2, [r3, #0]
      break;
 800a300:	e197      	b.n	800a632 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a302:	2112      	movs	r1, #18
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fa8b 	bl	800a820 <USBH_Get_DevDesc>
 800a30a:	4603      	mov	r3, r0
 800a30c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a30e:	7bbb      	ldrb	r3, [r7, #14]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d103      	bne.n	800a31c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2202      	movs	r2, #2
 800a318:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a31a:	e18c      	b.n	800a636 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a31c:	7bbb      	ldrb	r3, [r7, #14]
 800a31e:	2b03      	cmp	r3, #3
 800a320:	f040 8189 	bne.w	800a636 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a32a:	3301      	adds	r3, #1
 800a32c:	b2da      	uxtb	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d903      	bls.n	800a346 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	220d      	movs	r2, #13
 800a342:	701a      	strb	r2, [r3, #0]
      break;
 800a344:	e177      	b.n	800a636 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	795b      	ldrb	r3, [r3, #5]
 800a34a:	4619      	mov	r1, r3
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f001 f8ef 	bl	800b530 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	791b      	ldrb	r3, [r3, #4]
 800a356:	4619      	mov	r1, r3
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f001 f8e9 	bl	800b530 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	701a      	strb	r2, [r3, #0]
      break;
 800a36a:	e164      	b.n	800a636 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a36c:	2101      	movs	r1, #1
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fb02 	bl	800a978 <USBH_SetAddress>
 800a374:	4603      	mov	r3, r0
 800a376:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d132      	bne.n	800a3e4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a37e:	2002      	movs	r0, #2
 800a380:	f003 fca6 	bl	800dcd0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2203      	movs	r2, #3
 800a390:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	7919      	ldrb	r1, [r3, #4]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a3a6:	b292      	uxth	r2, r2
 800a3a8:	9202      	str	r2, [sp, #8]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	9201      	str	r2, [sp, #4]
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2280      	movs	r2, #128	; 0x80
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f001 f86b 	bl	800b490 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	7959      	ldrb	r1, [r3, #5]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3ce:	b292      	uxth	r2, r2
 800a3d0:	9202      	str	r2, [sp, #8]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	9201      	str	r2, [sp, #4]
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2200      	movs	r2, #0
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f001 f857 	bl	800b490 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a3e2:	e12a      	b.n	800a63a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3e4:	7bbb      	ldrb	r3, [r7, #14]
 800a3e6:	2b03      	cmp	r3, #3
 800a3e8:	f040 8127 	bne.w	800a63a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	220d      	movs	r2, #13
 800a3f0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	705a      	strb	r2, [r3, #1]
      break;
 800a3f8:	e11f      	b.n	800a63a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a3fa:	2109      	movs	r1, #9
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fa37 	bl	800a870 <USBH_Get_CfgDesc>
 800a402:	4603      	mov	r3, r0
 800a404:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a406:	7bbb      	ldrb	r3, [r7, #14]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d103      	bne.n	800a414 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2204      	movs	r2, #4
 800a410:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a412:	e114      	b.n	800a63e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a414:	7bbb      	ldrb	r3, [r7, #14]
 800a416:	2b03      	cmp	r3, #3
 800a418:	f040 8111 	bne.w	800a63e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a422:	3301      	adds	r3, #1
 800a424:	b2da      	uxtb	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a432:	2b03      	cmp	r3, #3
 800a434:	d903      	bls.n	800a43e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	220d      	movs	r2, #13
 800a43a:	701a      	strb	r2, [r3, #0]
      break;
 800a43c:	e0ff      	b.n	800a63e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	795b      	ldrb	r3, [r3, #5]
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f001 f873 	bl	800b530 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	791b      	ldrb	r3, [r3, #4]
 800a44e:	4619      	mov	r1, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f001 f86d 	bl	800b530 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	701a      	strb	r2, [r3, #0]
      break;
 800a462:	e0ec      	b.n	800a63e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f9ff 	bl	800a870 <USBH_Get_CfgDesc>
 800a472:	4603      	mov	r3, r0
 800a474:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a476:	7bbb      	ldrb	r3, [r7, #14]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d103      	bne.n	800a484 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2205      	movs	r2, #5
 800a480:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a482:	e0de      	b.n	800a642 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a484:	7bbb      	ldrb	r3, [r7, #14]
 800a486:	2b03      	cmp	r3, #3
 800a488:	f040 80db 	bne.w	800a642 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a492:	3301      	adds	r3, #1
 800a494:	b2da      	uxtb	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	d903      	bls.n	800a4ae <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	220d      	movs	r2, #13
 800a4aa:	701a      	strb	r2, [r3, #0]
      break;
 800a4ac:	e0c9      	b.n	800a642 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	795b      	ldrb	r3, [r3, #5]
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f001 f83b 	bl	800b530 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	791b      	ldrb	r3, [r3, #4]
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f001 f835 	bl	800b530 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	701a      	strb	r2, [r3, #0]
      break;
 800a4d2:	e0b6      	b.n	800a642 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d036      	beq.n	800a54c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a4ea:	23ff      	movs	r3, #255	; 0xff
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f9e3 	bl	800a8b8 <USBH_Get_StringDesc>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4f6:	7bbb      	ldrb	r3, [r7, #14]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d111      	bne.n	800a520 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2206      	movs	r2, #6
 800a500:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2205      	movs	r2, #5
 800a506:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a516:	2200      	movs	r2, #0
 800a518:	4619      	mov	r1, r3
 800a51a:	f001 f8fd 	bl	800b718 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a51e:	e092      	b.n	800a646 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a520:	7bbb      	ldrb	r3, [r7, #14]
 800a522:	2b03      	cmp	r3, #3
 800a524:	f040 808f 	bne.w	800a646 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2206      	movs	r2, #6
 800a52c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2205      	movs	r2, #5
 800a532:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a542:	2200      	movs	r2, #0
 800a544:	4619      	mov	r1, r3
 800a546:	f001 f8e7 	bl	800b718 <osMessagePut>
      break;
 800a54a:	e07c      	b.n	800a646 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2206      	movs	r2, #6
 800a550:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2205      	movs	r2, #5
 800a556:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a566:	2200      	movs	r2, #0
 800a568:	4619      	mov	r1, r3
 800a56a:	f001 f8d5 	bl	800b718 <osMessagePut>
      break;
 800a56e:	e06a      	b.n	800a646 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a576:	2b00      	cmp	r3, #0
 800a578:	d027      	beq.n	800a5ca <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a586:	23ff      	movs	r3, #255	; 0xff
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 f995 	bl	800a8b8 <USBH_Get_StringDesc>
 800a58e:	4603      	mov	r3, r0
 800a590:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a592:	7bbb      	ldrb	r3, [r7, #14]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d103      	bne.n	800a5a0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2207      	movs	r2, #7
 800a59c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a59e:	e054      	b.n	800a64a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5a0:	7bbb      	ldrb	r3, [r7, #14]
 800a5a2:	2b03      	cmp	r3, #3
 800a5a4:	d151      	bne.n	800a64a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2207      	movs	r2, #7
 800a5aa:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2205      	movs	r2, #5
 800a5b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	f001 f8a8 	bl	800b718 <osMessagePut>
      break;
 800a5c8:	e03f      	b.n	800a64a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2207      	movs	r2, #7
 800a5ce:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2205      	movs	r2, #5
 800a5d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	f001 f896 	bl	800b718 <osMessagePut>
      break;
 800a5ec:	e02d      	b.n	800a64a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d017      	beq.n	800a628 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a604:	23ff      	movs	r3, #255	; 0xff
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f956 	bl	800a8b8 <USBH_Get_StringDesc>
 800a60c:	4603      	mov	r3, r0
 800a60e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a610:	7bbb      	ldrb	r3, [r7, #14]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d102      	bne.n	800a61c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a61a:	e018      	b.n	800a64e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a61c:	7bbb      	ldrb	r3, [r7, #14]
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d115      	bne.n	800a64e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	73fb      	strb	r3, [r7, #15]
      break;
 800a626:	e012      	b.n	800a64e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a628:	2300      	movs	r3, #0
 800a62a:	73fb      	strb	r3, [r7, #15]
      break;
 800a62c:	e00f      	b.n	800a64e <USBH_HandleEnum+0x44a>

    default:
      break;
 800a62e:	bf00      	nop
 800a630:	e00e      	b.n	800a650 <USBH_HandleEnum+0x44c>
      break;
 800a632:	bf00      	nop
 800a634:	e00c      	b.n	800a650 <USBH_HandleEnum+0x44c>
      break;
 800a636:	bf00      	nop
 800a638:	e00a      	b.n	800a650 <USBH_HandleEnum+0x44c>
      break;
 800a63a:	bf00      	nop
 800a63c:	e008      	b.n	800a650 <USBH_HandleEnum+0x44c>
      break;
 800a63e:	bf00      	nop
 800a640:	e006      	b.n	800a650 <USBH_HandleEnum+0x44c>
      break;
 800a642:	bf00      	nop
 800a644:	e004      	b.n	800a650 <USBH_HandleEnum+0x44c>
      break;
 800a646:	bf00      	nop
 800a648:	e002      	b.n	800a650 <USBH_HandleEnum+0x44c>
      break;
 800a64a:	bf00      	nop
 800a64c:	e000      	b.n	800a650 <USBH_HandleEnum+0x44c>
      break;
 800a64e:	bf00      	nop
  }
  return Status;
 800a650:	7bfb      	ldrb	r3, [r7, #15]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop

0800a65c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a66e:	bf00      	nop
 800a670:	370c      	adds	r7, #12
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b082      	sub	sp, #8
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a688:	1c5a      	adds	r2, r3, #1
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f804 	bl	800a69e <USBH_HandleSof>
}
 800a696:	bf00      	nop
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	2b0b      	cmp	r3, #11
 800a6ae:	d10a      	bne.n	800a6c6 <USBH_HandleSof+0x28>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d005      	beq.n	800a6c6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	4798      	blx	r3
  }
}
 800a6c6:	bf00      	nop
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	f001 f80f 	bl	800b718 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a6fa:	bf00      	nop
}
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a702:	b480      	push	{r7}
 800a704:	b083      	sub	sp, #12
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a712:	bf00      	nop
}
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a752:	2200      	movs	r2, #0
 800a754:	4619      	mov	r1, r3
 800a756:	f000 ffdf 	bl	800b718 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f003 f95a 	bl	800da3e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	791b      	ldrb	r3, [r3, #4]
 800a78e:	4619      	mov	r1, r3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fecd 	bl	800b530 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	795b      	ldrb	r3, [r3, #5]
 800a79a:	4619      	mov	r1, r3
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fec7 	bl	800b530 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	f000 ffad 	bl	800b718 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800a7d6:	f107 030c 	add.w	r3, r7, #12
 800a7da:	f04f 32ff 	mov.w	r2, #4294967295
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 ffda 	bl	800b798 <osMessageGet>
    if (event.status == osEventMessage)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b10      	cmp	r3, #16
 800a7e8:	d1f2      	bne.n	800a7d0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7ff faa8 	bl	8009d40 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a7f0:	e7ee      	b.n	800a7d0 <USBH_Process_OS+0x8>

0800a7f2 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b082      	sub	sp, #8
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a80e:	2200      	movs	r2, #0
 800a810:	4619      	mov	r1, r3
 800a812:	f000 ff81 	bl	800b718 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3708      	adds	r7, #8
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af02      	add	r7, sp, #8
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a832:	78fb      	ldrb	r3, [r7, #3]
 800a834:	b29b      	uxth	r3, r3
 800a836:	9300      	str	r3, [sp, #0]
 800a838:	4613      	mov	r3, r2
 800a83a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a83e:	2100      	movs	r1, #0
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f864 	bl	800a90e <USBH_GetDescriptor>
 800a846:	4603      	mov	r3, r0
 800a848:	73fb      	strb	r3, [r7, #15]
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a85c:	78fa      	ldrb	r2, [r7, #3]
 800a85e:	b292      	uxth	r2, r2
 800a860:	4619      	mov	r1, r3
 800a862:	f000 f918 	bl	800aa96 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a866:	7bfb      	ldrb	r3, [r7, #15]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af02      	add	r7, sp, #8
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	331c      	adds	r3, #28
 800a880:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a882:	887b      	ldrh	r3, [r7, #2]
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a88c:	2100      	movs	r1, #0
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f83d 	bl	800a90e <USBH_GetDescriptor>
 800a894:	4603      	mov	r3, r0
 800a896:	72fb      	strb	r3, [r7, #11]
 800a898:	7afb      	ldrb	r3, [r7, #11]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d107      	bne.n	800a8ae <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a8a4:	887a      	ldrh	r2, [r7, #2]
 800a8a6:	68f9      	ldr	r1, [r7, #12]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 f964 	bl	800ab76 <USBH_ParseCfgDesc>
  }

  return status;
 800a8ae:	7afb      	ldrb	r3, [r7, #11]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b088      	sub	sp, #32
 800a8bc:	af02      	add	r7, sp, #8
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	607a      	str	r2, [r7, #4]
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	72fb      	strb	r3, [r7, #11]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a8cc:	7afb      	ldrb	r3, [r7, #11]
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a8d4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a8dc:	893b      	ldrh	r3, [r7, #8]
 800a8de:	9300      	str	r3, [sp, #0]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f000 f812 	bl	800a90e <USBH_GetDescriptor>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	75fb      	strb	r3, [r7, #23]
 800a8ee:	7dfb      	ldrb	r3, [r7, #23]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d107      	bne.n	800a904 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a8fa:	893a      	ldrh	r2, [r7, #8]
 800a8fc:	6879      	ldr	r1, [r7, #4]
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 fa37 	bl	800ad72 <USBH_ParseStringDesc>
  }

  return status;
 800a904:	7dfb      	ldrb	r3, [r7, #23]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	60f8      	str	r0, [r7, #12]
 800a916:	607b      	str	r3, [r7, #4]
 800a918:	460b      	mov	r3, r1
 800a91a:	72fb      	strb	r3, [r7, #11]
 800a91c:	4613      	mov	r3, r2
 800a91e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	789b      	ldrb	r3, [r3, #2]
 800a924:	2b01      	cmp	r3, #1
 800a926:	d11c      	bne.n	800a962 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a928:	7afb      	ldrb	r3, [r7, #11]
 800a92a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2206      	movs	r2, #6
 800a938:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	893a      	ldrh	r2, [r7, #8]
 800a93e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a940:	893b      	ldrh	r3, [r7, #8]
 800a942:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a94a:	d104      	bne.n	800a956 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f240 4209 	movw	r2, #1033	; 0x409
 800a952:	829a      	strh	r2, [r3, #20]
 800a954:	e002      	b.n	800a95c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	8b3a      	ldrh	r2, [r7, #24]
 800a960:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a962:	8b3b      	ldrh	r3, [r7, #24]
 800a964:	461a      	mov	r2, r3
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f000 fa50 	bl	800ae0e <USBH_CtlReq>
 800a96e:	4603      	mov	r3, r0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	460b      	mov	r3, r1
 800a982:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	789b      	ldrb	r3, [r3, #2]
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d10f      	bne.n	800a9ac <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2205      	movs	r2, #5
 800a996:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a998:	78fb      	ldrb	r3, [r7, #3]
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fa2c 	bl	800ae0e <USBH_CtlReq>
 800a9b6:	4603      	mov	r3, r0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	789b      	ldrb	r3, [r3, #2]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d10e      	bne.n	800a9f2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2209      	movs	r2, #9
 800a9de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	887a      	ldrh	r2, [r7, #2]
 800a9e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 fa09 	bl	800ae0e <USBH_CtlReq>
 800a9fc:	4603      	mov	r3, r0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b082      	sub	sp, #8
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	789b      	ldrb	r3, [r3, #2]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d10f      	bne.n	800aa3a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2203      	movs	r2, #3
 800aa24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800aa26:	78fb      	ldrb	r3, [r7, #3]
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f9e5 	bl	800ae0e <USBH_CtlReq>
 800aa44:	4603      	mov	r3, r0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b082      	sub	sp, #8
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	460b      	mov	r3, r1
 800aa58:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	789b      	ldrb	r3, [r3, #2]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d10f      	bne.n	800aa82 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2202      	movs	r2, #2
 800aa66:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800aa74:	78fb      	ldrb	r3, [r7, #3]
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800aa82:	2200      	movs	r2, #0
 800aa84:	2100      	movs	r1, #0
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f9c1 	bl	800ae0e <USBH_CtlReq>
 800aa8c:	4603      	mov	r3, r0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b085      	sub	sp, #20
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	60b9      	str	r1, [r7, #8]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	781a      	ldrb	r2, [r3, #0]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	785a      	ldrb	r2, [r3, #1]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	3302      	adds	r3, #2
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	3303      	adds	r3, #3
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	021b      	lsls	r3, r3, #8
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	4313      	orrs	r3, r2
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	791a      	ldrb	r2, [r3, #4]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	795a      	ldrb	r2, [r3, #5]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	799a      	ldrb	r2, [r3, #6]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	79da      	ldrb	r2, [r3, #7]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800aaf0:	88fb      	ldrh	r3, [r7, #6]
 800aaf2:	2b08      	cmp	r3, #8
 800aaf4:	d939      	bls.n	800ab6a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	3308      	adds	r3, #8
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	b29a      	uxth	r2, r3
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	3309      	adds	r3, #9
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	021b      	lsls	r3, r3, #8
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	b29a      	uxth	r2, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	330a      	adds	r3, #10
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	330b      	adds	r3, #11
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	021b      	lsls	r3, r3, #8
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	4313      	orrs	r3, r2
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	330c      	adds	r3, #12
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	330d      	adds	r3, #13
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	021b      	lsls	r3, r3, #8
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	4313      	orrs	r3, r2
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	7b9a      	ldrb	r2, [r3, #14]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	7bda      	ldrb	r2, [r3, #15]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	7c1a      	ldrb	r2, [r3, #16]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	7c5a      	ldrb	r2, [r3, #17]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	745a      	strb	r2, [r3, #17]
  }
}
 800ab6a:	bf00      	nop
 800ab6c:	3714      	adds	r7, #20
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b08a      	sub	sp, #40	; 0x28
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	60f8      	str	r0, [r7, #12]
 800ab7e:	60b9      	str	r1, [r7, #8]
 800ab80:	4613      	mov	r3, r2
 800ab82:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	781a      	ldrb	r2, [r3, #0]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	785a      	ldrb	r2, [r3, #1]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	3302      	adds	r3, #2
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	b29a      	uxth	r2, r3
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	3303      	adds	r3, #3
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	021b      	lsls	r3, r3, #8
 800abba:	b29b      	uxth	r3, r3
 800abbc:	4313      	orrs	r3, r2
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	791a      	ldrb	r2, [r3, #4]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	795a      	ldrb	r2, [r3, #5]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	799a      	ldrb	r2, [r3, #6]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	79da      	ldrb	r2, [r3, #7]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	7a1a      	ldrb	r2, [r3, #8]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800abec:	88fb      	ldrh	r3, [r7, #6]
 800abee:	2b09      	cmp	r3, #9
 800abf0:	d95f      	bls.n	800acb2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800abf2:	2309      	movs	r3, #9
 800abf4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800abfa:	e051      	b.n	800aca0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800abfc:	f107 0316 	add.w	r3, r7, #22
 800ac00:	4619      	mov	r1, r3
 800ac02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac04:	f000 f8e8 	bl	800add8 <USBH_GetNextDesc>
 800ac08:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0c:	785b      	ldrb	r3, [r3, #1]
 800ac0e:	2b04      	cmp	r3, #4
 800ac10:	d146      	bne.n	800aca0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ac12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac16:	221a      	movs	r2, #26
 800ac18:	fb02 f303 	mul.w	r3, r2, r3
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	4413      	add	r3, r2
 800ac22:	3302      	adds	r3, #2
 800ac24:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ac26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac28:	69f8      	ldr	r0, [r7, #28]
 800ac2a:	f000 f846 	bl	800acba <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ac38:	e022      	b.n	800ac80 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ac3a:	f107 0316 	add.w	r3, r7, #22
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac42:	f000 f8c9 	bl	800add8 <USBH_GetNextDesc>
 800ac46:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4a:	785b      	ldrb	r3, [r3, #1]
 800ac4c:	2b05      	cmp	r3, #5
 800ac4e:	d117      	bne.n	800ac80 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ac50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac54:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ac58:	3201      	adds	r2, #1
 800ac5a:	00d2      	lsls	r2, r2, #3
 800ac5c:	211a      	movs	r1, #26
 800ac5e:	fb01 f303 	mul.w	r3, r1, r3
 800ac62:	4413      	add	r3, r2
 800ac64:	3308      	adds	r3, #8
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	4413      	add	r3, r2
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ac6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac70:	69b8      	ldr	r0, [r7, #24]
 800ac72:	f000 f851 	bl	800ad18 <USBH_ParseEPDesc>
            ep_ix++;
 800ac76:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	791b      	ldrb	r3, [r3, #4]
 800ac84:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d204      	bcs.n	800ac96 <USBH_ParseCfgDesc+0x120>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	885a      	ldrh	r2, [r3, #2]
 800ac90:	8afb      	ldrh	r3, [r7, #22]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d8d1      	bhi.n	800ac3a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ac96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aca0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d804      	bhi.n	800acb2 <USBH_ParseCfgDesc+0x13c>
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	885a      	ldrh	r2, [r3, #2]
 800acac:	8afb      	ldrh	r3, [r7, #22]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d8a4      	bhi.n	800abfc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800acb2:	bf00      	nop
 800acb4:	3728      	adds	r7, #40	; 0x28
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800acba:	b480      	push	{r7}
 800acbc:	b083      	sub	sp, #12
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	781a      	ldrb	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	785a      	ldrb	r2, [r3, #1]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	789a      	ldrb	r2, [r3, #2]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	78da      	ldrb	r2, [r3, #3]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	791a      	ldrb	r2, [r3, #4]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	795a      	ldrb	r2, [r3, #5]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	799a      	ldrb	r2, [r3, #6]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	79da      	ldrb	r2, [r3, #7]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	7a1a      	ldrb	r2, [r3, #8]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	721a      	strb	r2, [r3, #8]
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	781a      	ldrb	r2, [r3, #0]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	785a      	ldrb	r2, [r3, #1]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	789a      	ldrb	r2, [r3, #2]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	78da      	ldrb	r2, [r3, #3]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	3304      	adds	r3, #4
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	3305      	adds	r3, #5
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	021b      	lsls	r3, r3, #8
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	4313      	orrs	r3, r2
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	799a      	ldrb	r2, [r3, #6]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	719a      	strb	r2, [r3, #6]
}
 800ad66:	bf00      	nop
 800ad68:	370c      	adds	r7, #12
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ad72:	b480      	push	{r7}
 800ad74:	b087      	sub	sp, #28
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	60f8      	str	r0, [r7, #12]
 800ad7a:	60b9      	str	r1, [r7, #8]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	3301      	adds	r3, #1
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	d120      	bne.n	800adcc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	1e9a      	subs	r2, r3, #2
 800ad90:	88fb      	ldrh	r3, [r7, #6]
 800ad92:	4293      	cmp	r3, r2
 800ad94:	bf28      	it	cs
 800ad96:	4613      	movcs	r3, r2
 800ad98:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3302      	adds	r3, #2
 800ad9e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ada0:	2300      	movs	r3, #0
 800ada2:	82fb      	strh	r3, [r7, #22]
 800ada4:	e00b      	b.n	800adbe <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ada6:	8afb      	ldrh	r3, [r7, #22]
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	4413      	add	r3, r2
 800adac:	781a      	ldrb	r2, [r3, #0]
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	3301      	adds	r3, #1
 800adb6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800adb8:	8afb      	ldrh	r3, [r7, #22]
 800adba:	3302      	adds	r3, #2
 800adbc:	82fb      	strh	r3, [r7, #22]
 800adbe:	8afa      	ldrh	r2, [r7, #22]
 800adc0:	8abb      	ldrh	r3, [r7, #20]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d3ef      	bcc.n	800ada6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	2200      	movs	r2, #0
 800adca:	701a      	strb	r2, [r3, #0]
  }
}
 800adcc:	bf00      	nop
 800adce:	371c      	adds	r7, #28
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	881a      	ldrh	r2, [r3, #0]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	b29b      	uxth	r3, r3
 800adec:	4413      	add	r3, r2
 800adee:	b29a      	uxth	r2, r3
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4413      	add	r3, r2
 800adfe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ae00:	68fb      	ldr	r3, [r7, #12]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3714      	adds	r7, #20
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b086      	sub	sp, #24
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	789b      	ldrb	r3, [r3, #2]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d002      	beq.n	800ae2e <USBH_CtlReq+0x20>
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d01d      	beq.n	800ae68 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800ae2c:	e043      	b.n	800aeb6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	88fa      	ldrh	r2, [r7, #6]
 800ae38:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2202      	movs	r2, #2
 800ae44:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ae46:	2301      	movs	r3, #1
 800ae48:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2203      	movs	r2, #3
 800ae4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae5e:	2200      	movs	r2, #0
 800ae60:	4619      	mov	r1, r3
 800ae62:	f000 fc59 	bl	800b718 <osMessagePut>
      break;
 800ae66:	e026      	b.n	800aeb6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f000 f829 	bl	800aec0 <USBH_HandleControl>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ae72:	7dfb      	ldrb	r3, [r7, #23]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d002      	beq.n	800ae7e <USBH_CtlReq+0x70>
 800ae78:	7dfb      	ldrb	r3, [r7, #23]
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	d106      	bne.n	800ae8c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2201      	movs	r2, #1
 800ae82:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	761a      	strb	r2, [r3, #24]
 800ae8a:	e005      	b.n	800ae98 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800ae8c:	7dfb      	ldrb	r3, [r7, #23]
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d102      	bne.n	800ae98 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2201      	movs	r2, #1
 800ae96:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2203      	movs	r2, #3
 800ae9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aeac:	2200      	movs	r2, #0
 800aeae:	4619      	mov	r1, r3
 800aeb0:	f000 fc32 	bl	800b718 <osMessagePut>
      break;
 800aeb4:	bf00      	nop
  }
  return status;
 800aeb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3718      	adds	r7, #24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b086      	sub	sp, #24
 800aec4:	af02      	add	r7, sp, #8
 800aec6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aec8:	2301      	movs	r3, #1
 800aeca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aecc:	2300      	movs	r3, #0
 800aece:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	7e1b      	ldrb	r3, [r3, #24]
 800aed4:	3b01      	subs	r3, #1
 800aed6:	2b0a      	cmp	r3, #10
 800aed8:	f200 8229 	bhi.w	800b32e <USBH_HandleControl+0x46e>
 800aedc:	a201      	add	r2, pc, #4	; (adr r2, 800aee4 <USBH_HandleControl+0x24>)
 800aede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee2:	bf00      	nop
 800aee4:	0800af11 	.word	0x0800af11
 800aee8:	0800af2b 	.word	0x0800af2b
 800aeec:	0800afcd 	.word	0x0800afcd
 800aef0:	0800aff3 	.word	0x0800aff3
 800aef4:	0800b07f 	.word	0x0800b07f
 800aef8:	0800b0a9 	.word	0x0800b0a9
 800aefc:	0800b16b 	.word	0x0800b16b
 800af00:	0800b18d 	.word	0x0800b18d
 800af04:	0800b21f 	.word	0x0800b21f
 800af08:	0800b245 	.word	0x0800b245
 800af0c:	0800b2d7 	.word	0x0800b2d7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f103 0110 	add.w	r1, r3, #16
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	795b      	ldrb	r3, [r3, #5]
 800af1a:	461a      	mov	r2, r3
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 fa17 	bl	800b350 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2202      	movs	r2, #2
 800af26:	761a      	strb	r2, [r3, #24]
      break;
 800af28:	e20c      	b.n	800b344 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	795b      	ldrb	r3, [r3, #5]
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f002 fe73 	bl	800dc1c <USBH_LL_GetURBState>
 800af36:	4603      	mov	r3, r0
 800af38:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800af3a:	7bbb      	ldrb	r3, [r7, #14]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d12c      	bne.n	800af9a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7c1b      	ldrb	r3, [r3, #16]
 800af44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af48:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	8adb      	ldrh	r3, [r3, #22]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00a      	beq.n	800af68 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800af52:	7b7b      	ldrb	r3, [r7, #13]
 800af54:	2b80      	cmp	r3, #128	; 0x80
 800af56:	d103      	bne.n	800af60 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2203      	movs	r2, #3
 800af5c:	761a      	strb	r2, [r3, #24]
 800af5e:	e00d      	b.n	800af7c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2205      	movs	r2, #5
 800af64:	761a      	strb	r2, [r3, #24]
 800af66:	e009      	b.n	800af7c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800af68:	7b7b      	ldrb	r3, [r7, #13]
 800af6a:	2b80      	cmp	r3, #128	; 0x80
 800af6c:	d103      	bne.n	800af76 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2209      	movs	r2, #9
 800af72:	761a      	strb	r2, [r3, #24]
 800af74:	e002      	b.n	800af7c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2207      	movs	r2, #7
 800af7a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2203      	movs	r2, #3
 800af80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af90:	2200      	movs	r2, #0
 800af92:	4619      	mov	r1, r3
 800af94:	f000 fbc0 	bl	800b718 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af98:	e1cb      	b.n	800b332 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800af9a:	7bbb      	ldrb	r3, [r7, #14]
 800af9c:	2b04      	cmp	r3, #4
 800af9e:	d003      	beq.n	800afa8 <USBH_HandleControl+0xe8>
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	f040 81c5 	bne.w	800b332 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	220b      	movs	r2, #11
 800afac:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2203      	movs	r2, #3
 800afb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800afc2:	2200      	movs	r2, #0
 800afc4:	4619      	mov	r1, r3
 800afc6:	f000 fba7 	bl	800b718 <osMessagePut>
      break;
 800afca:	e1b2      	b.n	800b332 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6899      	ldr	r1, [r3, #8]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	899a      	ldrh	r2, [r3, #12]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	791b      	ldrb	r3, [r3, #4]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f9f2 	bl	800b3ce <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2204      	movs	r2, #4
 800afee:	761a      	strb	r2, [r3, #24]
      break;
 800aff0:	e1a8      	b.n	800b344 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	791b      	ldrb	r3, [r3, #4]
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f002 fe0f 	bl	800dc1c <USBH_LL_GetURBState>
 800affe:	4603      	mov	r3, r0
 800b000:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b002:	7bbb      	ldrb	r3, [r7, #14]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d110      	bne.n	800b02a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2209      	movs	r2, #9
 800b00c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2203      	movs	r2, #3
 800b012:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b022:	2200      	movs	r2, #0
 800b024:	4619      	mov	r1, r3
 800b026:	f000 fb77 	bl	800b718 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b02a:	7bbb      	ldrb	r3, [r7, #14]
 800b02c:	2b05      	cmp	r3, #5
 800b02e:	d110      	bne.n	800b052 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b030:	2303      	movs	r3, #3
 800b032:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2203      	movs	r2, #3
 800b038:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b048:	2200      	movs	r2, #0
 800b04a:	4619      	mov	r1, r3
 800b04c:	f000 fb64 	bl	800b718 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b050:	e171      	b.n	800b336 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b052:	7bbb      	ldrb	r3, [r7, #14]
 800b054:	2b04      	cmp	r3, #4
 800b056:	f040 816e 	bne.w	800b336 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	220b      	movs	r2, #11
 800b05e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2203      	movs	r2, #3
 800b064:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b074:	2200      	movs	r2, #0
 800b076:	4619      	mov	r1, r3
 800b078:	f000 fb4e 	bl	800b718 <osMessagePut>
      break;
 800b07c:	e15b      	b.n	800b336 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6899      	ldr	r1, [r3, #8]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	899a      	ldrh	r2, [r3, #12]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	795b      	ldrb	r3, [r3, #5]
 800b08a:	2001      	movs	r0, #1
 800b08c:	9000      	str	r0, [sp, #0]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 f978 	bl	800b384 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2206      	movs	r2, #6
 800b0a4:	761a      	strb	r2, [r3, #24]
      break;
 800b0a6:	e14d      	b.n	800b344 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	795b      	ldrb	r3, [r3, #5]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f002 fdb4 	bl	800dc1c <USBH_LL_GetURBState>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b0b8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d111      	bne.n	800b0e2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2207      	movs	r2, #7
 800b0c2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2203      	movs	r2, #3
 800b0c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b0d8:	2200      	movs	r2, #0
 800b0da:	4619      	mov	r1, r3
 800b0dc:	f000 fb1c 	bl	800b718 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b0e0:	e12b      	b.n	800b33a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	2b05      	cmp	r3, #5
 800b0e6:	d113      	bne.n	800b110 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	220c      	movs	r2, #12
 800b0ec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2203      	movs	r2, #3
 800b0f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b106:	2200      	movs	r2, #0
 800b108:	4619      	mov	r1, r3
 800b10a:	f000 fb05 	bl	800b718 <osMessagePut>
      break;
 800b10e:	e114      	b.n	800b33a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b110:	7bbb      	ldrb	r3, [r7, #14]
 800b112:	2b02      	cmp	r3, #2
 800b114:	d111      	bne.n	800b13a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2205      	movs	r2, #5
 800b11a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2203      	movs	r2, #3
 800b120:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b130:	2200      	movs	r2, #0
 800b132:	4619      	mov	r1, r3
 800b134:	f000 faf0 	bl	800b718 <osMessagePut>
      break;
 800b138:	e0ff      	b.n	800b33a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b13a:	7bbb      	ldrb	r3, [r7, #14]
 800b13c:	2b04      	cmp	r3, #4
 800b13e:	f040 80fc 	bne.w	800b33a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	220b      	movs	r2, #11
 800b146:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b148:	2302      	movs	r3, #2
 800b14a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2203      	movs	r2, #3
 800b150:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b160:	2200      	movs	r2, #0
 800b162:	4619      	mov	r1, r3
 800b164:	f000 fad8 	bl	800b718 <osMessagePut>
      break;
 800b168:	e0e7      	b.n	800b33a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	791b      	ldrb	r3, [r3, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	2100      	movs	r1, #0
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f92b 	bl	800b3ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b17e:	b29a      	uxth	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2208      	movs	r2, #8
 800b188:	761a      	strb	r2, [r3, #24]

      break;
 800b18a:	e0db      	b.n	800b344 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	791b      	ldrb	r3, [r3, #4]
 800b190:	4619      	mov	r1, r3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f002 fd42 	bl	800dc1c <USBH_LL_GetURBState>
 800b198:	4603      	mov	r3, r0
 800b19a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b19c:	7bbb      	ldrb	r3, [r7, #14]
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d113      	bne.n	800b1ca <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	220d      	movs	r2, #13
 800b1a6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2203      	movs	r2, #3
 800b1b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	f000 faa8 	bl	800b718 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b1c8:	e0b9      	b.n	800b33e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800b1ca:	7bbb      	ldrb	r3, [r7, #14]
 800b1cc:	2b04      	cmp	r3, #4
 800b1ce:	d111      	bne.n	800b1f4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	220b      	movs	r2, #11
 800b1d4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2203      	movs	r2, #3
 800b1da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	f000 fa93 	bl	800b718 <osMessagePut>
      break;
 800b1f2:	e0a4      	b.n	800b33e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800b1f4:	7bbb      	ldrb	r3, [r7, #14]
 800b1f6:	2b05      	cmp	r3, #5
 800b1f8:	f040 80a1 	bne.w	800b33e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2203      	movs	r2, #3
 800b204:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b214:	2200      	movs	r2, #0
 800b216:	4619      	mov	r1, r3
 800b218:	f000 fa7e 	bl	800b718 <osMessagePut>
      break;
 800b21c:	e08f      	b.n	800b33e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	795b      	ldrb	r3, [r3, #5]
 800b222:	2201      	movs	r2, #1
 800b224:	9200      	str	r2, [sp, #0]
 800b226:	2200      	movs	r2, #0
 800b228:	2100      	movs	r1, #0
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f8aa 	bl	800b384 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b236:	b29a      	uxth	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	220a      	movs	r2, #10
 800b240:	761a      	strb	r2, [r3, #24]
      break;
 800b242:	e07f      	b.n	800b344 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	795b      	ldrb	r3, [r3, #5]
 800b248:	4619      	mov	r1, r3
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f002 fce6 	bl	800dc1c <USBH_LL_GetURBState>
 800b250:	4603      	mov	r3, r0
 800b252:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b254:	7bbb      	ldrb	r3, [r7, #14]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d113      	bne.n	800b282 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800b25a:	2300      	movs	r3, #0
 800b25c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	220d      	movs	r2, #13
 800b262:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2203      	movs	r2, #3
 800b268:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b278:	2200      	movs	r2, #0
 800b27a:	4619      	mov	r1, r3
 800b27c:	f000 fa4c 	bl	800b718 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b280:	e05f      	b.n	800b342 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b282:	7bbb      	ldrb	r3, [r7, #14]
 800b284:	2b02      	cmp	r3, #2
 800b286:	d111      	bne.n	800b2ac <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2209      	movs	r2, #9
 800b28c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2203      	movs	r2, #3
 800b292:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	f000 fa37 	bl	800b718 <osMessagePut>
      break;
 800b2aa:	e04a      	b.n	800b342 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800b2ac:	7bbb      	ldrb	r3, [r7, #14]
 800b2ae:	2b04      	cmp	r3, #4
 800b2b0:	d147      	bne.n	800b342 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	220b      	movs	r2, #11
 800b2b6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2203      	movs	r2, #3
 800b2bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	f000 fa22 	bl	800b718 <osMessagePut>
      break;
 800b2d4:	e035      	b.n	800b342 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	7e5b      	ldrb	r3, [r3, #25]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	765a      	strb	r2, [r3, #25]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	7e5b      	ldrb	r3, [r3, #25]
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d806      	bhi.n	800b2f8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b2f6:	e025      	b.n	800b344 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2fe:	2106      	movs	r1, #6
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	795b      	ldrb	r3, [r3, #5]
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f90d 	bl	800b530 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	791b      	ldrb	r3, [r3, #4]
 800b31a:	4619      	mov	r1, r3
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f907 	bl	800b530 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b328:	2302      	movs	r3, #2
 800b32a:	73fb      	strb	r3, [r7, #15]
      break;
 800b32c:	e00a      	b.n	800b344 <USBH_HandleControl+0x484>

    default:
      break;
 800b32e:	bf00      	nop
 800b330:	e008      	b.n	800b344 <USBH_HandleControl+0x484>
      break;
 800b332:	bf00      	nop
 800b334:	e006      	b.n	800b344 <USBH_HandleControl+0x484>
      break;
 800b336:	bf00      	nop
 800b338:	e004      	b.n	800b344 <USBH_HandleControl+0x484>
      break;
 800b33a:	bf00      	nop
 800b33c:	e002      	b.n	800b344 <USBH_HandleControl+0x484>
      break;
 800b33e:	bf00      	nop
 800b340:	e000      	b.n	800b344 <USBH_HandleControl+0x484>
      break;
 800b342:	bf00      	nop
  }

  return status;
 800b344:	7bfb      	ldrb	r3, [r7, #15]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop

0800b350 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b088      	sub	sp, #32
 800b354:	af04      	add	r7, sp, #16
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	4613      	mov	r3, r2
 800b35c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b35e:	79f9      	ldrb	r1, [r7, #7]
 800b360:	2300      	movs	r3, #0
 800b362:	9303      	str	r3, [sp, #12]
 800b364:	2308      	movs	r3, #8
 800b366:	9302      	str	r3, [sp, #8]
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	9301      	str	r3, [sp, #4]
 800b36c:	2300      	movs	r3, #0
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	2300      	movs	r3, #0
 800b372:	2200      	movs	r2, #0
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f002 fc20 	bl	800dbba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b088      	sub	sp, #32
 800b388:	af04      	add	r7, sp, #16
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	4611      	mov	r1, r2
 800b390:	461a      	mov	r2, r3
 800b392:	460b      	mov	r3, r1
 800b394:	80fb      	strh	r3, [r7, #6]
 800b396:	4613      	mov	r3, r2
 800b398:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d001      	beq.n	800b3a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b3a8:	7979      	ldrb	r1, [r7, #5]
 800b3aa:	7e3b      	ldrb	r3, [r7, #24]
 800b3ac:	9303      	str	r3, [sp, #12]
 800b3ae:	88fb      	ldrh	r3, [r7, #6]
 800b3b0:	9302      	str	r3, [sp, #8]
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	9301      	str	r3, [sp, #4]
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	2200      	movs	r2, #0
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f002 fbfb 	bl	800dbba <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b088      	sub	sp, #32
 800b3d2:	af04      	add	r7, sp, #16
 800b3d4:	60f8      	str	r0, [r7, #12]
 800b3d6:	60b9      	str	r1, [r7, #8]
 800b3d8:	4611      	mov	r1, r2
 800b3da:	461a      	mov	r2, r3
 800b3dc:	460b      	mov	r3, r1
 800b3de:	80fb      	strh	r3, [r7, #6]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b3e4:	7979      	ldrb	r1, [r7, #5]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	9303      	str	r3, [sp, #12]
 800b3ea:	88fb      	ldrh	r3, [r7, #6]
 800b3ec:	9302      	str	r3, [sp, #8]
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	9301      	str	r3, [sp, #4]
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f002 fbdd 	bl	800dbba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b400:	2300      	movs	r3, #0

}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b088      	sub	sp, #32
 800b40e:	af04      	add	r7, sp, #16
 800b410:	60f8      	str	r0, [r7, #12]
 800b412:	60b9      	str	r1, [r7, #8]
 800b414:	4611      	mov	r1, r2
 800b416:	461a      	mov	r2, r3
 800b418:	460b      	mov	r3, r1
 800b41a:	80fb      	strh	r3, [r7, #6]
 800b41c:	4613      	mov	r3, r2
 800b41e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b42a:	2300      	movs	r3, #0
 800b42c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b42e:	7979      	ldrb	r1, [r7, #5]
 800b430:	7e3b      	ldrb	r3, [r7, #24]
 800b432:	9303      	str	r3, [sp, #12]
 800b434:	88fb      	ldrh	r3, [r7, #6]
 800b436:	9302      	str	r3, [sp, #8]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	9301      	str	r3, [sp, #4]
 800b43c:	2301      	movs	r3, #1
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	2302      	movs	r3, #2
 800b442:	2200      	movs	r2, #0
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f002 fbb8 	bl	800dbba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b088      	sub	sp, #32
 800b458:	af04      	add	r7, sp, #16
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	4611      	mov	r1, r2
 800b460:	461a      	mov	r2, r3
 800b462:	460b      	mov	r3, r1
 800b464:	80fb      	strh	r3, [r7, #6]
 800b466:	4613      	mov	r3, r2
 800b468:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b46a:	7979      	ldrb	r1, [r7, #5]
 800b46c:	2300      	movs	r3, #0
 800b46e:	9303      	str	r3, [sp, #12]
 800b470:	88fb      	ldrh	r3, [r7, #6]
 800b472:	9302      	str	r3, [sp, #8]
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	9301      	str	r3, [sp, #4]
 800b478:	2301      	movs	r3, #1
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	2302      	movs	r3, #2
 800b47e:	2201      	movs	r2, #1
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f002 fb9a 	bl	800dbba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af04      	add	r7, sp, #16
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	4608      	mov	r0, r1
 800b49a:	4611      	mov	r1, r2
 800b49c:	461a      	mov	r2, r3
 800b49e:	4603      	mov	r3, r0
 800b4a0:	70fb      	strb	r3, [r7, #3]
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	70bb      	strb	r3, [r7, #2]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b4aa:	7878      	ldrb	r0, [r7, #1]
 800b4ac:	78ba      	ldrb	r2, [r7, #2]
 800b4ae:	78f9      	ldrb	r1, [r7, #3]
 800b4b0:	8b3b      	ldrh	r3, [r7, #24]
 800b4b2:	9302      	str	r3, [sp, #8]
 800b4b4:	7d3b      	ldrb	r3, [r7, #20]
 800b4b6:	9301      	str	r3, [sp, #4]
 800b4b8:	7c3b      	ldrb	r3, [r7, #16]
 800b4ba:	9300      	str	r3, [sp, #0]
 800b4bc:	4603      	mov	r3, r0
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f002 fb2d 	bl	800db1e <USBH_LL_OpenPipe>

  return USBH_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b082      	sub	sp, #8
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b4da:	78fb      	ldrb	r3, [r7, #3]
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f002 fb4c 	bl	800db7c <USBH_LL_ClosePipe>

  return USBH_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b084      	sub	sp, #16
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 f836 	bl	800b56c <USBH_GetFreePipe>
 800b500:	4603      	mov	r3, r0
 800b502:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b504:	89fb      	ldrh	r3, [r7, #14]
 800b506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d00a      	beq.n	800b524 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b50e:	78fa      	ldrb	r2, [r7, #3]
 800b510:	89fb      	ldrh	r3, [r7, #14]
 800b512:	f003 030f 	and.w	r3, r3, #15
 800b516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b51a:	6879      	ldr	r1, [r7, #4]
 800b51c:	33e0      	adds	r3, #224	; 0xe0
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	440b      	add	r3, r1
 800b522:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b524:	89fb      	ldrh	r3, [r7, #14]
 800b526:	b2db      	uxtb	r3, r3
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b53c:	78fb      	ldrb	r3, [r7, #3]
 800b53e:	2b0a      	cmp	r3, #10
 800b540:	d80d      	bhi.n	800b55e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b542:	78fb      	ldrb	r3, [r7, #3]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	33e0      	adds	r3, #224	; 0xe0
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4413      	add	r3, r2
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	78fb      	ldrb	r3, [r7, #3]
 800b550:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b554:	6879      	ldr	r1, [r7, #4]
 800b556:	33e0      	adds	r3, #224	; 0xe0
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	440b      	add	r3, r1
 800b55c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b085      	sub	sp, #20
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b574:	2300      	movs	r3, #0
 800b576:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b578:	2300      	movs	r3, #0
 800b57a:	73fb      	strb	r3, [r7, #15]
 800b57c:	e00f      	b.n	800b59e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b57e:	7bfb      	ldrb	r3, [r7, #15]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	33e0      	adds	r3, #224	; 0xe0
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4413      	add	r3, r2
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d102      	bne.n	800b598 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b592:	7bfb      	ldrb	r3, [r7, #15]
 800b594:	b29b      	uxth	r3, r3
 800b596:	e007      	b.n	800b5a8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b598:	7bfb      	ldrb	r3, [r7, #15]
 800b59a:	3301      	adds	r3, #1
 800b59c:	73fb      	strb	r3, [r7, #15]
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
 800b5a0:	2b0a      	cmp	r3, #10
 800b5a2:	d9ec      	bls.n	800b57e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b5a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3714      	adds	r7, #20
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b5c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5c6:	2b84      	cmp	r3, #132	; 0x84
 800b5c8:	d005      	beq.n	800b5d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b5ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	3303      	adds	r3, #3
 800b5d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5ea:	f3ef 8305 	mrs	r3, IPSR
 800b5ee:	607b      	str	r3, [r7, #4]
  return(result);
 800b5f0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	bf14      	ite	ne
 800b5f6:	2301      	movne	r3, #1
 800b5f8:	2300      	moveq	r3, #0
 800b5fa:	b2db      	uxtb	r3, r3
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b60a:	b089      	sub	sp, #36	; 0x24
 800b60c:	af04      	add	r7, sp, #16
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	695b      	ldr	r3, [r3, #20]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d020      	beq.n	800b65c <osThreadCreate+0x54>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	699b      	ldr	r3, [r3, #24]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d01c      	beq.n	800b65c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	685c      	ldr	r4, [r3, #4]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681d      	ldr	r5, [r3, #0]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	691e      	ldr	r6, [r3, #16]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b634:	4618      	mov	r0, r3
 800b636:	f7ff ffbd 	bl	800b5b4 <makeFreeRtosPriority>
 800b63a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b644:	9202      	str	r2, [sp, #8]
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	9100      	str	r1, [sp, #0]
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	4632      	mov	r2, r6
 800b64e:	4629      	mov	r1, r5
 800b650:	4620      	mov	r0, r4
 800b652:	f000 ff0d 	bl	800c470 <xTaskCreateStatic>
 800b656:	4603      	mov	r3, r0
 800b658:	60fb      	str	r3, [r7, #12]
 800b65a:	e01c      	b.n	800b696 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685c      	ldr	r4, [r3, #4]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b668:	b29e      	uxth	r6, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b670:	4618      	mov	r0, r3
 800b672:	f7ff ff9f 	bl	800b5b4 <makeFreeRtosPriority>
 800b676:	4602      	mov	r2, r0
 800b678:	f107 030c 	add.w	r3, r7, #12
 800b67c:	9301      	str	r3, [sp, #4]
 800b67e:	9200      	str	r2, [sp, #0]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	4632      	mov	r2, r6
 800b684:	4629      	mov	r1, r5
 800b686:	4620      	mov	r0, r4
 800b688:	f000 ff4f 	bl	800c52a <xTaskCreate>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d001      	beq.n	800b696 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b692:	2300      	movs	r3, #0
 800b694:	e000      	b.n	800b698 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b696:	68fb      	ldr	r3, [r7, #12]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3714      	adds	r7, #20
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <osDelay+0x16>
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	e000      	b.n	800b6b8 <osDelay+0x18>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f001 f877 	bl	800c7ac <vTaskDelay>
  
  return osOK;
 800b6be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3710      	adds	r7, #16
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b6c8:	b590      	push	{r4, r7, lr}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af02      	add	r7, sp, #8
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d011      	beq.n	800b6fe <osMessageCreate+0x36>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00d      	beq.n	800b6fe <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6818      	ldr	r0, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6859      	ldr	r1, [r3, #4]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	689a      	ldr	r2, [r3, #8]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	2400      	movs	r4, #0
 800b6f4:	9400      	str	r4, [sp, #0]
 800b6f6:	f000 f9df 	bl	800bab8 <xQueueGenericCreateStatic>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	e008      	b.n	800b710 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6818      	ldr	r0, [r3, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	4619      	mov	r1, r3
 800b70a:	f000 fa4d 	bl	800bba8 <xQueueGenericCreate>
 800b70e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b710:	4618      	mov	r0, r3
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	bd90      	pop	{r4, r7, pc}

0800b718 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b724:	2300      	movs	r3, #0
 800b726:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <osMessagePut+0x1e>
    ticks = 1;
 800b732:	2301      	movs	r3, #1
 800b734:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b736:	f7ff ff55 	bl	800b5e4 <inHandlerMode>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d018      	beq.n	800b772 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b740:	f107 0210 	add.w	r2, r7, #16
 800b744:	f107 0108 	add.w	r1, r7, #8
 800b748:	2300      	movs	r3, #0
 800b74a:	68f8      	ldr	r0, [r7, #12]
 800b74c:	f000 fb84 	bl	800be58 <xQueueGenericSendFromISR>
 800b750:	4603      	mov	r3, r0
 800b752:	2b01      	cmp	r3, #1
 800b754:	d001      	beq.n	800b75a <osMessagePut+0x42>
      return osErrorOS;
 800b756:	23ff      	movs	r3, #255	; 0xff
 800b758:	e018      	b.n	800b78c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d014      	beq.n	800b78a <osMessagePut+0x72>
 800b760:	4b0c      	ldr	r3, [pc, #48]	; (800b794 <osMessagePut+0x7c>)
 800b762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	e00b      	b.n	800b78a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b772:	f107 0108 	add.w	r1, r7, #8
 800b776:	2300      	movs	r3, #0
 800b778:	697a      	ldr	r2, [r7, #20]
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f000 fa6e 	bl	800bc5c <xQueueGenericSend>
 800b780:	4603      	mov	r3, r0
 800b782:	2b01      	cmp	r3, #1
 800b784:	d001      	beq.n	800b78a <osMessagePut+0x72>
      return osErrorOS;
 800b786:	23ff      	movs	r3, #255	; 0xff
 800b788:	e000      	b.n	800b78c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3718      	adds	r7, #24
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	e000ed04 	.word	0xe000ed04

0800b798 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b798:	b590      	push	{r4, r7, lr}
 800b79a:	b08b      	sub	sp, #44	; 0x2c
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10a      	bne.n	800b7c8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b7b2:	2380      	movs	r3, #128	; 0x80
 800b7b4:	617b      	str	r3, [r7, #20]
    return event;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	461c      	mov	r4, r3
 800b7ba:	f107 0314 	add.w	r3, r7, #20
 800b7be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b7c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b7c6:	e054      	b.n	800b872 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d6:	d103      	bne.n	800b7e0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b7d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b7de:	e009      	b.n	800b7f4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d006      	beq.n	800b7f4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d101      	bne.n	800b7f4 <osMessageGet+0x5c>
      ticks = 1;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b7f4:	f7ff fef6 	bl	800b5e4 <inHandlerMode>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d01c      	beq.n	800b838 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b7fe:	f107 0220 	add.w	r2, r7, #32
 800b802:	f107 0314 	add.w	r3, r7, #20
 800b806:	3304      	adds	r3, #4
 800b808:	4619      	mov	r1, r3
 800b80a:	68b8      	ldr	r0, [r7, #8]
 800b80c:	f000 fca0 	bl	800c150 <xQueueReceiveFromISR>
 800b810:	4603      	mov	r3, r0
 800b812:	2b01      	cmp	r3, #1
 800b814:	d102      	bne.n	800b81c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b816:	2310      	movs	r3, #16
 800b818:	617b      	str	r3, [r7, #20]
 800b81a:	e001      	b.n	800b820 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b820:	6a3b      	ldr	r3, [r7, #32]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d01d      	beq.n	800b862 <osMessageGet+0xca>
 800b826:	4b15      	ldr	r3, [pc, #84]	; (800b87c <osMessageGet+0xe4>)
 800b828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82c:	601a      	str	r2, [r3, #0]
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	e014      	b.n	800b862 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b838:	f107 0314 	add.w	r3, r7, #20
 800b83c:	3304      	adds	r3, #4
 800b83e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b840:	4619      	mov	r1, r3
 800b842:	68b8      	ldr	r0, [r7, #8]
 800b844:	f000 fba4 	bl	800bf90 <xQueueReceive>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d102      	bne.n	800b854 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b84e:	2310      	movs	r3, #16
 800b850:	617b      	str	r3, [r7, #20]
 800b852:	e006      	b.n	800b862 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <osMessageGet+0xc6>
 800b85a:	2300      	movs	r3, #0
 800b85c:	e000      	b.n	800b860 <osMessageGet+0xc8>
 800b85e:	2340      	movs	r3, #64	; 0x40
 800b860:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	461c      	mov	r4, r3
 800b866:	f107 0314 	add.w	r3, r7, #20
 800b86a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b86e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	372c      	adds	r7, #44	; 0x2c
 800b876:	46bd      	mov	sp, r7
 800b878:	bd90      	pop	{r4, r7, pc}
 800b87a:	bf00      	nop
 800b87c:	e000ed04 	.word	0xe000ed04

0800b880 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f103 0208 	add.w	r2, r3, #8
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f04f 32ff 	mov.w	r2, #4294967295
 800b898:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f103 0208 	add.w	r2, r3, #8
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f103 0208 	add.w	r2, r3, #8
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b8ce:	bf00      	nop
 800b8d0:	370c      	adds	r7, #12
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr

0800b8da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8da:	b480      	push	{r7}
 800b8dc:	b085      	sub	sp, #20
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	689a      	ldr	r2, [r3, #8]
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	683a      	ldr	r2, [r7, #0]
 800b8fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	1c5a      	adds	r2, r3, #1
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	601a      	str	r2, [r3, #0]
}
 800b916:	bf00      	nop
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b922:	b480      	push	{r7}
 800b924:	b085      	sub	sp, #20
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b938:	d103      	bne.n	800b942 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	e00c      	b.n	800b95c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	3308      	adds	r3, #8
 800b946:	60fb      	str	r3, [r7, #12]
 800b948:	e002      	b.n	800b950 <vListInsert+0x2e>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	60fb      	str	r3, [r7, #12]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68ba      	ldr	r2, [r7, #8]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d2f6      	bcs.n	800b94a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	683a      	ldr	r2, [r7, #0]
 800b96a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	1c5a      	adds	r2, r3, #1
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	601a      	str	r2, [r3, #0]
}
 800b988:	bf00      	nop
 800b98a:	3714      	adds	r7, #20
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	691b      	ldr	r3, [r3, #16]
 800b9a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	6892      	ldr	r2, [r2, #8]
 800b9aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	6852      	ldr	r2, [r2, #4]
 800b9b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d103      	bne.n	800b9c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689a      	ldr	r2, [r3, #8]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	1e5a      	subs	r2, r3, #1
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10a      	bne.n	800ba12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba0e:	bf00      	nop
 800ba10:	e7fe      	b.n	800ba10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ba12:	f001 fbc9 	bl	800d1a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba1e:	68f9      	ldr	r1, [r7, #12]
 800ba20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba22:	fb01 f303 	mul.w	r3, r1, r3
 800ba26:	441a      	add	r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba42:	3b01      	subs	r3, #1
 800ba44:	68f9      	ldr	r1, [r7, #12]
 800ba46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba48:	fb01 f303 	mul.w	r3, r1, r3
 800ba4c:	441a      	add	r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	22ff      	movs	r2, #255	; 0xff
 800ba56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	22ff      	movs	r2, #255	; 0xff
 800ba5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d114      	bne.n	800ba92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d01a      	beq.n	800baa6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	3310      	adds	r3, #16
 800ba74:	4618      	mov	r0, r3
 800ba76:	f001 f8d3 	bl	800cc20 <xTaskRemoveFromEventList>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d012      	beq.n	800baa6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ba80:	4b0c      	ldr	r3, [pc, #48]	; (800bab4 <xQueueGenericReset+0xcc>)
 800ba82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba86:	601a      	str	r2, [r3, #0]
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	e009      	b.n	800baa6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	3310      	adds	r3, #16
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7ff fef2 	bl	800b880 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	3324      	adds	r3, #36	; 0x24
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7ff feed 	bl	800b880 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800baa6:	f001 fbaf 	bl	800d208 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800baaa:	2301      	movs	r3, #1
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	e000ed04 	.word	0xe000ed04

0800bab8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b08e      	sub	sp, #56	; 0x38
 800babc:	af02      	add	r7, sp, #8
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	607a      	str	r2, [r7, #4]
 800bac4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10a      	bne.n	800bae2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad0:	f383 8811 	msr	BASEPRI, r3
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	f3bf 8f4f 	dsb	sy
 800badc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bade:	bf00      	nop
 800bae0:	e7fe      	b.n	800bae0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10a      	bne.n	800bafe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bafa:	bf00      	nop
 800bafc:	e7fe      	b.n	800bafc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d002      	beq.n	800bb0a <xQueueGenericCreateStatic+0x52>
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d001      	beq.n	800bb0e <xQueueGenericCreateStatic+0x56>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e000      	b.n	800bb10 <xQueueGenericCreateStatic+0x58>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10a      	bne.n	800bb2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb18:	f383 8811 	msr	BASEPRI, r3
 800bb1c:	f3bf 8f6f 	isb	sy
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	623b      	str	r3, [r7, #32]
}
 800bb26:	bf00      	nop
 800bb28:	e7fe      	b.n	800bb28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d102      	bne.n	800bb36 <xQueueGenericCreateStatic+0x7e>
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d101      	bne.n	800bb3a <xQueueGenericCreateStatic+0x82>
 800bb36:	2301      	movs	r3, #1
 800bb38:	e000      	b.n	800bb3c <xQueueGenericCreateStatic+0x84>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10a      	bne.n	800bb56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	61fb      	str	r3, [r7, #28]
}
 800bb52:	bf00      	nop
 800bb54:	e7fe      	b.n	800bb54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bb56:	2348      	movs	r3, #72	; 0x48
 800bb58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	2b48      	cmp	r3, #72	; 0x48
 800bb5e:	d00a      	beq.n	800bb76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	61bb      	str	r3, [r7, #24]
}
 800bb72:	bf00      	nop
 800bb74:	e7fe      	b.n	800bb74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bb76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00d      	beq.n	800bb9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb84:	2201      	movs	r2, #1
 800bb86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	4613      	mov	r3, r2
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	68b9      	ldr	r1, [r7, #8]
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f000 f83f 	bl	800bc1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3730      	adds	r7, #48	; 0x30
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08a      	sub	sp, #40	; 0x28
 800bbac:	af02      	add	r7, sp, #8
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10a      	bne.n	800bbd2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc0:	f383 8811 	msr	BASEPRI, r3
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	613b      	str	r3, [r7, #16]
}
 800bbce:	bf00      	nop
 800bbd0:	e7fe      	b.n	800bbd0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	68ba      	ldr	r2, [r7, #8]
 800bbd6:	fb02 f303 	mul.w	r3, r2, r3
 800bbda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	3348      	adds	r3, #72	; 0x48
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f001 fbd3 	bl	800d38c <pvPortMalloc>
 800bbe6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d011      	beq.n	800bc12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	3348      	adds	r3, #72	; 0x48
 800bbf6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc00:	79fa      	ldrb	r2, [r7, #7]
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	4613      	mov	r3, r2
 800bc08:	697a      	ldr	r2, [r7, #20]
 800bc0a:	68b9      	ldr	r1, [r7, #8]
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f000 f805 	bl	800bc1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc12:	69bb      	ldr	r3, [r7, #24]
	}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3720      	adds	r7, #32
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d103      	bne.n	800bc38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	69ba      	ldr	r2, [r7, #24]
 800bc34:	601a      	str	r2, [r3, #0]
 800bc36:	e002      	b.n	800bc3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc38:	69bb      	ldr	r3, [r7, #24]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	69b8      	ldr	r0, [r7, #24]
 800bc4e:	f7ff fecb 	bl	800b9e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bc52:	bf00      	nop
 800bc54:	3710      	adds	r7, #16
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
	...

0800bc5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b08e      	sub	sp, #56	; 0x38
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
 800bc68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10a      	bne.n	800bc8e <xQueueGenericSend+0x32>
	__asm volatile
 800bc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc8a:	bf00      	nop
 800bc8c:	e7fe      	b.n	800bc8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d103      	bne.n	800bc9c <xQueueGenericSend+0x40>
 800bc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d101      	bne.n	800bca0 <xQueueGenericSend+0x44>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e000      	b.n	800bca2 <xQueueGenericSend+0x46>
 800bca0:	2300      	movs	r3, #0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10a      	bne.n	800bcbc <xQueueGenericSend+0x60>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bcb8:	bf00      	nop
 800bcba:	e7fe      	b.n	800bcba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	2b02      	cmp	r3, #2
 800bcc0:	d103      	bne.n	800bcca <xQueueGenericSend+0x6e>
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d101      	bne.n	800bcce <xQueueGenericSend+0x72>
 800bcca:	2301      	movs	r3, #1
 800bccc:	e000      	b.n	800bcd0 <xQueueGenericSend+0x74>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10a      	bne.n	800bcea <xQueueGenericSend+0x8e>
	__asm volatile
 800bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	623b      	str	r3, [r7, #32]
}
 800bce6:	bf00      	nop
 800bce8:	e7fe      	b.n	800bce8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcea:	f001 f8df 	bl	800ceac <xTaskGetSchedulerState>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d102      	bne.n	800bcfa <xQueueGenericSend+0x9e>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d101      	bne.n	800bcfe <xQueueGenericSend+0xa2>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e000      	b.n	800bd00 <xQueueGenericSend+0xa4>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10a      	bne.n	800bd1a <xQueueGenericSend+0xbe>
	__asm volatile
 800bd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	61fb      	str	r3, [r7, #28]
}
 800bd16:	bf00      	nop
 800bd18:	e7fe      	b.n	800bd18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd1a:	f001 fa45 	bl	800d1a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d302      	bcc.n	800bd30 <xQueueGenericSend+0xd4>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d129      	bne.n	800bd84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	68b9      	ldr	r1, [r7, #8]
 800bd34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd36:	f000 fa8b 	bl	800c250 <prvCopyDataToQueue>
 800bd3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d010      	beq.n	800bd66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd46:	3324      	adds	r3, #36	; 0x24
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 ff69 	bl	800cc20 <xTaskRemoveFromEventList>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d013      	beq.n	800bd7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd54:	4b3f      	ldr	r3, [pc, #252]	; (800be54 <xQueueGenericSend+0x1f8>)
 800bd56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd5a:	601a      	str	r2, [r3, #0]
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	e00a      	b.n	800bd7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d007      	beq.n	800bd7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd6c:	4b39      	ldr	r3, [pc, #228]	; (800be54 <xQueueGenericSend+0x1f8>)
 800bd6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	f3bf 8f4f 	dsb	sy
 800bd78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd7c:	f001 fa44 	bl	800d208 <vPortExitCritical>
				return pdPASS;
 800bd80:	2301      	movs	r3, #1
 800bd82:	e063      	b.n	800be4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d103      	bne.n	800bd92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd8a:	f001 fa3d 	bl	800d208 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	e05c      	b.n	800be4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d106      	bne.n	800bda6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd98:	f107 0314 	add.w	r3, r7, #20
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f000 ffa1 	bl	800cce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bda2:	2301      	movs	r3, #1
 800bda4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bda6:	f001 fa2f 	bl	800d208 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdaa:	f000 fd33 	bl	800c814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdae:	f001 f9fb 	bl	800d1a8 <vPortEnterCritical>
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdb8:	b25b      	sxtb	r3, r3
 800bdba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdbe:	d103      	bne.n	800bdc8 <xQueueGenericSend+0x16c>
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdce:	b25b      	sxtb	r3, r3
 800bdd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd4:	d103      	bne.n	800bdde <xQueueGenericSend+0x182>
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdde:	f001 fa13 	bl	800d208 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bde2:	1d3a      	adds	r2, r7, #4
 800bde4:	f107 0314 	add.w	r3, r7, #20
 800bde8:	4611      	mov	r1, r2
 800bdea:	4618      	mov	r0, r3
 800bdec:	f000 ff90 	bl	800cd10 <xTaskCheckForTimeOut>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d124      	bne.n	800be40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bdf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdf8:	f000 fb22 	bl	800c440 <prvIsQueueFull>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d018      	beq.n	800be34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	3310      	adds	r3, #16
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	4611      	mov	r1, r2
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 fee4 	bl	800cbd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be12:	f000 faad 	bl	800c370 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be16:	f000 fd0b 	bl	800c830 <xTaskResumeAll>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f47f af7c 	bne.w	800bd1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800be22:	4b0c      	ldr	r3, [pc, #48]	; (800be54 <xQueueGenericSend+0x1f8>)
 800be24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be28:	601a      	str	r2, [r3, #0]
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	f3bf 8f6f 	isb	sy
 800be32:	e772      	b.n	800bd1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be36:	f000 fa9b 	bl	800c370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be3a:	f000 fcf9 	bl	800c830 <xTaskResumeAll>
 800be3e:	e76c      	b.n	800bd1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be42:	f000 fa95 	bl	800c370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be46:	f000 fcf3 	bl	800c830 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3738      	adds	r7, #56	; 0x38
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	e000ed04 	.word	0xe000ed04

0800be58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b090      	sub	sp, #64	; 0x40
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
 800be64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800be6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10a      	bne.n	800be86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800be70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be82:	bf00      	nop
 800be84:	e7fe      	b.n	800be84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d103      	bne.n	800be94 <xQueueGenericSendFromISR+0x3c>
 800be8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be90:	2b00      	cmp	r3, #0
 800be92:	d101      	bne.n	800be98 <xQueueGenericSendFromISR+0x40>
 800be94:	2301      	movs	r3, #1
 800be96:	e000      	b.n	800be9a <xQueueGenericSendFromISR+0x42>
 800be98:	2300      	movs	r3, #0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10a      	bne.n	800beb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800beb0:	bf00      	nop
 800beb2:	e7fe      	b.n	800beb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2b02      	cmp	r3, #2
 800beb8:	d103      	bne.n	800bec2 <xQueueGenericSendFromISR+0x6a>
 800beba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d101      	bne.n	800bec6 <xQueueGenericSendFromISR+0x6e>
 800bec2:	2301      	movs	r3, #1
 800bec4:	e000      	b.n	800bec8 <xQueueGenericSendFromISR+0x70>
 800bec6:	2300      	movs	r3, #0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10a      	bne.n	800bee2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800becc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed0:	f383 8811 	msr	BASEPRI, r3
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	623b      	str	r3, [r7, #32]
}
 800bede:	bf00      	nop
 800bee0:	e7fe      	b.n	800bee0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bee2:	f001 fa13 	bl	800d30c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bee6:	f3ef 8211 	mrs	r2, BASEPRI
 800beea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	61fa      	str	r2, [r7, #28]
 800befc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800befe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d302      	bcc.n	800bf14 <xQueueGenericSendFromISR+0xbc>
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d12f      	bne.n	800bf74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf22:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf24:	683a      	ldr	r2, [r7, #0]
 800bf26:	68b9      	ldr	r1, [r7, #8]
 800bf28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf2a:	f000 f991 	bl	800c250 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bf32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf36:	d112      	bne.n	800bf5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d016      	beq.n	800bf6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf42:	3324      	adds	r3, #36	; 0x24
 800bf44:	4618      	mov	r0, r3
 800bf46:	f000 fe6b 	bl	800cc20 <xTaskRemoveFromEventList>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00e      	beq.n	800bf6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00b      	beq.n	800bf6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	601a      	str	r2, [r3, #0]
 800bf5c:	e007      	b.n	800bf6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf62:	3301      	adds	r3, #1
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	b25a      	sxtb	r2, r3
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bf72:	e001      	b.n	800bf78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf74:	2300      	movs	r3, #0
 800bf76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3740      	adds	r7, #64	; 0x40
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
	...

0800bf90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b08c      	sub	sp, #48	; 0x30
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10a      	bne.n	800bfc0 <xQueueReceive+0x30>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	623b      	str	r3, [r7, #32]
}
 800bfbc:	bf00      	nop
 800bfbe:	e7fe      	b.n	800bfbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d103      	bne.n	800bfce <xQueueReceive+0x3e>
 800bfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d101      	bne.n	800bfd2 <xQueueReceive+0x42>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e000      	b.n	800bfd4 <xQueueReceive+0x44>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d10a      	bne.n	800bfee <xQueueReceive+0x5e>
	__asm volatile
 800bfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfdc:	f383 8811 	msr	BASEPRI, r3
 800bfe0:	f3bf 8f6f 	isb	sy
 800bfe4:	f3bf 8f4f 	dsb	sy
 800bfe8:	61fb      	str	r3, [r7, #28]
}
 800bfea:	bf00      	nop
 800bfec:	e7fe      	b.n	800bfec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfee:	f000 ff5d 	bl	800ceac <xTaskGetSchedulerState>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d102      	bne.n	800bffe <xQueueReceive+0x6e>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d101      	bne.n	800c002 <xQueueReceive+0x72>
 800bffe:	2301      	movs	r3, #1
 800c000:	e000      	b.n	800c004 <xQueueReceive+0x74>
 800c002:	2300      	movs	r3, #0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10a      	bne.n	800c01e <xQueueReceive+0x8e>
	__asm volatile
 800c008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	61bb      	str	r3, [r7, #24]
}
 800c01a:	bf00      	nop
 800c01c:	e7fe      	b.n	800c01c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c01e:	f001 f8c3 	bl	800d1a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c026:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d01f      	beq.n	800c06e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c02e:	68b9      	ldr	r1, [r7, #8]
 800c030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c032:	f000 f977 	bl	800c324 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c038:	1e5a      	subs	r2, r3, #1
 800c03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00f      	beq.n	800c066 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	3310      	adds	r3, #16
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 fde8 	bl	800cc20 <xTaskRemoveFromEventList>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d007      	beq.n	800c066 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c056:	4b3d      	ldr	r3, [pc, #244]	; (800c14c <xQueueReceive+0x1bc>)
 800c058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c05c:	601a      	str	r2, [r3, #0]
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c066:	f001 f8cf 	bl	800d208 <vPortExitCritical>
				return pdPASS;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e069      	b.n	800c142 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d103      	bne.n	800c07c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c074:	f001 f8c8 	bl	800d208 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c078:	2300      	movs	r3, #0
 800c07a:	e062      	b.n	800c142 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d106      	bne.n	800c090 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c082:	f107 0310 	add.w	r3, r7, #16
 800c086:	4618      	mov	r0, r3
 800c088:	f000 fe2c 	bl	800cce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c08c:	2301      	movs	r3, #1
 800c08e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c090:	f001 f8ba 	bl	800d208 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c094:	f000 fbbe 	bl	800c814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c098:	f001 f886 	bl	800d1a8 <vPortEnterCritical>
 800c09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0a2:	b25b      	sxtb	r3, r3
 800c0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a8:	d103      	bne.n	800c0b2 <xQueueReceive+0x122>
 800c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0b8:	b25b      	sxtb	r3, r3
 800c0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0be:	d103      	bne.n	800c0c8 <xQueueReceive+0x138>
 800c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0c8:	f001 f89e 	bl	800d208 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0cc:	1d3a      	adds	r2, r7, #4
 800c0ce:	f107 0310 	add.w	r3, r7, #16
 800c0d2:	4611      	mov	r1, r2
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f000 fe1b 	bl	800cd10 <xTaskCheckForTimeOut>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d123      	bne.n	800c128 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0e2:	f000 f997 	bl	800c414 <prvIsQueueEmpty>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d017      	beq.n	800c11c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ee:	3324      	adds	r3, #36	; 0x24
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	4611      	mov	r1, r2
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f000 fd6f 	bl	800cbd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c0fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0fc:	f000 f938 	bl	800c370 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c100:	f000 fb96 	bl	800c830 <xTaskResumeAll>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d189      	bne.n	800c01e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c10a:	4b10      	ldr	r3, [pc, #64]	; (800c14c <xQueueReceive+0x1bc>)
 800c10c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c110:	601a      	str	r2, [r3, #0]
 800c112:	f3bf 8f4f 	dsb	sy
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	e780      	b.n	800c01e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c11c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c11e:	f000 f927 	bl	800c370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c122:	f000 fb85 	bl	800c830 <xTaskResumeAll>
 800c126:	e77a      	b.n	800c01e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c12a:	f000 f921 	bl	800c370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c12e:	f000 fb7f 	bl	800c830 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c134:	f000 f96e 	bl	800c414 <prvIsQueueEmpty>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f43f af6f 	beq.w	800c01e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c140:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c142:	4618      	mov	r0, r3
 800c144:	3730      	adds	r7, #48	; 0x30
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	e000ed04 	.word	0xe000ed04

0800c150 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b08e      	sub	sp, #56	; 0x38
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10a      	bne.n	800c17c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	623b      	str	r3, [r7, #32]
}
 800c178:	bf00      	nop
 800c17a:	e7fe      	b.n	800c17a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d103      	bne.n	800c18a <xQueueReceiveFromISR+0x3a>
 800c182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c186:	2b00      	cmp	r3, #0
 800c188:	d101      	bne.n	800c18e <xQueueReceiveFromISR+0x3e>
 800c18a:	2301      	movs	r3, #1
 800c18c:	e000      	b.n	800c190 <xQueueReceiveFromISR+0x40>
 800c18e:	2300      	movs	r3, #0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10a      	bne.n	800c1aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	61fb      	str	r3, [r7, #28]
}
 800c1a6:	bf00      	nop
 800c1a8:	e7fe      	b.n	800c1a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1aa:	f001 f8af 	bl	800d30c <vPortValidateInterruptPriority>
	__asm volatile
 800c1ae:	f3ef 8211 	mrs	r2, BASEPRI
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	61ba      	str	r2, [r7, #24]
 800c1c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c1c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d02f      	beq.n	800c236 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1e0:	68b9      	ldr	r1, [r7, #8]
 800c1e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1e4:	f000 f89e 	bl	800c324 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ea:	1e5a      	subs	r2, r3, #1
 800c1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c1f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f8:	d112      	bne.n	800c220 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d016      	beq.n	800c230 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	3310      	adds	r3, #16
 800c206:	4618      	mov	r0, r3
 800c208:	f000 fd0a 	bl	800cc20 <xTaskRemoveFromEventList>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00e      	beq.n	800c230 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00b      	beq.n	800c230 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	601a      	str	r2, [r3, #0]
 800c21e:	e007      	b.n	800c230 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c224:	3301      	adds	r3, #1
 800c226:	b2db      	uxtb	r3, r3
 800c228:	b25a      	sxtb	r2, r3
 800c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c230:	2301      	movs	r3, #1
 800c232:	637b      	str	r3, [r7, #52]	; 0x34
 800c234:	e001      	b.n	800c23a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c236:	2300      	movs	r3, #0
 800c238:	637b      	str	r3, [r7, #52]	; 0x34
 800c23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	f383 8811 	msr	BASEPRI, r3
}
 800c244:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3738      	adds	r7, #56	; 0x38
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c25c:	2300      	movs	r3, #0
 800c25e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c264:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d10d      	bne.n	800c28a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d14d      	bne.n	800c312 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 fe34 	bl	800cee8 <xTaskPriorityDisinherit>
 800c280:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	609a      	str	r2, [r3, #8]
 800c288:	e043      	b.n	800c312 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d119      	bne.n	800c2c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6858      	ldr	r0, [r3, #4]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c298:	461a      	mov	r2, r3
 800c29a:	68b9      	ldr	r1, [r7, #8]
 800c29c:	f001 fdca 	bl	800de34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	685a      	ldr	r2, [r3, #4]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a8:	441a      	add	r2, r3
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	685a      	ldr	r2, [r3, #4]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d32b      	bcc.n	800c312 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	605a      	str	r2, [r3, #4]
 800c2c2:	e026      	b.n	800c312 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	68d8      	ldr	r0, [r3, #12]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	68b9      	ldr	r1, [r7, #8]
 800c2d0:	f001 fdb0 	bl	800de34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	68da      	ldr	r2, [r3, #12]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2dc:	425b      	negs	r3, r3
 800c2de:	441a      	add	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	68da      	ldr	r2, [r3, #12]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d207      	bcs.n	800c300 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	689a      	ldr	r2, [r3, #8]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f8:	425b      	negs	r3, r3
 800c2fa:	441a      	add	r2, r3
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b02      	cmp	r3, #2
 800c304:	d105      	bne.n	800c312 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d002      	beq.n	800c312 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	3b01      	subs	r3, #1
 800c310:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	1c5a      	adds	r2, r3, #1
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c31a:	697b      	ldr	r3, [r7, #20]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3718      	adds	r7, #24
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b082      	sub	sp, #8
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c332:	2b00      	cmp	r3, #0
 800c334:	d018      	beq.n	800c368 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	68da      	ldr	r2, [r3, #12]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33e:	441a      	add	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	68da      	ldr	r2, [r3, #12]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d303      	bcc.n	800c358 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	68d9      	ldr	r1, [r3, #12]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c360:	461a      	mov	r2, r3
 800c362:	6838      	ldr	r0, [r7, #0]
 800c364:	f001 fd66 	bl	800de34 <memcpy>
	}
}
 800c368:	bf00      	nop
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c378:	f000 ff16 	bl	800d1a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c382:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c384:	e011      	b.n	800c3aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d012      	beq.n	800c3b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	3324      	adds	r3, #36	; 0x24
 800c392:	4618      	mov	r0, r3
 800c394:	f000 fc44 	bl	800cc20 <xTaskRemoveFromEventList>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d001      	beq.n	800c3a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c39e:	f000 fd19 	bl	800cdd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c3a2:	7bfb      	ldrb	r3, [r7, #15]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	dce9      	bgt.n	800c386 <prvUnlockQueue+0x16>
 800c3b2:	e000      	b.n	800c3b6 <prvUnlockQueue+0x46>
					break;
 800c3b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	22ff      	movs	r2, #255	; 0xff
 800c3ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c3be:	f000 ff23 	bl	800d208 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c3c2:	f000 fef1 	bl	800d1a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3ce:	e011      	b.n	800c3f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	691b      	ldr	r3, [r3, #16]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d012      	beq.n	800c3fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	3310      	adds	r3, #16
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f000 fc1f 	bl	800cc20 <xTaskRemoveFromEventList>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d001      	beq.n	800c3ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c3e8:	f000 fcf4 	bl	800cdd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c3ec:	7bbb      	ldrb	r3, [r7, #14]
 800c3ee:	3b01      	subs	r3, #1
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	dce9      	bgt.n	800c3d0 <prvUnlockQueue+0x60>
 800c3fc:	e000      	b.n	800c400 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c3fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	22ff      	movs	r2, #255	; 0xff
 800c404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c408:	f000 fefe 	bl	800d208 <vPortExitCritical>
}
 800c40c:	bf00      	nop
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c41c:	f000 fec4 	bl	800d1a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c424:	2b00      	cmp	r3, #0
 800c426:	d102      	bne.n	800c42e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c428:	2301      	movs	r3, #1
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	e001      	b.n	800c432 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c42e:	2300      	movs	r3, #0
 800c430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c432:	f000 fee9 	bl	800d208 <vPortExitCritical>

	return xReturn;
 800c436:	68fb      	ldr	r3, [r7, #12]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3710      	adds	r7, #16
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c448:	f000 feae 	bl	800d1a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c454:	429a      	cmp	r2, r3
 800c456:	d102      	bne.n	800c45e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c458:	2301      	movs	r3, #1
 800c45a:	60fb      	str	r3, [r7, #12]
 800c45c:	e001      	b.n	800c462 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c45e:	2300      	movs	r3, #0
 800c460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c462:	f000 fed1 	bl	800d208 <vPortExitCritical>

	return xReturn;
 800c466:	68fb      	ldr	r3, [r7, #12]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c470:	b580      	push	{r7, lr}
 800c472:	b08e      	sub	sp, #56	; 0x38
 800c474:	af04      	add	r7, sp, #16
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
 800c47c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10a      	bne.n	800c49a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	623b      	str	r3, [r7, #32]
}
 800c496:	bf00      	nop
 800c498:	e7fe      	b.n	800c498 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10a      	bne.n	800c4b6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	61fb      	str	r3, [r7, #28]
}
 800c4b2:	bf00      	nop
 800c4b4:	e7fe      	b.n	800c4b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c4b6:	2358      	movs	r3, #88	; 0x58
 800c4b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	2b58      	cmp	r3, #88	; 0x58
 800c4be:	d00a      	beq.n	800c4d6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	61bb      	str	r3, [r7, #24]
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c4d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d01e      	beq.n	800c51c <xTaskCreateStatic+0xac>
 800c4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d01b      	beq.n	800c51c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	2202      	movs	r2, #2
 800c4f2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	9303      	str	r3, [sp, #12]
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fc:	9302      	str	r3, [sp, #8]
 800c4fe:	f107 0314 	add.w	r3, r7, #20
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	68b9      	ldr	r1, [r7, #8]
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f000 f850 	bl	800c5b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c516:	f000 f8df 	bl	800c6d8 <prvAddNewTaskToReadyList>
 800c51a:	e001      	b.n	800c520 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c51c:	2300      	movs	r3, #0
 800c51e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c520:	697b      	ldr	r3, [r7, #20]
	}
 800c522:	4618      	mov	r0, r3
 800c524:	3728      	adds	r7, #40	; 0x28
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b08c      	sub	sp, #48	; 0x30
 800c52e:	af04      	add	r7, sp, #16
 800c530:	60f8      	str	r0, [r7, #12]
 800c532:	60b9      	str	r1, [r7, #8]
 800c534:	603b      	str	r3, [r7, #0]
 800c536:	4613      	mov	r3, r2
 800c538:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c53a:	88fb      	ldrh	r3, [r7, #6]
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4618      	mov	r0, r3
 800c540:	f000 ff24 	bl	800d38c <pvPortMalloc>
 800c544:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d00e      	beq.n	800c56a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c54c:	2058      	movs	r0, #88	; 0x58
 800c54e:	f000 ff1d 	bl	800d38c <pvPortMalloc>
 800c552:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d003      	beq.n	800c562 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	697a      	ldr	r2, [r7, #20]
 800c55e:	631a      	str	r2, [r3, #48]	; 0x30
 800c560:	e005      	b.n	800c56e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c562:	6978      	ldr	r0, [r7, #20]
 800c564:	f000 ffe2 	bl	800d52c <vPortFree>
 800c568:	e001      	b.n	800c56e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c56a:	2300      	movs	r3, #0
 800c56c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d017      	beq.n	800c5a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	2200      	movs	r2, #0
 800c578:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c57c:	88fa      	ldrh	r2, [r7, #6]
 800c57e:	2300      	movs	r3, #0
 800c580:	9303      	str	r3, [sp, #12]
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	9302      	str	r3, [sp, #8]
 800c586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	68b9      	ldr	r1, [r7, #8]
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f000 f80e 	bl	800c5b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c598:	69f8      	ldr	r0, [r7, #28]
 800c59a:	f000 f89d 	bl	800c6d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	61bb      	str	r3, [r7, #24]
 800c5a2:	e002      	b.n	800c5aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c5aa:	69bb      	ldr	r3, [r7, #24]
	}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3720      	adds	r7, #32
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b088      	sub	sp, #32
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
 800c5c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	21a5      	movs	r1, #165	; 0xa5
 800c5ce:	f001 fc3f 	bl	800de50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	4413      	add	r3, r2
 800c5e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	f023 0307 	bic.w	r3, r3, #7
 800c5ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	f003 0307 	and.w	r3, r3, #7
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00a      	beq.n	800c60c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fa:	f383 8811 	msr	BASEPRI, r3
 800c5fe:	f3bf 8f6f 	isb	sy
 800c602:	f3bf 8f4f 	dsb	sy
 800c606:	617b      	str	r3, [r7, #20]
}
 800c608:	bf00      	nop
 800c60a:	e7fe      	b.n	800c60a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d01f      	beq.n	800c652 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c612:	2300      	movs	r3, #0
 800c614:	61fb      	str	r3, [r7, #28]
 800c616:	e012      	b.n	800c63e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	4413      	add	r3, r2
 800c61e:	7819      	ldrb	r1, [r3, #0]
 800c620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c622:	69fb      	ldr	r3, [r7, #28]
 800c624:	4413      	add	r3, r2
 800c626:	3334      	adds	r3, #52	; 0x34
 800c628:	460a      	mov	r2, r1
 800c62a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	4413      	add	r3, r2
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d006      	beq.n	800c646 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	3301      	adds	r3, #1
 800c63c:	61fb      	str	r3, [r7, #28]
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	2b0f      	cmp	r3, #15
 800c642:	d9e9      	bls.n	800c618 <prvInitialiseNewTask+0x64>
 800c644:	e000      	b.n	800c648 <prvInitialiseNewTask+0x94>
			{
				break;
 800c646:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64a:	2200      	movs	r2, #0
 800c64c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c650:	e003      	b.n	800c65a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c654:	2200      	movs	r2, #0
 800c656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65c:	2b06      	cmp	r3, #6
 800c65e:	d901      	bls.n	800c664 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c660:	2306      	movs	r3, #6
 800c662:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c668:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c66e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	2200      	movs	r2, #0
 800c674:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c678:	3304      	adds	r3, #4
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7ff f920 	bl	800b8c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c682:	3318      	adds	r3, #24
 800c684:	4618      	mov	r0, r3
 800c686:	f7ff f91b 	bl	800b8c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c68e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c692:	f1c3 0207 	rsb	r2, r3, #7
 800c696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c698:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c69e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c6b4:	683a      	ldr	r2, [r7, #0]
 800c6b6:	68f9      	ldr	r1, [r7, #12]
 800c6b8:	69b8      	ldr	r0, [r7, #24]
 800c6ba:	f000 fd01 	bl	800d0c0 <pxPortInitialiseStack>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d002      	beq.n	800c6d0 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6d0:	bf00      	nop
 800c6d2:	3720      	adds	r7, #32
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c6e0:	f000 fd62 	bl	800d1a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c6e4:	4b2a      	ldr	r3, [pc, #168]	; (800c790 <prvAddNewTaskToReadyList+0xb8>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	4a29      	ldr	r2, [pc, #164]	; (800c790 <prvAddNewTaskToReadyList+0xb8>)
 800c6ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c6ee:	4b29      	ldr	r3, [pc, #164]	; (800c794 <prvAddNewTaskToReadyList+0xbc>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d109      	bne.n	800c70a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c6f6:	4a27      	ldr	r2, [pc, #156]	; (800c794 <prvAddNewTaskToReadyList+0xbc>)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c6fc:	4b24      	ldr	r3, [pc, #144]	; (800c790 <prvAddNewTaskToReadyList+0xb8>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2b01      	cmp	r3, #1
 800c702:	d110      	bne.n	800c726 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c704:	f000 fb72 	bl	800cdec <prvInitialiseTaskLists>
 800c708:	e00d      	b.n	800c726 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c70a:	4b23      	ldr	r3, [pc, #140]	; (800c798 <prvAddNewTaskToReadyList+0xc0>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d109      	bne.n	800c726 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c712:	4b20      	ldr	r3, [pc, #128]	; (800c794 <prvAddNewTaskToReadyList+0xbc>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d802      	bhi.n	800c726 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c720:	4a1c      	ldr	r2, [pc, #112]	; (800c794 <prvAddNewTaskToReadyList+0xbc>)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c726:	4b1d      	ldr	r3, [pc, #116]	; (800c79c <prvAddNewTaskToReadyList+0xc4>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3301      	adds	r3, #1
 800c72c:	4a1b      	ldr	r2, [pc, #108]	; (800c79c <prvAddNewTaskToReadyList+0xc4>)
 800c72e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c734:	2201      	movs	r2, #1
 800c736:	409a      	lsls	r2, r3
 800c738:	4b19      	ldr	r3, [pc, #100]	; (800c7a0 <prvAddNewTaskToReadyList+0xc8>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4313      	orrs	r3, r2
 800c73e:	4a18      	ldr	r2, [pc, #96]	; (800c7a0 <prvAddNewTaskToReadyList+0xc8>)
 800c740:	6013      	str	r3, [r2, #0]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c746:	4613      	mov	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	4a15      	ldr	r2, [pc, #84]	; (800c7a4 <prvAddNewTaskToReadyList+0xcc>)
 800c750:	441a      	add	r2, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	3304      	adds	r3, #4
 800c756:	4619      	mov	r1, r3
 800c758:	4610      	mov	r0, r2
 800c75a:	f7ff f8be 	bl	800b8da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c75e:	f000 fd53 	bl	800d208 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c762:	4b0d      	ldr	r3, [pc, #52]	; (800c798 <prvAddNewTaskToReadyList+0xc0>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00e      	beq.n	800c788 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c76a:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <prvAddNewTaskToReadyList+0xbc>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c774:	429a      	cmp	r2, r3
 800c776:	d207      	bcs.n	800c788 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c778:	4b0b      	ldr	r3, [pc, #44]	; (800c7a8 <prvAddNewTaskToReadyList+0xd0>)
 800c77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c77e:	601a      	str	r2, [r3, #0]
 800c780:	f3bf 8f4f 	dsb	sy
 800c784:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c788:	bf00      	nop
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	200001b4 	.word	0x200001b4
 800c794:	200000b8 	.word	0x200000b8
 800c798:	200001c0 	.word	0x200001c0
 800c79c:	200001d0 	.word	0x200001d0
 800c7a0:	200001bc 	.word	0x200001bc
 800c7a4:	200000bc 	.word	0x200000bc
 800c7a8:	e000ed04 	.word	0xe000ed04

0800c7ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d017      	beq.n	800c7ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c7be:	4b13      	ldr	r3, [pc, #76]	; (800c80c <vTaskDelay+0x60>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00a      	beq.n	800c7dc <vTaskDelay+0x30>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	60bb      	str	r3, [r7, #8]
}
 800c7d8:	bf00      	nop
 800c7da:	e7fe      	b.n	800c7da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c7dc:	f000 f81a 	bl	800c814 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 fc06 	bl	800cff4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c7e8:	f000 f822 	bl	800c830 <xTaskResumeAll>
 800c7ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d107      	bne.n	800c804 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c7f4:	4b06      	ldr	r3, [pc, #24]	; (800c810 <vTaskDelay+0x64>)
 800c7f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7fa:	601a      	str	r2, [r3, #0]
 800c7fc:	f3bf 8f4f 	dsb	sy
 800c800:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c804:	bf00      	nop
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	200001d8 	.word	0x200001d8
 800c810:	e000ed04 	.word	0xe000ed04

0800c814 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c814:	b480      	push	{r7}
 800c816:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c818:	4b04      	ldr	r3, [pc, #16]	; (800c82c <vTaskSuspendAll+0x18>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	3301      	adds	r3, #1
 800c81e:	4a03      	ldr	r2, [pc, #12]	; (800c82c <vTaskSuspendAll+0x18>)
 800c820:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c822:	bf00      	nop
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr
 800c82c:	200001d8 	.word	0x200001d8

0800c830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c836:	2300      	movs	r3, #0
 800c838:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c83a:	2300      	movs	r3, #0
 800c83c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c83e:	4b41      	ldr	r3, [pc, #260]	; (800c944 <xTaskResumeAll+0x114>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d10a      	bne.n	800c85c <xTaskResumeAll+0x2c>
	__asm volatile
 800c846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	603b      	str	r3, [r7, #0]
}
 800c858:	bf00      	nop
 800c85a:	e7fe      	b.n	800c85a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c85c:	f000 fca4 	bl	800d1a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c860:	4b38      	ldr	r3, [pc, #224]	; (800c944 <xTaskResumeAll+0x114>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	3b01      	subs	r3, #1
 800c866:	4a37      	ldr	r2, [pc, #220]	; (800c944 <xTaskResumeAll+0x114>)
 800c868:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c86a:	4b36      	ldr	r3, [pc, #216]	; (800c944 <xTaskResumeAll+0x114>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d161      	bne.n	800c936 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c872:	4b35      	ldr	r3, [pc, #212]	; (800c948 <xTaskResumeAll+0x118>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d05d      	beq.n	800c936 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c87a:	e02e      	b.n	800c8da <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c87c:	4b33      	ldr	r3, [pc, #204]	; (800c94c <xTaskResumeAll+0x11c>)
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	3318      	adds	r3, #24
 800c888:	4618      	mov	r0, r3
 800c88a:	f7ff f883 	bl	800b994 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3304      	adds	r3, #4
 800c892:	4618      	mov	r0, r3
 800c894:	f7ff f87e 	bl	800b994 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89c:	2201      	movs	r2, #1
 800c89e:	409a      	lsls	r2, r3
 800c8a0:	4b2b      	ldr	r3, [pc, #172]	; (800c950 <xTaskResumeAll+0x120>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	4a2a      	ldr	r2, [pc, #168]	; (800c950 <xTaskResumeAll+0x120>)
 800c8a8:	6013      	str	r3, [r2, #0]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	4413      	add	r3, r2
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	4a27      	ldr	r2, [pc, #156]	; (800c954 <xTaskResumeAll+0x124>)
 800c8b8:	441a      	add	r2, r3
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	3304      	adds	r3, #4
 800c8be:	4619      	mov	r1, r3
 800c8c0:	4610      	mov	r0, r2
 800c8c2:	f7ff f80a 	bl	800b8da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ca:	4b23      	ldr	r3, [pc, #140]	; (800c958 <xTaskResumeAll+0x128>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d302      	bcc.n	800c8da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c8d4:	4b21      	ldr	r3, [pc, #132]	; (800c95c <xTaskResumeAll+0x12c>)
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8da:	4b1c      	ldr	r3, [pc, #112]	; (800c94c <xTaskResumeAll+0x11c>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1cc      	bne.n	800c87c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d001      	beq.n	800c8ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c8e8:	f000 fac0 	bl	800ce6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c8ec:	4b1c      	ldr	r3, [pc, #112]	; (800c960 <xTaskResumeAll+0x130>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d010      	beq.n	800c91a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c8f8:	f000 f836 	bl	800c968 <xTaskIncrementTick>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d002      	beq.n	800c908 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c902:	4b16      	ldr	r3, [pc, #88]	; (800c95c <xTaskResumeAll+0x12c>)
 800c904:	2201      	movs	r2, #1
 800c906:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	3b01      	subs	r3, #1
 800c90c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1f1      	bne.n	800c8f8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c914:	4b12      	ldr	r3, [pc, #72]	; (800c960 <xTaskResumeAll+0x130>)
 800c916:	2200      	movs	r2, #0
 800c918:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c91a:	4b10      	ldr	r3, [pc, #64]	; (800c95c <xTaskResumeAll+0x12c>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d009      	beq.n	800c936 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c922:	2301      	movs	r3, #1
 800c924:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c926:	4b0f      	ldr	r3, [pc, #60]	; (800c964 <xTaskResumeAll+0x134>)
 800c928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c92c:	601a      	str	r2, [r3, #0]
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c936:	f000 fc67 	bl	800d208 <vPortExitCritical>

	return xAlreadyYielded;
 800c93a:	68bb      	ldr	r3, [r7, #8]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	200001d8 	.word	0x200001d8
 800c948:	200001b4 	.word	0x200001b4
 800c94c:	20000178 	.word	0x20000178
 800c950:	200001bc 	.word	0x200001bc
 800c954:	200000bc 	.word	0x200000bc
 800c958:	200000b8 	.word	0x200000b8
 800c95c:	200001c8 	.word	0x200001c8
 800c960:	200001c4 	.word	0x200001c4
 800c964:	e000ed04 	.word	0xe000ed04

0800c968 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b086      	sub	sp, #24
 800c96c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c96e:	2300      	movs	r3, #0
 800c970:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c972:	4b4e      	ldr	r3, [pc, #312]	; (800caac <xTaskIncrementTick+0x144>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	f040 808e 	bne.w	800ca98 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c97c:	4b4c      	ldr	r3, [pc, #304]	; (800cab0 <xTaskIncrementTick+0x148>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	3301      	adds	r3, #1
 800c982:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c984:	4a4a      	ldr	r2, [pc, #296]	; (800cab0 <xTaskIncrementTick+0x148>)
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d120      	bne.n	800c9d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c990:	4b48      	ldr	r3, [pc, #288]	; (800cab4 <xTaskIncrementTick+0x14c>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00a      	beq.n	800c9b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	603b      	str	r3, [r7, #0]
}
 800c9ac:	bf00      	nop
 800c9ae:	e7fe      	b.n	800c9ae <xTaskIncrementTick+0x46>
 800c9b0:	4b40      	ldr	r3, [pc, #256]	; (800cab4 <xTaskIncrementTick+0x14c>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	60fb      	str	r3, [r7, #12]
 800c9b6:	4b40      	ldr	r3, [pc, #256]	; (800cab8 <xTaskIncrementTick+0x150>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a3e      	ldr	r2, [pc, #248]	; (800cab4 <xTaskIncrementTick+0x14c>)
 800c9bc:	6013      	str	r3, [r2, #0]
 800c9be:	4a3e      	ldr	r2, [pc, #248]	; (800cab8 <xTaskIncrementTick+0x150>)
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6013      	str	r3, [r2, #0]
 800c9c4:	4b3d      	ldr	r3, [pc, #244]	; (800cabc <xTaskIncrementTick+0x154>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	4a3c      	ldr	r2, [pc, #240]	; (800cabc <xTaskIncrementTick+0x154>)
 800c9cc:	6013      	str	r3, [r2, #0]
 800c9ce:	f000 fa4d 	bl	800ce6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c9d2:	4b3b      	ldr	r3, [pc, #236]	; (800cac0 <xTaskIncrementTick+0x158>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	693a      	ldr	r2, [r7, #16]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d348      	bcc.n	800ca6e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9dc:	4b35      	ldr	r3, [pc, #212]	; (800cab4 <xTaskIncrementTick+0x14c>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d104      	bne.n	800c9f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9e6:	4b36      	ldr	r3, [pc, #216]	; (800cac0 <xTaskIncrementTick+0x158>)
 800c9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ec:	601a      	str	r2, [r3, #0]
					break;
 800c9ee:	e03e      	b.n	800ca6e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9f0:	4b30      	ldr	r3, [pc, #192]	; (800cab4 <xTaskIncrementTick+0x14c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ca00:	693a      	ldr	r2, [r7, #16]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d203      	bcs.n	800ca10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ca08:	4a2d      	ldr	r2, [pc, #180]	; (800cac0 <xTaskIncrementTick+0x158>)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ca0e:	e02e      	b.n	800ca6e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	3304      	adds	r3, #4
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7fe ffbd 	bl	800b994 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d004      	beq.n	800ca2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	3318      	adds	r3, #24
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fe ffb4 	bl	800b994 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca30:	2201      	movs	r2, #1
 800ca32:	409a      	lsls	r2, r3
 800ca34:	4b23      	ldr	r3, [pc, #140]	; (800cac4 <xTaskIncrementTick+0x15c>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	4a22      	ldr	r2, [pc, #136]	; (800cac4 <xTaskIncrementTick+0x15c>)
 800ca3c:	6013      	str	r3, [r2, #0]
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca42:	4613      	mov	r3, r2
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	4413      	add	r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4a1f      	ldr	r2, [pc, #124]	; (800cac8 <xTaskIncrementTick+0x160>)
 800ca4c:	441a      	add	r2, r3
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	3304      	adds	r3, #4
 800ca52:	4619      	mov	r1, r3
 800ca54:	4610      	mov	r0, r2
 800ca56:	f7fe ff40 	bl	800b8da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca5e:	4b1b      	ldr	r3, [pc, #108]	; (800cacc <xTaskIncrementTick+0x164>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d3b9      	bcc.n	800c9dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca6c:	e7b6      	b.n	800c9dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca6e:	4b17      	ldr	r3, [pc, #92]	; (800cacc <xTaskIncrementTick+0x164>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca74:	4914      	ldr	r1, [pc, #80]	; (800cac8 <xTaskIncrementTick+0x160>)
 800ca76:	4613      	mov	r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	4413      	add	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	440b      	add	r3, r1
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d901      	bls.n	800ca8a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ca86:	2301      	movs	r3, #1
 800ca88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ca8a:	4b11      	ldr	r3, [pc, #68]	; (800cad0 <xTaskIncrementTick+0x168>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d007      	beq.n	800caa2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ca92:	2301      	movs	r3, #1
 800ca94:	617b      	str	r3, [r7, #20]
 800ca96:	e004      	b.n	800caa2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ca98:	4b0e      	ldr	r3, [pc, #56]	; (800cad4 <xTaskIncrementTick+0x16c>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	4a0d      	ldr	r2, [pc, #52]	; (800cad4 <xTaskIncrementTick+0x16c>)
 800caa0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800caa2:	697b      	ldr	r3, [r7, #20]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3718      	adds	r7, #24
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	200001d8 	.word	0x200001d8
 800cab0:	200001b8 	.word	0x200001b8
 800cab4:	20000170 	.word	0x20000170
 800cab8:	20000174 	.word	0x20000174
 800cabc:	200001cc 	.word	0x200001cc
 800cac0:	200001d4 	.word	0x200001d4
 800cac4:	200001bc 	.word	0x200001bc
 800cac8:	200000bc 	.word	0x200000bc
 800cacc:	200000b8 	.word	0x200000b8
 800cad0:	200001c8 	.word	0x200001c8
 800cad4:	200001c4 	.word	0x200001c4

0800cad8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b088      	sub	sp, #32
 800cadc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cade:	4b39      	ldr	r3, [pc, #228]	; (800cbc4 <vTaskSwitchContext+0xec>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d003      	beq.n	800caee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cae6:	4b38      	ldr	r3, [pc, #224]	; (800cbc8 <vTaskSwitchContext+0xf0>)
 800cae8:	2201      	movs	r2, #1
 800caea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800caec:	e066      	b.n	800cbbc <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800caee:	4b36      	ldr	r3, [pc, #216]	; (800cbc8 <vTaskSwitchContext+0xf0>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800caf4:	4b35      	ldr	r3, [pc, #212]	; (800cbcc <vTaskSwitchContext+0xf4>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cafa:	61fb      	str	r3, [r7, #28]
 800cafc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800cb00:	61bb      	str	r3, [r7, #24]
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	69ba      	ldr	r2, [r7, #24]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d111      	bne.n	800cb30 <vTaskSwitchContext+0x58>
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	3304      	adds	r3, #4
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	69ba      	ldr	r2, [r7, #24]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d10b      	bne.n	800cb30 <vTaskSwitchContext+0x58>
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	3308      	adds	r3, #8
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	69ba      	ldr	r2, [r7, #24]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d105      	bne.n	800cb30 <vTaskSwitchContext+0x58>
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	330c      	adds	r3, #12
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	69ba      	ldr	r2, [r7, #24]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d008      	beq.n	800cb42 <vTaskSwitchContext+0x6a>
 800cb30:	4b26      	ldr	r3, [pc, #152]	; (800cbcc <vTaskSwitchContext+0xf4>)
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	4b25      	ldr	r3, [pc, #148]	; (800cbcc <vTaskSwitchContext+0xf4>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	3334      	adds	r3, #52	; 0x34
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	4610      	mov	r0, r2
 800cb3e:	f7f4 f9a9 	bl	8000e94 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb42:	4b23      	ldr	r3, [pc, #140]	; (800cbd0 <vTaskSwitchContext+0xf8>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	fab3 f383 	clz	r3, r3
 800cb4e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cb50:	7afb      	ldrb	r3, [r7, #11]
 800cb52:	f1c3 031f 	rsb	r3, r3, #31
 800cb56:	617b      	str	r3, [r7, #20]
 800cb58:	491e      	ldr	r1, [pc, #120]	; (800cbd4 <vTaskSwitchContext+0xfc>)
 800cb5a:	697a      	ldr	r2, [r7, #20]
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	4413      	add	r3, r2
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	440b      	add	r3, r1
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d10a      	bne.n	800cb82 <vTaskSwitchContext+0xaa>
	__asm volatile
 800cb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb70:	f383 8811 	msr	BASEPRI, r3
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	607b      	str	r3, [r7, #4]
}
 800cb7e:	bf00      	nop
 800cb80:	e7fe      	b.n	800cb80 <vTaskSwitchContext+0xa8>
 800cb82:	697a      	ldr	r2, [r7, #20]
 800cb84:	4613      	mov	r3, r2
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	4413      	add	r3, r2
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	4a11      	ldr	r2, [pc, #68]	; (800cbd4 <vTaskSwitchContext+0xfc>)
 800cb8e:	4413      	add	r3, r2
 800cb90:	613b      	str	r3, [r7, #16]
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	685a      	ldr	r2, [r3, #4]
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	605a      	str	r2, [r3, #4]
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	685a      	ldr	r2, [r3, #4]
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	3308      	adds	r3, #8
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d104      	bne.n	800cbb2 <vTaskSwitchContext+0xda>
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	685a      	ldr	r2, [r3, #4]
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	605a      	str	r2, [r3, #4]
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	4a04      	ldr	r2, [pc, #16]	; (800cbcc <vTaskSwitchContext+0xf4>)
 800cbba:	6013      	str	r3, [r2, #0]
}
 800cbbc:	bf00      	nop
 800cbbe:	3720      	adds	r7, #32
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	200001d8 	.word	0x200001d8
 800cbc8:	200001c8 	.word	0x200001c8
 800cbcc:	200000b8 	.word	0x200000b8
 800cbd0:	200001bc 	.word	0x200001bc
 800cbd4:	200000bc 	.word	0x200000bc

0800cbd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d10a      	bne.n	800cbfe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbec:	f383 8811 	msr	BASEPRI, r3
 800cbf0:	f3bf 8f6f 	isb	sy
 800cbf4:	f3bf 8f4f 	dsb	sy
 800cbf8:	60fb      	str	r3, [r7, #12]
}
 800cbfa:	bf00      	nop
 800cbfc:	e7fe      	b.n	800cbfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cbfe:	4b07      	ldr	r3, [pc, #28]	; (800cc1c <vTaskPlaceOnEventList+0x44>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3318      	adds	r3, #24
 800cc04:	4619      	mov	r1, r3
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f7fe fe8b 	bl	800b922 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc0c:	2101      	movs	r1, #1
 800cc0e:	6838      	ldr	r0, [r7, #0]
 800cc10:	f000 f9f0 	bl	800cff4 <prvAddCurrentTaskToDelayedList>
}
 800cc14:	bf00      	nop
 800cc16:	3710      	adds	r7, #16
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	200000b8 	.word	0x200000b8

0800cc20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b086      	sub	sp, #24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10a      	bne.n	800cc4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	60fb      	str	r3, [r7, #12]
}
 800cc48:	bf00      	nop
 800cc4a:	e7fe      	b.n	800cc4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	3318      	adds	r3, #24
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7fe fe9f 	bl	800b994 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc56:	4b1d      	ldr	r3, [pc, #116]	; (800cccc <xTaskRemoveFromEventList+0xac>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d11c      	bne.n	800cc98 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	3304      	adds	r3, #4
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7fe fe96 	bl	800b994 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	409a      	lsls	r2, r3
 800cc70:	4b17      	ldr	r3, [pc, #92]	; (800ccd0 <xTaskRemoveFromEventList+0xb0>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	4a16      	ldr	r2, [pc, #88]	; (800ccd0 <xTaskRemoveFromEventList+0xb0>)
 800cc78:	6013      	str	r3, [r2, #0]
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc7e:	4613      	mov	r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	4413      	add	r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	4a13      	ldr	r2, [pc, #76]	; (800ccd4 <xTaskRemoveFromEventList+0xb4>)
 800cc88:	441a      	add	r2, r3
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	3304      	adds	r3, #4
 800cc8e:	4619      	mov	r1, r3
 800cc90:	4610      	mov	r0, r2
 800cc92:	f7fe fe22 	bl	800b8da <vListInsertEnd>
 800cc96:	e005      	b.n	800cca4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	3318      	adds	r3, #24
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	480e      	ldr	r0, [pc, #56]	; (800ccd8 <xTaskRemoveFromEventList+0xb8>)
 800cca0:	f7fe fe1b 	bl	800b8da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca8:	4b0c      	ldr	r3, [pc, #48]	; (800ccdc <xTaskRemoveFromEventList+0xbc>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d905      	bls.n	800ccbe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ccb6:	4b0a      	ldr	r3, [pc, #40]	; (800cce0 <xTaskRemoveFromEventList+0xc0>)
 800ccb8:	2201      	movs	r2, #1
 800ccba:	601a      	str	r2, [r3, #0]
 800ccbc:	e001      	b.n	800ccc2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ccc2:	697b      	ldr	r3, [r7, #20]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3718      	adds	r7, #24
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	200001d8 	.word	0x200001d8
 800ccd0:	200001bc 	.word	0x200001bc
 800ccd4:	200000bc 	.word	0x200000bc
 800ccd8:	20000178 	.word	0x20000178
 800ccdc:	200000b8 	.word	0x200000b8
 800cce0:	200001c8 	.word	0x200001c8

0800cce4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ccec:	4b06      	ldr	r3, [pc, #24]	; (800cd08 <vTaskInternalSetTimeOutState+0x24>)
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ccf4:	4b05      	ldr	r3, [pc, #20]	; (800cd0c <vTaskInternalSetTimeOutState+0x28>)
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	605a      	str	r2, [r3, #4]
}
 800ccfc:	bf00      	nop
 800ccfe:	370c      	adds	r7, #12
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr
 800cd08:	200001cc 	.word	0x200001cc
 800cd0c:	200001b8 	.word	0x200001b8

0800cd10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b088      	sub	sp, #32
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d10a      	bne.n	800cd36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	613b      	str	r3, [r7, #16]
}
 800cd32:	bf00      	nop
 800cd34:	e7fe      	b.n	800cd34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10a      	bne.n	800cd52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd40:	f383 8811 	msr	BASEPRI, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	60fb      	str	r3, [r7, #12]
}
 800cd4e:	bf00      	nop
 800cd50:	e7fe      	b.n	800cd50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cd52:	f000 fa29 	bl	800d1a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cd56:	4b1d      	ldr	r3, [pc, #116]	; (800cdcc <xTaskCheckForTimeOut+0xbc>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	69ba      	ldr	r2, [r7, #24]
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd6e:	d102      	bne.n	800cd76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cd70:	2300      	movs	r3, #0
 800cd72:	61fb      	str	r3, [r7, #28]
 800cd74:	e023      	b.n	800cdbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	4b15      	ldr	r3, [pc, #84]	; (800cdd0 <xTaskCheckForTimeOut+0xc0>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d007      	beq.n	800cd92 <xTaskCheckForTimeOut+0x82>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	69ba      	ldr	r2, [r7, #24]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d302      	bcc.n	800cd92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	61fb      	str	r3, [r7, #28]
 800cd90:	e015      	b.n	800cdbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d20b      	bcs.n	800cdb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	1ad2      	subs	r2, r2, r3
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f7ff ff9b 	bl	800cce4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	61fb      	str	r3, [r7, #28]
 800cdb2:	e004      	b.n	800cdbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cdbe:	f000 fa23 	bl	800d208 <vPortExitCritical>

	return xReturn;
 800cdc2:	69fb      	ldr	r3, [r7, #28]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3720      	adds	r7, #32
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	200001b8 	.word	0x200001b8
 800cdd0:	200001cc 	.word	0x200001cc

0800cdd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cdd8:	4b03      	ldr	r3, [pc, #12]	; (800cde8 <vTaskMissedYield+0x14>)
 800cdda:	2201      	movs	r2, #1
 800cddc:	601a      	str	r2, [r3, #0]
}
 800cdde:	bf00      	nop
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr
 800cde8:	200001c8 	.word	0x200001c8

0800cdec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	607b      	str	r3, [r7, #4]
 800cdf6:	e00c      	b.n	800ce12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	4413      	add	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4a12      	ldr	r2, [pc, #72]	; (800ce4c <prvInitialiseTaskLists+0x60>)
 800ce04:	4413      	add	r3, r2
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fe fd3a 	bl	800b880 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	607b      	str	r3, [r7, #4]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b06      	cmp	r3, #6
 800ce16:	d9ef      	bls.n	800cdf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce18:	480d      	ldr	r0, [pc, #52]	; (800ce50 <prvInitialiseTaskLists+0x64>)
 800ce1a:	f7fe fd31 	bl	800b880 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce1e:	480d      	ldr	r0, [pc, #52]	; (800ce54 <prvInitialiseTaskLists+0x68>)
 800ce20:	f7fe fd2e 	bl	800b880 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce24:	480c      	ldr	r0, [pc, #48]	; (800ce58 <prvInitialiseTaskLists+0x6c>)
 800ce26:	f7fe fd2b 	bl	800b880 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce2a:	480c      	ldr	r0, [pc, #48]	; (800ce5c <prvInitialiseTaskLists+0x70>)
 800ce2c:	f7fe fd28 	bl	800b880 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce30:	480b      	ldr	r0, [pc, #44]	; (800ce60 <prvInitialiseTaskLists+0x74>)
 800ce32:	f7fe fd25 	bl	800b880 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce36:	4b0b      	ldr	r3, [pc, #44]	; (800ce64 <prvInitialiseTaskLists+0x78>)
 800ce38:	4a05      	ldr	r2, [pc, #20]	; (800ce50 <prvInitialiseTaskLists+0x64>)
 800ce3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce3c:	4b0a      	ldr	r3, [pc, #40]	; (800ce68 <prvInitialiseTaskLists+0x7c>)
 800ce3e:	4a05      	ldr	r2, [pc, #20]	; (800ce54 <prvInitialiseTaskLists+0x68>)
 800ce40:	601a      	str	r2, [r3, #0]
}
 800ce42:	bf00      	nop
 800ce44:	3708      	adds	r7, #8
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	200000bc 	.word	0x200000bc
 800ce50:	20000148 	.word	0x20000148
 800ce54:	2000015c 	.word	0x2000015c
 800ce58:	20000178 	.word	0x20000178
 800ce5c:	2000018c 	.word	0x2000018c
 800ce60:	200001a0 	.word	0x200001a0
 800ce64:	20000170 	.word	0x20000170
 800ce68:	20000174 	.word	0x20000174

0800ce6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce72:	4b0c      	ldr	r3, [pc, #48]	; (800cea4 <prvResetNextTaskUnblockTime+0x38>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d104      	bne.n	800ce86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ce7c:	4b0a      	ldr	r3, [pc, #40]	; (800cea8 <prvResetNextTaskUnblockTime+0x3c>)
 800ce7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ce84:	e008      	b.n	800ce98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce86:	4b07      	ldr	r3, [pc, #28]	; (800cea4 <prvResetNextTaskUnblockTime+0x38>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	4a04      	ldr	r2, [pc, #16]	; (800cea8 <prvResetNextTaskUnblockTime+0x3c>)
 800ce96:	6013      	str	r3, [r2, #0]
}
 800ce98:	bf00      	nop
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr
 800cea4:	20000170 	.word	0x20000170
 800cea8:	200001d4 	.word	0x200001d4

0800ceac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ceb2:	4b0b      	ldr	r3, [pc, #44]	; (800cee0 <xTaskGetSchedulerState+0x34>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d102      	bne.n	800cec0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ceba:	2301      	movs	r3, #1
 800cebc:	607b      	str	r3, [r7, #4]
 800cebe:	e008      	b.n	800ced2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cec0:	4b08      	ldr	r3, [pc, #32]	; (800cee4 <xTaskGetSchedulerState+0x38>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d102      	bne.n	800cece <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cec8:	2302      	movs	r3, #2
 800ceca:	607b      	str	r3, [r7, #4]
 800cecc:	e001      	b.n	800ced2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cece:	2300      	movs	r3, #0
 800ced0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ced2:	687b      	ldr	r3, [r7, #4]
	}
 800ced4:	4618      	mov	r0, r3
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	200001c0 	.word	0x200001c0
 800cee4:	200001d8 	.word	0x200001d8

0800cee8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b086      	sub	sp, #24
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cef4:	2300      	movs	r3, #0
 800cef6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d06e      	beq.n	800cfdc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cefe:	4b3a      	ldr	r3, [pc, #232]	; (800cfe8 <xTaskPriorityDisinherit+0x100>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	693a      	ldr	r2, [r7, #16]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d00a      	beq.n	800cf1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cf08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0c:	f383 8811 	msr	BASEPRI, r3
 800cf10:	f3bf 8f6f 	isb	sy
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	60fb      	str	r3, [r7, #12]
}
 800cf1a:	bf00      	nop
 800cf1c:	e7fe      	b.n	800cf1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d10a      	bne.n	800cf3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	60bb      	str	r3, [r7, #8]
}
 800cf38:	bf00      	nop
 800cf3a:	e7fe      	b.n	800cf3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf40:	1e5a      	subs	r2, r3, #1
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d044      	beq.n	800cfdc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d140      	bne.n	800cfdc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7fe fd18 	bl	800b994 <uxListRemove>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d115      	bne.n	800cf96 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf6e:	491f      	ldr	r1, [pc, #124]	; (800cfec <xTaskPriorityDisinherit+0x104>)
 800cf70:	4613      	mov	r3, r2
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	4413      	add	r3, r2
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	440b      	add	r3, r1
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d10a      	bne.n	800cf96 <xTaskPriorityDisinherit+0xae>
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf84:	2201      	movs	r2, #1
 800cf86:	fa02 f303 	lsl.w	r3, r2, r3
 800cf8a:	43da      	mvns	r2, r3
 800cf8c:	4b18      	ldr	r3, [pc, #96]	; (800cff0 <xTaskPriorityDisinherit+0x108>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4013      	ands	r3, r2
 800cf92:	4a17      	ldr	r2, [pc, #92]	; (800cff0 <xTaskPriorityDisinherit+0x108>)
 800cf94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa2:	f1c3 0207 	rsb	r2, r3, #7
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfae:	2201      	movs	r2, #1
 800cfb0:	409a      	lsls	r2, r3
 800cfb2:	4b0f      	ldr	r3, [pc, #60]	; (800cff0 <xTaskPriorityDisinherit+0x108>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	4a0d      	ldr	r2, [pc, #52]	; (800cff0 <xTaskPriorityDisinherit+0x108>)
 800cfba:	6013      	str	r3, [r2, #0]
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4a08      	ldr	r2, [pc, #32]	; (800cfec <xTaskPriorityDisinherit+0x104>)
 800cfca:	441a      	add	r2, r3
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	3304      	adds	r3, #4
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	4610      	mov	r0, r2
 800cfd4:	f7fe fc81 	bl	800b8da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfdc:	697b      	ldr	r3, [r7, #20]
	}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3718      	adds	r7, #24
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	200000b8 	.word	0x200000b8
 800cfec:	200000bc 	.word	0x200000bc
 800cff0:	200001bc 	.word	0x200001bc

0800cff4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cffe:	4b29      	ldr	r3, [pc, #164]	; (800d0a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d004:	4b28      	ldr	r3, [pc, #160]	; (800d0a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	3304      	adds	r3, #4
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7fe fcc2 	bl	800b994 <uxListRemove>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10b      	bne.n	800d02e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d016:	4b24      	ldr	r3, [pc, #144]	; (800d0a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01c:	2201      	movs	r2, #1
 800d01e:	fa02 f303 	lsl.w	r3, r2, r3
 800d022:	43da      	mvns	r2, r3
 800d024:	4b21      	ldr	r3, [pc, #132]	; (800d0ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4013      	ands	r3, r2
 800d02a:	4a20      	ldr	r2, [pc, #128]	; (800d0ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800d02c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d034:	d10a      	bne.n	800d04c <prvAddCurrentTaskToDelayedList+0x58>
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d007      	beq.n	800d04c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d03c:	4b1a      	ldr	r3, [pc, #104]	; (800d0a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	3304      	adds	r3, #4
 800d042:	4619      	mov	r1, r3
 800d044:	481a      	ldr	r0, [pc, #104]	; (800d0b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d046:	f7fe fc48 	bl	800b8da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d04a:	e026      	b.n	800d09a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4413      	add	r3, r2
 800d052:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d054:	4b14      	ldr	r3, [pc, #80]	; (800d0a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	68ba      	ldr	r2, [r7, #8]
 800d05a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d05c:	68ba      	ldr	r2, [r7, #8]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	429a      	cmp	r2, r3
 800d062:	d209      	bcs.n	800d078 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d064:	4b13      	ldr	r3, [pc, #76]	; (800d0b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	4b0f      	ldr	r3, [pc, #60]	; (800d0a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	3304      	adds	r3, #4
 800d06e:	4619      	mov	r1, r3
 800d070:	4610      	mov	r0, r2
 800d072:	f7fe fc56 	bl	800b922 <vListInsert>
}
 800d076:	e010      	b.n	800d09a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d078:	4b0f      	ldr	r3, [pc, #60]	; (800d0b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	4b0a      	ldr	r3, [pc, #40]	; (800d0a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	3304      	adds	r3, #4
 800d082:	4619      	mov	r1, r3
 800d084:	4610      	mov	r0, r2
 800d086:	f7fe fc4c 	bl	800b922 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d08a:	4b0c      	ldr	r3, [pc, #48]	; (800d0bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	68ba      	ldr	r2, [r7, #8]
 800d090:	429a      	cmp	r2, r3
 800d092:	d202      	bcs.n	800d09a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d094:	4a09      	ldr	r2, [pc, #36]	; (800d0bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	6013      	str	r3, [r2, #0]
}
 800d09a:	bf00      	nop
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	200001b8 	.word	0x200001b8
 800d0a8:	200000b8 	.word	0x200000b8
 800d0ac:	200001bc 	.word	0x200001bc
 800d0b0:	200001a0 	.word	0x200001a0
 800d0b4:	20000174 	.word	0x20000174
 800d0b8:	20000170 	.word	0x20000170
 800d0bc:	200001d4 	.word	0x200001d4

0800d0c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	3b04      	subs	r3, #4
 800d0d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d0d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	3b04      	subs	r3, #4
 800d0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	f023 0201 	bic.w	r2, r3, #1
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	3b04      	subs	r3, #4
 800d0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d0f0:	4a0c      	ldr	r2, [pc, #48]	; (800d124 <pxPortInitialiseStack+0x64>)
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	3b14      	subs	r3, #20
 800d0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3b04      	subs	r3, #4
 800d106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f06f 0202 	mvn.w	r2, #2
 800d10e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	3b20      	subs	r3, #32
 800d114:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d116:	68fb      	ldr	r3, [r7, #12]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr
 800d124:	0800d129 	.word	0x0800d129

0800d128 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d128:	b480      	push	{r7}
 800d12a:	b085      	sub	sp, #20
 800d12c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d12e:	2300      	movs	r3, #0
 800d130:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d132:	4b12      	ldr	r3, [pc, #72]	; (800d17c <prvTaskExitError+0x54>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d13a:	d00a      	beq.n	800d152 <prvTaskExitError+0x2a>
	__asm volatile
 800d13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	60fb      	str	r3, [r7, #12]
}
 800d14e:	bf00      	nop
 800d150:	e7fe      	b.n	800d150 <prvTaskExitError+0x28>
	__asm volatile
 800d152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	60bb      	str	r3, [r7, #8]
}
 800d164:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d166:	bf00      	nop
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d0fc      	beq.n	800d168 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d16e:	bf00      	nop
 800d170:	bf00      	nop
 800d172:	3714      	adds	r7, #20
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr
 800d17c:	2000002c 	.word	0x2000002c

0800d180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d180:	4b07      	ldr	r3, [pc, #28]	; (800d1a0 <pxCurrentTCBConst2>)
 800d182:	6819      	ldr	r1, [r3, #0]
 800d184:	6808      	ldr	r0, [r1, #0]
 800d186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18a:	f380 8809 	msr	PSP, r0
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	f04f 0000 	mov.w	r0, #0
 800d196:	f380 8811 	msr	BASEPRI, r0
 800d19a:	4770      	bx	lr
 800d19c:	f3af 8000 	nop.w

0800d1a0 <pxCurrentTCBConst2>:
 800d1a0:	200000b8 	.word	0x200000b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d1a4:	bf00      	nop
 800d1a6:	bf00      	nop

0800d1a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
	__asm volatile
 800d1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	607b      	str	r3, [r7, #4]
}
 800d1c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d1c2:	4b0f      	ldr	r3, [pc, #60]	; (800d200 <vPortEnterCritical+0x58>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	4a0d      	ldr	r2, [pc, #52]	; (800d200 <vPortEnterCritical+0x58>)
 800d1ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d1cc:	4b0c      	ldr	r3, [pc, #48]	; (800d200 <vPortEnterCritical+0x58>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d10f      	bne.n	800d1f4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d1d4:	4b0b      	ldr	r3, [pc, #44]	; (800d204 <vPortEnterCritical+0x5c>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00a      	beq.n	800d1f4 <vPortEnterCritical+0x4c>
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	603b      	str	r3, [r7, #0]
}
 800d1f0:	bf00      	nop
 800d1f2:	e7fe      	b.n	800d1f2 <vPortEnterCritical+0x4a>
	}
}
 800d1f4:	bf00      	nop
 800d1f6:	370c      	adds	r7, #12
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	2000002c 	.word	0x2000002c
 800d204:	e000ed04 	.word	0xe000ed04

0800d208 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d20e:	4b12      	ldr	r3, [pc, #72]	; (800d258 <vPortExitCritical+0x50>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d10a      	bne.n	800d22c <vPortExitCritical+0x24>
	__asm volatile
 800d216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21a:	f383 8811 	msr	BASEPRI, r3
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	f3bf 8f4f 	dsb	sy
 800d226:	607b      	str	r3, [r7, #4]
}
 800d228:	bf00      	nop
 800d22a:	e7fe      	b.n	800d22a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d22c:	4b0a      	ldr	r3, [pc, #40]	; (800d258 <vPortExitCritical+0x50>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	3b01      	subs	r3, #1
 800d232:	4a09      	ldr	r2, [pc, #36]	; (800d258 <vPortExitCritical+0x50>)
 800d234:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d236:	4b08      	ldr	r3, [pc, #32]	; (800d258 <vPortExitCritical+0x50>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d105      	bne.n	800d24a <vPortExitCritical+0x42>
 800d23e:	2300      	movs	r3, #0
 800d240:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	f383 8811 	msr	BASEPRI, r3
}
 800d248:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d24a:	bf00      	nop
 800d24c:	370c      	adds	r7, #12
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	2000002c 	.word	0x2000002c
 800d25c:	00000000 	.word	0x00000000

0800d260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d260:	f3ef 8009 	mrs	r0, PSP
 800d264:	f3bf 8f6f 	isb	sy
 800d268:	4b15      	ldr	r3, [pc, #84]	; (800d2c0 <pxCurrentTCBConst>)
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	f01e 0f10 	tst.w	lr, #16
 800d270:	bf08      	it	eq
 800d272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27a:	6010      	str	r0, [r2, #0]
 800d27c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d280:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d284:	f380 8811 	msr	BASEPRI, r0
 800d288:	f3bf 8f4f 	dsb	sy
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f7ff fc22 	bl	800cad8 <vTaskSwitchContext>
 800d294:	f04f 0000 	mov.w	r0, #0
 800d298:	f380 8811 	msr	BASEPRI, r0
 800d29c:	bc09      	pop	{r0, r3}
 800d29e:	6819      	ldr	r1, [r3, #0]
 800d2a0:	6808      	ldr	r0, [r1, #0]
 800d2a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a6:	f01e 0f10 	tst.w	lr, #16
 800d2aa:	bf08      	it	eq
 800d2ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d2b0:	f380 8809 	msr	PSP, r0
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	f3af 8000 	nop.w

0800d2c0 <pxCurrentTCBConst>:
 800d2c0:	200000b8 	.word	0x200000b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d2c4:	bf00      	nop
 800d2c6:	bf00      	nop

0800d2c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	607b      	str	r3, [r7, #4]
}
 800d2e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d2e2:	f7ff fb41 	bl	800c968 <xTaskIncrementTick>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d003      	beq.n	800d2f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d2ec:	4b06      	ldr	r3, [pc, #24]	; (800d308 <SysTick_Handler+0x40>)
 800d2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2f2:	601a      	str	r2, [r3, #0]
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	f383 8811 	msr	BASEPRI, r3
}
 800d2fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d300:	bf00      	nop
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	e000ed04 	.word	0xe000ed04

0800d30c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d30c:	b480      	push	{r7}
 800d30e:	b085      	sub	sp, #20
 800d310:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d312:	f3ef 8305 	mrs	r3, IPSR
 800d316:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2b0f      	cmp	r3, #15
 800d31c:	d914      	bls.n	800d348 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d31e:	4a17      	ldr	r2, [pc, #92]	; (800d37c <vPortValidateInterruptPriority+0x70>)
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	4413      	add	r3, r2
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d328:	4b15      	ldr	r3, [pc, #84]	; (800d380 <vPortValidateInterruptPriority+0x74>)
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	7afa      	ldrb	r2, [r7, #11]
 800d32e:	429a      	cmp	r2, r3
 800d330:	d20a      	bcs.n	800d348 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d336:	f383 8811 	msr	BASEPRI, r3
 800d33a:	f3bf 8f6f 	isb	sy
 800d33e:	f3bf 8f4f 	dsb	sy
 800d342:	607b      	str	r3, [r7, #4]
}
 800d344:	bf00      	nop
 800d346:	e7fe      	b.n	800d346 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d348:	4b0e      	ldr	r3, [pc, #56]	; (800d384 <vPortValidateInterruptPriority+0x78>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d350:	4b0d      	ldr	r3, [pc, #52]	; (800d388 <vPortValidateInterruptPriority+0x7c>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	429a      	cmp	r2, r3
 800d356:	d90a      	bls.n	800d36e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	603b      	str	r3, [r7, #0]
}
 800d36a:	bf00      	nop
 800d36c:	e7fe      	b.n	800d36c <vPortValidateInterruptPriority+0x60>
	}
 800d36e:	bf00      	nop
 800d370:	3714      	adds	r7, #20
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	e000e3f0 	.word	0xe000e3f0
 800d380:	200001dc 	.word	0x200001dc
 800d384:	e000ed0c 	.word	0xe000ed0c
 800d388:	200001e0 	.word	0x200001e0

0800d38c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b08a      	sub	sp, #40	; 0x28
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d394:	2300      	movs	r3, #0
 800d396:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d398:	f7ff fa3c 	bl	800c814 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d39c:	4b5d      	ldr	r3, [pc, #372]	; (800d514 <pvPortMalloc+0x188>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d101      	bne.n	800d3a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d3a4:	f000 f924 	bl	800d5f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d3a8:	4b5b      	ldr	r3, [pc, #364]	; (800d518 <pvPortMalloc+0x18c>)
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	4013      	ands	r3, r2
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f040 8093 	bne.w	800d4dc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d01d      	beq.n	800d3f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d3bc:	2208      	movs	r2, #8
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f003 0307 	and.w	r3, r3, #7
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d014      	beq.n	800d3f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f023 0307 	bic.w	r3, r3, #7
 800d3d4:	3308      	adds	r3, #8
 800d3d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f003 0307 	and.w	r3, r3, #7
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00a      	beq.n	800d3f8 <pvPortMalloc+0x6c>
	__asm volatile
 800d3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e6:	f383 8811 	msr	BASEPRI, r3
 800d3ea:	f3bf 8f6f 	isb	sy
 800d3ee:	f3bf 8f4f 	dsb	sy
 800d3f2:	617b      	str	r3, [r7, #20]
}
 800d3f4:	bf00      	nop
 800d3f6:	e7fe      	b.n	800d3f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d06e      	beq.n	800d4dc <pvPortMalloc+0x150>
 800d3fe:	4b47      	ldr	r3, [pc, #284]	; (800d51c <pvPortMalloc+0x190>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	429a      	cmp	r2, r3
 800d406:	d869      	bhi.n	800d4dc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d408:	4b45      	ldr	r3, [pc, #276]	; (800d520 <pvPortMalloc+0x194>)
 800d40a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d40c:	4b44      	ldr	r3, [pc, #272]	; (800d520 <pvPortMalloc+0x194>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d412:	e004      	b.n	800d41e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d416:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	429a      	cmp	r2, r3
 800d426:	d903      	bls.n	800d430 <pvPortMalloc+0xa4>
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d1f1      	bne.n	800d414 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d430:	4b38      	ldr	r3, [pc, #224]	; (800d514 <pvPortMalloc+0x188>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d436:	429a      	cmp	r2, r3
 800d438:	d050      	beq.n	800d4dc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d43a:	6a3b      	ldr	r3, [r7, #32]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	2208      	movs	r2, #8
 800d440:	4413      	add	r3, r2
 800d442:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	6a3b      	ldr	r3, [r7, #32]
 800d44a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44e:	685a      	ldr	r2, [r3, #4]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	1ad2      	subs	r2, r2, r3
 800d454:	2308      	movs	r3, #8
 800d456:	005b      	lsls	r3, r3, #1
 800d458:	429a      	cmp	r2, r3
 800d45a:	d91f      	bls.n	800d49c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d45c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4413      	add	r3, r2
 800d462:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	f003 0307 	and.w	r3, r3, #7
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00a      	beq.n	800d484 <pvPortMalloc+0xf8>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	f383 8811 	msr	BASEPRI, r3
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	613b      	str	r3, [r7, #16]
}
 800d480:	bf00      	nop
 800d482:	e7fe      	b.n	800d482 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d486:	685a      	ldr	r2, [r3, #4]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	1ad2      	subs	r2, r2, r3
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d496:	69b8      	ldr	r0, [r7, #24]
 800d498:	f000 f90c 	bl	800d6b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d49c:	4b1f      	ldr	r3, [pc, #124]	; (800d51c <pvPortMalloc+0x190>)
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	1ad3      	subs	r3, r2, r3
 800d4a6:	4a1d      	ldr	r2, [pc, #116]	; (800d51c <pvPortMalloc+0x190>)
 800d4a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d4aa:	4b1c      	ldr	r3, [pc, #112]	; (800d51c <pvPortMalloc+0x190>)
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	4b1d      	ldr	r3, [pc, #116]	; (800d524 <pvPortMalloc+0x198>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d203      	bcs.n	800d4be <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d4b6:	4b19      	ldr	r3, [pc, #100]	; (800d51c <pvPortMalloc+0x190>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4a1a      	ldr	r2, [pc, #104]	; (800d524 <pvPortMalloc+0x198>)
 800d4bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c0:	685a      	ldr	r2, [r3, #4]
 800d4c2:	4b15      	ldr	r3, [pc, #84]	; (800d518 <pvPortMalloc+0x18c>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	431a      	orrs	r2, r3
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d4d2:	4b15      	ldr	r3, [pc, #84]	; (800d528 <pvPortMalloc+0x19c>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	4a13      	ldr	r2, [pc, #76]	; (800d528 <pvPortMalloc+0x19c>)
 800d4da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d4dc:	f7ff f9a8 	bl	800c830 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d101      	bne.n	800d4ea <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d4e6:	f7f3 fce0 	bl	8000eaa <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4ea:	69fb      	ldr	r3, [r7, #28]
 800d4ec:	f003 0307 	and.w	r3, r3, #7
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d00a      	beq.n	800d50a <pvPortMalloc+0x17e>
	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	60fb      	str	r3, [r7, #12]
}
 800d506:	bf00      	nop
 800d508:	e7fe      	b.n	800d508 <pvPortMalloc+0x17c>
	return pvReturn;
 800d50a:	69fb      	ldr	r3, [r7, #28]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3728      	adds	r7, #40	; 0x28
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	200081ec 	.word	0x200081ec
 800d518:	20008200 	.word	0x20008200
 800d51c:	200081f0 	.word	0x200081f0
 800d520:	200081e4 	.word	0x200081e4
 800d524:	200081f4 	.word	0x200081f4
 800d528:	200081f8 	.word	0x200081f8

0800d52c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b086      	sub	sp, #24
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d04d      	beq.n	800d5da <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d53e:	2308      	movs	r3, #8
 800d540:	425b      	negs	r3, r3
 800d542:	697a      	ldr	r2, [r7, #20]
 800d544:	4413      	add	r3, r2
 800d546:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	685a      	ldr	r2, [r3, #4]
 800d550:	4b24      	ldr	r3, [pc, #144]	; (800d5e4 <vPortFree+0xb8>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4013      	ands	r3, r2
 800d556:	2b00      	cmp	r3, #0
 800d558:	d10a      	bne.n	800d570 <vPortFree+0x44>
	__asm volatile
 800d55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55e:	f383 8811 	msr	BASEPRI, r3
 800d562:	f3bf 8f6f 	isb	sy
 800d566:	f3bf 8f4f 	dsb	sy
 800d56a:	60fb      	str	r3, [r7, #12]
}
 800d56c:	bf00      	nop
 800d56e:	e7fe      	b.n	800d56e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00a      	beq.n	800d58e <vPortFree+0x62>
	__asm volatile
 800d578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57c:	f383 8811 	msr	BASEPRI, r3
 800d580:	f3bf 8f6f 	isb	sy
 800d584:	f3bf 8f4f 	dsb	sy
 800d588:	60bb      	str	r3, [r7, #8]
}
 800d58a:	bf00      	nop
 800d58c:	e7fe      	b.n	800d58c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	685a      	ldr	r2, [r3, #4]
 800d592:	4b14      	ldr	r3, [pc, #80]	; (800d5e4 <vPortFree+0xb8>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4013      	ands	r3, r2
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d01e      	beq.n	800d5da <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d11a      	bne.n	800d5da <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	685a      	ldr	r2, [r3, #4]
 800d5a8:	4b0e      	ldr	r3, [pc, #56]	; (800d5e4 <vPortFree+0xb8>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	43db      	mvns	r3, r3
 800d5ae:	401a      	ands	r2, r3
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d5b4:	f7ff f92e 	bl	800c814 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	685a      	ldr	r2, [r3, #4]
 800d5bc:	4b0a      	ldr	r3, [pc, #40]	; (800d5e8 <vPortFree+0xbc>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	4a09      	ldr	r2, [pc, #36]	; (800d5e8 <vPortFree+0xbc>)
 800d5c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d5c6:	6938      	ldr	r0, [r7, #16]
 800d5c8:	f000 f874 	bl	800d6b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d5cc:	4b07      	ldr	r3, [pc, #28]	; (800d5ec <vPortFree+0xc0>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	4a06      	ldr	r2, [pc, #24]	; (800d5ec <vPortFree+0xc0>)
 800d5d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d5d6:	f7ff f92b 	bl	800c830 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d5da:	bf00      	nop
 800d5dc:	3718      	adds	r7, #24
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	20008200 	.word	0x20008200
 800d5e8:	200081f0 	.word	0x200081f0
 800d5ec:	200081fc 	.word	0x200081fc

0800d5f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b085      	sub	sp, #20
 800d5f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d5f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d5fc:	4b27      	ldr	r3, [pc, #156]	; (800d69c <prvHeapInit+0xac>)
 800d5fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f003 0307 	and.w	r3, r3, #7
 800d606:	2b00      	cmp	r3, #0
 800d608:	d00c      	beq.n	800d624 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	3307      	adds	r3, #7
 800d60e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f023 0307 	bic.w	r3, r3, #7
 800d616:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d618:	68ba      	ldr	r2, [r7, #8]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	1ad3      	subs	r3, r2, r3
 800d61e:	4a1f      	ldr	r2, [pc, #124]	; (800d69c <prvHeapInit+0xac>)
 800d620:	4413      	add	r3, r2
 800d622:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d628:	4a1d      	ldr	r2, [pc, #116]	; (800d6a0 <prvHeapInit+0xb0>)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d62e:	4b1c      	ldr	r3, [pc, #112]	; (800d6a0 <prvHeapInit+0xb0>)
 800d630:	2200      	movs	r2, #0
 800d632:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	68ba      	ldr	r2, [r7, #8]
 800d638:	4413      	add	r3, r2
 800d63a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d63c:	2208      	movs	r2, #8
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	1a9b      	subs	r3, r3, r2
 800d642:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f023 0307 	bic.w	r3, r3, #7
 800d64a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	4a15      	ldr	r2, [pc, #84]	; (800d6a4 <prvHeapInit+0xb4>)
 800d650:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d652:	4b14      	ldr	r3, [pc, #80]	; (800d6a4 <prvHeapInit+0xb4>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	2200      	movs	r2, #0
 800d658:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d65a:	4b12      	ldr	r3, [pc, #72]	; (800d6a4 <prvHeapInit+0xb4>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2200      	movs	r2, #0
 800d660:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	1ad2      	subs	r2, r2, r3
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d670:	4b0c      	ldr	r3, [pc, #48]	; (800d6a4 <prvHeapInit+0xb4>)
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	4a0a      	ldr	r2, [pc, #40]	; (800d6a8 <prvHeapInit+0xb8>)
 800d67e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	4a09      	ldr	r2, [pc, #36]	; (800d6ac <prvHeapInit+0xbc>)
 800d686:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d688:	4b09      	ldr	r3, [pc, #36]	; (800d6b0 <prvHeapInit+0xc0>)
 800d68a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d68e:	601a      	str	r2, [r3, #0]
}
 800d690:	bf00      	nop
 800d692:	3714      	adds	r7, #20
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr
 800d69c:	200001e4 	.word	0x200001e4
 800d6a0:	200081e4 	.word	0x200081e4
 800d6a4:	200081ec 	.word	0x200081ec
 800d6a8:	200081f4 	.word	0x200081f4
 800d6ac:	200081f0 	.word	0x200081f0
 800d6b0:	20008200 	.word	0x20008200

0800d6b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b085      	sub	sp, #20
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d6bc:	4b28      	ldr	r3, [pc, #160]	; (800d760 <prvInsertBlockIntoFreeList+0xac>)
 800d6be:	60fb      	str	r3, [r7, #12]
 800d6c0:	e002      	b.n	800d6c8 <prvInsertBlockIntoFreeList+0x14>
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	60fb      	str	r3, [r7, #12]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d8f7      	bhi.n	800d6c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	68ba      	ldr	r2, [r7, #8]
 800d6dc:	4413      	add	r3, r2
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d108      	bne.n	800d6f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	685a      	ldr	r2, [r3, #4]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	441a      	add	r2, r3
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	68ba      	ldr	r2, [r7, #8]
 800d700:	441a      	add	r2, r3
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	429a      	cmp	r2, r3
 800d708:	d118      	bne.n	800d73c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	4b15      	ldr	r3, [pc, #84]	; (800d764 <prvInsertBlockIntoFreeList+0xb0>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	429a      	cmp	r2, r3
 800d714:	d00d      	beq.n	800d732 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	685a      	ldr	r2, [r3, #4]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	441a      	add	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	601a      	str	r2, [r3, #0]
 800d730:	e008      	b.n	800d744 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d732:	4b0c      	ldr	r3, [pc, #48]	; (800d764 <prvInsertBlockIntoFreeList+0xb0>)
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	601a      	str	r2, [r3, #0]
 800d73a:	e003      	b.n	800d744 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d744:	68fa      	ldr	r2, [r7, #12]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d002      	beq.n	800d752 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d752:	bf00      	nop
 800d754:	3714      	adds	r7, #20
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop
 800d760:	200081e4 	.word	0x200081e4
 800d764:	200081ec 	.word	0x200081ec

0800d768 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800d76c:	2200      	movs	r2, #0
 800d76e:	490e      	ldr	r1, [pc, #56]	; (800d7a8 <MX_USB_HOST_Init+0x40>)
 800d770:	480e      	ldr	r0, [pc, #56]	; (800d7ac <MX_USB_HOST_Init+0x44>)
 800d772:	f7fc f993 	bl	8009a9c <USBH_Init>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d001      	beq.n	800d780 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d77c:	f7f4 fb26 	bl	8001dcc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800d780:	490b      	ldr	r1, [pc, #44]	; (800d7b0 <MX_USB_HOST_Init+0x48>)
 800d782:	480a      	ldr	r0, [pc, #40]	; (800d7ac <MX_USB_HOST_Init+0x44>)
 800d784:	f7fc fa40 	bl	8009c08 <USBH_RegisterClass>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d001      	beq.n	800d792 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d78e:	f7f4 fb1d 	bl	8001dcc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800d792:	4806      	ldr	r0, [pc, #24]	; (800d7ac <MX_USB_HOST_Init+0x44>)
 800d794:	f7fc fac4 	bl	8009d20 <USBH_Start>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d001      	beq.n	800d7a2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d79e:	f7f4 fb15 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d7a2:	bf00      	nop
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	0800d7b5 	.word	0x0800d7b5
 800d7ac:	200084bc 	.word	0x200084bc
 800d7b0:	2000000c 	.word	0x2000000c

0800d7b4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d7c0:	78fb      	ldrb	r3, [r7, #3]
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	2b04      	cmp	r3, #4
 800d7c6:	d819      	bhi.n	800d7fc <USBH_UserProcess+0x48>
 800d7c8:	a201      	add	r2, pc, #4	; (adr r2, 800d7d0 <USBH_UserProcess+0x1c>)
 800d7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ce:	bf00      	nop
 800d7d0:	0800d7fd 	.word	0x0800d7fd
 800d7d4:	0800d7ed 	.word	0x0800d7ed
 800d7d8:	0800d7fd 	.word	0x0800d7fd
 800d7dc:	0800d7f5 	.word	0x0800d7f5
 800d7e0:	0800d7e5 	.word	0x0800d7e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d7e4:	4b09      	ldr	r3, [pc, #36]	; (800d80c <USBH_UserProcess+0x58>)
 800d7e6:	2203      	movs	r2, #3
 800d7e8:	701a      	strb	r2, [r3, #0]
  break;
 800d7ea:	e008      	b.n	800d7fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d7ec:	4b07      	ldr	r3, [pc, #28]	; (800d80c <USBH_UserProcess+0x58>)
 800d7ee:	2202      	movs	r2, #2
 800d7f0:	701a      	strb	r2, [r3, #0]
  break;
 800d7f2:	e004      	b.n	800d7fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d7f4:	4b05      	ldr	r3, [pc, #20]	; (800d80c <USBH_UserProcess+0x58>)
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	701a      	strb	r2, [r3, #0]
  break;
 800d7fa:	e000      	b.n	800d7fe <USBH_UserProcess+0x4a>

  default:
  break;
 800d7fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d7fe:	bf00      	nop
 800d800:	370c      	adds	r7, #12
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop
 800d80c:	20008204 	.word	0x20008204

0800d810 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b08a      	sub	sp, #40	; 0x28
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d818:	f107 0314 	add.w	r3, r7, #20
 800d81c:	2200      	movs	r2, #0
 800d81e:	601a      	str	r2, [r3, #0]
 800d820:	605a      	str	r2, [r3, #4]
 800d822:	609a      	str	r2, [r3, #8]
 800d824:	60da      	str	r2, [r3, #12]
 800d826:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a24      	ldr	r2, [pc, #144]	; (800d8c0 <HAL_HCD_MspInit+0xb0>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d141      	bne.n	800d8b6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d832:	2300      	movs	r3, #0
 800d834:	613b      	str	r3, [r7, #16]
 800d836:	4b23      	ldr	r3, [pc, #140]	; (800d8c4 <HAL_HCD_MspInit+0xb4>)
 800d838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d83a:	4a22      	ldr	r2, [pc, #136]	; (800d8c4 <HAL_HCD_MspInit+0xb4>)
 800d83c:	f043 0302 	orr.w	r3, r3, #2
 800d840:	6313      	str	r3, [r2, #48]	; 0x30
 800d842:	4b20      	ldr	r3, [pc, #128]	; (800d8c4 <HAL_HCD_MspInit+0xb4>)
 800d844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d846:	f003 0302 	and.w	r3, r3, #2
 800d84a:	613b      	str	r3, [r7, #16]
 800d84c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800d84e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800d852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d854:	2302      	movs	r3, #2
 800d856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d858:	2300      	movs	r3, #0
 800d85a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d85c:	2300      	movs	r3, #0
 800d85e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d860:	230c      	movs	r3, #12
 800d862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d864:	f107 0314 	add.w	r3, r7, #20
 800d868:	4619      	mov	r1, r3
 800d86a:	4817      	ldr	r0, [pc, #92]	; (800d8c8 <HAL_HCD_MspInit+0xb8>)
 800d86c:	f7f5 fafc 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800d870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d876:	2300      	movs	r3, #0
 800d878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d87a:	2300      	movs	r3, #0
 800d87c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800d87e:	f107 0314 	add.w	r3, r7, #20
 800d882:	4619      	mov	r1, r3
 800d884:	4810      	ldr	r0, [pc, #64]	; (800d8c8 <HAL_HCD_MspInit+0xb8>)
 800d886:	f7f5 faef 	bl	8002e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d88a:	2300      	movs	r3, #0
 800d88c:	60fb      	str	r3, [r7, #12]
 800d88e:	4b0d      	ldr	r3, [pc, #52]	; (800d8c4 <HAL_HCD_MspInit+0xb4>)
 800d890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d892:	4a0c      	ldr	r2, [pc, #48]	; (800d8c4 <HAL_HCD_MspInit+0xb4>)
 800d894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d898:	6313      	str	r3, [r2, #48]	; 0x30
 800d89a:	4b0a      	ldr	r3, [pc, #40]	; (800d8c4 <HAL_HCD_MspInit+0xb4>)
 800d89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d89e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8a2:	60fb      	str	r3, [r7, #12]
 800d8a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	2105      	movs	r1, #5
 800d8aa:	204d      	movs	r0, #77	; 0x4d
 800d8ac:	f7f5 f8aa 	bl	8002a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d8b0:	204d      	movs	r0, #77	; 0x4d
 800d8b2:	f7f5 f8c3 	bl	8002a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d8b6:	bf00      	nop
 800d8b8:	3728      	adds	r7, #40	; 0x28
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	40040000 	.word	0x40040000
 800d8c4:	40023800 	.word	0x40023800
 800d8c8:	40020400 	.word	0x40020400

0800d8cc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7fc fecd 	bl	800a67a <USBH_LL_IncTimer>
}
 800d8e0:	bf00      	nop
 800d8e2:	3708      	adds	r7, #8
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7fc ff11 	bl	800a71e <USBH_LL_Connect>
}
 800d8fc:	bf00      	nop
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d912:	4618      	mov	r0, r3
 800d914:	f7fc ff26 	bl	800a764 <USBH_LL_Disconnect>
}
 800d918:	bf00      	nop
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	460b      	mov	r3, r1
 800d92a:	70fb      	strb	r3, [r7, #3]
 800d92c:	4613      	mov	r3, r2
 800d92e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d936:	4618      	mov	r0, r3
 800d938:	f7fc ff5b 	bl	800a7f2 <USBH_LL_NotifyURBChange>
#endif
}
 800d93c:	bf00      	nop
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d952:	4618      	mov	r0, r3
 800d954:	f7fc febb 	bl	800a6ce <USBH_LL_PortEnabled>
}
 800d958:	bf00      	nop
 800d95a:	3708      	adds	r7, #8
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fc fec7 	bl	800a702 <USBH_LL_PortDisabled>
}
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d132      	bne.n	800d9f4 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d98e:	4a1c      	ldr	r2, [pc, #112]	; (800da00 <USBH_LL_Init+0x84>)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4a19      	ldr	r2, [pc, #100]	; (800da00 <USBH_LL_Init+0x84>)
 800d99a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d99e:	4b18      	ldr	r3, [pc, #96]	; (800da00 <USBH_LL_Init+0x84>)
 800d9a0:	4a18      	ldr	r2, [pc, #96]	; (800da04 <USBH_LL_Init+0x88>)
 800d9a2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d9a4:	4b16      	ldr	r3, [pc, #88]	; (800da00 <USBH_LL_Init+0x84>)
 800d9a6:	220c      	movs	r2, #12
 800d9a8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d9aa:	4b15      	ldr	r3, [pc, #84]	; (800da00 <USBH_LL_Init+0x84>)
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d9b0:	4b13      	ldr	r3, [pc, #76]	; (800da00 <USBH_LL_Init+0x84>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d9b6:	4b12      	ldr	r3, [pc, #72]	; (800da00 <USBH_LL_Init+0x84>)
 800d9b8:	2202      	movs	r2, #2
 800d9ba:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d9bc:	4b10      	ldr	r3, [pc, #64]	; (800da00 <USBH_LL_Init+0x84>)
 800d9be:	2200      	movs	r2, #0
 800d9c0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d9c2:	4b0f      	ldr	r3, [pc, #60]	; (800da00 <USBH_LL_Init+0x84>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d9c8:	4b0d      	ldr	r3, [pc, #52]	; (800da00 <USBH_LL_Init+0x84>)
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d9ce:	4b0c      	ldr	r3, [pc, #48]	; (800da00 <USBH_LL_Init+0x84>)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800d9d4:	480a      	ldr	r0, [pc, #40]	; (800da00 <USBH_LL_Init+0x84>)
 800d9d6:	f7f5 fc26 	bl	8003226 <HAL_HCD_Init>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d001      	beq.n	800d9e4 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800d9e0:	f7f4 f9f4 	bl	8001dcc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800d9e4:	4806      	ldr	r0, [pc, #24]	; (800da00 <USBH_LL_Init+0x84>)
 800d9e6:	f7f6 f80a 	bl	80039fe <HAL_HCD_GetCurrentFrame>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7fc fe34 	bl	800a65c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d9f4:	2300      	movs	r3, #0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3708      	adds	r7, #8
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	200088a0 	.word	0x200088a0
 800da04:	40040000 	.word	0x40040000

0800da08 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da14:	2300      	movs	r3, #0
 800da16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800da1e:	4618      	mov	r0, r3
 800da20:	f7f5 ff77 	bl	8003912 <HAL_HCD_Start>
 800da24:	4603      	mov	r3, r0
 800da26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800da28:	7bfb      	ldrb	r3, [r7, #15]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f000 f95c 	bl	800dce8 <USBH_Get_USB_Status>
 800da30:	4603      	mov	r3, r0
 800da32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da34:	7bbb      	ldrb	r3, [r7, #14]
}
 800da36:	4618      	mov	r0, r3
 800da38:	3710      	adds	r7, #16
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b084      	sub	sp, #16
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da46:	2300      	movs	r3, #0
 800da48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da4a:	2300      	movs	r3, #0
 800da4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800da54:	4618      	mov	r0, r3
 800da56:	f7f5 ff7f 	bl	8003958 <HAL_HCD_Stop>
 800da5a:	4603      	mov	r3, r0
 800da5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800da5e:	7bfb      	ldrb	r3, [r7, #15]
 800da60:	4618      	mov	r0, r3
 800da62:	f000 f941 	bl	800dce8 <USBH_Get_USB_Status>
 800da66:	4603      	mov	r3, r0
 800da68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3710      	adds	r7, #16
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800da7c:	2301      	movs	r3, #1
 800da7e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800da86:	4618      	mov	r0, r3
 800da88:	f7f5 ffc7 	bl	8003a1a <HAL_HCD_GetCurrentSpeed>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b02      	cmp	r3, #2
 800da90:	d00c      	beq.n	800daac <USBH_LL_GetSpeed+0x38>
 800da92:	2b02      	cmp	r3, #2
 800da94:	d80d      	bhi.n	800dab2 <USBH_LL_GetSpeed+0x3e>
 800da96:	2b00      	cmp	r3, #0
 800da98:	d002      	beq.n	800daa0 <USBH_LL_GetSpeed+0x2c>
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d003      	beq.n	800daa6 <USBH_LL_GetSpeed+0x32>
 800da9e:	e008      	b.n	800dab2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800daa0:	2300      	movs	r3, #0
 800daa2:	73fb      	strb	r3, [r7, #15]
    break;
 800daa4:	e008      	b.n	800dab8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800daa6:	2301      	movs	r3, #1
 800daa8:	73fb      	strb	r3, [r7, #15]
    break;
 800daaa:	e005      	b.n	800dab8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800daac:	2302      	movs	r3, #2
 800daae:	73fb      	strb	r3, [r7, #15]
    break;
 800dab0:	e002      	b.n	800dab8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dab2:	2301      	movs	r3, #1
 800dab4:	73fb      	strb	r3, [r7, #15]
    break;
 800dab6:	bf00      	nop
  }
  return  speed;
 800dab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b084      	sub	sp, #16
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daca:	2300      	movs	r3, #0
 800dacc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dace:	2300      	movs	r3, #0
 800dad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dad8:	4618      	mov	r0, r3
 800dada:	f7f5 ff5a 	bl	8003992 <HAL_HCD_ResetPort>
 800dade:	4603      	mov	r3, r0
 800dae0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dae2:	7bfb      	ldrb	r3, [r7, #15]
 800dae4:	4618      	mov	r0, r3
 800dae6:	f000 f8ff 	bl	800dce8 <USBH_Get_USB_Status>
 800daea:	4603      	mov	r3, r0
 800daec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daee:	7bbb      	ldrb	r3, [r7, #14]
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3710      	adds	r7, #16
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	460b      	mov	r3, r1
 800db02:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800db0a:	78fa      	ldrb	r2, [r7, #3]
 800db0c:	4611      	mov	r1, r2
 800db0e:	4618      	mov	r0, r3
 800db10:	f7f5 ff61 	bl	80039d6 <HAL_HCD_HC_GetXferCount>
 800db14:	4603      	mov	r3, r0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800db1e:	b590      	push	{r4, r7, lr}
 800db20:	b089      	sub	sp, #36	; 0x24
 800db22:	af04      	add	r7, sp, #16
 800db24:	6078      	str	r0, [r7, #4]
 800db26:	4608      	mov	r0, r1
 800db28:	4611      	mov	r1, r2
 800db2a:	461a      	mov	r2, r3
 800db2c:	4603      	mov	r3, r0
 800db2e:	70fb      	strb	r3, [r7, #3]
 800db30:	460b      	mov	r3, r1
 800db32:	70bb      	strb	r3, [r7, #2]
 800db34:	4613      	mov	r3, r2
 800db36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db38:	2300      	movs	r3, #0
 800db3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db3c:	2300      	movs	r3, #0
 800db3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800db46:	787c      	ldrb	r4, [r7, #1]
 800db48:	78ba      	ldrb	r2, [r7, #2]
 800db4a:	78f9      	ldrb	r1, [r7, #3]
 800db4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800db4e:	9302      	str	r3, [sp, #8]
 800db50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db54:	9301      	str	r3, [sp, #4]
 800db56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800db5a:	9300      	str	r3, [sp, #0]
 800db5c:	4623      	mov	r3, r4
 800db5e:	f7f5 fbc4 	bl	80032ea <HAL_HCD_HC_Init>
 800db62:	4603      	mov	r3, r0
 800db64:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800db66:	7bfb      	ldrb	r3, [r7, #15]
 800db68:	4618      	mov	r0, r3
 800db6a:	f000 f8bd 	bl	800dce8 <USBH_Get_USB_Status>
 800db6e:	4603      	mov	r3, r0
 800db70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db72:	7bbb      	ldrb	r3, [r7, #14]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3714      	adds	r7, #20
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd90      	pop	{r4, r7, pc}

0800db7c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	460b      	mov	r3, r1
 800db86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db88:	2300      	movs	r3, #0
 800db8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db8c:	2300      	movs	r3, #0
 800db8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800db96:	78fa      	ldrb	r2, [r7, #3]
 800db98:	4611      	mov	r1, r2
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7f5 fc34 	bl	8003408 <HAL_HCD_HC_Halt>
 800dba0:	4603      	mov	r3, r0
 800dba2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dba4:	7bfb      	ldrb	r3, [r7, #15]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f000 f89e 	bl	800dce8 <USBH_Get_USB_Status>
 800dbac:	4603      	mov	r3, r0
 800dbae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3710      	adds	r7, #16
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dbba:	b590      	push	{r4, r7, lr}
 800dbbc:	b089      	sub	sp, #36	; 0x24
 800dbbe:	af04      	add	r7, sp, #16
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	4608      	mov	r0, r1
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	4603      	mov	r3, r0
 800dbca:	70fb      	strb	r3, [r7, #3]
 800dbcc:	460b      	mov	r3, r1
 800dbce:	70bb      	strb	r3, [r7, #2]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dbe2:	787c      	ldrb	r4, [r7, #1]
 800dbe4:	78ba      	ldrb	r2, [r7, #2]
 800dbe6:	78f9      	ldrb	r1, [r7, #3]
 800dbe8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dbec:	9303      	str	r3, [sp, #12]
 800dbee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dbf0:	9302      	str	r3, [sp, #8]
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf4:	9301      	str	r3, [sp, #4]
 800dbf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dbfa:	9300      	str	r3, [sp, #0]
 800dbfc:	4623      	mov	r3, r4
 800dbfe:	f7f5 fc27 	bl	8003450 <HAL_HCD_HC_SubmitRequest>
 800dc02:	4603      	mov	r3, r0
 800dc04:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dc06:	7bfb      	ldrb	r3, [r7, #15]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f000 f86d 	bl	800dce8 <USBH_Get_USB_Status>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc12:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3714      	adds	r7, #20
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd90      	pop	{r4, r7, pc}

0800dc1c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	460b      	mov	r3, r1
 800dc26:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc2e:	78fa      	ldrb	r2, [r7, #3]
 800dc30:	4611      	mov	r1, r2
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7f5 febb 	bl	80039ae <HAL_HCD_HC_GetURBState>
 800dc38:	4603      	mov	r3, r0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b082      	sub	sp, #8
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d103      	bne.n	800dc60 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800dc58:	78fb      	ldrb	r3, [r7, #3]
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f000 f870 	bl	800dd40 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800dc60:	20c8      	movs	r0, #200	; 0xc8
 800dc62:	f7f4 fdf3 	bl	800284c <HAL_Delay>
  return USBH_OK;
 800dc66:	2300      	movs	r3, #0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3708      	adds	r7, #8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b085      	sub	sp, #20
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	70fb      	strb	r3, [r7, #3]
 800dc7c:	4613      	mov	r3, r2
 800dc7e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc86:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800dc88:	78fb      	ldrb	r3, [r7, #3]
 800dc8a:	68fa      	ldr	r2, [r7, #12]
 800dc8c:	212c      	movs	r1, #44	; 0x2c
 800dc8e:	fb01 f303 	mul.w	r3, r1, r3
 800dc92:	4413      	add	r3, r2
 800dc94:	333b      	adds	r3, #59	; 0x3b
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d009      	beq.n	800dcb0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800dc9c:	78fb      	ldrb	r3, [r7, #3]
 800dc9e:	68fa      	ldr	r2, [r7, #12]
 800dca0:	212c      	movs	r1, #44	; 0x2c
 800dca2:	fb01 f303 	mul.w	r3, r1, r3
 800dca6:	4413      	add	r3, r2
 800dca8:	3354      	adds	r3, #84	; 0x54
 800dcaa:	78ba      	ldrb	r2, [r7, #2]
 800dcac:	701a      	strb	r2, [r3, #0]
 800dcae:	e008      	b.n	800dcc2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800dcb0:	78fb      	ldrb	r3, [r7, #3]
 800dcb2:	68fa      	ldr	r2, [r7, #12]
 800dcb4:	212c      	movs	r1, #44	; 0x2c
 800dcb6:	fb01 f303 	mul.w	r3, r1, r3
 800dcba:	4413      	add	r3, r2
 800dcbc:	3355      	adds	r3, #85	; 0x55
 800dcbe:	78ba      	ldrb	r2, [r7, #2]
 800dcc0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3714      	adds	r7, #20
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f7f4 fdb7 	bl	800284c <HAL_Delay>
}
 800dcde:	bf00      	nop
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
	...

0800dce8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	4603      	mov	r3, r0
 800dcf0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dcf6:	79fb      	ldrb	r3, [r7, #7]
 800dcf8:	2b03      	cmp	r3, #3
 800dcfa:	d817      	bhi.n	800dd2c <USBH_Get_USB_Status+0x44>
 800dcfc:	a201      	add	r2, pc, #4	; (adr r2, 800dd04 <USBH_Get_USB_Status+0x1c>)
 800dcfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd02:	bf00      	nop
 800dd04:	0800dd15 	.word	0x0800dd15
 800dd08:	0800dd1b 	.word	0x0800dd1b
 800dd0c:	0800dd21 	.word	0x0800dd21
 800dd10:	0800dd27 	.word	0x0800dd27
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800dd14:	2300      	movs	r3, #0
 800dd16:	73fb      	strb	r3, [r7, #15]
    break;
 800dd18:	e00b      	b.n	800dd32 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800dd1a:	2302      	movs	r3, #2
 800dd1c:	73fb      	strb	r3, [r7, #15]
    break;
 800dd1e:	e008      	b.n	800dd32 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800dd20:	2301      	movs	r3, #1
 800dd22:	73fb      	strb	r3, [r7, #15]
    break;
 800dd24:	e005      	b.n	800dd32 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800dd26:	2302      	movs	r3, #2
 800dd28:	73fb      	strb	r3, [r7, #15]
    break;
 800dd2a:	e002      	b.n	800dd32 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800dd2c:	2302      	movs	r3, #2
 800dd2e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd30:	bf00      	nop
  }
  return usb_status;
 800dd32:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3714      	adds	r7, #20
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	4603      	mov	r3, r0
 800dd48:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800dd4a:	79fb      	ldrb	r3, [r7, #7]
 800dd4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800dd4e:	79fb      	ldrb	r3, [r7, #7]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d102      	bne.n	800dd5a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800dd54:	2301      	movs	r3, #1
 800dd56:	73fb      	strb	r3, [r7, #15]
 800dd58:	e001      	b.n	800dd5e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800dd5e:	7bfb      	ldrb	r3, [r7, #15]
 800dd60:	461a      	mov	r2, r3
 800dd62:	2110      	movs	r1, #16
 800dd64:	4803      	ldr	r0, [pc, #12]	; (800dd74 <MX_DriverVbusHS+0x34>)
 800dd66:	f7f5 fa2b 	bl	80031c0 <HAL_GPIO_WritePin>
}
 800dd6a:	bf00      	nop
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	40020800 	.word	0x40020800

0800dd78 <gcvt>:
 800dd78:	b530      	push	{r4, r5, lr}
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	b085      	sub	sp, #20
 800dd7e:	460c      	mov	r4, r1
 800dd80:	4605      	mov	r5, r0
 800dd82:	2300      	movs	r3, #0
 800dd84:	ec51 0b10 	vmov	r0, r1, d0
 800dd88:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dd8c:	f7f2 feb6 	bl	8000afc <__aeabi_dcmplt>
 800dd90:	ed9d 0b02 	vldr	d0, [sp, #8]
 800dd94:	4622      	mov	r2, r4
 800dd96:	b118      	cbz	r0, 800dda0 <gcvt+0x28>
 800dd98:	232d      	movs	r3, #45	; 0x2d
 800dd9a:	f802 3b01 	strb.w	r3, [r2], #1
 800dd9e:	3d01      	subs	r5, #1
 800dda0:	2300      	movs	r3, #0
 800dda2:	4806      	ldr	r0, [pc, #24]	; (800ddbc <gcvt+0x44>)
 800dda4:	9300      	str	r3, [sp, #0]
 800dda6:	4629      	mov	r1, r5
 800dda8:	2367      	movs	r3, #103	; 0x67
 800ddaa:	6800      	ldr	r0, [r0, #0]
 800ddac:	f000 f9a0 	bl	800e0f0 <_gcvt>
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	bf14      	ite	ne
 800ddb4:	4620      	movne	r0, r4
 800ddb6:	2000      	moveq	r0, #0
 800ddb8:	b005      	add	sp, #20
 800ddba:	bd30      	pop	{r4, r5, pc}
 800ddbc:	20000030 	.word	0x20000030

0800ddc0 <__errno>:
 800ddc0:	4b01      	ldr	r3, [pc, #4]	; (800ddc8 <__errno+0x8>)
 800ddc2:	6818      	ldr	r0, [r3, #0]
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	20000030 	.word	0x20000030

0800ddcc <__libc_init_array>:
 800ddcc:	b570      	push	{r4, r5, r6, lr}
 800ddce:	4d0d      	ldr	r5, [pc, #52]	; (800de04 <__libc_init_array+0x38>)
 800ddd0:	4c0d      	ldr	r4, [pc, #52]	; (800de08 <__libc_init_array+0x3c>)
 800ddd2:	1b64      	subs	r4, r4, r5
 800ddd4:	10a4      	asrs	r4, r4, #2
 800ddd6:	2600      	movs	r6, #0
 800ddd8:	42a6      	cmp	r6, r4
 800ddda:	d109      	bne.n	800ddf0 <__libc_init_array+0x24>
 800dddc:	4d0b      	ldr	r5, [pc, #44]	; (800de0c <__libc_init_array+0x40>)
 800ddde:	4c0c      	ldr	r4, [pc, #48]	; (800de10 <__libc_init_array+0x44>)
 800dde0:	f002 fb6c 	bl	80104bc <_init>
 800dde4:	1b64      	subs	r4, r4, r5
 800dde6:	10a4      	asrs	r4, r4, #2
 800dde8:	2600      	movs	r6, #0
 800ddea:	42a6      	cmp	r6, r4
 800ddec:	d105      	bne.n	800ddfa <__libc_init_array+0x2e>
 800ddee:	bd70      	pop	{r4, r5, r6, pc}
 800ddf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddf4:	4798      	blx	r3
 800ddf6:	3601      	adds	r6, #1
 800ddf8:	e7ee      	b.n	800ddd8 <__libc_init_array+0xc>
 800ddfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddfe:	4798      	blx	r3
 800de00:	3601      	adds	r6, #1
 800de02:	e7f2      	b.n	800ddea <__libc_init_array+0x1e>
 800de04:	0801084c 	.word	0x0801084c
 800de08:	0801084c 	.word	0x0801084c
 800de0c:	0801084c 	.word	0x0801084c
 800de10:	08010850 	.word	0x08010850

0800de14 <malloc>:
 800de14:	4b02      	ldr	r3, [pc, #8]	; (800de20 <malloc+0xc>)
 800de16:	4601      	mov	r1, r0
 800de18:	6818      	ldr	r0, [r3, #0]
 800de1a:	f000 b871 	b.w	800df00 <_malloc_r>
 800de1e:	bf00      	nop
 800de20:	20000030 	.word	0x20000030

0800de24 <free>:
 800de24:	4b02      	ldr	r3, [pc, #8]	; (800de30 <free+0xc>)
 800de26:	4601      	mov	r1, r0
 800de28:	6818      	ldr	r0, [r3, #0]
 800de2a:	f000 b819 	b.w	800de60 <_free_r>
 800de2e:	bf00      	nop
 800de30:	20000030 	.word	0x20000030

0800de34 <memcpy>:
 800de34:	440a      	add	r2, r1
 800de36:	4291      	cmp	r1, r2
 800de38:	f100 33ff 	add.w	r3, r0, #4294967295
 800de3c:	d100      	bne.n	800de40 <memcpy+0xc>
 800de3e:	4770      	bx	lr
 800de40:	b510      	push	{r4, lr}
 800de42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de4a:	4291      	cmp	r1, r2
 800de4c:	d1f9      	bne.n	800de42 <memcpy+0xe>
 800de4e:	bd10      	pop	{r4, pc}

0800de50 <memset>:
 800de50:	4402      	add	r2, r0
 800de52:	4603      	mov	r3, r0
 800de54:	4293      	cmp	r3, r2
 800de56:	d100      	bne.n	800de5a <memset+0xa>
 800de58:	4770      	bx	lr
 800de5a:	f803 1b01 	strb.w	r1, [r3], #1
 800de5e:	e7f9      	b.n	800de54 <memset+0x4>

0800de60 <_free_r>:
 800de60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de62:	2900      	cmp	r1, #0
 800de64:	d048      	beq.n	800def8 <_free_r+0x98>
 800de66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de6a:	9001      	str	r0, [sp, #4]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f1a1 0404 	sub.w	r4, r1, #4
 800de72:	bfb8      	it	lt
 800de74:	18e4      	addlt	r4, r4, r3
 800de76:	f000 f9fb 	bl	800e270 <__malloc_lock>
 800de7a:	4a20      	ldr	r2, [pc, #128]	; (800defc <_free_r+0x9c>)
 800de7c:	9801      	ldr	r0, [sp, #4]
 800de7e:	6813      	ldr	r3, [r2, #0]
 800de80:	4615      	mov	r5, r2
 800de82:	b933      	cbnz	r3, 800de92 <_free_r+0x32>
 800de84:	6063      	str	r3, [r4, #4]
 800de86:	6014      	str	r4, [r2, #0]
 800de88:	b003      	add	sp, #12
 800de8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de8e:	f000 b9f5 	b.w	800e27c <__malloc_unlock>
 800de92:	42a3      	cmp	r3, r4
 800de94:	d90b      	bls.n	800deae <_free_r+0x4e>
 800de96:	6821      	ldr	r1, [r4, #0]
 800de98:	1862      	adds	r2, r4, r1
 800de9a:	4293      	cmp	r3, r2
 800de9c:	bf04      	itt	eq
 800de9e:	681a      	ldreq	r2, [r3, #0]
 800dea0:	685b      	ldreq	r3, [r3, #4]
 800dea2:	6063      	str	r3, [r4, #4]
 800dea4:	bf04      	itt	eq
 800dea6:	1852      	addeq	r2, r2, r1
 800dea8:	6022      	streq	r2, [r4, #0]
 800deaa:	602c      	str	r4, [r5, #0]
 800deac:	e7ec      	b.n	800de88 <_free_r+0x28>
 800deae:	461a      	mov	r2, r3
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	b10b      	cbz	r3, 800deb8 <_free_r+0x58>
 800deb4:	42a3      	cmp	r3, r4
 800deb6:	d9fa      	bls.n	800deae <_free_r+0x4e>
 800deb8:	6811      	ldr	r1, [r2, #0]
 800deba:	1855      	adds	r5, r2, r1
 800debc:	42a5      	cmp	r5, r4
 800debe:	d10b      	bne.n	800ded8 <_free_r+0x78>
 800dec0:	6824      	ldr	r4, [r4, #0]
 800dec2:	4421      	add	r1, r4
 800dec4:	1854      	adds	r4, r2, r1
 800dec6:	42a3      	cmp	r3, r4
 800dec8:	6011      	str	r1, [r2, #0]
 800deca:	d1dd      	bne.n	800de88 <_free_r+0x28>
 800decc:	681c      	ldr	r4, [r3, #0]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	6053      	str	r3, [r2, #4]
 800ded2:	4421      	add	r1, r4
 800ded4:	6011      	str	r1, [r2, #0]
 800ded6:	e7d7      	b.n	800de88 <_free_r+0x28>
 800ded8:	d902      	bls.n	800dee0 <_free_r+0x80>
 800deda:	230c      	movs	r3, #12
 800dedc:	6003      	str	r3, [r0, #0]
 800dede:	e7d3      	b.n	800de88 <_free_r+0x28>
 800dee0:	6825      	ldr	r5, [r4, #0]
 800dee2:	1961      	adds	r1, r4, r5
 800dee4:	428b      	cmp	r3, r1
 800dee6:	bf04      	itt	eq
 800dee8:	6819      	ldreq	r1, [r3, #0]
 800deea:	685b      	ldreq	r3, [r3, #4]
 800deec:	6063      	str	r3, [r4, #4]
 800deee:	bf04      	itt	eq
 800def0:	1949      	addeq	r1, r1, r5
 800def2:	6021      	streq	r1, [r4, #0]
 800def4:	6054      	str	r4, [r2, #4]
 800def6:	e7c7      	b.n	800de88 <_free_r+0x28>
 800def8:	b003      	add	sp, #12
 800defa:	bd30      	pop	{r4, r5, pc}
 800defc:	20008208 	.word	0x20008208

0800df00 <_malloc_r>:
 800df00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df02:	1ccd      	adds	r5, r1, #3
 800df04:	f025 0503 	bic.w	r5, r5, #3
 800df08:	3508      	adds	r5, #8
 800df0a:	2d0c      	cmp	r5, #12
 800df0c:	bf38      	it	cc
 800df0e:	250c      	movcc	r5, #12
 800df10:	2d00      	cmp	r5, #0
 800df12:	4606      	mov	r6, r0
 800df14:	db01      	blt.n	800df1a <_malloc_r+0x1a>
 800df16:	42a9      	cmp	r1, r5
 800df18:	d903      	bls.n	800df22 <_malloc_r+0x22>
 800df1a:	230c      	movs	r3, #12
 800df1c:	6033      	str	r3, [r6, #0]
 800df1e:	2000      	movs	r0, #0
 800df20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df22:	f000 f9a5 	bl	800e270 <__malloc_lock>
 800df26:	4921      	ldr	r1, [pc, #132]	; (800dfac <_malloc_r+0xac>)
 800df28:	680a      	ldr	r2, [r1, #0]
 800df2a:	4614      	mov	r4, r2
 800df2c:	b99c      	cbnz	r4, 800df56 <_malloc_r+0x56>
 800df2e:	4f20      	ldr	r7, [pc, #128]	; (800dfb0 <_malloc_r+0xb0>)
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	b923      	cbnz	r3, 800df3e <_malloc_r+0x3e>
 800df34:	4621      	mov	r1, r4
 800df36:	4630      	mov	r0, r6
 800df38:	f000 f83c 	bl	800dfb4 <_sbrk_r>
 800df3c:	6038      	str	r0, [r7, #0]
 800df3e:	4629      	mov	r1, r5
 800df40:	4630      	mov	r0, r6
 800df42:	f000 f837 	bl	800dfb4 <_sbrk_r>
 800df46:	1c43      	adds	r3, r0, #1
 800df48:	d123      	bne.n	800df92 <_malloc_r+0x92>
 800df4a:	230c      	movs	r3, #12
 800df4c:	6033      	str	r3, [r6, #0]
 800df4e:	4630      	mov	r0, r6
 800df50:	f000 f994 	bl	800e27c <__malloc_unlock>
 800df54:	e7e3      	b.n	800df1e <_malloc_r+0x1e>
 800df56:	6823      	ldr	r3, [r4, #0]
 800df58:	1b5b      	subs	r3, r3, r5
 800df5a:	d417      	bmi.n	800df8c <_malloc_r+0x8c>
 800df5c:	2b0b      	cmp	r3, #11
 800df5e:	d903      	bls.n	800df68 <_malloc_r+0x68>
 800df60:	6023      	str	r3, [r4, #0]
 800df62:	441c      	add	r4, r3
 800df64:	6025      	str	r5, [r4, #0]
 800df66:	e004      	b.n	800df72 <_malloc_r+0x72>
 800df68:	6863      	ldr	r3, [r4, #4]
 800df6a:	42a2      	cmp	r2, r4
 800df6c:	bf0c      	ite	eq
 800df6e:	600b      	streq	r3, [r1, #0]
 800df70:	6053      	strne	r3, [r2, #4]
 800df72:	4630      	mov	r0, r6
 800df74:	f000 f982 	bl	800e27c <__malloc_unlock>
 800df78:	f104 000b 	add.w	r0, r4, #11
 800df7c:	1d23      	adds	r3, r4, #4
 800df7e:	f020 0007 	bic.w	r0, r0, #7
 800df82:	1ac2      	subs	r2, r0, r3
 800df84:	d0cc      	beq.n	800df20 <_malloc_r+0x20>
 800df86:	1a1b      	subs	r3, r3, r0
 800df88:	50a3      	str	r3, [r4, r2]
 800df8a:	e7c9      	b.n	800df20 <_malloc_r+0x20>
 800df8c:	4622      	mov	r2, r4
 800df8e:	6864      	ldr	r4, [r4, #4]
 800df90:	e7cc      	b.n	800df2c <_malloc_r+0x2c>
 800df92:	1cc4      	adds	r4, r0, #3
 800df94:	f024 0403 	bic.w	r4, r4, #3
 800df98:	42a0      	cmp	r0, r4
 800df9a:	d0e3      	beq.n	800df64 <_malloc_r+0x64>
 800df9c:	1a21      	subs	r1, r4, r0
 800df9e:	4630      	mov	r0, r6
 800dfa0:	f000 f808 	bl	800dfb4 <_sbrk_r>
 800dfa4:	3001      	adds	r0, #1
 800dfa6:	d1dd      	bne.n	800df64 <_malloc_r+0x64>
 800dfa8:	e7cf      	b.n	800df4a <_malloc_r+0x4a>
 800dfaa:	bf00      	nop
 800dfac:	20008208 	.word	0x20008208
 800dfb0:	2000820c 	.word	0x2000820c

0800dfb4 <_sbrk_r>:
 800dfb4:	b538      	push	{r3, r4, r5, lr}
 800dfb6:	4d06      	ldr	r5, [pc, #24]	; (800dfd0 <_sbrk_r+0x1c>)
 800dfb8:	2300      	movs	r3, #0
 800dfba:	4604      	mov	r4, r0
 800dfbc:	4608      	mov	r0, r1
 800dfbe:	602b      	str	r3, [r5, #0]
 800dfc0:	f7f4 fb90 	bl	80026e4 <_sbrk>
 800dfc4:	1c43      	adds	r3, r0, #1
 800dfc6:	d102      	bne.n	800dfce <_sbrk_r+0x1a>
 800dfc8:	682b      	ldr	r3, [r5, #0]
 800dfca:	b103      	cbz	r3, 800dfce <_sbrk_r+0x1a>
 800dfcc:	6023      	str	r3, [r4, #0]
 800dfce:	bd38      	pop	{r3, r4, r5, pc}
 800dfd0:	20008ba4 	.word	0x20008ba4

0800dfd4 <strcat>:
 800dfd4:	b510      	push	{r4, lr}
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	7814      	ldrb	r4, [r2, #0]
 800dfda:	4613      	mov	r3, r2
 800dfdc:	3201      	adds	r2, #1
 800dfde:	2c00      	cmp	r4, #0
 800dfe0:	d1fa      	bne.n	800dfd8 <strcat+0x4>
 800dfe2:	3b01      	subs	r3, #1
 800dfe4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfe8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dfec:	2a00      	cmp	r2, #0
 800dfee:	d1f9      	bne.n	800dfe4 <strcat+0x10>
 800dff0:	bd10      	pop	{r4, pc}

0800dff2 <strcpy>:
 800dff2:	4603      	mov	r3, r0
 800dff4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dff8:	f803 2b01 	strb.w	r2, [r3], #1
 800dffc:	2a00      	cmp	r2, #0
 800dffe:	d1f9      	bne.n	800dff4 <strcpy+0x2>
 800e000:	4770      	bx	lr

0800e002 <print_e>:
 800e002:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e004:	b087      	sub	sp, #28
 800e006:	ec43 2b10 	vmov	d0, r2, r3
 800e00a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e00c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800e010:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e012:	ab04      	add	r3, sp, #16
 800e014:	9301      	str	r3, [sp, #4]
 800e016:	ab03      	add	r3, sp, #12
 800e018:	9300      	str	r3, [sp, #0]
 800e01a:	1c62      	adds	r2, r4, #1
 800e01c:	ab05      	add	r3, sp, #20
 800e01e:	460f      	mov	r7, r1
 800e020:	2102      	movs	r1, #2
 800e022:	f000 fd89 	bl	800eb38 <_dtoa_r>
 800e026:	9a05      	ldr	r2, [sp, #20]
 800e028:	f242 730f 	movw	r3, #9999	; 0x270f
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d105      	bne.n	800e03c <print_e+0x3a>
 800e030:	4601      	mov	r1, r0
 800e032:	4638      	mov	r0, r7
 800e034:	f7ff ffdd 	bl	800dff2 <strcpy>
 800e038:	b007      	add	sp, #28
 800e03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e03c:	463b      	mov	r3, r7
 800e03e:	7801      	ldrb	r1, [r0, #0]
 800e040:	f803 1b01 	strb.w	r1, [r3], #1
 800e044:	2c00      	cmp	r4, #0
 800e046:	bfc8      	it	gt
 800e048:	2501      	movgt	r5, #1
 800e04a:	212e      	movs	r1, #46	; 0x2e
 800e04c:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800e050:	b10f      	cbz	r7, 800e056 <print_e+0x54>
 800e052:	2c00      	cmp	r4, #0
 800e054:	dc37      	bgt.n	800e0c6 <print_e+0xc4>
 800e056:	2e67      	cmp	r6, #103	; 0x67
 800e058:	d046      	beq.n	800e0e8 <print_e+0xe6>
 800e05a:	2e47      	cmp	r6, #71	; 0x47
 800e05c:	d046      	beq.n	800e0ec <print_e+0xea>
 800e05e:	212e      	movs	r1, #46	; 0x2e
 800e060:	2030      	movs	r0, #48	; 0x30
 800e062:	2c00      	cmp	r4, #0
 800e064:	dc38      	bgt.n	800e0d8 <print_e+0xd6>
 800e066:	1e51      	subs	r1, r2, #1
 800e068:	2900      	cmp	r1, #0
 800e06a:	bfb8      	it	lt
 800e06c:	f1c2 0201 	rsblt	r2, r2, #1
 800e070:	4618      	mov	r0, r3
 800e072:	9105      	str	r1, [sp, #20]
 800e074:	bfbc      	itt	lt
 800e076:	212d      	movlt	r1, #45	; 0x2d
 800e078:	9205      	strlt	r2, [sp, #20]
 800e07a:	f800 6b02 	strb.w	r6, [r0], #2
 800e07e:	bfb8      	it	lt
 800e080:	7059      	strblt	r1, [r3, #1]
 800e082:	9905      	ldr	r1, [sp, #20]
 800e084:	bfa4      	itt	ge
 800e086:	222b      	movge	r2, #43	; 0x2b
 800e088:	705a      	strbge	r2, [r3, #1]
 800e08a:	2963      	cmp	r1, #99	; 0x63
 800e08c:	dd0b      	ble.n	800e0a6 <print_e+0xa4>
 800e08e:	2264      	movs	r2, #100	; 0x64
 800e090:	fb91 f2f2 	sdiv	r2, r1, r2
 800e094:	f102 0430 	add.w	r4, r2, #48	; 0x30
 800e098:	1cd8      	adds	r0, r3, #3
 800e09a:	709c      	strb	r4, [r3, #2]
 800e09c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800e0a0:	fb03 1202 	mla	r2, r3, r2, r1
 800e0a4:	9205      	str	r2, [sp, #20]
 800e0a6:	9a05      	ldr	r2, [sp, #20]
 800e0a8:	230a      	movs	r3, #10
 800e0aa:	fb92 f3f3 	sdiv	r3, r2, r3
 800e0ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0b2:	7001      	strb	r1, [r0, #0]
 800e0b4:	f06f 0109 	mvn.w	r1, #9
 800e0b8:	fb01 2303 	mla	r3, r1, r3, r2
 800e0bc:	3330      	adds	r3, #48	; 0x30
 800e0be:	7043      	strb	r3, [r0, #1]
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	7083      	strb	r3, [r0, #2]
 800e0c4:	e7b8      	b.n	800e038 <print_e+0x36>
 800e0c6:	b10d      	cbz	r5, 800e0cc <print_e+0xca>
 800e0c8:	f803 1b01 	strb.w	r1, [r3], #1
 800e0cc:	7805      	ldrb	r5, [r0, #0]
 800e0ce:	f803 5b01 	strb.w	r5, [r3], #1
 800e0d2:	3c01      	subs	r4, #1
 800e0d4:	2500      	movs	r5, #0
 800e0d6:	e7b9      	b.n	800e04c <print_e+0x4a>
 800e0d8:	b10d      	cbz	r5, 800e0de <print_e+0xdc>
 800e0da:	f803 1b01 	strb.w	r1, [r3], #1
 800e0de:	f803 0b01 	strb.w	r0, [r3], #1
 800e0e2:	3c01      	subs	r4, #1
 800e0e4:	2500      	movs	r5, #0
 800e0e6:	e7bc      	b.n	800e062 <print_e+0x60>
 800e0e8:	2665      	movs	r6, #101	; 0x65
 800e0ea:	e7bc      	b.n	800e066 <print_e+0x64>
 800e0ec:	2645      	movs	r6, #69	; 0x45
 800e0ee:	e7ba      	b.n	800e066 <print_e+0x64>

0800e0f0 <_gcvt>:
 800e0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f4:	ec55 4b10 	vmov	r4, r5, d0
 800e0f8:	b088      	sub	sp, #32
 800e0fa:	4681      	mov	r9, r0
 800e0fc:	4688      	mov	r8, r1
 800e0fe:	4616      	mov	r6, r2
 800e100:	469a      	mov	sl, r3
 800e102:	ee10 0a10 	vmov	r0, s0
 800e106:	2200      	movs	r2, #0
 800e108:	2300      	movs	r3, #0
 800e10a:	4629      	mov	r1, r5
 800e10c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e10e:	f7f2 fcf5 	bl	8000afc <__aeabi_dcmplt>
 800e112:	b110      	cbz	r0, 800e11a <_gcvt+0x2a>
 800e114:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e118:	461d      	mov	r5, r3
 800e11a:	2200      	movs	r2, #0
 800e11c:	2300      	movs	r3, #0
 800e11e:	4620      	mov	r0, r4
 800e120:	4629      	mov	r1, r5
 800e122:	f7f2 fce1 	bl	8000ae8 <__aeabi_dcmpeq>
 800e126:	b138      	cbz	r0, 800e138 <_gcvt+0x48>
 800e128:	2330      	movs	r3, #48	; 0x30
 800e12a:	7033      	strb	r3, [r6, #0]
 800e12c:	2300      	movs	r3, #0
 800e12e:	7073      	strb	r3, [r6, #1]
 800e130:	4630      	mov	r0, r6
 800e132:	b008      	add	sp, #32
 800e134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e138:	a34b      	add	r3, pc, #300	; (adr r3, 800e268 <_gcvt+0x178>)
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	4620      	mov	r0, r4
 800e140:	4629      	mov	r1, r5
 800e142:	f7f2 fce5 	bl	8000b10 <__aeabi_dcmple>
 800e146:	b158      	cbz	r0, 800e160 <_gcvt+0x70>
 800e148:	f108 31ff 	add.w	r1, r8, #4294967295
 800e14c:	9100      	str	r1, [sp, #0]
 800e14e:	e9cd a701 	strd	sl, r7, [sp, #4]
 800e152:	4622      	mov	r2, r4
 800e154:	462b      	mov	r3, r5
 800e156:	4631      	mov	r1, r6
 800e158:	4648      	mov	r0, r9
 800e15a:	f7ff ff52 	bl	800e002 <print_e>
 800e15e:	e7e7      	b.n	800e130 <_gcvt+0x40>
 800e160:	4640      	mov	r0, r8
 800e162:	f000 fc0f 	bl	800e984 <_mprec_log10>
 800e166:	4622      	mov	r2, r4
 800e168:	ec51 0b10 	vmov	r0, r1, d0
 800e16c:	462b      	mov	r3, r5
 800e16e:	f7f2 fccf 	bl	8000b10 <__aeabi_dcmple>
 800e172:	2800      	cmp	r0, #0
 800e174:	d1e8      	bne.n	800e148 <_gcvt+0x58>
 800e176:	ab07      	add	r3, sp, #28
 800e178:	9301      	str	r3, [sp, #4]
 800e17a:	ab06      	add	r3, sp, #24
 800e17c:	9300      	str	r3, [sp, #0]
 800e17e:	4642      	mov	r2, r8
 800e180:	ab05      	add	r3, sp, #20
 800e182:	ec45 4b10 	vmov	d0, r4, r5
 800e186:	2102      	movs	r1, #2
 800e188:	4648      	mov	r0, r9
 800e18a:	f000 fcd5 	bl	800eb38 <_dtoa_r>
 800e18e:	9a05      	ldr	r2, [sp, #20]
 800e190:	f242 730f 	movw	r3, #9999	; 0x270f
 800e194:	429a      	cmp	r2, r3
 800e196:	d00e      	beq.n	800e1b6 <_gcvt+0xc6>
 800e198:	4633      	mov	r3, r6
 800e19a:	44b0      	add	r8, r6
 800e19c:	4604      	mov	r4, r0
 800e19e:	f810 5b01 	ldrb.w	r5, [r0], #1
 800e1a2:	9905      	ldr	r1, [sp, #20]
 800e1a4:	eba8 0203 	sub.w	r2, r8, r3
 800e1a8:	b10d      	cbz	r5, 800e1ae <_gcvt+0xbe>
 800e1aa:	2900      	cmp	r1, #0
 800e1ac:	dc08      	bgt.n	800e1c0 <_gcvt+0xd0>
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800e1b4:	e00d      	b.n	800e1d2 <_gcvt+0xe2>
 800e1b6:	4601      	mov	r1, r0
 800e1b8:	4630      	mov	r0, r6
 800e1ba:	f7ff ff1a 	bl	800dff2 <strcpy>
 800e1be:	e7b7      	b.n	800e130 <_gcvt+0x40>
 800e1c0:	3901      	subs	r1, #1
 800e1c2:	f803 5b01 	strb.w	r5, [r3], #1
 800e1c6:	9105      	str	r1, [sp, #20]
 800e1c8:	e7e8      	b.n	800e19c <_gcvt+0xac>
 800e1ca:	f803 cb01 	strb.w	ip, [r3], #1
 800e1ce:	3a01      	subs	r2, #1
 800e1d0:	2001      	movs	r0, #1
 800e1d2:	2900      	cmp	r1, #0
 800e1d4:	460d      	mov	r5, r1
 800e1d6:	dc2a      	bgt.n	800e22e <_gcvt+0x13e>
 800e1d8:	b100      	cbz	r0, 800e1dc <_gcvt+0xec>
 800e1da:	9105      	str	r1, [sp, #20]
 800e1dc:	b90f      	cbnz	r7, 800e1e2 <_gcvt+0xf2>
 800e1de:	7821      	ldrb	r1, [r4, #0]
 800e1e0:	b311      	cbz	r1, 800e228 <_gcvt+0x138>
 800e1e2:	42b3      	cmp	r3, r6
 800e1e4:	bf04      	itt	eq
 800e1e6:	2130      	moveq	r1, #48	; 0x30
 800e1e8:	f803 1b01 	strbeq.w	r1, [r3], #1
 800e1ec:	212e      	movs	r1, #46	; 0x2e
 800e1ee:	7019      	strb	r1, [r3, #0]
 800e1f0:	9905      	ldr	r1, [sp, #20]
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	2500      	movs	r5, #0
 800e1f6:	eba1 0c03 	sub.w	ip, r1, r3
 800e1fa:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800e1fe:	eb1c 0f00 	cmn.w	ip, r0
 800e202:	d41c      	bmi.n	800e23e <_gcvt+0x14e>
 800e204:	2900      	cmp	r1, #0
 800e206:	f1c1 0000 	rsb	r0, r1, #0
 800e20a:	bfc8      	it	gt
 800e20c:	2000      	movgt	r0, #0
 800e20e:	f100 0c01 	add.w	ip, r0, #1
 800e212:	4463      	add	r3, ip
 800e214:	4401      	add	r1, r0
 800e216:	b105      	cbz	r5, 800e21a <_gcvt+0x12a>
 800e218:	9105      	str	r1, [sp, #20]
 800e21a:	1e61      	subs	r1, r4, #1
 800e21c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e220:	b108      	cbz	r0, 800e226 <_gcvt+0x136>
 800e222:	2a00      	cmp	r2, #0
 800e224:	dc0f      	bgt.n	800e246 <_gcvt+0x156>
 800e226:	b9df      	cbnz	r7, 800e260 <_gcvt+0x170>
 800e228:	2200      	movs	r2, #0
 800e22a:	701a      	strb	r2, [r3, #0]
 800e22c:	e780      	b.n	800e130 <_gcvt+0x40>
 800e22e:	2a00      	cmp	r2, #0
 800e230:	f101 31ff 	add.w	r1, r1, #4294967295
 800e234:	dcc9      	bgt.n	800e1ca <_gcvt+0xda>
 800e236:	2800      	cmp	r0, #0
 800e238:	d0d0      	beq.n	800e1dc <_gcvt+0xec>
 800e23a:	9505      	str	r5, [sp, #20]
 800e23c:	e7ce      	b.n	800e1dc <_gcvt+0xec>
 800e23e:	f800 ef01 	strb.w	lr, [r0, #1]!
 800e242:	2501      	movs	r5, #1
 800e244:	e7db      	b.n	800e1fe <_gcvt+0x10e>
 800e246:	f803 0b01 	strb.w	r0, [r3], #1
 800e24a:	3a01      	subs	r2, #1
 800e24c:	e7e6      	b.n	800e21c <_gcvt+0x12c>
 800e24e:	f801 5b01 	strb.w	r5, [r1], #1
 800e252:	1a60      	subs	r0, r4, r1
 800e254:	2800      	cmp	r0, #0
 800e256:	dcfa      	bgt.n	800e24e <_gcvt+0x15e>
 800e258:	2a00      	cmp	r2, #0
 800e25a:	bfa8      	it	ge
 800e25c:	189b      	addge	r3, r3, r2
 800e25e:	e7e3      	b.n	800e228 <_gcvt+0x138>
 800e260:	4619      	mov	r1, r3
 800e262:	189c      	adds	r4, r3, r2
 800e264:	2530      	movs	r5, #48	; 0x30
 800e266:	e7f4      	b.n	800e252 <_gcvt+0x162>
 800e268:	eb1c432d 	.word	0xeb1c432d
 800e26c:	3f1a36e2 	.word	0x3f1a36e2

0800e270 <__malloc_lock>:
 800e270:	4801      	ldr	r0, [pc, #4]	; (800e278 <__malloc_lock+0x8>)
 800e272:	f001 ba60 	b.w	800f736 <__retarget_lock_acquire_recursive>
 800e276:	bf00      	nop
 800e278:	20008bac 	.word	0x20008bac

0800e27c <__malloc_unlock>:
 800e27c:	4801      	ldr	r0, [pc, #4]	; (800e284 <__malloc_unlock+0x8>)
 800e27e:	f001 ba5b 	b.w	800f738 <__retarget_lock_release_recursive>
 800e282:	bf00      	nop
 800e284:	20008bac 	.word	0x20008bac

0800e288 <_Balloc>:
 800e288:	b570      	push	{r4, r5, r6, lr}
 800e28a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e28c:	4604      	mov	r4, r0
 800e28e:	460d      	mov	r5, r1
 800e290:	b976      	cbnz	r6, 800e2b0 <_Balloc+0x28>
 800e292:	2010      	movs	r0, #16
 800e294:	f7ff fdbe 	bl	800de14 <malloc>
 800e298:	4602      	mov	r2, r0
 800e29a:	6260      	str	r0, [r4, #36]	; 0x24
 800e29c:	b920      	cbnz	r0, 800e2a8 <_Balloc+0x20>
 800e29e:	4b18      	ldr	r3, [pc, #96]	; (800e300 <_Balloc+0x78>)
 800e2a0:	4818      	ldr	r0, [pc, #96]	; (800e304 <_Balloc+0x7c>)
 800e2a2:	2166      	movs	r1, #102	; 0x66
 800e2a4:	f000 fb9c 	bl	800e9e0 <__assert_func>
 800e2a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2ac:	6006      	str	r6, [r0, #0]
 800e2ae:	60c6      	str	r6, [r0, #12]
 800e2b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e2b2:	68f3      	ldr	r3, [r6, #12]
 800e2b4:	b183      	cbz	r3, 800e2d8 <_Balloc+0x50>
 800e2b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2b8:	68db      	ldr	r3, [r3, #12]
 800e2ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e2be:	b9b8      	cbnz	r0, 800e2f0 <_Balloc+0x68>
 800e2c0:	2101      	movs	r1, #1
 800e2c2:	fa01 f605 	lsl.w	r6, r1, r5
 800e2c6:	1d72      	adds	r2, r6, #5
 800e2c8:	0092      	lsls	r2, r2, #2
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f000 fb78 	bl	800e9c0 <_calloc_r>
 800e2d0:	b160      	cbz	r0, 800e2ec <_Balloc+0x64>
 800e2d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e2d6:	e00e      	b.n	800e2f6 <_Balloc+0x6e>
 800e2d8:	2221      	movs	r2, #33	; 0x21
 800e2da:	2104      	movs	r1, #4
 800e2dc:	4620      	mov	r0, r4
 800e2de:	f000 fb6f 	bl	800e9c0 <_calloc_r>
 800e2e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2e4:	60f0      	str	r0, [r6, #12]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d1e4      	bne.n	800e2b6 <_Balloc+0x2e>
 800e2ec:	2000      	movs	r0, #0
 800e2ee:	bd70      	pop	{r4, r5, r6, pc}
 800e2f0:	6802      	ldr	r2, [r0, #0]
 800e2f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e2fc:	e7f7      	b.n	800e2ee <_Balloc+0x66>
 800e2fe:	bf00      	nop
 800e300:	08010580 	.word	0x08010580
 800e304:	08010597 	.word	0x08010597

0800e308 <_Bfree>:
 800e308:	b570      	push	{r4, r5, r6, lr}
 800e30a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e30c:	4605      	mov	r5, r0
 800e30e:	460c      	mov	r4, r1
 800e310:	b976      	cbnz	r6, 800e330 <_Bfree+0x28>
 800e312:	2010      	movs	r0, #16
 800e314:	f7ff fd7e 	bl	800de14 <malloc>
 800e318:	4602      	mov	r2, r0
 800e31a:	6268      	str	r0, [r5, #36]	; 0x24
 800e31c:	b920      	cbnz	r0, 800e328 <_Bfree+0x20>
 800e31e:	4b09      	ldr	r3, [pc, #36]	; (800e344 <_Bfree+0x3c>)
 800e320:	4809      	ldr	r0, [pc, #36]	; (800e348 <_Bfree+0x40>)
 800e322:	218a      	movs	r1, #138	; 0x8a
 800e324:	f000 fb5c 	bl	800e9e0 <__assert_func>
 800e328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e32c:	6006      	str	r6, [r0, #0]
 800e32e:	60c6      	str	r6, [r0, #12]
 800e330:	b13c      	cbz	r4, 800e342 <_Bfree+0x3a>
 800e332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e334:	6862      	ldr	r2, [r4, #4]
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e33c:	6021      	str	r1, [r4, #0]
 800e33e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e342:	bd70      	pop	{r4, r5, r6, pc}
 800e344:	08010580 	.word	0x08010580
 800e348:	08010597 	.word	0x08010597

0800e34c <__multadd>:
 800e34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e350:	690e      	ldr	r6, [r1, #16]
 800e352:	4607      	mov	r7, r0
 800e354:	4698      	mov	r8, r3
 800e356:	460c      	mov	r4, r1
 800e358:	f101 0014 	add.w	r0, r1, #20
 800e35c:	2300      	movs	r3, #0
 800e35e:	6805      	ldr	r5, [r0, #0]
 800e360:	b2a9      	uxth	r1, r5
 800e362:	fb02 8101 	mla	r1, r2, r1, r8
 800e366:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e36a:	0c2d      	lsrs	r5, r5, #16
 800e36c:	fb02 c505 	mla	r5, r2, r5, ip
 800e370:	b289      	uxth	r1, r1
 800e372:	3301      	adds	r3, #1
 800e374:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e378:	429e      	cmp	r6, r3
 800e37a:	f840 1b04 	str.w	r1, [r0], #4
 800e37e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e382:	dcec      	bgt.n	800e35e <__multadd+0x12>
 800e384:	f1b8 0f00 	cmp.w	r8, #0
 800e388:	d022      	beq.n	800e3d0 <__multadd+0x84>
 800e38a:	68a3      	ldr	r3, [r4, #8]
 800e38c:	42b3      	cmp	r3, r6
 800e38e:	dc19      	bgt.n	800e3c4 <__multadd+0x78>
 800e390:	6861      	ldr	r1, [r4, #4]
 800e392:	4638      	mov	r0, r7
 800e394:	3101      	adds	r1, #1
 800e396:	f7ff ff77 	bl	800e288 <_Balloc>
 800e39a:	4605      	mov	r5, r0
 800e39c:	b928      	cbnz	r0, 800e3aa <__multadd+0x5e>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	4b0d      	ldr	r3, [pc, #52]	; (800e3d8 <__multadd+0x8c>)
 800e3a2:	480e      	ldr	r0, [pc, #56]	; (800e3dc <__multadd+0x90>)
 800e3a4:	21b5      	movs	r1, #181	; 0xb5
 800e3a6:	f000 fb1b 	bl	800e9e0 <__assert_func>
 800e3aa:	6922      	ldr	r2, [r4, #16]
 800e3ac:	3202      	adds	r2, #2
 800e3ae:	f104 010c 	add.w	r1, r4, #12
 800e3b2:	0092      	lsls	r2, r2, #2
 800e3b4:	300c      	adds	r0, #12
 800e3b6:	f7ff fd3d 	bl	800de34 <memcpy>
 800e3ba:	4621      	mov	r1, r4
 800e3bc:	4638      	mov	r0, r7
 800e3be:	f7ff ffa3 	bl	800e308 <_Bfree>
 800e3c2:	462c      	mov	r4, r5
 800e3c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e3c8:	3601      	adds	r6, #1
 800e3ca:	f8c3 8014 	str.w	r8, [r3, #20]
 800e3ce:	6126      	str	r6, [r4, #16]
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3d6:	bf00      	nop
 800e3d8:	080105f7 	.word	0x080105f7
 800e3dc:	08010597 	.word	0x08010597

0800e3e0 <__hi0bits>:
 800e3e0:	0c03      	lsrs	r3, r0, #16
 800e3e2:	041b      	lsls	r3, r3, #16
 800e3e4:	b9d3      	cbnz	r3, 800e41c <__hi0bits+0x3c>
 800e3e6:	0400      	lsls	r0, r0, #16
 800e3e8:	2310      	movs	r3, #16
 800e3ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e3ee:	bf04      	itt	eq
 800e3f0:	0200      	lsleq	r0, r0, #8
 800e3f2:	3308      	addeq	r3, #8
 800e3f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e3f8:	bf04      	itt	eq
 800e3fa:	0100      	lsleq	r0, r0, #4
 800e3fc:	3304      	addeq	r3, #4
 800e3fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e402:	bf04      	itt	eq
 800e404:	0080      	lsleq	r0, r0, #2
 800e406:	3302      	addeq	r3, #2
 800e408:	2800      	cmp	r0, #0
 800e40a:	db05      	blt.n	800e418 <__hi0bits+0x38>
 800e40c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e410:	f103 0301 	add.w	r3, r3, #1
 800e414:	bf08      	it	eq
 800e416:	2320      	moveq	r3, #32
 800e418:	4618      	mov	r0, r3
 800e41a:	4770      	bx	lr
 800e41c:	2300      	movs	r3, #0
 800e41e:	e7e4      	b.n	800e3ea <__hi0bits+0xa>

0800e420 <__lo0bits>:
 800e420:	6803      	ldr	r3, [r0, #0]
 800e422:	f013 0207 	ands.w	r2, r3, #7
 800e426:	4601      	mov	r1, r0
 800e428:	d00b      	beq.n	800e442 <__lo0bits+0x22>
 800e42a:	07da      	lsls	r2, r3, #31
 800e42c:	d424      	bmi.n	800e478 <__lo0bits+0x58>
 800e42e:	0798      	lsls	r0, r3, #30
 800e430:	bf49      	itett	mi
 800e432:	085b      	lsrmi	r3, r3, #1
 800e434:	089b      	lsrpl	r3, r3, #2
 800e436:	2001      	movmi	r0, #1
 800e438:	600b      	strmi	r3, [r1, #0]
 800e43a:	bf5c      	itt	pl
 800e43c:	600b      	strpl	r3, [r1, #0]
 800e43e:	2002      	movpl	r0, #2
 800e440:	4770      	bx	lr
 800e442:	b298      	uxth	r0, r3
 800e444:	b9b0      	cbnz	r0, 800e474 <__lo0bits+0x54>
 800e446:	0c1b      	lsrs	r3, r3, #16
 800e448:	2010      	movs	r0, #16
 800e44a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e44e:	bf04      	itt	eq
 800e450:	0a1b      	lsreq	r3, r3, #8
 800e452:	3008      	addeq	r0, #8
 800e454:	071a      	lsls	r2, r3, #28
 800e456:	bf04      	itt	eq
 800e458:	091b      	lsreq	r3, r3, #4
 800e45a:	3004      	addeq	r0, #4
 800e45c:	079a      	lsls	r2, r3, #30
 800e45e:	bf04      	itt	eq
 800e460:	089b      	lsreq	r3, r3, #2
 800e462:	3002      	addeq	r0, #2
 800e464:	07da      	lsls	r2, r3, #31
 800e466:	d403      	bmi.n	800e470 <__lo0bits+0x50>
 800e468:	085b      	lsrs	r3, r3, #1
 800e46a:	f100 0001 	add.w	r0, r0, #1
 800e46e:	d005      	beq.n	800e47c <__lo0bits+0x5c>
 800e470:	600b      	str	r3, [r1, #0]
 800e472:	4770      	bx	lr
 800e474:	4610      	mov	r0, r2
 800e476:	e7e8      	b.n	800e44a <__lo0bits+0x2a>
 800e478:	2000      	movs	r0, #0
 800e47a:	4770      	bx	lr
 800e47c:	2020      	movs	r0, #32
 800e47e:	4770      	bx	lr

0800e480 <__i2b>:
 800e480:	b510      	push	{r4, lr}
 800e482:	460c      	mov	r4, r1
 800e484:	2101      	movs	r1, #1
 800e486:	f7ff feff 	bl	800e288 <_Balloc>
 800e48a:	4602      	mov	r2, r0
 800e48c:	b928      	cbnz	r0, 800e49a <__i2b+0x1a>
 800e48e:	4b05      	ldr	r3, [pc, #20]	; (800e4a4 <__i2b+0x24>)
 800e490:	4805      	ldr	r0, [pc, #20]	; (800e4a8 <__i2b+0x28>)
 800e492:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e496:	f000 faa3 	bl	800e9e0 <__assert_func>
 800e49a:	2301      	movs	r3, #1
 800e49c:	6144      	str	r4, [r0, #20]
 800e49e:	6103      	str	r3, [r0, #16]
 800e4a0:	bd10      	pop	{r4, pc}
 800e4a2:	bf00      	nop
 800e4a4:	080105f7 	.word	0x080105f7
 800e4a8:	08010597 	.word	0x08010597

0800e4ac <__multiply>:
 800e4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b0:	4614      	mov	r4, r2
 800e4b2:	690a      	ldr	r2, [r1, #16]
 800e4b4:	6923      	ldr	r3, [r4, #16]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	bfb8      	it	lt
 800e4ba:	460b      	movlt	r3, r1
 800e4bc:	460d      	mov	r5, r1
 800e4be:	bfbc      	itt	lt
 800e4c0:	4625      	movlt	r5, r4
 800e4c2:	461c      	movlt	r4, r3
 800e4c4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e4c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e4cc:	68ab      	ldr	r3, [r5, #8]
 800e4ce:	6869      	ldr	r1, [r5, #4]
 800e4d0:	eb0a 0709 	add.w	r7, sl, r9
 800e4d4:	42bb      	cmp	r3, r7
 800e4d6:	b085      	sub	sp, #20
 800e4d8:	bfb8      	it	lt
 800e4da:	3101      	addlt	r1, #1
 800e4dc:	f7ff fed4 	bl	800e288 <_Balloc>
 800e4e0:	b930      	cbnz	r0, 800e4f0 <__multiply+0x44>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	4b42      	ldr	r3, [pc, #264]	; (800e5f0 <__multiply+0x144>)
 800e4e6:	4843      	ldr	r0, [pc, #268]	; (800e5f4 <__multiply+0x148>)
 800e4e8:	f240 115d 	movw	r1, #349	; 0x15d
 800e4ec:	f000 fa78 	bl	800e9e0 <__assert_func>
 800e4f0:	f100 0614 	add.w	r6, r0, #20
 800e4f4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e4f8:	4633      	mov	r3, r6
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	4543      	cmp	r3, r8
 800e4fe:	d31e      	bcc.n	800e53e <__multiply+0x92>
 800e500:	f105 0c14 	add.w	ip, r5, #20
 800e504:	f104 0314 	add.w	r3, r4, #20
 800e508:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e50c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e510:	9202      	str	r2, [sp, #8]
 800e512:	ebac 0205 	sub.w	r2, ip, r5
 800e516:	3a15      	subs	r2, #21
 800e518:	f022 0203 	bic.w	r2, r2, #3
 800e51c:	3204      	adds	r2, #4
 800e51e:	f105 0115 	add.w	r1, r5, #21
 800e522:	458c      	cmp	ip, r1
 800e524:	bf38      	it	cc
 800e526:	2204      	movcc	r2, #4
 800e528:	9201      	str	r2, [sp, #4]
 800e52a:	9a02      	ldr	r2, [sp, #8]
 800e52c:	9303      	str	r3, [sp, #12]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d808      	bhi.n	800e544 <__multiply+0x98>
 800e532:	2f00      	cmp	r7, #0
 800e534:	dc55      	bgt.n	800e5e2 <__multiply+0x136>
 800e536:	6107      	str	r7, [r0, #16]
 800e538:	b005      	add	sp, #20
 800e53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e53e:	f843 2b04 	str.w	r2, [r3], #4
 800e542:	e7db      	b.n	800e4fc <__multiply+0x50>
 800e544:	f8b3 a000 	ldrh.w	sl, [r3]
 800e548:	f1ba 0f00 	cmp.w	sl, #0
 800e54c:	d020      	beq.n	800e590 <__multiply+0xe4>
 800e54e:	f105 0e14 	add.w	lr, r5, #20
 800e552:	46b1      	mov	r9, r6
 800e554:	2200      	movs	r2, #0
 800e556:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e55a:	f8d9 b000 	ldr.w	fp, [r9]
 800e55e:	b2a1      	uxth	r1, r4
 800e560:	fa1f fb8b 	uxth.w	fp, fp
 800e564:	fb0a b101 	mla	r1, sl, r1, fp
 800e568:	4411      	add	r1, r2
 800e56a:	f8d9 2000 	ldr.w	r2, [r9]
 800e56e:	0c24      	lsrs	r4, r4, #16
 800e570:	0c12      	lsrs	r2, r2, #16
 800e572:	fb0a 2404 	mla	r4, sl, r4, r2
 800e576:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e57a:	b289      	uxth	r1, r1
 800e57c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e580:	45f4      	cmp	ip, lr
 800e582:	f849 1b04 	str.w	r1, [r9], #4
 800e586:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e58a:	d8e4      	bhi.n	800e556 <__multiply+0xaa>
 800e58c:	9901      	ldr	r1, [sp, #4]
 800e58e:	5072      	str	r2, [r6, r1]
 800e590:	9a03      	ldr	r2, [sp, #12]
 800e592:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e596:	3304      	adds	r3, #4
 800e598:	f1b9 0f00 	cmp.w	r9, #0
 800e59c:	d01f      	beq.n	800e5de <__multiply+0x132>
 800e59e:	6834      	ldr	r4, [r6, #0]
 800e5a0:	f105 0114 	add.w	r1, r5, #20
 800e5a4:	46b6      	mov	lr, r6
 800e5a6:	f04f 0a00 	mov.w	sl, #0
 800e5aa:	880a      	ldrh	r2, [r1, #0]
 800e5ac:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e5b0:	fb09 b202 	mla	r2, r9, r2, fp
 800e5b4:	4492      	add	sl, r2
 800e5b6:	b2a4      	uxth	r4, r4
 800e5b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e5bc:	f84e 4b04 	str.w	r4, [lr], #4
 800e5c0:	f851 4b04 	ldr.w	r4, [r1], #4
 800e5c4:	f8be 2000 	ldrh.w	r2, [lr]
 800e5c8:	0c24      	lsrs	r4, r4, #16
 800e5ca:	fb09 2404 	mla	r4, r9, r4, r2
 800e5ce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e5d2:	458c      	cmp	ip, r1
 800e5d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e5d8:	d8e7      	bhi.n	800e5aa <__multiply+0xfe>
 800e5da:	9a01      	ldr	r2, [sp, #4]
 800e5dc:	50b4      	str	r4, [r6, r2]
 800e5de:	3604      	adds	r6, #4
 800e5e0:	e7a3      	b.n	800e52a <__multiply+0x7e>
 800e5e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1a5      	bne.n	800e536 <__multiply+0x8a>
 800e5ea:	3f01      	subs	r7, #1
 800e5ec:	e7a1      	b.n	800e532 <__multiply+0x86>
 800e5ee:	bf00      	nop
 800e5f0:	080105f7 	.word	0x080105f7
 800e5f4:	08010597 	.word	0x08010597

0800e5f8 <__pow5mult>:
 800e5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5fc:	4615      	mov	r5, r2
 800e5fe:	f012 0203 	ands.w	r2, r2, #3
 800e602:	4606      	mov	r6, r0
 800e604:	460f      	mov	r7, r1
 800e606:	d007      	beq.n	800e618 <__pow5mult+0x20>
 800e608:	4c25      	ldr	r4, [pc, #148]	; (800e6a0 <__pow5mult+0xa8>)
 800e60a:	3a01      	subs	r2, #1
 800e60c:	2300      	movs	r3, #0
 800e60e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e612:	f7ff fe9b 	bl	800e34c <__multadd>
 800e616:	4607      	mov	r7, r0
 800e618:	10ad      	asrs	r5, r5, #2
 800e61a:	d03d      	beq.n	800e698 <__pow5mult+0xa0>
 800e61c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e61e:	b97c      	cbnz	r4, 800e640 <__pow5mult+0x48>
 800e620:	2010      	movs	r0, #16
 800e622:	f7ff fbf7 	bl	800de14 <malloc>
 800e626:	4602      	mov	r2, r0
 800e628:	6270      	str	r0, [r6, #36]	; 0x24
 800e62a:	b928      	cbnz	r0, 800e638 <__pow5mult+0x40>
 800e62c:	4b1d      	ldr	r3, [pc, #116]	; (800e6a4 <__pow5mult+0xac>)
 800e62e:	481e      	ldr	r0, [pc, #120]	; (800e6a8 <__pow5mult+0xb0>)
 800e630:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e634:	f000 f9d4 	bl	800e9e0 <__assert_func>
 800e638:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e63c:	6004      	str	r4, [r0, #0]
 800e63e:	60c4      	str	r4, [r0, #12]
 800e640:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e644:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e648:	b94c      	cbnz	r4, 800e65e <__pow5mult+0x66>
 800e64a:	f240 2171 	movw	r1, #625	; 0x271
 800e64e:	4630      	mov	r0, r6
 800e650:	f7ff ff16 	bl	800e480 <__i2b>
 800e654:	2300      	movs	r3, #0
 800e656:	f8c8 0008 	str.w	r0, [r8, #8]
 800e65a:	4604      	mov	r4, r0
 800e65c:	6003      	str	r3, [r0, #0]
 800e65e:	f04f 0900 	mov.w	r9, #0
 800e662:	07eb      	lsls	r3, r5, #31
 800e664:	d50a      	bpl.n	800e67c <__pow5mult+0x84>
 800e666:	4639      	mov	r1, r7
 800e668:	4622      	mov	r2, r4
 800e66a:	4630      	mov	r0, r6
 800e66c:	f7ff ff1e 	bl	800e4ac <__multiply>
 800e670:	4639      	mov	r1, r7
 800e672:	4680      	mov	r8, r0
 800e674:	4630      	mov	r0, r6
 800e676:	f7ff fe47 	bl	800e308 <_Bfree>
 800e67a:	4647      	mov	r7, r8
 800e67c:	106d      	asrs	r5, r5, #1
 800e67e:	d00b      	beq.n	800e698 <__pow5mult+0xa0>
 800e680:	6820      	ldr	r0, [r4, #0]
 800e682:	b938      	cbnz	r0, 800e694 <__pow5mult+0x9c>
 800e684:	4622      	mov	r2, r4
 800e686:	4621      	mov	r1, r4
 800e688:	4630      	mov	r0, r6
 800e68a:	f7ff ff0f 	bl	800e4ac <__multiply>
 800e68e:	6020      	str	r0, [r4, #0]
 800e690:	f8c0 9000 	str.w	r9, [r0]
 800e694:	4604      	mov	r4, r0
 800e696:	e7e4      	b.n	800e662 <__pow5mult+0x6a>
 800e698:	4638      	mov	r0, r7
 800e69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e69e:	bf00      	nop
 800e6a0:	080106f8 	.word	0x080106f8
 800e6a4:	08010580 	.word	0x08010580
 800e6a8:	08010597 	.word	0x08010597

0800e6ac <__lshift>:
 800e6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6b0:	460c      	mov	r4, r1
 800e6b2:	6849      	ldr	r1, [r1, #4]
 800e6b4:	6923      	ldr	r3, [r4, #16]
 800e6b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6ba:	68a3      	ldr	r3, [r4, #8]
 800e6bc:	4607      	mov	r7, r0
 800e6be:	4691      	mov	r9, r2
 800e6c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6c4:	f108 0601 	add.w	r6, r8, #1
 800e6c8:	42b3      	cmp	r3, r6
 800e6ca:	db0b      	blt.n	800e6e4 <__lshift+0x38>
 800e6cc:	4638      	mov	r0, r7
 800e6ce:	f7ff fddb 	bl	800e288 <_Balloc>
 800e6d2:	4605      	mov	r5, r0
 800e6d4:	b948      	cbnz	r0, 800e6ea <__lshift+0x3e>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	4b28      	ldr	r3, [pc, #160]	; (800e77c <__lshift+0xd0>)
 800e6da:	4829      	ldr	r0, [pc, #164]	; (800e780 <__lshift+0xd4>)
 800e6dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e6e0:	f000 f97e 	bl	800e9e0 <__assert_func>
 800e6e4:	3101      	adds	r1, #1
 800e6e6:	005b      	lsls	r3, r3, #1
 800e6e8:	e7ee      	b.n	800e6c8 <__lshift+0x1c>
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	f100 0114 	add.w	r1, r0, #20
 800e6f0:	f100 0210 	add.w	r2, r0, #16
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	4553      	cmp	r3, sl
 800e6f8:	db33      	blt.n	800e762 <__lshift+0xb6>
 800e6fa:	6920      	ldr	r0, [r4, #16]
 800e6fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e700:	f104 0314 	add.w	r3, r4, #20
 800e704:	f019 091f 	ands.w	r9, r9, #31
 800e708:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e70c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e710:	d02b      	beq.n	800e76a <__lshift+0xbe>
 800e712:	f1c9 0e20 	rsb	lr, r9, #32
 800e716:	468a      	mov	sl, r1
 800e718:	2200      	movs	r2, #0
 800e71a:	6818      	ldr	r0, [r3, #0]
 800e71c:	fa00 f009 	lsl.w	r0, r0, r9
 800e720:	4302      	orrs	r2, r0
 800e722:	f84a 2b04 	str.w	r2, [sl], #4
 800e726:	f853 2b04 	ldr.w	r2, [r3], #4
 800e72a:	459c      	cmp	ip, r3
 800e72c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e730:	d8f3      	bhi.n	800e71a <__lshift+0x6e>
 800e732:	ebac 0304 	sub.w	r3, ip, r4
 800e736:	3b15      	subs	r3, #21
 800e738:	f023 0303 	bic.w	r3, r3, #3
 800e73c:	3304      	adds	r3, #4
 800e73e:	f104 0015 	add.w	r0, r4, #21
 800e742:	4584      	cmp	ip, r0
 800e744:	bf38      	it	cc
 800e746:	2304      	movcc	r3, #4
 800e748:	50ca      	str	r2, [r1, r3]
 800e74a:	b10a      	cbz	r2, 800e750 <__lshift+0xa4>
 800e74c:	f108 0602 	add.w	r6, r8, #2
 800e750:	3e01      	subs	r6, #1
 800e752:	4638      	mov	r0, r7
 800e754:	612e      	str	r6, [r5, #16]
 800e756:	4621      	mov	r1, r4
 800e758:	f7ff fdd6 	bl	800e308 <_Bfree>
 800e75c:	4628      	mov	r0, r5
 800e75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e762:	f842 0f04 	str.w	r0, [r2, #4]!
 800e766:	3301      	adds	r3, #1
 800e768:	e7c5      	b.n	800e6f6 <__lshift+0x4a>
 800e76a:	3904      	subs	r1, #4
 800e76c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e770:	f841 2f04 	str.w	r2, [r1, #4]!
 800e774:	459c      	cmp	ip, r3
 800e776:	d8f9      	bhi.n	800e76c <__lshift+0xc0>
 800e778:	e7ea      	b.n	800e750 <__lshift+0xa4>
 800e77a:	bf00      	nop
 800e77c:	080105f7 	.word	0x080105f7
 800e780:	08010597 	.word	0x08010597

0800e784 <__mcmp>:
 800e784:	b530      	push	{r4, r5, lr}
 800e786:	6902      	ldr	r2, [r0, #16]
 800e788:	690c      	ldr	r4, [r1, #16]
 800e78a:	1b12      	subs	r2, r2, r4
 800e78c:	d10e      	bne.n	800e7ac <__mcmp+0x28>
 800e78e:	f100 0314 	add.w	r3, r0, #20
 800e792:	3114      	adds	r1, #20
 800e794:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e798:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e79c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e7a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e7a4:	42a5      	cmp	r5, r4
 800e7a6:	d003      	beq.n	800e7b0 <__mcmp+0x2c>
 800e7a8:	d305      	bcc.n	800e7b6 <__mcmp+0x32>
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	4610      	mov	r0, r2
 800e7ae:	bd30      	pop	{r4, r5, pc}
 800e7b0:	4283      	cmp	r3, r0
 800e7b2:	d3f3      	bcc.n	800e79c <__mcmp+0x18>
 800e7b4:	e7fa      	b.n	800e7ac <__mcmp+0x28>
 800e7b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e7ba:	e7f7      	b.n	800e7ac <__mcmp+0x28>

0800e7bc <__mdiff>:
 800e7bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c0:	460c      	mov	r4, r1
 800e7c2:	4606      	mov	r6, r0
 800e7c4:	4611      	mov	r1, r2
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	4617      	mov	r7, r2
 800e7ca:	f7ff ffdb 	bl	800e784 <__mcmp>
 800e7ce:	1e05      	subs	r5, r0, #0
 800e7d0:	d110      	bne.n	800e7f4 <__mdiff+0x38>
 800e7d2:	4629      	mov	r1, r5
 800e7d4:	4630      	mov	r0, r6
 800e7d6:	f7ff fd57 	bl	800e288 <_Balloc>
 800e7da:	b930      	cbnz	r0, 800e7ea <__mdiff+0x2e>
 800e7dc:	4b39      	ldr	r3, [pc, #228]	; (800e8c4 <__mdiff+0x108>)
 800e7de:	4602      	mov	r2, r0
 800e7e0:	f240 2132 	movw	r1, #562	; 0x232
 800e7e4:	4838      	ldr	r0, [pc, #224]	; (800e8c8 <__mdiff+0x10c>)
 800e7e6:	f000 f8fb 	bl	800e9e0 <__assert_func>
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e7f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f4:	bfa4      	itt	ge
 800e7f6:	463b      	movge	r3, r7
 800e7f8:	4627      	movge	r7, r4
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	6879      	ldr	r1, [r7, #4]
 800e7fe:	bfa6      	itte	ge
 800e800:	461c      	movge	r4, r3
 800e802:	2500      	movge	r5, #0
 800e804:	2501      	movlt	r5, #1
 800e806:	f7ff fd3f 	bl	800e288 <_Balloc>
 800e80a:	b920      	cbnz	r0, 800e816 <__mdiff+0x5a>
 800e80c:	4b2d      	ldr	r3, [pc, #180]	; (800e8c4 <__mdiff+0x108>)
 800e80e:	4602      	mov	r2, r0
 800e810:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e814:	e7e6      	b.n	800e7e4 <__mdiff+0x28>
 800e816:	693e      	ldr	r6, [r7, #16]
 800e818:	60c5      	str	r5, [r0, #12]
 800e81a:	6925      	ldr	r5, [r4, #16]
 800e81c:	f107 0114 	add.w	r1, r7, #20
 800e820:	f104 0914 	add.w	r9, r4, #20
 800e824:	f100 0e14 	add.w	lr, r0, #20
 800e828:	f107 0210 	add.w	r2, r7, #16
 800e82c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e830:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e834:	46f2      	mov	sl, lr
 800e836:	2700      	movs	r7, #0
 800e838:	f859 3b04 	ldr.w	r3, [r9], #4
 800e83c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e840:	fa1f f883 	uxth.w	r8, r3
 800e844:	fa17 f78b 	uxtah	r7, r7, fp
 800e848:	0c1b      	lsrs	r3, r3, #16
 800e84a:	eba7 0808 	sub.w	r8, r7, r8
 800e84e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e852:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e856:	fa1f f888 	uxth.w	r8, r8
 800e85a:	141f      	asrs	r7, r3, #16
 800e85c:	454d      	cmp	r5, r9
 800e85e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e862:	f84a 3b04 	str.w	r3, [sl], #4
 800e866:	d8e7      	bhi.n	800e838 <__mdiff+0x7c>
 800e868:	1b2b      	subs	r3, r5, r4
 800e86a:	3b15      	subs	r3, #21
 800e86c:	f023 0303 	bic.w	r3, r3, #3
 800e870:	3304      	adds	r3, #4
 800e872:	3415      	adds	r4, #21
 800e874:	42a5      	cmp	r5, r4
 800e876:	bf38      	it	cc
 800e878:	2304      	movcc	r3, #4
 800e87a:	4419      	add	r1, r3
 800e87c:	4473      	add	r3, lr
 800e87e:	469e      	mov	lr, r3
 800e880:	460d      	mov	r5, r1
 800e882:	4565      	cmp	r5, ip
 800e884:	d30e      	bcc.n	800e8a4 <__mdiff+0xe8>
 800e886:	f10c 0203 	add.w	r2, ip, #3
 800e88a:	1a52      	subs	r2, r2, r1
 800e88c:	f022 0203 	bic.w	r2, r2, #3
 800e890:	3903      	subs	r1, #3
 800e892:	458c      	cmp	ip, r1
 800e894:	bf38      	it	cc
 800e896:	2200      	movcc	r2, #0
 800e898:	441a      	add	r2, r3
 800e89a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e89e:	b17b      	cbz	r3, 800e8c0 <__mdiff+0x104>
 800e8a0:	6106      	str	r6, [r0, #16]
 800e8a2:	e7a5      	b.n	800e7f0 <__mdiff+0x34>
 800e8a4:	f855 8b04 	ldr.w	r8, [r5], #4
 800e8a8:	fa17 f488 	uxtah	r4, r7, r8
 800e8ac:	1422      	asrs	r2, r4, #16
 800e8ae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e8b2:	b2a4      	uxth	r4, r4
 800e8b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e8b8:	f84e 4b04 	str.w	r4, [lr], #4
 800e8bc:	1417      	asrs	r7, r2, #16
 800e8be:	e7e0      	b.n	800e882 <__mdiff+0xc6>
 800e8c0:	3e01      	subs	r6, #1
 800e8c2:	e7ea      	b.n	800e89a <__mdiff+0xde>
 800e8c4:	080105f7 	.word	0x080105f7
 800e8c8:	08010597 	.word	0x08010597

0800e8cc <__d2b>:
 800e8cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e8d0:	4689      	mov	r9, r1
 800e8d2:	2101      	movs	r1, #1
 800e8d4:	ec57 6b10 	vmov	r6, r7, d0
 800e8d8:	4690      	mov	r8, r2
 800e8da:	f7ff fcd5 	bl	800e288 <_Balloc>
 800e8de:	4604      	mov	r4, r0
 800e8e0:	b930      	cbnz	r0, 800e8f0 <__d2b+0x24>
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	4b25      	ldr	r3, [pc, #148]	; (800e97c <__d2b+0xb0>)
 800e8e6:	4826      	ldr	r0, [pc, #152]	; (800e980 <__d2b+0xb4>)
 800e8e8:	f240 310a 	movw	r1, #778	; 0x30a
 800e8ec:	f000 f878 	bl	800e9e0 <__assert_func>
 800e8f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e8f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e8f8:	bb35      	cbnz	r5, 800e948 <__d2b+0x7c>
 800e8fa:	2e00      	cmp	r6, #0
 800e8fc:	9301      	str	r3, [sp, #4]
 800e8fe:	d028      	beq.n	800e952 <__d2b+0x86>
 800e900:	4668      	mov	r0, sp
 800e902:	9600      	str	r6, [sp, #0]
 800e904:	f7ff fd8c 	bl	800e420 <__lo0bits>
 800e908:	9900      	ldr	r1, [sp, #0]
 800e90a:	b300      	cbz	r0, 800e94e <__d2b+0x82>
 800e90c:	9a01      	ldr	r2, [sp, #4]
 800e90e:	f1c0 0320 	rsb	r3, r0, #32
 800e912:	fa02 f303 	lsl.w	r3, r2, r3
 800e916:	430b      	orrs	r3, r1
 800e918:	40c2      	lsrs	r2, r0
 800e91a:	6163      	str	r3, [r4, #20]
 800e91c:	9201      	str	r2, [sp, #4]
 800e91e:	9b01      	ldr	r3, [sp, #4]
 800e920:	61a3      	str	r3, [r4, #24]
 800e922:	2b00      	cmp	r3, #0
 800e924:	bf14      	ite	ne
 800e926:	2202      	movne	r2, #2
 800e928:	2201      	moveq	r2, #1
 800e92a:	6122      	str	r2, [r4, #16]
 800e92c:	b1d5      	cbz	r5, 800e964 <__d2b+0x98>
 800e92e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e932:	4405      	add	r5, r0
 800e934:	f8c9 5000 	str.w	r5, [r9]
 800e938:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e93c:	f8c8 0000 	str.w	r0, [r8]
 800e940:	4620      	mov	r0, r4
 800e942:	b003      	add	sp, #12
 800e944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e94c:	e7d5      	b.n	800e8fa <__d2b+0x2e>
 800e94e:	6161      	str	r1, [r4, #20]
 800e950:	e7e5      	b.n	800e91e <__d2b+0x52>
 800e952:	a801      	add	r0, sp, #4
 800e954:	f7ff fd64 	bl	800e420 <__lo0bits>
 800e958:	9b01      	ldr	r3, [sp, #4]
 800e95a:	6163      	str	r3, [r4, #20]
 800e95c:	2201      	movs	r2, #1
 800e95e:	6122      	str	r2, [r4, #16]
 800e960:	3020      	adds	r0, #32
 800e962:	e7e3      	b.n	800e92c <__d2b+0x60>
 800e964:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e968:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e96c:	f8c9 0000 	str.w	r0, [r9]
 800e970:	6918      	ldr	r0, [r3, #16]
 800e972:	f7ff fd35 	bl	800e3e0 <__hi0bits>
 800e976:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e97a:	e7df      	b.n	800e93c <__d2b+0x70>
 800e97c:	080105f7 	.word	0x080105f7
 800e980:	08010597 	.word	0x08010597

0800e984 <_mprec_log10>:
 800e984:	2817      	cmp	r0, #23
 800e986:	b5d0      	push	{r4, r6, r7, lr}
 800e988:	4604      	mov	r4, r0
 800e98a:	dc07      	bgt.n	800e99c <_mprec_log10+0x18>
 800e98c:	4809      	ldr	r0, [pc, #36]	; (800e9b4 <_mprec_log10+0x30>)
 800e98e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800e992:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e996:	ec41 0b10 	vmov	d0, r0, r1
 800e99a:	bdd0      	pop	{r4, r6, r7, pc}
 800e99c:	4906      	ldr	r1, [pc, #24]	; (800e9b8 <_mprec_log10+0x34>)
 800e99e:	4f07      	ldr	r7, [pc, #28]	; (800e9bc <_mprec_log10+0x38>)
 800e9a0:	2000      	movs	r0, #0
 800e9a2:	2600      	movs	r6, #0
 800e9a4:	4632      	mov	r2, r6
 800e9a6:	463b      	mov	r3, r7
 800e9a8:	f7f1 fe36 	bl	8000618 <__aeabi_dmul>
 800e9ac:	3c01      	subs	r4, #1
 800e9ae:	d1f9      	bne.n	800e9a4 <_mprec_log10+0x20>
 800e9b0:	e7f1      	b.n	800e996 <_mprec_log10+0x12>
 800e9b2:	bf00      	nop
 800e9b4:	08010630 	.word	0x08010630
 800e9b8:	3ff00000 	.word	0x3ff00000
 800e9bc:	40240000 	.word	0x40240000

0800e9c0 <_calloc_r>:
 800e9c0:	b513      	push	{r0, r1, r4, lr}
 800e9c2:	434a      	muls	r2, r1
 800e9c4:	4611      	mov	r1, r2
 800e9c6:	9201      	str	r2, [sp, #4]
 800e9c8:	f7ff fa9a 	bl	800df00 <_malloc_r>
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	b118      	cbz	r0, 800e9d8 <_calloc_r+0x18>
 800e9d0:	9a01      	ldr	r2, [sp, #4]
 800e9d2:	2100      	movs	r1, #0
 800e9d4:	f7ff fa3c 	bl	800de50 <memset>
 800e9d8:	4620      	mov	r0, r4
 800e9da:	b002      	add	sp, #8
 800e9dc:	bd10      	pop	{r4, pc}
	...

0800e9e0 <__assert_func>:
 800e9e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9e2:	4614      	mov	r4, r2
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	4b09      	ldr	r3, [pc, #36]	; (800ea0c <__assert_func+0x2c>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4605      	mov	r5, r0
 800e9ec:	68d8      	ldr	r0, [r3, #12]
 800e9ee:	b14c      	cbz	r4, 800ea04 <__assert_func+0x24>
 800e9f0:	4b07      	ldr	r3, [pc, #28]	; (800ea10 <__assert_func+0x30>)
 800e9f2:	9100      	str	r1, [sp, #0]
 800e9f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e9f8:	4906      	ldr	r1, [pc, #24]	; (800ea14 <__assert_func+0x34>)
 800e9fa:	462b      	mov	r3, r5
 800e9fc:	f000 fe88 	bl	800f710 <fiprintf>
 800ea00:	f001 fa48 	bl	800fe94 <abort>
 800ea04:	4b04      	ldr	r3, [pc, #16]	; (800ea18 <__assert_func+0x38>)
 800ea06:	461c      	mov	r4, r3
 800ea08:	e7f3      	b.n	800e9f2 <__assert_func+0x12>
 800ea0a:	bf00      	nop
 800ea0c:	20000030 	.word	0x20000030
 800ea10:	08010704 	.word	0x08010704
 800ea14:	08010711 	.word	0x08010711
 800ea18:	0801073f 	.word	0x0801073f

0800ea1c <quorem>:
 800ea1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea20:	6903      	ldr	r3, [r0, #16]
 800ea22:	690c      	ldr	r4, [r1, #16]
 800ea24:	42a3      	cmp	r3, r4
 800ea26:	4607      	mov	r7, r0
 800ea28:	f2c0 8081 	blt.w	800eb2e <quorem+0x112>
 800ea2c:	3c01      	subs	r4, #1
 800ea2e:	f101 0814 	add.w	r8, r1, #20
 800ea32:	f100 0514 	add.w	r5, r0, #20
 800ea36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea3a:	9301      	str	r3, [sp, #4]
 800ea3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ea40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea44:	3301      	adds	r3, #1
 800ea46:	429a      	cmp	r2, r3
 800ea48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ea4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ea50:	fbb2 f6f3 	udiv	r6, r2, r3
 800ea54:	d331      	bcc.n	800eaba <quorem+0x9e>
 800ea56:	f04f 0e00 	mov.w	lr, #0
 800ea5a:	4640      	mov	r0, r8
 800ea5c:	46ac      	mov	ip, r5
 800ea5e:	46f2      	mov	sl, lr
 800ea60:	f850 2b04 	ldr.w	r2, [r0], #4
 800ea64:	b293      	uxth	r3, r2
 800ea66:	fb06 e303 	mla	r3, r6, r3, lr
 800ea6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	ebaa 0303 	sub.w	r3, sl, r3
 800ea74:	0c12      	lsrs	r2, r2, #16
 800ea76:	f8dc a000 	ldr.w	sl, [ip]
 800ea7a:	fb06 e202 	mla	r2, r6, r2, lr
 800ea7e:	fa13 f38a 	uxtah	r3, r3, sl
 800ea82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ea86:	fa1f fa82 	uxth.w	sl, r2
 800ea8a:	f8dc 2000 	ldr.w	r2, [ip]
 800ea8e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ea92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea9c:	4581      	cmp	r9, r0
 800ea9e:	f84c 3b04 	str.w	r3, [ip], #4
 800eaa2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eaa6:	d2db      	bcs.n	800ea60 <quorem+0x44>
 800eaa8:	f855 300b 	ldr.w	r3, [r5, fp]
 800eaac:	b92b      	cbnz	r3, 800eaba <quorem+0x9e>
 800eaae:	9b01      	ldr	r3, [sp, #4]
 800eab0:	3b04      	subs	r3, #4
 800eab2:	429d      	cmp	r5, r3
 800eab4:	461a      	mov	r2, r3
 800eab6:	d32e      	bcc.n	800eb16 <quorem+0xfa>
 800eab8:	613c      	str	r4, [r7, #16]
 800eaba:	4638      	mov	r0, r7
 800eabc:	f7ff fe62 	bl	800e784 <__mcmp>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	db24      	blt.n	800eb0e <quorem+0xf2>
 800eac4:	3601      	adds	r6, #1
 800eac6:	4628      	mov	r0, r5
 800eac8:	f04f 0c00 	mov.w	ip, #0
 800eacc:	f858 2b04 	ldr.w	r2, [r8], #4
 800ead0:	f8d0 e000 	ldr.w	lr, [r0]
 800ead4:	b293      	uxth	r3, r2
 800ead6:	ebac 0303 	sub.w	r3, ip, r3
 800eada:	0c12      	lsrs	r2, r2, #16
 800eadc:	fa13 f38e 	uxtah	r3, r3, lr
 800eae0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eae4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eaee:	45c1      	cmp	r9, r8
 800eaf0:	f840 3b04 	str.w	r3, [r0], #4
 800eaf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eaf8:	d2e8      	bcs.n	800eacc <quorem+0xb0>
 800eafa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eafe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb02:	b922      	cbnz	r2, 800eb0e <quorem+0xf2>
 800eb04:	3b04      	subs	r3, #4
 800eb06:	429d      	cmp	r5, r3
 800eb08:	461a      	mov	r2, r3
 800eb0a:	d30a      	bcc.n	800eb22 <quorem+0x106>
 800eb0c:	613c      	str	r4, [r7, #16]
 800eb0e:	4630      	mov	r0, r6
 800eb10:	b003      	add	sp, #12
 800eb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb16:	6812      	ldr	r2, [r2, #0]
 800eb18:	3b04      	subs	r3, #4
 800eb1a:	2a00      	cmp	r2, #0
 800eb1c:	d1cc      	bne.n	800eab8 <quorem+0x9c>
 800eb1e:	3c01      	subs	r4, #1
 800eb20:	e7c7      	b.n	800eab2 <quorem+0x96>
 800eb22:	6812      	ldr	r2, [r2, #0]
 800eb24:	3b04      	subs	r3, #4
 800eb26:	2a00      	cmp	r2, #0
 800eb28:	d1f0      	bne.n	800eb0c <quorem+0xf0>
 800eb2a:	3c01      	subs	r4, #1
 800eb2c:	e7eb      	b.n	800eb06 <quorem+0xea>
 800eb2e:	2000      	movs	r0, #0
 800eb30:	e7ee      	b.n	800eb10 <quorem+0xf4>
 800eb32:	0000      	movs	r0, r0
 800eb34:	0000      	movs	r0, r0
	...

0800eb38 <_dtoa_r>:
 800eb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb3c:	ed2d 8b02 	vpush	{d8}
 800eb40:	ec57 6b10 	vmov	r6, r7, d0
 800eb44:	b095      	sub	sp, #84	; 0x54
 800eb46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eb48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eb4c:	9105      	str	r1, [sp, #20]
 800eb4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800eb52:	4604      	mov	r4, r0
 800eb54:	9209      	str	r2, [sp, #36]	; 0x24
 800eb56:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb58:	b975      	cbnz	r5, 800eb78 <_dtoa_r+0x40>
 800eb5a:	2010      	movs	r0, #16
 800eb5c:	f7ff f95a 	bl	800de14 <malloc>
 800eb60:	4602      	mov	r2, r0
 800eb62:	6260      	str	r0, [r4, #36]	; 0x24
 800eb64:	b920      	cbnz	r0, 800eb70 <_dtoa_r+0x38>
 800eb66:	4bb2      	ldr	r3, [pc, #712]	; (800ee30 <_dtoa_r+0x2f8>)
 800eb68:	21ea      	movs	r1, #234	; 0xea
 800eb6a:	48b2      	ldr	r0, [pc, #712]	; (800ee34 <_dtoa_r+0x2fc>)
 800eb6c:	f7ff ff38 	bl	800e9e0 <__assert_func>
 800eb70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eb74:	6005      	str	r5, [r0, #0]
 800eb76:	60c5      	str	r5, [r0, #12]
 800eb78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb7a:	6819      	ldr	r1, [r3, #0]
 800eb7c:	b151      	cbz	r1, 800eb94 <_dtoa_r+0x5c>
 800eb7e:	685a      	ldr	r2, [r3, #4]
 800eb80:	604a      	str	r2, [r1, #4]
 800eb82:	2301      	movs	r3, #1
 800eb84:	4093      	lsls	r3, r2
 800eb86:	608b      	str	r3, [r1, #8]
 800eb88:	4620      	mov	r0, r4
 800eb8a:	f7ff fbbd 	bl	800e308 <_Bfree>
 800eb8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb90:	2200      	movs	r2, #0
 800eb92:	601a      	str	r2, [r3, #0]
 800eb94:	1e3b      	subs	r3, r7, #0
 800eb96:	bfb9      	ittee	lt
 800eb98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eb9c:	9303      	strlt	r3, [sp, #12]
 800eb9e:	2300      	movge	r3, #0
 800eba0:	f8c8 3000 	strge.w	r3, [r8]
 800eba4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800eba8:	4ba3      	ldr	r3, [pc, #652]	; (800ee38 <_dtoa_r+0x300>)
 800ebaa:	bfbc      	itt	lt
 800ebac:	2201      	movlt	r2, #1
 800ebae:	f8c8 2000 	strlt.w	r2, [r8]
 800ebb2:	ea33 0309 	bics.w	r3, r3, r9
 800ebb6:	d11b      	bne.n	800ebf0 <_dtoa_r+0xb8>
 800ebb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ebba:	f242 730f 	movw	r3, #9999	; 0x270f
 800ebbe:	6013      	str	r3, [r2, #0]
 800ebc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ebc4:	4333      	orrs	r3, r6
 800ebc6:	f000 857a 	beq.w	800f6be <_dtoa_r+0xb86>
 800ebca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ebcc:	b963      	cbnz	r3, 800ebe8 <_dtoa_r+0xb0>
 800ebce:	4b9b      	ldr	r3, [pc, #620]	; (800ee3c <_dtoa_r+0x304>)
 800ebd0:	e024      	b.n	800ec1c <_dtoa_r+0xe4>
 800ebd2:	4b9b      	ldr	r3, [pc, #620]	; (800ee40 <_dtoa_r+0x308>)
 800ebd4:	9300      	str	r3, [sp, #0]
 800ebd6:	3308      	adds	r3, #8
 800ebd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ebda:	6013      	str	r3, [r2, #0]
 800ebdc:	9800      	ldr	r0, [sp, #0]
 800ebde:	b015      	add	sp, #84	; 0x54
 800ebe0:	ecbd 8b02 	vpop	{d8}
 800ebe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe8:	4b94      	ldr	r3, [pc, #592]	; (800ee3c <_dtoa_r+0x304>)
 800ebea:	9300      	str	r3, [sp, #0]
 800ebec:	3303      	adds	r3, #3
 800ebee:	e7f3      	b.n	800ebd8 <_dtoa_r+0xa0>
 800ebf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	ec51 0b17 	vmov	r0, r1, d7
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ec00:	f7f1 ff72 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec04:	4680      	mov	r8, r0
 800ec06:	b158      	cbz	r0, 800ec20 <_dtoa_r+0xe8>
 800ec08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	6013      	str	r3, [r2, #0]
 800ec0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	f000 8551 	beq.w	800f6b8 <_dtoa_r+0xb80>
 800ec16:	488b      	ldr	r0, [pc, #556]	; (800ee44 <_dtoa_r+0x30c>)
 800ec18:	6018      	str	r0, [r3, #0]
 800ec1a:	1e43      	subs	r3, r0, #1
 800ec1c:	9300      	str	r3, [sp, #0]
 800ec1e:	e7dd      	b.n	800ebdc <_dtoa_r+0xa4>
 800ec20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ec24:	aa12      	add	r2, sp, #72	; 0x48
 800ec26:	a913      	add	r1, sp, #76	; 0x4c
 800ec28:	4620      	mov	r0, r4
 800ec2a:	f7ff fe4f 	bl	800e8cc <__d2b>
 800ec2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ec32:	4683      	mov	fp, r0
 800ec34:	2d00      	cmp	r5, #0
 800ec36:	d07c      	beq.n	800ed32 <_dtoa_r+0x1fa>
 800ec38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ec3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ec46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ec4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ec4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ec52:	4b7d      	ldr	r3, [pc, #500]	; (800ee48 <_dtoa_r+0x310>)
 800ec54:	2200      	movs	r2, #0
 800ec56:	4630      	mov	r0, r6
 800ec58:	4639      	mov	r1, r7
 800ec5a:	f7f1 fb25 	bl	80002a8 <__aeabi_dsub>
 800ec5e:	a36e      	add	r3, pc, #440	; (adr r3, 800ee18 <_dtoa_r+0x2e0>)
 800ec60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec64:	f7f1 fcd8 	bl	8000618 <__aeabi_dmul>
 800ec68:	a36d      	add	r3, pc, #436	; (adr r3, 800ee20 <_dtoa_r+0x2e8>)
 800ec6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6e:	f7f1 fb1d 	bl	80002ac <__adddf3>
 800ec72:	4606      	mov	r6, r0
 800ec74:	4628      	mov	r0, r5
 800ec76:	460f      	mov	r7, r1
 800ec78:	f7f1 fc64 	bl	8000544 <__aeabi_i2d>
 800ec7c:	a36a      	add	r3, pc, #424	; (adr r3, 800ee28 <_dtoa_r+0x2f0>)
 800ec7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec82:	f7f1 fcc9 	bl	8000618 <__aeabi_dmul>
 800ec86:	4602      	mov	r2, r0
 800ec88:	460b      	mov	r3, r1
 800ec8a:	4630      	mov	r0, r6
 800ec8c:	4639      	mov	r1, r7
 800ec8e:	f7f1 fb0d 	bl	80002ac <__adddf3>
 800ec92:	4606      	mov	r6, r0
 800ec94:	460f      	mov	r7, r1
 800ec96:	f7f1 ff59 	bl	8000b4c <__aeabi_d2iz>
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	4682      	mov	sl, r0
 800ec9e:	2300      	movs	r3, #0
 800eca0:	4630      	mov	r0, r6
 800eca2:	4639      	mov	r1, r7
 800eca4:	f7f1 ff2a 	bl	8000afc <__aeabi_dcmplt>
 800eca8:	b148      	cbz	r0, 800ecbe <_dtoa_r+0x186>
 800ecaa:	4650      	mov	r0, sl
 800ecac:	f7f1 fc4a 	bl	8000544 <__aeabi_i2d>
 800ecb0:	4632      	mov	r2, r6
 800ecb2:	463b      	mov	r3, r7
 800ecb4:	f7f1 ff18 	bl	8000ae8 <__aeabi_dcmpeq>
 800ecb8:	b908      	cbnz	r0, 800ecbe <_dtoa_r+0x186>
 800ecba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecbe:	f1ba 0f16 	cmp.w	sl, #22
 800ecc2:	d854      	bhi.n	800ed6e <_dtoa_r+0x236>
 800ecc4:	4b61      	ldr	r3, [pc, #388]	; (800ee4c <_dtoa_r+0x314>)
 800ecc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ecca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ecd2:	f7f1 ff13 	bl	8000afc <__aeabi_dcmplt>
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	d04b      	beq.n	800ed72 <_dtoa_r+0x23a>
 800ecda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecde:	2300      	movs	r3, #0
 800ece0:	930e      	str	r3, [sp, #56]	; 0x38
 800ece2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ece4:	1b5d      	subs	r5, r3, r5
 800ece6:	1e6b      	subs	r3, r5, #1
 800ece8:	9304      	str	r3, [sp, #16]
 800ecea:	bf43      	ittte	mi
 800ecec:	2300      	movmi	r3, #0
 800ecee:	f1c5 0801 	rsbmi	r8, r5, #1
 800ecf2:	9304      	strmi	r3, [sp, #16]
 800ecf4:	f04f 0800 	movpl.w	r8, #0
 800ecf8:	f1ba 0f00 	cmp.w	sl, #0
 800ecfc:	db3b      	blt.n	800ed76 <_dtoa_r+0x23e>
 800ecfe:	9b04      	ldr	r3, [sp, #16]
 800ed00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ed04:	4453      	add	r3, sl
 800ed06:	9304      	str	r3, [sp, #16]
 800ed08:	2300      	movs	r3, #0
 800ed0a:	9306      	str	r3, [sp, #24]
 800ed0c:	9b05      	ldr	r3, [sp, #20]
 800ed0e:	2b09      	cmp	r3, #9
 800ed10:	d869      	bhi.n	800ede6 <_dtoa_r+0x2ae>
 800ed12:	2b05      	cmp	r3, #5
 800ed14:	bfc4      	itt	gt
 800ed16:	3b04      	subgt	r3, #4
 800ed18:	9305      	strgt	r3, [sp, #20]
 800ed1a:	9b05      	ldr	r3, [sp, #20]
 800ed1c:	f1a3 0302 	sub.w	r3, r3, #2
 800ed20:	bfcc      	ite	gt
 800ed22:	2500      	movgt	r5, #0
 800ed24:	2501      	movle	r5, #1
 800ed26:	2b03      	cmp	r3, #3
 800ed28:	d869      	bhi.n	800edfe <_dtoa_r+0x2c6>
 800ed2a:	e8df f003 	tbb	[pc, r3]
 800ed2e:	4e2c      	.short	0x4e2c
 800ed30:	5a4c      	.short	0x5a4c
 800ed32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ed36:	441d      	add	r5, r3
 800ed38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ed3c:	2b20      	cmp	r3, #32
 800ed3e:	bfc1      	itttt	gt
 800ed40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ed44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ed48:	fa09 f303 	lslgt.w	r3, r9, r3
 800ed4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ed50:	bfda      	itte	le
 800ed52:	f1c3 0320 	rsble	r3, r3, #32
 800ed56:	fa06 f003 	lslle.w	r0, r6, r3
 800ed5a:	4318      	orrgt	r0, r3
 800ed5c:	f7f1 fbe2 	bl	8000524 <__aeabi_ui2d>
 800ed60:	2301      	movs	r3, #1
 800ed62:	4606      	mov	r6, r0
 800ed64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ed68:	3d01      	subs	r5, #1
 800ed6a:	9310      	str	r3, [sp, #64]	; 0x40
 800ed6c:	e771      	b.n	800ec52 <_dtoa_r+0x11a>
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e7b6      	b.n	800ece0 <_dtoa_r+0x1a8>
 800ed72:	900e      	str	r0, [sp, #56]	; 0x38
 800ed74:	e7b5      	b.n	800ece2 <_dtoa_r+0x1aa>
 800ed76:	f1ca 0300 	rsb	r3, sl, #0
 800ed7a:	9306      	str	r3, [sp, #24]
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	eba8 080a 	sub.w	r8, r8, sl
 800ed82:	930d      	str	r3, [sp, #52]	; 0x34
 800ed84:	e7c2      	b.n	800ed0c <_dtoa_r+0x1d4>
 800ed86:	2300      	movs	r3, #0
 800ed88:	9308      	str	r3, [sp, #32]
 800ed8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	dc39      	bgt.n	800ee04 <_dtoa_r+0x2cc>
 800ed90:	f04f 0901 	mov.w	r9, #1
 800ed94:	f8cd 9004 	str.w	r9, [sp, #4]
 800ed98:	464b      	mov	r3, r9
 800ed9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ed9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eda0:	2200      	movs	r2, #0
 800eda2:	6042      	str	r2, [r0, #4]
 800eda4:	2204      	movs	r2, #4
 800eda6:	f102 0614 	add.w	r6, r2, #20
 800edaa:	429e      	cmp	r6, r3
 800edac:	6841      	ldr	r1, [r0, #4]
 800edae:	d92f      	bls.n	800ee10 <_dtoa_r+0x2d8>
 800edb0:	4620      	mov	r0, r4
 800edb2:	f7ff fa69 	bl	800e288 <_Balloc>
 800edb6:	9000      	str	r0, [sp, #0]
 800edb8:	2800      	cmp	r0, #0
 800edba:	d14b      	bne.n	800ee54 <_dtoa_r+0x31c>
 800edbc:	4b24      	ldr	r3, [pc, #144]	; (800ee50 <_dtoa_r+0x318>)
 800edbe:	4602      	mov	r2, r0
 800edc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800edc4:	e6d1      	b.n	800eb6a <_dtoa_r+0x32>
 800edc6:	2301      	movs	r3, #1
 800edc8:	e7de      	b.n	800ed88 <_dtoa_r+0x250>
 800edca:	2300      	movs	r3, #0
 800edcc:	9308      	str	r3, [sp, #32]
 800edce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edd0:	eb0a 0903 	add.w	r9, sl, r3
 800edd4:	f109 0301 	add.w	r3, r9, #1
 800edd8:	2b01      	cmp	r3, #1
 800edda:	9301      	str	r3, [sp, #4]
 800eddc:	bfb8      	it	lt
 800edde:	2301      	movlt	r3, #1
 800ede0:	e7dd      	b.n	800ed9e <_dtoa_r+0x266>
 800ede2:	2301      	movs	r3, #1
 800ede4:	e7f2      	b.n	800edcc <_dtoa_r+0x294>
 800ede6:	2501      	movs	r5, #1
 800ede8:	2300      	movs	r3, #0
 800edea:	9305      	str	r3, [sp, #20]
 800edec:	9508      	str	r5, [sp, #32]
 800edee:	f04f 39ff 	mov.w	r9, #4294967295
 800edf2:	2200      	movs	r2, #0
 800edf4:	f8cd 9004 	str.w	r9, [sp, #4]
 800edf8:	2312      	movs	r3, #18
 800edfa:	9209      	str	r2, [sp, #36]	; 0x24
 800edfc:	e7cf      	b.n	800ed9e <_dtoa_r+0x266>
 800edfe:	2301      	movs	r3, #1
 800ee00:	9308      	str	r3, [sp, #32]
 800ee02:	e7f4      	b.n	800edee <_dtoa_r+0x2b6>
 800ee04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ee08:	f8cd 9004 	str.w	r9, [sp, #4]
 800ee0c:	464b      	mov	r3, r9
 800ee0e:	e7c6      	b.n	800ed9e <_dtoa_r+0x266>
 800ee10:	3101      	adds	r1, #1
 800ee12:	6041      	str	r1, [r0, #4]
 800ee14:	0052      	lsls	r2, r2, #1
 800ee16:	e7c6      	b.n	800eda6 <_dtoa_r+0x26e>
 800ee18:	636f4361 	.word	0x636f4361
 800ee1c:	3fd287a7 	.word	0x3fd287a7
 800ee20:	8b60c8b3 	.word	0x8b60c8b3
 800ee24:	3fc68a28 	.word	0x3fc68a28
 800ee28:	509f79fb 	.word	0x509f79fb
 800ee2c:	3fd34413 	.word	0x3fd34413
 800ee30:	08010580 	.word	0x08010580
 800ee34:	0801074f 	.word	0x0801074f
 800ee38:	7ff00000 	.word	0x7ff00000
 800ee3c:	08010749 	.word	0x08010749
 800ee40:	08010740 	.word	0x08010740
 800ee44:	0801074e 	.word	0x0801074e
 800ee48:	3ff80000 	.word	0x3ff80000
 800ee4c:	08010630 	.word	0x08010630
 800ee50:	080105f7 	.word	0x080105f7
 800ee54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee56:	9a00      	ldr	r2, [sp, #0]
 800ee58:	601a      	str	r2, [r3, #0]
 800ee5a:	9b01      	ldr	r3, [sp, #4]
 800ee5c:	2b0e      	cmp	r3, #14
 800ee5e:	f200 80ad 	bhi.w	800efbc <_dtoa_r+0x484>
 800ee62:	2d00      	cmp	r5, #0
 800ee64:	f000 80aa 	beq.w	800efbc <_dtoa_r+0x484>
 800ee68:	f1ba 0f00 	cmp.w	sl, #0
 800ee6c:	dd36      	ble.n	800eedc <_dtoa_r+0x3a4>
 800ee6e:	4ac3      	ldr	r2, [pc, #780]	; (800f17c <_dtoa_r+0x644>)
 800ee70:	f00a 030f 	and.w	r3, sl, #15
 800ee74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ee78:	ed93 7b00 	vldr	d7, [r3]
 800ee7c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ee80:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ee84:	eeb0 8a47 	vmov.f32	s16, s14
 800ee88:	eef0 8a67 	vmov.f32	s17, s15
 800ee8c:	d016      	beq.n	800eebc <_dtoa_r+0x384>
 800ee8e:	4bbc      	ldr	r3, [pc, #752]	; (800f180 <_dtoa_r+0x648>)
 800ee90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ee98:	f7f1 fce8 	bl	800086c <__aeabi_ddiv>
 800ee9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eea0:	f007 070f 	and.w	r7, r7, #15
 800eea4:	2503      	movs	r5, #3
 800eea6:	4eb6      	ldr	r6, [pc, #728]	; (800f180 <_dtoa_r+0x648>)
 800eea8:	b957      	cbnz	r7, 800eec0 <_dtoa_r+0x388>
 800eeaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eeae:	ec53 2b18 	vmov	r2, r3, d8
 800eeb2:	f7f1 fcdb 	bl	800086c <__aeabi_ddiv>
 800eeb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eeba:	e029      	b.n	800ef10 <_dtoa_r+0x3d8>
 800eebc:	2502      	movs	r5, #2
 800eebe:	e7f2      	b.n	800eea6 <_dtoa_r+0x36e>
 800eec0:	07f9      	lsls	r1, r7, #31
 800eec2:	d508      	bpl.n	800eed6 <_dtoa_r+0x39e>
 800eec4:	ec51 0b18 	vmov	r0, r1, d8
 800eec8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eecc:	f7f1 fba4 	bl	8000618 <__aeabi_dmul>
 800eed0:	ec41 0b18 	vmov	d8, r0, r1
 800eed4:	3501      	adds	r5, #1
 800eed6:	107f      	asrs	r7, r7, #1
 800eed8:	3608      	adds	r6, #8
 800eeda:	e7e5      	b.n	800eea8 <_dtoa_r+0x370>
 800eedc:	f000 80a6 	beq.w	800f02c <_dtoa_r+0x4f4>
 800eee0:	f1ca 0600 	rsb	r6, sl, #0
 800eee4:	4ba5      	ldr	r3, [pc, #660]	; (800f17c <_dtoa_r+0x644>)
 800eee6:	4fa6      	ldr	r7, [pc, #664]	; (800f180 <_dtoa_r+0x648>)
 800eee8:	f006 020f 	and.w	r2, r6, #15
 800eeec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eef8:	f7f1 fb8e 	bl	8000618 <__aeabi_dmul>
 800eefc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef00:	1136      	asrs	r6, r6, #4
 800ef02:	2300      	movs	r3, #0
 800ef04:	2502      	movs	r5, #2
 800ef06:	2e00      	cmp	r6, #0
 800ef08:	f040 8085 	bne.w	800f016 <_dtoa_r+0x4de>
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d1d2      	bne.n	800eeb6 <_dtoa_r+0x37e>
 800ef10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	f000 808c 	beq.w	800f030 <_dtoa_r+0x4f8>
 800ef18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ef1c:	4b99      	ldr	r3, [pc, #612]	; (800f184 <_dtoa_r+0x64c>)
 800ef1e:	2200      	movs	r2, #0
 800ef20:	4630      	mov	r0, r6
 800ef22:	4639      	mov	r1, r7
 800ef24:	f7f1 fdea 	bl	8000afc <__aeabi_dcmplt>
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	f000 8081 	beq.w	800f030 <_dtoa_r+0x4f8>
 800ef2e:	9b01      	ldr	r3, [sp, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d07d      	beq.n	800f030 <_dtoa_r+0x4f8>
 800ef34:	f1b9 0f00 	cmp.w	r9, #0
 800ef38:	dd3c      	ble.n	800efb4 <_dtoa_r+0x47c>
 800ef3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ef3e:	9307      	str	r3, [sp, #28]
 800ef40:	2200      	movs	r2, #0
 800ef42:	4b91      	ldr	r3, [pc, #580]	; (800f188 <_dtoa_r+0x650>)
 800ef44:	4630      	mov	r0, r6
 800ef46:	4639      	mov	r1, r7
 800ef48:	f7f1 fb66 	bl	8000618 <__aeabi_dmul>
 800ef4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef50:	3501      	adds	r5, #1
 800ef52:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ef56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	f7f1 faf2 	bl	8000544 <__aeabi_i2d>
 800ef60:	4632      	mov	r2, r6
 800ef62:	463b      	mov	r3, r7
 800ef64:	f7f1 fb58 	bl	8000618 <__aeabi_dmul>
 800ef68:	4b88      	ldr	r3, [pc, #544]	; (800f18c <_dtoa_r+0x654>)
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	f7f1 f99e 	bl	80002ac <__adddf3>
 800ef70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ef74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef78:	9303      	str	r3, [sp, #12]
 800ef7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d15c      	bne.n	800f03a <_dtoa_r+0x502>
 800ef80:	4b83      	ldr	r3, [pc, #524]	; (800f190 <_dtoa_r+0x658>)
 800ef82:	2200      	movs	r2, #0
 800ef84:	4630      	mov	r0, r6
 800ef86:	4639      	mov	r1, r7
 800ef88:	f7f1 f98e 	bl	80002a8 <__aeabi_dsub>
 800ef8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef90:	4606      	mov	r6, r0
 800ef92:	460f      	mov	r7, r1
 800ef94:	f7f1 fdd0 	bl	8000b38 <__aeabi_dcmpgt>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	f040 8296 	bne.w	800f4ca <_dtoa_r+0x992>
 800ef9e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800efa2:	4630      	mov	r0, r6
 800efa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efa8:	4639      	mov	r1, r7
 800efaa:	f7f1 fda7 	bl	8000afc <__aeabi_dcmplt>
 800efae:	2800      	cmp	r0, #0
 800efb0:	f040 8288 	bne.w	800f4c4 <_dtoa_r+0x98c>
 800efb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800efb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800efbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f2c0 8158 	blt.w	800f274 <_dtoa_r+0x73c>
 800efc4:	f1ba 0f0e 	cmp.w	sl, #14
 800efc8:	f300 8154 	bgt.w	800f274 <_dtoa_r+0x73c>
 800efcc:	4b6b      	ldr	r3, [pc, #428]	; (800f17c <_dtoa_r+0x644>)
 800efce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800efd2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800efd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efd8:	2b00      	cmp	r3, #0
 800efda:	f280 80e3 	bge.w	800f1a4 <_dtoa_r+0x66c>
 800efde:	9b01      	ldr	r3, [sp, #4]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	f300 80df 	bgt.w	800f1a4 <_dtoa_r+0x66c>
 800efe6:	f040 826d 	bne.w	800f4c4 <_dtoa_r+0x98c>
 800efea:	4b69      	ldr	r3, [pc, #420]	; (800f190 <_dtoa_r+0x658>)
 800efec:	2200      	movs	r2, #0
 800efee:	4640      	mov	r0, r8
 800eff0:	4649      	mov	r1, r9
 800eff2:	f7f1 fb11 	bl	8000618 <__aeabi_dmul>
 800eff6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800effa:	f7f1 fd93 	bl	8000b24 <__aeabi_dcmpge>
 800effe:	9e01      	ldr	r6, [sp, #4]
 800f000:	4637      	mov	r7, r6
 800f002:	2800      	cmp	r0, #0
 800f004:	f040 8243 	bne.w	800f48e <_dtoa_r+0x956>
 800f008:	9d00      	ldr	r5, [sp, #0]
 800f00a:	2331      	movs	r3, #49	; 0x31
 800f00c:	f805 3b01 	strb.w	r3, [r5], #1
 800f010:	f10a 0a01 	add.w	sl, sl, #1
 800f014:	e23f      	b.n	800f496 <_dtoa_r+0x95e>
 800f016:	07f2      	lsls	r2, r6, #31
 800f018:	d505      	bpl.n	800f026 <_dtoa_r+0x4ee>
 800f01a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f01e:	f7f1 fafb 	bl	8000618 <__aeabi_dmul>
 800f022:	3501      	adds	r5, #1
 800f024:	2301      	movs	r3, #1
 800f026:	1076      	asrs	r6, r6, #1
 800f028:	3708      	adds	r7, #8
 800f02a:	e76c      	b.n	800ef06 <_dtoa_r+0x3ce>
 800f02c:	2502      	movs	r5, #2
 800f02e:	e76f      	b.n	800ef10 <_dtoa_r+0x3d8>
 800f030:	9b01      	ldr	r3, [sp, #4]
 800f032:	f8cd a01c 	str.w	sl, [sp, #28]
 800f036:	930c      	str	r3, [sp, #48]	; 0x30
 800f038:	e78d      	b.n	800ef56 <_dtoa_r+0x41e>
 800f03a:	9900      	ldr	r1, [sp, #0]
 800f03c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f03e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f040:	4b4e      	ldr	r3, [pc, #312]	; (800f17c <_dtoa_r+0x644>)
 800f042:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f046:	4401      	add	r1, r0
 800f048:	9102      	str	r1, [sp, #8]
 800f04a:	9908      	ldr	r1, [sp, #32]
 800f04c:	eeb0 8a47 	vmov.f32	s16, s14
 800f050:	eef0 8a67 	vmov.f32	s17, s15
 800f054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f058:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f05c:	2900      	cmp	r1, #0
 800f05e:	d045      	beq.n	800f0ec <_dtoa_r+0x5b4>
 800f060:	494c      	ldr	r1, [pc, #304]	; (800f194 <_dtoa_r+0x65c>)
 800f062:	2000      	movs	r0, #0
 800f064:	f7f1 fc02 	bl	800086c <__aeabi_ddiv>
 800f068:	ec53 2b18 	vmov	r2, r3, d8
 800f06c:	f7f1 f91c 	bl	80002a8 <__aeabi_dsub>
 800f070:	9d00      	ldr	r5, [sp, #0]
 800f072:	ec41 0b18 	vmov	d8, r0, r1
 800f076:	4639      	mov	r1, r7
 800f078:	4630      	mov	r0, r6
 800f07a:	f7f1 fd67 	bl	8000b4c <__aeabi_d2iz>
 800f07e:	900c      	str	r0, [sp, #48]	; 0x30
 800f080:	f7f1 fa60 	bl	8000544 <__aeabi_i2d>
 800f084:	4602      	mov	r2, r0
 800f086:	460b      	mov	r3, r1
 800f088:	4630      	mov	r0, r6
 800f08a:	4639      	mov	r1, r7
 800f08c:	f7f1 f90c 	bl	80002a8 <__aeabi_dsub>
 800f090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f092:	3330      	adds	r3, #48	; 0x30
 800f094:	f805 3b01 	strb.w	r3, [r5], #1
 800f098:	ec53 2b18 	vmov	r2, r3, d8
 800f09c:	4606      	mov	r6, r0
 800f09e:	460f      	mov	r7, r1
 800f0a0:	f7f1 fd2c 	bl	8000afc <__aeabi_dcmplt>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	d165      	bne.n	800f174 <_dtoa_r+0x63c>
 800f0a8:	4632      	mov	r2, r6
 800f0aa:	463b      	mov	r3, r7
 800f0ac:	4935      	ldr	r1, [pc, #212]	; (800f184 <_dtoa_r+0x64c>)
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	f7f1 f8fa 	bl	80002a8 <__aeabi_dsub>
 800f0b4:	ec53 2b18 	vmov	r2, r3, d8
 800f0b8:	f7f1 fd20 	bl	8000afc <__aeabi_dcmplt>
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	f040 80b9 	bne.w	800f234 <_dtoa_r+0x6fc>
 800f0c2:	9b02      	ldr	r3, [sp, #8]
 800f0c4:	429d      	cmp	r5, r3
 800f0c6:	f43f af75 	beq.w	800efb4 <_dtoa_r+0x47c>
 800f0ca:	4b2f      	ldr	r3, [pc, #188]	; (800f188 <_dtoa_r+0x650>)
 800f0cc:	ec51 0b18 	vmov	r0, r1, d8
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	f7f1 faa1 	bl	8000618 <__aeabi_dmul>
 800f0d6:	4b2c      	ldr	r3, [pc, #176]	; (800f188 <_dtoa_r+0x650>)
 800f0d8:	ec41 0b18 	vmov	d8, r0, r1
 800f0dc:	2200      	movs	r2, #0
 800f0de:	4630      	mov	r0, r6
 800f0e0:	4639      	mov	r1, r7
 800f0e2:	f7f1 fa99 	bl	8000618 <__aeabi_dmul>
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	460f      	mov	r7, r1
 800f0ea:	e7c4      	b.n	800f076 <_dtoa_r+0x53e>
 800f0ec:	ec51 0b17 	vmov	r0, r1, d7
 800f0f0:	f7f1 fa92 	bl	8000618 <__aeabi_dmul>
 800f0f4:	9b02      	ldr	r3, [sp, #8]
 800f0f6:	9d00      	ldr	r5, [sp, #0]
 800f0f8:	930c      	str	r3, [sp, #48]	; 0x30
 800f0fa:	ec41 0b18 	vmov	d8, r0, r1
 800f0fe:	4639      	mov	r1, r7
 800f100:	4630      	mov	r0, r6
 800f102:	f7f1 fd23 	bl	8000b4c <__aeabi_d2iz>
 800f106:	9011      	str	r0, [sp, #68]	; 0x44
 800f108:	f7f1 fa1c 	bl	8000544 <__aeabi_i2d>
 800f10c:	4602      	mov	r2, r0
 800f10e:	460b      	mov	r3, r1
 800f110:	4630      	mov	r0, r6
 800f112:	4639      	mov	r1, r7
 800f114:	f7f1 f8c8 	bl	80002a8 <__aeabi_dsub>
 800f118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f11a:	3330      	adds	r3, #48	; 0x30
 800f11c:	f805 3b01 	strb.w	r3, [r5], #1
 800f120:	9b02      	ldr	r3, [sp, #8]
 800f122:	429d      	cmp	r5, r3
 800f124:	4606      	mov	r6, r0
 800f126:	460f      	mov	r7, r1
 800f128:	f04f 0200 	mov.w	r2, #0
 800f12c:	d134      	bne.n	800f198 <_dtoa_r+0x660>
 800f12e:	4b19      	ldr	r3, [pc, #100]	; (800f194 <_dtoa_r+0x65c>)
 800f130:	ec51 0b18 	vmov	r0, r1, d8
 800f134:	f7f1 f8ba 	bl	80002ac <__adddf3>
 800f138:	4602      	mov	r2, r0
 800f13a:	460b      	mov	r3, r1
 800f13c:	4630      	mov	r0, r6
 800f13e:	4639      	mov	r1, r7
 800f140:	f7f1 fcfa 	bl	8000b38 <__aeabi_dcmpgt>
 800f144:	2800      	cmp	r0, #0
 800f146:	d175      	bne.n	800f234 <_dtoa_r+0x6fc>
 800f148:	ec53 2b18 	vmov	r2, r3, d8
 800f14c:	4911      	ldr	r1, [pc, #68]	; (800f194 <_dtoa_r+0x65c>)
 800f14e:	2000      	movs	r0, #0
 800f150:	f7f1 f8aa 	bl	80002a8 <__aeabi_dsub>
 800f154:	4602      	mov	r2, r0
 800f156:	460b      	mov	r3, r1
 800f158:	4630      	mov	r0, r6
 800f15a:	4639      	mov	r1, r7
 800f15c:	f7f1 fcce 	bl	8000afc <__aeabi_dcmplt>
 800f160:	2800      	cmp	r0, #0
 800f162:	f43f af27 	beq.w	800efb4 <_dtoa_r+0x47c>
 800f166:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f168:	1e6b      	subs	r3, r5, #1
 800f16a:	930c      	str	r3, [sp, #48]	; 0x30
 800f16c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f170:	2b30      	cmp	r3, #48	; 0x30
 800f172:	d0f8      	beq.n	800f166 <_dtoa_r+0x62e>
 800f174:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f178:	e04a      	b.n	800f210 <_dtoa_r+0x6d8>
 800f17a:	bf00      	nop
 800f17c:	08010630 	.word	0x08010630
 800f180:	08010608 	.word	0x08010608
 800f184:	3ff00000 	.word	0x3ff00000
 800f188:	40240000 	.word	0x40240000
 800f18c:	401c0000 	.word	0x401c0000
 800f190:	40140000 	.word	0x40140000
 800f194:	3fe00000 	.word	0x3fe00000
 800f198:	4baf      	ldr	r3, [pc, #700]	; (800f458 <_dtoa_r+0x920>)
 800f19a:	f7f1 fa3d 	bl	8000618 <__aeabi_dmul>
 800f19e:	4606      	mov	r6, r0
 800f1a0:	460f      	mov	r7, r1
 800f1a2:	e7ac      	b.n	800f0fe <_dtoa_r+0x5c6>
 800f1a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f1a8:	9d00      	ldr	r5, [sp, #0]
 800f1aa:	4642      	mov	r2, r8
 800f1ac:	464b      	mov	r3, r9
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	4639      	mov	r1, r7
 800f1b2:	f7f1 fb5b 	bl	800086c <__aeabi_ddiv>
 800f1b6:	f7f1 fcc9 	bl	8000b4c <__aeabi_d2iz>
 800f1ba:	9002      	str	r0, [sp, #8]
 800f1bc:	f7f1 f9c2 	bl	8000544 <__aeabi_i2d>
 800f1c0:	4642      	mov	r2, r8
 800f1c2:	464b      	mov	r3, r9
 800f1c4:	f7f1 fa28 	bl	8000618 <__aeabi_dmul>
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	4630      	mov	r0, r6
 800f1ce:	4639      	mov	r1, r7
 800f1d0:	f7f1 f86a 	bl	80002a8 <__aeabi_dsub>
 800f1d4:	9e02      	ldr	r6, [sp, #8]
 800f1d6:	9f01      	ldr	r7, [sp, #4]
 800f1d8:	3630      	adds	r6, #48	; 0x30
 800f1da:	f805 6b01 	strb.w	r6, [r5], #1
 800f1de:	9e00      	ldr	r6, [sp, #0]
 800f1e0:	1bae      	subs	r6, r5, r6
 800f1e2:	42b7      	cmp	r7, r6
 800f1e4:	4602      	mov	r2, r0
 800f1e6:	460b      	mov	r3, r1
 800f1e8:	d137      	bne.n	800f25a <_dtoa_r+0x722>
 800f1ea:	f7f1 f85f 	bl	80002ac <__adddf3>
 800f1ee:	4642      	mov	r2, r8
 800f1f0:	464b      	mov	r3, r9
 800f1f2:	4606      	mov	r6, r0
 800f1f4:	460f      	mov	r7, r1
 800f1f6:	f7f1 fc9f 	bl	8000b38 <__aeabi_dcmpgt>
 800f1fa:	b9c8      	cbnz	r0, 800f230 <_dtoa_r+0x6f8>
 800f1fc:	4642      	mov	r2, r8
 800f1fe:	464b      	mov	r3, r9
 800f200:	4630      	mov	r0, r6
 800f202:	4639      	mov	r1, r7
 800f204:	f7f1 fc70 	bl	8000ae8 <__aeabi_dcmpeq>
 800f208:	b110      	cbz	r0, 800f210 <_dtoa_r+0x6d8>
 800f20a:	9b02      	ldr	r3, [sp, #8]
 800f20c:	07d9      	lsls	r1, r3, #31
 800f20e:	d40f      	bmi.n	800f230 <_dtoa_r+0x6f8>
 800f210:	4620      	mov	r0, r4
 800f212:	4659      	mov	r1, fp
 800f214:	f7ff f878 	bl	800e308 <_Bfree>
 800f218:	2300      	movs	r3, #0
 800f21a:	702b      	strb	r3, [r5, #0]
 800f21c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f21e:	f10a 0001 	add.w	r0, sl, #1
 800f222:	6018      	str	r0, [r3, #0]
 800f224:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f226:	2b00      	cmp	r3, #0
 800f228:	f43f acd8 	beq.w	800ebdc <_dtoa_r+0xa4>
 800f22c:	601d      	str	r5, [r3, #0]
 800f22e:	e4d5      	b.n	800ebdc <_dtoa_r+0xa4>
 800f230:	f8cd a01c 	str.w	sl, [sp, #28]
 800f234:	462b      	mov	r3, r5
 800f236:	461d      	mov	r5, r3
 800f238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f23c:	2a39      	cmp	r2, #57	; 0x39
 800f23e:	d108      	bne.n	800f252 <_dtoa_r+0x71a>
 800f240:	9a00      	ldr	r2, [sp, #0]
 800f242:	429a      	cmp	r2, r3
 800f244:	d1f7      	bne.n	800f236 <_dtoa_r+0x6fe>
 800f246:	9a07      	ldr	r2, [sp, #28]
 800f248:	9900      	ldr	r1, [sp, #0]
 800f24a:	3201      	adds	r2, #1
 800f24c:	9207      	str	r2, [sp, #28]
 800f24e:	2230      	movs	r2, #48	; 0x30
 800f250:	700a      	strb	r2, [r1, #0]
 800f252:	781a      	ldrb	r2, [r3, #0]
 800f254:	3201      	adds	r2, #1
 800f256:	701a      	strb	r2, [r3, #0]
 800f258:	e78c      	b.n	800f174 <_dtoa_r+0x63c>
 800f25a:	4b7f      	ldr	r3, [pc, #508]	; (800f458 <_dtoa_r+0x920>)
 800f25c:	2200      	movs	r2, #0
 800f25e:	f7f1 f9db 	bl	8000618 <__aeabi_dmul>
 800f262:	2200      	movs	r2, #0
 800f264:	2300      	movs	r3, #0
 800f266:	4606      	mov	r6, r0
 800f268:	460f      	mov	r7, r1
 800f26a:	f7f1 fc3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800f26e:	2800      	cmp	r0, #0
 800f270:	d09b      	beq.n	800f1aa <_dtoa_r+0x672>
 800f272:	e7cd      	b.n	800f210 <_dtoa_r+0x6d8>
 800f274:	9a08      	ldr	r2, [sp, #32]
 800f276:	2a00      	cmp	r2, #0
 800f278:	f000 80c4 	beq.w	800f404 <_dtoa_r+0x8cc>
 800f27c:	9a05      	ldr	r2, [sp, #20]
 800f27e:	2a01      	cmp	r2, #1
 800f280:	f300 80a8 	bgt.w	800f3d4 <_dtoa_r+0x89c>
 800f284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f286:	2a00      	cmp	r2, #0
 800f288:	f000 80a0 	beq.w	800f3cc <_dtoa_r+0x894>
 800f28c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f290:	9e06      	ldr	r6, [sp, #24]
 800f292:	4645      	mov	r5, r8
 800f294:	9a04      	ldr	r2, [sp, #16]
 800f296:	2101      	movs	r1, #1
 800f298:	441a      	add	r2, r3
 800f29a:	4620      	mov	r0, r4
 800f29c:	4498      	add	r8, r3
 800f29e:	9204      	str	r2, [sp, #16]
 800f2a0:	f7ff f8ee 	bl	800e480 <__i2b>
 800f2a4:	4607      	mov	r7, r0
 800f2a6:	2d00      	cmp	r5, #0
 800f2a8:	dd0b      	ble.n	800f2c2 <_dtoa_r+0x78a>
 800f2aa:	9b04      	ldr	r3, [sp, #16]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	dd08      	ble.n	800f2c2 <_dtoa_r+0x78a>
 800f2b0:	42ab      	cmp	r3, r5
 800f2b2:	9a04      	ldr	r2, [sp, #16]
 800f2b4:	bfa8      	it	ge
 800f2b6:	462b      	movge	r3, r5
 800f2b8:	eba8 0803 	sub.w	r8, r8, r3
 800f2bc:	1aed      	subs	r5, r5, r3
 800f2be:	1ad3      	subs	r3, r2, r3
 800f2c0:	9304      	str	r3, [sp, #16]
 800f2c2:	9b06      	ldr	r3, [sp, #24]
 800f2c4:	b1fb      	cbz	r3, 800f306 <_dtoa_r+0x7ce>
 800f2c6:	9b08      	ldr	r3, [sp, #32]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	f000 809f 	beq.w	800f40c <_dtoa_r+0x8d4>
 800f2ce:	2e00      	cmp	r6, #0
 800f2d0:	dd11      	ble.n	800f2f6 <_dtoa_r+0x7be>
 800f2d2:	4639      	mov	r1, r7
 800f2d4:	4632      	mov	r2, r6
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f7ff f98e 	bl	800e5f8 <__pow5mult>
 800f2dc:	465a      	mov	r2, fp
 800f2de:	4601      	mov	r1, r0
 800f2e0:	4607      	mov	r7, r0
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	f7ff f8e2 	bl	800e4ac <__multiply>
 800f2e8:	4659      	mov	r1, fp
 800f2ea:	9007      	str	r0, [sp, #28]
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f7ff f80b 	bl	800e308 <_Bfree>
 800f2f2:	9b07      	ldr	r3, [sp, #28]
 800f2f4:	469b      	mov	fp, r3
 800f2f6:	9b06      	ldr	r3, [sp, #24]
 800f2f8:	1b9a      	subs	r2, r3, r6
 800f2fa:	d004      	beq.n	800f306 <_dtoa_r+0x7ce>
 800f2fc:	4659      	mov	r1, fp
 800f2fe:	4620      	mov	r0, r4
 800f300:	f7ff f97a 	bl	800e5f8 <__pow5mult>
 800f304:	4683      	mov	fp, r0
 800f306:	2101      	movs	r1, #1
 800f308:	4620      	mov	r0, r4
 800f30a:	f7ff f8b9 	bl	800e480 <__i2b>
 800f30e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f310:	2b00      	cmp	r3, #0
 800f312:	4606      	mov	r6, r0
 800f314:	dd7c      	ble.n	800f410 <_dtoa_r+0x8d8>
 800f316:	461a      	mov	r2, r3
 800f318:	4601      	mov	r1, r0
 800f31a:	4620      	mov	r0, r4
 800f31c:	f7ff f96c 	bl	800e5f8 <__pow5mult>
 800f320:	9b05      	ldr	r3, [sp, #20]
 800f322:	2b01      	cmp	r3, #1
 800f324:	4606      	mov	r6, r0
 800f326:	dd76      	ble.n	800f416 <_dtoa_r+0x8de>
 800f328:	2300      	movs	r3, #0
 800f32a:	9306      	str	r3, [sp, #24]
 800f32c:	6933      	ldr	r3, [r6, #16]
 800f32e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f332:	6918      	ldr	r0, [r3, #16]
 800f334:	f7ff f854 	bl	800e3e0 <__hi0bits>
 800f338:	f1c0 0020 	rsb	r0, r0, #32
 800f33c:	9b04      	ldr	r3, [sp, #16]
 800f33e:	4418      	add	r0, r3
 800f340:	f010 001f 	ands.w	r0, r0, #31
 800f344:	f000 8086 	beq.w	800f454 <_dtoa_r+0x91c>
 800f348:	f1c0 0320 	rsb	r3, r0, #32
 800f34c:	2b04      	cmp	r3, #4
 800f34e:	dd7f      	ble.n	800f450 <_dtoa_r+0x918>
 800f350:	f1c0 001c 	rsb	r0, r0, #28
 800f354:	9b04      	ldr	r3, [sp, #16]
 800f356:	4403      	add	r3, r0
 800f358:	4480      	add	r8, r0
 800f35a:	4405      	add	r5, r0
 800f35c:	9304      	str	r3, [sp, #16]
 800f35e:	f1b8 0f00 	cmp.w	r8, #0
 800f362:	dd05      	ble.n	800f370 <_dtoa_r+0x838>
 800f364:	4659      	mov	r1, fp
 800f366:	4642      	mov	r2, r8
 800f368:	4620      	mov	r0, r4
 800f36a:	f7ff f99f 	bl	800e6ac <__lshift>
 800f36e:	4683      	mov	fp, r0
 800f370:	9b04      	ldr	r3, [sp, #16]
 800f372:	2b00      	cmp	r3, #0
 800f374:	dd05      	ble.n	800f382 <_dtoa_r+0x84a>
 800f376:	4631      	mov	r1, r6
 800f378:	461a      	mov	r2, r3
 800f37a:	4620      	mov	r0, r4
 800f37c:	f7ff f996 	bl	800e6ac <__lshift>
 800f380:	4606      	mov	r6, r0
 800f382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f384:	2b00      	cmp	r3, #0
 800f386:	d069      	beq.n	800f45c <_dtoa_r+0x924>
 800f388:	4631      	mov	r1, r6
 800f38a:	4658      	mov	r0, fp
 800f38c:	f7ff f9fa 	bl	800e784 <__mcmp>
 800f390:	2800      	cmp	r0, #0
 800f392:	da63      	bge.n	800f45c <_dtoa_r+0x924>
 800f394:	2300      	movs	r3, #0
 800f396:	4659      	mov	r1, fp
 800f398:	220a      	movs	r2, #10
 800f39a:	4620      	mov	r0, r4
 800f39c:	f7fe ffd6 	bl	800e34c <__multadd>
 800f3a0:	9b08      	ldr	r3, [sp, #32]
 800f3a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3a6:	4683      	mov	fp, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	f000 818f 	beq.w	800f6cc <_dtoa_r+0xb94>
 800f3ae:	4639      	mov	r1, r7
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	220a      	movs	r2, #10
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f7fe ffc9 	bl	800e34c <__multadd>
 800f3ba:	f1b9 0f00 	cmp.w	r9, #0
 800f3be:	4607      	mov	r7, r0
 800f3c0:	f300 808e 	bgt.w	800f4e0 <_dtoa_r+0x9a8>
 800f3c4:	9b05      	ldr	r3, [sp, #20]
 800f3c6:	2b02      	cmp	r3, #2
 800f3c8:	dc50      	bgt.n	800f46c <_dtoa_r+0x934>
 800f3ca:	e089      	b.n	800f4e0 <_dtoa_r+0x9a8>
 800f3cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f3ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f3d2:	e75d      	b.n	800f290 <_dtoa_r+0x758>
 800f3d4:	9b01      	ldr	r3, [sp, #4]
 800f3d6:	1e5e      	subs	r6, r3, #1
 800f3d8:	9b06      	ldr	r3, [sp, #24]
 800f3da:	42b3      	cmp	r3, r6
 800f3dc:	bfbf      	itttt	lt
 800f3de:	9b06      	ldrlt	r3, [sp, #24]
 800f3e0:	9606      	strlt	r6, [sp, #24]
 800f3e2:	1af2      	sublt	r2, r6, r3
 800f3e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f3e6:	bfb6      	itet	lt
 800f3e8:	189b      	addlt	r3, r3, r2
 800f3ea:	1b9e      	subge	r6, r3, r6
 800f3ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f3ee:	9b01      	ldr	r3, [sp, #4]
 800f3f0:	bfb8      	it	lt
 800f3f2:	2600      	movlt	r6, #0
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	bfb5      	itete	lt
 800f3f8:	eba8 0503 	sublt.w	r5, r8, r3
 800f3fc:	9b01      	ldrge	r3, [sp, #4]
 800f3fe:	2300      	movlt	r3, #0
 800f400:	4645      	movge	r5, r8
 800f402:	e747      	b.n	800f294 <_dtoa_r+0x75c>
 800f404:	9e06      	ldr	r6, [sp, #24]
 800f406:	9f08      	ldr	r7, [sp, #32]
 800f408:	4645      	mov	r5, r8
 800f40a:	e74c      	b.n	800f2a6 <_dtoa_r+0x76e>
 800f40c:	9a06      	ldr	r2, [sp, #24]
 800f40e:	e775      	b.n	800f2fc <_dtoa_r+0x7c4>
 800f410:	9b05      	ldr	r3, [sp, #20]
 800f412:	2b01      	cmp	r3, #1
 800f414:	dc18      	bgt.n	800f448 <_dtoa_r+0x910>
 800f416:	9b02      	ldr	r3, [sp, #8]
 800f418:	b9b3      	cbnz	r3, 800f448 <_dtoa_r+0x910>
 800f41a:	9b03      	ldr	r3, [sp, #12]
 800f41c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f420:	b9a3      	cbnz	r3, 800f44c <_dtoa_r+0x914>
 800f422:	9b03      	ldr	r3, [sp, #12]
 800f424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f428:	0d1b      	lsrs	r3, r3, #20
 800f42a:	051b      	lsls	r3, r3, #20
 800f42c:	b12b      	cbz	r3, 800f43a <_dtoa_r+0x902>
 800f42e:	9b04      	ldr	r3, [sp, #16]
 800f430:	3301      	adds	r3, #1
 800f432:	9304      	str	r3, [sp, #16]
 800f434:	f108 0801 	add.w	r8, r8, #1
 800f438:	2301      	movs	r3, #1
 800f43a:	9306      	str	r3, [sp, #24]
 800f43c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f43e:	2b00      	cmp	r3, #0
 800f440:	f47f af74 	bne.w	800f32c <_dtoa_r+0x7f4>
 800f444:	2001      	movs	r0, #1
 800f446:	e779      	b.n	800f33c <_dtoa_r+0x804>
 800f448:	2300      	movs	r3, #0
 800f44a:	e7f6      	b.n	800f43a <_dtoa_r+0x902>
 800f44c:	9b02      	ldr	r3, [sp, #8]
 800f44e:	e7f4      	b.n	800f43a <_dtoa_r+0x902>
 800f450:	d085      	beq.n	800f35e <_dtoa_r+0x826>
 800f452:	4618      	mov	r0, r3
 800f454:	301c      	adds	r0, #28
 800f456:	e77d      	b.n	800f354 <_dtoa_r+0x81c>
 800f458:	40240000 	.word	0x40240000
 800f45c:	9b01      	ldr	r3, [sp, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	dc38      	bgt.n	800f4d4 <_dtoa_r+0x99c>
 800f462:	9b05      	ldr	r3, [sp, #20]
 800f464:	2b02      	cmp	r3, #2
 800f466:	dd35      	ble.n	800f4d4 <_dtoa_r+0x99c>
 800f468:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f46c:	f1b9 0f00 	cmp.w	r9, #0
 800f470:	d10d      	bne.n	800f48e <_dtoa_r+0x956>
 800f472:	4631      	mov	r1, r6
 800f474:	464b      	mov	r3, r9
 800f476:	2205      	movs	r2, #5
 800f478:	4620      	mov	r0, r4
 800f47a:	f7fe ff67 	bl	800e34c <__multadd>
 800f47e:	4601      	mov	r1, r0
 800f480:	4606      	mov	r6, r0
 800f482:	4658      	mov	r0, fp
 800f484:	f7ff f97e 	bl	800e784 <__mcmp>
 800f488:	2800      	cmp	r0, #0
 800f48a:	f73f adbd 	bgt.w	800f008 <_dtoa_r+0x4d0>
 800f48e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f490:	9d00      	ldr	r5, [sp, #0]
 800f492:	ea6f 0a03 	mvn.w	sl, r3
 800f496:	f04f 0800 	mov.w	r8, #0
 800f49a:	4631      	mov	r1, r6
 800f49c:	4620      	mov	r0, r4
 800f49e:	f7fe ff33 	bl	800e308 <_Bfree>
 800f4a2:	2f00      	cmp	r7, #0
 800f4a4:	f43f aeb4 	beq.w	800f210 <_dtoa_r+0x6d8>
 800f4a8:	f1b8 0f00 	cmp.w	r8, #0
 800f4ac:	d005      	beq.n	800f4ba <_dtoa_r+0x982>
 800f4ae:	45b8      	cmp	r8, r7
 800f4b0:	d003      	beq.n	800f4ba <_dtoa_r+0x982>
 800f4b2:	4641      	mov	r1, r8
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f7fe ff27 	bl	800e308 <_Bfree>
 800f4ba:	4639      	mov	r1, r7
 800f4bc:	4620      	mov	r0, r4
 800f4be:	f7fe ff23 	bl	800e308 <_Bfree>
 800f4c2:	e6a5      	b.n	800f210 <_dtoa_r+0x6d8>
 800f4c4:	2600      	movs	r6, #0
 800f4c6:	4637      	mov	r7, r6
 800f4c8:	e7e1      	b.n	800f48e <_dtoa_r+0x956>
 800f4ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f4cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f4d0:	4637      	mov	r7, r6
 800f4d2:	e599      	b.n	800f008 <_dtoa_r+0x4d0>
 800f4d4:	9b08      	ldr	r3, [sp, #32]
 800f4d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	f000 80fd 	beq.w	800f6da <_dtoa_r+0xba2>
 800f4e0:	2d00      	cmp	r5, #0
 800f4e2:	dd05      	ble.n	800f4f0 <_dtoa_r+0x9b8>
 800f4e4:	4639      	mov	r1, r7
 800f4e6:	462a      	mov	r2, r5
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	f7ff f8df 	bl	800e6ac <__lshift>
 800f4ee:	4607      	mov	r7, r0
 800f4f0:	9b06      	ldr	r3, [sp, #24]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d05c      	beq.n	800f5b0 <_dtoa_r+0xa78>
 800f4f6:	6879      	ldr	r1, [r7, #4]
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	f7fe fec5 	bl	800e288 <_Balloc>
 800f4fe:	4605      	mov	r5, r0
 800f500:	b928      	cbnz	r0, 800f50e <_dtoa_r+0x9d6>
 800f502:	4b80      	ldr	r3, [pc, #512]	; (800f704 <_dtoa_r+0xbcc>)
 800f504:	4602      	mov	r2, r0
 800f506:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f50a:	f7ff bb2e 	b.w	800eb6a <_dtoa_r+0x32>
 800f50e:	693a      	ldr	r2, [r7, #16]
 800f510:	3202      	adds	r2, #2
 800f512:	0092      	lsls	r2, r2, #2
 800f514:	f107 010c 	add.w	r1, r7, #12
 800f518:	300c      	adds	r0, #12
 800f51a:	f7fe fc8b 	bl	800de34 <memcpy>
 800f51e:	2201      	movs	r2, #1
 800f520:	4629      	mov	r1, r5
 800f522:	4620      	mov	r0, r4
 800f524:	f7ff f8c2 	bl	800e6ac <__lshift>
 800f528:	9b00      	ldr	r3, [sp, #0]
 800f52a:	3301      	adds	r3, #1
 800f52c:	9301      	str	r3, [sp, #4]
 800f52e:	9b00      	ldr	r3, [sp, #0]
 800f530:	444b      	add	r3, r9
 800f532:	9307      	str	r3, [sp, #28]
 800f534:	9b02      	ldr	r3, [sp, #8]
 800f536:	f003 0301 	and.w	r3, r3, #1
 800f53a:	46b8      	mov	r8, r7
 800f53c:	9306      	str	r3, [sp, #24]
 800f53e:	4607      	mov	r7, r0
 800f540:	9b01      	ldr	r3, [sp, #4]
 800f542:	4631      	mov	r1, r6
 800f544:	3b01      	subs	r3, #1
 800f546:	4658      	mov	r0, fp
 800f548:	9302      	str	r3, [sp, #8]
 800f54a:	f7ff fa67 	bl	800ea1c <quorem>
 800f54e:	4603      	mov	r3, r0
 800f550:	3330      	adds	r3, #48	; 0x30
 800f552:	9004      	str	r0, [sp, #16]
 800f554:	4641      	mov	r1, r8
 800f556:	4658      	mov	r0, fp
 800f558:	9308      	str	r3, [sp, #32]
 800f55a:	f7ff f913 	bl	800e784 <__mcmp>
 800f55e:	463a      	mov	r2, r7
 800f560:	4681      	mov	r9, r0
 800f562:	4631      	mov	r1, r6
 800f564:	4620      	mov	r0, r4
 800f566:	f7ff f929 	bl	800e7bc <__mdiff>
 800f56a:	68c2      	ldr	r2, [r0, #12]
 800f56c:	9b08      	ldr	r3, [sp, #32]
 800f56e:	4605      	mov	r5, r0
 800f570:	bb02      	cbnz	r2, 800f5b4 <_dtoa_r+0xa7c>
 800f572:	4601      	mov	r1, r0
 800f574:	4658      	mov	r0, fp
 800f576:	f7ff f905 	bl	800e784 <__mcmp>
 800f57a:	9b08      	ldr	r3, [sp, #32]
 800f57c:	4602      	mov	r2, r0
 800f57e:	4629      	mov	r1, r5
 800f580:	4620      	mov	r0, r4
 800f582:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f586:	f7fe febf 	bl	800e308 <_Bfree>
 800f58a:	9b05      	ldr	r3, [sp, #20]
 800f58c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f58e:	9d01      	ldr	r5, [sp, #4]
 800f590:	ea43 0102 	orr.w	r1, r3, r2
 800f594:	9b06      	ldr	r3, [sp, #24]
 800f596:	430b      	orrs	r3, r1
 800f598:	9b08      	ldr	r3, [sp, #32]
 800f59a:	d10d      	bne.n	800f5b8 <_dtoa_r+0xa80>
 800f59c:	2b39      	cmp	r3, #57	; 0x39
 800f59e:	d029      	beq.n	800f5f4 <_dtoa_r+0xabc>
 800f5a0:	f1b9 0f00 	cmp.w	r9, #0
 800f5a4:	dd01      	ble.n	800f5aa <_dtoa_r+0xa72>
 800f5a6:	9b04      	ldr	r3, [sp, #16]
 800f5a8:	3331      	adds	r3, #49	; 0x31
 800f5aa:	9a02      	ldr	r2, [sp, #8]
 800f5ac:	7013      	strb	r3, [r2, #0]
 800f5ae:	e774      	b.n	800f49a <_dtoa_r+0x962>
 800f5b0:	4638      	mov	r0, r7
 800f5b2:	e7b9      	b.n	800f528 <_dtoa_r+0x9f0>
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	e7e2      	b.n	800f57e <_dtoa_r+0xa46>
 800f5b8:	f1b9 0f00 	cmp.w	r9, #0
 800f5bc:	db06      	blt.n	800f5cc <_dtoa_r+0xa94>
 800f5be:	9905      	ldr	r1, [sp, #20]
 800f5c0:	ea41 0909 	orr.w	r9, r1, r9
 800f5c4:	9906      	ldr	r1, [sp, #24]
 800f5c6:	ea59 0101 	orrs.w	r1, r9, r1
 800f5ca:	d120      	bne.n	800f60e <_dtoa_r+0xad6>
 800f5cc:	2a00      	cmp	r2, #0
 800f5ce:	ddec      	ble.n	800f5aa <_dtoa_r+0xa72>
 800f5d0:	4659      	mov	r1, fp
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	9301      	str	r3, [sp, #4]
 800f5d8:	f7ff f868 	bl	800e6ac <__lshift>
 800f5dc:	4631      	mov	r1, r6
 800f5de:	4683      	mov	fp, r0
 800f5e0:	f7ff f8d0 	bl	800e784 <__mcmp>
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	9b01      	ldr	r3, [sp, #4]
 800f5e8:	dc02      	bgt.n	800f5f0 <_dtoa_r+0xab8>
 800f5ea:	d1de      	bne.n	800f5aa <_dtoa_r+0xa72>
 800f5ec:	07da      	lsls	r2, r3, #31
 800f5ee:	d5dc      	bpl.n	800f5aa <_dtoa_r+0xa72>
 800f5f0:	2b39      	cmp	r3, #57	; 0x39
 800f5f2:	d1d8      	bne.n	800f5a6 <_dtoa_r+0xa6e>
 800f5f4:	9a02      	ldr	r2, [sp, #8]
 800f5f6:	2339      	movs	r3, #57	; 0x39
 800f5f8:	7013      	strb	r3, [r2, #0]
 800f5fa:	462b      	mov	r3, r5
 800f5fc:	461d      	mov	r5, r3
 800f5fe:	3b01      	subs	r3, #1
 800f600:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f604:	2a39      	cmp	r2, #57	; 0x39
 800f606:	d050      	beq.n	800f6aa <_dtoa_r+0xb72>
 800f608:	3201      	adds	r2, #1
 800f60a:	701a      	strb	r2, [r3, #0]
 800f60c:	e745      	b.n	800f49a <_dtoa_r+0x962>
 800f60e:	2a00      	cmp	r2, #0
 800f610:	dd03      	ble.n	800f61a <_dtoa_r+0xae2>
 800f612:	2b39      	cmp	r3, #57	; 0x39
 800f614:	d0ee      	beq.n	800f5f4 <_dtoa_r+0xabc>
 800f616:	3301      	adds	r3, #1
 800f618:	e7c7      	b.n	800f5aa <_dtoa_r+0xa72>
 800f61a:	9a01      	ldr	r2, [sp, #4]
 800f61c:	9907      	ldr	r1, [sp, #28]
 800f61e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f622:	428a      	cmp	r2, r1
 800f624:	d02a      	beq.n	800f67c <_dtoa_r+0xb44>
 800f626:	4659      	mov	r1, fp
 800f628:	2300      	movs	r3, #0
 800f62a:	220a      	movs	r2, #10
 800f62c:	4620      	mov	r0, r4
 800f62e:	f7fe fe8d 	bl	800e34c <__multadd>
 800f632:	45b8      	cmp	r8, r7
 800f634:	4683      	mov	fp, r0
 800f636:	f04f 0300 	mov.w	r3, #0
 800f63a:	f04f 020a 	mov.w	r2, #10
 800f63e:	4641      	mov	r1, r8
 800f640:	4620      	mov	r0, r4
 800f642:	d107      	bne.n	800f654 <_dtoa_r+0xb1c>
 800f644:	f7fe fe82 	bl	800e34c <__multadd>
 800f648:	4680      	mov	r8, r0
 800f64a:	4607      	mov	r7, r0
 800f64c:	9b01      	ldr	r3, [sp, #4]
 800f64e:	3301      	adds	r3, #1
 800f650:	9301      	str	r3, [sp, #4]
 800f652:	e775      	b.n	800f540 <_dtoa_r+0xa08>
 800f654:	f7fe fe7a 	bl	800e34c <__multadd>
 800f658:	4639      	mov	r1, r7
 800f65a:	4680      	mov	r8, r0
 800f65c:	2300      	movs	r3, #0
 800f65e:	220a      	movs	r2, #10
 800f660:	4620      	mov	r0, r4
 800f662:	f7fe fe73 	bl	800e34c <__multadd>
 800f666:	4607      	mov	r7, r0
 800f668:	e7f0      	b.n	800f64c <_dtoa_r+0xb14>
 800f66a:	f1b9 0f00 	cmp.w	r9, #0
 800f66e:	9a00      	ldr	r2, [sp, #0]
 800f670:	bfcc      	ite	gt
 800f672:	464d      	movgt	r5, r9
 800f674:	2501      	movle	r5, #1
 800f676:	4415      	add	r5, r2
 800f678:	f04f 0800 	mov.w	r8, #0
 800f67c:	4659      	mov	r1, fp
 800f67e:	2201      	movs	r2, #1
 800f680:	4620      	mov	r0, r4
 800f682:	9301      	str	r3, [sp, #4]
 800f684:	f7ff f812 	bl	800e6ac <__lshift>
 800f688:	4631      	mov	r1, r6
 800f68a:	4683      	mov	fp, r0
 800f68c:	f7ff f87a 	bl	800e784 <__mcmp>
 800f690:	2800      	cmp	r0, #0
 800f692:	dcb2      	bgt.n	800f5fa <_dtoa_r+0xac2>
 800f694:	d102      	bne.n	800f69c <_dtoa_r+0xb64>
 800f696:	9b01      	ldr	r3, [sp, #4]
 800f698:	07db      	lsls	r3, r3, #31
 800f69a:	d4ae      	bmi.n	800f5fa <_dtoa_r+0xac2>
 800f69c:	462b      	mov	r3, r5
 800f69e:	461d      	mov	r5, r3
 800f6a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6a4:	2a30      	cmp	r2, #48	; 0x30
 800f6a6:	d0fa      	beq.n	800f69e <_dtoa_r+0xb66>
 800f6a8:	e6f7      	b.n	800f49a <_dtoa_r+0x962>
 800f6aa:	9a00      	ldr	r2, [sp, #0]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d1a5      	bne.n	800f5fc <_dtoa_r+0xac4>
 800f6b0:	f10a 0a01 	add.w	sl, sl, #1
 800f6b4:	2331      	movs	r3, #49	; 0x31
 800f6b6:	e779      	b.n	800f5ac <_dtoa_r+0xa74>
 800f6b8:	4b13      	ldr	r3, [pc, #76]	; (800f708 <_dtoa_r+0xbd0>)
 800f6ba:	f7ff baaf 	b.w	800ec1c <_dtoa_r+0xe4>
 800f6be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	f47f aa86 	bne.w	800ebd2 <_dtoa_r+0x9a>
 800f6c6:	4b11      	ldr	r3, [pc, #68]	; (800f70c <_dtoa_r+0xbd4>)
 800f6c8:	f7ff baa8 	b.w	800ec1c <_dtoa_r+0xe4>
 800f6cc:	f1b9 0f00 	cmp.w	r9, #0
 800f6d0:	dc03      	bgt.n	800f6da <_dtoa_r+0xba2>
 800f6d2:	9b05      	ldr	r3, [sp, #20]
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	f73f aec9 	bgt.w	800f46c <_dtoa_r+0x934>
 800f6da:	9d00      	ldr	r5, [sp, #0]
 800f6dc:	4631      	mov	r1, r6
 800f6de:	4658      	mov	r0, fp
 800f6e0:	f7ff f99c 	bl	800ea1c <quorem>
 800f6e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f6e8:	f805 3b01 	strb.w	r3, [r5], #1
 800f6ec:	9a00      	ldr	r2, [sp, #0]
 800f6ee:	1aaa      	subs	r2, r5, r2
 800f6f0:	4591      	cmp	r9, r2
 800f6f2:	ddba      	ble.n	800f66a <_dtoa_r+0xb32>
 800f6f4:	4659      	mov	r1, fp
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	220a      	movs	r2, #10
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	f7fe fe26 	bl	800e34c <__multadd>
 800f700:	4683      	mov	fp, r0
 800f702:	e7eb      	b.n	800f6dc <_dtoa_r+0xba4>
 800f704:	080105f7 	.word	0x080105f7
 800f708:	0801074d 	.word	0x0801074d
 800f70c:	08010740 	.word	0x08010740

0800f710 <fiprintf>:
 800f710:	b40e      	push	{r1, r2, r3}
 800f712:	b503      	push	{r0, r1, lr}
 800f714:	4601      	mov	r1, r0
 800f716:	ab03      	add	r3, sp, #12
 800f718:	4805      	ldr	r0, [pc, #20]	; (800f730 <fiprintf+0x20>)
 800f71a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f71e:	6800      	ldr	r0, [r0, #0]
 800f720:	9301      	str	r3, [sp, #4]
 800f722:	f000 f833 	bl	800f78c <_vfiprintf_r>
 800f726:	b002      	add	sp, #8
 800f728:	f85d eb04 	ldr.w	lr, [sp], #4
 800f72c:	b003      	add	sp, #12
 800f72e:	4770      	bx	lr
 800f730:	20000030 	.word	0x20000030

0800f734 <__retarget_lock_init_recursive>:
 800f734:	4770      	bx	lr

0800f736 <__retarget_lock_acquire_recursive>:
 800f736:	4770      	bx	lr

0800f738 <__retarget_lock_release_recursive>:
 800f738:	4770      	bx	lr

0800f73a <__sfputc_r>:
 800f73a:	6893      	ldr	r3, [r2, #8]
 800f73c:	3b01      	subs	r3, #1
 800f73e:	2b00      	cmp	r3, #0
 800f740:	b410      	push	{r4}
 800f742:	6093      	str	r3, [r2, #8]
 800f744:	da08      	bge.n	800f758 <__sfputc_r+0x1e>
 800f746:	6994      	ldr	r4, [r2, #24]
 800f748:	42a3      	cmp	r3, r4
 800f74a:	db01      	blt.n	800f750 <__sfputc_r+0x16>
 800f74c:	290a      	cmp	r1, #10
 800f74e:	d103      	bne.n	800f758 <__sfputc_r+0x1e>
 800f750:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f754:	f000 bade 	b.w	800fd14 <__swbuf_r>
 800f758:	6813      	ldr	r3, [r2, #0]
 800f75a:	1c58      	adds	r0, r3, #1
 800f75c:	6010      	str	r0, [r2, #0]
 800f75e:	7019      	strb	r1, [r3, #0]
 800f760:	4608      	mov	r0, r1
 800f762:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f766:	4770      	bx	lr

0800f768 <__sfputs_r>:
 800f768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f76a:	4606      	mov	r6, r0
 800f76c:	460f      	mov	r7, r1
 800f76e:	4614      	mov	r4, r2
 800f770:	18d5      	adds	r5, r2, r3
 800f772:	42ac      	cmp	r4, r5
 800f774:	d101      	bne.n	800f77a <__sfputs_r+0x12>
 800f776:	2000      	movs	r0, #0
 800f778:	e007      	b.n	800f78a <__sfputs_r+0x22>
 800f77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f77e:	463a      	mov	r2, r7
 800f780:	4630      	mov	r0, r6
 800f782:	f7ff ffda 	bl	800f73a <__sfputc_r>
 800f786:	1c43      	adds	r3, r0, #1
 800f788:	d1f3      	bne.n	800f772 <__sfputs_r+0xa>
 800f78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f78c <_vfiprintf_r>:
 800f78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f790:	460d      	mov	r5, r1
 800f792:	b09d      	sub	sp, #116	; 0x74
 800f794:	4614      	mov	r4, r2
 800f796:	4698      	mov	r8, r3
 800f798:	4606      	mov	r6, r0
 800f79a:	b118      	cbz	r0, 800f7a4 <_vfiprintf_r+0x18>
 800f79c:	6983      	ldr	r3, [r0, #24]
 800f79e:	b90b      	cbnz	r3, 800f7a4 <_vfiprintf_r+0x18>
 800f7a0:	f000 fc9a 	bl	80100d8 <__sinit>
 800f7a4:	4b89      	ldr	r3, [pc, #548]	; (800f9cc <_vfiprintf_r+0x240>)
 800f7a6:	429d      	cmp	r5, r3
 800f7a8:	d11b      	bne.n	800f7e2 <_vfiprintf_r+0x56>
 800f7aa:	6875      	ldr	r5, [r6, #4]
 800f7ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7ae:	07d9      	lsls	r1, r3, #31
 800f7b0:	d405      	bmi.n	800f7be <_vfiprintf_r+0x32>
 800f7b2:	89ab      	ldrh	r3, [r5, #12]
 800f7b4:	059a      	lsls	r2, r3, #22
 800f7b6:	d402      	bmi.n	800f7be <_vfiprintf_r+0x32>
 800f7b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7ba:	f7ff ffbc 	bl	800f736 <__retarget_lock_acquire_recursive>
 800f7be:	89ab      	ldrh	r3, [r5, #12]
 800f7c0:	071b      	lsls	r3, r3, #28
 800f7c2:	d501      	bpl.n	800f7c8 <_vfiprintf_r+0x3c>
 800f7c4:	692b      	ldr	r3, [r5, #16]
 800f7c6:	b9eb      	cbnz	r3, 800f804 <_vfiprintf_r+0x78>
 800f7c8:	4629      	mov	r1, r5
 800f7ca:	4630      	mov	r0, r6
 800f7cc:	f000 faf4 	bl	800fdb8 <__swsetup_r>
 800f7d0:	b1c0      	cbz	r0, 800f804 <_vfiprintf_r+0x78>
 800f7d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7d4:	07dc      	lsls	r4, r3, #31
 800f7d6:	d50e      	bpl.n	800f7f6 <_vfiprintf_r+0x6a>
 800f7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7dc:	b01d      	add	sp, #116	; 0x74
 800f7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e2:	4b7b      	ldr	r3, [pc, #492]	; (800f9d0 <_vfiprintf_r+0x244>)
 800f7e4:	429d      	cmp	r5, r3
 800f7e6:	d101      	bne.n	800f7ec <_vfiprintf_r+0x60>
 800f7e8:	68b5      	ldr	r5, [r6, #8]
 800f7ea:	e7df      	b.n	800f7ac <_vfiprintf_r+0x20>
 800f7ec:	4b79      	ldr	r3, [pc, #484]	; (800f9d4 <_vfiprintf_r+0x248>)
 800f7ee:	429d      	cmp	r5, r3
 800f7f0:	bf08      	it	eq
 800f7f2:	68f5      	ldreq	r5, [r6, #12]
 800f7f4:	e7da      	b.n	800f7ac <_vfiprintf_r+0x20>
 800f7f6:	89ab      	ldrh	r3, [r5, #12]
 800f7f8:	0598      	lsls	r0, r3, #22
 800f7fa:	d4ed      	bmi.n	800f7d8 <_vfiprintf_r+0x4c>
 800f7fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7fe:	f7ff ff9b 	bl	800f738 <__retarget_lock_release_recursive>
 800f802:	e7e9      	b.n	800f7d8 <_vfiprintf_r+0x4c>
 800f804:	2300      	movs	r3, #0
 800f806:	9309      	str	r3, [sp, #36]	; 0x24
 800f808:	2320      	movs	r3, #32
 800f80a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f80e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f812:	2330      	movs	r3, #48	; 0x30
 800f814:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f9d8 <_vfiprintf_r+0x24c>
 800f818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f81c:	f04f 0901 	mov.w	r9, #1
 800f820:	4623      	mov	r3, r4
 800f822:	469a      	mov	sl, r3
 800f824:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f828:	b10a      	cbz	r2, 800f82e <_vfiprintf_r+0xa2>
 800f82a:	2a25      	cmp	r2, #37	; 0x25
 800f82c:	d1f9      	bne.n	800f822 <_vfiprintf_r+0x96>
 800f82e:	ebba 0b04 	subs.w	fp, sl, r4
 800f832:	d00b      	beq.n	800f84c <_vfiprintf_r+0xc0>
 800f834:	465b      	mov	r3, fp
 800f836:	4622      	mov	r2, r4
 800f838:	4629      	mov	r1, r5
 800f83a:	4630      	mov	r0, r6
 800f83c:	f7ff ff94 	bl	800f768 <__sfputs_r>
 800f840:	3001      	adds	r0, #1
 800f842:	f000 80aa 	beq.w	800f99a <_vfiprintf_r+0x20e>
 800f846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f848:	445a      	add	r2, fp
 800f84a:	9209      	str	r2, [sp, #36]	; 0x24
 800f84c:	f89a 3000 	ldrb.w	r3, [sl]
 800f850:	2b00      	cmp	r3, #0
 800f852:	f000 80a2 	beq.w	800f99a <_vfiprintf_r+0x20e>
 800f856:	2300      	movs	r3, #0
 800f858:	f04f 32ff 	mov.w	r2, #4294967295
 800f85c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f860:	f10a 0a01 	add.w	sl, sl, #1
 800f864:	9304      	str	r3, [sp, #16]
 800f866:	9307      	str	r3, [sp, #28]
 800f868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f86c:	931a      	str	r3, [sp, #104]	; 0x68
 800f86e:	4654      	mov	r4, sl
 800f870:	2205      	movs	r2, #5
 800f872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f876:	4858      	ldr	r0, [pc, #352]	; (800f9d8 <_vfiprintf_r+0x24c>)
 800f878:	f7f0 fcc2 	bl	8000200 <memchr>
 800f87c:	9a04      	ldr	r2, [sp, #16]
 800f87e:	b9d8      	cbnz	r0, 800f8b8 <_vfiprintf_r+0x12c>
 800f880:	06d1      	lsls	r1, r2, #27
 800f882:	bf44      	itt	mi
 800f884:	2320      	movmi	r3, #32
 800f886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f88a:	0713      	lsls	r3, r2, #28
 800f88c:	bf44      	itt	mi
 800f88e:	232b      	movmi	r3, #43	; 0x2b
 800f890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f894:	f89a 3000 	ldrb.w	r3, [sl]
 800f898:	2b2a      	cmp	r3, #42	; 0x2a
 800f89a:	d015      	beq.n	800f8c8 <_vfiprintf_r+0x13c>
 800f89c:	9a07      	ldr	r2, [sp, #28]
 800f89e:	4654      	mov	r4, sl
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	f04f 0c0a 	mov.w	ip, #10
 800f8a6:	4621      	mov	r1, r4
 800f8a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8ac:	3b30      	subs	r3, #48	; 0x30
 800f8ae:	2b09      	cmp	r3, #9
 800f8b0:	d94e      	bls.n	800f950 <_vfiprintf_r+0x1c4>
 800f8b2:	b1b0      	cbz	r0, 800f8e2 <_vfiprintf_r+0x156>
 800f8b4:	9207      	str	r2, [sp, #28]
 800f8b6:	e014      	b.n	800f8e2 <_vfiprintf_r+0x156>
 800f8b8:	eba0 0308 	sub.w	r3, r0, r8
 800f8bc:	fa09 f303 	lsl.w	r3, r9, r3
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	9304      	str	r3, [sp, #16]
 800f8c4:	46a2      	mov	sl, r4
 800f8c6:	e7d2      	b.n	800f86e <_vfiprintf_r+0xe2>
 800f8c8:	9b03      	ldr	r3, [sp, #12]
 800f8ca:	1d19      	adds	r1, r3, #4
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	9103      	str	r1, [sp, #12]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	bfbb      	ittet	lt
 800f8d4:	425b      	neglt	r3, r3
 800f8d6:	f042 0202 	orrlt.w	r2, r2, #2
 800f8da:	9307      	strge	r3, [sp, #28]
 800f8dc:	9307      	strlt	r3, [sp, #28]
 800f8de:	bfb8      	it	lt
 800f8e0:	9204      	strlt	r2, [sp, #16]
 800f8e2:	7823      	ldrb	r3, [r4, #0]
 800f8e4:	2b2e      	cmp	r3, #46	; 0x2e
 800f8e6:	d10c      	bne.n	800f902 <_vfiprintf_r+0x176>
 800f8e8:	7863      	ldrb	r3, [r4, #1]
 800f8ea:	2b2a      	cmp	r3, #42	; 0x2a
 800f8ec:	d135      	bne.n	800f95a <_vfiprintf_r+0x1ce>
 800f8ee:	9b03      	ldr	r3, [sp, #12]
 800f8f0:	1d1a      	adds	r2, r3, #4
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	9203      	str	r2, [sp, #12]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	bfb8      	it	lt
 800f8fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8fe:	3402      	adds	r4, #2
 800f900:	9305      	str	r3, [sp, #20]
 800f902:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f9e8 <_vfiprintf_r+0x25c>
 800f906:	7821      	ldrb	r1, [r4, #0]
 800f908:	2203      	movs	r2, #3
 800f90a:	4650      	mov	r0, sl
 800f90c:	f7f0 fc78 	bl	8000200 <memchr>
 800f910:	b140      	cbz	r0, 800f924 <_vfiprintf_r+0x198>
 800f912:	2340      	movs	r3, #64	; 0x40
 800f914:	eba0 000a 	sub.w	r0, r0, sl
 800f918:	fa03 f000 	lsl.w	r0, r3, r0
 800f91c:	9b04      	ldr	r3, [sp, #16]
 800f91e:	4303      	orrs	r3, r0
 800f920:	3401      	adds	r4, #1
 800f922:	9304      	str	r3, [sp, #16]
 800f924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f928:	482c      	ldr	r0, [pc, #176]	; (800f9dc <_vfiprintf_r+0x250>)
 800f92a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f92e:	2206      	movs	r2, #6
 800f930:	f7f0 fc66 	bl	8000200 <memchr>
 800f934:	2800      	cmp	r0, #0
 800f936:	d03f      	beq.n	800f9b8 <_vfiprintf_r+0x22c>
 800f938:	4b29      	ldr	r3, [pc, #164]	; (800f9e0 <_vfiprintf_r+0x254>)
 800f93a:	bb1b      	cbnz	r3, 800f984 <_vfiprintf_r+0x1f8>
 800f93c:	9b03      	ldr	r3, [sp, #12]
 800f93e:	3307      	adds	r3, #7
 800f940:	f023 0307 	bic.w	r3, r3, #7
 800f944:	3308      	adds	r3, #8
 800f946:	9303      	str	r3, [sp, #12]
 800f948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f94a:	443b      	add	r3, r7
 800f94c:	9309      	str	r3, [sp, #36]	; 0x24
 800f94e:	e767      	b.n	800f820 <_vfiprintf_r+0x94>
 800f950:	fb0c 3202 	mla	r2, ip, r2, r3
 800f954:	460c      	mov	r4, r1
 800f956:	2001      	movs	r0, #1
 800f958:	e7a5      	b.n	800f8a6 <_vfiprintf_r+0x11a>
 800f95a:	2300      	movs	r3, #0
 800f95c:	3401      	adds	r4, #1
 800f95e:	9305      	str	r3, [sp, #20]
 800f960:	4619      	mov	r1, r3
 800f962:	f04f 0c0a 	mov.w	ip, #10
 800f966:	4620      	mov	r0, r4
 800f968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f96c:	3a30      	subs	r2, #48	; 0x30
 800f96e:	2a09      	cmp	r2, #9
 800f970:	d903      	bls.n	800f97a <_vfiprintf_r+0x1ee>
 800f972:	2b00      	cmp	r3, #0
 800f974:	d0c5      	beq.n	800f902 <_vfiprintf_r+0x176>
 800f976:	9105      	str	r1, [sp, #20]
 800f978:	e7c3      	b.n	800f902 <_vfiprintf_r+0x176>
 800f97a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f97e:	4604      	mov	r4, r0
 800f980:	2301      	movs	r3, #1
 800f982:	e7f0      	b.n	800f966 <_vfiprintf_r+0x1da>
 800f984:	ab03      	add	r3, sp, #12
 800f986:	9300      	str	r3, [sp, #0]
 800f988:	462a      	mov	r2, r5
 800f98a:	4b16      	ldr	r3, [pc, #88]	; (800f9e4 <_vfiprintf_r+0x258>)
 800f98c:	a904      	add	r1, sp, #16
 800f98e:	4630      	mov	r0, r6
 800f990:	f3af 8000 	nop.w
 800f994:	4607      	mov	r7, r0
 800f996:	1c78      	adds	r0, r7, #1
 800f998:	d1d6      	bne.n	800f948 <_vfiprintf_r+0x1bc>
 800f99a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f99c:	07d9      	lsls	r1, r3, #31
 800f99e:	d405      	bmi.n	800f9ac <_vfiprintf_r+0x220>
 800f9a0:	89ab      	ldrh	r3, [r5, #12]
 800f9a2:	059a      	lsls	r2, r3, #22
 800f9a4:	d402      	bmi.n	800f9ac <_vfiprintf_r+0x220>
 800f9a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9a8:	f7ff fec6 	bl	800f738 <__retarget_lock_release_recursive>
 800f9ac:	89ab      	ldrh	r3, [r5, #12]
 800f9ae:	065b      	lsls	r3, r3, #25
 800f9b0:	f53f af12 	bmi.w	800f7d8 <_vfiprintf_r+0x4c>
 800f9b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9b6:	e711      	b.n	800f7dc <_vfiprintf_r+0x50>
 800f9b8:	ab03      	add	r3, sp, #12
 800f9ba:	9300      	str	r3, [sp, #0]
 800f9bc:	462a      	mov	r2, r5
 800f9be:	4b09      	ldr	r3, [pc, #36]	; (800f9e4 <_vfiprintf_r+0x258>)
 800f9c0:	a904      	add	r1, sp, #16
 800f9c2:	4630      	mov	r0, r6
 800f9c4:	f000 f880 	bl	800fac8 <_printf_i>
 800f9c8:	e7e4      	b.n	800f994 <_vfiprintf_r+0x208>
 800f9ca:	bf00      	nop
 800f9cc:	08010804 	.word	0x08010804
 800f9d0:	08010824 	.word	0x08010824
 800f9d4:	080107e4 	.word	0x080107e4
 800f9d8:	080107ae 	.word	0x080107ae
 800f9dc:	080107b8 	.word	0x080107b8
 800f9e0:	00000000 	.word	0x00000000
 800f9e4:	0800f769 	.word	0x0800f769
 800f9e8:	080107b4 	.word	0x080107b4

0800f9ec <_printf_common>:
 800f9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9f0:	4616      	mov	r6, r2
 800f9f2:	4699      	mov	r9, r3
 800f9f4:	688a      	ldr	r2, [r1, #8]
 800f9f6:	690b      	ldr	r3, [r1, #16]
 800f9f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	bfb8      	it	lt
 800fa00:	4613      	movlt	r3, r2
 800fa02:	6033      	str	r3, [r6, #0]
 800fa04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa08:	4607      	mov	r7, r0
 800fa0a:	460c      	mov	r4, r1
 800fa0c:	b10a      	cbz	r2, 800fa12 <_printf_common+0x26>
 800fa0e:	3301      	adds	r3, #1
 800fa10:	6033      	str	r3, [r6, #0]
 800fa12:	6823      	ldr	r3, [r4, #0]
 800fa14:	0699      	lsls	r1, r3, #26
 800fa16:	bf42      	ittt	mi
 800fa18:	6833      	ldrmi	r3, [r6, #0]
 800fa1a:	3302      	addmi	r3, #2
 800fa1c:	6033      	strmi	r3, [r6, #0]
 800fa1e:	6825      	ldr	r5, [r4, #0]
 800fa20:	f015 0506 	ands.w	r5, r5, #6
 800fa24:	d106      	bne.n	800fa34 <_printf_common+0x48>
 800fa26:	f104 0a19 	add.w	sl, r4, #25
 800fa2a:	68e3      	ldr	r3, [r4, #12]
 800fa2c:	6832      	ldr	r2, [r6, #0]
 800fa2e:	1a9b      	subs	r3, r3, r2
 800fa30:	42ab      	cmp	r3, r5
 800fa32:	dc26      	bgt.n	800fa82 <_printf_common+0x96>
 800fa34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa38:	1e13      	subs	r3, r2, #0
 800fa3a:	6822      	ldr	r2, [r4, #0]
 800fa3c:	bf18      	it	ne
 800fa3e:	2301      	movne	r3, #1
 800fa40:	0692      	lsls	r2, r2, #26
 800fa42:	d42b      	bmi.n	800fa9c <_printf_common+0xb0>
 800fa44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa48:	4649      	mov	r1, r9
 800fa4a:	4638      	mov	r0, r7
 800fa4c:	47c0      	blx	r8
 800fa4e:	3001      	adds	r0, #1
 800fa50:	d01e      	beq.n	800fa90 <_printf_common+0xa4>
 800fa52:	6823      	ldr	r3, [r4, #0]
 800fa54:	68e5      	ldr	r5, [r4, #12]
 800fa56:	6832      	ldr	r2, [r6, #0]
 800fa58:	f003 0306 	and.w	r3, r3, #6
 800fa5c:	2b04      	cmp	r3, #4
 800fa5e:	bf08      	it	eq
 800fa60:	1aad      	subeq	r5, r5, r2
 800fa62:	68a3      	ldr	r3, [r4, #8]
 800fa64:	6922      	ldr	r2, [r4, #16]
 800fa66:	bf0c      	ite	eq
 800fa68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa6c:	2500      	movne	r5, #0
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	bfc4      	itt	gt
 800fa72:	1a9b      	subgt	r3, r3, r2
 800fa74:	18ed      	addgt	r5, r5, r3
 800fa76:	2600      	movs	r6, #0
 800fa78:	341a      	adds	r4, #26
 800fa7a:	42b5      	cmp	r5, r6
 800fa7c:	d11a      	bne.n	800fab4 <_printf_common+0xc8>
 800fa7e:	2000      	movs	r0, #0
 800fa80:	e008      	b.n	800fa94 <_printf_common+0xa8>
 800fa82:	2301      	movs	r3, #1
 800fa84:	4652      	mov	r2, sl
 800fa86:	4649      	mov	r1, r9
 800fa88:	4638      	mov	r0, r7
 800fa8a:	47c0      	blx	r8
 800fa8c:	3001      	adds	r0, #1
 800fa8e:	d103      	bne.n	800fa98 <_printf_common+0xac>
 800fa90:	f04f 30ff 	mov.w	r0, #4294967295
 800fa94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa98:	3501      	adds	r5, #1
 800fa9a:	e7c6      	b.n	800fa2a <_printf_common+0x3e>
 800fa9c:	18e1      	adds	r1, r4, r3
 800fa9e:	1c5a      	adds	r2, r3, #1
 800faa0:	2030      	movs	r0, #48	; 0x30
 800faa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800faa6:	4422      	add	r2, r4
 800faa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800faac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fab0:	3302      	adds	r3, #2
 800fab2:	e7c7      	b.n	800fa44 <_printf_common+0x58>
 800fab4:	2301      	movs	r3, #1
 800fab6:	4622      	mov	r2, r4
 800fab8:	4649      	mov	r1, r9
 800faba:	4638      	mov	r0, r7
 800fabc:	47c0      	blx	r8
 800fabe:	3001      	adds	r0, #1
 800fac0:	d0e6      	beq.n	800fa90 <_printf_common+0xa4>
 800fac2:	3601      	adds	r6, #1
 800fac4:	e7d9      	b.n	800fa7a <_printf_common+0x8e>
	...

0800fac8 <_printf_i>:
 800fac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800facc:	460c      	mov	r4, r1
 800face:	4691      	mov	r9, r2
 800fad0:	7e27      	ldrb	r7, [r4, #24]
 800fad2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fad4:	2f78      	cmp	r7, #120	; 0x78
 800fad6:	4680      	mov	r8, r0
 800fad8:	469a      	mov	sl, r3
 800fada:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fade:	d807      	bhi.n	800faf0 <_printf_i+0x28>
 800fae0:	2f62      	cmp	r7, #98	; 0x62
 800fae2:	d80a      	bhi.n	800fafa <_printf_i+0x32>
 800fae4:	2f00      	cmp	r7, #0
 800fae6:	f000 80d8 	beq.w	800fc9a <_printf_i+0x1d2>
 800faea:	2f58      	cmp	r7, #88	; 0x58
 800faec:	f000 80a3 	beq.w	800fc36 <_printf_i+0x16e>
 800faf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800faf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800faf8:	e03a      	b.n	800fb70 <_printf_i+0xa8>
 800fafa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fafe:	2b15      	cmp	r3, #21
 800fb00:	d8f6      	bhi.n	800faf0 <_printf_i+0x28>
 800fb02:	a001      	add	r0, pc, #4	; (adr r0, 800fb08 <_printf_i+0x40>)
 800fb04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fb08:	0800fb61 	.word	0x0800fb61
 800fb0c:	0800fb75 	.word	0x0800fb75
 800fb10:	0800faf1 	.word	0x0800faf1
 800fb14:	0800faf1 	.word	0x0800faf1
 800fb18:	0800faf1 	.word	0x0800faf1
 800fb1c:	0800faf1 	.word	0x0800faf1
 800fb20:	0800fb75 	.word	0x0800fb75
 800fb24:	0800faf1 	.word	0x0800faf1
 800fb28:	0800faf1 	.word	0x0800faf1
 800fb2c:	0800faf1 	.word	0x0800faf1
 800fb30:	0800faf1 	.word	0x0800faf1
 800fb34:	0800fc81 	.word	0x0800fc81
 800fb38:	0800fba5 	.word	0x0800fba5
 800fb3c:	0800fc63 	.word	0x0800fc63
 800fb40:	0800faf1 	.word	0x0800faf1
 800fb44:	0800faf1 	.word	0x0800faf1
 800fb48:	0800fca3 	.word	0x0800fca3
 800fb4c:	0800faf1 	.word	0x0800faf1
 800fb50:	0800fba5 	.word	0x0800fba5
 800fb54:	0800faf1 	.word	0x0800faf1
 800fb58:	0800faf1 	.word	0x0800faf1
 800fb5c:	0800fc6b 	.word	0x0800fc6b
 800fb60:	680b      	ldr	r3, [r1, #0]
 800fb62:	1d1a      	adds	r2, r3, #4
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	600a      	str	r2, [r1, #0]
 800fb68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fb6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb70:	2301      	movs	r3, #1
 800fb72:	e0a3      	b.n	800fcbc <_printf_i+0x1f4>
 800fb74:	6825      	ldr	r5, [r4, #0]
 800fb76:	6808      	ldr	r0, [r1, #0]
 800fb78:	062e      	lsls	r6, r5, #24
 800fb7a:	f100 0304 	add.w	r3, r0, #4
 800fb7e:	d50a      	bpl.n	800fb96 <_printf_i+0xce>
 800fb80:	6805      	ldr	r5, [r0, #0]
 800fb82:	600b      	str	r3, [r1, #0]
 800fb84:	2d00      	cmp	r5, #0
 800fb86:	da03      	bge.n	800fb90 <_printf_i+0xc8>
 800fb88:	232d      	movs	r3, #45	; 0x2d
 800fb8a:	426d      	negs	r5, r5
 800fb8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb90:	485e      	ldr	r0, [pc, #376]	; (800fd0c <_printf_i+0x244>)
 800fb92:	230a      	movs	r3, #10
 800fb94:	e019      	b.n	800fbca <_printf_i+0x102>
 800fb96:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fb9a:	6805      	ldr	r5, [r0, #0]
 800fb9c:	600b      	str	r3, [r1, #0]
 800fb9e:	bf18      	it	ne
 800fba0:	b22d      	sxthne	r5, r5
 800fba2:	e7ef      	b.n	800fb84 <_printf_i+0xbc>
 800fba4:	680b      	ldr	r3, [r1, #0]
 800fba6:	6825      	ldr	r5, [r4, #0]
 800fba8:	1d18      	adds	r0, r3, #4
 800fbaa:	6008      	str	r0, [r1, #0]
 800fbac:	0628      	lsls	r0, r5, #24
 800fbae:	d501      	bpl.n	800fbb4 <_printf_i+0xec>
 800fbb0:	681d      	ldr	r5, [r3, #0]
 800fbb2:	e002      	b.n	800fbba <_printf_i+0xf2>
 800fbb4:	0669      	lsls	r1, r5, #25
 800fbb6:	d5fb      	bpl.n	800fbb0 <_printf_i+0xe8>
 800fbb8:	881d      	ldrh	r5, [r3, #0]
 800fbba:	4854      	ldr	r0, [pc, #336]	; (800fd0c <_printf_i+0x244>)
 800fbbc:	2f6f      	cmp	r7, #111	; 0x6f
 800fbbe:	bf0c      	ite	eq
 800fbc0:	2308      	moveq	r3, #8
 800fbc2:	230a      	movne	r3, #10
 800fbc4:	2100      	movs	r1, #0
 800fbc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbca:	6866      	ldr	r6, [r4, #4]
 800fbcc:	60a6      	str	r6, [r4, #8]
 800fbce:	2e00      	cmp	r6, #0
 800fbd0:	bfa2      	ittt	ge
 800fbd2:	6821      	ldrge	r1, [r4, #0]
 800fbd4:	f021 0104 	bicge.w	r1, r1, #4
 800fbd8:	6021      	strge	r1, [r4, #0]
 800fbda:	b90d      	cbnz	r5, 800fbe0 <_printf_i+0x118>
 800fbdc:	2e00      	cmp	r6, #0
 800fbde:	d04d      	beq.n	800fc7c <_printf_i+0x1b4>
 800fbe0:	4616      	mov	r6, r2
 800fbe2:	fbb5 f1f3 	udiv	r1, r5, r3
 800fbe6:	fb03 5711 	mls	r7, r3, r1, r5
 800fbea:	5dc7      	ldrb	r7, [r0, r7]
 800fbec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fbf0:	462f      	mov	r7, r5
 800fbf2:	42bb      	cmp	r3, r7
 800fbf4:	460d      	mov	r5, r1
 800fbf6:	d9f4      	bls.n	800fbe2 <_printf_i+0x11a>
 800fbf8:	2b08      	cmp	r3, #8
 800fbfa:	d10b      	bne.n	800fc14 <_printf_i+0x14c>
 800fbfc:	6823      	ldr	r3, [r4, #0]
 800fbfe:	07df      	lsls	r7, r3, #31
 800fc00:	d508      	bpl.n	800fc14 <_printf_i+0x14c>
 800fc02:	6923      	ldr	r3, [r4, #16]
 800fc04:	6861      	ldr	r1, [r4, #4]
 800fc06:	4299      	cmp	r1, r3
 800fc08:	bfde      	ittt	le
 800fc0a:	2330      	movle	r3, #48	; 0x30
 800fc0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fc10:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fc14:	1b92      	subs	r2, r2, r6
 800fc16:	6122      	str	r2, [r4, #16]
 800fc18:	f8cd a000 	str.w	sl, [sp]
 800fc1c:	464b      	mov	r3, r9
 800fc1e:	aa03      	add	r2, sp, #12
 800fc20:	4621      	mov	r1, r4
 800fc22:	4640      	mov	r0, r8
 800fc24:	f7ff fee2 	bl	800f9ec <_printf_common>
 800fc28:	3001      	adds	r0, #1
 800fc2a:	d14c      	bne.n	800fcc6 <_printf_i+0x1fe>
 800fc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc30:	b004      	add	sp, #16
 800fc32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc36:	4835      	ldr	r0, [pc, #212]	; (800fd0c <_printf_i+0x244>)
 800fc38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fc3c:	6823      	ldr	r3, [r4, #0]
 800fc3e:	680e      	ldr	r6, [r1, #0]
 800fc40:	061f      	lsls	r7, r3, #24
 800fc42:	f856 5b04 	ldr.w	r5, [r6], #4
 800fc46:	600e      	str	r6, [r1, #0]
 800fc48:	d514      	bpl.n	800fc74 <_printf_i+0x1ac>
 800fc4a:	07d9      	lsls	r1, r3, #31
 800fc4c:	bf44      	itt	mi
 800fc4e:	f043 0320 	orrmi.w	r3, r3, #32
 800fc52:	6023      	strmi	r3, [r4, #0]
 800fc54:	b91d      	cbnz	r5, 800fc5e <_printf_i+0x196>
 800fc56:	6823      	ldr	r3, [r4, #0]
 800fc58:	f023 0320 	bic.w	r3, r3, #32
 800fc5c:	6023      	str	r3, [r4, #0]
 800fc5e:	2310      	movs	r3, #16
 800fc60:	e7b0      	b.n	800fbc4 <_printf_i+0xfc>
 800fc62:	6823      	ldr	r3, [r4, #0]
 800fc64:	f043 0320 	orr.w	r3, r3, #32
 800fc68:	6023      	str	r3, [r4, #0]
 800fc6a:	2378      	movs	r3, #120	; 0x78
 800fc6c:	4828      	ldr	r0, [pc, #160]	; (800fd10 <_printf_i+0x248>)
 800fc6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc72:	e7e3      	b.n	800fc3c <_printf_i+0x174>
 800fc74:	065e      	lsls	r6, r3, #25
 800fc76:	bf48      	it	mi
 800fc78:	b2ad      	uxthmi	r5, r5
 800fc7a:	e7e6      	b.n	800fc4a <_printf_i+0x182>
 800fc7c:	4616      	mov	r6, r2
 800fc7e:	e7bb      	b.n	800fbf8 <_printf_i+0x130>
 800fc80:	680b      	ldr	r3, [r1, #0]
 800fc82:	6826      	ldr	r6, [r4, #0]
 800fc84:	6960      	ldr	r0, [r4, #20]
 800fc86:	1d1d      	adds	r5, r3, #4
 800fc88:	600d      	str	r5, [r1, #0]
 800fc8a:	0635      	lsls	r5, r6, #24
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	d501      	bpl.n	800fc94 <_printf_i+0x1cc>
 800fc90:	6018      	str	r0, [r3, #0]
 800fc92:	e002      	b.n	800fc9a <_printf_i+0x1d2>
 800fc94:	0671      	lsls	r1, r6, #25
 800fc96:	d5fb      	bpl.n	800fc90 <_printf_i+0x1c8>
 800fc98:	8018      	strh	r0, [r3, #0]
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	6123      	str	r3, [r4, #16]
 800fc9e:	4616      	mov	r6, r2
 800fca0:	e7ba      	b.n	800fc18 <_printf_i+0x150>
 800fca2:	680b      	ldr	r3, [r1, #0]
 800fca4:	1d1a      	adds	r2, r3, #4
 800fca6:	600a      	str	r2, [r1, #0]
 800fca8:	681e      	ldr	r6, [r3, #0]
 800fcaa:	6862      	ldr	r2, [r4, #4]
 800fcac:	2100      	movs	r1, #0
 800fcae:	4630      	mov	r0, r6
 800fcb0:	f7f0 faa6 	bl	8000200 <memchr>
 800fcb4:	b108      	cbz	r0, 800fcba <_printf_i+0x1f2>
 800fcb6:	1b80      	subs	r0, r0, r6
 800fcb8:	6060      	str	r0, [r4, #4]
 800fcba:	6863      	ldr	r3, [r4, #4]
 800fcbc:	6123      	str	r3, [r4, #16]
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcc4:	e7a8      	b.n	800fc18 <_printf_i+0x150>
 800fcc6:	6923      	ldr	r3, [r4, #16]
 800fcc8:	4632      	mov	r2, r6
 800fcca:	4649      	mov	r1, r9
 800fccc:	4640      	mov	r0, r8
 800fcce:	47d0      	blx	sl
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	d0ab      	beq.n	800fc2c <_printf_i+0x164>
 800fcd4:	6823      	ldr	r3, [r4, #0]
 800fcd6:	079b      	lsls	r3, r3, #30
 800fcd8:	d413      	bmi.n	800fd02 <_printf_i+0x23a>
 800fcda:	68e0      	ldr	r0, [r4, #12]
 800fcdc:	9b03      	ldr	r3, [sp, #12]
 800fcde:	4298      	cmp	r0, r3
 800fce0:	bfb8      	it	lt
 800fce2:	4618      	movlt	r0, r3
 800fce4:	e7a4      	b.n	800fc30 <_printf_i+0x168>
 800fce6:	2301      	movs	r3, #1
 800fce8:	4632      	mov	r2, r6
 800fcea:	4649      	mov	r1, r9
 800fcec:	4640      	mov	r0, r8
 800fcee:	47d0      	blx	sl
 800fcf0:	3001      	adds	r0, #1
 800fcf2:	d09b      	beq.n	800fc2c <_printf_i+0x164>
 800fcf4:	3501      	adds	r5, #1
 800fcf6:	68e3      	ldr	r3, [r4, #12]
 800fcf8:	9903      	ldr	r1, [sp, #12]
 800fcfa:	1a5b      	subs	r3, r3, r1
 800fcfc:	42ab      	cmp	r3, r5
 800fcfe:	dcf2      	bgt.n	800fce6 <_printf_i+0x21e>
 800fd00:	e7eb      	b.n	800fcda <_printf_i+0x212>
 800fd02:	2500      	movs	r5, #0
 800fd04:	f104 0619 	add.w	r6, r4, #25
 800fd08:	e7f5      	b.n	800fcf6 <_printf_i+0x22e>
 800fd0a:	bf00      	nop
 800fd0c:	080107bf 	.word	0x080107bf
 800fd10:	080107d0 	.word	0x080107d0

0800fd14 <__swbuf_r>:
 800fd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd16:	460e      	mov	r6, r1
 800fd18:	4614      	mov	r4, r2
 800fd1a:	4605      	mov	r5, r0
 800fd1c:	b118      	cbz	r0, 800fd26 <__swbuf_r+0x12>
 800fd1e:	6983      	ldr	r3, [r0, #24]
 800fd20:	b90b      	cbnz	r3, 800fd26 <__swbuf_r+0x12>
 800fd22:	f000 f9d9 	bl	80100d8 <__sinit>
 800fd26:	4b21      	ldr	r3, [pc, #132]	; (800fdac <__swbuf_r+0x98>)
 800fd28:	429c      	cmp	r4, r3
 800fd2a:	d12b      	bne.n	800fd84 <__swbuf_r+0x70>
 800fd2c:	686c      	ldr	r4, [r5, #4]
 800fd2e:	69a3      	ldr	r3, [r4, #24]
 800fd30:	60a3      	str	r3, [r4, #8]
 800fd32:	89a3      	ldrh	r3, [r4, #12]
 800fd34:	071a      	lsls	r2, r3, #28
 800fd36:	d52f      	bpl.n	800fd98 <__swbuf_r+0x84>
 800fd38:	6923      	ldr	r3, [r4, #16]
 800fd3a:	b36b      	cbz	r3, 800fd98 <__swbuf_r+0x84>
 800fd3c:	6923      	ldr	r3, [r4, #16]
 800fd3e:	6820      	ldr	r0, [r4, #0]
 800fd40:	1ac0      	subs	r0, r0, r3
 800fd42:	6963      	ldr	r3, [r4, #20]
 800fd44:	b2f6      	uxtb	r6, r6
 800fd46:	4283      	cmp	r3, r0
 800fd48:	4637      	mov	r7, r6
 800fd4a:	dc04      	bgt.n	800fd56 <__swbuf_r+0x42>
 800fd4c:	4621      	mov	r1, r4
 800fd4e:	4628      	mov	r0, r5
 800fd50:	f000 f92e 	bl	800ffb0 <_fflush_r>
 800fd54:	bb30      	cbnz	r0, 800fda4 <__swbuf_r+0x90>
 800fd56:	68a3      	ldr	r3, [r4, #8]
 800fd58:	3b01      	subs	r3, #1
 800fd5a:	60a3      	str	r3, [r4, #8]
 800fd5c:	6823      	ldr	r3, [r4, #0]
 800fd5e:	1c5a      	adds	r2, r3, #1
 800fd60:	6022      	str	r2, [r4, #0]
 800fd62:	701e      	strb	r6, [r3, #0]
 800fd64:	6963      	ldr	r3, [r4, #20]
 800fd66:	3001      	adds	r0, #1
 800fd68:	4283      	cmp	r3, r0
 800fd6a:	d004      	beq.n	800fd76 <__swbuf_r+0x62>
 800fd6c:	89a3      	ldrh	r3, [r4, #12]
 800fd6e:	07db      	lsls	r3, r3, #31
 800fd70:	d506      	bpl.n	800fd80 <__swbuf_r+0x6c>
 800fd72:	2e0a      	cmp	r6, #10
 800fd74:	d104      	bne.n	800fd80 <__swbuf_r+0x6c>
 800fd76:	4621      	mov	r1, r4
 800fd78:	4628      	mov	r0, r5
 800fd7a:	f000 f919 	bl	800ffb0 <_fflush_r>
 800fd7e:	b988      	cbnz	r0, 800fda4 <__swbuf_r+0x90>
 800fd80:	4638      	mov	r0, r7
 800fd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd84:	4b0a      	ldr	r3, [pc, #40]	; (800fdb0 <__swbuf_r+0x9c>)
 800fd86:	429c      	cmp	r4, r3
 800fd88:	d101      	bne.n	800fd8e <__swbuf_r+0x7a>
 800fd8a:	68ac      	ldr	r4, [r5, #8]
 800fd8c:	e7cf      	b.n	800fd2e <__swbuf_r+0x1a>
 800fd8e:	4b09      	ldr	r3, [pc, #36]	; (800fdb4 <__swbuf_r+0xa0>)
 800fd90:	429c      	cmp	r4, r3
 800fd92:	bf08      	it	eq
 800fd94:	68ec      	ldreq	r4, [r5, #12]
 800fd96:	e7ca      	b.n	800fd2e <__swbuf_r+0x1a>
 800fd98:	4621      	mov	r1, r4
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	f000 f80c 	bl	800fdb8 <__swsetup_r>
 800fda0:	2800      	cmp	r0, #0
 800fda2:	d0cb      	beq.n	800fd3c <__swbuf_r+0x28>
 800fda4:	f04f 37ff 	mov.w	r7, #4294967295
 800fda8:	e7ea      	b.n	800fd80 <__swbuf_r+0x6c>
 800fdaa:	bf00      	nop
 800fdac:	08010804 	.word	0x08010804
 800fdb0:	08010824 	.word	0x08010824
 800fdb4:	080107e4 	.word	0x080107e4

0800fdb8 <__swsetup_r>:
 800fdb8:	4b32      	ldr	r3, [pc, #200]	; (800fe84 <__swsetup_r+0xcc>)
 800fdba:	b570      	push	{r4, r5, r6, lr}
 800fdbc:	681d      	ldr	r5, [r3, #0]
 800fdbe:	4606      	mov	r6, r0
 800fdc0:	460c      	mov	r4, r1
 800fdc2:	b125      	cbz	r5, 800fdce <__swsetup_r+0x16>
 800fdc4:	69ab      	ldr	r3, [r5, #24]
 800fdc6:	b913      	cbnz	r3, 800fdce <__swsetup_r+0x16>
 800fdc8:	4628      	mov	r0, r5
 800fdca:	f000 f985 	bl	80100d8 <__sinit>
 800fdce:	4b2e      	ldr	r3, [pc, #184]	; (800fe88 <__swsetup_r+0xd0>)
 800fdd0:	429c      	cmp	r4, r3
 800fdd2:	d10f      	bne.n	800fdf4 <__swsetup_r+0x3c>
 800fdd4:	686c      	ldr	r4, [r5, #4]
 800fdd6:	89a3      	ldrh	r3, [r4, #12]
 800fdd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fddc:	0719      	lsls	r1, r3, #28
 800fdde:	d42c      	bmi.n	800fe3a <__swsetup_r+0x82>
 800fde0:	06dd      	lsls	r5, r3, #27
 800fde2:	d411      	bmi.n	800fe08 <__swsetup_r+0x50>
 800fde4:	2309      	movs	r3, #9
 800fde6:	6033      	str	r3, [r6, #0]
 800fde8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fdec:	81a3      	strh	r3, [r4, #12]
 800fdee:	f04f 30ff 	mov.w	r0, #4294967295
 800fdf2:	e03e      	b.n	800fe72 <__swsetup_r+0xba>
 800fdf4:	4b25      	ldr	r3, [pc, #148]	; (800fe8c <__swsetup_r+0xd4>)
 800fdf6:	429c      	cmp	r4, r3
 800fdf8:	d101      	bne.n	800fdfe <__swsetup_r+0x46>
 800fdfa:	68ac      	ldr	r4, [r5, #8]
 800fdfc:	e7eb      	b.n	800fdd6 <__swsetup_r+0x1e>
 800fdfe:	4b24      	ldr	r3, [pc, #144]	; (800fe90 <__swsetup_r+0xd8>)
 800fe00:	429c      	cmp	r4, r3
 800fe02:	bf08      	it	eq
 800fe04:	68ec      	ldreq	r4, [r5, #12]
 800fe06:	e7e6      	b.n	800fdd6 <__swsetup_r+0x1e>
 800fe08:	0758      	lsls	r0, r3, #29
 800fe0a:	d512      	bpl.n	800fe32 <__swsetup_r+0x7a>
 800fe0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe0e:	b141      	cbz	r1, 800fe22 <__swsetup_r+0x6a>
 800fe10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe14:	4299      	cmp	r1, r3
 800fe16:	d002      	beq.n	800fe1e <__swsetup_r+0x66>
 800fe18:	4630      	mov	r0, r6
 800fe1a:	f7fe f821 	bl	800de60 <_free_r>
 800fe1e:	2300      	movs	r3, #0
 800fe20:	6363      	str	r3, [r4, #52]	; 0x34
 800fe22:	89a3      	ldrh	r3, [r4, #12]
 800fe24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fe28:	81a3      	strh	r3, [r4, #12]
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	6063      	str	r3, [r4, #4]
 800fe2e:	6923      	ldr	r3, [r4, #16]
 800fe30:	6023      	str	r3, [r4, #0]
 800fe32:	89a3      	ldrh	r3, [r4, #12]
 800fe34:	f043 0308 	orr.w	r3, r3, #8
 800fe38:	81a3      	strh	r3, [r4, #12]
 800fe3a:	6923      	ldr	r3, [r4, #16]
 800fe3c:	b94b      	cbnz	r3, 800fe52 <__swsetup_r+0x9a>
 800fe3e:	89a3      	ldrh	r3, [r4, #12]
 800fe40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fe44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe48:	d003      	beq.n	800fe52 <__swsetup_r+0x9a>
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	4630      	mov	r0, r6
 800fe4e:	f000 fa05 	bl	801025c <__smakebuf_r>
 800fe52:	89a0      	ldrh	r0, [r4, #12]
 800fe54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe58:	f010 0301 	ands.w	r3, r0, #1
 800fe5c:	d00a      	beq.n	800fe74 <__swsetup_r+0xbc>
 800fe5e:	2300      	movs	r3, #0
 800fe60:	60a3      	str	r3, [r4, #8]
 800fe62:	6963      	ldr	r3, [r4, #20]
 800fe64:	425b      	negs	r3, r3
 800fe66:	61a3      	str	r3, [r4, #24]
 800fe68:	6923      	ldr	r3, [r4, #16]
 800fe6a:	b943      	cbnz	r3, 800fe7e <__swsetup_r+0xc6>
 800fe6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fe70:	d1ba      	bne.n	800fde8 <__swsetup_r+0x30>
 800fe72:	bd70      	pop	{r4, r5, r6, pc}
 800fe74:	0781      	lsls	r1, r0, #30
 800fe76:	bf58      	it	pl
 800fe78:	6963      	ldrpl	r3, [r4, #20]
 800fe7a:	60a3      	str	r3, [r4, #8]
 800fe7c:	e7f4      	b.n	800fe68 <__swsetup_r+0xb0>
 800fe7e:	2000      	movs	r0, #0
 800fe80:	e7f7      	b.n	800fe72 <__swsetup_r+0xba>
 800fe82:	bf00      	nop
 800fe84:	20000030 	.word	0x20000030
 800fe88:	08010804 	.word	0x08010804
 800fe8c:	08010824 	.word	0x08010824
 800fe90:	080107e4 	.word	0x080107e4

0800fe94 <abort>:
 800fe94:	b508      	push	{r3, lr}
 800fe96:	2006      	movs	r0, #6
 800fe98:	f000 fa48 	bl	801032c <raise>
 800fe9c:	2001      	movs	r0, #1
 800fe9e:	f7f2 fba9 	bl	80025f4 <_exit>
	...

0800fea4 <__sflush_r>:
 800fea4:	898a      	ldrh	r2, [r1, #12]
 800fea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feaa:	4605      	mov	r5, r0
 800feac:	0710      	lsls	r0, r2, #28
 800feae:	460c      	mov	r4, r1
 800feb0:	d458      	bmi.n	800ff64 <__sflush_r+0xc0>
 800feb2:	684b      	ldr	r3, [r1, #4]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	dc05      	bgt.n	800fec4 <__sflush_r+0x20>
 800feb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800feba:	2b00      	cmp	r3, #0
 800febc:	dc02      	bgt.n	800fec4 <__sflush_r+0x20>
 800febe:	2000      	movs	r0, #0
 800fec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fec6:	2e00      	cmp	r6, #0
 800fec8:	d0f9      	beq.n	800febe <__sflush_r+0x1a>
 800feca:	2300      	movs	r3, #0
 800fecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fed0:	682f      	ldr	r7, [r5, #0]
 800fed2:	602b      	str	r3, [r5, #0]
 800fed4:	d032      	beq.n	800ff3c <__sflush_r+0x98>
 800fed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fed8:	89a3      	ldrh	r3, [r4, #12]
 800feda:	075a      	lsls	r2, r3, #29
 800fedc:	d505      	bpl.n	800feea <__sflush_r+0x46>
 800fede:	6863      	ldr	r3, [r4, #4]
 800fee0:	1ac0      	subs	r0, r0, r3
 800fee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fee4:	b10b      	cbz	r3, 800feea <__sflush_r+0x46>
 800fee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fee8:	1ac0      	subs	r0, r0, r3
 800feea:	2300      	movs	r3, #0
 800feec:	4602      	mov	r2, r0
 800feee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fef0:	6a21      	ldr	r1, [r4, #32]
 800fef2:	4628      	mov	r0, r5
 800fef4:	47b0      	blx	r6
 800fef6:	1c43      	adds	r3, r0, #1
 800fef8:	89a3      	ldrh	r3, [r4, #12]
 800fefa:	d106      	bne.n	800ff0a <__sflush_r+0x66>
 800fefc:	6829      	ldr	r1, [r5, #0]
 800fefe:	291d      	cmp	r1, #29
 800ff00:	d82c      	bhi.n	800ff5c <__sflush_r+0xb8>
 800ff02:	4a2a      	ldr	r2, [pc, #168]	; (800ffac <__sflush_r+0x108>)
 800ff04:	40ca      	lsrs	r2, r1
 800ff06:	07d6      	lsls	r6, r2, #31
 800ff08:	d528      	bpl.n	800ff5c <__sflush_r+0xb8>
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	6062      	str	r2, [r4, #4]
 800ff0e:	04d9      	lsls	r1, r3, #19
 800ff10:	6922      	ldr	r2, [r4, #16]
 800ff12:	6022      	str	r2, [r4, #0]
 800ff14:	d504      	bpl.n	800ff20 <__sflush_r+0x7c>
 800ff16:	1c42      	adds	r2, r0, #1
 800ff18:	d101      	bne.n	800ff1e <__sflush_r+0x7a>
 800ff1a:	682b      	ldr	r3, [r5, #0]
 800ff1c:	b903      	cbnz	r3, 800ff20 <__sflush_r+0x7c>
 800ff1e:	6560      	str	r0, [r4, #84]	; 0x54
 800ff20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff22:	602f      	str	r7, [r5, #0]
 800ff24:	2900      	cmp	r1, #0
 800ff26:	d0ca      	beq.n	800febe <__sflush_r+0x1a>
 800ff28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff2c:	4299      	cmp	r1, r3
 800ff2e:	d002      	beq.n	800ff36 <__sflush_r+0x92>
 800ff30:	4628      	mov	r0, r5
 800ff32:	f7fd ff95 	bl	800de60 <_free_r>
 800ff36:	2000      	movs	r0, #0
 800ff38:	6360      	str	r0, [r4, #52]	; 0x34
 800ff3a:	e7c1      	b.n	800fec0 <__sflush_r+0x1c>
 800ff3c:	6a21      	ldr	r1, [r4, #32]
 800ff3e:	2301      	movs	r3, #1
 800ff40:	4628      	mov	r0, r5
 800ff42:	47b0      	blx	r6
 800ff44:	1c41      	adds	r1, r0, #1
 800ff46:	d1c7      	bne.n	800fed8 <__sflush_r+0x34>
 800ff48:	682b      	ldr	r3, [r5, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d0c4      	beq.n	800fed8 <__sflush_r+0x34>
 800ff4e:	2b1d      	cmp	r3, #29
 800ff50:	d001      	beq.n	800ff56 <__sflush_r+0xb2>
 800ff52:	2b16      	cmp	r3, #22
 800ff54:	d101      	bne.n	800ff5a <__sflush_r+0xb6>
 800ff56:	602f      	str	r7, [r5, #0]
 800ff58:	e7b1      	b.n	800febe <__sflush_r+0x1a>
 800ff5a:	89a3      	ldrh	r3, [r4, #12]
 800ff5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff60:	81a3      	strh	r3, [r4, #12]
 800ff62:	e7ad      	b.n	800fec0 <__sflush_r+0x1c>
 800ff64:	690f      	ldr	r7, [r1, #16]
 800ff66:	2f00      	cmp	r7, #0
 800ff68:	d0a9      	beq.n	800febe <__sflush_r+0x1a>
 800ff6a:	0793      	lsls	r3, r2, #30
 800ff6c:	680e      	ldr	r6, [r1, #0]
 800ff6e:	bf08      	it	eq
 800ff70:	694b      	ldreq	r3, [r1, #20]
 800ff72:	600f      	str	r7, [r1, #0]
 800ff74:	bf18      	it	ne
 800ff76:	2300      	movne	r3, #0
 800ff78:	eba6 0807 	sub.w	r8, r6, r7
 800ff7c:	608b      	str	r3, [r1, #8]
 800ff7e:	f1b8 0f00 	cmp.w	r8, #0
 800ff82:	dd9c      	ble.n	800febe <__sflush_r+0x1a>
 800ff84:	6a21      	ldr	r1, [r4, #32]
 800ff86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ff88:	4643      	mov	r3, r8
 800ff8a:	463a      	mov	r2, r7
 800ff8c:	4628      	mov	r0, r5
 800ff8e:	47b0      	blx	r6
 800ff90:	2800      	cmp	r0, #0
 800ff92:	dc06      	bgt.n	800ffa2 <__sflush_r+0xfe>
 800ff94:	89a3      	ldrh	r3, [r4, #12]
 800ff96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff9a:	81a3      	strh	r3, [r4, #12]
 800ff9c:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa0:	e78e      	b.n	800fec0 <__sflush_r+0x1c>
 800ffa2:	4407      	add	r7, r0
 800ffa4:	eba8 0800 	sub.w	r8, r8, r0
 800ffa8:	e7e9      	b.n	800ff7e <__sflush_r+0xda>
 800ffaa:	bf00      	nop
 800ffac:	20400001 	.word	0x20400001

0800ffb0 <_fflush_r>:
 800ffb0:	b538      	push	{r3, r4, r5, lr}
 800ffb2:	690b      	ldr	r3, [r1, #16]
 800ffb4:	4605      	mov	r5, r0
 800ffb6:	460c      	mov	r4, r1
 800ffb8:	b913      	cbnz	r3, 800ffc0 <_fflush_r+0x10>
 800ffba:	2500      	movs	r5, #0
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	bd38      	pop	{r3, r4, r5, pc}
 800ffc0:	b118      	cbz	r0, 800ffca <_fflush_r+0x1a>
 800ffc2:	6983      	ldr	r3, [r0, #24]
 800ffc4:	b90b      	cbnz	r3, 800ffca <_fflush_r+0x1a>
 800ffc6:	f000 f887 	bl	80100d8 <__sinit>
 800ffca:	4b14      	ldr	r3, [pc, #80]	; (801001c <_fflush_r+0x6c>)
 800ffcc:	429c      	cmp	r4, r3
 800ffce:	d11b      	bne.n	8010008 <_fflush_r+0x58>
 800ffd0:	686c      	ldr	r4, [r5, #4]
 800ffd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d0ef      	beq.n	800ffba <_fflush_r+0xa>
 800ffda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ffdc:	07d0      	lsls	r0, r2, #31
 800ffde:	d404      	bmi.n	800ffea <_fflush_r+0x3a>
 800ffe0:	0599      	lsls	r1, r3, #22
 800ffe2:	d402      	bmi.n	800ffea <_fflush_r+0x3a>
 800ffe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffe6:	f7ff fba6 	bl	800f736 <__retarget_lock_acquire_recursive>
 800ffea:	4628      	mov	r0, r5
 800ffec:	4621      	mov	r1, r4
 800ffee:	f7ff ff59 	bl	800fea4 <__sflush_r>
 800fff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fff4:	07da      	lsls	r2, r3, #31
 800fff6:	4605      	mov	r5, r0
 800fff8:	d4e0      	bmi.n	800ffbc <_fflush_r+0xc>
 800fffa:	89a3      	ldrh	r3, [r4, #12]
 800fffc:	059b      	lsls	r3, r3, #22
 800fffe:	d4dd      	bmi.n	800ffbc <_fflush_r+0xc>
 8010000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010002:	f7ff fb99 	bl	800f738 <__retarget_lock_release_recursive>
 8010006:	e7d9      	b.n	800ffbc <_fflush_r+0xc>
 8010008:	4b05      	ldr	r3, [pc, #20]	; (8010020 <_fflush_r+0x70>)
 801000a:	429c      	cmp	r4, r3
 801000c:	d101      	bne.n	8010012 <_fflush_r+0x62>
 801000e:	68ac      	ldr	r4, [r5, #8]
 8010010:	e7df      	b.n	800ffd2 <_fflush_r+0x22>
 8010012:	4b04      	ldr	r3, [pc, #16]	; (8010024 <_fflush_r+0x74>)
 8010014:	429c      	cmp	r4, r3
 8010016:	bf08      	it	eq
 8010018:	68ec      	ldreq	r4, [r5, #12]
 801001a:	e7da      	b.n	800ffd2 <_fflush_r+0x22>
 801001c:	08010804 	.word	0x08010804
 8010020:	08010824 	.word	0x08010824
 8010024:	080107e4 	.word	0x080107e4

08010028 <std>:
 8010028:	2300      	movs	r3, #0
 801002a:	b510      	push	{r4, lr}
 801002c:	4604      	mov	r4, r0
 801002e:	e9c0 3300 	strd	r3, r3, [r0]
 8010032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010036:	6083      	str	r3, [r0, #8]
 8010038:	8181      	strh	r1, [r0, #12]
 801003a:	6643      	str	r3, [r0, #100]	; 0x64
 801003c:	81c2      	strh	r2, [r0, #14]
 801003e:	6183      	str	r3, [r0, #24]
 8010040:	4619      	mov	r1, r3
 8010042:	2208      	movs	r2, #8
 8010044:	305c      	adds	r0, #92	; 0x5c
 8010046:	f7fd ff03 	bl	800de50 <memset>
 801004a:	4b05      	ldr	r3, [pc, #20]	; (8010060 <std+0x38>)
 801004c:	6263      	str	r3, [r4, #36]	; 0x24
 801004e:	4b05      	ldr	r3, [pc, #20]	; (8010064 <std+0x3c>)
 8010050:	62a3      	str	r3, [r4, #40]	; 0x28
 8010052:	4b05      	ldr	r3, [pc, #20]	; (8010068 <std+0x40>)
 8010054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010056:	4b05      	ldr	r3, [pc, #20]	; (801006c <std+0x44>)
 8010058:	6224      	str	r4, [r4, #32]
 801005a:	6323      	str	r3, [r4, #48]	; 0x30
 801005c:	bd10      	pop	{r4, pc}
 801005e:	bf00      	nop
 8010060:	08010365 	.word	0x08010365
 8010064:	08010387 	.word	0x08010387
 8010068:	080103bf 	.word	0x080103bf
 801006c:	080103e3 	.word	0x080103e3

08010070 <_cleanup_r>:
 8010070:	4901      	ldr	r1, [pc, #4]	; (8010078 <_cleanup_r+0x8>)
 8010072:	f000 b8af 	b.w	80101d4 <_fwalk_reent>
 8010076:	bf00      	nop
 8010078:	0800ffb1 	.word	0x0800ffb1

0801007c <__sfmoreglue>:
 801007c:	b570      	push	{r4, r5, r6, lr}
 801007e:	1e4a      	subs	r2, r1, #1
 8010080:	2568      	movs	r5, #104	; 0x68
 8010082:	4355      	muls	r5, r2
 8010084:	460e      	mov	r6, r1
 8010086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801008a:	f7fd ff39 	bl	800df00 <_malloc_r>
 801008e:	4604      	mov	r4, r0
 8010090:	b140      	cbz	r0, 80100a4 <__sfmoreglue+0x28>
 8010092:	2100      	movs	r1, #0
 8010094:	e9c0 1600 	strd	r1, r6, [r0]
 8010098:	300c      	adds	r0, #12
 801009a:	60a0      	str	r0, [r4, #8]
 801009c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80100a0:	f7fd fed6 	bl	800de50 <memset>
 80100a4:	4620      	mov	r0, r4
 80100a6:	bd70      	pop	{r4, r5, r6, pc}

080100a8 <__sfp_lock_acquire>:
 80100a8:	4801      	ldr	r0, [pc, #4]	; (80100b0 <__sfp_lock_acquire+0x8>)
 80100aa:	f7ff bb44 	b.w	800f736 <__retarget_lock_acquire_recursive>
 80100ae:	bf00      	nop
 80100b0:	20008bb0 	.word	0x20008bb0

080100b4 <__sfp_lock_release>:
 80100b4:	4801      	ldr	r0, [pc, #4]	; (80100bc <__sfp_lock_release+0x8>)
 80100b6:	f7ff bb3f 	b.w	800f738 <__retarget_lock_release_recursive>
 80100ba:	bf00      	nop
 80100bc:	20008bb0 	.word	0x20008bb0

080100c0 <__sinit_lock_acquire>:
 80100c0:	4801      	ldr	r0, [pc, #4]	; (80100c8 <__sinit_lock_acquire+0x8>)
 80100c2:	f7ff bb38 	b.w	800f736 <__retarget_lock_acquire_recursive>
 80100c6:	bf00      	nop
 80100c8:	20008bab 	.word	0x20008bab

080100cc <__sinit_lock_release>:
 80100cc:	4801      	ldr	r0, [pc, #4]	; (80100d4 <__sinit_lock_release+0x8>)
 80100ce:	f7ff bb33 	b.w	800f738 <__retarget_lock_release_recursive>
 80100d2:	bf00      	nop
 80100d4:	20008bab 	.word	0x20008bab

080100d8 <__sinit>:
 80100d8:	b510      	push	{r4, lr}
 80100da:	4604      	mov	r4, r0
 80100dc:	f7ff fff0 	bl	80100c0 <__sinit_lock_acquire>
 80100e0:	69a3      	ldr	r3, [r4, #24]
 80100e2:	b11b      	cbz	r3, 80100ec <__sinit+0x14>
 80100e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100e8:	f7ff bff0 	b.w	80100cc <__sinit_lock_release>
 80100ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80100f0:	6523      	str	r3, [r4, #80]	; 0x50
 80100f2:	4b13      	ldr	r3, [pc, #76]	; (8010140 <__sinit+0x68>)
 80100f4:	4a13      	ldr	r2, [pc, #76]	; (8010144 <__sinit+0x6c>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80100fa:	42a3      	cmp	r3, r4
 80100fc:	bf04      	itt	eq
 80100fe:	2301      	moveq	r3, #1
 8010100:	61a3      	streq	r3, [r4, #24]
 8010102:	4620      	mov	r0, r4
 8010104:	f000 f820 	bl	8010148 <__sfp>
 8010108:	6060      	str	r0, [r4, #4]
 801010a:	4620      	mov	r0, r4
 801010c:	f000 f81c 	bl	8010148 <__sfp>
 8010110:	60a0      	str	r0, [r4, #8]
 8010112:	4620      	mov	r0, r4
 8010114:	f000 f818 	bl	8010148 <__sfp>
 8010118:	2200      	movs	r2, #0
 801011a:	60e0      	str	r0, [r4, #12]
 801011c:	2104      	movs	r1, #4
 801011e:	6860      	ldr	r0, [r4, #4]
 8010120:	f7ff ff82 	bl	8010028 <std>
 8010124:	68a0      	ldr	r0, [r4, #8]
 8010126:	2201      	movs	r2, #1
 8010128:	2109      	movs	r1, #9
 801012a:	f7ff ff7d 	bl	8010028 <std>
 801012e:	68e0      	ldr	r0, [r4, #12]
 8010130:	2202      	movs	r2, #2
 8010132:	2112      	movs	r1, #18
 8010134:	f7ff ff78 	bl	8010028 <std>
 8010138:	2301      	movs	r3, #1
 801013a:	61a3      	str	r3, [r4, #24]
 801013c:	e7d2      	b.n	80100e4 <__sinit+0xc>
 801013e:	bf00      	nop
 8010140:	0801057c 	.word	0x0801057c
 8010144:	08010071 	.word	0x08010071

08010148 <__sfp>:
 8010148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014a:	4607      	mov	r7, r0
 801014c:	f7ff ffac 	bl	80100a8 <__sfp_lock_acquire>
 8010150:	4b1e      	ldr	r3, [pc, #120]	; (80101cc <__sfp+0x84>)
 8010152:	681e      	ldr	r6, [r3, #0]
 8010154:	69b3      	ldr	r3, [r6, #24]
 8010156:	b913      	cbnz	r3, 801015e <__sfp+0x16>
 8010158:	4630      	mov	r0, r6
 801015a:	f7ff ffbd 	bl	80100d8 <__sinit>
 801015e:	3648      	adds	r6, #72	; 0x48
 8010160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010164:	3b01      	subs	r3, #1
 8010166:	d503      	bpl.n	8010170 <__sfp+0x28>
 8010168:	6833      	ldr	r3, [r6, #0]
 801016a:	b30b      	cbz	r3, 80101b0 <__sfp+0x68>
 801016c:	6836      	ldr	r6, [r6, #0]
 801016e:	e7f7      	b.n	8010160 <__sfp+0x18>
 8010170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010174:	b9d5      	cbnz	r5, 80101ac <__sfp+0x64>
 8010176:	4b16      	ldr	r3, [pc, #88]	; (80101d0 <__sfp+0x88>)
 8010178:	60e3      	str	r3, [r4, #12]
 801017a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801017e:	6665      	str	r5, [r4, #100]	; 0x64
 8010180:	f7ff fad8 	bl	800f734 <__retarget_lock_init_recursive>
 8010184:	f7ff ff96 	bl	80100b4 <__sfp_lock_release>
 8010188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801018c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010190:	6025      	str	r5, [r4, #0]
 8010192:	61a5      	str	r5, [r4, #24]
 8010194:	2208      	movs	r2, #8
 8010196:	4629      	mov	r1, r5
 8010198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801019c:	f7fd fe58 	bl	800de50 <memset>
 80101a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80101a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80101a8:	4620      	mov	r0, r4
 80101aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101ac:	3468      	adds	r4, #104	; 0x68
 80101ae:	e7d9      	b.n	8010164 <__sfp+0x1c>
 80101b0:	2104      	movs	r1, #4
 80101b2:	4638      	mov	r0, r7
 80101b4:	f7ff ff62 	bl	801007c <__sfmoreglue>
 80101b8:	4604      	mov	r4, r0
 80101ba:	6030      	str	r0, [r6, #0]
 80101bc:	2800      	cmp	r0, #0
 80101be:	d1d5      	bne.n	801016c <__sfp+0x24>
 80101c0:	f7ff ff78 	bl	80100b4 <__sfp_lock_release>
 80101c4:	230c      	movs	r3, #12
 80101c6:	603b      	str	r3, [r7, #0]
 80101c8:	e7ee      	b.n	80101a8 <__sfp+0x60>
 80101ca:	bf00      	nop
 80101cc:	0801057c 	.word	0x0801057c
 80101d0:	ffff0001 	.word	0xffff0001

080101d4 <_fwalk_reent>:
 80101d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101d8:	4606      	mov	r6, r0
 80101da:	4688      	mov	r8, r1
 80101dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80101e0:	2700      	movs	r7, #0
 80101e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80101e6:	f1b9 0901 	subs.w	r9, r9, #1
 80101ea:	d505      	bpl.n	80101f8 <_fwalk_reent+0x24>
 80101ec:	6824      	ldr	r4, [r4, #0]
 80101ee:	2c00      	cmp	r4, #0
 80101f0:	d1f7      	bne.n	80101e2 <_fwalk_reent+0xe>
 80101f2:	4638      	mov	r0, r7
 80101f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101f8:	89ab      	ldrh	r3, [r5, #12]
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d907      	bls.n	801020e <_fwalk_reent+0x3a>
 80101fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010202:	3301      	adds	r3, #1
 8010204:	d003      	beq.n	801020e <_fwalk_reent+0x3a>
 8010206:	4629      	mov	r1, r5
 8010208:	4630      	mov	r0, r6
 801020a:	47c0      	blx	r8
 801020c:	4307      	orrs	r7, r0
 801020e:	3568      	adds	r5, #104	; 0x68
 8010210:	e7e9      	b.n	80101e6 <_fwalk_reent+0x12>

08010212 <__swhatbuf_r>:
 8010212:	b570      	push	{r4, r5, r6, lr}
 8010214:	460e      	mov	r6, r1
 8010216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801021a:	2900      	cmp	r1, #0
 801021c:	b096      	sub	sp, #88	; 0x58
 801021e:	4614      	mov	r4, r2
 8010220:	461d      	mov	r5, r3
 8010222:	da07      	bge.n	8010234 <__swhatbuf_r+0x22>
 8010224:	2300      	movs	r3, #0
 8010226:	602b      	str	r3, [r5, #0]
 8010228:	89b3      	ldrh	r3, [r6, #12]
 801022a:	061a      	lsls	r2, r3, #24
 801022c:	d410      	bmi.n	8010250 <__swhatbuf_r+0x3e>
 801022e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010232:	e00e      	b.n	8010252 <__swhatbuf_r+0x40>
 8010234:	466a      	mov	r2, sp
 8010236:	f000 f8fb 	bl	8010430 <_fstat_r>
 801023a:	2800      	cmp	r0, #0
 801023c:	dbf2      	blt.n	8010224 <__swhatbuf_r+0x12>
 801023e:	9a01      	ldr	r2, [sp, #4]
 8010240:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010244:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010248:	425a      	negs	r2, r3
 801024a:	415a      	adcs	r2, r3
 801024c:	602a      	str	r2, [r5, #0]
 801024e:	e7ee      	b.n	801022e <__swhatbuf_r+0x1c>
 8010250:	2340      	movs	r3, #64	; 0x40
 8010252:	2000      	movs	r0, #0
 8010254:	6023      	str	r3, [r4, #0]
 8010256:	b016      	add	sp, #88	; 0x58
 8010258:	bd70      	pop	{r4, r5, r6, pc}
	...

0801025c <__smakebuf_r>:
 801025c:	898b      	ldrh	r3, [r1, #12]
 801025e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010260:	079d      	lsls	r5, r3, #30
 8010262:	4606      	mov	r6, r0
 8010264:	460c      	mov	r4, r1
 8010266:	d507      	bpl.n	8010278 <__smakebuf_r+0x1c>
 8010268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801026c:	6023      	str	r3, [r4, #0]
 801026e:	6123      	str	r3, [r4, #16]
 8010270:	2301      	movs	r3, #1
 8010272:	6163      	str	r3, [r4, #20]
 8010274:	b002      	add	sp, #8
 8010276:	bd70      	pop	{r4, r5, r6, pc}
 8010278:	ab01      	add	r3, sp, #4
 801027a:	466a      	mov	r2, sp
 801027c:	f7ff ffc9 	bl	8010212 <__swhatbuf_r>
 8010280:	9900      	ldr	r1, [sp, #0]
 8010282:	4605      	mov	r5, r0
 8010284:	4630      	mov	r0, r6
 8010286:	f7fd fe3b 	bl	800df00 <_malloc_r>
 801028a:	b948      	cbnz	r0, 80102a0 <__smakebuf_r+0x44>
 801028c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010290:	059a      	lsls	r2, r3, #22
 8010292:	d4ef      	bmi.n	8010274 <__smakebuf_r+0x18>
 8010294:	f023 0303 	bic.w	r3, r3, #3
 8010298:	f043 0302 	orr.w	r3, r3, #2
 801029c:	81a3      	strh	r3, [r4, #12]
 801029e:	e7e3      	b.n	8010268 <__smakebuf_r+0xc>
 80102a0:	4b0d      	ldr	r3, [pc, #52]	; (80102d8 <__smakebuf_r+0x7c>)
 80102a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80102a4:	89a3      	ldrh	r3, [r4, #12]
 80102a6:	6020      	str	r0, [r4, #0]
 80102a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102ac:	81a3      	strh	r3, [r4, #12]
 80102ae:	9b00      	ldr	r3, [sp, #0]
 80102b0:	6163      	str	r3, [r4, #20]
 80102b2:	9b01      	ldr	r3, [sp, #4]
 80102b4:	6120      	str	r0, [r4, #16]
 80102b6:	b15b      	cbz	r3, 80102d0 <__smakebuf_r+0x74>
 80102b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102bc:	4630      	mov	r0, r6
 80102be:	f000 f8c9 	bl	8010454 <_isatty_r>
 80102c2:	b128      	cbz	r0, 80102d0 <__smakebuf_r+0x74>
 80102c4:	89a3      	ldrh	r3, [r4, #12]
 80102c6:	f023 0303 	bic.w	r3, r3, #3
 80102ca:	f043 0301 	orr.w	r3, r3, #1
 80102ce:	81a3      	strh	r3, [r4, #12]
 80102d0:	89a0      	ldrh	r0, [r4, #12]
 80102d2:	4305      	orrs	r5, r0
 80102d4:	81a5      	strh	r5, [r4, #12]
 80102d6:	e7cd      	b.n	8010274 <__smakebuf_r+0x18>
 80102d8:	08010071 	.word	0x08010071

080102dc <_raise_r>:
 80102dc:	291f      	cmp	r1, #31
 80102de:	b538      	push	{r3, r4, r5, lr}
 80102e0:	4604      	mov	r4, r0
 80102e2:	460d      	mov	r5, r1
 80102e4:	d904      	bls.n	80102f0 <_raise_r+0x14>
 80102e6:	2316      	movs	r3, #22
 80102e8:	6003      	str	r3, [r0, #0]
 80102ea:	f04f 30ff 	mov.w	r0, #4294967295
 80102ee:	bd38      	pop	{r3, r4, r5, pc}
 80102f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80102f2:	b112      	cbz	r2, 80102fa <_raise_r+0x1e>
 80102f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80102f8:	b94b      	cbnz	r3, 801030e <_raise_r+0x32>
 80102fa:	4620      	mov	r0, r4
 80102fc:	f000 f830 	bl	8010360 <_getpid_r>
 8010300:	462a      	mov	r2, r5
 8010302:	4601      	mov	r1, r0
 8010304:	4620      	mov	r0, r4
 8010306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801030a:	f000 b817 	b.w	801033c <_kill_r>
 801030e:	2b01      	cmp	r3, #1
 8010310:	d00a      	beq.n	8010328 <_raise_r+0x4c>
 8010312:	1c59      	adds	r1, r3, #1
 8010314:	d103      	bne.n	801031e <_raise_r+0x42>
 8010316:	2316      	movs	r3, #22
 8010318:	6003      	str	r3, [r0, #0]
 801031a:	2001      	movs	r0, #1
 801031c:	e7e7      	b.n	80102ee <_raise_r+0x12>
 801031e:	2400      	movs	r4, #0
 8010320:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010324:	4628      	mov	r0, r5
 8010326:	4798      	blx	r3
 8010328:	2000      	movs	r0, #0
 801032a:	e7e0      	b.n	80102ee <_raise_r+0x12>

0801032c <raise>:
 801032c:	4b02      	ldr	r3, [pc, #8]	; (8010338 <raise+0xc>)
 801032e:	4601      	mov	r1, r0
 8010330:	6818      	ldr	r0, [r3, #0]
 8010332:	f7ff bfd3 	b.w	80102dc <_raise_r>
 8010336:	bf00      	nop
 8010338:	20000030 	.word	0x20000030

0801033c <_kill_r>:
 801033c:	b538      	push	{r3, r4, r5, lr}
 801033e:	4d07      	ldr	r5, [pc, #28]	; (801035c <_kill_r+0x20>)
 8010340:	2300      	movs	r3, #0
 8010342:	4604      	mov	r4, r0
 8010344:	4608      	mov	r0, r1
 8010346:	4611      	mov	r1, r2
 8010348:	602b      	str	r3, [r5, #0]
 801034a:	f7f2 f943 	bl	80025d4 <_kill>
 801034e:	1c43      	adds	r3, r0, #1
 8010350:	d102      	bne.n	8010358 <_kill_r+0x1c>
 8010352:	682b      	ldr	r3, [r5, #0]
 8010354:	b103      	cbz	r3, 8010358 <_kill_r+0x1c>
 8010356:	6023      	str	r3, [r4, #0]
 8010358:	bd38      	pop	{r3, r4, r5, pc}
 801035a:	bf00      	nop
 801035c:	20008ba4 	.word	0x20008ba4

08010360 <_getpid_r>:
 8010360:	f7f2 b930 	b.w	80025c4 <_getpid>

08010364 <__sread>:
 8010364:	b510      	push	{r4, lr}
 8010366:	460c      	mov	r4, r1
 8010368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801036c:	f000 f894 	bl	8010498 <_read_r>
 8010370:	2800      	cmp	r0, #0
 8010372:	bfab      	itete	ge
 8010374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010376:	89a3      	ldrhlt	r3, [r4, #12]
 8010378:	181b      	addge	r3, r3, r0
 801037a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801037e:	bfac      	ite	ge
 8010380:	6563      	strge	r3, [r4, #84]	; 0x54
 8010382:	81a3      	strhlt	r3, [r4, #12]
 8010384:	bd10      	pop	{r4, pc}

08010386 <__swrite>:
 8010386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801038a:	461f      	mov	r7, r3
 801038c:	898b      	ldrh	r3, [r1, #12]
 801038e:	05db      	lsls	r3, r3, #23
 8010390:	4605      	mov	r5, r0
 8010392:	460c      	mov	r4, r1
 8010394:	4616      	mov	r6, r2
 8010396:	d505      	bpl.n	80103a4 <__swrite+0x1e>
 8010398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801039c:	2302      	movs	r3, #2
 801039e:	2200      	movs	r2, #0
 80103a0:	f000 f868 	bl	8010474 <_lseek_r>
 80103a4:	89a3      	ldrh	r3, [r4, #12]
 80103a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80103ae:	81a3      	strh	r3, [r4, #12]
 80103b0:	4632      	mov	r2, r6
 80103b2:	463b      	mov	r3, r7
 80103b4:	4628      	mov	r0, r5
 80103b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103ba:	f000 b817 	b.w	80103ec <_write_r>

080103be <__sseek>:
 80103be:	b510      	push	{r4, lr}
 80103c0:	460c      	mov	r4, r1
 80103c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103c6:	f000 f855 	bl	8010474 <_lseek_r>
 80103ca:	1c43      	adds	r3, r0, #1
 80103cc:	89a3      	ldrh	r3, [r4, #12]
 80103ce:	bf15      	itete	ne
 80103d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80103d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80103d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80103da:	81a3      	strheq	r3, [r4, #12]
 80103dc:	bf18      	it	ne
 80103de:	81a3      	strhne	r3, [r4, #12]
 80103e0:	bd10      	pop	{r4, pc}

080103e2 <__sclose>:
 80103e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103e6:	f000 b813 	b.w	8010410 <_close_r>
	...

080103ec <_write_r>:
 80103ec:	b538      	push	{r3, r4, r5, lr}
 80103ee:	4d07      	ldr	r5, [pc, #28]	; (801040c <_write_r+0x20>)
 80103f0:	4604      	mov	r4, r0
 80103f2:	4608      	mov	r0, r1
 80103f4:	4611      	mov	r1, r2
 80103f6:	2200      	movs	r2, #0
 80103f8:	602a      	str	r2, [r5, #0]
 80103fa:	461a      	mov	r2, r3
 80103fc:	f7f2 f921 	bl	8002642 <_write>
 8010400:	1c43      	adds	r3, r0, #1
 8010402:	d102      	bne.n	801040a <_write_r+0x1e>
 8010404:	682b      	ldr	r3, [r5, #0]
 8010406:	b103      	cbz	r3, 801040a <_write_r+0x1e>
 8010408:	6023      	str	r3, [r4, #0]
 801040a:	bd38      	pop	{r3, r4, r5, pc}
 801040c:	20008ba4 	.word	0x20008ba4

08010410 <_close_r>:
 8010410:	b538      	push	{r3, r4, r5, lr}
 8010412:	4d06      	ldr	r5, [pc, #24]	; (801042c <_close_r+0x1c>)
 8010414:	2300      	movs	r3, #0
 8010416:	4604      	mov	r4, r0
 8010418:	4608      	mov	r0, r1
 801041a:	602b      	str	r3, [r5, #0]
 801041c:	f7f2 f92d 	bl	800267a <_close>
 8010420:	1c43      	adds	r3, r0, #1
 8010422:	d102      	bne.n	801042a <_close_r+0x1a>
 8010424:	682b      	ldr	r3, [r5, #0]
 8010426:	b103      	cbz	r3, 801042a <_close_r+0x1a>
 8010428:	6023      	str	r3, [r4, #0]
 801042a:	bd38      	pop	{r3, r4, r5, pc}
 801042c:	20008ba4 	.word	0x20008ba4

08010430 <_fstat_r>:
 8010430:	b538      	push	{r3, r4, r5, lr}
 8010432:	4d07      	ldr	r5, [pc, #28]	; (8010450 <_fstat_r+0x20>)
 8010434:	2300      	movs	r3, #0
 8010436:	4604      	mov	r4, r0
 8010438:	4608      	mov	r0, r1
 801043a:	4611      	mov	r1, r2
 801043c:	602b      	str	r3, [r5, #0]
 801043e:	f7f2 f928 	bl	8002692 <_fstat>
 8010442:	1c43      	adds	r3, r0, #1
 8010444:	d102      	bne.n	801044c <_fstat_r+0x1c>
 8010446:	682b      	ldr	r3, [r5, #0]
 8010448:	b103      	cbz	r3, 801044c <_fstat_r+0x1c>
 801044a:	6023      	str	r3, [r4, #0]
 801044c:	bd38      	pop	{r3, r4, r5, pc}
 801044e:	bf00      	nop
 8010450:	20008ba4 	.word	0x20008ba4

08010454 <_isatty_r>:
 8010454:	b538      	push	{r3, r4, r5, lr}
 8010456:	4d06      	ldr	r5, [pc, #24]	; (8010470 <_isatty_r+0x1c>)
 8010458:	2300      	movs	r3, #0
 801045a:	4604      	mov	r4, r0
 801045c:	4608      	mov	r0, r1
 801045e:	602b      	str	r3, [r5, #0]
 8010460:	f7f2 f927 	bl	80026b2 <_isatty>
 8010464:	1c43      	adds	r3, r0, #1
 8010466:	d102      	bne.n	801046e <_isatty_r+0x1a>
 8010468:	682b      	ldr	r3, [r5, #0]
 801046a:	b103      	cbz	r3, 801046e <_isatty_r+0x1a>
 801046c:	6023      	str	r3, [r4, #0]
 801046e:	bd38      	pop	{r3, r4, r5, pc}
 8010470:	20008ba4 	.word	0x20008ba4

08010474 <_lseek_r>:
 8010474:	b538      	push	{r3, r4, r5, lr}
 8010476:	4d07      	ldr	r5, [pc, #28]	; (8010494 <_lseek_r+0x20>)
 8010478:	4604      	mov	r4, r0
 801047a:	4608      	mov	r0, r1
 801047c:	4611      	mov	r1, r2
 801047e:	2200      	movs	r2, #0
 8010480:	602a      	str	r2, [r5, #0]
 8010482:	461a      	mov	r2, r3
 8010484:	f7f2 f920 	bl	80026c8 <_lseek>
 8010488:	1c43      	adds	r3, r0, #1
 801048a:	d102      	bne.n	8010492 <_lseek_r+0x1e>
 801048c:	682b      	ldr	r3, [r5, #0]
 801048e:	b103      	cbz	r3, 8010492 <_lseek_r+0x1e>
 8010490:	6023      	str	r3, [r4, #0]
 8010492:	bd38      	pop	{r3, r4, r5, pc}
 8010494:	20008ba4 	.word	0x20008ba4

08010498 <_read_r>:
 8010498:	b538      	push	{r3, r4, r5, lr}
 801049a:	4d07      	ldr	r5, [pc, #28]	; (80104b8 <_read_r+0x20>)
 801049c:	4604      	mov	r4, r0
 801049e:	4608      	mov	r0, r1
 80104a0:	4611      	mov	r1, r2
 80104a2:	2200      	movs	r2, #0
 80104a4:	602a      	str	r2, [r5, #0]
 80104a6:	461a      	mov	r2, r3
 80104a8:	f7f2 f8ae 	bl	8002608 <_read>
 80104ac:	1c43      	adds	r3, r0, #1
 80104ae:	d102      	bne.n	80104b6 <_read_r+0x1e>
 80104b0:	682b      	ldr	r3, [r5, #0]
 80104b2:	b103      	cbz	r3, 80104b6 <_read_r+0x1e>
 80104b4:	6023      	str	r3, [r4, #0]
 80104b6:	bd38      	pop	{r3, r4, r5, pc}
 80104b8:	20008ba4 	.word	0x20008ba4

080104bc <_init>:
 80104bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104be:	bf00      	nop
 80104c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104c2:	bc08      	pop	{r3}
 80104c4:	469e      	mov	lr, r3
 80104c6:	4770      	bx	lr

080104c8 <_fini>:
 80104c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ca:	bf00      	nop
 80104cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ce:	bc08      	pop	{r3}
 80104d0:	469e      	mov	lr, r3
 80104d2:	4770      	bx	lr
